var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod2) => function __require() {
  return mod2 || (0, cb[Object.keys(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __reExport = (target, module, desc) => {
  if (module && typeof module === "object" || typeof module === "function") {
    for (let key2 of __getOwnPropNames(module))
      if (!__hasOwnProp.call(target, key2) && key2 !== "default")
        __defProp(target, key2, { get: () => module[key2], enumerable: !(desc = __getOwnPropDesc(module, key2)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module) => {
  return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
};

// node_modules/@darkforest_eth/types/dist/arrival.js
var require_arrival = __commonJS({
  "node_modules/@darkforest_eth/types/dist/arrival.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArrivalType = void 0;
    exports.ArrivalType = {
      Unknown: 0,
      Normal: 1,
      Photoid: 2,
      Wormhole: 3
    };
  }
});

// node_modules/@darkforest_eth/types/dist/artifact.js
var require_artifact = __commonJS({
  "node_modules/@darkforest_eth/types/dist/artifact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.artifactNameFromArtifact = exports.ArtifactRarityNames = exports.ArtifactRarity = exports.ArtifactTypeNames = exports.ArtifactType = void 0;
    exports.ArtifactType = {
      Unknown: 0,
      Monolith: 1,
      Colossus: 2,
      Spaceship: 3,
      Pyramid: 4,
      Wormhole: 5,
      PlanetaryShield: 6,
      PhotoidCannon: 7,
      BloomFilter: 8,
      BlackDomain: 9,
      ShipMothership: 10,
      ShipCrescent: 11,
      ShipWhale: 12,
      ShipGear: 13,
      ShipTitan: 14
    };
    exports.ArtifactTypeNames = {
      [exports.ArtifactType.Unknown]: "Unknown",
      [exports.ArtifactType.Monolith]: "Monolith",
      [exports.ArtifactType.Colossus]: "Colossus",
      [exports.ArtifactType.Spaceship]: "Spaceship",
      [exports.ArtifactType.Pyramid]: "Pyramid",
      [exports.ArtifactType.Wormhole]: "Wormhole",
      [exports.ArtifactType.PlanetaryShield]: "Planetary Shield",
      [exports.ArtifactType.BlackDomain]: "Black Domain",
      [exports.ArtifactType.PhotoidCannon]: "Photoid Cannon",
      [exports.ArtifactType.BloomFilter]: "Bloom Filter",
      [exports.ArtifactType.ShipMothership]: "Mothership",
      [exports.ArtifactType.ShipCrescent]: "Crescent",
      [exports.ArtifactType.ShipWhale]: "Whale",
      [exports.ArtifactType.ShipGear]: "Gear",
      [exports.ArtifactType.ShipTitan]: "Titan"
    };
    exports.ArtifactRarity = {
      Unknown: 0,
      Common: 1,
      Rare: 2,
      Epic: 3,
      Legendary: 4,
      Mythic: 5
    };
    exports.ArtifactRarityNames = {
      [exports.ArtifactRarity.Unknown]: "Unknown",
      [exports.ArtifactRarity.Common]: "Common",
      [exports.ArtifactRarity.Rare]: "Rare",
      [exports.ArtifactRarity.Epic]: "Epic",
      [exports.ArtifactRarity.Legendary]: "Legendary",
      [exports.ArtifactRarity.Mythic]: "Mythic"
    };
    var godGrammar = {
      god1: [
        "c'",
        "za",
        "ry'",
        "ab'",
        "bak'",
        "dt'",
        "ek'",
        "fah'",
        "q'",
        "qo",
        "van",
        "bow",
        "gui",
        "si"
      ],
      god2: [
        "thun",
        "tchalla",
        "thovo",
        "saron",
        "zoth",
        "sharrj",
        "thulu",
        "ra",
        "wer",
        "doin",
        "renstad",
        "nevere",
        "goth",
        "anton",
        "layton"
      ]
    };
    function artifactNameFromArtifact(artifact) {
      const idNum = parseInt(artifact.id, 16);
      const roll1 = idNum % 7919 % godGrammar.god1.length;
      const roll2 = idNum % 7883 % godGrammar.god2.length;
      const name2 = godGrammar.god1[roll1] + godGrammar.god2[roll2];
      const nameCapitalized = name2.charAt(0).toUpperCase() + name2.slice(1);
      return nameCapitalized;
    }
    exports.artifactNameFromArtifact = artifactNameFromArtifact;
  }
});

// node_modules/@darkforest_eth/types/dist/capture_zones.js
var require_capture_zones = __commonJS({
  "node_modules/@darkforest_eth/types/dist/capture_zones.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@darkforest_eth/types/dist/claim.js
var require_claim = __commonJS({
  "node_modules/@darkforest_eth/types/dist/claim.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@darkforest_eth/types/dist/database_types.js
var require_database_types = __commonJS({
  "node_modules/@darkforest_eth/types/dist/database_types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@darkforest_eth/types/dist/diagnostics.js
var require_diagnostics = __commonJS({
  "node_modules/@darkforest_eth/types/dist/diagnostics.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@darkforest_eth/types/dist/event.js
var require_event = __commonJS({
  "node_modules/@darkforest_eth/types/dist/event.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@darkforest_eth/types/dist/game_types.js
var require_game_types = __commonJS({
  "node_modules/@darkforest_eth/types/dist/game_types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BiomeNames = exports.Biome = exports.SpaceTypeNames = exports.SpaceType = void 0;
    exports.SpaceType = {
      NEBULA: 0,
      SPACE: 1,
      DEEP_SPACE: 2,
      DEAD_SPACE: 3
    };
    exports.SpaceTypeNames = {
      [exports.SpaceType.NEBULA]: "Nebula",
      [exports.SpaceType.SPACE]: "Space",
      [exports.SpaceType.DEEP_SPACE]: "Deep Space",
      [exports.SpaceType.DEAD_SPACE]: "Dead Space"
    };
    exports.Biome = {
      UNKNOWN: 0,
      OCEAN: 1,
      FOREST: 2,
      GRASSLAND: 3,
      TUNDRA: 4,
      SWAMP: 5,
      DESERT: 6,
      ICE: 7,
      WASTELAND: 8,
      LAVA: 9,
      CORRUPTED: 10
    };
    exports.BiomeNames = {
      [exports.Biome.UNKNOWN]: "Unknown",
      [exports.Biome.OCEAN]: "Ocean",
      [exports.Biome.FOREST]: "Forest",
      [exports.Biome.GRASSLAND]: "Grassland",
      [exports.Biome.TUNDRA]: "Tundra",
      [exports.Biome.SWAMP]: "Swamp",
      [exports.Biome.DESERT]: "Desert",
      [exports.Biome.ICE]: "Ice",
      [exports.Biome.WASTELAND]: "Wasteland",
      [exports.Biome.LAVA]: "Lava",
      [exports.Biome.CORRUPTED]: "Corrupted"
    };
  }
});

// node_modules/@darkforest_eth/types/dist/gas_prices.js
var require_gas_prices = __commonJS({
  "node_modules/@darkforest_eth/types/dist/gas_prices.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@darkforest_eth/types/dist/hat.js
var require_hat = __commonJS({
  "node_modules/@darkforest_eth/types/dist/hat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HatType = void 0;
    exports.HatType = {
      GraduationCap: "GraduationCap",
      PartyHat: "PartyHat",
      Fish: "Fish",
      TopHat: "TopHat",
      Fez: "Fez",
      ChefHat: "ChefHat",
      CowboyHat: "CowboyHat",
      PopeHat: "PopeHat",
      Squid: "Squid",
      SantaHat: "SantaHat"
    };
  }
});

// node_modules/@darkforest_eth/types/dist/identifier.js
var require_identifier = __commonJS({
  "node_modules/@darkforest_eth/types/dist/identifier.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@darkforest_eth/types/dist/modal.js
var require_modal = __commonJS({
  "node_modules/@darkforest_eth/types/dist/modal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TooltipName = exports.ModalManagerEvent = exports.CursorState = exports.ModalName = void 0;
    exports.ModalName = {
      Help: "Help",
      PlanetDetails: "PlanetDetails",
      Leaderboard: "Leaderboard",
      PlanetDex: "PlanetDex",
      UpgradeDetails: "UpgradeDetails",
      TwitterVerify: "TwitterVerify",
      Broadcast: "Broadcast",
      Hats: "Hats",
      Settings: "Settings",
      YourArtifacts: "YourArtifacts",
      ManageArtifacts: "ManageArtifacts",
      Plugins: "Plugins",
      PluginWarning: "PluginWarning",
      PluginEditor: "PluginEditor",
      PlanetContextPane: "PlanetContextPane",
      TransactionLog: "TransactionLog",
      WithdrawSilver: "WithdrawSilver",
      Diagnostics: "Diagnostics",
      ArtifactConversation: "ArtifactConversation",
      ArtifactDetails: "ArtifactDetails",
      MapShare: "MapShare",
      ManageAccount: "ManageAccount",
      Onboarding: "Onboarding",
      Private: "Private"
    };
    exports.CursorState = {
      Normal: "Normal",
      TargetingExplorer: "TargetingExplorer",
      TargetingForces: "TargetingForces"
    };
    exports.ModalManagerEvent = {
      StateChanged: "StateChanged",
      MiningCoordsUpdate: "MiningCoordsUpdate"
    };
    exports.TooltipName = {
      SilverGrowth: "SilverGrowth",
      SilverCap: "SilverCap",
      Silver: "Silver",
      TwitterHandle: "TwitterHandle",
      Bonus: "Bonus",
      MinEnergy: "MinEnergy",
      Time50: "Time50",
      Time90: "Time90",
      Pirates: "Pirates",
      Upgrades: "Upgrades",
      PlanetRank: "PlanetRank",
      MaxLevel: "MaxLevel",
      FindArtifact: "FindArtifact",
      ArtifactStored: "ArtifactStored",
      SelectedSilver: "SelectedSilver",
      Rank: "Rank",
      Score: "Score",
      MiningPause: "MiningPause",
      MiningTarget: "MiningTarget",
      HashesPerSec: "HashesPerSec",
      CurrentMining: "CurrentMining",
      HoverPlanet: "HoverPlanet",
      SilverProd: "SilverProd",
      TimeUntilActivationPossible: "TimeUntilActivationPossible",
      DepositArtifact: "DepositArtifact",
      DeactivateArtifact: "DeactivateArtifact",
      WithdrawArtifact: "WithdrawArtifact",
      ActivateArtifact: "ActivateArtifact",
      RetryTransaction: "RetryTransaction",
      CancelTransaction: "CancelTransaction",
      PrioritizeTransaction: "PrioritizeTransaction",
      DefenseMultiplier: "DefenseMultiplier",
      EnergyCapMultiplier: "EnergyCapMultiplier",
      EnergyGrowthMultiplier: "EnergyGrowthMultiplier",
      RangeMultiplier: "RangeMultiplier",
      SpeedMultiplier: "SpeedMultiplier",
      BonusEnergyCap: "BonusEnergyCap",
      BonusEnergyGro: "BonusEnergyGro",
      BonusRange: "BonusRange",
      BonusSpeed: "BonusSpeed",
      BonusDefense: "BonusDefense",
      BonusSpaceJunk: "BonusSpaceJunk",
      Energy: "Energy",
      EnergyGrowth: "EnergyGrowth",
      Range: "Range",
      Speed: "Speed",
      Defense: "Defense",
      SpaceJunk: "SpaceJunk",
      Abandon: "Abandon",
      Clowntown: "Clowntown",
      ArtifactBuff: "ArtifactBuff",
      ModalHelp: "ModalHelp",
      ModalPlanetDetails: "ModalPlanetDetails",
      ModalLeaderboard: "ModalLeaderboard",
      ModalPlanetDex: "ModalPlanetDex",
      ModalUpgradeDetails: "ModalUpgradeDetails",
      ModalTwitterVerification: "ModalTwitterVerification",
      ModalTwitterBroadcast: "ModalTwitterBroadcast",
      ModalHats: "ModalHats",
      ModalSettings: "ModalSettings",
      ModalYourArtifacts: "ModalYourArtifacts",
      ModalFindArtifact: "ModalFindArtifact",
      ModalPlugins: "ModalPlugins",
      ModalWithdrawSilver: "ModalWithdrawSilver",
      NetworkHealth: "NetworkHealth",
      WithdrawSilverButton: "WithdrawSilverButton",
      Invadable: "Invadable",
      Capturable: "Capturable",
      Empty: "Empty"
    };
  }
});

// node_modules/@darkforest_eth/types/dist/planet.js
var require_planet = __commonJS({
  "node_modules/@darkforest_eth/types/dist/planet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DFStatefulAnimation = exports.DFAnimation = exports.PlanetTypeNames = exports.PlanetType = exports.PlanetLevelNames = exports.PlanetLevel = void 0;
    exports.PlanetLevel = {
      ZERO: 0,
      ONE: 1,
      TWO: 2,
      THREE: 3,
      FOUR: 4,
      FIVE: 5,
      SIX: 6,
      SEVEN: 7,
      EIGHT: 8,
      NINE: 9
    };
    exports.PlanetLevelNames = {
      [exports.PlanetLevel.ZERO]: "Level 0",
      [exports.PlanetLevel.ONE]: "Level 1",
      [exports.PlanetLevel.TWO]: "Level 2",
      [exports.PlanetLevel.THREE]: "Level 3",
      [exports.PlanetLevel.FOUR]: "Level 4",
      [exports.PlanetLevel.FIVE]: "Level 5",
      [exports.PlanetLevel.SIX]: "Level 6",
      [exports.PlanetLevel.SEVEN]: "Level 7",
      [exports.PlanetLevel.EIGHT]: "Level 8",
      [exports.PlanetLevel.NINE]: "Level 9"
    };
    exports.PlanetType = {
      PLANET: 0,
      SILVER_MINE: 1,
      RUINS: 2,
      TRADING_POST: 3,
      SILVER_BANK: 4
    };
    exports.PlanetTypeNames = {
      [exports.PlanetType.PLANET]: "Planet",
      [exports.PlanetType.SILVER_MINE]: "Asteroid Field",
      [exports.PlanetType.RUINS]: "Foundry",
      [exports.PlanetType.TRADING_POST]: "Spacetime Rip",
      [exports.PlanetType.SILVER_BANK]: "Quasar"
    };
    var DFAnimation = class {
      constructor(update2) {
        this._update = update2;
        this._value = 0;
      }
      update() {
        this._value = this._update();
      }
      value() {
        return this._value;
      }
    };
    exports.DFAnimation = DFAnimation;
    var DFStatefulAnimation = class extends DFAnimation {
      constructor(state, update2) {
        super(update2);
        this._state = state;
      }
      state() {
        return this._state;
      }
    };
    exports.DFStatefulAnimation = DFStatefulAnimation;
  }
});

// node_modules/@darkforest_eth/types/dist/planetmessage.js
var require_planetmessage = __commonJS({
  "node_modules/@darkforest_eth/types/dist/planetmessage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PlanetMessageType = void 0;
    exports.PlanetMessageType = {
      EmojiFlag: "EmojiFlag"
    };
  }
});

// node_modules/@darkforest_eth/types/dist/player.js
var require_player = __commonJS({
  "node_modules/@darkforest_eth/types/dist/player.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@darkforest_eth/types/dist/plugin.js
var require_plugin = __commonJS({
  "node_modules/@darkforest_eth/types/dist/plugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@darkforest_eth/types/dist/renderer.js
var require_renderer = __commonJS({
  "node_modules/@darkforest_eth/types/dist/renderer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RendererType = exports.RenderZIndex = exports.TextAnchor = exports.TextAlign = exports.UniformType = exports.DrawMode = exports.AttribType = void 0;
    exports.AttribType = {
      Float: 5126,
      UByte: 5121
    };
    exports.DrawMode = {
      Triangles: 4,
      Lines: 1,
      Points: 0
    };
    exports.UniformType = {
      Mat4: 0,
      Mat3: 1,
      UByte: 2,
      Float: 3,
      Texture: 4,
      Vec3: 5
    };
    exports.TextAlign = {
      Left: 0,
      Center: 0.5,
      Right: 1
    };
    exports.TextAnchor = {
      Top: 0,
      Middle: 0.5,
      Bottom: 1
    };
    exports.RenderZIndex = {
      Background: 0,
      Voyages: -1,
      Planets: -10,
      Text: -11,
      UI: -12,
      DEFAULT: -98,
      MAX: -99
    };
    exports.RendererType = {
      Planet: 0,
      Mine: 1,
      SpacetimeRip: 2,
      Quasar: 3,
      Ruins: 4,
      Asteroid: 5,
      Ring: 6,
      Sprite: 7,
      BlackDomain: 8,
      Text: 9,
      Voyager: 10,
      Wormhole: 11,
      MineBody: 12,
      Belt: 13,
      Background: 14,
      Space: 15,
      Unmined: 16,
      Perlin: 17,
      Line: 18,
      Rect: 19,
      Circle: 20,
      UI: 21,
      PlanetManager: 22,
      QuasarBody: 23,
      QuasarRay: 24,
      CaptureZone: 25
    };
  }
});

// node_modules/@darkforest_eth/types/dist/reveal.js
var require_reveal = __commonJS({
  "node_modules/@darkforest_eth/types/dist/reveal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@darkforest_eth/types/dist/setting.js
var require_setting = __commonJS({
  "node_modules/@darkforest_eth/types/dist/setting.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Setting = exports.AutoGasSetting = void 0;
    exports.AutoGasSetting = {
      Slow: "Slow",
      Average: "Average",
      Fast: "Fast"
    };
    exports.Setting = {
      OptOutMetrics: "OptOutMetrics",
      AutoApproveNonPurchaseTransactions: "AutoApproveNonPurchaseTransactions",
      DrawChunkBorders: "DrawChunkBorders",
      HighPerformanceRendering: "HighPerformanceRendering",
      MoveNotifications: "MoveNotifications",
      GasFeeGwei: "GasFeeGwei",
      TerminalVisible: "TerminalVisible",
      HasAcceptedPluginRisk: "HasAcceptedPluginRisk",
      FoundPirates: "FoundPirates",
      TutorialCompleted: "TutorialCompleted",
      FoundSilver: "FoundSilver",
      FoundSilverBank: "FoundSilverBank",
      FoundTradingPost: "FoundTradingPost",
      FoundComet: "FoundComet",
      FoundArtifact: "FoundArtifact",
      FoundDeepSpace: "FoundDeepSpace",
      FoundSpace: "FoundSpace",
      NewPlayer: "NewPlayer",
      MiningCores: "MiningCores",
      TutorialOpen: "TutorialOpen",
      IsMining: "IsMining",
      DisableDefaultShortcuts: "DisableDefaultShortcuts",
      ExperimentalFeatures: "ExperimentalFeatures",
      DisableEmojiRendering: "DisableEmojiRendering",
      DisableHatRendering: "DisableHatRendering",
      AutoClearConfirmedTransactionsAfterSeconds: "AutoClearConfirmedTransactionsAfterSeconds",
      AutoClearRejectedTransactionsAfterSeconds: "AutoClearRejectedTransactionsAfterSeconds",
      RendererColorInnerNebula: "RendererColorInnerNebula",
      RendererColorNebula: "RendererColorNebula",
      RendererColorSpace: "RendererColorSpace",
      RendererColorDeepSpace: "RendererColorDeepSpace",
      RendererColorDeadSpace: "RendererColorDeadSpace",
      DisableFancySpaceEffect: "DisableFancySpaceEffect",
      ForceReloadEmbeddedPlugins: "ForceReloadEmbeddedPlugins"
    };
  }
});

// node_modules/@darkforest_eth/types/dist/transaction.js
var require_transaction = __commonJS({
  "node_modules/@darkforest_eth/types/dist/transaction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@darkforest_eth/types/dist/transactions.js
var require_transactions = __commonJS({
  "node_modules/@darkforest_eth/types/dist/transactions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@darkforest_eth/types/dist/upgrade.js
var require_upgrade = __commonJS({
  "node_modules/@darkforest_eth/types/dist/upgrade.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpgradeBranchName = void 0;
    exports.UpgradeBranchName = {
      Defense: 0,
      Range: 1,
      Speed: 2
    };
  }
});

// node_modules/@darkforest_eth/types/dist/utility.js
var require_utility = __commonJS({
  "node_modules/@darkforest_eth/types/dist/utility.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@darkforest_eth/types/dist/webserver.js
var require_webserver = __commonJS({
  "node_modules/@darkforest_eth/types/dist/webserver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@darkforest_eth/types/dist/world.js
var require_world = __commonJS({
  "node_modules/@darkforest_eth/types/dist/world.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@darkforest_eth/types/dist/index.js
var require_dist = __commonJS({
  "node_modules/@darkforest_eth/types/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0)
        k22 = k3;
      Object.defineProperty(o3, k22, { enumerable: true, get: function() {
        return m3[k3];
      } });
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0)
        k22 = k3;
      o3[k22] = m3[k3];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p2 in m3)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m3, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_arrival(), exports);
    __exportStar(require_artifact(), exports);
    __exportStar(require_capture_zones(), exports);
    __exportStar(require_claim(), exports);
    __exportStar(require_database_types(), exports);
    __exportStar(require_diagnostics(), exports);
    __exportStar(require_event(), exports);
    __exportStar(require_game_types(), exports);
    __exportStar(require_gas_prices(), exports);
    __exportStar(require_hat(), exports);
    __exportStar(require_identifier(), exports);
    __exportStar(require_modal(), exports);
    __exportStar(require_planet(), exports);
    __exportStar(require_planetmessage(), exports);
    __exportStar(require_player(), exports);
    __exportStar(require_plugin(), exports);
    __exportStar(require_renderer(), exports);
    __exportStar(require_reveal(), exports);
    __exportStar(require_setting(), exports);
    __exportStar(require_transaction(), exports);
    __exportStar(require_transactions(), exports);
    __exportStar(require_upgrade(), exports);
    __exportStar(require_utility(), exports);
    __exportStar(require_webserver(), exports);
    __exportStar(require_world(), exports);
  }
});

// node_modules/big-integer/BigInteger.js
var require_BigInteger = __commonJS({
  "node_modules/big-integer/BigInteger.js"(exports, module) {
    var bigInt = function(undefined2) {
      "use strict";
      var BASE = 1e7, LOG_BASE = 7, MAX_INT = 9007199254740992, MAX_INT_ARR = smallToArray(MAX_INT), DEFAULT_ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz";
      var supportsNativeBigInt2 = typeof BigInt === "function";
      function Integer(v3, radix, alphabet2, caseSensitive) {
        if (typeof v3 === "undefined")
          return Integer[0];
        if (typeof radix !== "undefined")
          return +radix === 10 && !alphabet2 ? parseValue(v3) : parseBase(v3, radix, alphabet2, caseSensitive);
        return parseValue(v3);
      }
      function BigInteger2(value, sign3) {
        this.value = value;
        this.sign = sign3;
        this.isSmall = false;
      }
      BigInteger2.prototype = Object.create(Integer.prototype);
      function SmallInteger(value) {
        this.value = value;
        this.sign = value < 0;
        this.isSmall = true;
      }
      SmallInteger.prototype = Object.create(Integer.prototype);
      function NativeBigInt(value) {
        this.value = value;
      }
      NativeBigInt.prototype = Object.create(Integer.prototype);
      function isPrecise(n2) {
        return -MAX_INT < n2 && n2 < MAX_INT;
      }
      function smallToArray(n2) {
        if (n2 < 1e7)
          return [n2];
        if (n2 < 1e14)
          return [n2 % 1e7, Math.floor(n2 / 1e7)];
        return [n2 % 1e7, Math.floor(n2 / 1e7) % 1e7, Math.floor(n2 / 1e14)];
      }
      function arrayToSmall(arr) {
        trim(arr);
        var length = arr.length;
        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {
          switch (length) {
            case 0:
              return 0;
            case 1:
              return arr[0];
            case 2:
              return arr[0] + arr[1] * BASE;
            default:
              return arr[0] + (arr[1] + arr[2] * BASE) * BASE;
          }
        }
        return arr;
      }
      function trim(v3) {
        var i4 = v3.length;
        while (v3[--i4] === 0)
          ;
        v3.length = i4 + 1;
      }
      function createArray(length) {
        var x3 = new Array(length);
        var i4 = -1;
        while (++i4 < length) {
          x3[i4] = 0;
        }
        return x3;
      }
      function truncate(n2) {
        if (n2 > 0)
          return Math.floor(n2);
        return Math.ceil(n2);
      }
      function add4(a3, b3) {
        var l_a = a3.length, l_b = b3.length, r3 = new Array(l_a), carry = 0, base2 = BASE, sum, i4;
        for (i4 = 0; i4 < l_b; i4++) {
          sum = a3[i4] + b3[i4] + carry;
          carry = sum >= base2 ? 1 : 0;
          r3[i4] = sum - carry * base2;
        }
        while (i4 < l_a) {
          sum = a3[i4] + carry;
          carry = sum === base2 ? 1 : 0;
          r3[i4++] = sum - carry * base2;
        }
        if (carry > 0)
          r3.push(carry);
        return r3;
      }
      function addAny(a3, b3) {
        if (a3.length >= b3.length)
          return add4(a3, b3);
        return add4(b3, a3);
      }
      function addSmall(a3, carry) {
        var l3 = a3.length, r3 = new Array(l3), base2 = BASE, sum, i4;
        for (i4 = 0; i4 < l3; i4++) {
          sum = a3[i4] - base2 + carry;
          carry = Math.floor(sum / base2);
          r3[i4] = sum - carry * base2;
          carry += 1;
        }
        while (carry > 0) {
          r3[i4++] = carry % base2;
          carry = Math.floor(carry / base2);
        }
        return r3;
      }
      BigInteger2.prototype.add = function(v3) {
        var n2 = parseValue(v3);
        if (this.sign !== n2.sign) {
          return this.subtract(n2.negate());
        }
        var a3 = this.value, b3 = n2.value;
        if (n2.isSmall) {
          return new BigInteger2(addSmall(a3, Math.abs(b3)), this.sign);
        }
        return new BigInteger2(addAny(a3, b3), this.sign);
      };
      BigInteger2.prototype.plus = BigInteger2.prototype.add;
      SmallInteger.prototype.add = function(v3) {
        var n2 = parseValue(v3);
        var a3 = this.value;
        if (a3 < 0 !== n2.sign) {
          return this.subtract(n2.negate());
        }
        var b3 = n2.value;
        if (n2.isSmall) {
          if (isPrecise(a3 + b3))
            return new SmallInteger(a3 + b3);
          b3 = smallToArray(Math.abs(b3));
        }
        return new BigInteger2(addSmall(b3, Math.abs(a3)), a3 < 0);
      };
      SmallInteger.prototype.plus = SmallInteger.prototype.add;
      NativeBigInt.prototype.add = function(v3) {
        return new NativeBigInt(this.value + parseValue(v3).value);
      };
      NativeBigInt.prototype.plus = NativeBigInt.prototype.add;
      function subtract(a3, b3) {
        var a_l = a3.length, b_l = b3.length, r3 = new Array(a_l), borrow = 0, base2 = BASE, i4, difference;
        for (i4 = 0; i4 < b_l; i4++) {
          difference = a3[i4] - borrow - b3[i4];
          if (difference < 0) {
            difference += base2;
            borrow = 1;
          } else
            borrow = 0;
          r3[i4] = difference;
        }
        for (i4 = b_l; i4 < a_l; i4++) {
          difference = a3[i4] - borrow;
          if (difference < 0)
            difference += base2;
          else {
            r3[i4++] = difference;
            break;
          }
          r3[i4] = difference;
        }
        for (; i4 < a_l; i4++) {
          r3[i4] = a3[i4];
        }
        trim(r3);
        return r3;
      }
      function subtractAny(a3, b3, sign3) {
        var value;
        if (compareAbs(a3, b3) >= 0) {
          value = subtract(a3, b3);
        } else {
          value = subtract(b3, a3);
          sign3 = !sign3;
        }
        value = arrayToSmall(value);
        if (typeof value === "number") {
          if (sign3)
            value = -value;
          return new SmallInteger(value);
        }
        return new BigInteger2(value, sign3);
      }
      function subtractSmall(a3, b3, sign3) {
        var l3 = a3.length, r3 = new Array(l3), carry = -b3, base2 = BASE, i4, difference;
        for (i4 = 0; i4 < l3; i4++) {
          difference = a3[i4] + carry;
          carry = Math.floor(difference / base2);
          difference %= base2;
          r3[i4] = difference < 0 ? difference + base2 : difference;
        }
        r3 = arrayToSmall(r3);
        if (typeof r3 === "number") {
          if (sign3)
            r3 = -r3;
          return new SmallInteger(r3);
        }
        return new BigInteger2(r3, sign3);
      }
      BigInteger2.prototype.subtract = function(v3) {
        var n2 = parseValue(v3);
        if (this.sign !== n2.sign) {
          return this.add(n2.negate());
        }
        var a3 = this.value, b3 = n2.value;
        if (n2.isSmall)
          return subtractSmall(a3, Math.abs(b3), this.sign);
        return subtractAny(a3, b3, this.sign);
      };
      BigInteger2.prototype.minus = BigInteger2.prototype.subtract;
      SmallInteger.prototype.subtract = function(v3) {
        var n2 = parseValue(v3);
        var a3 = this.value;
        if (a3 < 0 !== n2.sign) {
          return this.add(n2.negate());
        }
        var b3 = n2.value;
        if (n2.isSmall) {
          return new SmallInteger(a3 - b3);
        }
        return subtractSmall(b3, Math.abs(a3), a3 >= 0);
      };
      SmallInteger.prototype.minus = SmallInteger.prototype.subtract;
      NativeBigInt.prototype.subtract = function(v3) {
        return new NativeBigInt(this.value - parseValue(v3).value);
      };
      NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;
      BigInteger2.prototype.negate = function() {
        return new BigInteger2(this.value, !this.sign);
      };
      SmallInteger.prototype.negate = function() {
        var sign3 = this.sign;
        var small = new SmallInteger(-this.value);
        small.sign = !sign3;
        return small;
      };
      NativeBigInt.prototype.negate = function() {
        return new NativeBigInt(-this.value);
      };
      BigInteger2.prototype.abs = function() {
        return new BigInteger2(this.value, false);
      };
      SmallInteger.prototype.abs = function() {
        return new SmallInteger(Math.abs(this.value));
      };
      NativeBigInt.prototype.abs = function() {
        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);
      };
      function multiplyLong(a3, b3) {
        var a_l = a3.length, b_l = b3.length, l3 = a_l + b_l, r3 = createArray(l3), base2 = BASE, product, carry, i4, a_i, b_j;
        for (i4 = 0; i4 < a_l; ++i4) {
          a_i = a3[i4];
          for (var j3 = 0; j3 < b_l; ++j3) {
            b_j = b3[j3];
            product = a_i * b_j + r3[i4 + j3];
            carry = Math.floor(product / base2);
            r3[i4 + j3] = product - carry * base2;
            r3[i4 + j3 + 1] += carry;
          }
        }
        trim(r3);
        return r3;
      }
      function multiplySmall(a3, b3) {
        var l3 = a3.length, r3 = new Array(l3), base2 = BASE, carry = 0, product, i4;
        for (i4 = 0; i4 < l3; i4++) {
          product = a3[i4] * b3 + carry;
          carry = Math.floor(product / base2);
          r3[i4] = product - carry * base2;
        }
        while (carry > 0) {
          r3[i4++] = carry % base2;
          carry = Math.floor(carry / base2);
        }
        return r3;
      }
      function shiftLeft2(x3, n2) {
        var r3 = [];
        while (n2-- > 0)
          r3.push(0);
        return r3.concat(x3);
      }
      function multiplyKaratsuba(x3, y3) {
        var n2 = Math.max(x3.length, y3.length);
        if (n2 <= 30)
          return multiplyLong(x3, y3);
        n2 = Math.ceil(n2 / 2);
        var b3 = x3.slice(n2), a3 = x3.slice(0, n2), d2 = y3.slice(n2), c5 = y3.slice(0, n2);
        var ac = multiplyKaratsuba(a3, c5), bd = multiplyKaratsuba(b3, d2), abcd = multiplyKaratsuba(addAny(a3, b3), addAny(c5, d2));
        var product = addAny(addAny(ac, shiftLeft2(subtract(subtract(abcd, ac), bd), n2)), shiftLeft2(bd, 2 * n2));
        trim(product);
        return product;
      }
      function useKaratsuba(l1, l22) {
        return -0.012 * l1 - 0.012 * l22 + 15e-6 * l1 * l22 > 0;
      }
      BigInteger2.prototype.multiply = function(v3) {
        var n2 = parseValue(v3), a3 = this.value, b3 = n2.value, sign3 = this.sign !== n2.sign, abs2;
        if (n2.isSmall) {
          if (b3 === 0)
            return Integer[0];
          if (b3 === 1)
            return this;
          if (b3 === -1)
            return this.negate();
          abs2 = Math.abs(b3);
          if (abs2 < BASE) {
            return new BigInteger2(multiplySmall(a3, abs2), sign3);
          }
          b3 = smallToArray(abs2);
        }
        if (useKaratsuba(a3.length, b3.length))
          return new BigInteger2(multiplyKaratsuba(a3, b3), sign3);
        return new BigInteger2(multiplyLong(a3, b3), sign3);
      };
      BigInteger2.prototype.times = BigInteger2.prototype.multiply;
      function multiplySmallAndArray(a3, b3, sign3) {
        if (a3 < BASE) {
          return new BigInteger2(multiplySmall(b3, a3), sign3);
        }
        return new BigInteger2(multiplyLong(b3, smallToArray(a3)), sign3);
      }
      SmallInteger.prototype._multiplyBySmall = function(a3) {
        if (isPrecise(a3.value * this.value)) {
          return new SmallInteger(a3.value * this.value);
        }
        return multiplySmallAndArray(Math.abs(a3.value), smallToArray(Math.abs(this.value)), this.sign !== a3.sign);
      };
      BigInteger2.prototype._multiplyBySmall = function(a3) {
        if (a3.value === 0)
          return Integer[0];
        if (a3.value === 1)
          return this;
        if (a3.value === -1)
          return this.negate();
        return multiplySmallAndArray(Math.abs(a3.value), this.value, this.sign !== a3.sign);
      };
      SmallInteger.prototype.multiply = function(v3) {
        return parseValue(v3)._multiplyBySmall(this);
      };
      SmallInteger.prototype.times = SmallInteger.prototype.multiply;
      NativeBigInt.prototype.multiply = function(v3) {
        return new NativeBigInt(this.value * parseValue(v3).value);
      };
      NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;
      function square2(a3) {
        var l3 = a3.length, r3 = createArray(l3 + l3), base2 = BASE, product, carry, i4, a_i, a_j;
        for (i4 = 0; i4 < l3; i4++) {
          a_i = a3[i4];
          carry = 0 - a_i * a_i;
          for (var j3 = i4; j3 < l3; j3++) {
            a_j = a3[j3];
            product = 2 * (a_i * a_j) + r3[i4 + j3] + carry;
            carry = Math.floor(product / base2);
            r3[i4 + j3] = product - carry * base2;
          }
          r3[i4 + l3] = carry;
        }
        trim(r3);
        return r3;
      }
      BigInteger2.prototype.square = function() {
        return new BigInteger2(square2(this.value), false);
      };
      SmallInteger.prototype.square = function() {
        var value = this.value * this.value;
        if (isPrecise(value))
          return new SmallInteger(value);
        return new BigInteger2(square2(smallToArray(Math.abs(this.value))), false);
      };
      NativeBigInt.prototype.square = function(v3) {
        return new NativeBigInt(this.value * this.value);
      };
      function divMod1(a3, b3) {
        var a_l = a3.length, b_l = b3.length, base2 = BASE, result = createArray(b3.length), divisorMostSignificantDigit = b3[b_l - 1], lambda = Math.ceil(base2 / (2 * divisorMostSignificantDigit)), remainder = multiplySmall(a3, lambda), divisor = multiplySmall(b3, lambda), quotientDigit, shift, carry, borrow, i4, l3, q;
        if (remainder.length <= a_l)
          remainder.push(0);
        divisor.push(0);
        divisorMostSignificantDigit = divisor[b_l - 1];
        for (shift = a_l - b_l; shift >= 0; shift--) {
          quotientDigit = base2 - 1;
          if (remainder[shift + b_l] !== divisorMostSignificantDigit) {
            quotientDigit = Math.floor((remainder[shift + b_l] * base2 + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);
          }
          carry = 0;
          borrow = 0;
          l3 = divisor.length;
          for (i4 = 0; i4 < l3; i4++) {
            carry += quotientDigit * divisor[i4];
            q = Math.floor(carry / base2);
            borrow += remainder[shift + i4] - (carry - q * base2);
            carry = q;
            if (borrow < 0) {
              remainder[shift + i4] = borrow + base2;
              borrow = -1;
            } else {
              remainder[shift + i4] = borrow;
              borrow = 0;
            }
          }
          while (borrow !== 0) {
            quotientDigit -= 1;
            carry = 0;
            for (i4 = 0; i4 < l3; i4++) {
              carry += remainder[shift + i4] - base2 + divisor[i4];
              if (carry < 0) {
                remainder[shift + i4] = carry + base2;
                carry = 0;
              } else {
                remainder[shift + i4] = carry;
                carry = 1;
              }
            }
            borrow += carry;
          }
          result[shift] = quotientDigit;
        }
        remainder = divModSmall(remainder, lambda)[0];
        return [arrayToSmall(result), arrayToSmall(remainder)];
      }
      function divMod2(a3, b3) {
        var a_l = a3.length, b_l = b3.length, result = [], part = [], base2 = BASE, guess, xlen, highx, highy, check;
        while (a_l) {
          part.unshift(a3[--a_l]);
          trim(part);
          if (compareAbs(part, b3) < 0) {
            result.push(0);
            continue;
          }
          xlen = part.length;
          highx = part[xlen - 1] * base2 + part[xlen - 2];
          highy = b3[b_l - 1] * base2 + b3[b_l - 2];
          if (xlen > b_l) {
            highx = (highx + 1) * base2;
          }
          guess = Math.ceil(highx / highy);
          do {
            check = multiplySmall(b3, guess);
            if (compareAbs(check, part) <= 0)
              break;
            guess--;
          } while (guess);
          result.push(guess);
          part = subtract(part, check);
        }
        result.reverse();
        return [arrayToSmall(result), arrayToSmall(part)];
      }
      function divModSmall(value, lambda) {
        var length = value.length, quotient = createArray(length), base2 = BASE, i4, q, remainder, divisor;
        remainder = 0;
        for (i4 = length - 1; i4 >= 0; --i4) {
          divisor = remainder * base2 + value[i4];
          q = truncate(divisor / lambda);
          remainder = divisor - q * lambda;
          quotient[i4] = q | 0;
        }
        return [quotient, remainder | 0];
      }
      function divModAny(self2, v3) {
        var value, n2 = parseValue(v3);
        if (supportsNativeBigInt2) {
          return [new NativeBigInt(self2.value / n2.value), new NativeBigInt(self2.value % n2.value)];
        }
        var a3 = self2.value, b3 = n2.value;
        var quotient;
        if (b3 === 0)
          throw new Error("Cannot divide by zero");
        if (self2.isSmall) {
          if (n2.isSmall) {
            return [new SmallInteger(truncate(a3 / b3)), new SmallInteger(a3 % b3)];
          }
          return [Integer[0], self2];
        }
        if (n2.isSmall) {
          if (b3 === 1)
            return [self2, Integer[0]];
          if (b3 == -1)
            return [self2.negate(), Integer[0]];
          var abs2 = Math.abs(b3);
          if (abs2 < BASE) {
            value = divModSmall(a3, abs2);
            quotient = arrayToSmall(value[0]);
            var remainder = value[1];
            if (self2.sign)
              remainder = -remainder;
            if (typeof quotient === "number") {
              if (self2.sign !== n2.sign)
                quotient = -quotient;
              return [new SmallInteger(quotient), new SmallInteger(remainder)];
            }
            return [new BigInteger2(quotient, self2.sign !== n2.sign), new SmallInteger(remainder)];
          }
          b3 = smallToArray(abs2);
        }
        var comparison = compareAbs(a3, b3);
        if (comparison === -1)
          return [Integer[0], self2];
        if (comparison === 0)
          return [Integer[self2.sign === n2.sign ? 1 : -1], Integer[0]];
        if (a3.length + b3.length <= 200)
          value = divMod1(a3, b3);
        else
          value = divMod2(a3, b3);
        quotient = value[0];
        var qSign = self2.sign !== n2.sign, mod2 = value[1], mSign = self2.sign;
        if (typeof quotient === "number") {
          if (qSign)
            quotient = -quotient;
          quotient = new SmallInteger(quotient);
        } else
          quotient = new BigInteger2(quotient, qSign);
        if (typeof mod2 === "number") {
          if (mSign)
            mod2 = -mod2;
          mod2 = new SmallInteger(mod2);
        } else
          mod2 = new BigInteger2(mod2, mSign);
        return [quotient, mod2];
      }
      BigInteger2.prototype.divmod = function(v3) {
        var result = divModAny(this, v3);
        return {
          quotient: result[0],
          remainder: result[1]
        };
      };
      NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger2.prototype.divmod;
      BigInteger2.prototype.divide = function(v3) {
        return divModAny(this, v3)[0];
      };
      NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function(v3) {
        return new NativeBigInt(this.value / parseValue(v3).value);
      };
      SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger2.prototype.over = BigInteger2.prototype.divide;
      BigInteger2.prototype.mod = function(v3) {
        return divModAny(this, v3)[1];
      };
      NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function(v3) {
        return new NativeBigInt(this.value % parseValue(v3).value);
      };
      SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger2.prototype.remainder = BigInteger2.prototype.mod;
      BigInteger2.prototype.pow = function(v3) {
        var n2 = parseValue(v3), a3 = this.value, b3 = n2.value, value, x3, y3;
        if (b3 === 0)
          return Integer[1];
        if (a3 === 0)
          return Integer[0];
        if (a3 === 1)
          return Integer[1];
        if (a3 === -1)
          return n2.isEven() ? Integer[1] : Integer[-1];
        if (n2.sign) {
          return Integer[0];
        }
        if (!n2.isSmall)
          throw new Error("The exponent " + n2.toString() + " is too large.");
        if (this.isSmall) {
          if (isPrecise(value = Math.pow(a3, b3)))
            return new SmallInteger(truncate(value));
        }
        x3 = this;
        y3 = Integer[1];
        while (true) {
          if (b3 & true) {
            y3 = y3.times(x3);
            --b3;
          }
          if (b3 === 0)
            break;
          b3 /= 2;
          x3 = x3.square();
        }
        return y3;
      };
      SmallInteger.prototype.pow = BigInteger2.prototype.pow;
      NativeBigInt.prototype.pow = function(v3) {
        var n2 = parseValue(v3);
        var a3 = this.value, b3 = n2.value;
        var _0 = BigInt(0), _1 = BigInt(1), _22 = BigInt(2);
        if (b3 === _0)
          return Integer[1];
        if (a3 === _0)
          return Integer[0];
        if (a3 === _1)
          return Integer[1];
        if (a3 === BigInt(-1))
          return n2.isEven() ? Integer[1] : Integer[-1];
        if (n2.isNegative())
          return new NativeBigInt(_0);
        var x3 = this;
        var y3 = Integer[1];
        while (true) {
          if ((b3 & _1) === _1) {
            y3 = y3.times(x3);
            --b3;
          }
          if (b3 === _0)
            break;
          b3 /= _22;
          x3 = x3.square();
        }
        return y3;
      };
      BigInteger2.prototype.modPow = function(exp2, mod2) {
        exp2 = parseValue(exp2);
        mod2 = parseValue(mod2);
        if (mod2.isZero())
          throw new Error("Cannot take modPow with modulus 0");
        var r3 = Integer[1], base2 = this.mod(mod2);
        if (exp2.isNegative()) {
          exp2 = exp2.multiply(Integer[-1]);
          base2 = base2.modInv(mod2);
        }
        while (exp2.isPositive()) {
          if (base2.isZero())
            return Integer[0];
          if (exp2.isOdd())
            r3 = r3.multiply(base2).mod(mod2);
          exp2 = exp2.divide(2);
          base2 = base2.square().mod(mod2);
        }
        return r3;
      };
      NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger2.prototype.modPow;
      function compareAbs(a3, b3) {
        if (a3.length !== b3.length) {
          return a3.length > b3.length ? 1 : -1;
        }
        for (var i4 = a3.length - 1; i4 >= 0; i4--) {
          if (a3[i4] !== b3[i4])
            return a3[i4] > b3[i4] ? 1 : -1;
        }
        return 0;
      }
      BigInteger2.prototype.compareAbs = function(v3) {
        var n2 = parseValue(v3), a3 = this.value, b3 = n2.value;
        if (n2.isSmall)
          return 1;
        return compareAbs(a3, b3);
      };
      SmallInteger.prototype.compareAbs = function(v3) {
        var n2 = parseValue(v3), a3 = Math.abs(this.value), b3 = n2.value;
        if (n2.isSmall) {
          b3 = Math.abs(b3);
          return a3 === b3 ? 0 : a3 > b3 ? 1 : -1;
        }
        return -1;
      };
      NativeBigInt.prototype.compareAbs = function(v3) {
        var a3 = this.value;
        var b3 = parseValue(v3).value;
        a3 = a3 >= 0 ? a3 : -a3;
        b3 = b3 >= 0 ? b3 : -b3;
        return a3 === b3 ? 0 : a3 > b3 ? 1 : -1;
      };
      BigInteger2.prototype.compare = function(v3) {
        if (v3 === Infinity) {
          return -1;
        }
        if (v3 === -Infinity) {
          return 1;
        }
        var n2 = parseValue(v3), a3 = this.value, b3 = n2.value;
        if (this.sign !== n2.sign) {
          return n2.sign ? 1 : -1;
        }
        if (n2.isSmall) {
          return this.sign ? -1 : 1;
        }
        return compareAbs(a3, b3) * (this.sign ? -1 : 1);
      };
      BigInteger2.prototype.compareTo = BigInteger2.prototype.compare;
      SmallInteger.prototype.compare = function(v3) {
        if (v3 === Infinity) {
          return -1;
        }
        if (v3 === -Infinity) {
          return 1;
        }
        var n2 = parseValue(v3), a3 = this.value, b3 = n2.value;
        if (n2.isSmall) {
          return a3 == b3 ? 0 : a3 > b3 ? 1 : -1;
        }
        if (a3 < 0 !== n2.sign) {
          return a3 < 0 ? -1 : 1;
        }
        return a3 < 0 ? 1 : -1;
      };
      SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;
      NativeBigInt.prototype.compare = function(v3) {
        if (v3 === Infinity) {
          return -1;
        }
        if (v3 === -Infinity) {
          return 1;
        }
        var a3 = this.value;
        var b3 = parseValue(v3).value;
        return a3 === b3 ? 0 : a3 > b3 ? 1 : -1;
      };
      NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;
      BigInteger2.prototype.equals = function(v3) {
        return this.compare(v3) === 0;
      };
      NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger2.prototype.eq = BigInteger2.prototype.equals;
      BigInteger2.prototype.notEquals = function(v3) {
        return this.compare(v3) !== 0;
      };
      NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger2.prototype.neq = BigInteger2.prototype.notEquals;
      BigInteger2.prototype.greater = function(v3) {
        return this.compare(v3) > 0;
      };
      NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger2.prototype.gt = BigInteger2.prototype.greater;
      BigInteger2.prototype.lesser = function(v3) {
        return this.compare(v3) < 0;
      };
      NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger2.prototype.lt = BigInteger2.prototype.lesser;
      BigInteger2.prototype.greaterOrEquals = function(v3) {
        return this.compare(v3) >= 0;
      };
      NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger2.prototype.geq = BigInteger2.prototype.greaterOrEquals;
      BigInteger2.prototype.lesserOrEquals = function(v3) {
        return this.compare(v3) <= 0;
      };
      NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger2.prototype.leq = BigInteger2.prototype.lesserOrEquals;
      BigInteger2.prototype.isEven = function() {
        return (this.value[0] & 1) === 0;
      };
      SmallInteger.prototype.isEven = function() {
        return (this.value & 1) === 0;
      };
      NativeBigInt.prototype.isEven = function() {
        return (this.value & BigInt(1)) === BigInt(0);
      };
      BigInteger2.prototype.isOdd = function() {
        return (this.value[0] & 1) === 1;
      };
      SmallInteger.prototype.isOdd = function() {
        return (this.value & 1) === 1;
      };
      NativeBigInt.prototype.isOdd = function() {
        return (this.value & BigInt(1)) === BigInt(1);
      };
      BigInteger2.prototype.isPositive = function() {
        return !this.sign;
      };
      SmallInteger.prototype.isPositive = function() {
        return this.value > 0;
      };
      NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;
      BigInteger2.prototype.isNegative = function() {
        return this.sign;
      };
      SmallInteger.prototype.isNegative = function() {
        return this.value < 0;
      };
      NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;
      BigInteger2.prototype.isUnit = function() {
        return false;
      };
      SmallInteger.prototype.isUnit = function() {
        return Math.abs(this.value) === 1;
      };
      NativeBigInt.prototype.isUnit = function() {
        return this.abs().value === BigInt(1);
      };
      BigInteger2.prototype.isZero = function() {
        return false;
      };
      SmallInteger.prototype.isZero = function() {
        return this.value === 0;
      };
      NativeBigInt.prototype.isZero = function() {
        return this.value === BigInt(0);
      };
      BigInteger2.prototype.isDivisibleBy = function(v3) {
        var n2 = parseValue(v3);
        if (n2.isZero())
          return false;
        if (n2.isUnit())
          return true;
        if (n2.compareAbs(2) === 0)
          return this.isEven();
        return this.mod(n2).isZero();
      };
      NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger2.prototype.isDivisibleBy;
      function isBasicPrime(v3) {
        var n2 = v3.abs();
        if (n2.isUnit())
          return false;
        if (n2.equals(2) || n2.equals(3) || n2.equals(5))
          return true;
        if (n2.isEven() || n2.isDivisibleBy(3) || n2.isDivisibleBy(5))
          return false;
        if (n2.lesser(49))
          return true;
      }
      function millerRabinTest(n2, a3) {
        var nPrev = n2.prev(), b3 = nPrev, r3 = 0, d2, t3, i4, x3;
        while (b3.isEven())
          b3 = b3.divide(2), r3++;
        next:
          for (i4 = 0; i4 < a3.length; i4++) {
            if (n2.lesser(a3[i4]))
              continue;
            x3 = bigInt(a3[i4]).modPow(b3, n2);
            if (x3.isUnit() || x3.equals(nPrev))
              continue;
            for (d2 = r3 - 1; d2 != 0; d2--) {
              x3 = x3.square().mod(n2);
              if (x3.isUnit())
                return false;
              if (x3.equals(nPrev))
                continue next;
            }
            return false;
          }
        return true;
      }
      BigInteger2.prototype.isPrime = function(strict) {
        var isPrime = isBasicPrime(this);
        if (isPrime !== undefined2)
          return isPrime;
        var n2 = this.abs();
        var bits2 = n2.bitLength();
        if (bits2 <= 64)
          return millerRabinTest(n2, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);
        var logN = Math.log(2) * bits2.toJSNumber();
        var t3 = Math.ceil(strict === true ? 2 * Math.pow(logN, 2) : logN);
        for (var a3 = [], i4 = 0; i4 < t3; i4++) {
          a3.push(bigInt(i4 + 2));
        }
        return millerRabinTest(n2, a3);
      };
      NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger2.prototype.isPrime;
      BigInteger2.prototype.isProbablePrime = function(iterations, rng) {
        var isPrime = isBasicPrime(this);
        if (isPrime !== undefined2)
          return isPrime;
        var n2 = this.abs();
        var t3 = iterations === undefined2 ? 5 : iterations;
        for (var a3 = [], i4 = 0; i4 < t3; i4++) {
          a3.push(bigInt.randBetween(2, n2.minus(2), rng));
        }
        return millerRabinTest(n2, a3);
      };
      NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger2.prototype.isProbablePrime;
      BigInteger2.prototype.modInv = function(n2) {
        var t3 = bigInt.zero, newT = bigInt.one, r3 = parseValue(n2), newR = this.abs(), q, lastT, lastR;
        while (!newR.isZero()) {
          q = r3.divide(newR);
          lastT = t3;
          lastR = r3;
          t3 = newT;
          r3 = newR;
          newT = lastT.subtract(q.multiply(newT));
          newR = lastR.subtract(q.multiply(newR));
        }
        if (!r3.isUnit())
          throw new Error(this.toString() + " and " + n2.toString() + " are not co-prime");
        if (t3.compare(0) === -1) {
          t3 = t3.add(n2);
        }
        if (this.isNegative()) {
          return t3.negate();
        }
        return t3;
      };
      NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger2.prototype.modInv;
      BigInteger2.prototype.next = function() {
        var value = this.value;
        if (this.sign) {
          return subtractSmall(value, 1, this.sign);
        }
        return new BigInteger2(addSmall(value, 1), this.sign);
      };
      SmallInteger.prototype.next = function() {
        var value = this.value;
        if (value + 1 < MAX_INT)
          return new SmallInteger(value + 1);
        return new BigInteger2(MAX_INT_ARR, false);
      };
      NativeBigInt.prototype.next = function() {
        return new NativeBigInt(this.value + BigInt(1));
      };
      BigInteger2.prototype.prev = function() {
        var value = this.value;
        if (this.sign) {
          return new BigInteger2(addSmall(value, 1), true);
        }
        return subtractSmall(value, 1, this.sign);
      };
      SmallInteger.prototype.prev = function() {
        var value = this.value;
        if (value - 1 > -MAX_INT)
          return new SmallInteger(value - 1);
        return new BigInteger2(MAX_INT_ARR, true);
      };
      NativeBigInt.prototype.prev = function() {
        return new NativeBigInt(this.value - BigInt(1));
      };
      var powersOfTwo = [1];
      while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE)
        powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);
      var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];
      function shift_isSmall(n2) {
        return Math.abs(n2) <= BASE;
      }
      BigInteger2.prototype.shiftLeft = function(v3) {
        var n2 = parseValue(v3).toJSNumber();
        if (!shift_isSmall(n2)) {
          throw new Error(String(n2) + " is too large for shifting.");
        }
        if (n2 < 0)
          return this.shiftRight(-n2);
        var result = this;
        if (result.isZero())
          return result;
        while (n2 >= powers2Length) {
          result = result.multiply(highestPower2);
          n2 -= powers2Length - 1;
        }
        return result.multiply(powersOfTwo[n2]);
      };
      NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger2.prototype.shiftLeft;
      BigInteger2.prototype.shiftRight = function(v3) {
        var remQuo;
        var n2 = parseValue(v3).toJSNumber();
        if (!shift_isSmall(n2)) {
          throw new Error(String(n2) + " is too large for shifting.");
        }
        if (n2 < 0)
          return this.shiftLeft(-n2);
        var result = this;
        while (n2 >= powers2Length) {
          if (result.isZero() || result.isNegative() && result.isUnit())
            return result;
          remQuo = divModAny(result, highestPower2);
          result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
          n2 -= powers2Length - 1;
        }
        remQuo = divModAny(result, powersOfTwo[n2]);
        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
      };
      NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger2.prototype.shiftRight;
      function bitwise(x3, y3, fn) {
        y3 = parseValue(y3);
        var xSign = x3.isNegative(), ySign = y3.isNegative();
        var xRem = xSign ? x3.not() : x3, yRem = ySign ? y3.not() : y3;
        var xDigit = 0, yDigit = 0;
        var xDivMod = null, yDivMod = null;
        var result = [];
        while (!xRem.isZero() || !yRem.isZero()) {
          xDivMod = divModAny(xRem, highestPower2);
          xDigit = xDivMod[1].toJSNumber();
          if (xSign) {
            xDigit = highestPower2 - 1 - xDigit;
          }
          yDivMod = divModAny(yRem, highestPower2);
          yDigit = yDivMod[1].toJSNumber();
          if (ySign) {
            yDigit = highestPower2 - 1 - yDigit;
          }
          xRem = xDivMod[0];
          yRem = yDivMod[0];
          result.push(fn(xDigit, yDigit));
        }
        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);
        for (var i4 = result.length - 1; i4 >= 0; i4 -= 1) {
          sum = sum.multiply(highestPower2).add(bigInt(result[i4]));
        }
        return sum;
      }
      BigInteger2.prototype.not = function() {
        return this.negate().prev();
      };
      NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger2.prototype.not;
      BigInteger2.prototype.and = function(n2) {
        return bitwise(this, n2, function(a3, b3) {
          return a3 & b3;
        });
      };
      NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger2.prototype.and;
      BigInteger2.prototype.or = function(n2) {
        return bitwise(this, n2, function(a3, b3) {
          return a3 | b3;
        });
      };
      NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger2.prototype.or;
      BigInteger2.prototype.xor = function(n2) {
        return bitwise(this, n2, function(a3, b3) {
          return a3 ^ b3;
        });
      };
      NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger2.prototype.xor;
      var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;
      function roughLOB(n2) {
        var v3 = n2.value, x3 = typeof v3 === "number" ? v3 | LOBMASK_I : typeof v3 === "bigint" ? v3 | BigInt(LOBMASK_I) : v3[0] + v3[1] * BASE | LOBMASK_BI;
        return x3 & -x3;
      }
      function integerLogarithm(value, base2) {
        if (base2.compareTo(value) <= 0) {
          var tmp = integerLogarithm(value, base2.square(base2));
          var p2 = tmp.p;
          var e4 = tmp.e;
          var t3 = p2.multiply(base2);
          return t3.compareTo(value) <= 0 ? { p: t3, e: e4 * 2 + 1 } : { p: p2, e: e4 * 2 };
        }
        return { p: bigInt(1), e: 0 };
      }
      BigInteger2.prototype.bitLength = function() {
        var n2 = this;
        if (n2.compareTo(bigInt(0)) < 0) {
          n2 = n2.negate().subtract(bigInt(1));
        }
        if (n2.compareTo(bigInt(0)) === 0) {
          return bigInt(0);
        }
        return bigInt(integerLogarithm(n2, bigInt(2)).e).add(bigInt(1));
      };
      NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger2.prototype.bitLength;
      function max(a3, b3) {
        a3 = parseValue(a3);
        b3 = parseValue(b3);
        return a3.greater(b3) ? a3 : b3;
      }
      function min(a3, b3) {
        a3 = parseValue(a3);
        b3 = parseValue(b3);
        return a3.lesser(b3) ? a3 : b3;
      }
      function gcd(a3, b3) {
        a3 = parseValue(a3).abs();
        b3 = parseValue(b3).abs();
        if (a3.equals(b3))
          return a3;
        if (a3.isZero())
          return b3;
        if (b3.isZero())
          return a3;
        var c5 = Integer[1], d2, t3;
        while (a3.isEven() && b3.isEven()) {
          d2 = min(roughLOB(a3), roughLOB(b3));
          a3 = a3.divide(d2);
          b3 = b3.divide(d2);
          c5 = c5.multiply(d2);
        }
        while (a3.isEven()) {
          a3 = a3.divide(roughLOB(a3));
        }
        do {
          while (b3.isEven()) {
            b3 = b3.divide(roughLOB(b3));
          }
          if (a3.greater(b3)) {
            t3 = b3;
            b3 = a3;
            a3 = t3;
          }
          b3 = b3.subtract(a3);
        } while (!b3.isZero());
        return c5.isUnit() ? a3 : a3.multiply(c5);
      }
      function lcm(a3, b3) {
        a3 = parseValue(a3).abs();
        b3 = parseValue(b3).abs();
        return a3.divide(gcd(a3, b3)).multiply(b3);
      }
      function randBetween(a3, b3, rng) {
        a3 = parseValue(a3);
        b3 = parseValue(b3);
        var usedRNG = rng || Math.random;
        var low = min(a3, b3), high = max(a3, b3);
        var range = high.subtract(low).add(1);
        if (range.isSmall)
          return low.add(Math.floor(usedRNG() * range));
        var digits = toBase(range, BASE).value;
        var result = [], restricted = true;
        for (var i4 = 0; i4 < digits.length; i4++) {
          var top = restricted ? digits[i4] + (i4 + 1 < digits.length ? digits[i4 + 1] / BASE : 0) : BASE;
          var digit = truncate(usedRNG() * top);
          result.push(digit);
          if (digit < digits[i4])
            restricted = false;
        }
        return low.add(Integer.fromArray(result, BASE, false));
      }
      var parseBase = function(text, base2, alphabet2, caseSensitive) {
        alphabet2 = alphabet2 || DEFAULT_ALPHABET;
        text = String(text);
        if (!caseSensitive) {
          text = text.toLowerCase();
          alphabet2 = alphabet2.toLowerCase();
        }
        var length = text.length;
        var i4;
        var absBase = Math.abs(base2);
        var alphabetValues = {};
        for (i4 = 0; i4 < alphabet2.length; i4++) {
          alphabetValues[alphabet2[i4]] = i4;
        }
        for (i4 = 0; i4 < length; i4++) {
          var c5 = text[i4];
          if (c5 === "-")
            continue;
          if (c5 in alphabetValues) {
            if (alphabetValues[c5] >= absBase) {
              if (c5 === "1" && absBase === 1)
                continue;
              throw new Error(c5 + " is not a valid digit in base " + base2 + ".");
            }
          }
        }
        base2 = parseValue(base2);
        var digits = [];
        var isNegative2 = text[0] === "-";
        for (i4 = isNegative2 ? 1 : 0; i4 < text.length; i4++) {
          var c5 = text[i4];
          if (c5 in alphabetValues)
            digits.push(parseValue(alphabetValues[c5]));
          else if (c5 === "<") {
            var start = i4;
            do {
              i4++;
            } while (text[i4] !== ">" && i4 < text.length);
            digits.push(parseValue(text.slice(start + 1, i4)));
          } else
            throw new Error(c5 + " is not a valid character");
        }
        return parseBaseFromArray(digits, base2, isNegative2);
      };
      function parseBaseFromArray(digits, base2, isNegative2) {
        var val2 = Integer[0], pow2 = Integer[1], i4;
        for (i4 = digits.length - 1; i4 >= 0; i4--) {
          val2 = val2.add(digits[i4].times(pow2));
          pow2 = pow2.times(base2);
        }
        return isNegative2 ? val2.negate() : val2;
      }
      function stringify(digit, alphabet2) {
        alphabet2 = alphabet2 || DEFAULT_ALPHABET;
        if (digit < alphabet2.length) {
          return alphabet2[digit];
        }
        return "<" + digit + ">";
      }
      function toBase(n2, base2) {
        base2 = bigInt(base2);
        if (base2.isZero()) {
          if (n2.isZero())
            return { value: [0], isNegative: false };
          throw new Error("Cannot convert nonzero numbers to base 0.");
        }
        if (base2.equals(-1)) {
          if (n2.isZero())
            return { value: [0], isNegative: false };
          if (n2.isNegative())
            return {
              value: [].concat.apply([], Array.apply(null, Array(-n2.toJSNumber())).map(Array.prototype.valueOf, [1, 0])),
              isNegative: false
            };
          var arr = Array.apply(null, Array(n2.toJSNumber() - 1)).map(Array.prototype.valueOf, [0, 1]);
          arr.unshift([1]);
          return {
            value: [].concat.apply([], arr),
            isNegative: false
          };
        }
        var neg4 = false;
        if (n2.isNegative() && base2.isPositive()) {
          neg4 = true;
          n2 = n2.abs();
        }
        if (base2.isUnit()) {
          if (n2.isZero())
            return { value: [0], isNegative: false };
          return {
            value: Array.apply(null, Array(n2.toJSNumber())).map(Number.prototype.valueOf, 1),
            isNegative: neg4
          };
        }
        var out = [];
        var left = n2, divmod;
        while (left.isNegative() || left.compareAbs(base2) >= 0) {
          divmod = left.divmod(base2);
          left = divmod.quotient;
          var digit = divmod.remainder;
          if (digit.isNegative()) {
            digit = base2.minus(digit).abs();
            left = left.next();
          }
          out.push(digit.toJSNumber());
        }
        out.push(left.toJSNumber());
        return { value: out.reverse(), isNegative: neg4 };
      }
      function toBaseString(n2, base2, alphabet2) {
        var arr = toBase(n2, base2);
        return (arr.isNegative ? "-" : "") + arr.value.map(function(x3) {
          return stringify(x3, alphabet2);
        }).join("");
      }
      BigInteger2.prototype.toArray = function(radix) {
        return toBase(this, radix);
      };
      SmallInteger.prototype.toArray = function(radix) {
        return toBase(this, radix);
      };
      NativeBigInt.prototype.toArray = function(radix) {
        return toBase(this, radix);
      };
      BigInteger2.prototype.toString = function(radix, alphabet2) {
        if (radix === undefined2)
          radix = 10;
        if (radix !== 10)
          return toBaseString(this, radix, alphabet2);
        var v3 = this.value, l3 = v3.length, str = String(v3[--l3]), zeros2 = "0000000", digit;
        while (--l3 >= 0) {
          digit = String(v3[l3]);
          str += zeros2.slice(digit.length) + digit;
        }
        var sign3 = this.sign ? "-" : "";
        return sign3 + str;
      };
      SmallInteger.prototype.toString = function(radix, alphabet2) {
        if (radix === undefined2)
          radix = 10;
        if (radix != 10)
          return toBaseString(this, radix, alphabet2);
        return String(this.value);
      };
      NativeBigInt.prototype.toString = SmallInteger.prototype.toString;
      NativeBigInt.prototype.toJSON = BigInteger2.prototype.toJSON = SmallInteger.prototype.toJSON = function() {
        return this.toString();
      };
      BigInteger2.prototype.valueOf = function() {
        return parseInt(this.toString(), 10);
      };
      BigInteger2.prototype.toJSNumber = BigInteger2.prototype.valueOf;
      SmallInteger.prototype.valueOf = function() {
        return this.value;
      };
      SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;
      NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function() {
        return parseInt(this.toString(), 10);
      };
      function parseStringValue(v3) {
        if (isPrecise(+v3)) {
          var x3 = +v3;
          if (x3 === truncate(x3))
            return supportsNativeBigInt2 ? new NativeBigInt(BigInt(x3)) : new SmallInteger(x3);
          throw new Error("Invalid integer: " + v3);
        }
        var sign3 = v3[0] === "-";
        if (sign3)
          v3 = v3.slice(1);
        var split = v3.split(/e/i);
        if (split.length > 2)
          throw new Error("Invalid integer: " + split.join("e"));
        if (split.length === 2) {
          var exp2 = split[1];
          if (exp2[0] === "+")
            exp2 = exp2.slice(1);
          exp2 = +exp2;
          if (exp2 !== truncate(exp2) || !isPrecise(exp2))
            throw new Error("Invalid integer: " + exp2 + " is not a valid exponent.");
          var text = split[0];
          var decimalPlace = text.indexOf(".");
          if (decimalPlace >= 0) {
            exp2 -= text.length - decimalPlace - 1;
            text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);
          }
          if (exp2 < 0)
            throw new Error("Cannot include negative exponent part for integers");
          text += new Array(exp2 + 1).join("0");
          v3 = text;
        }
        var isValid = /^([0-9][0-9]*)$/.test(v3);
        if (!isValid)
          throw new Error("Invalid integer: " + v3);
        if (supportsNativeBigInt2) {
          return new NativeBigInt(BigInt(sign3 ? "-" + v3 : v3));
        }
        var r3 = [], max2 = v3.length, l3 = LOG_BASE, min2 = max2 - l3;
        while (max2 > 0) {
          r3.push(+v3.slice(min2, max2));
          min2 -= l3;
          if (min2 < 0)
            min2 = 0;
          max2 -= l3;
        }
        trim(r3);
        return new BigInteger2(r3, sign3);
      }
      function parseNumberValue(v3) {
        if (supportsNativeBigInt2) {
          return new NativeBigInt(BigInt(v3));
        }
        if (isPrecise(v3)) {
          if (v3 !== truncate(v3))
            throw new Error(v3 + " is not an integer.");
          return new SmallInteger(v3);
        }
        return parseStringValue(v3.toString());
      }
      function parseValue(v3) {
        if (typeof v3 === "number") {
          return parseNumberValue(v3);
        }
        if (typeof v3 === "string") {
          return parseStringValue(v3);
        }
        if (typeof v3 === "bigint") {
          return new NativeBigInt(v3);
        }
        return v3;
      }
      for (var i3 = 0; i3 < 1e3; i3++) {
        Integer[i3] = parseValue(i3);
        if (i3 > 0)
          Integer[-i3] = parseValue(-i3);
      }
      Integer.one = Integer[1];
      Integer.zero = Integer[0];
      Integer.minusOne = Integer[-1];
      Integer.max = max;
      Integer.min = min;
      Integer.gcd = gcd;
      Integer.lcm = lcm;
      Integer.isInstance = function(x3) {
        return x3 instanceof BigInteger2 || x3 instanceof SmallInteger || x3 instanceof NativeBigInt;
      };
      Integer.randBetween = randBetween;
      Integer.fromArray = function(digits, base2, isNegative2) {
        return parseBaseFromArray(digits.map(parseValue), parseValue(base2 || 10), isNegative2);
      };
      return Integer;
    }();
    if (typeof module !== "undefined" && module.hasOwnProperty("exports")) {
      module.exports = bigInt;
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return bigInt;
      });
    }
  }
});

// node_modules/@darkforest_eth/constants/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/@darkforest_eth/constants/dist/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.THEGRAPH_API_URL = exports.HAT_SIZES = exports.SpecialKey = exports.PLANET_CLAIM_MIN_LEVEL = exports.RECOMMENDED_MODAL_WIDTH = exports.GAS_PRICES_INTERVAL_MS = exports.BLOCK_EXPLORER_URL = exports.MAX_AUTO_GAS_PRICE_GWEI = exports.DEFAULT_GAS_PRICES = exports.GAS_PRICE_API = exports.MAX_BIOME = exports.MIN_BIOME = exports.MAX_PLANET_LEVEL = exports.MIN_PLANET_LEVEL = exports.MAX_ARTIFACT_RARITY = exports.MIN_ARTIFACT_RARITY = exports.MAX_SPACESHIP_TYPE = exports.MIN_SPACESHIP_TYPE = exports.MAX_ARTIFACT_TYPE = exports.MIN_ARTIFACT_TYPE = exports.EMPTY_ARTIFACT_ID = exports.EMPTY_LOCATION_ID = exports.EMPTY_ADDRESS = exports.LOCATION_ID_UB = exports.DEFAULT_MAX_CALL_RETRIES = exports.CONTRACT_PRECISION = void 0;
    var types_1 = require_dist();
    var big_integer_1 = __importDefault(require_BigInteger());
    exports.CONTRACT_PRECISION = 1e3;
    exports.DEFAULT_MAX_CALL_RETRIES = 12;
    exports.LOCATION_ID_UB = (0, big_integer_1.default)("21888242871839275222246405745257275088548364400416034343698204186575808495617");
    exports.EMPTY_ADDRESS = "0x0000000000000000000000000000000000000000";
    exports.EMPTY_LOCATION_ID = "0000000000000000000000000000000000000000000000000000000000000000";
    exports.EMPTY_ARTIFACT_ID = "0000000000000000000000000000000000000000000000000000000000000000";
    exports.MIN_ARTIFACT_TYPE = types_1.ArtifactType.Monolith;
    exports.MAX_ARTIFACT_TYPE = types_1.ArtifactType.ShipTitan;
    exports.MIN_SPACESHIP_TYPE = types_1.ArtifactType.ShipMothership;
    exports.MAX_SPACESHIP_TYPE = types_1.ArtifactType.ShipTitan;
    exports.MIN_ARTIFACT_RARITY = types_1.ArtifactRarity.Common;
    exports.MAX_ARTIFACT_RARITY = types_1.ArtifactRarity.Mythic;
    exports.MIN_PLANET_LEVEL = types_1.PlanetLevel.ZERO;
    exports.MAX_PLANET_LEVEL = types_1.PlanetLevel.NINE;
    exports.MIN_BIOME = types_1.Biome.OCEAN;
    exports.MAX_BIOME = types_1.Biome.CORRUPTED;
    exports.GAS_PRICE_API = "https://blockscout.com/xdai/mainnet/api/v1/gas-price-oracle";
    exports.DEFAULT_GAS_PRICES = {
      slow: 1,
      average: 3,
      fast: 10
    };
    exports.MAX_AUTO_GAS_PRICE_GWEI = 15;
    exports.BLOCK_EXPLORER_URL = "https://dashboard.tenderly.co/tx/xdai";
    exports.GAS_PRICES_INTERVAL_MS = 6e4;
    exports.RECOMMENDED_MODAL_WIDTH = "400px";
    exports.PLANET_CLAIM_MIN_LEVEL = 3;
    exports.SpecialKey = {
      Space: " ",
      Tab: "Tab",
      Escape: "Escape",
      Control: "Control",
      Shift: "Shift"
    };
    exports.HAT_SIZES = [
      "None",
      "Tiny HAT",
      "Small HAT",
      "Medium HAT",
      "Large HAT",
      "Huge HAT",
      "Mega HAT",
      "Enormous HAT",
      "Titanic HAT",
      "Legendary HAT",
      "Almighty HAT",
      "Cosmic HAT",
      "Celestial HAT",
      "Empyrean HAT",
      "Ethereal HAT",
      "Transcendental HAT",
      "haaaat",
      "HAAAAT"
    ];
    exports.THEGRAPH_API_URL = "https://api.thegraph.com/subgraphs/name/darkforest-eth/dark-forest-v06-round-5";
  }
});

// node_modules/@darkforest_eth/procedural/dist/ArtifactProcgen.js
var require_ArtifactProcgen = __commonJS({
  "node_modules/@darkforest_eth/procedural/dist/ArtifactProcgen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mockLegendary = exports.mockEpic = exports.mockRare = exports.mockCommon = exports.mockArtifactWithRarity = exports.mockArtifact = exports.artifactName = void 0;
    var constants_1 = require_dist2();
    var types_1 = require_dist();
    var namesById = new Map();
    var artifactName = (artifact) => {
      if (!artifact)
        return "Unknown";
      const myName = namesById.get(artifact.id);
      if (myName)
        return myName;
      const name2 = (0, types_1.artifactNameFromArtifact)(artifact);
      namesById.set(artifact.id, name2);
      return name2;
    };
    exports.artifactName = artifactName;
    var randomHex = (len) => {
      let str = "";
      const chars = "abcdef0123456789".split("");
      while (str.length < len) {
        str = str + chars[Math.floor(Math.random() * chars.length)];
      }
      return str;
    };
    var mockArtifact = (rarity, artifactType = types_1.ArtifactType.Spaceship, planetBiome = types_1.Biome.WASTELAND) => ({
      id: randomHex(64),
      planetDiscoveredOn: constants_1.EMPTY_LOCATION_ID,
      planetBiome,
      mintedAtTimestamp: Date.now(),
      discoverer: constants_1.EMPTY_ADDRESS,
      currentOwner: constants_1.EMPTY_ADDRESS,
      isInititalized: true,
      lastActivated: 0,
      lastDeactivated: 0,
      rarity,
      artifactType,
      upgrade: {
        energyCapMultiplier: 120,
        energyGroMultiplier: 100,
        rangeMultiplier: 100,
        speedMultiplier: 85,
        defMultiplier: 100
      },
      onPlanetId: void 0
    });
    exports.mockArtifact = mockArtifact;
    var mockArtifactWithRarity = (rarity, artifactType = types_1.ArtifactType.Spaceship, planetBiome = types_1.Biome.WASTELAND) => (0, exports.mockArtifact)(rarity, artifactType, planetBiome);
    exports.mockArtifactWithRarity = mockArtifactWithRarity;
    exports.mockCommon = (0, exports.mockArtifactWithRarity)(types_1.ArtifactRarity.Common, types_1.ArtifactType.Spaceship, types_1.Biome.WASTELAND);
    exports.mockRare = (0, exports.mockArtifactWithRarity)(types_1.ArtifactRarity.Rare, types_1.ArtifactType.Spaceship, types_1.Biome.WASTELAND);
    exports.mockEpic = (0, exports.mockArtifactWithRarity)(types_1.ArtifactRarity.Epic, types_1.ArtifactType.Spaceship, types_1.Biome.WASTELAND);
    exports.mockLegendary = (0, exports.mockArtifactWithRarity)(types_1.ArtifactRarity.Legendary, types_1.ArtifactType.Spaceship, types_1.Biome.WASTELAND);
  }
});

// node_modules/@darkforest_eth/serde/dist/address.js
var require_address = __commonJS({
  "node_modules/@darkforest_eth/serde/dist/address.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hashToInt = exports.address = void 0;
    var big_integer_1 = __importDefault(require_BigInteger());
    function address(str) {
      let ret = str.toLowerCase();
      if (ret.slice(0, 2) === "0x") {
        ret = ret.slice(2);
      }
      for (const c5 of ret) {
        if ("0123456789abcdef".indexOf(c5) === -1)
          throw new Error("not a valid address");
      }
      if (ret.length !== 40)
        throw new Error("not a valid address");
      return `0x${ret}`;
    }
    exports.address = address;
    function hashToInt2(hash3) {
      const seed = (0, big_integer_1.default)(hash3, 16).and(1099511627775).toString(16);
      return parseInt("0x" + seed);
    }
    exports.hashToInt = hashToInt2;
  }
});

// node_modules/@darkforest_eth/serde/dist/location.js
var require_location = __commonJS({
  "node_modules/@darkforest_eth/serde/dist/location.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.locationIdToDecStr = exports.locationIdFromEthersBN = exports.locationIdFromBigInt = exports.locationIdFromDecStr = exports.locationIdFromHexStr = void 0;
    var constants_1 = require_dist2();
    var big_integer_1 = __importDefault(require_BigInteger());
    function locationIdFromHexStr(location) {
      const locationBI = (0, big_integer_1.default)(location, 16);
      if (locationBI.geq(constants_1.LOCATION_ID_UB))
        throw new Error("not a valid location");
      let ret = locationBI.toString(16);
      while (ret.length < 64)
        ret = "0" + ret;
      return ret;
    }
    exports.locationIdFromHexStr = locationIdFromHexStr;
    function locationIdFromDecStr(location) {
      const locationBI = (0, big_integer_1.default)(location);
      if (locationBI.geq(constants_1.LOCATION_ID_UB))
        throw new Error("not a valid location");
      let ret = locationBI.toString(16);
      while (ret.length < 64)
        ret = "0" + ret;
      return ret;
    }
    exports.locationIdFromDecStr = locationIdFromDecStr;
    function locationIdFromBigInt(location) {
      const locationBI = (0, big_integer_1.default)(location);
      if (locationBI.geq(constants_1.LOCATION_ID_UB))
        throw new Error("not a valid location");
      let ret = locationBI.toString(16);
      while (ret.length < 64)
        ret = "0" + ret;
      return ret;
    }
    exports.locationIdFromBigInt = locationIdFromBigInt;
    function locationIdFromEthersBN(location) {
      return locationIdFromDecStr(location.toString());
    }
    exports.locationIdFromEthersBN = locationIdFromEthersBN;
    function locationIdToDecStr(locationId) {
      return (0, big_integer_1.default)(locationId, 16).toString(10);
    }
    exports.locationIdToDecStr = locationIdToDecStr;
  }
});

// node_modules/@darkforest_eth/serde/dist/upgrade.js
var require_upgrade2 = __commonJS({
  "node_modules/@darkforest_eth/serde/dist/upgrade.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeUpgradeBranches = exports.decodeUpgrade = void 0;
    function decodeUpgrade(rawUpgrade) {
      return {
        energyCapMultiplier: rawUpgrade.popCapMultiplier.toNumber(),
        energyGroMultiplier: rawUpgrade.popGroMultiplier.toNumber(),
        rangeMultiplier: rawUpgrade.rangeMultiplier.toNumber(),
        speedMultiplier: rawUpgrade.speedMultiplier.toNumber(),
        defMultiplier: rawUpgrade.defMultiplier.toNumber()
      };
    }
    exports.decodeUpgrade = decodeUpgrade;
    function decodeUpgradeBranches(rawUpgradeBranches) {
      return rawUpgradeBranches.map((a3) => a3.map(decodeUpgrade));
    }
    exports.decodeUpgradeBranches = decodeUpgradeBranches;
  }
});

// node_modules/@darkforest_eth/serde/dist/artifact.js
var require_artifact2 = __commonJS({
  "node_modules/@darkforest_eth/serde/dist/artifact.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeArtifact = exports.decodeArtifactPointValues = exports.artifactIdToDecStr = exports.artifactIdFromEthersBN = exports.artifactIdFromDecStr = exports.artifactIdFromHexStr = void 0;
    var types_1 = require_dist();
    var big_integer_1 = __importDefault(require_BigInteger());
    var address_1 = require_address();
    var location_1 = require_location();
    var upgrade_1 = require_upgrade2();
    function artifactIdFromHexStr(artifactId) {
      const artifactIdBI = (0, big_integer_1.default)(artifactId, 16);
      let ret = artifactIdBI.toString(16);
      if (ret.length > 64)
        throw new Error("not a valid artifact id");
      while (ret.length < 64)
        ret = "0" + ret;
      return ret;
    }
    exports.artifactIdFromHexStr = artifactIdFromHexStr;
    function artifactIdFromDecStr(artifactId) {
      const locationBI = (0, big_integer_1.default)(artifactId);
      let ret = locationBI.toString(16);
      while (ret.length < 64)
        ret = "0" + ret;
      return ret;
    }
    exports.artifactIdFromDecStr = artifactIdFromDecStr;
    function artifactIdFromEthersBN(artifactId) {
      return artifactIdFromDecStr(artifactId.toString());
    }
    exports.artifactIdFromEthersBN = artifactIdFromEthersBN;
    function artifactIdToDecStr(artifactId) {
      return (0, big_integer_1.default)(artifactId, 16).toString(10);
    }
    exports.artifactIdToDecStr = artifactIdToDecStr;
    function decodeArtifactPointValues(rawPointValues) {
      return {
        [types_1.ArtifactRarity.Unknown]: rawPointValues[types_1.ArtifactRarity.Unknown].toNumber(),
        [types_1.ArtifactRarity.Common]: rawPointValues[types_1.ArtifactRarity.Common].toNumber(),
        [types_1.ArtifactRarity.Rare]: rawPointValues[types_1.ArtifactRarity.Rare].toNumber(),
        [types_1.ArtifactRarity.Epic]: rawPointValues[types_1.ArtifactRarity.Epic].toNumber(),
        [types_1.ArtifactRarity.Legendary]: rawPointValues[types_1.ArtifactRarity.Legendary].toNumber(),
        [types_1.ArtifactRarity.Mythic]: rawPointValues[types_1.ArtifactRarity.Mythic].toNumber()
      };
    }
    exports.decodeArtifactPointValues = decodeArtifactPointValues;
    function decodeArtifact(rawArtifactWithMetadata) {
      const { artifact, owner, upgrade, timeDelayedUpgrade, locationId, voyageId } = rawArtifactWithMetadata;
      return {
        isInititalized: artifact.isInitialized,
        id: artifactIdFromEthersBN(artifact.id),
        planetDiscoveredOn: (0, location_1.locationIdFromDecStr)(artifact.planetDiscoveredOn.toString()),
        rarity: artifact.rarity,
        planetBiome: artifact.planetBiome,
        mintedAtTimestamp: artifact.mintedAtTimestamp.toNumber(),
        discoverer: (0, address_1.address)(artifact.discoverer),
        artifactType: artifact.artifactType,
        activations: artifact.activations.toNumber(),
        lastActivated: artifact.lastActivated.toNumber(),
        lastDeactivated: artifact.lastDeactivated.toNumber(),
        controller: (0, address_1.address)(artifact.controller),
        wormholeTo: artifact.wormholeTo.eq(0) ? void 0 : (0, location_1.locationIdFromEthersBN)(artifact.wormholeTo),
        currentOwner: (0, address_1.address)(owner),
        upgrade: (0, upgrade_1.decodeUpgrade)(upgrade),
        timeDelayedUpgrade: (0, upgrade_1.decodeUpgrade)(timeDelayedUpgrade),
        onPlanetId: locationId.eq(0) ? void 0 : (0, location_1.locationIdFromEthersBN)(locationId),
        onVoyageId: voyageId.eq(0) ? void 0 : voyageId.toString()
      };
    }
    exports.decodeArtifact = decodeArtifact;
  }
});

// node_modules/@darkforest_eth/serde/dist/arrival.js
var require_arrival2 = __commonJS({
  "node_modules/@darkforest_eth/serde/dist/arrival.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeArrival = void 0;
    var constants_1 = require_dist2();
    var address_1 = require_address();
    var artifact_1 = require_artifact2();
    var location_1 = require_location();
    function decodeArrival(rawArrival) {
      const arrival = {
        eventId: rawArrival.id.toString(),
        player: (0, address_1.address)(rawArrival.player),
        fromPlanet: (0, location_1.locationIdFromDecStr)(rawArrival.fromPlanet.toString()),
        toPlanet: (0, location_1.locationIdFromDecStr)(rawArrival.toPlanet.toString()),
        energyArriving: rawArrival.popArriving.toNumber() / constants_1.CONTRACT_PRECISION,
        silverMoved: rawArrival.silverMoved.toNumber() / constants_1.CONTRACT_PRECISION,
        departureTime: rawArrival.departureTime.toNumber(),
        arrivalTime: rawArrival.arrivalTime.toNumber(),
        distance: rawArrival.distance.toNumber(),
        artifactId: rawArrival.carriedArtifactId.eq(0) ? void 0 : (0, artifact_1.artifactIdFromEthersBN)(rawArrival.carriedArtifactId),
        arrivalType: rawArrival.arrivalType
      };
      return arrival;
    }
    exports.decodeArrival = decodeArrival;
  }
});

// node_modules/@darkforest_eth/serde/dist/event.js
var require_event2 = __commonJS({
  "node_modules/@darkforest_eth/serde/dist/event.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isNetworkEvent = void 0;
    var types_1 = require_dist();
    function isNetworkEvent(event) {
      return typeof event.tx_to === "string" && typeof event.tx_type === "string" && typeof event.time_exec_called === "number" && (event.autoGasPriceSetting === void 0 || Object.values(types_1.AutoGasSetting).includes(event.autoGasPriceSetting));
    }
    exports.isNetworkEvent = isNetworkEvent;
  }
});

// node_modules/@darkforest_eth/hexgen/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/@darkforest_eth/hexgen/dist/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.planetHasBonus = exports.bonusFromHex = exports.getBytesFromHex = void 0;
    var big_integer_1 = __importDefault(require_BigInteger());
    function getBytesFromHex(hexStr, startByte, endByte) {
      const byteString = hexStr.substring(2 * startByte, 2 * endByte);
      return (0, big_integer_1.default)(`0x${byteString}`);
    }
    exports.getBytesFromHex = getBytesFromHex;
    var bonusById = new Map();
    function bonusFromHex(hex2) {
      const bonus = bonusById.get(hex2);
      if (bonus)
        return bonus;
      const newBonus = Array(6).fill(false);
      for (let i3 = 0; i3 < newBonus.length; i3++) {
        newBonus[i3] = getBytesFromHex(hex2, 9 + i3, 10 + i3).lesser(16);
      }
      bonusById.set(hex2, newBonus);
      return newBonus;
    }
    exports.bonusFromHex = bonusFromHex;
    function planetHasBonus(planet) {
      if (!planet)
        return false;
      return bonusFromHex(planet.locationId).some((bonus) => bonus);
    }
    exports.planetHasBonus = planetHasBonus;
  }
});

// node_modules/@darkforest_eth/serde/dist/planet.js
var require_planet2 = __commonJS({
  "node_modules/@darkforest_eth/serde/dist/planet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodePlanetDefaults = exports.decodePlanet = void 0;
    var constants_1 = require_dist2();
    var hexgen_1 = require_dist3();
    var address_1 = require_address();
    var location_1 = require_location();
    function decodePlanet(rawLocationId, rawPlanet, rawPlanetExtendedInfo, rawPlanetExtendedInfo2) {
      const locationId = (0, location_1.locationIdFromDecStr)(rawLocationId.toString());
      const planet = {
        locationId,
        perlin: rawPlanetExtendedInfo.perlin.toNumber(),
        spaceType: rawPlanetExtendedInfo.spaceType,
        owner: (0, address_1.address)(rawPlanet.owner),
        hatLevel: rawPlanetExtendedInfo.hatLevel.toNumber(),
        planetLevel: rawPlanet.planetLevel.toNumber(),
        planetType: rawPlanet.planetType,
        isHomePlanet: rawPlanet.isHomePlanet,
        energyCap: rawPlanet.populationCap.toNumber() / constants_1.CONTRACT_PRECISION,
        energyGrowth: rawPlanet.populationGrowth.toNumber() / constants_1.CONTRACT_PRECISION,
        silverCap: rawPlanet.silverCap.toNumber() / constants_1.CONTRACT_PRECISION,
        silverGrowth: rawPlanet.silverGrowth.toNumber() / constants_1.CONTRACT_PRECISION,
        energy: rawPlanet.population.toNumber() / constants_1.CONTRACT_PRECISION,
        silver: rawPlanet.silver.toNumber() / constants_1.CONTRACT_PRECISION,
        range: rawPlanet.range.toNumber(),
        speed: rawPlanet.speed.toNumber(),
        defense: rawPlanet.defense.toNumber(),
        spaceJunk: rawPlanetExtendedInfo.spaceJunk.toNumber(),
        lastUpdated: rawPlanetExtendedInfo.lastUpdated.toNumber(),
        upgradeState: [
          rawPlanetExtendedInfo.upgradeState0.toNumber(),
          rawPlanetExtendedInfo.upgradeState1.toNumber(),
          rawPlanetExtendedInfo.upgradeState2.toNumber()
        ],
        unconfirmedClearEmoji: false,
        unconfirmedAddEmoji: false,
        loadingServerState: false,
        needsServerRefresh: true,
        silverSpent: 0,
        coordsRevealed: false,
        isInContract: true,
        syncedWithContract: true,
        hasTriedFindingArtifact: rawPlanetExtendedInfo[9],
        prospectedBlockNumber: rawPlanetExtendedInfo.prospectedBlockNumber.eq(0) ? void 0 : rawPlanetExtendedInfo.prospectedBlockNumber.toNumber(),
        destroyed: rawPlanetExtendedInfo[11],
        heldArtifactIds: [],
        bonus: (0, hexgen_1.bonusFromHex)(locationId),
        pausers: rawPlanetExtendedInfo2.pausers.toNumber(),
        invader: (0, address_1.address)(rawPlanetExtendedInfo2.invader),
        capturer: (0, address_1.address)(rawPlanetExtendedInfo2.capturer),
        invadeStartBlock: rawPlanetExtendedInfo2.invadeStartBlock.eq(0) ? void 0 : rawPlanetExtendedInfo2.invadeStartBlock.toNumber()
      };
      return planet;
    }
    exports.decodePlanet = decodePlanet;
    function decodePlanetDefaults(rawDefaults) {
      return {
        populationCap: rawDefaults.map((x3) => x3[1].toNumber() / constants_1.CONTRACT_PRECISION),
        populationGrowth: rawDefaults.map((x3) => x3[2].toNumber() / constants_1.CONTRACT_PRECISION),
        range: rawDefaults.map((x3) => x3[3].toNumber()),
        speed: rawDefaults.map((x3) => x3[4].toNumber()),
        defense: rawDefaults.map((x3) => x3[5].toNumber()),
        silverGrowth: rawDefaults.map((x3) => x3[6].toNumber() / constants_1.CONTRACT_PRECISION),
        silverCap: rawDefaults.map((x3) => x3[7].toNumber() / constants_1.CONTRACT_PRECISION),
        barbarianPercentage: rawDefaults.map((x3) => x3[8].toNumber())
      };
    }
    exports.decodePlanetDefaults = decodePlanetDefaults;
  }
});

// node_modules/@darkforest_eth/serde/dist/player.js
var require_player2 = __commonJS({
  "node_modules/@darkforest_eth/serde/dist/player.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodePlayer = void 0;
    var address_1 = require_address();
    var location_1 = require_location();
    function decodePlayer(rawPlayer) {
      return {
        address: (0, address_1.address)(rawPlayer.player),
        initTimestamp: rawPlayer.initTimestamp.toNumber(),
        homePlanetId: (0, location_1.locationIdFromEthersBN)(rawPlayer.homePlanetId),
        lastRevealTimestamp: rawPlayer.lastRevealTimestamp.toNumber(),
        lastClaimTimestamp: rawPlayer.lastRevealTimestamp.toNumber(),
        score: rawPlayer.score.toNumber(),
        spaceJunk: rawPlayer.spaceJunk.toNumber(),
        spaceJunkLimit: rawPlayer.spaceJunkLimit.toNumber(),
        claimedShips: rawPlayer.claimedShips
      };
    }
    exports.decodePlayer = decodePlayer;
  }
});

// node_modules/@darkforest_eth/serde/dist/reveal.js
var require_reveal2 = __commonJS({
  "node_modules/@darkforest_eth/serde/dist/reveal.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeRevealedCoords = void 0;
    var constants_1 = require_dist2();
    var big_integer_1 = __importDefault(require_BigInteger());
    var address_1 = require_address();
    var location_1 = require_location();
    function decodeRevealedCoords(rawRevealedCoords) {
      const locationId = (0, location_1.locationIdFromDecStr)(rawRevealedCoords.locationId.toString());
      let xBI = (0, big_integer_1.default)(rawRevealedCoords.x.toString());
      let yBI = (0, big_integer_1.default)(rawRevealedCoords.y.toString());
      let x3 = 0;
      let y3 = 0;
      if (xBI.gt(constants_1.LOCATION_ID_UB.divide(2))) {
        xBI = xBI.minus(constants_1.LOCATION_ID_UB);
      }
      x3 = xBI.toJSNumber();
      if (yBI.gt(constants_1.LOCATION_ID_UB.divide(2))) {
        yBI = yBI.minus(constants_1.LOCATION_ID_UB);
      }
      y3 = yBI.toJSNumber();
      return {
        hash: locationId,
        x: x3,
        y: y3,
        revealer: (0, address_1.address)(rawRevealedCoords.revealer)
      };
    }
    exports.decodeRevealedCoords = decodeRevealedCoords;
  }
});

// node_modules/@darkforest_eth/serde/dist/transactions.js
var require_transactions2 = __commonJS({
  "node_modules/@darkforest_eth/serde/dist/transactions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isUnconfirmedCapturePlanetTx = exports.isUnconfirmedInvadePlanetTx = exports.isUnconfirmedGetShipsTx = exports.isUnconfirmedWithdrawSilverTx = exports.isUnconfirmedDeactivateArtifactTx = exports.isUnconfirmedActivateArtifactTx = exports.isUnconfirmedProspectPlanetTx = exports.isUnconfirmedWithdrawArtifactTx = exports.isUnconfirmedDepositArtifactTx = exports.isUnconfirmedFindArtifactTx = exports.isUnconfirmedTransferTx = exports.isUnconfirmedBuyHatTx = exports.isUnconfirmedUpgradeTx = exports.isUnconfirmedReleaseTx = exports.isUnconfirmedMoveTx = exports.isUnconfirmedInitTx = exports.isUnconfirmedRevealTx = exports.isUnconfirmedInvadePlanet = exports.isUnconfirmedCapturePlanet = exports.isUnconfirmedGetShips = exports.isUnconfirmedWithdrawSilver = exports.isUnconfirmedDeactivateArtifact = exports.isUnconfirmedActivateArtifact = exports.isUnconfirmedProspectPlanet = exports.isUnconfirmedWithdrawArtifact = exports.isUnconfirmedDepositArtifact = exports.isUnconfirmedFindArtifact = exports.isUnconfirmedTransfer = exports.isUnconfirmedBuyHat = exports.isUnconfirmedUpgrade = exports.isUnconfirmedRelease = exports.isUnconfirmedMove = exports.isUnconfirmedInit = exports.isUnconfirmedReveal = void 0;
    function isUnconfirmedReveal(txIntent) {
      return txIntent.methodName === "revealLocation";
    }
    exports.isUnconfirmedReveal = isUnconfirmedReveal;
    function isUnconfirmedInit(txIntent) {
      return txIntent.methodName === "initializePlayer";
    }
    exports.isUnconfirmedInit = isUnconfirmedInit;
    function isUnconfirmedMove(txIntent) {
      return txIntent.methodName === "move";
    }
    exports.isUnconfirmedMove = isUnconfirmedMove;
    function isUnconfirmedRelease(txIntent) {
      return isUnconfirmedMove(txIntent) && txIntent.abandoning;
    }
    exports.isUnconfirmedRelease = isUnconfirmedRelease;
    function isUnconfirmedUpgrade(txIntent) {
      return txIntent.methodName === "upgradePlanet";
    }
    exports.isUnconfirmedUpgrade = isUnconfirmedUpgrade;
    function isUnconfirmedBuyHat(txIntent) {
      return txIntent.methodName === "buyHat";
    }
    exports.isUnconfirmedBuyHat = isUnconfirmedBuyHat;
    function isUnconfirmedTransfer(txIntent) {
      return txIntent.methodName === "transferPlanet";
    }
    exports.isUnconfirmedTransfer = isUnconfirmedTransfer;
    function isUnconfirmedFindArtifact(txIntent) {
      return txIntent.methodName === "findArtifact";
    }
    exports.isUnconfirmedFindArtifact = isUnconfirmedFindArtifact;
    function isUnconfirmedDepositArtifact(txIntent) {
      return txIntent.methodName === "depositArtifact";
    }
    exports.isUnconfirmedDepositArtifact = isUnconfirmedDepositArtifact;
    function isUnconfirmedWithdrawArtifact(txIntent) {
      return txIntent.methodName === "withdrawArtifact";
    }
    exports.isUnconfirmedWithdrawArtifact = isUnconfirmedWithdrawArtifact;
    function isUnconfirmedProspectPlanet(txIntent) {
      return txIntent.methodName === "prospectPlanet";
    }
    exports.isUnconfirmedProspectPlanet = isUnconfirmedProspectPlanet;
    function isUnconfirmedActivateArtifact(txIntent) {
      return txIntent.methodName === "activateArtifact";
    }
    exports.isUnconfirmedActivateArtifact = isUnconfirmedActivateArtifact;
    function isUnconfirmedDeactivateArtifact(txIntent) {
      return txIntent.methodName === "deactivateArtifact";
    }
    exports.isUnconfirmedDeactivateArtifact = isUnconfirmedDeactivateArtifact;
    function isUnconfirmedWithdrawSilver(txIntent) {
      return txIntent.methodName === "withdrawSilver";
    }
    exports.isUnconfirmedWithdrawSilver = isUnconfirmedWithdrawSilver;
    function isUnconfirmedGetShips(txIntent) {
      return txIntent.methodName === "giveSpaceShips";
    }
    exports.isUnconfirmedGetShips = isUnconfirmedGetShips;
    function isUnconfirmedCapturePlanet(txIntent) {
      return txIntent.methodName === "capturePlanet";
    }
    exports.isUnconfirmedCapturePlanet = isUnconfirmedCapturePlanet;
    function isUnconfirmedInvadePlanet(txIntent) {
      return txIntent.methodName === "invadePlanet";
    }
    exports.isUnconfirmedInvadePlanet = isUnconfirmedInvadePlanet;
    function isUnconfirmedRevealTx(tx) {
      return isUnconfirmedReveal(tx.intent);
    }
    exports.isUnconfirmedRevealTx = isUnconfirmedRevealTx;
    function isUnconfirmedInitTx(tx) {
      return isUnconfirmedInit(tx.intent);
    }
    exports.isUnconfirmedInitTx = isUnconfirmedInitTx;
    function isUnconfirmedMoveTx(tx) {
      return isUnconfirmedMove(tx.intent);
    }
    exports.isUnconfirmedMoveTx = isUnconfirmedMoveTx;
    function isUnconfirmedReleaseTx(tx) {
      return isUnconfirmedRelease(tx.intent);
    }
    exports.isUnconfirmedReleaseTx = isUnconfirmedReleaseTx;
    function isUnconfirmedUpgradeTx(tx) {
      return isUnconfirmedUpgrade(tx.intent);
    }
    exports.isUnconfirmedUpgradeTx = isUnconfirmedUpgradeTx;
    function isUnconfirmedBuyHatTx(tx) {
      return isUnconfirmedBuyHat(tx.intent);
    }
    exports.isUnconfirmedBuyHatTx = isUnconfirmedBuyHatTx;
    function isUnconfirmedTransferTx(tx) {
      return isUnconfirmedTransfer(tx.intent);
    }
    exports.isUnconfirmedTransferTx = isUnconfirmedTransferTx;
    function isUnconfirmedFindArtifactTx(tx) {
      return isUnconfirmedFindArtifact(tx.intent);
    }
    exports.isUnconfirmedFindArtifactTx = isUnconfirmedFindArtifactTx;
    function isUnconfirmedDepositArtifactTx(tx) {
      return isUnconfirmedDepositArtifact(tx.intent);
    }
    exports.isUnconfirmedDepositArtifactTx = isUnconfirmedDepositArtifactTx;
    function isUnconfirmedWithdrawArtifactTx(tx) {
      return isUnconfirmedWithdrawArtifact(tx.intent);
    }
    exports.isUnconfirmedWithdrawArtifactTx = isUnconfirmedWithdrawArtifactTx;
    function isUnconfirmedProspectPlanetTx(tx) {
      return isUnconfirmedProspectPlanet(tx.intent);
    }
    exports.isUnconfirmedProspectPlanetTx = isUnconfirmedProspectPlanetTx;
    function isUnconfirmedActivateArtifactTx(tx) {
      return isUnconfirmedActivateArtifact(tx.intent);
    }
    exports.isUnconfirmedActivateArtifactTx = isUnconfirmedActivateArtifactTx;
    function isUnconfirmedDeactivateArtifactTx(tx) {
      return isUnconfirmedDeactivateArtifact(tx.intent);
    }
    exports.isUnconfirmedDeactivateArtifactTx = isUnconfirmedDeactivateArtifactTx;
    function isUnconfirmedWithdrawSilverTx(tx) {
      return isUnconfirmedWithdrawSilver(tx.intent);
    }
    exports.isUnconfirmedWithdrawSilverTx = isUnconfirmedWithdrawSilverTx;
    function isUnconfirmedGetShipsTx(tx) {
      return isUnconfirmedGetShips(tx.intent);
    }
    exports.isUnconfirmedGetShipsTx = isUnconfirmedGetShipsTx;
    function isUnconfirmedInvadePlanetTx(tx) {
      return isUnconfirmedInvadePlanet(tx.intent);
    }
    exports.isUnconfirmedInvadePlanetTx = isUnconfirmedInvadePlanetTx;
    function isUnconfirmedCapturePlanetTx(tx) {
      return isUnconfirmedCapturePlanet(tx.intent);
    }
    exports.isUnconfirmedCapturePlanetTx = isUnconfirmedCapturePlanetTx;
  }
});

// node_modules/@darkforest_eth/serde/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/@darkforest_eth/serde/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0)
        k22 = k3;
      Object.defineProperty(o3, k22, { enumerable: true, get: function() {
        return m3[k3];
      } });
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0)
        k22 = k3;
      o3[k22] = m3[k3];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p2 in m3)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m3, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_address(), exports);
    __exportStar(require_arrival2(), exports);
    __exportStar(require_artifact2(), exports);
    __exportStar(require_event2(), exports);
    __exportStar(require_location(), exports);
    __exportStar(require_planet2(), exports);
    __exportStar(require_player2(), exports);
    __exportStar(require_reveal2(), exports);
    __exportStar(require_transactions2(), exports);
    __exportStar(require_upgrade2(), exports);
  }
});

// node_modules/@darkforest_eth/gamelogic/dist/artifact.js
var require_artifact3 = __commonJS({
  "node_modules/@darkforest_eth/gamelogic/dist/artifact.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPlayerControlledSpaceships = exports.canDepositArtifact = exports.canWithdrawArtifact = exports.canActivateArtifact = exports.dateMintedAt = exports.getActiveBlackDomain = exports.artifactFileName = exports.setForceAncient = exports.isAncient = exports.artifactRoll = exports.ArtifactFileColor = exports.levelFromRarity = exports.artifactBiomeName = exports.rarityNameFromArtifact = exports.rarityName = exports.biomeName = exports.getArtifactDebugName = exports.getActivatedArtifact = exports.isActivated = exports.artifactAvailableTimestamp = exports.durationUntilArtifactAvailable = exports.hasStatBoost = exports.isSpaceShip = exports.isBasic = exports.isRelic = exports.RelicsList = void 0;
    var constants_1 = require_dist2();
    var serde_1 = require_dist4();
    var types_1 = require_dist();
    exports.RelicsList = [
      types_1.ArtifactType.Wormhole,
      types_1.ArtifactType.PlanetaryShield,
      types_1.ArtifactType.PhotoidCannon,
      types_1.ArtifactType.BloomFilter,
      types_1.ArtifactType.BlackDomain
    ];
    function isRelic(type) {
      return types_1.ArtifactType.Wormhole <= type && type <= types_1.ArtifactType.BlackDomain;
    }
    exports.isRelic = isRelic;
    function isBasic(type) {
      return types_1.ArtifactType.Monolith <= type && type <= types_1.ArtifactType.Pyramid;
    }
    exports.isBasic = isBasic;
    function isSpaceShip(type) {
      return type !== void 0 && type >= constants_1.MIN_SPACESHIP_TYPE && type <= constants_1.MAX_SPACESHIP_TYPE;
    }
    exports.isSpaceShip = isSpaceShip;
    function hasStatBoost(type) {
      return !isSpaceShip(type) && type !== types_1.ArtifactType.BlackDomain && type !== types_1.ArtifactType.BloomFilter && type !== types_1.ArtifactType.Wormhole;
    }
    exports.hasStatBoost = hasStatBoost;
    var artifactCooldownHoursMap = {
      [types_1.ArtifactType.Unknown]: 24,
      [types_1.ArtifactType.Monolith]: 0,
      [types_1.ArtifactType.Colossus]: 0,
      [types_1.ArtifactType.Spaceship]: 0,
      [types_1.ArtifactType.Pyramid]: 0,
      [types_1.ArtifactType.Wormhole]: 4,
      [types_1.ArtifactType.PlanetaryShield]: 4,
      [types_1.ArtifactType.PhotoidCannon]: 24,
      [types_1.ArtifactType.BloomFilter]: 24,
      [types_1.ArtifactType.BlackDomain]: 24
    };
    var artifactIsAncientMap = new Map();
    function durationUntilArtifactAvailable(artifact) {
      return artifactAvailableTimestamp(artifact) - Date.now();
    }
    exports.durationUntilArtifactAvailable = durationUntilArtifactAvailable;
    function artifactAvailableTimestamp(artifact) {
      if (artifact.lastDeactivated === 0) {
        return Date.now();
      }
      const availableAtTimestampMs = artifact.lastDeactivated * 1e3 + artifactCooldownHoursMap[artifact.artifactType] * 60 * 60 * 1e3;
      return availableAtTimestampMs;
    }
    exports.artifactAvailableTimestamp = artifactAvailableTimestamp;
    function isActivated(artifact) {
      if (artifact === void 0) {
        return false;
      }
      return artifact.lastActivated > artifact.lastDeactivated;
    }
    exports.isActivated = isActivated;
    function getActivatedArtifact(artifacts) {
      return artifacts.find(isActivated);
    }
    exports.getActivatedArtifact = getActivatedArtifact;
    function getArtifactDebugName(a3) {
      if (!a3) {
        return "unknown artifact";
      }
      return a3.id.substring(0, 8);
    }
    exports.getArtifactDebugName = getArtifactDebugName;
    var biomeName = (biome) => types_1.BiomeNames[biome];
    exports.biomeName = biomeName;
    var rarityName = (rarity) => types_1.ArtifactRarityNames[rarity];
    exports.rarityName = rarityName;
    var rarityNameFromArtifact = (a3) => (0, exports.rarityName)(a3.rarity);
    exports.rarityNameFromArtifact = rarityNameFromArtifact;
    function artifactBiomeName(artifact) {
      if (isAncient(artifact))
        return "Ancient";
      return (0, exports.biomeName)(artifact.planetBiome);
    }
    exports.artifactBiomeName = artifactBiomeName;
    var levelFromRarity = (rarity) => {
      if (rarity === types_1.ArtifactRarity.Mythic)
        return types_1.PlanetLevel.NINE;
      else if (rarity === types_1.ArtifactRarity.Legendary)
        return types_1.PlanetLevel.SEVEN;
      else if (rarity === types_1.ArtifactRarity.Epic)
        return types_1.PlanetLevel.FIVE;
      else if (rarity === types_1.ArtifactRarity.Rare)
        return types_1.PlanetLevel.THREE;
      else
        return types_1.PlanetLevel.ONE;
    };
    exports.levelFromRarity = levelFromRarity;
    var artifactFileNamesById = new Map();
    exports.ArtifactFileColor = {
      BLUE: 0,
      APP_BACKGROUND: 1
    };
    var forceAncient = void 0;
    function artifactRoll(id2) {
      return (0, serde_1.hashToInt)(id2) % 256;
    }
    exports.artifactRoll = artifactRoll;
    function isAncient(artifact) {
      if (forceAncient !== void 0)
        return forceAncient;
      if (isSpaceShip(artifact.artifactType))
        return false;
      const { id: id2, planetBiome: biome } = artifact;
      if (artifactIsAncientMap.has(id2)) {
        return artifactIsAncientMap.get(id2) || false;
      }
      let ancient = false;
      const roll = artifactRoll(id2);
      if (biome === types_1.Biome.CORRUPTED)
        ancient = roll % 2 === 0;
      else
        ancient = roll % 16 === 0;
      artifactIsAncientMap.set(id2, ancient);
      return ancient;
    }
    exports.isAncient = isAncient;
    function setForceAncient(force) {
      forceAncient = force;
    }
    exports.setForceAncient = setForceAncient;
    function artifactFileName(videoMode, thumb, artifact, color, debugProps = void 0) {
      const { artifactType: type, rarity, planetBiome: biome, id: id2 } = artifact;
      if (isSpaceShip(type)) {
        switch (type) {
          case types_1.ArtifactType.ShipWhale:
            return "64-whale.png";
          case types_1.ArtifactType.ShipMothership:
            return "64-mothership.png";
          case types_1.ArtifactType.ShipCrescent:
            return "64-crescent.png";
          case types_1.ArtifactType.ShipGear:
            return "64-gear.png";
          case types_1.ArtifactType.ShipTitan:
            return "64-titan.png";
        }
      }
      const size = thumb ? "16" : "64";
      const ext = videoMode ? "webm" : "png";
      let fileName = "";
      if (!debugProps?.skipCaching && artifactFileNamesById.has(id2)) {
        fileName = artifactFileNamesById.get(id2) || "";
      } else {
        const typeStr = types_1.ArtifactTypeNames[type];
        const rarityStr = types_1.ArtifactRarityNames[rarity];
        let nameStr = "";
        if (debugProps) {
          if (debugProps.forceAncient) {
            nameStr = "ancient";
          } else {
            nameStr = biome + types_1.BiomeNames[biome];
          }
        } else {
          if (isAncient(artifact)) {
            nameStr = "ancient";
          } else {
            nameStr = biome + types_1.BiomeNames[biome];
          }
        }
        fileName = `${typeStr}-${rarityStr}-${nameStr}`;
      }
      if (!debugProps?.skipCaching)
        artifactFileNamesById.set(id2, fileName);
      let colorStr = "";
      if (color === exports.ArtifactFileColor.APP_BACKGROUND)
        colorStr = "-bg";
      return `${size}-${fileName}${colorStr}.${ext}`;
    }
    exports.artifactFileName = artifactFileName;
    function getActiveBlackDomain(artifacts) {
      for (const artifact of artifacts) {
        if (artifact.artifactType === types_1.ArtifactType.BlackDomain && isActivated(artifact))
          return artifact;
      }
      return void 0;
    }
    exports.getActiveBlackDomain = getActiveBlackDomain;
    var dateMintedAt = (artifact) => {
      if (!artifact)
        return "00/00/0000";
      return new Date(artifact.mintedAtTimestamp * 1e3).toDateString();
    };
    exports.dateMintedAt = dateMintedAt;
    function canActivateArtifact(artifact, planet, artifactsOnPlanet) {
      if (isSpaceShip(artifact.artifactType)) {
        return planet && planet.owner === constants_1.EMPTY_ADDRESS && artifact.artifactType === types_1.ArtifactType.ShipCrescent && artifact.activations === 0;
      }
      const available = artifactAvailableTimestamp(artifact);
      if (available !== void 0) {
        const now2 = Date.now();
        const anyArtifactActive = artifactsOnPlanet.some((a3) => isActivated(a3));
        const waitUntilAvailable = available - now2;
        const availableToActivate = waitUntilAvailable <= -0 && !anyArtifactActive && planet?.locationId === artifact.onPlanetId && !!artifact.onPlanetId;
        return availableToActivate;
      }
      return false;
    }
    exports.canActivateArtifact = canActivateArtifact;
    function canWithdrawArtifact(account, artifact, planet) {
      return planet && !planet.destroyed && planet.owner === account && planet.planetType === types_1.PlanetType.TRADING_POST && !isActivated(artifact) && !isSpaceShip(artifact.artifactType);
    }
    exports.canWithdrawArtifact = canWithdrawArtifact;
    function canDepositArtifact(account, artifact, planet) {
      return planet && !planet.destroyed && planet.owner === account && !artifact.onPlanetId && planet.planetType === types_1.PlanetType.TRADING_POST;
    }
    exports.canDepositArtifact = canDepositArtifact;
    function getPlayerControlledSpaceships(artifacts, owner) {
      if (!owner)
        return [];
      return (artifacts || []).filter((a3) => a3?.controller === owner);
    }
    exports.getPlayerControlledSpaceships = getPlayerControlledSpaceships;
  }
});

// node_modules/@darkforest_eth/gamelogic/dist/number.js
var require_number = __commonJS({
  "node_modules/@darkforest_eth/gamelogic/dist/number.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatNumber = void 0;
    var formatNumber2 = (num, smallDec = 0) => {
      if (num < 1e3) {
        if (`${num}` === num.toFixed(0)) {
          return `${num.toFixed(0)}`;
        } else {
          return `${num.toFixed(smallDec)}`;
        }
      }
      const suffixes = ["", "K", "M", "B", "T", "q", "Q"];
      let log000 = 0;
      let rem = num;
      while (rem / 1e3 >= 1) {
        rem /= 1e3;
        log000++;
      }
      if (log000 === 0)
        return `${Math.floor(num)}`;
      if (rem < 10)
        return `${rem.toFixed(1)}${suffixes[log000]}`;
      else if (rem < 100)
        return `${rem.toFixed(1)}${suffixes[log000]}`;
      else if (log000 < suffixes.length)
        return `${rem.toFixed(0)}${suffixes[log000]}`;
      else
        return `${rem.toFixed(0)}E${log000 * 3}`;
    };
    exports.formatNumber = formatNumber2;
  }
});

// node_modules/@darkforest_eth/gamelogic/dist/planet.js
var require_planet3 = __commonJS({
  "node_modules/@darkforest_eth/gamelogic/dist/planet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.timeUntilNextBroadcastAvailable = exports.isLocatable = exports.isEmojiFlagMessage = exports.hasOwner = exports.getRange = exports.getPlanetRank = void 0;
    var constants_1 = require_dist2();
    var types_1 = require_dist();
    var getPlanetRank = (planet) => {
      if (!planet)
        return 0;
      return planet.upgradeState.reduce((a3, b3) => a3 + b3);
    };
    exports.getPlanetRank = getPlanetRank;
    function getRange(planet, percentEnergySending = 100, rangeBoost = 1) {
      if (percentEnergySending === 0)
        return 0;
      return Math.max(Math.log2(percentEnergySending / 5), 0) * planet.range * rangeBoost;
    }
    exports.getRange = getRange;
    function hasOwner(planet) {
      return planet.owner !== constants_1.EMPTY_ADDRESS;
    }
    exports.hasOwner = hasOwner;
    function isEmojiFlagMessage(planetMessage) {
      return planetMessage.body !== void 0 && planetMessage.type === types_1.PlanetMessageType.EmojiFlag;
    }
    exports.isEmojiFlagMessage = isEmojiFlagMessage;
    function isLocatable(planet) {
      return planet !== void 0 && planet.location !== void 0;
    }
    exports.isLocatable = isLocatable;
    function timeUntilNextBroadcastAvailable(lastRevealTimestamp, locationRevealCooldown) {
      if (!lastRevealTimestamp) {
        return 0;
      }
      return (lastRevealTimestamp + locationRevealCooldown) * 1e3 - Date.now();
    }
    exports.timeUntilNextBroadcastAvailable = timeUntilNextBroadcastAvailable;
  }
});

// node_modules/@darkforest_eth/gamelogic/dist/index.js
var require_dist5 = __commonJS({
  "node_modules/@darkforest_eth/gamelogic/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0)
        k22 = k3;
      Object.defineProperty(o3, k22, { enumerable: true, get: function() {
        return m3[k3];
      } });
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0)
        k22 = k3;
      o3[k22] = m3[k3];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p2 in m3)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m3, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_artifact3(), exports);
    __exportStar(require_number(), exports);
    __exportStar(require_planet3(), exports);
  }
});

// node_modules/@darkforest_eth/procedural/node_modules/@darkforest_eth/hashing/dist/fakeHash.js
var require_fakeHash = __commonJS({
  "node_modules/@darkforest_eth/procedural/node_modules/@darkforest_eth/hashing/dist/fakeHash.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fakeHash = exports.seededRandom = void 0;
    var big_integer_1 = __importDefault(require_BigInteger());
    function seededRandom(seed) {
      const x3 = Math.sin(seed) * 1e4;
      return x3 - Math.floor(x3);
    }
    exports.seededRandom = seededRandom;
    var SIZE = 65536;
    var globalSeed = 1;
    var globalRandom = () => {
      return seededRandom(globalSeed++);
    };
    var arr = [];
    for (let i3 = 0; i3 < SIZE; i3 += 1) {
      arr.push({
        idx: i3,
        rand: globalRandom()
      });
    }
    arr.sort((a3, b3) => a3.rand - b3.rand);
    var lookup = arr.map((a3) => a3.idx);
    var lookupInv = Array(SIZE).fill(0);
    for (let i3 = 0; i3 < SIZE; i3 += 1) {
      lookupInv[lookup[i3]] = i3;
    }
    var posMod = (m3, n2) => {
      const val2 = Math.floor(m3 / n2) * n2;
      return m3 - val2;
    };
    var sigma = (x3, y3) => {
      const val2 = 256 * x3 + y3;
      const idx = posMod(val2, SIZE);
      const ret = [Math.floor(lookup[idx] / 256), lookup[idx] % 256];
      return ret;
    };
    var cyc = (m3, n2) => (r3, s2) => {
      const val2 = posMod(256 * (r3 + m3) + (s2 + n2), SIZE);
      const ret = [Math.floor(val2 / 256), val2 % 256];
      return ret;
    };
    var fakeHash = (planetRarity) => (x3, y3) => {
      const m3 = Math.floor(x3 / 256);
      const r3 = x3 - m3 * 256;
      const n2 = Math.floor(y3 / 256);
      const s2 = y3 - n2 * 256;
      const [mPrime, nPrime] = sigma(m3, n2);
      const [xPrime, yPrime] = sigma(...cyc(mPrime, nPrime)(...sigma(r3, s2)));
      const validPlanet = xPrime * 256 + yPrime < 256 * 256 / planetRarity;
      let hash3 = validPlanet ? "00000000" : "1eadbeef";
      const seed = 8 * (1e7 * x3 + y3);
      for (let i3 = 0; i3 < 7; i3 += 1) {
        const rand2 = Math.floor(seededRandom(seed + i3) * 2 ** 32);
        let append = rand2.toString(16);
        while (append.length < 8) {
          append = "0" + append;
        }
        hash3 += append;
      }
      return (0, big_integer_1.default)(hash3, 16);
    };
    exports.fakeHash = fakeHash;
  }
});

// node_modules/@darkforest_eth/procedural/node_modules/@darkforest_eth/hashing/dist/fractions/bigFraction.js
var require_bigFraction = __commonJS({
  "node_modules/@darkforest_eth/procedural/node_modules/@darkforest_eth/hashing/dist/fractions/bigFraction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.errorConstructor = exports.Fraction = void 0;
    var { Fraction, errorConstructor } = function(root) {
      "use strict";
      function errorConstructor2() {
        const temp = Error.apply(this, arguments);
        temp["name"] = this["name"] = name;
        this["stack"] = temp["stack"];
        this["message"] = temp["message"];
      }
      if (!BigInt)
        BigInt = function(n2) {
          return n2;
        };
      const C_ONE = BigInt(1);
      const C_ZERO = BigInt(0);
      const C_TEN = BigInt(10);
      const C_TWO = BigInt(2);
      const C_FIVE = BigInt(5);
      const MAX_CYCLE_LEN = BigInt(2e3);
      const P2 = {
        s: C_ONE,
        n: C_ZERO,
        d: C_ONE
      };
      function createError(name2) {
        function IntermediateInheritor() {
        }
        IntermediateInheritor.prototype = Error.prototype;
        errorConstructor2.prototype = new IntermediateInheritor();
        return errorConstructor2;
      }
      const DivisionByZero = Fraction2["DivisionByZero"] = createError("DivisionByZero");
      const InvalidParameter = Fraction2["InvalidParameter"] = createError("InvalidParameter");
      function assign(n2, s2) {
        try {
          n2 = BigInt(n2);
        } catch (e4) {
          throw new InvalidParameter();
        }
        return n2 * s2;
      }
      const parse2 = function(p1, p2) {
        let n2 = C_ZERO, d2 = C_ONE, s2 = C_ONE;
        if (p1 === void 0 || p1 === null) {
        } else if (p2 !== void 0) {
          n2 = BigInt(p1);
          d2 = BigInt(p2);
          s2 = n2 * d2;
        } else if (typeof p1 === "object") {
          if ("d" in p1 && "n" in p1) {
            n2 = BigInt(p1["n"]);
            d2 = BigInt(p1["d"]);
            if ("s" in p1)
              n2 *= BigInt(p1["s"]);
          } else if (0 in p1) {
            n2 = BigInt(p1[0]);
            if (1 in p1)
              d2 = BigInt(p1[1]);
          } else if (p1 instanceof BigInt) {
            n2 = BigInt(p1);
          } else {
            throw new InvalidParameter();
          }
          s2 = n2 * d2;
        } else if (typeof p1 === "number") {
          if (isNaN(p1)) {
            throw new InvalidParameter();
          }
          if (p1 < 0) {
            s2 = -C_ONE;
            p1 = -p1;
          }
          if (p1 % 1 === 0) {
            n2 = BigInt(p1);
          } else if (p1 > 0) {
            let z2 = 1;
            let A = 0, B = 1;
            let C3 = 1, D2 = 1;
            let N3 = 1e7;
            if (p1 >= 1) {
              z2 = 10 ** Math.floor(1 + Math.log10(p1));
              p1 /= z2;
            }
            while (B <= N3 && D2 <= N3) {
              let M3 = (A + C3) / (B + D2);
              if (p1 === M3) {
                if (B + D2 <= N3) {
                  n2 = A + C3;
                  d2 = B + D2;
                } else if (D2 > B) {
                  n2 = C3;
                  d2 = D2;
                } else {
                  n2 = A;
                  d2 = B;
                }
                break;
              } else {
                if (p1 > M3) {
                  A += C3;
                  B += D2;
                } else {
                  C3 += A;
                  D2 += B;
                }
                if (B > N3) {
                  n2 = C3;
                  d2 = D2;
                } else {
                  n2 = A;
                  d2 = B;
                }
              }
            }
            n2 = BigInt(n2) * BigInt(z2);
            d2 = BigInt(d2);
          } else if (isNaN(p1)) {
            d2 = n2 = NaN;
          }
        } else if (typeof p1 === "string") {
          let ndx = 0;
          let v3 = C_ZERO, w3 = C_ZERO, x3 = C_ZERO, y3 = C_ONE, z2 = C_ONE;
          let match = p1.match(/\d+|./g);
          if (match === null)
            throw new InvalidParameter();
          if (match[ndx] === "-") {
            s2 = -C_ONE;
            ndx++;
          } else if (match[ndx] === "+") {
            ndx++;
          }
          if (match.length === ndx + 1) {
            w3 = assign(match[ndx++], s2);
          } else if (match[ndx + 1] === "." || match[ndx] === ".") {
            if (match[ndx] !== ".") {
              v3 = assign(match[ndx++], s2);
            }
            ndx++;
            if (ndx + 1 === match.length || match[ndx + 1] === "(" && match[ndx + 3] === ")" || match[ndx + 1] === "'" && match[ndx + 3] === "'") {
              w3 = assign(match[ndx], s2);
              y3 = C_TEN ** BigInt(match[ndx].length);
              ndx++;
            }
            if (match[ndx] === "(" && match[ndx + 2] === ")" || match[ndx] === "'" && match[ndx + 2] === "'") {
              x3 = assign(match[ndx + 1], s2);
              z2 = C_TEN ** BigInt(match[ndx + 1].length) - C_ONE;
              ndx += 3;
            }
          } else if (match[ndx + 1] === "/" || match[ndx + 1] === ":") {
            w3 = assign(match[ndx], s2);
            y3 = assign(match[ndx + 2], C_ONE);
            ndx += 3;
          } else if (match[ndx + 3] === "/" && match[ndx + 1] === " ") {
            v3 = assign(match[ndx], s2);
            w3 = assign(match[ndx + 2], s2);
            y3 = assign(match[ndx + 4], C_ONE);
            ndx += 5;
          }
          if (match.length <= ndx) {
            d2 = y3 * z2;
            s2 = n2 = x3 + d2 * v3 + z2 * w3;
          } else {
            throw new InvalidParameter();
          }
        } else {
          throw new InvalidParameter();
        }
        if (d2 === C_ZERO) {
          throw new DivisionByZero();
        }
        P2["s"] = s2 < C_ZERO ? -C_ONE : C_ONE;
        P2["n"] = n2 < C_ZERO ? -n2 : n2;
        P2["d"] = d2 < C_ZERO ? -d2 : d2;
      };
      function modpow(b3, e4, m3) {
        let r3 = C_ONE;
        for (; e4 > C_ZERO; b3 = b3 * b3 % m3, e4 >>= C_ONE) {
          if (e4 & C_ONE) {
            r3 = r3 * b3 % m3;
          }
        }
        return r3;
      }
      function cycleLen(n2, d2) {
        for (; d2 % C_TWO === C_ZERO; d2 /= C_TWO) {
        }
        for (; d2 % C_FIVE === C_ZERO; d2 /= C_FIVE) {
        }
        if (d2 === C_ONE)
          return C_ZERO;
        let rem = C_TEN % d2;
        let t3 = C_ONE;
        for (; rem !== C_ONE; t3++) {
          rem = rem * C_TEN % d2;
          if (t3 > MAX_CYCLE_LEN)
            return C_ZERO;
        }
        return t3;
      }
      function cycleStart(n2, d2, len) {
        let rem1 = C_ONE;
        let rem2 = modpow(C_TEN, len, d2);
        for (let t3 = 0; t3 < 300; t3++) {
          if (rem1 === rem2)
            return BigInt(t3);
          rem1 = rem1 * C_TEN % d2;
          rem2 = rem2 * C_TEN % d2;
        }
        return 0;
      }
      function gcd(a3, b3) {
        if (!a3)
          return b3;
        if (!b3)
          return a3;
        while (1) {
          a3 %= b3;
          if (!a3)
            return b3;
          b3 %= a3;
          if (!b3)
            return a3;
        }
      }
      function Fraction2(a3, b3) {
        if (!(this instanceof Fraction2)) {
          return new Fraction2(a3, b3);
        }
        parse2(a3, b3);
        a3 = gcd(P2["d"], P2["n"]);
        this["s"] = P2["s"];
        this["n"] = P2["n"] / a3 | C_ZERO;
        this["d"] = P2["d"] / a3 | C_ZERO;
      }
      Fraction2.prototype = {
        s: C_ONE,
        n: C_ZERO,
        d: C_ONE,
        abs: function() {
          return new Fraction2(this["n"], this["d"]);
        },
        neg: function() {
          return new Fraction2(-this["s"] * this["n"], this["d"]);
        },
        add: function(a3, b3) {
          parse2(a3, b3);
          return new Fraction2(this["s"] * this["n"] * P2["d"] + P2["s"] * this["d"] * P2["n"], this["d"] * P2["d"]);
        },
        sub: function(a3, b3) {
          parse2(a3, b3);
          return new Fraction2(this["s"] * this["n"] * P2["d"] - P2["s"] * this["d"] * P2["n"], this["d"] * P2["d"]);
        },
        mul: function(a3, b3) {
          parse2(a3, b3);
          return new Fraction2(this["s"] * P2["s"] * this["n"] * P2["n"], this["d"] * P2["d"]);
        },
        div: function(a3, b3) {
          parse2(a3, b3);
          return new Fraction2(this["s"] * P2["s"] * this["n"] * P2["d"], this["d"] * P2["n"]);
        },
        clone: function() {
          return new Fraction2(this);
        },
        mod: function(a3, b3) {
          if (a3 === void 0) {
            return new Fraction2(this["s"] * this["n"] % this["d"], 1);
          }
          parse2(a3, b3);
          if (P2["n"] === 0 && this["d"] === 0) {
            Fraction2(0, 0);
          }
          return new Fraction2(this["s"] * (P2["d"] * this["n"]) % (P2["n"] * this["d"]), P2["d"] * this["d"]);
        },
        gcd: function(a3, b3) {
          parse2(a3, b3);
          return new Fraction2(gcd(P2["n"], this["n"]) * gcd(P2["d"], this["d"]), P2["d"] * this["d"]);
        },
        lcm: function(a3, b3) {
          parse2(a3, b3);
          if (P2["n"] === C_ZERO && this["n"] === C_ZERO) {
            return new Fraction2();
          }
          return new Fraction2(P2["n"] * this["n"], gcd(P2["n"], this["n"]) * gcd(P2["d"], this["d"]));
        },
        inverse: function() {
          return new Fraction2(this["s"] * this["d"], this["n"]);
        },
        pow: function(m3) {
          if (m3 < 0) {
            return new Fraction2((this["s"] * this["d"]) ** BigInt(-m3), this["n"] ** BigInt(-m3));
          } else {
            return new Fraction2((this["s"] * this["n"]) ** BigInt(+m3), this["d"] ** BigInt(+m3));
          }
        },
        equals: function(a3, b3) {
          parse2(a3, b3);
          return this["s"] * this["n"] * P2["d"] === P2["s"] * P2["n"] * this["d"];
        },
        compare: function(a3, b3) {
          parse2(a3, b3);
          let t3 = this["s"] * this["n"] * P2["d"] - P2["s"] * P2["n"] * this["d"];
          return (C_ZERO < t3) - (t3 < C_ZERO);
        },
        ceil: function(places) {
          places = 10 ** Number(places || 0);
          return new Fraction2(Math.ceil(places * Number(this["s"] * this["n"]) / Number(this["d"])), places);
        },
        floor: function(places) {
          places = 10 ** Number(places || 0);
          return new Fraction2(Math.floor(places * Number(this["s"] * this["n"]) / Number(this["d"])), places);
        },
        round: function(places) {
          places = 10 ** Number(places || 0);
          return new Fraction2(Math.round(places * Number(this["s"] * this["n"]) / Number(this["d"])), places);
        },
        divisible: function(a3, b3) {
          parse2(a3, b3);
          return !(!(P2["n"] * this["d"]) || this["n"] * P2["d"] % (P2["n"] * this["d"]));
        },
        valueOf: function() {
          return Number(this["s"] * this["n"]) / Number(this["d"]);
        },
        toString: function(dec) {
          let g3;
          let N3 = this["n"];
          let D2 = this["d"];
          dec = dec || 15;
          let cycLen = cycleLen(N3, D2);
          let cycOff = cycleStart(N3, D2, cycLen);
          let str = this["s"] < C_ZERO ? "-" : "";
          str += N3 / D2 | C_ZERO;
          N3 %= D2;
          N3 *= C_TEN;
          if (N3)
            str += ".";
          if (cycLen) {
            for (let i3 = cycOff; i3--; ) {
              str += N3 / D2 | C_ZERO;
              N3 %= D2;
              N3 *= C_TEN;
            }
            str += "(";
            for (let i3 = cycLen; i3--; ) {
              str += N3 / D2 | C_ZERO;
              N3 %= D2;
              N3 *= C_TEN;
            }
            str += ")";
          } else {
            for (let i3 = dec; N3 && i3--; ) {
              str += N3 / D2 | C_ZERO;
              N3 %= D2;
              N3 *= C_TEN;
            }
          }
          return str;
        },
        toFraction: function(excludeWhole) {
          let n2 = this["n"];
          let d2 = this["d"];
          let str = this["s"] < C_ZERO ? "-" : "";
          if (d2 === C_ONE) {
            str += n2;
          } else {
            let whole = n2 / d2 | C_ZERO;
            if (excludeWhole && whole > C_ZERO) {
              str += whole;
              str += " ";
              n2 %= d2;
            }
            str += n2;
            str += "/";
            str += d2;
          }
          return str;
        },
        toLatex: function(excludeWhole) {
          let n2 = this["n"];
          let d2 = this["d"];
          let str = this["s"] < C_ZERO ? "-" : "";
          if (d2 === C_ONE) {
            str += n2;
          } else {
            let whole = n2 / d2 | C_ZERO;
            if (excludeWhole && whole > C_ZERO) {
              str += whole;
              n2 %= d2;
            }
            str += "\\frac{";
            str += n2;
            str += "}{";
            str += d2;
            str += "}";
          }
          return str;
        },
        toContinued: function() {
          let a3 = this["n"];
          let b3 = this["d"];
          let res = [];
          do {
            res.push(a3 / b3 | C_ZERO);
            let t3 = a3 % b3;
            a3 = b3;
            b3 = t3;
          } while (a3 !== C_ONE);
          return res;
        },
        simplify: function(eps) {
          let cont = this["abs"]()["toContinued"]();
          eps = eps || 1e-3;
          function rec(a3) {
            if (a3.length === 1)
              return new Fraction2(a3[0]);
            return rec(a3.slice(1))["inverse"]()["add"](a3[0]);
          }
          for (let i3 = 0; i3 < cont.length; i3++) {
            let tmp = rec(cont.slice(0, i3 + 1));
            if (tmp["sub"](this["abs"]())["abs"]().valueOf() < eps) {
              return tmp["mul"](this["s"]);
            }
          }
          return this;
        }
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      Fraction2["default"] = Fraction2;
      Fraction2["Fraction"] = Fraction2;
      return {
        Fraction: Fraction2,
        errorConstructor: errorConstructor2
      };
    }(exports);
    exports.Fraction = Fraction;
    exports.errorConstructor = errorConstructor;
  }
});

// node_modules/@darkforest_eth/procedural/node_modules/@darkforest_eth/hashing/dist/mimc.js
var require_mimc = __commonJS({
  "node_modules/@darkforest_eth/procedural/node_modules/@darkforest_eth/hashing/dist/mimc.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.perlinRandHash = exports.mimcWithRounds = exports.modPBigIntNative = exports.modPBigInt = exports.mimcSponge = exports.p = void 0;
    var big_integer_1 = __importDefault(require_BigInteger());
    exports.p = (0, big_integer_1.default)("21888242871839275222246405745257275088548364400416034343698204186575808495617");
    var c5 = [
      "0",
      "7120861356467848435263064379192047478074060781135320967663101236819528304084",
      "5024705281721889198577876690145313457398658950011302225525409148828000436681",
      "17980351014018068290387269214713820287804403312720763401943303895585469787384",
      "19886576439381707240399940949310933992335779767309383709787331470398675714258",
      "1213715278223786725806155661738676903520350859678319590331207960381534602599",
      "18162138253399958831050545255414688239130588254891200470934232514682584734511",
      "7667462281466170157858259197976388676420847047604921256361474169980037581876",
      "7207551498477838452286210989212982851118089401128156132319807392460388436957",
      "9864183311657946807255900203841777810810224615118629957816193727554621093838",
      "4798196928559910300796064665904583125427459076060519468052008159779219347957",
      "17387238494588145257484818061490088963673275521250153686214197573695921400950",
      "10005334761930299057035055370088813230849810566234116771751925093634136574742",
      "11897542014760736209670863723231849628230383119798486487899539017466261308762",
      "16771780563523793011283273687253985566177232886900511371656074413362142152543",
      "749264854018824809464168489785113337925400687349357088413132714480582918506",
      "3683645737503705042628598550438395339383572464204988015434959428676652575331",
      "7556750851783822914673316211129907782679509728346361368978891584375551186255",
      "20391289379084797414557439284689954098721219201171527383291525676334308303023",
      "18146517657445423462330854383025300323335289319277199154920964274562014376193",
      "8080173465267536232534446836148661251987053305394647905212781979099916615292",
      "10796443006899450245502071131975731672911747129805343722228413358507805531141",
      "5404287610364961067658660283245291234008692303120470305032076412056764726509",
      "4623894483395123520243967718315330178025957095502546813929290333264120223168",
      "16845753148201777192406958674202574751725237939980634861948953189320362207797",
      "4622170486584704769521001011395820886029808520586507873417553166762370293671",
      "16688277490485052681847773549197928630624828392248424077804829676011512392564",
      "11878652861183667748838188993669912629573713271883125458838494308957689090959",
      "2436445725746972287496138382764643208791713986676129260589667864467010129482",
      "1888098689545151571063267806606510032698677328923740058080630641742325067877",
      "148924106504065664829055598316821983869409581623245780505601526786791681102",
      "18875020877782404439294079398043479420415331640996249745272087358069018086569",
      "15189693413320228845990326214136820307649565437237093707846682797649429515840",
      "19669450123472657781282985229369348220906547335081730205028099210442632534079",
      "5521922218264623411380547905210139511350706092570900075727555783240701821773",
      "4144769320246558352780591737261172907511489963810975650573703217887429086546",
      "10097732913112662248360143041019433907849917041759137293018029019134392559350",
      "1720059427972723034107765345743336447947522473310069975142483982753181038321",
      "6302388219880227251325608388535181451187131054211388356563634768253301290116",
      "6745410632962119604799318394592010194450845483518862700079921360015766217097",
      "10858157235265583624235850660462324469799552996870780238992046963007491306222",
      "20241898894740093733047052816576694435372877719072347814065227797906130857593",
      "10165780782761211520836029617746977303303335603838343292431760011576528327409",
      "2832093654883670345969792724123161241696170611611744759675180839473215203706",
      "153011722355526826233082383360057587249818749719433916258246100068258954737",
      "20196970640587451358539129330170636295243141659030208529338914906436009086943",
      "3180973917010545328313139835982464870638521890385603025657430208141494469656",
      "17198004293191777441573635123110935015228014028618868252989374962722329283022",
      "7642160509228669138628515458941659189680509753651629476399516332224325757132",
      "19346204940546791021518535594447257347218878114049998691060016493806845179755",
      "11501810868606870391127866188394535330696206817602260610801897042898616817272",
      "3113973447392053821824427670386252797811804954746053461397972968381571297505",
      "6545064306297957002139416752334741502722251869537551068239642131448768236585",
      "5203908808704813498389265425172875593837960384349653691918590736979872578408",
      "2246692432011290582160062129070762007374502637007107318105405626910313810224",
      "11760570435432189127645691249600821064883781677693087773459065574359292849137",
      "5543749482491340532547407723464609328207990784853381797689466144924198391839",
      "8837549193990558762776520822018694066937602576881497343584903902880277769302",
      "12855514863299373699594410385788943772765811961581749194183533625311486462501",
      "5363660674689121676875069134269386492382220935599781121306637800261912519729",
      "13162342403579303950549728848130828093497701266240457479693991108217307949435",
      "916941639326869583414469202910306428966657806899788970948781207501251816730",
      "15618589556584434434009868216186115416835494805174158488636000580759692174228",
      "8959562060028569701043973060670353733575345393653685776974948916988033453971",
      "16390754464333401712265575949874369157699293840516802426621216808905079127650",
      "168282396747788514908709091757591226095443902501365500003618183905496160435",
      "8327443473179334761744301768309008451162322941906921742120510244986704677004",
      "17213012626801210615058753489149961717422101711567228037597150941152495100640",
      "10394369641533736715250242399198097296122982486516256408681925424076248952280",
      "17784386835392322654196171115293700800825771210400152504776806618892170162248",
      "16533189939837087893364000390641148516479148564190420358849587959161226782982",
      "18725396114211370207078434315900726338547621160475533496863298091023511945076",
      "7132325028834551397904855671244375895110341505383911719294705267624034122405",
      "148317947440800089795933930720822493695520852448386394775371401743494965187",
      "19001050671757720352890779127693793630251266879994702723636759889378387053056",
      "18824274411769830274877839365728651108434404855803844568234862945613766611460",
      "12771414330193951156383998390424063470766226667986423961689712557338777174205",
      "11332046574800279729678603488745295198038913503395629790213378101166488244657",
      "9607550223176946388146938069307456967842408600269548190739947540821716354749",
      "8756385288462344550200229174435953103162307705310807828651304665320046782583",
      "176061952957067086877570020242717222844908281373122372938833890096257042779",
      "12200212977482648306758992405065921724409841940671166017620928947866825250857",
      "10868453624107875516866146499877130701929063632959660262366632833504750028858",
      "2016095394399807253596787752134573207202567875457560571095586743878953450738",
      "21815578223768330433802113452339488275704145896544481092014911825656390567514",
      "4923772847693564777744725640710197015181591950368494148029046443433103381621",
      "1813584943682214789802230765734821149202472893379265320098816901270224589984",
      "10810123816265612772922113403831964815724109728287572256602010709288980656498",
      "1153669123397255702524721206511185557982017410156956216465120456256288427021",
      "5007518659266430200134478928344522649876467369278722765097865662497773767152",
      "2511432546938591792036639990606464315121646668029252285288323664350666551637",
      "32883284540320451295484135704808083452381176816565850047310272290579727564",
      "10484856914279112612610993418405543310546746652738541161791501150994088679557",
      "2026733759645519472558796412979210009170379159866522399881566309631434814953",
      "14731806221235869882801331463708736361296174006732553130708107037190460654379",
      "14740327483193277147065845135561988641238516852487657117813536909482068950652",
      "18787428285295558781869865751953016580493190547148386433580291216673009884554",
      "3804047064713122820157099453648459188816376755739202017447862327783289895072",
      "16709604795697901641948603019242067672006293290826991671766611326262532802914",
      "11061717085931490100602849654034280576915102867237101935487893025907907250695",
      "2821730726367472966906149684046356272806484545281639696873240305052362149654",
      "17467794879902895769410571945152708684493991588672014763135370927880883292655",
      "1571520786233540988201616650622796363168031165456869481368085474420849243232",
      "10041051776251223165849354194892664881051125330236567356945669006147134614302",
      "3981753758468103976812813304477670033098707002886030847251581853700311567551",
      "4365864398105436789177703571412645548020537580493599380018290523813331678900",
      "2391801327305361293476178683853802679507598622000359948432171562543560193350",
      "214219368547551689972421167733597094823289857206402800635962137077096090722",
      "18192064100315141084242006659317257023098826945893371479835220462302399655674",
      "15487549757142039139328911515400805508248576685795694919457041092150651939253",
      "10142447197759703415402259672441315777933858467700579946665223821199077641122",
      "11246573086260753259993971254725613211193686683988426513880826148090811891866",
      "6574066859860991369704567902211886840188702386542112593710271426704432301235",
      "11311085442652291634822798307831431035776248927202286895207125867542470350078",
      "20977948360215259915441258687649465618185769343138135384346964466965010873779",
      "792781492853909872425531014397300057232399608769451037135936617996830018501",
      "5027602491523497423798779154966735896562099398367163998686335127580757861872",
      "14595204575654316237672764823862241845410365278802914304953002937313300553572",
      "13973538843621261113924259058427434053808430378163734641175100160836376897004",
      "16395063164993626722686882727042150241125309409717445381854913964674649318585",
      "8465768840047024550750516678171433288207841931251654898809033371655109266663",
      "21345603324471810861925019445720576814602636473739003852898308205213912255830",
      "21171984405852590343970239018692870799717057961108910523876770029017785940991",
      "10761027113757988230637066281488532903174559953630210849190212601991063767647",
      "6678298831065390834922566306988418588227382406175769592902974103663687992230",
      "4993662582188632374202316265508850988596880036291765531885657575099537176757",
      "18364168158495573675698600238443218434246806358811328083953887470513967121206",
      "3506345610354615013737144848471391553141006285964325596214723571988011984829",
      "248732676202643792226973868626360612151424823368345645514532870586234380100",
      "10090204501612803176317709245679152331057882187411777688746797044706063410969",
      "21297149835078365363970699581821844234354988617890041296044775371855432973500",
      "16729368143229828574342820060716366330476985824952922184463387490091156065099",
      "4467191506765339364971058668792642195242197133011672559453028147641428433293",
      "8677548159358013363291014307402600830078662555833653517843708051504582990832",
      "1022951765127126818581466247360193856197472064872288389992480993218645055345",
      "1888195070251580606973417065636430294417895423429240431595054184472931224452",
      "4221265384902749246920810956363310125115516771964522748896154428740238579824",
      "2825393571154632139467378429077438870179957021959813965940638905853993971879",
      "19171031072692942278056619599721228021635671304612437350119663236604712493093",
      "10780807212297131186617505517708903709488273075252405602261683478333331220733",
      "18230936781133176044598070768084230333433368654744509969087239465125979720995",
      "16901065971871379877929280081392692752968612240624985552337779093292740763381",
      "146494141603558321291767829522948454429758543710648402457451799015963102253",
      "2492729278659146790410698334997955258248120870028541691998279257260289595548",
      "2204224910006646535594933495262085193210692406133533679934843341237521233504",
      "16062117410185840274616925297332331018523844434907012275592638570193234893570",
      "5894928453677122829055071981254202951712129328678534592916926069506935491729",
      "4947482739415078212217504789923078546034438919537985740403824517728200332286",
      "16143265650645676880461646123844627780378251900510645261875867423498913438066",
      "397690828254561723549349897112473766901585444153303054845160673059519614409",
      "11272653598912269895509621181205395118899451234151664604248382803490621227687",
      "15566927854306879444693061574322104423426072650522411176731130806720753591030",
      "14222898219492484180162096141564251903058269177856173968147960855133048449557",
      "16690275395485630428127725067513114066329712673106153451801968992299636791385",
      "3667030990325966886479548860429670833692690972701471494757671819017808678584",
      "21280039024501430842616328642522421302481259067470872421086939673482530783142",
      "15895485136902450169492923978042129726601461603404514670348703312850236146328",
      "7733050956302327984762132317027414325566202380840692458138724610131603812560",
      "438123800976401478772659663183448617575635636575786782566035096946820525816",
      "814913922521637742587885320797606426167962526342166512693085292151314976633",
      "12368712287081330853637674140264759478736012797026621876924395982504369598764",
      "2494806857395134874309386694756263421445039103814920780777601708371037591569",
      "16101132301514338989512946061786320637179843435886825102406248183507106312877",
      "6252650284989960032925831409804233477770646333900692286731621844532438095656",
      "9277135875276787021836189566799935097400042171346561246305113339462708861695",
      "10493603554686607050979497281838644324893776154179810893893660722522945589063",
      "8673089750662709235894359384294076697329948991010184356091130382437645649279",
      "9558393272910366944245875920138649617479779893610128634419086981339060613250",
      "19012287860122586147374214541764572282814469237161122489573881644994964647218",
      "9783723818270121678386992630754842961728702994964214799008457449989291229500",
      "15550788416669474113213749561488122552422887538676036667630838378023479382689",
      "15016165746156232864069722572047169071786333815661109750860165034341572904221",
      "6506225705710197163670556961299945987488979904603689017479840649664564978574",
      "10796631184889302076168355684722130903785890709107732067446714470783437829037",
      "19871836214837460419845806980869387567383718044439891735114283113359312279540",
      "20871081766843466343749609089986071784031203517506781251203251608363835140622",
      "5100105771517691442278432864090229416166996183792075307747582375962855820797",
      "8777887112076272395250620301071581171386440850451972412060638225741125310886",
      "5300440870136391278944213332144327695659161151625757537632832724102670898756",
      "1205448543652932944633962232545707633928124666868453915721030884663332604536",
      "5542499997310181530432302492142574333860449305424174466698068685590909336771",
      "11028094245762332275225364962905938096659249161369092798505554939952525894293",
      "19187314764836593118404597958543112407224947638377479622725713735224279297009",
      "17047263688548829001253658727764731047114098556534482052135734487985276987385",
      "19914849528178967155534624144358541535306360577227460456855821557421213606310",
      "2929658084700714257515872921366736697080475676508114973627124569375444665664",
      "15092262360719700162343163278648422751610766427236295023221516498310468956361",
      "21578580340755653236050830649990190843552802306886938815497471545814130084980",
      "1258781501221760320019859066036073675029057285507345332959539295621677296991",
      "3819598418157732134449049289585680301176983019643974929528867686268702720163",
      "8653175945487997845203439345797943132543211416447757110963967501177317426221",
      "6614652990340435611114076169697104582524566019034036680161902142028967568142",
      "19212515502973904821995111796203064175854996071497099383090983975618035391558",
      "18664315914479294273286016871365663486061896605232511201418576829062292269769",
      "11498264615058604317482574216318586415670903094838791165247179252175768794889",
      "10814026414212439999107945133852431304483604215416531759535467355316227331774",
      "17566185590731088197064706533119299946752127014428399631467913813769853431107",
      "14016139747289624978792446847000951708158212463304817001882956166752906714332",
      "8242601581342441750402731523736202888792436665415852106196418942315563860366",
      "9244680976345080074252591214216060854998619670381671198295645618515047080988",
      "12216779172735125538689875667307129262237123728082657485828359100719208190116",
      "10702811721859145441471328511968332847175733707711670171718794132331147396634",
      "6479667912792222539919362076122453947926362746906450079329453150607427372979",
      "15117544653571553820496948522381772148324367479772362833334593000535648316185",
      "6842203153996907264167856337497139692895299874139131328642472698663046726780",
      "12732823292801537626009139514048596316076834307941224506504666470961250728055",
      "6936272626871035740815028148058841877090860312517423346335878088297448888663",
      "17297554111853491139852678417579991271009602631577069694853813331124433680030",
      "16641596134749940573104316021365063031319260205559553673368334842484345864859",
      "7400481189785154329569470986896455371037813715804007747228648863919991399081",
      "2273205422216987330510475127669563545720586464429614439716564154166712854048",
      "15162538063742142685306302282127534305212832649282186184583465569986719234456",
      "5628039096440332922248578319648483863204530861778160259559031331287721255522",
      "16085392195894691829567913404182676871326863890140775376809129785155092531260",
      "14227467863135365427954093998621993651369686288941275436795622973781503444257",
      "18224457394066545825553407391290108485121649197258948320896164404518684305122",
      "274945154732293792784580363548970818611304339008964723447672490026510689427",
      "11050822248291117548220126630860474473945266276626263036056336623671308219529",
      "2119542016932434047340813757208803962484943912710204325088879681995922344971",
      "0"
    ].map((n2) => (0, big_integer_1.default)(n2));
    var FeistelState = class {
      constructor(rounds, k3) {
        this.l = (0, big_integer_1.default)(0);
        this.r = (0, big_integer_1.default)(0);
        this.rounds = rounds;
        this.k = k3;
      }
      inject(elt) {
        this.l = this.l.add(elt).mod(exports.p);
      }
      mix() {
        for (let i3 = 0; i3 < this.rounds - 1; i3++) {
          const t4 = this.k.add(this.l).add(c5[i3]).mod(exports.p);
          const lNew = t4.modPow(5, exports.p).add(this.r).mod(exports.p);
          this.r = this.l;
          this.l = lNew;
        }
        const t3 = this.k.add(this.l).mod(exports.p);
        this.r = t3.modPow(5, exports.p).add(this.r).mod(exports.p);
      }
    };
    function mimcSponge(inputs, nOutputs, rounds, key2) {
      const state = new FeistelState(rounds, (0, big_integer_1.default)(key2));
      for (const elt of inputs) {
        state.inject(elt);
        state.mix();
      }
      const outputs = [state.l];
      for (let i3 = 0; i3 < nOutputs - 1; i3++) {
        state.mix();
        outputs.push(state.l);
      }
      return outputs;
    }
    exports.mimcSponge = mimcSponge;
    function modPBigInt(x3) {
      let ret = (0, big_integer_1.default)(x3).mod(exports.p);
      if (ret.lesser((0, big_integer_1.default)(0))) {
        ret = ret.add(exports.p);
      }
      return ret;
    }
    exports.modPBigInt = modPBigInt;
    function modPBigIntNative(x3) {
      let ret = x3.mod(exports.p);
      if (ret.lesser((0, big_integer_1.default)(0))) {
        ret = ret.add(exports.p);
      }
      return ret;
    }
    exports.modPBigIntNative = modPBigIntNative;
    var mimcWithRounds = (rounds, key2) => (...inputs) => mimcSponge(inputs.map((n2) => modPBigInt(n2)), 1, rounds, key2)[0];
    exports.mimcWithRounds = mimcWithRounds;
    function mimcHash4(key2) {
      return (0, exports.mimcWithRounds)(220, key2);
    }
    var perlinRandHash = (key2) => (0, exports.mimcWithRounds)(4, key2);
    exports.perlinRandHash = perlinRandHash;
    exports.default = mimcHash4;
  }
});

// node_modules/@darkforest_eth/procedural/node_modules/@darkforest_eth/hashing/dist/perlin.js
var require_perlin = __commonJS({
  "node_modules/@darkforest_eth/procedural/node_modules/@darkforest_eth/hashing/dist/perlin.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.perlin = exports.MAX_PERLIN_VALUE = exports.getRandomGradientAt = exports.rand = void 0;
    var big_integer_1 = __importDefault(require_BigInteger());
    var bigFraction_1 = require_bigFraction();
    var mimc_1 = require_mimc();
    var TRACK_LCM = false;
    var rand2 = (key2) => (...args) => {
      return (0, mimc_1.perlinRandHash)(key2)(...args).remainder(16).toJSNumber();
    };
    exports.rand = rand2;
    var vecs;
    try {
      vecs = [
        [1e3, 0],
        [923, 382],
        [707, 707],
        [382, 923],
        [0, 1e3],
        [-383, 923],
        [-708, 707],
        [-924, 382],
        [-1e3, 0],
        [-924, -383],
        [-708, -708],
        [-383, -924],
        [-1, -1e3],
        [382, -924],
        [707, -708],
        [923, -383]
      ].map(([x3, y3]) => ({ x: new bigFraction_1.Fraction(x3, 1e3), y: new bigFraction_1.Fraction(y3, 1e3) }));
    } catch (err) {
      console.error("Browser does not support BigInt.", err);
    }
    var getRandomGradientAt = (point3, scale, randFn) => {
      const val2 = vecs[randFn(point3.x.valueOf(), point3.y.valueOf(), scale.valueOf())];
      return val2;
    };
    exports.getRandomGradientAt = getRandomGradientAt;
    var minus = (a3, b3) => {
      return {
        x: a3.x.sub(b3.x),
        y: a3.y.sub(b3.y)
      };
    };
    var dot = (a3, b3) => {
      return a3.x.mul(b3.x).add(a3.y.mul(b3.y));
    };
    var smoothStep = (x3) => {
      return x3;
    };
    var scalarMultiply = (s2, v3) => ({
      x: v3.x.mul(s2),
      y: v3.y.mul(s2)
    });
    var getWeight = (corner, p2) => {
      return smoothStep(new bigFraction_1.Fraction(1).sub(p2.x.sub(corner.x).abs())).mul(smoothStep(new bigFraction_1.Fraction(1).sub(p2.y.sub(corner.y).abs())));
    };
    var perlinValue = (corners, scale, p2) => {
      let ret = new bigFraction_1.Fraction(0);
      for (const corner of corners) {
        const distVec = minus(p2, corner.coords);
        ret = ret.add(getWeight(scalarMultiply(scale.inverse(), corner.coords), scalarMultiply(scale.inverse(), p2)).mul(dot(scalarMultiply(scale.inverse(), distVec), corner.gradient)));
      }
      return ret;
    };
    var runningLCM = (0, big_integer_1.default)(1);
    var updateLCM = (oldLCM, newValue) => {
      if (!TRACK_LCM) {
        return oldLCM;
      }
      const newLCM = big_integer_1.default.lcm(oldLCM, newValue);
      if (newLCM !== oldLCM) {
        console.log("LCM updated to ", newLCM);
      }
      return newLCM;
    };
    var realMod = (dividend, divisor) => {
      const temp = dividend.mod(divisor);
      if (temp.s.toString() === "-1") {
        return temp.add(divisor);
      }
      return temp;
    };
    var valueAt = (p2, scale, randFn) => {
      const bottomLeftCoords = {
        x: p2.x.sub(realMod(p2.x, scale)),
        y: p2.y.sub(realMod(p2.y, scale))
      };
      const bottomRightCoords = {
        x: bottomLeftCoords.x.add(scale),
        y: bottomLeftCoords.y
      };
      const topLeftCoords = {
        x: bottomLeftCoords.x,
        y: bottomLeftCoords.y.add(scale)
      };
      const topRightCoords = {
        x: bottomLeftCoords.x.add(scale),
        y: bottomLeftCoords.y.add(scale)
      };
      const bottomLeftGrad = {
        coords: bottomLeftCoords,
        gradient: (0, exports.getRandomGradientAt)(bottomLeftCoords, scale, randFn)
      };
      const bottomRightGrad = {
        coords: bottomRightCoords,
        gradient: (0, exports.getRandomGradientAt)(bottomRightCoords, scale, randFn)
      };
      const topLeftGrad = {
        coords: topLeftCoords,
        gradient: (0, exports.getRandomGradientAt)(topLeftCoords, scale, randFn)
      };
      const topRightGrad = {
        coords: topRightCoords,
        gradient: (0, exports.getRandomGradientAt)(topRightCoords, scale, randFn)
      };
      const out = perlinValue([bottomLeftGrad, bottomRightGrad, topLeftGrad, topRightGrad], scale, p2);
      return out;
    };
    exports.MAX_PERLIN_VALUE = 32;
    function perlin(coords, options) {
      let { x: x3, y: y3 } = coords;
      if (options.mirrorY)
        x3 = Math.abs(x3);
      if (options.mirrorX)
        y3 = Math.abs(y3);
      const fractionalP = { x: new bigFraction_1.Fraction(x3), y: new bigFraction_1.Fraction(y3) };
      let ret = new bigFraction_1.Fraction(0);
      const pValues = [];
      for (let i3 = 0; i3 < 3; i3 += 1) {
        pValues.push(valueAt(fractionalP, new bigFraction_1.Fraction(options.scale * 2 ** i3), (0, exports.rand)(options.key)));
      }
      ret = ret.add(pValues[0]);
      ret = ret.add(pValues[0]);
      ret = ret.add(pValues[1]);
      ret = ret.add(pValues[2]);
      ret = ret.div(4);
      runningLCM = updateLCM(runningLCM, (0, big_integer_1.default)(ret.d));
      ret = ret.mul(exports.MAX_PERLIN_VALUE / 2);
      if (options.floor)
        ret = ret.floor();
      ret = ret.add(exports.MAX_PERLIN_VALUE / 2);
      const out = ret.valueOf();
      return Math.floor(out * 100) / 100;
    }
    exports.perlin = perlin;
  }
});

// node_modules/@darkforest_eth/procedural/node_modules/@darkforest_eth/hashing/dist/index.js
var require_dist6 = __commonJS({
  "node_modules/@darkforest_eth/procedural/node_modules/@darkforest_eth/hashing/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0)
        k22 = k3;
      Object.defineProperty(o3, k22, { enumerable: true, get: function() {
        return m3[k3];
      } });
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0)
        k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports && exports.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule)
        return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k3 in mod2)
          if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod2, k3))
            __createBinding(result, mod2, k3);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_PERLIN_VALUE = exports.Fraction = exports.seededRandom = exports.fakeHash = exports.modPBigIntNative = exports.modPBigInt = exports.getRandomGradientAt = exports.rand = exports.perlin = exports.mimcSponge = exports.mimcHash = void 0;
    var fakeHash_1 = require_fakeHash();
    Object.defineProperty(exports, "fakeHash", { enumerable: true, get: function() {
      return fakeHash_1.fakeHash;
    } });
    Object.defineProperty(exports, "seededRandom", { enumerable: true, get: function() {
      return fakeHash_1.seededRandom;
    } });
    var bigFraction_1 = require_bigFraction();
    Object.defineProperty(exports, "Fraction", { enumerable: true, get: function() {
      return bigFraction_1.Fraction;
    } });
    var mimc_1 = __importStar(require_mimc());
    exports.mimcHash = mimc_1.default;
    Object.defineProperty(exports, "mimcSponge", { enumerable: true, get: function() {
      return mimc_1.mimcSponge;
    } });
    Object.defineProperty(exports, "modPBigInt", { enumerable: true, get: function() {
      return mimc_1.modPBigInt;
    } });
    Object.defineProperty(exports, "modPBigIntNative", { enumerable: true, get: function() {
      return mimc_1.modPBigIntNative;
    } });
    var perlin_1 = require_perlin();
    Object.defineProperty(exports, "getRandomGradientAt", { enumerable: true, get: function() {
      return perlin_1.getRandomGradientAt;
    } });
    Object.defineProperty(exports, "MAX_PERLIN_VALUE", { enumerable: true, get: function() {
      return perlin_1.MAX_PERLIN_VALUE;
    } });
    Object.defineProperty(exports, "perlin", { enumerable: true, get: function() {
      return perlin_1.perlin;
    } });
    Object.defineProperty(exports, "rand", { enumerable: true, get: function() {
      return perlin_1.rand;
    } });
  }
});

// node_modules/@darkforest_eth/procedural/dist/Noise.js
var require_Noise = __commonJS({
  "node_modules/@darkforest_eth/procedural/dist/Noise.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Noise = class {
      constructor() {
        let module2 = {};
        function Grad(x3, y3, z2) {
          this.x = x3;
          this.y = y3;
          this.z = z2;
        }
        Grad.prototype.dot2 = function(x3, y3) {
          return this.x * x3 + this.y * y3;
        };
        Grad.prototype.dot3 = function(x3, y3, z2) {
          return this.x * x3 + this.y * y3 + this.z * z2;
        };
        var grad3 = [
          new Grad(1, 1, 0),
          new Grad(-1, 1, 0),
          new Grad(1, -1, 0),
          new Grad(-1, -1, 0),
          new Grad(1, 0, 1),
          new Grad(-1, 0, 1),
          new Grad(1, 0, -1),
          new Grad(-1, 0, -1),
          new Grad(0, 1, 1),
          new Grad(0, -1, 1),
          new Grad(0, 1, -1),
          new Grad(0, -1, -1)
        ];
        var p2 = [
          151,
          160,
          137,
          91,
          90,
          15,
          131,
          13,
          201,
          95,
          96,
          53,
          194,
          233,
          7,
          225,
          140,
          36,
          103,
          30,
          69,
          142,
          8,
          99,
          37,
          240,
          21,
          10,
          23,
          190,
          6,
          148,
          247,
          120,
          234,
          75,
          0,
          26,
          197,
          62,
          94,
          252,
          219,
          203,
          117,
          35,
          11,
          32,
          57,
          177,
          33,
          88,
          237,
          149,
          56,
          87,
          174,
          20,
          125,
          136,
          171,
          168,
          68,
          175,
          74,
          165,
          71,
          134,
          139,
          48,
          27,
          166,
          77,
          146,
          158,
          231,
          83,
          111,
          229,
          122,
          60,
          211,
          133,
          230,
          220,
          105,
          92,
          41,
          55,
          46,
          245,
          40,
          244,
          102,
          143,
          54,
          65,
          25,
          63,
          161,
          1,
          216,
          80,
          73,
          209,
          76,
          132,
          187,
          208,
          89,
          18,
          169,
          200,
          196,
          135,
          130,
          116,
          188,
          159,
          86,
          164,
          100,
          109,
          198,
          173,
          186,
          3,
          64,
          52,
          217,
          226,
          250,
          124,
          123,
          5,
          202,
          38,
          147,
          118,
          126,
          255,
          82,
          85,
          212,
          207,
          206,
          59,
          227,
          47,
          16,
          58,
          17,
          182,
          189,
          28,
          42,
          223,
          183,
          170,
          213,
          119,
          248,
          152,
          2,
          44,
          154,
          163,
          70,
          221,
          153,
          101,
          155,
          167,
          43,
          172,
          9,
          129,
          22,
          39,
          253,
          19,
          98,
          108,
          110,
          79,
          113,
          224,
          232,
          178,
          185,
          112,
          104,
          218,
          246,
          97,
          228,
          251,
          34,
          242,
          193,
          238,
          210,
          144,
          12,
          191,
          179,
          162,
          241,
          81,
          51,
          145,
          235,
          249,
          14,
          239,
          107,
          49,
          192,
          214,
          31,
          181,
          199,
          106,
          157,
          184,
          84,
          204,
          176,
          115,
          121,
          50,
          45,
          127,
          4,
          150,
          254,
          138,
          236,
          205,
          93,
          222,
          114,
          67,
          29,
          24,
          72,
          243,
          141,
          128,
          195,
          78,
          66,
          215,
          61,
          156,
          180
        ];
        var perm = new Array(512);
        var gradP = new Array(512);
        module2.seed = function(seed) {
          if (seed > 0 && seed < 1) {
            seed *= 65536;
          }
          seed = Math.floor(seed);
          if (seed < 256) {
            seed |= seed << 8;
          }
          for (var i3 = 0; i3 < 256; i3++) {
            var v3;
            if (i3 & 1) {
              v3 = p2[i3] ^ seed & 255;
            } else {
              v3 = p2[i3] ^ seed >> 8 & 255;
            }
            perm[i3] = perm[i3 + 256] = v3;
            gradP[i3] = gradP[i3 + 256] = grad3[v3 % 12];
          }
        };
        module2.seed(0);
        var F22 = 0.5 * (Math.sqrt(3) - 1);
        var G2 = (3 - Math.sqrt(3)) / 6;
        var F32 = 1 / 3;
        var G3 = 1 / 6;
        module2.simplex2 = function(xin, yin) {
          var n0, n1, n2;
          var s2 = (xin + yin) * F22;
          var i3 = Math.floor(xin + s2);
          var j3 = Math.floor(yin + s2);
          var t3 = (i3 + j3) * G2;
          var x0 = xin - i3 + t3;
          var y0 = yin - j3 + t3;
          var i1, j1;
          if (x0 > y0) {
            i1 = 1;
            j1 = 0;
          } else {
            i1 = 0;
            j1 = 1;
          }
          var x1 = x0 - i1 + G2;
          var y1 = y0 - j1 + G2;
          var x22 = x0 - 1 + 2 * G2;
          var y22 = y0 - 1 + 2 * G2;
          i3 &= 255;
          j3 &= 255;
          var gi0 = gradP[i3 + perm[j3]];
          var gi1 = gradP[i3 + i1 + perm[j3 + j1]];
          var gi2 = gradP[i3 + 1 + perm[j3 + 1]];
          var t0 = 0.5 - x0 * x0 - y0 * y0;
          if (t0 < 0) {
            n0 = 0;
          } else {
            t0 *= t0;
            n0 = t0 * t0 * gi0.dot2(x0, y0);
          }
          var t1 = 0.5 - x1 * x1 - y1 * y1;
          if (t1 < 0) {
            n1 = 0;
          } else {
            t1 *= t1;
            n1 = t1 * t1 * gi1.dot2(x1, y1);
          }
          var t22 = 0.5 - x22 * x22 - y22 * y22;
          if (t22 < 0) {
            n2 = 0;
          } else {
            t22 *= t22;
            n2 = t22 * t22 * gi2.dot2(x22, y22);
          }
          return 70 * (n0 + n1 + n2);
        };
        module2.simplex3 = function(xin, yin, zin) {
          var n0, n1, n2, n3;
          var s2 = (xin + yin + zin) * F32;
          var i3 = Math.floor(xin + s2);
          var j3 = Math.floor(yin + s2);
          var k3 = Math.floor(zin + s2);
          var t3 = (i3 + j3 + k3) * G3;
          var x0 = xin - i3 + t3;
          var y0 = yin - j3 + t3;
          var z0 = zin - k3 + t3;
          var i1, j1, k1;
          var i22, j22, k22;
          if (x0 >= y0) {
            if (y0 >= z0) {
              i1 = 1;
              j1 = 0;
              k1 = 0;
              i22 = 1;
              j22 = 1;
              k22 = 0;
            } else if (x0 >= z0) {
              i1 = 1;
              j1 = 0;
              k1 = 0;
              i22 = 1;
              j22 = 0;
              k22 = 1;
            } else {
              i1 = 0;
              j1 = 0;
              k1 = 1;
              i22 = 1;
              j22 = 0;
              k22 = 1;
            }
          } else {
            if (y0 < z0) {
              i1 = 0;
              j1 = 0;
              k1 = 1;
              i22 = 0;
              j22 = 1;
              k22 = 1;
            } else if (x0 < z0) {
              i1 = 0;
              j1 = 1;
              k1 = 0;
              i22 = 0;
              j22 = 1;
              k22 = 1;
            } else {
              i1 = 0;
              j1 = 1;
              k1 = 0;
              i22 = 1;
              j22 = 1;
              k22 = 0;
            }
          }
          var x1 = x0 - i1 + G3;
          var y1 = y0 - j1 + G3;
          var z1 = z0 - k1 + G3;
          var x22 = x0 - i22 + 2 * G3;
          var y22 = y0 - j22 + 2 * G3;
          var z2 = z0 - k22 + 2 * G3;
          var x3 = x0 - 1 + 3 * G3;
          var y3 = y0 - 1 + 3 * G3;
          var z3 = z0 - 1 + 3 * G3;
          i3 &= 255;
          j3 &= 255;
          k3 &= 255;
          var gi0 = gradP[i3 + perm[j3 + perm[k3]]];
          var gi1 = gradP[i3 + i1 + perm[j3 + j1 + perm[k3 + k1]]];
          var gi2 = gradP[i3 + i22 + perm[j3 + j22 + perm[k3 + k22]]];
          var gi3 = gradP[i3 + 1 + perm[j3 + 1 + perm[k3 + 1]]];
          var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;
          if (t0 < 0) {
            n0 = 0;
          } else {
            t0 *= t0;
            n0 = t0 * t0 * gi0.dot3(x0, y0, z0);
          }
          var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;
          if (t1 < 0) {
            n1 = 0;
          } else {
            t1 *= t1;
            n1 = t1 * t1 * gi1.dot3(x1, y1, z1);
          }
          var t22 = 0.6 - x22 * x22 - y22 * y22 - z2 * z2;
          if (t22 < 0) {
            n2 = 0;
          } else {
            t22 *= t22;
            n2 = t22 * t22 * gi2.dot3(x22, y22, z2);
          }
          var t32 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;
          if (t32 < 0) {
            n3 = 0;
          } else {
            t32 *= t32;
            n3 = t32 * t32 * gi3.dot3(x3, y3, z3);
          }
          return 32 * (n0 + n1 + n2 + n3);
        };
        function fade(t3) {
          return t3 * t3 * t3 * (t3 * (t3 * 6 - 15) + 10);
        }
        function lerp(a3, b3, t3) {
          return (1 - t3) * a3 + t3 * b3;
        }
        module2.perlin2 = function(x3, y3) {
          var X = Math.floor(x3), Y = Math.floor(y3);
          x3 = x3 - X;
          y3 = y3 - Y;
          X = X & 255;
          Y = Y & 255;
          var n00 = gradP[X + perm[Y]].dot2(x3, y3);
          var n01 = gradP[X + perm[Y + 1]].dot2(x3, y3 - 1);
          var n10 = gradP[X + 1 + perm[Y]].dot2(x3 - 1, y3);
          var n11 = gradP[X + 1 + perm[Y + 1]].dot2(x3 - 1, y3 - 1);
          var u3 = fade(x3);
          return lerp(lerp(n00, n10, u3), lerp(n01, n11, u3), fade(y3));
        };
        module2.perlin3 = function(x3, y3, z2) {
          var X = Math.floor(x3), Y = Math.floor(y3), Z = Math.floor(z2);
          x3 = x3 - X;
          y3 = y3 - Y;
          z2 = z2 - Z;
          X = X & 255;
          Y = Y & 255;
          Z = Z & 255;
          var n000 = gradP[X + perm[Y + perm[Z]]].dot3(x3, y3, z2);
          var n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x3, y3, z2 - 1);
          var n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x3, y3 - 1, z2);
          var n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x3, y3 - 1, z2 - 1);
          var n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x3 - 1, y3, z2);
          var n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x3 - 1, y3, z2 - 1);
          var n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x3 - 1, y3 - 1, z2);
          var n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x3 - 1, y3 - 1, z2 - 1);
          var u3 = fade(x3);
          var v3 = fade(y3);
          var w3 = fade(z2);
          return lerp(lerp(lerp(n000, n100, u3), lerp(n001, n101, u3), w3), lerp(lerp(n010, n110, u3), lerp(n011, n111, u3), w3), v3);
        };
        this.noise = module2;
      }
      static initialize() {
        if (!!Noise.instance) {
          throw new Error("Noise has already been initialized");
        }
        const myNoise = new Noise();
        Noise.instance = myNoise;
        return myNoise;
      }
      static getInstance() {
        if (!Noise.instance) {
          Noise.initialize();
        }
        return Noise.instance;
      }
      simplex2(x3, y3) {
        return Noise.instance.noise.simplex2(x3, y3);
      }
    };
    exports.default = Noise;
  }
});

// node_modules/@darkforest_eth/procedural/dist/ProcgenConsts.js
var require_ProcgenConsts = __commonJS({
  "node_modules/@darkforest_eth/procedural/dist/ProcgenConsts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.blurb2grammar = exports.blurbGrammar = exports.planetTagNoun = exports.planetTagAdj = exports.planetNameWords = void 0;
    var genericVerb = [
      "ruin",
      "snow",
      "ban",
      "blot",
      "disappear",
      "scare",
      "relax",
      "tug",
      "sigh",
      "rub",
      "float",
      "entertain",
      "tap",
      "taste",
      "gather",
      "tour",
      "place",
      "treat",
      "program",
      "try",
      "depend",
      "puncture",
      "cheat",
      "whine",
      "tame",
      "check",
      "employ",
      "heap",
      "flower",
      "perform",
      "unite",
      "guarantee",
      "delight",
      "expand",
      "double",
      "fit",
      "ignore",
      "phone",
      "regret",
      "question",
      "jog",
      "attract",
      "learn",
      "twist",
      "drip",
      "remind",
      "slap",
      "knock",
      "train",
      "part",
      "groan",
      "compete",
      "excite",
      "calculate",
      "trouble",
      "shrug",
      "whip",
      "prevent",
      "object",
      "return",
      "scribble",
      "practise",
      "carve",
      "possess",
      "irritate",
      "park",
      "stamp",
      "warm",
      "imagine",
      "fade",
      "admire",
      "hang",
      "unlock",
      "obtain",
      "smash",
      "queue",
      "develop",
      "end",
      "pine",
      "balance",
      "fold",
      "bat",
      "crawl",
      "frighten",
      "dry",
      "approve",
      "rhyme",
      "contain",
      "sip",
      "battle",
      "peel",
      "trick",
      "chop",
      "heat",
      "wreck",
      "please",
      "preach",
      "risk",
      "kiss",
      "test",
      "thaw",
      "wander",
      "bless",
      "walk",
      "cover",
      "form",
      "seal",
      "reduce",
      "wave",
      "support",
      "coach",
      "spoil",
      "sniff",
      "borrow",
      "zoom",
      "obey",
      "worry",
      "shock",
      "suffer",
      "cry",
      "heal",
      "harm",
      "suspect",
      "raise",
      "remove",
      "deliver",
      "ski",
      "blink",
      "clear",
      "tire",
      "protect",
      "tick",
      "shop",
      "pray",
      "correct",
      "receive",
      "brake",
      "bomb",
      "describe",
      "mend",
      "squeeze",
      "open",
      "welcome",
      "whisper",
      "fear",
      "pack",
      "settle",
      "scatter",
      "rob",
      "hand",
      "exist",
      "zip",
      "wish",
      "separate",
      "fix",
      "pedal",
      "tempt",
      "kneel",
      "sail",
      "observe",
      "replace",
      "answer",
      "laugh",
      "play",
      "multiply",
      "repeat",
      "trust",
      "inject",
      "wrestle",
      "argue",
      "guess",
      "decide",
      "deceive",
      "dare",
      "book",
      "wait",
      "grease",
      "glow",
      "step",
      "allow",
      "steer",
      "gaze",
      "rain",
      "cause",
      "clap",
      "peep",
      "wriggle",
      "explode",
      "rush",
      "bolt",
      "announce",
      "match",
      "concern",
      "colour",
      "type",
      "spill",
      "exercise",
      "pick",
      "delay",
      "nail",
      "screw",
      "slow",
      "ask",
      "shiver",
      "add",
      "dream",
      "warn",
      "kick",
      "plan",
      "memorise",
      "bump",
      "arrive",
      "intend",
      "polish",
      "trip",
      "subtract",
      "include",
      "trace",
      "handle",
      "strip",
      "spot",
      "fry",
      "flash",
      "man",
      "visit",
      "squeak",
      "copy",
      "reflect",
      "comb",
      "reign",
      "scream",
      "chew",
      "fetch",
      "rule",
      "label",
      "invite",
      "transport",
      "present",
      "sneeze",
      "provide",
      "look",
      "haunt",
      "fail",
      "push",
      "point",
      "stain",
      "interfere",
      "cheer",
      "afford",
      "blind",
      "flow",
      "shelter",
      "glue",
      "amuse",
      "accept",
      "bruise",
      "post",
      "live",
      "fasten",
      "mark",
      "escape",
      "hum",
      "curve",
      "follow",
      "land",
      "dust",
      "stay",
      "occur",
      "boil",
      "scratch",
      "dislike",
      "pat",
      "dress",
      "turn",
      "promise",
      "offer",
      "challenge",
      "drown",
      "slip",
      "trap",
      "pop",
      "mess up",
      "force",
      "stuff",
      "roll",
      "care",
      "consist",
      "jump",
      "level",
      "hop",
      "bathe",
      "wobble",
      "consider",
      "murder",
      "excuse",
      "avoid",
      "disagree",
      "back",
      "frame",
      "shave",
      "charge",
      "pump",
      "instruct",
      "tickle",
      "travel",
      "moan",
      "peck",
      "nest",
      "drag",
      "fire",
      "explain",
      "scold",
      "attach",
      "carry",
      "suit",
      "paint",
      "applaud",
      "breathe",
      "saw",
      "report",
      "attack",
      "marry",
      "complain",
      "communicate",
      "own",
      "hunt",
      "retire",
      "spray",
      "complete",
      "admit",
      "store",
      "water",
      "request",
      "extend",
      "grate",
      "drum",
      "call",
      "fill",
      "bore",
      "punish",
      "moor",
      "punch",
      "save",
      "fool",
      "dam",
      "bow",
      "love",
      "increase",
      "start",
      "listen",
      "hammer",
      "mourn",
      "want",
      "appear",
      "smile",
      "suppose",
      "march",
      "continue",
      "buzz",
      "wink",
      "apologise",
      "face",
      "clip",
      "close",
      "flap",
      "owe",
      "rely",
      "supply",
      "dance",
      "attempt",
      "blush",
      "wipe",
      "share",
      "burn",
      "bubble",
      "empty",
      "disarm",
      "cross",
      "search",
      "soak",
      "agree",
      "launch",
      "surround",
      "plant",
      "pour",
      "lighten",
      "destroy",
      "detect"
    ];
    var genericNoun = [
      "adjustment",
      "straw",
      "person",
      "pipe",
      "coach",
      "distribution",
      "bite",
      "can",
      "snail",
      "plane",
      "flock",
      "dog",
      "grandfather",
      "achiever",
      "act",
      "beds",
      "trains",
      "wall",
      "school",
      "minute",
      "clam",
      "rat",
      "notebook",
      "sister",
      "power",
      "government",
      "tomatoes",
      "week",
      "river",
      "quiet",
      "move",
      "rose",
      "crate",
      "bubble",
      "loss",
      "laugh",
      "camera",
      "mouth",
      "development",
      "flag",
      "appliance",
      "slave",
      "match",
      "trucks",
      "bead",
      "screw",
      "hot",
      "sidewalk",
      "minister",
      "bell",
      "lamp",
      "coat",
      "queen",
      "cherries",
      "temper",
      "lip",
      "suit",
      "partner",
      "voice",
      "cave",
      "plough",
      "wind",
      "harbor",
      "tub",
      "dock",
      "hands",
      "van",
      "calculator",
      "cause",
      "history",
      "effect",
      "hour",
      "experience",
      "back",
      "bucket",
      "chickens",
      "aunt",
      "death",
      "friction",
      "amount",
      "fuel",
      "stem",
      "sisters",
      "yam",
      "event",
      "tooth",
      "discussion",
      "maid",
      "guitar",
      "bit",
      "chance",
      "time",
      "fairies",
      "key",
      "trail",
      "spot",
      "tank",
      "oranges",
      "attraction",
      "range",
      "ants",
      "boot",
      "education",
      "letters",
      "iron",
      "kitty",
      "belief",
      "noise",
      "acoustics",
      "cheese",
      "fire",
      "foot",
      "chicken",
      "rest",
      "bikes",
      "hope",
      "stop",
      "shade",
      "quiver",
      "sand",
      "farm",
      "zoo",
      "cabbage",
      "oil",
      "deer",
      "throne",
      "look",
      "rainstorm",
      "talk",
      "linen",
      "pigs",
      "wound",
      "liquid",
      "badge",
      "vase",
      "button",
      "order",
      "bath",
      "airport",
      "business",
      "cow",
      "visitor",
      "committee",
      "base",
      "book",
      "cemetery",
      "ice",
      "zinc",
      "afterthought",
      "zipper",
      "size",
      "frogs",
      "wren",
      "chess",
      "sneeze",
      "robin",
      "lake",
      "bomb",
      "memory",
      "snakes",
      "decision",
      "head",
      "receipt",
      "toothbrush",
      "humor",
      "war",
      "cats",
      "pull",
      "industry",
      "offer",
      "insurance",
      "test",
      "spy",
      "hat",
      "north",
      "behavior",
      "battle",
      "parcel",
      "grade",
      "dinosaurs",
      "substance",
      "window",
      "gate",
      "side",
      "houses",
      "view",
      "cap",
      "agreement",
      "honey",
      "plate",
      "pest",
      "fish",
      "cannon",
      "yarn",
      "bed",
      "mom",
      "writer",
      "interest",
      "record",
      "scissors",
      "rod",
      "guide",
      "furniture",
      "credit",
      "gold",
      "spoon",
      "activity",
      "club",
      "theory",
      "coal",
      "sponge",
      "knot",
      "mass",
      "house",
      "bone",
      "mailbox",
      "drink",
      "burst",
      "water",
      "cherry",
      "flavor",
      "sky",
      "coast",
      "island",
      "son",
      "smoke",
      "birthday",
      "babies",
      "self",
      "planes",
      "impulse",
      "metal",
      "thought",
      "salt",
      "pollution",
      "table",
      "surprise",
      "scene",
      "health",
      "rifle",
      "shock",
      "picture",
      "plastic",
      "arithmetic",
      "border",
      "army",
      "place",
      "oven",
      "marble",
      "skate",
      "voyage",
      "question",
      "cobweb",
      "mark",
      "shoe",
      "beginner",
      "star",
      "porter",
      "magic",
      "collar",
      "team",
      "sofa",
      "moon",
      "chalk",
      "sink",
      "lettuce",
      "turkey",
      "doll",
      "land",
      "brake",
      "existence",
      "smile",
      "thing",
      "car",
      "loaf",
      "jellyfish",
      "play",
      "swing",
      "sign",
      "cook",
      "horses",
      "laborer",
      "company",
      "office",
      "snake",
      "volleyball",
      "fly",
      "thumb",
      "top",
      "division",
      "celery",
      "pie",
      "measure",
      "oatmeal",
      "name",
      "toes",
      "limit",
      "veil",
      "hill",
      "driving",
      "jam",
      "quilt",
      "horse",
      "secretary",
      "pleasure",
      "squirrel",
      "wire",
      "finger",
      "peace",
      "roof",
      "structure",
      "curve",
      "zebra",
      "rings",
      "alarm",
      "cushion",
      "monkey",
      "grip",
      "treatment",
      "balance",
      "flower",
      "mitten",
      "crow",
      "twig",
      "glove",
      "advice",
      "song",
      "weather",
      "bird",
      "governor",
      "science",
      "seashore",
      "pot",
      "sort",
      "berry",
      "zephyr",
      "basket",
      "value",
      "expansion",
      "arm",
      "cub",
      "pump",
      "things",
      "competition",
      "wheel",
      "toy",
      "kick",
      "cloth",
      "step",
      "respect",
      "church",
      "writing",
      "push",
      "milk",
      "jar",
      "low",
      "geese",
      "meat",
      "tree",
      "songs",
      "dress",
      "party",
      "heat",
      "selection",
      "wash",
      "nerve",
      "rain",
      "amusement",
      "mice",
      "error",
      "rock",
      "caption",
      "desire",
      "edge",
      "start",
      "children",
      "wealth",
      "neck",
      "nose",
      "playground",
      "nation",
      "coil",
      "pan",
      "donkey",
      "field",
      "approval",
      "canvas",
      "position",
      "note",
      "ray",
      "cat",
      "library"
    ];
    var genericAdj = [
      "tedious",
      "therapeutic",
      "acid",
      "crooked",
      "available",
      "tasty",
      "real",
      "kind",
      "fancy",
      "solid",
      "brash",
      "unaccountable",
      "late",
      "necessary",
      "electric",
      "one",
      "zealous",
      "versed",
      "exciting",
      "keen",
      "tasteful",
      "ugliest",
      "adjoining",
      "questionable",
      "tasteless",
      "productive",
      "worthless",
      "evasive",
      "square",
      "separate",
      "upset",
      "typical",
      "mighty",
      "plant",
      "hushed",
      "helpless",
      "smooth",
      "colossal",
      "infamous",
      "scandalous",
      "pointless",
      "lethal",
      "melodic",
      "terrific",
      "inexpensive",
      "salty",
      "puzzling",
      "seemly",
      "learned",
      "venomous",
      "vagabond",
      "puny",
      "mere",
      "unkempt",
      "private",
      "breezy",
      "tremendous",
      "exultant",
      "ugly",
      "chunky",
      "teeny-tiny",
      "snobbish",
      "entertaining",
      "friendly",
      "opposite",
      "pumped",
      "fascinated",
      "picayune",
      "wanting",
      "subsequent",
      "abrasive",
      "uttermost",
      "abiding",
      "narrow",
      "holistic",
      "slow",
      "murky",
      "probable",
      "mountainous",
      "bouncy",
      "upbeat",
      "foamy",
      "sophisticated",
      "furry",
      "nonchalant",
      "warlike",
      "rightful",
      "extra-large",
      "calculating",
      "aspiring",
      "volatile",
      "vague",
      "icy",
      "frightening",
      "historical",
      "complete",
      "enormous",
      "swift",
      "grumpy",
      "empty",
      "knowing",
      "adventurous",
      "ruthless",
      "hypnotic",
      "remarkable",
      "understood",
      "feeble",
      "pushy",
      "mature",
      "paltry",
      "next",
      "shivering",
      "flagrant",
      "worried",
      "dead",
      "needless",
      "natural",
      "curly",
      "coherent",
      "abusive",
      "tart",
      "tough",
      "chief",
      "concerned",
      "physical",
      "whimsical",
      "useful",
      "exotic",
      "nimble",
      "hallowed",
      "smelly",
      "internal",
      "meek",
      "tested",
      "hurried",
      "marked",
      "jittery",
      "crowded",
      "gaudy",
      "proud",
      "used",
      "last",
      "incompetent",
      "fumbling",
      "nosy",
      "possessive",
      "puffy",
      "workable",
      "fretful",
      "sweet",
      "disastrous",
      "dramatic",
      "capable",
      "courageous",
      "heady",
      "shrill",
      "vulgar",
      "kindhearted",
      "cagey",
      "parsimonious",
      "abaft",
      "ethereal",
      "talented",
      "noxious",
      "raspy",
      "frantic",
      "doubtful",
      "fantastic",
      "tan",
      "screeching",
      "abnormal",
      "rustic",
      "recondite",
      "cut",
      "annoyed",
      "chemical",
      "ossified",
      "cluttered",
      "stupid",
      "clumsy",
      "clean",
      "exuberant",
      "cumbersome",
      "enchanted",
      "plain",
      "malicious",
      "romantic",
      "itchy",
      "light",
      "scintillating",
      "grouchy",
      "gainful",
      "four",
      "pricey",
      "three",
      "ambitious",
      "brown",
      "healthy",
      "willing",
      "new",
      "jazzy",
      "soggy",
      "oval",
      "madly",
      "nutritious",
      "unused",
      "kaput",
      "straight",
      "defective",
      "ripe",
      "wide",
      "whole",
      "insidious",
      "foregoing",
      "poised",
      "unusual",
      "smoggy",
      "optimal",
      "voiceless",
      "curved",
      "statuesque",
      "slim",
      "hard",
      "numberless",
      "successful",
      "brawny",
      "ratty",
      "ultra",
      "accurate",
      "rigid",
      "impossible",
      "ajar",
      "elegant",
      "heavy",
      "ablaze",
      "lackadaisical",
      "moldy",
      "lopsided",
      "black",
      "reflective",
      "mushy",
      "wholesale",
      "quarrelsome",
      "closed",
      "equal",
      "awake",
      "wide-eyed",
      "unwieldy",
      "mellow",
      "squealing",
      "shallow",
      "foolish",
      "measly",
      "poor",
      "cloistered",
      "calm",
      "shy",
      "clammy",
      "damaged",
      "jaded",
      "unable",
      "painstaking",
      "overjoyed",
      "faint",
      "steadfast",
      "brave",
      "receptive",
      "filthy",
      "amuck",
      "tacit",
      "living",
      "normal",
      "useless",
      "beneficial",
      "protective",
      "adaptable",
      "diligent",
      "uncovered",
      "meaty",
      "political",
      "rude",
      "stale",
      "nasty",
      "demonic",
      "perpetual",
      "fragile",
      "right",
      "striped",
      "rare",
      "guarded",
      "decorous",
      "wrathful",
      "strange",
      "daffy",
      "wealthy",
      "humdrum",
      "familiar",
      "animated",
      "aware",
      "silly",
      "oafish",
      "selfish",
      "royal",
      "skillful",
      "excellent",
      "wry",
      "flippant",
      "obeisant",
      "mammoth",
      "milky",
      "substantial",
      "modern",
      "huge",
      "bustling",
      "unequaled",
      "adamant",
      "green",
      "confused",
      "hapless",
      "ceaseless",
      "spotty",
      "dangerous",
      "defeated",
      "dull",
      "silky",
      "wet",
      "hurt",
      "efficacious",
      "best",
      "humorous",
      "magnificent",
      "faulty",
      "ruddy",
      "accessible",
      "second",
      "languid",
      "uptight",
      "small",
      "odd",
      "detailed",
      "didactic",
      "cute",
      "steep",
      "mixed",
      "squeamish",
      "truculent",
      "aboard",
      "deadpan",
      "sweltering",
      "stupendous",
      "overwrought",
      "precious",
      "pink",
      "afraid",
      "bitter",
      "husky",
      "wacky",
      "gruesome",
      "plucky",
      "scrawny",
      "famous",
      "old-fashioned",
      "fabulous",
      "obscene",
      "repulsive",
      "boundless",
      "handy",
      "greasy",
      "irritating",
      "roomy",
      "somber",
      "stormy",
      "two",
      "nippy",
      "half",
      "imperfect",
      "shaky",
      "nifty",
      "succinct",
      "hollow",
      "lonely",
      "sturdy",
      "giant",
      "fierce",
      "lazy",
      "bright",
      "maddening",
      "lamentable",
      "subdued",
      "tawdry",
      "crabby"
    ];
    exports.planetNameWords = [
      "abandon",
      "abate",
      "aberrant",
      "blaze",
      "abounding",
      "absorb",
      "acoustic",
      "harmony",
      "act",
      "action",
      "actor",
      "add",
      "addition",
      "adjustment",
      "admit",
      "advice",
      "advise",
      "afraid",
      "aggressive",
      "agonizing",
      "ahead",
      "airplane",
      "airport",
      "alight",
      "alike",
      "aloof",
      "ambitious",
      "amuck",
      "amusement",
      "anger",
      "animated",
      "annoyed",
      "anxious",
      "apparel",
      "applaud",
      "apple",
      "apples",
      "apply",
      "aquatic",
      "argument",
      "aromatic",
      "arrest",
      "assert",
      "assert",
      "attempt",
      "audacious",
      "auspicious",
      "authority",
      "avoid",
      "awake",
      "badge",
      "bait",
      "ball",
      "band",
      "band",
      "banish",
      "barbarous",
      "base",
      "base",
      "baseball",
      "basket",
      "bat",
      "bawdy",
      "bead",
      "bear",
      "beast",
      "beast",
      "beautify",
      "beds",
      "befall",
      "befitting",
      "behold",
      "believe",
      "bell",
      "bells",
      "bend",
      "berserk",
      "beseech",
      "big",
      "birthday",
      "bite",
      "bite",
      "blade",
      "blow",
      "blush",
      "bone",
      "books",
      "books",
      "boot",
      "bottle",
      "bouncy",
      "boundary",
      "bow",
      "brainy",
      "brass",
      "breath",
      "breathe",
      "bridge",
      "bright",
      "bring",
      "broadcast",
      "brother",
      "brothers",
      "bulb",
      "burly",
      "burst",
      "bury",
      "bushes",
      "busy",
      "button",
      "cabbage",
      "cagey",
      "calculating",
      "callous",
      "calm",
      "can",
      "canvas",
      "capable",
      "careless",
      "carriage",
      "cars",
      "cast",
      "catch",
      "cease",
      "celebrate",
      "cent",
      "chain",
      "chairs",
      "change",
      "changeable",
      "channel",
      "charge",
      "charming",
      "chat",
      "cheese",
      "cherries",
      "chide",
      "chief",
      "children",
      "chip",
      "choke",
      "clean",
      "cleave",
      "clocks",
      "closed",
      "clutch",
      "cluttered",
      "coast",
      "collapse",
      "collapse",
      "collar",
      "colour",
      "combative",
      "comfortable",
      "competition",
      "complain",
      "complete",
      "complex",
      "condition",
      "confuse",
      "connection",
      "connote",
      "conserve",
      "conspire",
      "constitute",
      "constrain",
      "contribute",
      "convene",
      "converge",
      "convict",
      "convince",
      "coo",
      "cooing",
      "cool",
      "cooperative",
      "copper",
      "cork",
      "corrod",
      "cough",
      "country",
      "cow",
      "cowardly",
      "crabby",
      "cracker",
      "crashing",
      "creep",
      "crib",
      "cry",
      "cub",
      "cumbersome",
      "cup",
      "cure",
      "curly",
      "curve",
      "cut",
      "cute",
      "cute",
      "daffy",
      "daffy",
      "daily",
      "dance",
      "dark",
      "daughter",
      "dazzling",
      "deafening",
      "debonair",
      "decision",
      "declare",
      "decorous",
      "defiant",
      "degree",
      "delay",
      "delicate",
      "delirious",
      "depend",
      "desire",
      "destruction",
      "develop",
      "die",
      "different",
      "digestion",
      "diligent",
      "dim",
      "diminish",
      "dinner",
      "direct",
      "dirty",
      "disgusted",
      "dispensable",
      "display",
      "display",
      "distinct",
      "dive",
      "dive",
      "divide",
      "dock",
      "doctor",
      "dog",
      "doll",
      "drain",
      "draw",
      "dream",
      "dreary",
      "drink",
      "drive",
      "drop",
      "dry",
      "dull",
      "dust",
      "dynamic",
      "dysfunctional",
      "earn",
      "earthy",
      "eatable",
      "edge",
      "education",
      "efficacious",
      "egg",
      "eggnog",
      "elephant",
      "elite",
      "elite",
      "eminent",
      "empower",
      "empty",
      "enchanting",
      "encourage",
      "end",
      "end",
      "endorse",
      "enjoy",
      "enlighten",
      "enormous",
      "enthusiastic",
      "envious",
      "erratic",
      "escape",
      "evasive",
      "event",
      "excited",
      "exclusive",
      "expensive",
      "expert",
      "extend",
      "extra-large",
      "extra-small",
      "eyes",
      "fabulous",
      "fair",
      "fall",
      "fan",
      "far",
      "fascinated",
      "fast",
      "fear",
      "feather",
      "feed",
      "feet",
      "field",
      "fight",
      "finger",
      "flaky",
      "flame",
      "flap",
      "flee",
      "flesh",
      "flock",
      "floor",
      "flop",
      "flower",
      "fly",
      "fly",
      "fog",
      "fold",
      "follow",
      "foregoing",
      "four",
      "freeze",
      "friend",
      "frighten",
      "frightened",
      "fulfil",
      "funny",
      "garrulous",
      "gash",
      "gentle",
      "gentle",
      "giant",
      "giant",
      "gigantic",
      "giraffe",
      "glamorous",
      "glass",
      "glass",
      "glib",
      "glorious",
      "glove",
      "glow",
      "godly",
      "golden",
      "govern",
      "grade",
      "grape",
      "grass",
      "green",
      "green",
      "grind",
      "ground",
      "group",
      "grow",
      "growth",
      "gruesome",
      "grumpy",
      "guarded",
      "guess",
      "guide",
      "gusty",
      "haircut",
      "hallowed",
      "halting",
      "handsome",
      "hang",
      "happy",
      "harbor",
      "harm",
      "harmonious",
      "hat",
      "heal",
      "hearing",
      "heart",
      "heat",
      "hiss",
      "honey",
      "hope",
      "hose",
      "hospitable",
      "humorous",
      "hurt",
      "hurt",
      "hush",
      "hustle",
      "hydrant",
      "hypnotic",
      "hypnotize",
      "ice",
      "idealize",
      "ill-fated",
      "illustrate",
      "imaginary",
      "imagine",
      "imminent",
      "immolate",
      "impart",
      "impartial",
      "impend",
      "impend",
      "imperfect",
      "imperil",
      "imperil",
      "implant",
      "implicate",
      "impolite",
      "imported",
      "income",
      "incompetent",
      "increase",
      "incredible",
      "indicate",
      "induce",
      "indulge",
      "industry",
      "infect",
      "inherit",
      "initiate",
      "innocent",
      "inspire",
      "insult",
      "insurance",
      "invent",
      "invention",
      "iron",
      "jaded",
      "jail",
      "jam",
      "jealous",
      "jeans",
      "jellyfish",
      "jobless",
      "jumbled",
      "kill",
      "kiss",
      "knot",
      "knowing",
      "lade",
      "ladybug",
      "lamentable",
      "lamp",
      "languid",
      "latch",
      "laugh",
      "lavish",
      "lead",
      "leak",
      "lean",
      "leather",
      "lend",
      "let",
      "letters",
      "lick",
      "lift",
      "lip",
      "list",
      "listen",
      "listen",
      "lively",
      "lock",
      "lock",
      "locket",
      "lonely",
      "longing",
      "look",
      "loose",
      "lose",
      "love",
      "low",
      "lowly",
      "ludicrous",
      "lumpy",
      "lunch",
      "lyrical",
      "maddening",
      "magnificent",
      "mailbox",
      "make",
      "manage",
      "manager",
      "marble",
      "mass",
      "materialistic",
      "meal",
      "measly",
      "measure",
      "meat",
      "meek",
      "meet",
      "mellow",
      "mere",
      "mind",
      "mine",
      "miniature",
      "minister",
      "mint",
      "miscreant",
      "motionless",
      "motivate",
      "mountain",
      "multiply",
      "mundane",
      "mushy",
      "music",
      "nappy",
      "need",
      "nerve",
      "nest",
      "news",
      "next",
      "nifty",
      "nimble",
      "noise",
      "noiseless",
      "noisy",
      "nostalgic",
      "notify",
      "notify",
      "null",
      "nut",
      "oatmeal",
      "oatmeal",
      "observation",
      "oceanic",
      "odd",
      "old-fashioned",
      "onerous",
      "open",
      "operation",
      "opinion",
      "oranges",
      "order",
      "ordinary",
      "organization",
      "originate",
      "outgoing",
      "output",
      "outrageous",
      "outstanding",
      "oven",
      "overflow",
      "overrated",
      "owe",
      "own",
      "pacify",
      "pain",
      "pale",
      "pale",
      "paltry",
      "pan",
      "paper",
      "partake",
      "participate",
      "party",
      "passenger",
      "past",
      "patch",
      "pay",
      "peace",
      "peaceful",
      "penitent",
      "permissible",
      "pet",
      "phone",
      "physical",
      "pink",
      "piquant",
      "place",
      "plain",
      "plan",
      "please",
      "pointless",
      "poison",
      "police",
      "ponder",
      "poor",
      "possessive",
      "praise",
      "precious",
      "premium",
      "prescribe",
      "preserve",
      "preset",
      "prickly",
      "probable",
      "proceed",
      "protect",
      "public",
      "pull",
      "pull",
      "punish",
      "puny",
      "purpose",
      "push",
      "puzzling",
      "quack",
      "qualify",
      "quarrel",
      "quilt",
      "quince",
      "quirky",
      "quit",
      "quiver",
      "quixotic",
      "ragged",
      "rain",
      "rapid",
      "rate",
      "ratty",
      "reach",
      "reaction",
      "read",
      "rebel",
      "recall",
      "receipt",
      "receptive",
      "recondite",
      "redo",
      "refer",
      "reflective",
      "refuse",
      "regret",
      "regular",
      "relate",
      "relation",
      "rend",
      "renew",
      "repair",
      "repeat",
      "reply",
      "resell",
      "resolve",
      "resolve",
      "respect",
      "respect",
      "review",
      "rhythm",
      "rifle",
      "ring",
      "ring",
      "river",
      "roar",
      "roasted",
      "rob",
      "rob",
      "rock",
      "rock",
      "roomy",
      "rose",
      "rotten",
      "route",
      "rush",
      "sable",
      "sag",
      "salt",
      "salve",
      "same",
      "sample",
      "sanctify",
      "sash",
      "sassy",
      "satirise",
      "savor",
      "saw",
      "say",
      "scar",
      "scarf",
      "scarify",
      "scary",
      "school",
      "scientific",
      "scold",
      "scorch",
      "scrawl",
      "scrawny",
      "sea",
      "search",
      "seashore",
      "seat",
      "secretive",
      "sedate",
      "seemly",
      "sense",
      "sentence",
      "sever",
      "sew",
      "shake",
      "sharp",
      "shear",
      "shed",
      "sheet",
      "ship",
      "shivering",
      "shock",
      "shun",
      "shy",
      "side",
      "sight",
      "signify",
      "silky",
      "silly",
      "silver",
      "simple",
      "sing",
      "sink",
      "sit",
      "six",
      "skid",
      "skillful",
      "sleep",
      "sleepy",
      "slide",
      "slim",
      "slink",
      "slip",
      "slippery",
      "slow",
      "smell",
      "smooth",
      "snail",
      "snake",
      "snap",
      "sneeze",
      "soap",
      "sob",
      "society",
      "soda",
      "soggy",
      "solicit",
      "sore",
      "sorrow",
      "sound",
      "soup",
      "sour",
      "spade",
      "spark",
      "spectacular",
      "spill",
      "spiteful",
      "splendid",
      "spotted",
      "spotty",
      "spray",
      "spring",
      "square",
      "squeamish",
      "standing",
      "stare",
      "statuesque",
      "steady",
      "step",
      "sticky",
      "stir",
      "stitch",
      "stomach",
      "store",
      "story",
      "straight",
      "strain",
      "straw",
      "stream",
      "street",
      "strew",
      "strive",
      "strong",
      "stupendous",
      "submit",
      "succeed",
      "suck",
      "suggest",
      "summon",
      "sun",
      "superb",
      "superficial",
      "suppose",
      "surround",
      "survive",
      "swallow",
      "sway",
      "sweet",
      "swim",
      "swing",
      "tail",
      "talented",
      "talk",
      "tall",
      "tan",
      "tart",
      "taste",
      "tasteless",
      "tax",
      "teach",
      "tearful",
      "teeth",
      "tense",
      "terminate",
      "terrible",
      "terrific",
      "terrify",
      "testy",
      "thankful",
      "theory",
      "therapeutic",
      "thing",
      "think",
      "thinkable",
      "third",
      "thought",
      "throne",
      "thumb",
      "ticket",
      "tie",
      "tiger",
      "tiger",
      "tightfisted",
      "time",
      "time",
      "time",
      "tired",
      "tongue",
      "toothbrush",
      "toothsome",
      "toss",
      "town",
      "toys",
      "trample",
      "transfer",
      "tray",
      "tree",
      "tremble",
      "tremendous",
      "tricky",
      "triumph",
      "trouble",
      "truculent",
      "trust",
      "try",
      "tub",
      "turn",
      "twig",
      "twist",
      "two",
      "type",
      "ugliest",
      "ugly",
      "ultra",
      "umbrella",
      "undesirable",
      "undo",
      "unequaled",
      "unkempt",
      "unsightly",
      "unsuitable",
      "upset",
      "used",
      "utopian",
      "utter",
      "vacation",
      "vacation",
      "vanish",
      "vengeful",
      "verify",
      "vessel",
      "vigorous",
      "walk",
      "wander",
      "warn",
      "wasteful",
      "watch",
      "water",
      "waylay",
      "weak",
      "weigh",
      "welcome",
      "wheel",
      "whistle",
      "wide-eyed",
      "wing",
      "witty",
      "wool",
      "wrench",
      "write",
      "wry",
      "xenology",
      "yarn",
      "year",
      "yield",
      "yoke",
      "zephyr",
      "zipper",
      "zippy",
      "otter",
      "llama",
      "aardvark",
      "aggravated",
      "luck",
      "luxury",
      "satisfaction",
      "trust",
      "wisdom",
      "worry",
      "pride",
      "sin",
      "sloth",
      "greed",
      "opinion",
      "movement",
      "infancy",
      "envy",
      "evil",
      "failure",
      "success",
      "birth",
      "calm",
      "shallow",
      "insect",
      "fox",
      "panda",
      "penguin",
      "lodge",
      "town",
      "awareness",
      "childhood",
      "chaos"
    ];
    exports.planetTagAdj = [
      "vast",
      "frigid",
      "boiling",
      "cold",
      "immense",
      "gaseous",
      "alluring",
      "groovy",
      "scattered",
      "frightening",
      "wacky",
      "lush",
      "green",
      "empty",
      "elastic",
      "calm",
      "fragile",
      "guarded",
      "various",
      "nebulous",
      "electronic",
      "heavenly",
      "cheerful",
      "delicious",
      "silky",
      "ritzy",
      "perfect",
      "pristine",
      "damaged",
      "unruly",
      "unsightly",
      "mysterious",
      "shallow",
      "deep",
      "trite",
      "noxious",
      "spectacular",
      "furtive",
      "jittery",
      "pleasant",
      "craggy",
      "overgrown",
      "wonderful",
      "dynamic",
      "harmonious",
      "deafening"
    ];
    exports.planetTagNoun = [
      "tundra",
      "desert",
      "oasis",
      "wasteland",
      "garden",
      "ocean",
      "savannah",
      "tropic",
      "shrubland",
      "forest",
      "jungle",
      "biosphere",
      "ecoregion",
      "delta",
      "ruin",
      "abyss",
      "hydrotherm",
      "marsh",
      "benthic",
      "ptuitary",
      "panda",
      "bear",
      "Vitalik",
      "cyrptokitty",
      "bitcoin"
    ];
    exports.blurbGrammar = {
      geography: [
        "mountains",
        "hills",
        "rivers",
        "oceans",
        "forests",
        "grasslands",
        "plains",
        "alienscapes",
        "tetraspheres",
        "ruins",
        "tropics",
        "crags",
        "cliffs",
        "icebergs",
        "volcanoes",
        ...Array(7).fill("#geography# and #geography#")
      ],
      populates: ["#stretch# across the #landscape# as far as #eyecansee#"],
      landscape: [
        "landscape",
        "horizon",
        "view",
        "surface",
        "skyline",
        "sky",
        "sea",
        "scenery",
        "topography",
        "topology"
      ],
      stretch: ["reach", "stretch", "extend", "spread"],
      noun: genericNoun,
      verb: genericVerb,
      adj: genericAdj,
      eyecansee: [
        "the eye can see",
        "a cow can run",
        "a bear can walk",
        "a network request can reach",
        ...Array(2).fill("#adj.a# #noun# can #verb#")
      ],
      air: ["atmosphere", "air", "weather", "gaseous composition"],
      fruit: [
        "magno",
        "blueberry",
        "raspberry",
        "pomelo",
        "pineapple",
        "apple",
        "orange",
        "watermelon"
      ],
      colors: [
        "in many colors",
        "pervasively",
        "sparingly",
        "in full abundance",
        "in small amounts",
        "like #noun.a# might #verb# #noun.a#",
        "across the horizon",
        "over the land"
      ],
      habitat: [
        "rainforest",
        "jungles",
        "ocean",
        "icy landscape",
        "deserts",
        "sky",
        "magma pools",
        "acid puddles"
      ],
      populate: [
        "populate",
        "pervade",
        "fill",
        "inhabit",
        "reside in",
        "occupy",
        "hunt in",
        "hunt #species# in",
        "gather #flora# in"
      ],
      species: ["fish", "mammal", "bird", "amphibian", "quadruped", "biped"],
      many: [
        "many",
        "a few",
        "a single",
        "two common",
        "an uncannily human-like",
        "a seemingly robotic",
        "a silicon-based"
      ],
      bloom: [
        "pervade",
        "bloom",
        "grow",
        "spread",
        "peek out",
        "pepper the landscape",
        "#stretch# out",
        "flourish",
        "meekly survive",
        "dot the barren land"
      ],
      flora: [
        "flowers",
        "trees",
        "tall grasses",
        "#fruit#-like fruit",
        "marsh mallows",
        "deciduous forestry",
        "massive fungi",
        "fields of mold",
        "wheat-like crops",
        "mysterious fruits"
      ],
      descair: [
        "hot",
        "cold",
        "heavy",
        "warm",
        "dense",
        "viscous",
        "nitrogen-dense",
        "toxic",
        "nauseating",
        "frigid",
        "icy",
        "humid",
        "saturated",
        "dry",
        ...Array(10).fill("#descair# and #descair#")
      ],
      gravity: ["heavy", "light", "strong", "unusual, somehow"],
      funfact: [
        "the gravity seems #gravity#",
        "it smells like #noun.s#",
        "there are fruits on the trees. They look like #noun.s#",
        "the soil is #adj#. Perhaps that's why the plants look like #noun.s#"
      ]
    };
    var dflaunch = new Date("August 8, 2020 00:00:00");
    exports.blurb2grammar = {
      learned: [
        "discovered ways",
        "researched methods",
        "trained in the mountains in order",
        "found ancient texts describing how"
      ],
      live: [
        "live",
        "farm",
        "grow",
        "thrive",
        "develop economies",
        "raise bears",
        "trade ETH",
        "buy cryptokitties"
      ],
      sun: [
        "sun",
        "mothers",
        "bears",
        "core",
        "oceans",
        "fauna",
        "tectonic plates",
        "volcanos",
        "toxic gases"
      ],
      flock: ["flock", "army", "fleet", "ensemble", "barrage", "array", "aggregation", "mixture"],
      bads: [
        "solar flares",
        "polar bears",
        "foxes",
        "in-browser miners",
        "toxic gas",
        "evil ducks",
        "man-eating plants",
        "radioactive minerals",
        "neutrino rays",
        "eigenstates",
        "sidechains",
        "51% attacks"
      ],
      sends: [
        "sends",
        "generates",
        "publicises",
        "causes",
        "births",
        "spawns",
        "produces",
        "provokes",
        "kindles",
        "fosters",
        "sparks",
        "throws",
        "delivers"
      ],
      sometimes: [
        "every day",
        "every minute",
        "periodically",
        "whenever @VitalikButerin tweets",
        "when Jim feels like it",
        "every second",
        "every four seconds",
        "every Planck length",
        "every quantum nanostate",
        "every decade",
        `every ${Math.floor(50 + Math.random() * 100)} galactic time-units`
      ],
      years: [
        "years",
        "seconds",
        "days",
        `${Date.now() - dflaunch}ms since the Dark Forest universe began`
      ],
      removed: [
        "defended against",
        "removed",
        "bribed",
        "nullified",
        "eliminated",
        "exiled",
        "dark realm-ed",
        "destroyed"
      ],
      throwing: ["throwing", "tossing", "firing", "launching"],
      warbears: [
        "warbears",
        "drones",
        "guided missiles",
        "ICBMs",
        "spiral energy",
        "smaller galaxies",
        "storybooks",
        "laser beams"
      ],
      lesson: [
        "#friends#",
        "#chocolates#",
        "#willway#"
      ],
      friends: ["the real #treasure# was the #friend.s# we #made# #alongtheway#"],
      alongtheway: ["along the way", "on the way to school", "in our childhood"],
      treasure: [
        "treasure",
        "gift",
        "joy",
        "lesson",
        "battle",
        "money",
        "decentralized platform",
        "bear",
        "planet",
        "space war",
        "flux capacitor",
        "layer 2 scaling solution",
        "metaverse"
      ],
      friend: [
        "friend",
        "bear",
        "books",
        "bird",
        "toy",
        "restaurant",
        "computer",
        "spaceship",
        "asteroid",
        "metaverse"
      ],
      made: [
        "made",
        "ate",
        "gained",
        "lost",
        "identified",
        "organized",
        "found",
        "destroyed",
        "educated",
        "confirmed"
      ],
      chocolates: [
        "#life# is like a #box# of #chocolate.s# - you never #know# what you're gonna #get#"
      ],
      life: [
        "ethereum",
        "blockchain",
        "life",
        "dating",
        "college",
        "space warfare",
        "colonizing mars",
        "loving bears",
        "liking yourself"
      ],
      box: ["box", "container", "flock", "group", "squabble", "flamboyance", "classroom"],
      chocolate: ["teacher", "chocolate", "candy", "meat log"],
      know: ["know", "realize", "anticipate", "enjoy", "find"],
      get: ["find", "eat", "enjoy", "delete from your browser history"],
      willway: [`#when# #theres# #will.a#, #theres# #way.a#`],
      when: [
        "when",
        "if",
        "sometimes when",
        "if Jim says",
        "when",
        "if",
        "when",
        "when",
        "when",
        "if",
        "if",
        "if",
        "where"
      ],
      theres: [`there's`, "there is never", `there isn't`],
      will: [
        "will",
        "way",
        "$50 ETH gas price",
        "decentralized hair salon",
        "strong desire to minimize self-actualization",
        "bear",
        "bad chance",
        "desire",
        "yearning",
        "determination",
        "sufficiently strong love",
        "wish"
      ],
      way: [
        "way",
        "will",
        "bear",
        "good chance",
        "bad chance",
        'book that says "#willway#"',
        "way to make it come true",
        "nothing impossible",
        "someone who will take it away from you",
        "way to lose it",
        "way to gain it",
        'life lesson: "#lesson#"'
      ]
    };
  }
});

// node_modules/@darkforest_eth/procedural/dist/tracery.js
var require_tracery = __commonJS({
  "node_modules/@darkforest_eth/procedural/dist/tracery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tracery = function() {
      var rng = Math.random;
      var setRng = function setRng2(newRng) {
        rng = newRng;
      };
      var TraceryNode = function(parent, childIndex, settings) {
        this.errors = [];
        if (settings.raw === void 0) {
          this.errors.push("Empty input for node");
          settings.raw = "";
        }
        if (parent instanceof tracery.Grammar) {
          this.grammar = parent;
          this.parent = null;
          this.depth = 0;
          this.childIndex = 0;
        } else {
          this.grammar = parent.grammar;
          this.parent = parent;
          this.depth = parent.depth + 1;
          this.childIndex = childIndex;
        }
        this.raw = settings.raw;
        this.type = settings.type;
        this.isExpanded = false;
        if (!this.grammar) {
          console.warn("No grammar specified for this node", this);
        }
      };
      TraceryNode.prototype.toString = function() {
        return "Node('" + this.raw + "' " + this.type + " d:" + this.depth + ")";
      };
      TraceryNode.prototype.expandChildren = function(childRule, preventRecursion) {
        this.children = [];
        this.finishedText = "";
        this.childRule = childRule;
        if (this.childRule !== void 0) {
          var sections = tracery.parse(childRule);
          if (sections.errors.length > 0) {
            this.errors = this.errors.concat(sections.errors);
          }
          for (var i3 = 0; i3 < sections.length; i3++) {
            this.children[i3] = new TraceryNode(this, i3, sections[i3]);
            if (!preventRecursion)
              this.children[i3].expand(preventRecursion);
            this.finishedText += this.children[i3].finishedText;
          }
        } else {
          this.errors.push("No child rule provided, can't expand children");
          console.warn("No child rule provided, can't expand children");
        }
      };
      TraceryNode.prototype.expand = function(preventRecursion) {
        if (!this.isExpanded) {
          this.isExpanded = true;
          this.expansionErrors = [];
          switch (this.type) {
            case -1:
              this.expandChildren(this.raw, preventRecursion);
              break;
            case 0:
              this.finishedText = this.raw;
              break;
            case 1:
              this.preactions = [];
              this.postactions = [];
              var parsed = tracery.parseTag(this.raw);
              this.symbol = parsed.symbol;
              this.modifiers = parsed.modifiers;
              for (var i3 = 0; i3 < parsed.preactions.length; i3++) {
                this.preactions[i3] = new NodeAction(this, parsed.preactions[i3].raw);
              }
              for (var i3 = 0; i3 < parsed.postactions.length; i3++) {
              }
              for (var i3 = 0; i3 < this.preactions.length; i3++) {
                if (this.preactions[i3].type === 0)
                  this.postactions.push(this.preactions[i3].createUndo());
              }
              for (var i3 = 0; i3 < this.preactions.length; i3++) {
                this.preactions[i3].activate();
              }
              this.finishedText = this.raw;
              var selectedRule = this.grammar.selectRule(this.symbol, this, this.errors);
              this.expandChildren(selectedRule, preventRecursion);
              for (var i3 = 0; i3 < this.modifiers.length; i3++) {
                var modName = this.modifiers[i3];
                var modParams = [];
                if (modName.indexOf("(") > 0) {
                  var regExp = /\(([^)]+)\)/;
                  var results = regExp.exec(this.modifiers[i3]);
                  if (!results || results.length < 2) {
                  } else {
                    var modParams = results[1].split(",");
                    modName = this.modifiers[i3].substring(0, modName.indexOf("("));
                  }
                }
                var mod2 = this.grammar.modifiers[modName];
                if (!mod2) {
                  this.errors.push("Missing modifier " + modName);
                  this.finishedText += "((." + modName + "))";
                } else {
                  this.finishedText = mod2(this.finishedText, modParams);
                }
              }
              for (var i3 = 0; i3 < this.postactions.length; i3++) {
                this.postactions[i3].activate();
              }
              break;
            case 2:
              this.action = new NodeAction(this, this.raw);
              this.action.activate();
              this.finishedText = "";
              break;
          }
        } else {
        }
      };
      TraceryNode.prototype.clearEscapeChars = function() {
        this.finishedText = this.finishedText.replace(/\\\\/g, "DOUBLEBACKSLASH").replace(/\\/g, "").replace(/DOUBLEBACKSLASH/g, "\\");
      };
      function NodeAction(node, raw) {
        this.node = node;
        var sections = raw.split(":");
        this.target = sections[0];
        if (sections.length === 1) {
          this.type = 2;
        } else {
          this.rule = sections[1];
          if (this.rule === "POP") {
            this.type = 1;
          } else {
            this.type = 0;
          }
        }
      }
      NodeAction.prototype.createUndo = function() {
        if (this.type === 0) {
          return new NodeAction(this.node, this.target + ":POP");
        }
        return null;
      };
      NodeAction.prototype.activate = function() {
        var grammar = this.node.grammar;
        switch (this.type) {
          case 0:
            this.ruleSections = this.rule.split(",");
            this.finishedRules = [];
            this.ruleNodes = [];
            for (var i3 = 0; i3 < this.ruleSections.length; i3++) {
              var n2 = new TraceryNode(grammar, 0, {
                type: -1,
                raw: this.ruleSections[i3]
              });
              n2.expand();
              this.finishedRules.push(n2.finishedText);
            }
            grammar.pushRules(this.target, this.finishedRules, this);
            break;
          case 1:
            grammar.popRules(this.target);
            break;
          case 2:
            grammar.flatten(this.target, true);
            break;
        }
      };
      NodeAction.prototype.toText = function() {
        switch (this.type) {
          case 0:
            return this.target + ":" + this.rule;
          case 1:
            return this.target + ":POP";
          case 2:
            return "((some function))";
          default:
            return "((Unknown Action))";
        }
      };
      function RuleSet(grammar, raw) {
        this.raw = raw;
        this.grammar = grammar;
        this.falloff = 1;
        if (Array.isArray(raw)) {
          this.defaultRules = raw;
        } else if (typeof raw === "string" || raw instanceof String) {
          this.defaultRules = [raw];
        } else if (raw === "object") {
        }
      }
      RuleSet.prototype.selectRule = function(errors) {
        if (this.conditionalRule) {
          var value = this.grammar.expand(this.conditionalRule, true);
          if (this.conditionalValues[value]) {
            var v3 = this.conditionalValues[value].selectRule(errors);
            if (v3 !== null && v3 !== void 0)
              return v3;
          }
        }
        if (this.ranking) {
          for (var i3 = 0; i3 < this.ranking.length; i3++) {
            var v3 = this.ranking.selectRule();
            if (v3 !== null && v3 !== void 0)
              return v3;
          }
        }
        if (this.defaultRules !== void 0) {
          var index = 0;
          var distribution = this.distribution;
          if (!distribution)
            distribution = this.grammar.distribution;
          switch (distribution) {
            case "shuffle":
              if (!this.shuffledDeck || this.shuffledDeck.length === 0) {
                this.shuffledDeck = fyshuffle(Array.apply(null, {
                  length: this.defaultRules.length
                }).map(Number.call, Number), this.falloff);
              }
              index = this.shuffledDeck.pop();
              break;
            case "weighted":
              errors.push("Weighted distribution not yet implemented");
              break;
            case "falloff":
              errors.push("Falloff distribution not yet implemented");
              break;
            default:
              index = Math.floor(Math.pow(rng(), this.falloff) * this.defaultRules.length);
              break;
          }
          if (!this.defaultUses)
            this.defaultUses = [];
          this.defaultUses[index] = ++this.defaultUses[index] || 1;
          return this.defaultRules[index];
        }
        errors.push("No default rules defined for " + this);
        return null;
      };
      RuleSet.prototype.clearState = function() {
        if (this.defaultUses) {
          this.defaultUses = [];
        }
      };
      function fyshuffle(array, falloff) {
        var currentIndex = array.length, temporaryValue, randomIndex;
        while (currentIndex !== 0) {
          randomIndex = Math.floor(rng() * currentIndex);
          currentIndex -= 1;
          temporaryValue = array[currentIndex];
          array[currentIndex] = array[randomIndex];
          array[randomIndex] = temporaryValue;
        }
        return array;
      }
      var Symbol = function(grammar, key2, rawRules) {
        this.key = key2;
        this.grammar = grammar;
        this.rawRules = rawRules;
        this.baseRules = new RuleSet(this.grammar, rawRules);
        this.clearState();
      };
      Symbol.prototype.clearState = function() {
        this.stack = [this.baseRules];
        this.uses = [];
        this.baseRules.clearState();
      };
      Symbol.prototype.pushRules = function(rawRules) {
        var rules = new RuleSet(this.grammar, rawRules);
        this.stack.push(rules);
      };
      Symbol.prototype.popRules = function() {
        this.stack.pop();
      };
      Symbol.prototype.selectRule = function(node, errors) {
        this.uses.push({
          node
        });
        if (this.stack.length === 0) {
          errors.push("The rule stack for '" + this.key + "' is empty, too many pops?");
          return "((" + this.key + "))";
        }
        return this.stack[this.stack.length - 1].selectRule();
      };
      Symbol.prototype.getActiveRules = function() {
        if (this.stack.length === 0) {
          return null;
        }
        return this.stack[this.stack.length - 1].selectRule();
      };
      Symbol.prototype.rulesToJSON = function() {
        return JSON.stringify(this.rawRules);
      };
      var Grammar = function(raw, settings) {
        this.modifiers = {};
        this.loadFromRawObj(raw);
      };
      Grammar.prototype.clearState = function() {
        var keys = Object.keys(this.symbols);
        for (var i3 = 0; i3 < keys.length; i3++) {
          this.symbols[keys[i3]].clearState();
        }
      };
      Grammar.prototype.addModifiers = function(mods) {
        for (var key2 in mods) {
          if (mods.hasOwnProperty(key2)) {
            this.modifiers[key2] = mods[key2];
          }
        }
      };
      Grammar.prototype.loadFromRawObj = function(raw) {
        this.raw = raw;
        this.symbols = {};
        this.subgrammars = [];
        if (this.raw) {
          for (var key2 in this.raw) {
            if (this.raw.hasOwnProperty(key2)) {
              this.symbols[key2] = new Symbol(this, key2, this.raw[key2]);
            }
          }
        }
      };
      Grammar.prototype.createRoot = function(rule) {
        var root = new TraceryNode(this, 0, {
          type: -1,
          raw: rule
        });
        return root;
      };
      Grammar.prototype.expand = function(rule, allowEscapeChars) {
        var root = this.createRoot(rule);
        root.expand();
        if (!allowEscapeChars)
          root.clearEscapeChars();
        return root;
      };
      Grammar.prototype.flatten = function(rule, allowEscapeChars) {
        var root = this.expand(rule, allowEscapeChars);
        return root.finishedText;
      };
      Grammar.prototype.toJSON = function() {
        var keys = Object.keys(this.symbols);
        var symbolJSON = [];
        for (var i3 = 0; i3 < keys.length; i3++) {
          var key2 = keys[i3];
          symbolJSON.push(' "' + key2 + '" : ' + this.symbols[key2].rulesToJSON());
        }
        return "{\n" + symbolJSON.join(",\n") + "\n}";
      };
      Grammar.prototype.pushRules = function(key2, rawRules, sourceAction) {
        if (this.symbols[key2] === void 0) {
          this.symbols[key2] = new Symbol(this, key2, rawRules);
          if (sourceAction)
            this.symbols[key2].isDynamic = true;
        } else {
          this.symbols[key2].pushRules(rawRules);
        }
      };
      Grammar.prototype.popRules = function(key2) {
        if (!this.symbols[key2])
          this.errors.push("Can't pop: no symbol for key " + key2);
        this.symbols[key2].popRules();
      };
      Grammar.prototype.selectRule = function(key2, node, errors) {
        if (this.symbols[key2]) {
          var rule = this.symbols[key2].selectRule(node, errors);
          return rule;
        }
        for (var i3 = 0; i3 < this.subgrammars.length; i3++) {
          if (this.subgrammars[i3].symbols[key2])
            return this.subgrammars[i3].symbols[key2].selectRule();
        }
        errors.push("No symbol for '" + key2 + "'");
        return "((" + key2 + "))";
      };
      tracery = {
        createGrammar: function(raw) {
          return new Grammar(raw);
        },
        parseTag: function(tagContents) {
          var parsed = {
            symbol: void 0,
            preactions: [],
            postactions: [],
            modifiers: []
          };
          var sections = tracery.parse(tagContents);
          var symbolSection = void 0;
          for (var i3 = 0; i3 < sections.length; i3++) {
            if (sections[i3].type === 0) {
              if (symbolSection === void 0) {
                symbolSection = sections[i3].raw;
              } else {
                throw "multiple main sections in " + tagContents;
              }
            } else {
              parsed.preactions.push(sections[i3]);
            }
          }
          if (symbolSection === void 0) {
          } else {
            var components = symbolSection.split(".");
            parsed.symbol = components[0];
            parsed.modifiers = components.slice(1);
          }
          return parsed;
        },
        parse: function(rule) {
          var depth = 0;
          var inTag = false;
          var sections = [];
          var escaped = false;
          var errors = [];
          var start = 0;
          var escapedSubstring = "";
          var lastEscapedChar = void 0;
          if (rule === null) {
            var sections = [];
            sections.errors = errors;
            return sections;
          }
          function createSection(start2, end, type) {
            if (end - start2 < 1) {
              if (type === 1)
                errors.push(start2 + ": empty tag");
              if (type === 2)
                errors.push(start2 + ": empty action");
            }
            var rawSubstring;
            if (lastEscapedChar !== void 0) {
              rawSubstring = escapedSubstring + "\\" + rule.substring(lastEscapedChar + 1, end);
            } else {
              rawSubstring = rule.substring(start2, end);
            }
            sections.push({
              type,
              raw: rawSubstring
            });
            lastEscapedChar = void 0;
            escapedSubstring = "";
          }
          for (var i3 = 0; i3 < rule.length; i3++) {
            if (!escaped) {
              var c5 = rule.charAt(i3);
              switch (c5) {
                case "[":
                  if (depth === 0 && !inTag) {
                    if (start < i3)
                      createSection(start, i3, 0);
                    start = i3 + 1;
                  }
                  depth++;
                  break;
                case "]":
                  depth--;
                  if (depth === 0 && !inTag) {
                    createSection(start, i3, 2);
                    start = i3 + 1;
                  }
                  break;
                case "#":
                  if (depth === 0) {
                    if (inTag) {
                      createSection(start, i3, 1);
                      start = i3 + 1;
                    } else {
                      if (start < i3)
                        createSection(start, i3, 0);
                      start = i3 + 1;
                    }
                    inTag = !inTag;
                  }
                  break;
                case "\\":
                  escaped = true;
                  escapedSubstring = escapedSubstring + rule.substring(start, i3);
                  start = i3 + 1;
                  lastEscapedChar = i3;
                  break;
              }
            } else {
              escaped = false;
            }
          }
          if (start < rule.length)
            createSection(start, rule.length, 0);
          if (inTag) {
            errors.push("Unclosed tag");
          }
          if (depth > 0) {
            errors.push("Too many [");
          }
          if (depth < 0) {
            errors.push("Too many ]");
          }
          sections = sections.filter(function(section) {
            if (section.type === 0 && section.raw.length === 0)
              return false;
            return true;
          });
          sections.errors = errors;
          return sections;
        }
      };
      tracery.TraceryNode = TraceryNode;
      tracery.Grammar = Grammar;
      tracery.Symbol = Symbol;
      tracery.RuleSet = RuleSet;
      tracery.setRng = setRng;
      return tracery;
    }();
    exports.default = tracery;
  }
});

// node_modules/@darkforest_eth/procedural/dist/tracery-modifiers.js
var require_tracery_modifiers = __commonJS({
  "node_modules/@darkforest_eth/procedural/dist/tracery-modifiers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.baseEngModifiers = void 0;
    function isVowel(c5) {
      var c22 = c5.toLowerCase();
      return c22 === "a" || c22 === "e" || c22 === "i" || c22 === "o" || c22 === "u";
    }
    function isAlphaNum(c5) {
      return c5 >= "a" && c5 <= "z" || c5 >= "A" && c5 <= "Z" || c5 >= "0" && c5 <= "9";
    }
    function escapeRegExp(str) {
      return str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
    }
    exports.baseEngModifiers = {
      replace: function(s2, params) {
        return s2.replace(new RegExp(escapeRegExp(params[0]), "g"), params[1]);
      },
      capitalizeAll: function(s2) {
        var s22 = "";
        var capNext = true;
        for (var i3 = 0; i3 < s2.length; i3++) {
          if (!isAlphaNum(s2.charAt(i3))) {
            capNext = true;
            s22 += s2.charAt(i3);
          } else {
            if (!capNext) {
              s22 += s2.charAt(i3);
            } else {
              s22 += s2.charAt(i3).toUpperCase();
              capNext = false;
            }
          }
        }
        return s22;
      },
      capitalize: function(s2) {
        return s2.charAt(0).toUpperCase() + s2.substring(1);
      },
      a: function(s2) {
        if (s2.length > 0) {
          if (s2.charAt(0).toLowerCase() === "u") {
            if (s2.length > 2) {
              if (s2.charAt(2).toLowerCase() === "i")
                return "a " + s2;
            }
          }
          if (isVowel(s2.charAt(0))) {
            return "an " + s2;
          }
        }
        return "a " + s2;
      },
      firstS: function(s2) {
        console.log(s2);
        var s22 = s2.split(" ");
        var finished = exports.baseEngModifiers.s(s22[0]) + " " + s22.slice(1).join(" ");
        console.log(finished);
        return finished;
      },
      s: function(s2) {
        switch (s2.charAt(s2.length - 1)) {
          case "s":
            return s2 + "es";
            break;
          case "h":
            return s2 + "es";
            break;
          case "x":
            return s2 + "es";
            break;
          case "y":
            if (!isVowel(s2.charAt(s2.length - 2)))
              return s2.substring(0, s2.length - 1) + "ies";
            else
              return s2 + "s";
            break;
          default:
            return s2 + "s";
        }
      },
      ed: function(s2) {
        switch (s2.charAt(s2.length - 1)) {
          case "s":
            return s2 + "ed";
            break;
          case "e":
            return s2 + "d";
            break;
          case "h":
            return s2 + "ed";
            break;
          case "x":
            return s2 + "ed";
            break;
          case "y":
            if (!isVowel(s2.charAt(s2.length - 2)))
              return s2.substring(0, s2.length - 1) + "ied";
            else
              return s2 + "d";
            break;
          default:
            return s2 + "ed";
        }
      }
    };
  }
});

// node_modules/@darkforest_eth/procedural/dist/ProcgenUtils.js
var require_ProcgenUtils = __commonJS({
  "node_modules/@darkforest_eth/procedural/dist/ProcgenUtils.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHatSizeName = exports.getPlanetBlurb2 = exports.getPlanetBlurb = exports.getPlanetTagline = exports.getPlanetNameHash = exports.getPlanetName = exports.getPlanetTitle = exports.getPlanetCosmetic = exports.getRuinsInfo = exports.artifactRandomInt = exports.artifactRandom = exports.planetRandomInt = exports.planetRandom = exports.planetPerlin = exports.getPlanetClass = exports.getOwnerColor = exports.getOwnerColorVec = exports.getPlayerColorVec = exports.getPlayerColor = exports.hashToHue = exports.hslToRgb = exports.rgbStr = exports.hslStr = exports.hatTypeFromHash = exports.grayColors = exports.getBiomeRgbStr = exports.titleCase = void 0;
    var constants_1 = require_dist2();
    var gamelogic_1 = require_dist5();
    var hashing_1 = require_dist6();
    var serde_1 = require_dist4();
    var types_1 = require_dist();
    var Noise_1 = __importDefault(require_Noise());
    var ProcgenConsts_1 = require_ProcgenConsts();
    var tracery_1 = __importDefault(require_tracery());
    var tracery_modifiers_1 = require_tracery_modifiers();
    var titleCase = (title) => title.split(/ /g).map((word, i3) => {
      if (i3 !== 0 && ["of", "the"].includes(word))
        return word;
      return `${word.substring(0, 1).toUpperCase()}${word.substring(1)}`;
    }).join(" ");
    exports.titleCase = titleCase;
    var blurbsById = new Map();
    var blurbs2ById = new Map();
    var cosmeticByLocId = new Map();
    var baseByBiome = {
      [types_1.Biome.UNKNOWN]: [0, 0, 0],
      [types_1.Biome.OCEAN]: [213, 100, 50],
      [types_1.Biome.FOREST]: [135, 96, 63],
      [types_1.Biome.GRASSLAND]: [82, 80, 76],
      [types_1.Biome.TUNDRA]: [339, 95, 70],
      [types_1.Biome.SWAMP]: [44, 81, 33],
      [types_1.Biome.DESERT]: [51, 78, 60],
      [types_1.Biome.ICE]: [198, 78, 77],
      [types_1.Biome.WASTELAND]: [0, 0, 18],
      [types_1.Biome.LAVA]: [19, 100, 50],
      [types_1.Biome.CORRUPTED]: [100, 80, 54]
    };
    var oceanByBiome = {
      [types_1.Biome.UNKNOWN]: [0, 0, 0],
      [types_1.Biome.OCEAN]: [213, 89, 35],
      [types_1.Biome.FOREST]: [193, 96, 43],
      [types_1.Biome.GRASSLAND]: [185, 78, 70],
      [types_1.Biome.TUNDRA]: [201, 95, 70],
      [types_1.Biome.SWAMP]: [285, 81, 33],
      [types_1.Biome.DESERT]: [27, 78, 60],
      [types_1.Biome.ICE]: [198, 90, 85],
      [types_1.Biome.WASTELAND]: [0, 98, 42],
      [types_1.Biome.LAVA]: [12, 92, 39],
      [types_1.Biome.CORRUPTED]: [128, 90, 63]
    };
    var strByBiome = new Map();
    function getBiomeRgbStr(biome) {
      if (biome === types_1.Biome.WASTELAND)
        return "#888";
      const s2 = strByBiome.get(biome);
      if (s2)
        return s2;
      const str = rgbStr(hslToRgb(baseByBiome[biome]));
      strByBiome.set(biome, str);
      return str;
    }
    exports.getBiomeRgbStr = getBiomeRgbStr;
    exports.grayColors = {
      baseHue: 0,
      baseStr: "#888",
      bgStr: "#888",
      baseColor: [120, 120, 120],
      baseColor2: [120, 120, 120],
      baseColor3: [120, 120, 120],
      mtnColor: [120, 120, 120],
      mtnColor2: [120, 120, 120],
      mtnColor3: [120, 120, 120],
      backgroundColor: [120, 120, 120],
      previewColor: [120, 120, 120],
      landRgb: [0, 0, 0],
      oceanRgb: [0, 0, 0],
      beachRgb: [0, 0, 0],
      asteroidHsl: [0, 0, 0],
      seed: 0,
      spacetime1: [0, 0, 0],
      spacetime2: [0, 0, 0],
      spacetime3: [0, 0, 0],
      ruins: void 0,
      hatType: types_1.HatType.GraduationCap
    };
    var namesById = new Map();
    var taglinesById = new Map();
    var huesByHash = new Map();
    var rgbsByHash = new Map();
    function hatTypeFromHash(hash3) {
      const rand2 = planetRandomInt(hash3);
      if (rand2() % 69 === 0)
        return types_1.HatType.Fish;
      if (rand2() % 16 === 0)
        return types_1.HatType.SantaHat;
      const mod2 = rand2() % 8;
      switch (mod2) {
        case 0:
          return types_1.HatType.GraduationCap;
        case 1:
          return types_1.HatType.PartyHat;
        case 2:
          return types_1.HatType.Squid;
        case 3:
          return types_1.HatType.TopHat;
        case 4:
          return types_1.HatType.Fez;
        case 5:
          return types_1.HatType.ChefHat;
        case 6:
          return types_1.HatType.CowboyHat;
        case 7:
          return types_1.HatType.PopeHat;
        default:
          return types_1.HatType.GraduationCap;
      }
    }
    exports.hatTypeFromHash = hatTypeFromHash;
    function hslStr(h3, s2, l3) {
      return `hsl(${h3 % 360},${s2}%,${l3}%)`;
    }
    exports.hslStr = hslStr;
    function rgbStr(rgb) {
      const [r3, g3, b3] = rgb;
      return `rgb(${r3}, ${g3}, ${b3})`;
    }
    exports.rgbStr = rgbStr;
    function hslToRgb([h3, s2, l3]) {
      s2 = Math.max(Math.min(s2, 100), 0);
      l3 = Math.max(Math.min(l3, 100), 0);
      s2 /= 100;
      l3 /= 100;
      const c5 = (1 - Math.abs(2 * l3 - 1)) * s2, x3 = c5 * (1 - Math.abs(h3 / 60 % 2 - 1)), m3 = l3 - c5 / 2;
      let r3 = 0, g3 = 0, b3 = 0;
      if (0 <= h3 && h3 < 60) {
        r3 = c5;
        g3 = x3;
        b3 = 0;
      } else if (60 <= h3 && h3 < 120) {
        r3 = x3;
        g3 = c5;
        b3 = 0;
      } else if (120 <= h3 && h3 < 180) {
        r3 = 0;
        g3 = c5;
        b3 = x3;
      } else if (180 <= h3 && h3 < 240) {
        r3 = 0;
        g3 = x3;
        b3 = c5;
      } else if (240 <= h3 && h3 < 300) {
        r3 = x3;
        g3 = 0;
        b3 = c5;
      } else if (300 <= h3 && h3 < 360) {
        r3 = c5;
        g3 = 0;
        b3 = x3;
      }
      r3 = Math.round((r3 + m3) * 255);
      g3 = Math.round((g3 + m3) * 255);
      b3 = Math.round((b3 + m3) * 255);
      return [r3, g3, b3];
    }
    exports.hslToRgb = hslToRgb;
    function hashToHue(hash3) {
      if (huesByHash.has(hash3)) {
        return huesByHash.get(hash3) || 0;
      }
      const baseHue = (0, serde_1.hashToInt)(hash3) % 360;
      huesByHash.set(hash3, baseHue);
      return baseHue;
    }
    exports.hashToHue = hashToHue;
    function getPlayerColor2(player) {
      return hslStr(hashToHue(player.slice(2)), 100, 70);
    }
    exports.getPlayerColor = getPlayerColor2;
    function getPlayerColorVec(player) {
      if (!rgbsByHash.has(player)) {
        const noAlpha = hslToRgb([hashToHue(player.slice(2)), 100, 70]);
        const withAlpha = [...noAlpha, 1];
        rgbsByHash.set(player, withAlpha);
      }
      return rgbsByHash.get(player);
    }
    exports.getPlayerColorVec = getPlayerColorVec;
    function getOwnerColorVec(planet) {
      if (planet.owner === constants_1.EMPTY_ADDRESS)
        return [153, 153, 102, 255];
      return getPlayerColorVec(planet.owner);
    }
    exports.getOwnerColorVec = getOwnerColorVec;
    function getOwnerColor(planet) {
      if (planet.owner === constants_1.EMPTY_ADDRESS)
        return "#996666";
      return getPlayerColor2(planet.owner);
    }
    exports.getOwnerColor = getOwnerColor;
    function getPlanetClass(planet) {
      const upgrade = planet.upgradeState;
      let maxIdx = 0;
      let maxVal = -1;
      for (let i3 = 0; i3 < upgrade.length; i3++) {
        if (upgrade[i3] > maxVal) {
          maxIdx = i3;
          maxVal = upgrade[i3];
        }
      }
      return maxIdx;
    }
    exports.getPlanetClass = getPlanetClass;
    function planetPerlin(loc) {
      const realHash = loc.substring(4, loc.length);
      const noise = Noise_1.default.getInstance();
      const offset = parseInt("0x" + realHash.substring(0, 10));
      const t3 = (num) => num / 100 + offset;
      return (coords) => {
        const ret = noise.simplex2(t3(coords.x), t3(coords.y));
        return ret;
      };
    }
    exports.planetPerlin = planetPerlin;
    function planetRandom(loc) {
      const realHash = loc.substring(4, loc.length);
      let count = 0;
      const countOffset = parseInt("0x" + realHash.substring(0, 10));
      return () => {
        count++;
        const ret = (0, hashing_1.seededRandom)(count + countOffset);
        return ret;
      };
    }
    exports.planetRandom = planetRandom;
    function planetRandomInt(loc) {
      const rand2 = planetRandom(loc);
      return () => Math.floor(rand2() * 2 ** 24);
    }
    exports.planetRandomInt = planetRandomInt;
    function artifactRandom(loc) {
      const realHash = loc.substring(4, loc.length);
      let count = 0;
      const countOffset = parseInt("0x" + realHash.substring(0, 10));
      return () => {
        count++;
        const ret = (0, hashing_1.seededRandom)(count + countOffset);
        return ret;
      };
    }
    exports.artifactRandom = artifactRandom;
    function artifactRandomInt(loc) {
      const rand2 = artifactRandom(loc);
      return () => Math.floor(rand2() * 2 ** 24);
    }
    exports.artifactRandomInt = artifactRandomInt;
    function getRuinsInfo(loc) {
      const myInfo = {};
      const rand2 = planetRandom(loc);
      const randInt = planetRandomInt(loc);
      for (let i3 = constants_1.MIN_PLANET_LEVEL; i3 <= constants_1.MAX_PLANET_LEVEL; i3++) {
        const blooms = randInt() % 4 + 1;
        const reflect = randInt() % 2;
        const vel = -1 + rand2() * 2;
        const w1 = rand2();
        const w22 = rand2();
        const w3 = rand2();
        const w4 = rand2();
        const sum = w1 + w22 + w3 + w4;
        myInfo[i3] = {
          weights: [w1 / sum, w22 / sum, w3 / sum, w4 / sum],
          props: [blooms, reflect, vel, 0]
        };
      }
      return myInfo;
    }
    exports.getRuinsInfo = getRuinsInfo;
    function getPlanetCosmetic(planet) {
      if (!planet)
        return exports.grayColors;
      if (cosmeticByLocId.has(planet.locationId)) {
        return cosmeticByLocId.get(planet.locationId) || exports.grayColors;
      }
      const baseColor = (0, gamelogic_1.isLocatable)(planet) ? baseByBiome[planet.biome] : [0, 0, 50];
      const oceanColor = (0, gamelogic_1.isLocatable)(planet) ? oceanByBiome[planet.biome] : [0, 0, 20];
      const baseHue = hashToHue(planet.locationId);
      const seed = parseInt("0x" + planet.locationId.substring(0, 9));
      const bL = Math.min(baseColor[2] + 20, 92);
      const baseColor2 = [baseColor[0], baseColor[1], bL - 10];
      const baseColor3 = [baseColor[0], baseColor[1], bL];
      const sL = Math.max(0, baseColor[2] - 30);
      const sS = baseColor[1] - 10;
      const secondaryColor = [baseColor[0], sS, sL];
      const secondaryColor2 = [baseColor[0], sS, sL + 10];
      const secondaryColor3 = [baseColor[0], sS, sL + 20];
      const beachColor = [
        baseColor[0] + 10,
        baseColor[1] - 30,
        Math.min(baseColor[2] + 23, 100)
      ];
      const asteroidHsl = (0, gamelogic_1.isLocatable)(planet) && planet.biome === types_1.Biome.WASTELAND ? [0, 0, 40] : baseColor;
      const spacetime1 = [baseHue, 75, 70];
      const spacetime2 = [baseHue + 15, 70, 55];
      const spacetime3 = [baseHue - 15, 65, 60];
      const colors2 = {
        baseStr: hslStr(...baseColor),
        bgStr: hslStr(oceanColor[0], Math.min(oceanColor[1] + 30, 100), 80),
        baseHue,
        baseColor: hslToRgb(baseColor),
        baseColor2: hslToRgb(baseColor2),
        baseColor3: hslToRgb(baseColor3),
        mtnColor: hslToRgb(secondaryColor),
        mtnColor2: hslToRgb(secondaryColor2),
        mtnColor3: hslToRgb(secondaryColor3),
        backgroundColor: hslToRgb(oceanColor),
        previewColor: hslToRgb(baseColor),
        landRgb: hslToRgb(baseColor),
        oceanRgb: hslToRgb(oceanColor),
        beachRgb: hslToRgb(beachColor),
        spacetime1: hslToRgb(spacetime1),
        spacetime2: hslToRgb(spacetime2),
        spacetime3: hslToRgb(spacetime3),
        asteroidHsl,
        seed,
        hatType: hatTypeFromHash(planet.locationId),
        ruins: getRuinsInfo(planet.locationId)
      };
      cosmeticByLocId.set(planet.locationId, colors2);
      return colors2;
    }
    exports.getPlanetCosmetic = getPlanetCosmetic;
    function getPlanetTitle(planet) {
      if (!planet)
        return "Unknown";
      const myRank = (0, gamelogic_1.getPlanetRank)(planet);
      let ret = "Planet";
      if (myRank === 1) {
        ret = "Settlement";
      } else if (myRank === 2) {
        ret = "Colony";
      } else if (myRank === 3) {
        ret = "Spaceport";
      } else if (myRank === 4) {
        ret = "Stronghold";
      } else if (myRank === 5) {
        ret = "Galactic Stronghold";
      }
      return ret;
    }
    exports.getPlanetTitle = getPlanetTitle;
    function getPlanetName2(planet) {
      if (!planet)
        return "Unknown";
      return getPlanetNameHash(planet.locationId);
    }
    exports.getPlanetName = getPlanetName2;
    function getPlanetNameHash(locId) {
      const name2 = namesById.get(locId);
      if (name2)
        return name2;
      let planetName = "";
      const randInt = planetRandomInt(locId);
      if (randInt() % 1024 === 0) {
        planetName = "Clown Town";
      } else {
        const word1 = ProcgenConsts_1.planetNameWords[randInt() % ProcgenConsts_1.planetNameWords.length];
        const word2 = ProcgenConsts_1.planetNameWords[randInt() % ProcgenConsts_1.planetNameWords.length];
        planetName = (0, exports.titleCase)(`${word1} ${word2}`);
      }
      namesById.set(locId, planetName);
      return planetName;
    }
    exports.getPlanetNameHash = getPlanetNameHash;
    function getPlanetTagline(planet) {
      if (!planet)
        return "The empty unknown";
      const tagline = taglinesById.get(planet.locationId);
      if (tagline)
        return tagline;
      let myTagline = "";
      if (getPlanetName2(planet) === "Clown Town") {
        myTagline = `A town of clowns`;
      } else {
        const randInt = planetRandomInt(planet.locationId);
        const adj1 = ProcgenConsts_1.planetTagAdj[randInt() % ProcgenConsts_1.planetTagAdj.length];
        const adj2 = ProcgenConsts_1.planetTagAdj[randInt() % ProcgenConsts_1.planetTagAdj.length];
        const noun = ProcgenConsts_1.planetTagNoun[randInt() % ProcgenConsts_1.planetTagNoun.length];
        myTagline = `A ${adj1}, ${adj2} ${noun}`;
      }
      taglinesById.set(planet.locationId, myTagline);
      return myTagline;
    }
    exports.getPlanetTagline = getPlanetTagline;
    function getPlanetBlurb(planet) {
      if (!planet)
        return "The vast, empty unknown of space contains worlds of infinite possibilities. Select a planet to learn more...";
      const myBlurb = blurbsById.get(planet.locationId);
      if (myBlurb)
        return myBlurb;
      let append = "";
      if (getPlanetName2(planet) === "Clown Town") {
        append = `Founded in 1998 by Brian Gu, who remains the CEO of Clown Town to this day. `;
      }
      tracery_1.default.setRng(planetRandom(planet.locationId));
      const myGrammar = {
        story: [
          `#geography.capitalize# #populates#. The #air# is #descair#. #myflora.capitalize# #bloom# #colors#. #many.capitalize# species of #species# #populate# the #habitat#. #funfact.capitalize#.`
        ],
        origin: ["#[myflora:#flora#]story#"]
      };
      const grammar = tracery_1.default.createGrammar({ ...ProcgenConsts_1.blurbGrammar, ...myGrammar });
      grammar.addModifiers(tracery_modifiers_1.baseEngModifiers);
      const blurb = append + grammar.flatten("#origin#");
      blurbsById.set(planet.locationId, blurb);
      return blurb;
    }
    exports.getPlanetBlurb = getPlanetBlurb;
    function getPlanetBlurb2(planet) {
      if (!planet)
        return "";
      const myBlurb = blurbs2ById.get(planet.locationId);
      if (myBlurb)
        return myBlurb;
      const name2 = getPlanetName2(planet);
      const tagline = getPlanetTagline(planet);
      const myGrammar = {
        story: [
          `The people of ${name2} have #learned# to #live# in a ${tagline}. ${name2}'s #mysun# #sends# an #flock# of #bads# #sometimes#. Over the #years#, they've #removed# the #mysun# by #throwing# #warbears#. In doing so, they've learned that #lesson#.`
        ],
        origin: [`#[mysun:#sun#]story#`]
      };
      tracery_1.default.setRng(planetRandom(planet.locationId));
      const grammar = tracery_1.default.createGrammar({ ...ProcgenConsts_1.blurb2grammar, ...myGrammar });
      grammar.addModifiers(tracery_modifiers_1.baseEngModifiers);
      const blurb = grammar.flatten("#origin#");
      blurbs2ById.set(planet.locationId, blurb);
      return blurb;
    }
    exports.getPlanetBlurb2 = getPlanetBlurb2;
    function getHatSizeName(planet) {
      const maxHat = constants_1.HAT_SIZES.length;
      const lv = planet.hatLevel;
      if (lv < maxHat)
        return constants_1.HAT_SIZES[lv];
      else
        return "H" + "A".repeat(4 * 2 ** (lv - maxHat + 1)) + "T";
    }
    exports.getHatSizeName = getHatSizeName;
  }
});

// node_modules/@darkforest_eth/procedural/dist/index.js
var require_dist7 = __commonJS({
  "node_modules/@darkforest_eth/procedural/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0)
        k22 = k3;
      Object.defineProperty(o3, k22, { enumerable: true, get: function() {
        return m3[k3];
      } });
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0)
        k22 = k3;
      o3[k22] = m3[k3];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p2 in m3)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m3, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ArtifactProcgen(), exports);
    __exportStar(require_ProcgenUtils(), exports);
  }
});

// client/util/poseidon_constants.json
var require_poseidon_constants = __commonJS({
  "client/util/poseidon_constants.json"(exports, module) {
    module.exports = {
      C: [
        [
          "0x09c46e9ec68e9bd4fe1faaba294cba38a71aa177534cdd1b6c7dc0dbd0abd7a7",
          "0x0c0356530896eec42a97ed937f3135cfc5142b3ae405b8343c1d83ffa604cb81",
          "0x1e28a1d935698ad1142e51182bb54cf4a00ea5aabd6268bd317ea977cc154a30",
          "0x27af2d831a9d2748080965db30e298e40e5757c3e008db964cf9e2b12b91251f",
          "0x1e6f11ce60fc8f513a6a3cfe16ae175a41291462f214cd0879aaf43545b74e03",
          "0x2a67384d3bbd5e438541819cb681f0be04462ed14c3613d8f719206268d142d3",
          "0x0b66fdf356093a611609f8e12fbfecf0b985e381f025188936408f5d5c9f45d0",
          "0x012ee3ec1e78d470830c61093c2ade370b26c83cc5cebeeddaa6852dbdb09e21",
          "0x0252ba5f6760bfbdfd88f67f8175e3fd6cd1c431b099b6bb2d108e7b445bb1b9",
          "0x179474cceca5ff676c6bec3cef54296354391a8935ff71d6ef5aeaad7ca932f1",
          "0x2c24261379a51bfa9228ff4a503fd4ed9c1f974a264969b37e1a2589bbed2b91",
          "0x1cc1d7b62692e63eac2f288bd0695b43c2f63f5001fc0fc553e66c0551801b05",
          "0x255059301aada98bb2ed55f852979e9600784dbf17fbacd05d9eff5fd9c91b56",
          "0x28437be3ac1cb2e479e1f5c0eccd32b3aea24234970a8193b11c29ce7e59efd9",
          "0x28216a442f2e1f711ca4fa6b53766eb118548da8fb4f78d4338762c37f5f2043",
          "0x2c1f47cd17fa5adf1f39f4e7056dd03feee1efce03094581131f2377323482c9",
          "0x07abad02b7a5ebc48632bcc9356ceb7dd9dafca276638a63646b8566a621afc9",
          "0x0230264601ffdf29275b33ffaab51dfe9429f90880a69cd137da0c4d15f96c3c",
          "0x1bc973054e51d905a0f168656497ca40a864414557ee289e717e5d66899aa0a9",
          "0x2e1c22f964435008206c3157e86341edd249aff5c2d8421f2a6b22288f0a67fc",
          "0x1224f38df67c5378121c1d5f461bbc509e8ea1598e46c9f7a70452bc2bba86b8",
          "0x02e4e69d8ba59e519280b4bd9ed0068fd7bfe8cd9dfeda1969d2989186cde20e",
          "0x1f1eccc34aaba0137f5df81fc04ff3ee4f19ee364e653f076d47e9735d98018e",
          "0x1672ad3d709a353974266c3039a9a7311424448032cd1819eacb8a4d4284f582",
          "0x283e3fdc2c6e420c56f44af5192b4ae9cda6961f284d24991d2ed602df8c8fc7",
          "0x1c2a3d120c550ecfd0db0957170fa013683751f8fdff59d6614fbd69ff394bcc",
          "0x216f84877aac6172f7897a7323456efe143a9a43773ea6f296cb6b8177653fbd",
          "0x2c0d272becf2a75764ba7e8e3e28d12bceaa47ea61ca59a411a1f51552f94788",
          "0x16e34299865c0e28484ee7a74c454e9f170a5480abe0508fcb4a6c3d89546f43",
          "0x175ceba599e96f5b375a232a6fb9cc71772047765802290f48cd939755488fc5",
          "0x0c7594440dc48c16fead9e1758b028066aa410bfbc354f54d8c5ffbb44a1ee32",
          "0x1a3c29bc39f21bb5c466db7d7eb6fd8f760e20013ccf912c92479882d919fd8d",
          "0x0ccfdd906f3426e5c0986ea049b253400855d349074f5a6695c8eeabcd22e68f",
          "0x14f6bc81d9f186f62bdb475ce6c9411866a7a8a3fd065b3ce0e699b67dd9e796",
          "0x0962b82789fb3d129702ca70b2f6c5aacc099810c9c495c888edeb7386b97052",
          "0x1a880af7074d18b3bf20c79de25127bc13284ab01ef02575afef0c8f6a31a86d",
          "0x10cba18419a6a332cd5e77f0211c154b20af2924fc20ff3f4c3012bb7ae9311b",
          "0x057e62a9a8f89b3ebdc76ba63a9eaca8fa27b7319cae3406756a2849f302f10d",
          "0x287c971de91dc0abd44adf5384b4988cb961303bbf65cff5afa0413b44280cee",
          "0x21df3388af1687bbb3bca9da0cca908f1e562bc46d4aba4e6f7f7960e306891d",
          "0x1be5c887d25bce703e25cc974d0934cd789df8f70b498fd83eff8b560e1682b3",
          "0x268da36f76e568fb68117175cea2cd0dd2cb5d42fda5acea48d59c2706a0d5c1",
          "0x0e17ab091f6eae50c609beaf5510ececc5d8bb74135ebd05bd06460cc26a5ed6",
          "0x04d727e728ffa0a67aee535ab074a43091ef62d8cf83d270040f5caa1f62af40",
          "0x0ddbd7bf9c29341581b549762bc022ed33702ac10f1bfd862b15417d7e39ca6e",
          "0x2790eb3351621752768162e82989c6c234f5b0d1d3af9b588a29c49c8789654b",
          "0x1e457c601a63b73e4471950193d8a570395f3d9ab8b2fd0984b764206142f9e9",
          "0x21ae64301dca9625638d6ab2bbe7135ffa90ecd0c43ff91fc4c686fc46e091b0",
          "0x0379f63c8ce3468d4da293166f494928854be9e3432e09555858534eed8d350b",
          "0x002d56420359d0266a744a080809e054ca0e4921a46686ac8c9f58a324c35049",
          "0x123158e5965b5d9b1d68b3cd32e10bbeda8d62459e21f4090fc2c5af963515a6",
          "0x0be29fc40847a941661d14bbf6cbe0420fbb2b6f52836d4e60c80eb49cad9ec1",
          "0x1ac96991dec2bb0557716142015a453c36db9d859cad5f9a233802f24fdf4c1a",
          "0x1596443f763dbcc25f4964fc61d23b3e5e12c9fa97f18a9251ca3355bcb0627e",
          "0x12e0bcd3654bdfa76b2861d4ec3aeae0f1857d9f17e715aed6d049eae3ba3212",
          "0x0fc92b4f1bbea82b9ea73d4af9af2a50ceabac7f37154b1904e6c76c7cf964ba",
          "0x1f9c0b1610446442d6f2e592a8013f40b14f7c7722236f4f9c7e965233872762",
          "0x0ebd74244ae72675f8cde06157a782f4050d914da38b4c058d159f643dbbf4d3",
          "0x2cb7f0ed39e16e9f69a9fafd4ab951c03b0671e97346ee397a839839dccfc6d1",
          "0x1a9d6e2ecff022cc5605443ee41bab20ce761d0514ce526690c72bca7352d9bf",
          "0x2a115439607f335a5ea83c3bc44a9331d0c13326a9a7ba3087da182d648ec72f",
          "0x23f9b6529b5d040d15b8fa7aee3e3410e738b56305cd44f29535c115c5a4c060",
          "0x05872c16db0f72a2249ac6ba484bb9c3a3ce97c16d58b68b260eb939f0e6e8a7",
          "0x1300bdee08bb7824ca20fb80118075f40219b6151d55b5c52b624a7cdeddf6a7",
          "0x19b9b63d2f108e17e63817863a8f6c288d7ad29916d98cb1072e4e7b7d52b376",
          "0x015bee1357e3c015b5bda237668522f613d1c88726b5ec4224a20128481b4f7f",
          "0x2953736e94bb6b9f1b9707a4f1615e4efe1e1ce4bab218cbea92c785b128ffd1",
          "0x0b069353ba091618862f806180c0385f851b98d372b45f544ce7266ed6608dfc",
          "0x304f74d461ccc13115e4e0bcfb93817e55aeb7eb9306b64e4f588ac97d81f429",
          "0x15bbf146ce9bca09e8a33f5e77dfe4f5aad2a164a4617a4cb8ee5415cde913fc",
          "0x0ab4dfe0c2742cde44901031487964ed9b8f4b850405c10ca9ff23859572c8c6",
          "0x0e32db320a044e3197f45f7649a19675ef5eedfea546dea9251de39f9639779a",
          "0x0a1756aa1f378ca4b27635a78b6888e66797733a82774896a3078efa516da016",
          "0x044c4a33b10f693447fd17177f952ef895e61d328f85efa94254d6a2a25d93ef",
          "0x2ed3611b725b8a70be655b537f66f700fe0879d79a496891d37b07b5466c4b8b",
          "0x1f9ba4e8bab7ce42c8ecc3d722aa2e0eadfdeb9cfdd347b5d8339ea7120858aa",
          "0x1b233043052e8c288f7ee907a84e518aa38e82ac4502066db74056f865c5d3da",
          "0x2431e1cc164bb8d074031ab72bd55b4c902053bfc0f14db0ca2f97b020875954",
          "0x082f934c91f5aac330cd6953a0a7db45a13e322097583319a791f273965801fd",
          "0x2b9a0a223e7538b0a34be074315542a3c77245e2ae7cbe999ad6bb930c48997c",
          "0x0e1cd91edd2cfa2cceb85483b887a9be8164163e75a8a00eb0b589cc70214e7d",
          "0x2e1eac0f2bfdfd63c951f61477e3698999774f19854d00f588d324601cebe2f9",
          "0x0cbfa95f37fb74060c76158e769d6d157345784d8efdb33c23d748115b500b83",
          "0x08f05b3be923ed44d65ad49d8a61e9a676d991e3a77513d9980c232dfa4a4f84",
          "0x22719e2a070bcd0852bf8e21984d0443e7284925dc0758a325a2dd510c047ef6",
          "0x041f596a9ee1cb2bc060f7fcc3a1ab4c7bdbf036119982c0f41f62b2f26830c0",
          "0x233fd35de1be520a87628eb06f6b1d4c021be1c2d0dc464a19fcdd0986b10f89",
          "0x0524b46d1aa87a5e4325e0a423ebc810d31e078aa1b4707eefcb453c61c9c267",
          "0x2c34f424c81e5716ce47fcac894b85824227bb954b0f3199cc4486237c515211",
          "0x0b5f2a4b63387819207effc2b5541fb72dd2025b5457cc97f33010327de4915e",
          "0x22207856082ccc54c5b72fe439d2cfd6c17435d2f57af6ceaefac41fe05c659f",
          "0x24d57a8bf5da63fe4e24159b7f8950b5cdfb210194caf79f27854048ce2c8171",
          "0x0afab181fdd5e0583b371d75bd693f98374ad7097bb01a8573919bb23b79396e",
          "0x2dba9b108f208772998a52efac7cbd5676c0057194c16c0bf16290d62b1128ee",
          "0x26349b66edb8b16f56f881c788f53f83cbb83de0bd592b255aff13e6bce420b3",
          "0x25af7ce0e5e10357685e95f92339753ad81a56d28ecc193b235288a3e6f137db",
          "0x25b4ce7bd2294390c094d6a55edd68b970eed7aae88b2bff1f7c0187fe35011f",
          "0x22c543f10f6c89ec387e53f1908a88e5de9cef28ebdf30b18cb9d54c1e02b631",
          "0x0236f93e7789c4724fc7908a9f191e1e425e906a919d7a34df668e74882f87a9",
          "0x29350b401166ca010e7d27e37d05da99652bdae114eb01659cb497af980c4b52",
          "0x0eed787d65820d3f6bd31bbab547f75a65edb75d844ebb89ee1260916652363f",
          "0x07cc1170f13b46f2036a753f520b3291fdcd0e99bd94297d1906f656f4de6fad",
          "0x22b939233b1d7205f49bcf613a3d30b1908786d7f9f5d10c2059435689e8acea",
          "0x01451762a0aab81c8aad1dc8bc33e870740f083a5aa85438add650ace60ae5a6",
          "0x23506bb5d8727d4461fabf1025d46d1fe32eaa61dec7da57e704fec0892fce89",
          "0x2e484c44e838aea0bac06ae3f71bdd092a3709531e1efea97f8bd68907355522",
          "0x0f4bc7d07ebafd64379e78c50bd2e42baf4a594545cedc2545418da26835b54c",
          "0x1f4d3c8f6583e9e5fa76637862faaee851582388725df460e620996d50d8e74e",
          "0x093514e0c70711f82660d07be0e4a988fae02abc7b681d9153eb9bcb48fe7389",
          "0x1adab0c8e2b3bad346699a2b5f3bc03643ee83ece47228f24a58e0a347e153d8",
          "0x1672b1726057d99dd14709ebb474641a378c1b94b8072bac1a22dbef9e80dad2",
          "0x1dfd53d4576af2e38f44f53fdcab468cc5d8e2fae0acc4ee30d47b239b479c14",
          "0x0c6888a10b75b0f3a70a36263a37e17fe6d77d640f6fc3debc7f207753205c60",
          "0x1addb933a65be77092b34a7e77d12fe8611a61e00ee6848b85091ecca9d1e508",
          "0x00d7540dcd268a845c10ae18d1de933cf638ff5425f0afff7935628e299d1791",
          "0x140c0e42687e9ead01b2827a5664ca9c26fedde4acd99db1d316939d20b82c0e",
          "0x2f0c3a115d4317d191ba89b8d13d1806c20a0f9b24f8c5edc091e2ae56565984",
          "0x0c4ee778ff7c14553006ed220cf9c81008a0cff670b22b82d8c538a1dc958c61",
          "0x1704f2766d46f82c3693f00440ccc3609424ed26c0acc66227c3d7485de74c69",
          "0x2f2d19cc3ea5d78ea7a02c1b51d244abf0769c9f8544e40239b66fe9009c3cfa",
          "0x1ae03853b75fcaba5053f112e2a8e8dcdd7ee6cb9cfed9c7d6c766a806fc6629",
          "0x0971aabf795241df51d131d0fa61aa5f3556921b2d6f014e4e41a86ddaf056d5",
          "0x1408c316e6014e1a91d4cf6b6e0de73eda624f8380df1c875f5c29f7bfe2f646",
          "0x1667f3fe2edbe850248abe42b543093b6c89f1f773ef285341691f39822ef5bd",
          "0x13bf7c5d0d2c4376a48b0a03557cdf915b81718409e5c133424c69576500fe37",
          "0x07620a6dfb0b6cec3016adf3d3533c24024b95347856b79719bc0ba743a62c2c",
          "0x1574c7ef0c43545f36a8ca08bdbdd8b075d2959e2f322b731675de3e1982b4d0",
          "0x269e4b5b7a2eb21afd567970a717ceec5bd4184571c254fdc06e03a7ff8378f0"
        ],
        [
          "0x0ee9a592ba9a9518d05986d656f40c2114c4993c11bb29938d21d47304cd8e6e",
          "0x00f1445235f2148c5986587169fc1bcd887b08d4d00868df5696fff40956e864",
          "0x08dff3487e8ac99e1f29a058d0fa80b930c728730b7ab36ce879f3890ecf73f5",
          "0x2f27be690fdaee46c3ce28f7532b13c856c35342c84bda6e20966310fadc01d0",
          "0x2b2ae1acf68b7b8d2416bebf3d4f6234b763fe04b8043ee48b8327bebca16cf2",
          "0x0319d062072bef7ecca5eac06f97d4d55952c175ab6b03eae64b44c7dbf11cfa",
          "0x28813dcaebaeaa828a376df87af4a63bc8b7bf27ad49c6298ef7b387bf28526d",
          "0x2727673b2ccbc903f181bf38e1c1d40d2033865200c352bc150928adddf9cb78",
          "0x234ec45ca27727c2e74abd2b2a1494cd6efbd43e340587d6b8fb9e31e65cc632",
          "0x15b52534031ae18f7f862cb2cf7cf760ab10a8150a337b1ccd99ff6e8797d428",
          "0x0dc8fad6d9e4b35f5ed9a3d186b79ce38e0e8a8d1b58b132d701d4eecf68d1f6",
          "0x1bcd95ffc211fbca600f705fad3fb567ea4eb378f62e1fec97805518a47e4d9c",
          "0x10520b0ab721cadfe9eff81b016fc34dc76da36c2578937817cb978d069de559",
          "0x1f6d48149b8e7f7d9b257d8ed5fbbaf42932498075fed0ace88a9eb81f5627f6",
          "0x1d9655f652309014d29e00ef35a2089bfff8dc1c816f0dc9ca34bdb5460c8705",
          "0x04df5a56ff95bcafb051f7b1cd43a99ba731ff67e47032058fe3d4185697cc7d",
          "0x0672d995f8fff640151b3d290cedaf148690a10a8c8424a7f6ec282b6e4be828",
          "0x099952b414884454b21200d7ffafdd5f0c9a9dcc06f2708e9fc1d8209b5c75b9",
          "0x052cba2255dfd00c7c483143ba8d469448e43586a9b4cd9183fd0e843a6b9fa6",
          "0x0b8badee690adb8eb0bd74712b7999af82de55707251ad7716077cb93c464ddc",
          "0x119b1590f13307af5a1ee651020c07c749c15d60683a8050b963d0a8e4b2bdd1",
          "0x03150b7cd6d5d17b2529d36be0f67b832c4acfc884ef4ee5ce15be0bfb4a8d09",
          "0x2cc6182c5e14546e3cf1951f173912355374efb83d80898abe69cb317c9ea565",
          "0x005032551e6378c450cfe129a404b3764218cadedac14e2b92d2cd73111bf0f9",
          "0x233237e3289baa34bb147e972ebcb9516469c399fcc069fb88f9da2cc28276b5",
          "0x05c8f4f4ebd4a6e3c980d31674bfbe6323037f21b34ae5a4e80c2d4c24d60280",
          "0x0a7b1db13042d396ba05d818a319f25252bcf35ef3aeed91ee1f09b2590fc65b",
          "0x2a73b71f9b210cf5b14296572c9d32dbf156e2b086ff47dc5df542365a404ec0",
          "0x1ac9b0417abcc9a1935107e9ffc91dc3ec18f2c4dbe7f22976a760bb5c50c460",
          "0x12c0339ae08374823fabb076707ef479269f3e4d6cb104349015ee046dc93fc0",
          "0x0b7475b102a165ad7f5b18db4e1e704f52900aa3253baac68246682e56e9a28e",
          "0x037c2849e191ca3edb1c5e49f6e8b8917c843e379366f2ea32ab3aa88d7f8448",
          "0x05a6811f8556f014e92674661e217e9bd5206c5c93a07dc145fdb176a716346f",
          "0x29a795e7d98028946e947b75d54e9f044076e87a7b2883b47b675ef5f38bd66e",
          "0x20439a0c84b322eb45a3857afc18f5826e8c7382c8a1585c507be199981fd22f",
          "0x2e0ba8d94d9ecf4a94ec2050c7371ff1bb50f27799a84b6d4a2a6f2a0982c887",
          "0x143fd115ce08fb27ca38eb7cce822b4517822cd2109048d2e6d0ddcca17d71c8",
          "0x0c64cbecb1c734b857968dbbdcf813cdf8611659323dbcbfc84323623be9caf1",
          "0x028a305847c683f646fca925c163ff5ae74f348d62c2b670f1426cef9403da53",
          "0x2e4ef510ff0b6fda5fa940ab4c4380f26a6bcb64d89427b824d6755b5db9e30c",
          "0x0081c95bc43384e663d79270c956ce3b8925b4f6d033b078b96384f50579400e",
          "0x2ed5f0c91cbd9749187e2fade687e05ee2491b349c039a0bba8a9f4023a0bb38",
          "0x30509991f88da3504bbf374ed5aae2f03448a22c76234c8c990f01f33a735206",
          "0x1c3f20fd55409a53221b7c4d49a356b9f0a1119fb2067b41a7529094424ec6ad",
          "0x10b4e7f3ab5df003049514459b6e18eec46bb2213e8e131e170887b47ddcb96c",
          "0x2a1982979c3ff7f43ddd543d891c2abddd80f804c077d775039aa3502e43adef",
          "0x1c74ee64f15e1db6feddbead56d6d55dba431ebc396c9af95cad0f1315bd5c91",
          "0x07533ec850ba7f98eab9303cace01b4b9e4f2e8b82708cfa9c2fe45a0ae146a0",
          "0x21576b438e500449a151e4eeaf17b154285c68f42d42c1808a11abf3764c0750",
          "0x2f17c0559b8fe79608ad5ca193d62f10bce8384c815f0906743d6930836d4a9e",
          "0x2d477e3862d07708a79e8aae946170bc9775a4201318474ae665b0b1b7e2730e",
          "0x162f5243967064c390e095577984f291afba2266c38f5abcd89be0f5b2747eab",
          "0x2b4cb233ede9ba48264ecd2c8ae50d1ad7a8596a87f29f8a7777a70092393311",
          "0x2c8fbcb2dd8573dc1dbaf8f4622854776db2eece6d85c4cf4254e7c35e03b07a",
          "0x1d6f347725e4816af2ff453f0cd56b199e1b61e9f601e9ade5e88db870949da9",
          "0x204b0c397f4ebe71ebc2d8b3df5b913df9e6ac02b68d31324cd49af5c4565529",
          "0x0c4cb9dc3c4fd8174f1149b3c63c3c2f9ecb827cd7dc25534ff8fb75bc79c502",
          "0x174ad61a1448c899a25416474f4930301e5c49475279e0639a616ddc45bc7b54",
          "0x1a96177bcf4d8d89f759df4ec2f3cde2eaaa28c177cc0fa13a9816d49a38d2ef",
          "0x066d04b24331d71cd0ef8054bc60c4ff05202c126a233c1a8242ace360b8a30a",
          "0x2a4c4fc6ec0b0cf52195782871c6dd3b381cc65f72e02ad527037a62aa1bd804",
          "0x13ab2d136ccf37d447e9f2e14a7cedc95e727f8446f6d9d7e55afc01219fd649",
          "0x1121552fca26061619d24d843dc82769c1b04fcec26f55194c2e3e869acc6a9a",
          "0x00ef653322b13d6c889bc81715c37d77a6cd267d595c4a8909a5546c7c97cff1",
          "0x0e25483e45a665208b261d8ba74051e6400c776d652595d9845aca35d8a397d3",
          "0x29f536dcb9dd7682245264659e15d88e395ac3d4dde92d8c46448db979eeba89",
          "0x2a56ef9f2c53febadfda33575dbdbd885a124e2780bbea170e456baace0fa5be",
          "0x1c8361c78eb5cf5decfb7a2d17b5c409f2ae2999a46762e8ee416240a8cb9af1",
          "0x151aff5f38b20a0fc0473089aaf0206b83e8e68a764507bfd3d0ab4be74319c5",
          "0x04c6187e41ed881dc1b239c88f7f9d43a9f52fc8c8b6cdd1e76e47615b51f100",
          "0x13b37bd80f4d27fb10d84331f6fb6d534b81c61ed15776449e801b7ddc9c2967",
          "0x01a5c536273c2d9df578bfbd32c17b7a2ce3664c2a52032c9321ceb1c4e8a8e4",
          "0x2ab3561834ca73835ad05f5d7acb950b4a9a2c666b9726da832239065b7c3b02",
          "0x1d4d8ec291e720db200fe6d686c0d613acaf6af4e95d3bf69f7ed516a597b646",
          "0x041294d2cc484d228f5784fe7919fd2bb925351240a04b711514c9c80b65af1d",
          "0x154ac98e01708c611c4fa715991f004898f57939d126e392042971dd90e81fc6",
          "0x0b339d8acca7d4f83eedd84093aef51050b3684c88f8b0b04524563bc6ea4da4",
          "0x0955e49e6610c94254a4f84cfbab344598f0e71eaff4a7dd81ed95b50839c82e",
          "0x06746a6156eba54426b9e22206f15abca9a6f41e6f535c6f3525401ea0654626",
          "0x0f18f5a0ecd1423c496f3820c549c27838e5790e2bd0a196ac917c7ff32077fb",
          "0x04f6eeca1751f7308ac59eff5beb261e4bb563583ede7bc92a738223d6f76e13",
          "0x2b56973364c4c4f5c1a3ec4da3cdce038811eb116fb3e45bc1768d26fc0b3758",
          "0x123769dd49d5b054dcd76b89804b1bcb8e1392b385716a5d83feb65d437f29ef",
          "0x2147b424fc48c80a88ee52b91169aacea989f6446471150994257b2fb01c63e9",
          "0x0fdc1f58548b85701a6c5505ea332a29647e6f34ad4243c2ea54ad897cebe54d",
          "0x12373a8251fea004df68abcf0f7786d4bceff28c5dbbe0c3944f685cc0a0b1f2",
          "0x21e4f4ea5f35f85bad7ea52ff742c9e8a642756b6af44203dd8a1f35c1a90035",
          "0x16243916d69d2ca3dfb4722224d4c462b57366492f45e90d8a81934f1bc3b147",
          "0x1efbe46dd7a578b4f66f9adbc88b4378abc21566e1a0453ca13a4159cac04ac2",
          "0x07ea5e8537cf5dd08886020e23a7f387d468d5525be66f853b672cc96a88969a",
          "0x05a8c4f9968b8aa3b7b478a30f9a5b63650f19a75e7ce11ca9fe16c0b76c00bc",
          "0x20f057712cc21654fbfe59bd345e8dac3f7818c701b9c7882d9d57b72a32e83f",
          "0x04a12ededa9dfd689672f8c67fee31636dcd8e88d01d49019bd90b33eb33db69",
          "0x27e88d8c15f37dcee44f1e5425a51decbd136ce5091a6767e49ec9544ccd101a",
          "0x2feed17b84285ed9b8a5c8c5e95a41f66e096619a7703223176c41ee433de4d1",
          "0x1ed7cc76edf45c7c404241420f729cf394e5942911312a0d6972b8bd53aff2b8",
          "0x15742e99b9bfa323157ff8c586f5660eac6783476144cdcadf2874be45466b1a",
          "0x1aac285387f65e82c895fc6887ddf40577107454c6ec0317284f033f27d0c785",
          "0x25851c3c845d4790f9ddadbdb6057357832e2e7a49775f71ec75a96554d67c77",
          "0x15a5821565cc2ec2ce78457db197edf353b7ebba2c5523370ddccc3d9f146a67",
          "0x2411d57a4813b9980efa7e31a1db5966dcf64f36044277502f15485f28c71727",
          "0x002e6f8d6520cd4713e335b8c0b6d2e647e9a98e12f4cd2558828b5ef6cb4c9b",
          "0x2ff7bc8f4380cde997da00b616b0fcd1af8f0e91e2fe1ed7398834609e0315d2",
          "0x00b9831b948525595ee02724471bcd182e9521f6b7bb68f1e93be4febb0d3cbe",
          "0x0a2f53768b8ebf6a86913b0e57c04e011ca408648a4743a87d77adbf0c9c3512",
          "0x00248156142fd0373a479f91ff239e960f599ff7e94be69b7f2a290305e1198d",
          "0x171d5620b87bfb1328cf8c02ab3f0c9a397196aa6a542c2350eb512a2b2bcda9",
          "0x170a4f55536f7dc970087c7c10d6fad760c952172dd54dd99d1045e4ec34a808",
          "0x29aba33f799fe66c2ef3134aea04336ecc37e38c1cd211ba482eca17e2dbfae1",
          "0x1e9bc179a4fdd758fdd1bb1945088d47e70d114a03f6a0e8b5ba650369e64973",
          "0x1dd269799b660fad58f7f4892dfb0b5afeaad869a9c4b44f9c9e1c43bdaf8f09",
          "0x22cdbc8b70117ad1401181d02e15459e7ccd426fe869c7c95d1dd2cb0f24af38",
          "0x0ef042e454771c533a9f57a55c503fcefd3150f52ed94a7cd5ba93b9c7dacefd",
          "0x11609e06ad6c8fe2f287f3036037e8851318e8b08a0359a03b304ffca62e8284",
          "0x1166d9e554616dba9e753eea427c17b7fecd58c076dfe42708b08f5b783aa9af",
          "0x2de52989431a859593413026354413db177fbf4cd2ac0b56f855a888357ee466",
          "0x3006eb4ffc7a85819a6da492f3a8ac1df51aee5b17b8e89d74bf01cf5f71e9ad",
          "0x2af41fbb61ba8a80fdcf6fff9e3f6f422993fe8f0a4639f962344c8225145086",
          "0x119e684de476155fe5a6b41a8ebc85db8718ab27889e85e781b214bace4827c3",
          "0x1835b786e2e8925e188bea59ae363537b51248c23828f047cff784b97b3fd800",
          "0x28201a34c594dfa34d794996c6433a20d152bac2a7905c926c40e285ab32eeb6",
          "0x083efd7a27d1751094e80fefaf78b000864c82eb571187724a761f88c22cc4e7",
          "0x0b6f88a3577199526158e61ceea27be811c16df7774dd8519e079564f61fd13b",
          "0x0ec868e6d15e51d9644f66e1d6471a94589511ca00d29e1014390e6ee4254f5b",
          "0x2af33e3f866771271ac0c9b3ed2e1142ecd3e74b939cd40d00d937ab84c98591",
          "0x0b520211f904b5e7d09b5d961c6ace7734568c547dd6858b364ce5e47951f178",
          "0x0b2d722d0919a1aad8db58f10062a92ea0c56ac4270e822cca228620188a1d40",
          "0x1f790d4d7f8cf094d980ceb37c2453e957b54a9991ca38bbe0061d1ed6e562d4",
          "0x0171eb95dfbf7d1eaea97cd385f780150885c16235a2a6a8da92ceb01e504233",
          "0x0c2d0e3b5fd57549329bf6885da66b9b790b40defd2c8650762305381b168873",
          "0x1162fb28689c27154e5a8228b4e72b377cbcafa589e283c35d3803054407a18d",
          "0x2f1459b65dee441b64ad386a91e8310f282c5a92a89e19921623ef8249711bc0",
          "0x1e6ff3216b688c3d996d74367d5cd4c1bc489d46754eb712c243f70d1b53cfbb",
          "0x01ca8be73832b8d0681487d27d157802d741a6f36cdc2a0576881f9326478875",
          "0x1f7735706ffe9fc586f976d5bdf223dc680286080b10cea00b9b5de315f9650e",
          "0x2522b60f4ea3307640a0c2dce041fba921ac10a3d5f096ef4745ca838285f019",
          "0x23f0bee001b1029d5255075ddc957f833418cad4f52b6c3f8ce16c235572575b",
          "0x2bc1ae8b8ddbb81fcaac2d44555ed5685d142633e9df905f66d9401093082d59",
          "0x0f9406b8296564a37304507b8dba3ed162371273a07b1fc98011fcd6ad72205f",
          "0x2360a8eb0cc7defa67b72998de90714e17e75b174a52ee4acb126c8cd995f0a8",
          "0x15871a5cddead976804c803cbaef255eb4815a5e96df8b006dcbbc2767f88948",
          "0x193a56766998ee9e0a8652dd2f3b1da0362f4f54f72379544f957ccdeefb420f",
          "0x2a394a43934f86982f9be56ff4fab1703b2e63c8ad334834e4309805e777ae0f",
          "0x1859954cfeb8695f3e8b635dcb345192892cd11223443ba7b4166e8876c0d142",
          "0x04e1181763050e58013444dbcb99f1902b11bc25d90bbdca408d3819f4fed32b",
          "0x0fdb253dee83869d40c335ea64de8c5bb10eb82db08b5e8b1f5e5552bfd05f23",
          "0x058cbe8a9a5027bdaa4efb623adead6275f08686f1c08984a9d7c5bae9b4f1c0",
          "0x1382edce9971e186497eadb1aeb1f52b23b4b83bef023ab0d15228b4cceca59a",
          "0x03464990f045c6ee0819ca51fd11b0be7f61b8eb99f14b77e1e6634601d9e8b5",
          "0x23f7bfc8720dc296fff33b41f98ff83c6fcab4605db2eb5aaa5bc137aeb70a58",
          "0x0a59a158e3eec2117e6e94e7f0e9decf18c3ffd5e1531a9219636158bbaf62f2",
          "0x06ec54c80381c052b58bf23b312ffd3ce2c4eba065420af8f4c23ed0075fd07b",
          "0x118872dc832e0eb5476b56648e867ec8b09340f7a7bcb1b4962f0ff9ed1f9d01",
          "0x13d69fa127d834165ad5c7cba7ad59ed52e0b0f0e42d7fea95e1906b520921b1",
          "0x169a177f63ea681270b1c6877a73d21bde143942fb71dc55fd8a49f19f10c77b",
          "0x04ef51591c6ead97ef42f287adce40d93abeb032b922f66ffb7e9a5a7450544d",
          "0x256e175a1dc079390ecd7ca703fb2e3b19ec61805d4f03ced5f45ee6dd0f69ec",
          "0x30102d28636abd5fe5f2af412ff6004f75cc360d3205dd2da002813d3e2ceeb2",
          "0x10998e42dfcd3bbf1c0714bc73eb1bf40443a3fa99bef4a31fd31be182fcc792",
          "0x193edd8e9fcf3d7625fa7d24b598a1d89f3362eaf4d582efecad76f879e36860",
          "0x18168afd34f2d915d0368ce80b7b3347d1c7a561ce611425f2664d7aa51f0b5d",
          "0x29383c01ebd3b6ab0c017656ebe658b6a328ec77bc33626e29e2e95b33ea6111",
          "0x10646d2f2603de39a1f4ae5e7771a64a702db6e86fb76ab600bf573f9010c711",
          "0x0beb5e07d1b27145f575f1395a55bf132f90c25b40da7b3864d0242dcb1117fb",
          "0x16d685252078c133dc0d3ecad62b5c8830f95bb2e54b59abdffbf018d96fa336",
          "0x0a6abd1d833938f33c74154e0404b4b40a555bbbec21ddfafd672dd62047f01a",
          "0x1a679f5d36eb7b5c8ea12a4c2dedc8feb12dffeec450317270a6f19b34cf1860",
          "0x0980fb233bd456c23974d50e0ebfde4726a423eada4e8f6ffbc7592e3f1b93d6",
          "0x161b42232e61b84cbf1810af93a38fc0cece3d5628c9282003ebacb5c312c72b",
          "0x0ada10a90c7f0520950f7d47a60d5e6a493f09787f1564e5d09203db47de1a0b",
          "0x1a730d372310ba82320345a29ac4238ed3f07a8a2b4e121bb50ddb9af407f451",
          "0x2c8120f268ef054f817064c369dda7ea908377feaba5c4dffbda10ef58e8c556",
          "0x1c7c8824f758753fa57c00789c684217b930e95313bcb73e6e7b8649a4968f70",
          "0x2cd9ed31f5f8691c8e39e4077a74faa0f400ad8b491eb3f7b47b27fa3fd1cf77",
          "0x23ff4f9d46813457cf60d92f57618399a5e022ac321ca550854ae23918a22eea",
          "0x09945a5d147a4f66ceece6405dddd9d0af5a2c5103529407dff1ea58f180426d",
          "0x188d9c528025d4c2b67660c6b771b90f7c7da6eaa29d3f268a6dd223ec6fc630",
          "0x3050e37996596b7f81f68311431d8734dba7d926d3633595e0c0d8ddf4f0f47f",
          "0x15af1169396830a91600ca8102c35c426ceae5461e3f95d89d829518d30afd78",
          "0x1da6d09885432ea9a06d9f37f873d985dae933e351466b2904284da3320d8acc",
          "0x2796ea90d269af29f5f8acf33921124e4e4fad3dbe658945e546ee411ddaa9cb",
          "0x202d7dd1da0f6b4b0325c8b3307742f01e15612ec8e9304a7cb0319e01d32d60",
          "0x096d6790d05bb759156a952ba263d672a2d7f9c788f4c831a29dace4c0f8be5f",
          "0x054efa1f65b0fce283808965275d877b438da23ce5b13e1963798cb1447d25a4",
          "0x1b162f83d917e93edb3308c29802deb9d8aa690113b2e14864ccf6e18e4165f1",
          "0x21e5241e12564dd6fd9f1cdd2a0de39eedfefc1466cc568ec5ceb745a0506edc",
          "0x1cfb5662e8cf5ac9226a80ee17b36abecb73ab5f87e161927b4349e10e4bdf08",
          "0x0f21177e302a771bbae6d8d1ecb373b62c99af346220ac0129c53f666eb24100",
          "0x1671522374606992affb0dd7f71b12bec4236aede6290546bcef7e1f515c2320",
          "0x0fa3ec5b9488259c2eb4cf24501bfad9be2ec9e42c5cc8ccd419d2a692cad870",
          "0x193c0e04e0bd298357cb266c1506080ed36edce85c648cc085e8c57b1ab54bba",
          "0x102adf8ef74735a27e9128306dcbc3c99f6f7291cd406578ce14ea2adaba68f8",
          "0x0fe0af7858e49859e2a54d6f1ad945b1316aa24bfbdd23ae40a6d0cb70c3eab1",
          "0x216f6717bbc7dedb08536a2220843f4e2da5f1daa9ebdefde8a5ea7344798d22",
          "0x1da55cc900f0d21f4a3e694391918a1b3c23b2ac773c6b3ef88e2e4228325161"
        ],
        [
          "0x19b849f69450b06848da1d39bd5e4a4302bb86744edc26238b0878e269ed23e5",
          "0x265ddfe127dd51bd7239347b758f0a1320eb2cc7450acc1dad47f80c8dcf34d6",
          "0x199750ec472f1809e0f66a545e1e51624108ac845015c2aa3dfc36bab497d8aa",
          "0x157ff3fe65ac7208110f06a5f74302b14d743ea25067f0ffd032f787c7f1cdf8",
          "0x2e49c43c4569dd9c5fd35ac45fca33f10b15c590692f8beefe18f4896ac94902",
          "0x0e35fb89981890520d4aef2b6d6506c3cb2f0b6973c24fa82731345ffa2d1f1e",
          "0x251ad47cb15c4f1105f109ae5e944f1ba9d9e7806d667ffec6fe723002e0b996",
          "0x13da07dc64d428369873e97160234641f8beb56fdd05e5f3563fa39d9c22df4e",
          "0x0c009b84e650e6d23dc00c7dccef7483a553939689d350cd46e7b89055fd4738",
          "0x011f16b1c63a854f01992e3956f42d8b04eb650c6d535eb0203dec74befdca06",
          "0x0ed69e5e383a688f209d9a561daa79612f3f78d0467ad45485df07093f367549",
          "0x04dba94a7b0ce9e221acad41472b6bbe3aec507f5eb3d33f463672264c9f789b",
          "0x0a3f2637d840f3a16eb094271c9d237b6036757d4bb50bf7ce732ff1d4fa28e8",
          "0x259a666f129eea198f8a1c502fdb38fa39b1f075569564b6e54a485d1182323f",
          "0x28bf7459c9b2f4c6d8e7d06a4ee3a47f7745d4271038e5157a32fdf7ede0d6a1",
          "0x0a1ca941f057037526ea200f489be8d4c37c85bbcce6a2aeec91bd6941432447",
          "0x0c6f8f958be0e93053d7fd4fc54512855535ed1539f051dcb43a26fd926361cf",
          "0x123106a93cd17578d426e8128ac9d90aa9e8a00708e296e084dd57e69caaf811",
          "0x26e1ba52ad9285d97dd3ab52f8e840085e8fa83ff1e8f1877b074867cd2dee75",
          "0x1cb55cad7bd133de18a64c5c47b9c97cbe4d8b7bf9e095864471537e6a4ae2c5",
          "0x1dcd73e46acd8f8e0e2c7ce04bde7f6d2a53043d5060a41c7143f08e6e9055d0",
          "0x011003e32f6d9c66f5852f05474a4def0cda294a0eb4e9b9b12b9bb4512e5574",
          "0x2b1e809ac1d10ab29ad5f20d03a57dfebadfe5903f58bafed7c508dd2287ae8c",
          "0x2539de1785b735999fb4dac35ee17ed0ef995d05ab2fc5faeaa69ae87bcec0a5",
          "0x0c246c5a2ef8ee0126497f222b3e0a0ef4e1c3d41c86d46e43982cb11d77951d",
          "0x192089c4974f68e95408148f7c0632edbb09e6a6ad1a1c2f3f0305f5d03b527b",
          "0x1eae0ad8ab68b2f06a0ee36eeb0d0c058529097d91096b756d8fdc2fb5a60d85",
          "0x179190e5d0e22179e46f8282872abc88db6e2fdc0dee99e69768bd98c5d06bfb",
          "0x29bb9e2c9076732576e9a81c7ac4b83214528f7db00f31bf6cafe794a9b3cd1c",
          "0x225d394e42207599403efd0c2464a90d52652645882aac35b10e590e6e691e08",
          "0x064760623c25c8cf753d238055b444532be13557451c087de09efd454b23fd59",
          "0x10ba3a0e01df92e87f301c4b716d8a394d67f4bf42a75c10922910a78f6b5b87",
          "0x0e070bf53f8451b24f9c6e96b0c2a801cb511bc0c242eb9d361b77693f21471c",
          "0x1b94cd61b051b04dd39755ff93821a73ccd6cb11d2491d8aa7f921014de252fb",
          "0x1d7cb39bafb8c744e148787a2e70230f9d4e917d5713bb050487b5aa7d74070b",
          "0x2ec93189bd1ab4f69117d0fe980c80ff8785c2961829f701bb74ac1f303b17db",
          "0x2db366bfdd36d277a692bb825b86275beac404a19ae07a9082ea46bd83517926",
          "0x062100eb485db06269655cf186a68532985275428450359adc99cec6960711b8",
          "0x0761d33c66614aaa570e7f1e8244ca1120243f92fa59e4f900c567bf41f5a59b",
          "0x20fc411a114d13992c2705aa034e3f315d78608a0f7de4ccf7a72e494855ad0d",
          "0x25b5c004a4bdfcb5add9ec4e9ab219ba102c67e8b3effb5fc3a30f317250bc5a",
          "0x23b1822d278ed632a494e58f6df6f5ed038b186d8474155ad87e7dff62b37f4b",
          "0x22734b4c5c3f9493606c4ba9012499bf0f14d13bfcfcccaa16102a29cc2f69e0",
          "0x26c0c8fe09eb30b7e27a74dc33492347e5bdff409aa3610254413d3fad795ce5",
          "0x070dd0ccb6bd7bbae88eac03fa1fbb26196be3083a809829bbd626df348ccad9",
          "0x12b6595bdb329b6fb043ba78bb28c3bec2c0a6de46d8c5ad6067c4ebfd4250da",
          "0x248d97d7f76283d63bec30e7a5876c11c06fca9b275c671c5e33d95bb7e8d729",
          "0x1a306d439d463b0816fc6fd64cc939318b45eb759ddde4aa106d15d9bd9baaaa",
          "0x28a8f8372e3c38daced7c00421cb4621f4f1b54ddc27821b0d62d3d6ec7c56cf",
          "0x0094975717f9a8a8bb35152f24d43294071ce320c829f388bc852183e1e2ce7e",
          "0x04d5ee4c3aa78f7d80fde60d716480d3593f74d4f653ae83f4103246db2e8d65",
          "0x2a6cf5e9aa03d4336349ad6fb8ed2269c7bef54b8822cc76d08495c12efde187",
          "0x2304d31eaab960ba9274da43e19ddeb7f792180808fd6e43baae48d7efcba3f3",
          "0x03fd9ac865a4b2a6d5e7009785817249bff08a7e0726fcb4e1c11d39d199f0b0",
          "0x00b7258ded52bbda2248404d55ee5044798afc3a209193073f7954d4d63b0b64",
          "0x159f81ada0771799ec38fca2d4bf65ebb13d3a74f3298db36272c5ca65e92d9a",
          "0x1ef90e67437fbc8550237a75bc28e3bb9000130ea25f0c5471e144cf4264431f",
          "0x1e65f838515e5ff0196b49aa41a2d2568df739bc176b08ec95a79ed82932e30d",
          "0x2b1b045def3a166cec6ce768d079ba74b18c844e570e1f826575c1068c94c33f",
          "0x0832e5753ceb0ff6402543b1109229c165dc2d73bef715e3f1c6e07c168bb173",
          "0x02f614e9cedfb3dc6b762ae0a37d41bab1b841c2e8b6451bc5a8e3c390b6ad16",
          "0x0e2427d38bd46a60dd640b8e362cad967370ebb777bedff40f6a0be27e7ed705",
          "0x0493630b7c670b6deb7c84d414e7ce79049f0ec098c3c7c50768bbe29214a53a",
          "0x22ead100e8e482674decdab17066c5a26bb1515355d5461a3dc06cc85327cea9",
          "0x25b3e56e655b42cdaae2626ed2554d48583f1ae35626d04de5084e0b6d2a6f16",
          "0x1e32752ada8836ef5837a6cde8ff13dbb599c336349e4c584b4fdc0a0cf6f9d0",
          "0x2fa2a871c15a387cc50f68f6f3c3455b23c00995f05078f672a9864074d412e5",
          "0x2f569b8a9a4424c9278e1db7311e889f54ccbf10661bab7fcd18e7c7a7d83505",
          "0x044cb455110a8fdd531ade530234c518a7df93f7332ffd2144165374b246b43d",
          "0x227808de93906d5d420246157f2e42b191fe8c90adfe118178ddc723a5319025",
          "0x02fcca2934e046bc623adead873579865d03781ae090ad4a8579d2e7a6800355",
          "0x0ef915f0ac120b876abccceb344a1d36bad3f3c5ab91a8ddcbec2e060d8befac",
          "0x1797130f4b7a3e1777eb757bc6f287f6ab0fb85f6be63b09f3b16ef2b1405d38",
          "0x0a76225dc04170ae3306c85abab59e608c7f497c20156d4d36c668555decc6e5",
          "0x1fffb9ec1992d66ba1e77a7b93209af6f8fa76d48acb664796174b5326a31a5c",
          "0x25721c4fc15a3f2853b57c338fa538d85f8fbba6c6b9c6090611889b797b9c5f",
          "0x0c817fd42d5f7a41215e3d07ba197216adb4c3790705da95eb63b982bfcaf75a",
          "0x13abe3f5239915d39f7e13c2c24970b6df8cf86ce00a22002bc15866e52b5a96",
          "0x2106feea546224ea12ef7f39987a46c85c1bc3dc29bdbd7a92cd60acb4d391ce",
          "0x21ca859468a746b6aaa79474a37dab49f1ca5a28c748bc7157e1b3345bb0f959",
          "0x05ccd6255c1e6f0c5cf1f0df934194c62911d14d0321662a8f1a48999e34185b",
          "0x0f0e34a64b70a626e464d846674c4c8816c4fb267fe44fe6ea28678cb09490a4",
          "0x0558531a4e25470c6157794ca36d0e9647dbfcfe350d64838f5b1a8a2de0d4bf",
          "0x09d3dca9173ed2faceea125157683d18924cadad3f655a60b72f5864961f1455",
          "0x0328cbd54e8c0913493f866ed03d218bf23f92d68aaec48617d4c722e5bd4335",
          "0x2bf07216e2aff0a223a487b1a7094e07e79e7bcc9798c648ee3347dd5329d34b",
          "0x1daf345a58006b736499c583cb76c316d6f78ed6a6dffc82111e11a63fe412df",
          "0x176563472456aaa746b694c60e1823611ef39039b2edc7ff391e6f2293d2c404",
          "0x2ef1e0fad9f08e87a3bb5e47d7e33538ca964d2b7d1083d4fb0225035bd3f8db",
          "0x226c9b1af95babcf17b2b1f57c7310179c1803dec5ae8f0a1779ed36c817ae2a",
          "0x14bce3549cc3db7428126b4c3a15ae0ff8148c89f13fb35d35734eb5d4ad0def",
          "0x2debff156e276bb5742c3373f2635b48b8e923d301f372f8e550cfd4034212c7",
          "0x2d4083cf5a87f5b6fc2395b22e356b6441afe1b6b29c47add7d0432d1d4760c7",
          "0x0c225b7bcd04bf9c34b911262fdc9c1b91bf79a10c0184d89c317c53d7161c29",
          "0x03152169d4f3d06ec33a79bfac91a02c99aa0200db66d5aa7b835265f9c9c8f3",
          "0x0b61811a9210be78b05974587486d58bddc8f51bfdfebbb87afe8b7aa7d3199c",
          "0x203e000cad298daaf7eba6a5c5921878b8ae48acf7048f16046d637a533b6f78",
          "0x1a44bf0937c722d1376672b69f6c9655ba7ee386fda1112c0757143d1bfa9146",
          "0x0376b4fae08cb03d3500afec1a1f56acb8e0fde75a2106d7002f59c5611d4daa",
          "0x00780af2ca1cad6465a2171250fdfc32d6fc241d3214177f3d553ef363182185",
          "0x10774d9ab80c25bdeb808bedfd72a8d9b75dbe18d5221c87e9d857079bdc31d5",
          "0x10dc6e9c006ea38b04b1e03b4bd9490c0d03f98929ca1d7fb56821fd19d3b6e8",
          "0x00544b8338791518b2c7645a50392798b21f75bb60e3596170067d00141cac16",
          "0x222c01175718386f2e2e82eb122789e352e105a3b8fa852613bc534433ee428c",
          "0x2840d045e9bc22b259cfb8811b1e0f45b77f7bdb7f7e2b46151a1430f608e3c5",
          "0x062752f86eebe11a009c937e468c335b04554574c2990196508e01fa5860186b",
          "0x06041bdac48205ac87adb87c20a478a71c9950c12a80bc0a55a8e83eaaf04746",
          "0x04a533f236c422d1ff900a368949b0022c7a2ae092f308d82b1dcbbf51f5000d",
          "0x13e31d7a67232fd811d6a955b3d4f25dfe066d1e7dc33df04bde50a2b2d05b2a",
          "0x011c2683ae91eb4dfbc13d6357e8599a9279d1648ff2c95d2f79905bb13920f1",
          "0x0b0d219346b8574525b1a270e0b4cba5d56c928e3e2c2bd0a1ecaed015aaf6ae",
          "0x14abdec8db9c6dc970291ee638690209b65080781ef9fd13d84c7a726b5f1364",
          "0x1a0b70b4b26fdc28fcd32aa3d266478801eb12202ef47ced988d0376610be106",
          "0x278543721f96d1307b6943f9804e7fe56401deb2ef99c4d12704882e7278b607",
          "0x16eb59494a9776cf57866214dbd1473f3f0738a325638d8ba36535e011d58259",
          "0x2567a658a81ffb444f240088fa5524c69a9e53eeab6b7f8c41c3479dcf8c644a",
          "0x29aa1d7c151e9ad0a7ab39f1abd9cf77ab78e0215a5715a6b882ade840bb13d8",
          "0x15c091233e60efe0d4bbfce2b36415006a4f017f9a85388ce206b91f99f2c984",
          "0x16bd7d22ff858e5e0882c2c999558d77e7673ad5f1915f9feb679a8115f014cf",
          "0x02db50480a07be0eb2c2e13ed6ef4074c0182d9b668b8e08ffe6769250042025",
          "0x05e4a220e6a3bc9f7b6806ec9d6cdba186330ef2bf7adb4c13ba866343b73119",
          "0x1dda05ebc30170bc98cbf2a5ee3b50e8b5f70bc424d39fa4104d37f1cbcf7a42",
          "0x0184bef721888187f645b6fee3667f3c91da214414d89ba5cd301f22b0de8990",
          "0x1498a307e68900065f5e8276f62aef1c37414b84494e1577ad1a6d64341b78ec",
          "0x25f40f82b31dacc4f4939800b9d2c3eacef737b8fab1f864fe33548ad46bd49d",
          "0x09d317cc670251943f6f5862a30d2ea9e83056ce4907bfbbcb1ff31ce5bb9650",
          "0x2f77d77786d979b23ba4ce4a4c1b3bd0a41132cd467a86ab29b913b6cf3149d0",
          "0x0f53dafd535a9f4473dc266b6fccc6841bbd336963f254c152f89e785f729bbf",
          "0x25c1fd72e223045265c3a099e17526fa0e6976e1c00baf16de96de85deef2fa2",
          "0x2a902c8980c17faae368d385d52d16be41af95c84eaea3cf893e65d6ce4a8f62",
          "0x1ce1580a3452ecf302878c8976b82be96676dd114d1dc8d25527405762f83529",
          "0x24a6073f91addc33a49a1fa306df008801c5ec569609034d2fc50f7f0f4d0056",
          "0x25e52dbd6124530d9fc27fe306d71d4583e07ca554b5d1577f256c68b0be2b74",
          "0x23dffae3c423fa7a93468dbccfb029855974be4d0a7b29946796e5b6cd70f15d",
          "0x06342da370cc0d8c49b77594f6b027c480615d50be36243a99591bc9924ed6f5",
          "0x2754114281286546b75f09f115fc751b4778303d0405c1b4cc7df0d8e9f63925",
          "0x15c19e8534c5c1a8862c2bc1d119eddeabf214153833d7bdb59ee197f8187cf5",
          "0x265fe062766d08fab4c78d0d9ef3cabe366f3be0a821061679b4b3d2d77d5f3e",
          "0x13ccf689d67a3ec9f22cb7cd0ac3a327d377ac5cd0146f048debfd098d3ec7be",
          "0x17662f7456789739f81cd3974827a887d92a5e05bdf3fe6b9fbccca4524aaebd",
          "0x21b29c76329b31c8ef18631e515f7f2f82ca6a5cca70cee4e809fd624be7ad5d",
          "0x18137478382aadba441eb97fe27901989c06738165215319939eb17b01fa975c",
          "0x2bc07ea2bfad68e8dc724f5fef2b37c2d34f761935ffd3b739ceec4668f37e88",
          "0x2ddb2e376f54d64a563840480df993feb4173203c2bd94ad0e602077aef9a03e",
          "0x277eb50f2baa706106b41cb24c602609e8a20f8d72f613708adb25373596c3f7",
          "0x0d4de47e1aba34269d0c620904f01a56b33fc4b450c0db50bb7f87734c9a1fe5",
          "0x0b8442bfe9e4a1b4428673b6bd3eea6f9f445697058f134aae908d0279a29f0c",
          "0x11fe5b18fbbea1a86e06930cb89f7d4a26e186a65945e96574247fddb720f8f5",
          "0x224026f6dfaf71e24d25d8f6d9f90021df5b774dcad4d883170e4ad89c33a0d6",
          "0x0b2ca6a999fe6887e0704dad58d03465a96bc9e37d1091f61bc9f9c62bbeb824",
          "0x221b63d66f0b45f9d40c54053a28a06b1d0a4ce41d364797a1a7e0c96529f421",
          "0x30185c48b7b2f1d53d4120801b047d087493bce64d4d24aedce2f4836bb84ad4",
          "0x23f5d372a3f0e3cba989e223056227d3533356f0faa48f27f8267318632a61f0",
          "0x2716683b32c755fd1bf8235ea162b1f388e1e0090d06162e8e6dfbe4328f3e3b",
          "0x0977545836866fa204ca1d853ec0909e3d140770c80ac67dc930c69748d5d4bc",
          "0x1444e8f592bdbfd8025d91ab4982dd425f51682d31472b05e81c43c0f9434b31",
          "0x26e04b65e9ca8270beb74a1c5cb8fee8be3ffbfe583f7012a00f874e7718fbe3",
          "0x22a5c2fa860d11fe34ee47a5cd9f869800f48f4febe29ad6df69816fb1a914d2",
          "0x174b54d9907d8f5c6afd672a738f42737ec338f3a0964c629f7474dd44c5c8d7",
          "0x1db1db8aa45283f31168fa66694cf2808d2189b87c8c8143d56c871907b39b87",
          "0x1530bf0f46527e889030b8c7b7dfde126f65faf8cce0ab66387341d813d1bfd1",
          "0x0b73f613993229f59f01c1cec8760e9936ead9edc8f2814889330a2f2bade457",
          "0x29c25a22fe2164604552aaea377f448d587ab977fc8227787bd2dc0f36bcf41e",
          "0x2b30d53ed1759bfb8503da66c92cf4077abe82795dc272b377df57d77c875526",
          "0x12f6d703b5702aab7b7b7e69359d53a2756c08c85ede7227cf5f0a2916787cd2",
          "0x2520e18300afda3f61a40a0b8837293a55ad01071028d4841ffa9ac706364113",
          "0x1ec9daea860971ecdda8ed4f346fa967ac9bc59278277393c68f09fa03b8b95f",
          "0x0a99b3e178db2e2e432f5cd5bef8fe4483bf5cbf70ed407c08aae24b830ad725",
          "0x07cda9e63db6e39f086b89b601c2bbe407ee0abac3c817a1317abad7c5778492",
          "0x08c9c65a4f955e8952d571b191bb0adb49bd8290963203b35d48aab38f8fc3a3",
          "0x2737f8ce1d5a67b349590ddbfbd709ed9af54a2a3f2719d33801c9c17bdd9c9e",
          "0x1049a6c65ff019f0d28770072798e8b7909432bd0c129813a9f179ba627f7d6a",
          "0x18b4fe968732c462c0ea5a9beb27cecbde8868944fdf64ee60a5122361daeddb",
          "0x2ff2b6fd22df49d2440b2eaeeefa8c02a6f478cfcf11f1b2a4f7473483885d19",
          "0x2ec5f2f1928fe932e56c789b8f6bbcb3e8be4057cbd8dbd18a1b352f5cef42ff",
          "0x265a5eccd8b92975e33ad9f75bf3426d424a4c6a7794ee3f08c1d100378e545e",
          "0x2405eaa4c0bde1129d6242bb5ada0e68778e656cfcb366bf20517da1dfd4279c",
          "0x094c97d8c194c42e88018004cbbf2bc5fdb51955d8b2d66b76dd98a2dbf60417",
          "0x2c30d5f33bb32c5c22b9979a605bf64d508b705221e6a686330c9625c2afe0b8",
          "0x01a75666f6241f6825d01cc6dcb1622d4886ea583e87299e6aa2fc716fdb6cf5",
          "0x0a3290e8398113ea4d12ac091e87be7c6d359ab9a66979fcf47bf2e87d382fcb",
          "0x154ade9ca36e268dfeb38461425bb0d8c31219d8fa0dfc75ecd21bf69aa0cc74",
          "0x27aa8d3e25380c0b1b172d79c6f22eee99231ef5dc69d8dc13a4b5095d028772",
          "0x2cf4051e6cab48301a8b2e3bca6099d756bbdf485afa1f549d395bbcbd806461",
          "0x301e70f729f3c94b1d3f517ddff9f2015131feab8afa5eebb0843d7f84b23e71",
          "0x298beb64f812d25d8b4d9620347ab02332dc4cef113ae60d17a8d7a4c91f83bc",
          "0x1b362e72a5f847f84d03fd291c3c471ed1c14a15b221680acf11a3f02e46aa95",
          "0x0dc8a2146110c0b375432902999223d5aa1ef6e78e1e5ebcbc1d9ba41dc1c737",
          "0x0a48663b34ce5e1c05dc93092cb69778cb21729a72ddc03a08afa1eb922ff279",
          "0x0a87391fb1cd8cdf6096b64a82f9e95f0fe46f143b702d74545bb314881098ee",
          "0x1b5b2946f7c28975f0512ff8e6ca362f8826edd7ea9c29f382ba8a2a0892fd5d",
          "0x01001cf512ac241d47ebe2239219bc6a173a8bbcb8a5b987b4eac1f533315b6b",
          "0x2fd977c70f645db4f704fa7d7693da727ac093d3fb5f5febc72beb17d8358a32",
          "0x23c0039a3fab4ad3c2d7cc688164f39e761d5355c05444d99be763a97793a9c4",
          "0x19d43ee0c6081c052c9c0df6161eaac1aec356cf435888e79f27f22ff03fa25d",
          "0x2d9b10c2f2e7ac1afddccffd94a563028bf29b646d020830919f9d5ca1cefe59",
          "0x2457ca6c2f2aa30ec47e4aff5a66f5ce2799283e166fc81cdae2f2b9f83e4267",
          "0x0abc392fe85eda855820592445094022811ee8676ed6f0c3044dfb54a7c10b35",
          "0x19d2cc5ca549d1d40cebcd37f3ea54f31161ac3993acf3101d2c2bc30eac1eb0",
          "0x0f97ae3033ffa01608aafb26ae13cd393ee0e4ec041ba644a3d3ab546e98c9c8",
          "0x16dbc78fd28b7fb8260e404cf1d427a7fa15537ea4e168e88a166496e88cfeca",
          "0x240faf28f11499b916f085f73bc4f22eef8344e576f8ad3d1827820366d5e07b",
          "0x0a1bb075aa37ff0cfe6c8531e55e1770eaba808c8fdb6dbf46f8cab58d9ef1af",
          "0x2e47e15ea4a47ff1a6a853aaf3a644ca38d5b085ac1042fdc4a705a7ce089f4d",
          "0x166e5bf073378348860ca4a9c09d39e1673ab059935f4df35fb14528375772b6",
          "0x18b42d7ffdd2ea4faf235902f057a2740cacccd027233001ed10f96538f0916f",
          "0x089cb1b032238f5e4914788e3e3c7ead4fc368020b3ed38221deab1051c37702",
          "0x242acd3eb3a2f72baf7c7076dd165adf89f9339c7b971921d9e70863451dd8d1",
          "0x174fbb104a4ee302bf47f2bd82fce896eac9a068283f326474af860457245c3b",
          "0x17340e71d96f466d61f3058ce092c67d2891fb2bb318613f780c275fe1116c6b",
          "0x1e8e40ac853b7d42f00f2e383982d024f098b9f8fd455953a2fd380c4df7f6b2",
          "0x0529898dc0649907e1d4d5e284b8d1075198c55cad66e8a9bf40f92938e2e961",
          "0x2162754db0baa030bf7de5bb797364dce8c77aa017ee1d7bf65f21c4d4e5df8f",
          "0x12c7553698c4bf6f3ceb250ae00c58c2a9f9291efbde4c8421bef44741752ec6",
          "0x292643e3ba2026affcb8c5279313bd51a733c93353e9d9c79cb723136526508e",
          "0x00ccf13e0cb6f9d81d52951bea990bd5b6c07c5d98e66ff71db6e74d5b87d158",
          "0x185d1e20e23b0917dd654128cf2f3aaab6723873cb30fc22b0f86c15ab645b4b",
          "0x14c61c836d55d3df742bdf11c60efa186778e3de0f024c0f13fe53f8d8764e1f",
          "0x0f356841b3f556fce5dbe4680457691c2919e2af53008184d03ee1195d72449e",
          "0x1b8fd9ff39714e075df124f887bf40b383143374fd2080ba0c0a6b6e8fa5b3e8",
          "0x0e86a8c2009c140ca3f873924e2aaa14fc3c8ae04e9df0b3e9103418796f6024",
          "0x2e6c5e898f5547770e5462ad932fcdd2373fc43820ca2b16b0861421e79155c8",
          "0x05d797f1ab3647237c14f9d1df032bc9ff9fe1a0ecd377972ce5fd5a0c014604",
          "0x29a3110463a5aae76c3d152875981d0c1daf2dcd65519ef5ca8929851da8c008",
          "0x2974da7bc074322273c3a4b91c05354cdc71640a8bbd1f864b732f8163883314",
          "0x1ed0fb06699ba249b2a30621c05eb12ca29cb91aa082c8bfcce9c522889b47dc",
          "0x1c793ef0dcc51123654ff26d8d863feeae29e8c572eca912d80c8ae36e40fe9b",
          "0x1e6aac1c6d3dd3157956257d3d234ef18c91e82589a78169fbb4a8770977dc2f",
          "0x1a20ada7576234eee6273dd6fa98b25ed037748080a47d948fcda33256fb6bf5",
          "0x191033d6d85ceaa6fc7a9a23a6fd9996642d772045ece51335d49306728af96c",
          "0x006e5979da7e7ef53a825aa6fddc3abfc76f200b3740b8b232ef481f5d06297b",
          "0x0b0d7e69c651910bbef3e68d417e9fa0fbd57f596c8f29831eff8c0174cdb06d",
          "0x25caf5b0c1b93bc516435ec084e2ecd44ac46dbbb033c5112c4b20a25c9cdf9d",
          "0x12c1ea892cc31e0d9af8b796d9645872f7f77442d62fd4c8085b2f150f72472a",
          "0x16af29695157aba9b8bbe3afeb245feee5a929d9f928b9b81de6dadc78c32aae",
          "0x0136df457c80588dd687fb2f3be18691705b87ec5a4cfdc168d31084256b67dc",
          "0x1639a28c5b4c81166aea984fba6e71479e07b1efbc74434db95a285060e7b089",
          "0x03d62fbf82fd1d4313f8e650f587ec06816c28b700bdc50f7e232bd9b5ca9b76",
          "0x11aeeb527dc8ce44b4d14aaddca3cfe2f77a1e40fc6da97c249830de1edfde54",
          "0x13f9b9a41274129479c5e6138c6c8ee36a670e6bc68c7a49642b645807bfc824",
          "0x0e4772fa3d75179dc8484cd26c7c1f635ddeeed7a939440c506cae8b7ebcd15b",
          "0x1b39a00cbc81e427de4bdec58febe8d8b5971752067a612b39fc46a68c5d4db4",
          "0x2bedb66e1ad5a1d571e16e2953f48731f66463c2eb54a245444d1c0a3a25707e",
          "0x2cf0a09a55ca93af8abd068f06a7287fb08b193b608582a27379ce35da915dec",
          "0x2d1bd78fa90e77aa88830cabfef2f8d27d1a512050ba7db0753c8fb863efb387",
          "0x065610c6f4f92491f423d3071eb83539f7c0d49c1387062e630d7fd283dc3394",
          "0x2d933ff19217a5545013b12873452bebcc5f9969033f15ec642fb464bd607368",
          "0x1aa9d3fe4c644910f76b92b3e13b30d500dae5354e79508c3c49c8aa99e0258b",
          "0x027ef04869e482b1c748638c59111c6b27095fa773e1aca078cea1f1c8450bdd",
          "0x2b7d524c5172cbbb15db4e00668a8c449f67a2605d9ec03802e3fa136ad0b8fb",
          "0x0c7c382443c6aa787c8718d86747c7f74693ae25b1e55df13f7c3c1dd735db0f",
          "0x00b4567186bc3f7c62a7b56acf4f76207a1f43c2d30d0fe4a627dcdd9bd79078",
          "0x1e41fc29b825454fe6d61737fe08b47fb07fe739e4c1e61d0337490883db4fd5",
          "0x12507cd556b7bbcc72ee6dafc616584421e1af872d8c0e89002ae8d3ba0653b6",
          "0x13d437083553006bcef312e5e6f52a5d97eb36617ef36fe4d77d3e97f71cb5db",
          "0x163ec73251f85443687222487dda9a65467d90b22f0b38664686077c6a4486d5"
        ],
        [
          "0x0eb544fee2815dda7f53e29ccac98ed7d889bb4ebd47c3864f3c2bd81a6da891",
          "0x0554d736315b8662f02fdba7dd737fbca197aeb12ea64713ba733f28475128cb",
          "0x2f83b9df259b2b68bcd748056307c37754907df0c0fb0035f5087c58d5e8c2d4",
          "0x2ca70e2e8d7f39a12447ac83052451b461f15f8b41a75ef31915208f5aba9683",
          "0x1cb5f9319be6a45e91b04d7222271c94994196f12ed22c5d4ec719cb83ecfea9",
          "0x2eb4f99c69f966ebf8a42192de7ff61621c7bb47b93750c2b9ea08d18446c122",
          "0x224a28e5a35385a7c5198169e405d9ea0fc7da8b93ee13b6d5f7d099e299520e",
          "0x0f7411b465e600eed8afdd6afca49c3036f33ecbd9a0f97823796b993bbd82f7",
          "0x0f9d0d5aad2c9555a2be7150392d8d9819b208ae3370f99a0626f9ff5d90e4e3",
          "0x1e9a96dc8292bb596f52a59538d329229732b25259cf744b6a12d30702d6fba0",
          "0x08780514ccd90380887d578c45555e593cfe52eab4b945c6c2cd4d528fb3fe3c",
          "0x272498fced686c7ac8149fa3f73ef8c2ced64717e3556d5a59f119d629ccb5fc",
          "0x01ef8f9dd7c93aac4b7cb80930bd06eb45bd350aff585f10e3d0ef8a782ef7df",
          "0x045b9f59b6595e614dc08f222b469b138e886e64bf3c40aa97ea0ae754934d30",
          "0x0ac1e91c57d9da919fd6f59d2a40ff8ea3e41e24e247a387adf2584295d61c66",
          "0x028a1621a94054b0c7f9a421353cd89d0fd67061aee99979d12e68f04e62d134",
          "0x26b41802c071ea4c9632647ed059236e50c19c3fb3c96d09d02aae2a0dcd9dbc",
          "0x2fb5dda8072bb72cbaac2f63e468215e05c9de06758db6a94af34384aedb462b",
          "0x2212d3a0f5fccaf244ff3547fd823249ad8ab8ba2a18d383dd05c56ee894d850",
          "0x1b041ad5b2f0684258e4dfaeea09be56a3276fdb19f44c015cd0c7eed465e2e3",
          "0x0a01776bb22f4b6b8eccff33e76fded3144fb7e3ac14e846a91e64afb1500eff",
          "0x2b7b5674aaecc3cbf34d3f275066d549a4f33ae8c15cf827f7936440810ace43",
          "0x29d299b80cd4489e4cf75779ed54b48c60b042257b78fc004c1b803381a3bdfd",
          "0x1c46831d9a74529357641c219d721a74a427110032b5e1dd19dde30424be401e",
          "0x06d7626c953ccb72f37141dc34d578e036296c0657674f80739ae1d883e91269",
          "0x28ffddc86f18c136c54002748e0c410edc5c440a3022cd960f108c71cda2930c",
          "0x2e67f7ee5e4aa295f85deed09e400b17be67f1b7ed2ab6adb8ec0619f6fbc5e9",
          "0x26ce38fa636c90630e97f25114a79a2dca56859ef759e53ce7abf22c24e80f27",
          "0x2e6e07c3c95bf7c34dd7a01d00a7ffec42cb3d16a1f72721afacb4c4cfd35db1",
          "0x2aa74f7597f0c9f45f91d7961c3a54fb8890d276612e1246384b1470da24d8cc",
          "0x287d681a46a2faae2c7c090f668ab45b8a71313c1509183e2ec0ca639b7f73fe",
          "0x212bd19df812eaaef4a40600528f3d7da5d3106ff565aa3b11e29f3305e73c04",
          "0x1154f7cf519186bf1aafb14b350eb860f97fd9740926dab93809c28404713504",
          "0x1dff6385cb31f1c24637810a4bd1b16fbf5152905be36583da747e79661fc207",
          "0x0e444582d22b4e76c081d34c44c18e424011a34d5476252863ea3c606b551e5c",
          "0x0323c9e433ba66c4abab6638328f02f1815773e9c2846323ff72d3aab7e4eff8",
          "0x12746bbd71791059193bba79cdec448f25b8cf002740112db70f2c6876a9c29d",
          "0x1173b7d112c2a798fd9b9d3751842c75d466c837cf50d73efd049eb4438a2240",
          "0x13d51c1090a1ad4876d1e555d7fed13da8e5713b25026ebe5fdb4808703243da",
          "0x00874c1344a4ad51ff8dcb7cbd2d9743cb72743f0394efe7f4a58ebeb956baa1",
          "0x22df22131aaab85865ce236b07f244fa0eea48d3546e97d6a32a562074fef08f",
          "0x0bf964d2dbd25b908708b437a445fc3e984524a59101e6c18bf5eb05a919f155",
          "0x09b18d9b917a55bca302be1f7f181e0e640b9d73a9ab298c69b435b5fc502f32",
          "0x094f5534444fae36a4bfc1d5bf3dc05bfbbbc70a6365366dd6745a5067289e43",
          "0x2999bab1a5f25210519fa6622af53a15a3e240c0da5701cb784fddc0dc23f01f",
          "0x2f6898c07581f6371ca94db73710e88084301bce8a93d13669575a11b03a3d23",
          "0x07268eaaba08bc19ec16d7e1318a4740565deb1e8e5742f862174b1a6866fccb",
          "0x186279b003454db01339ff77113bc9eb62603e078e1c6689a6c9582c41a0529f",
          "0x18a3f736509197d6e4915bdd04d3e5ddb67e2cc5de9a22750768e5524737172c",
          "0x0a21fa1988cf38d877cc1e2ed24c808c725e2d4bcb2d3a007b5987b87085671d",
          "0x15b285cbe26c467f1faf5ef6a64625228328c184a2c43bc00b36a135e785fba2",
          "0x164b7062c4671cf08c08b8c3f9806d560b7775b7c902f5788cd28de3e779f161",
          "0x0890ba0819ac0a6f86d9865fe7e50ef361c61d3d43b6e65d7a24f651249baa70",
          "0x2fbea4d65d7ed425a42712e5a721e4eaa627ac5cb0eb878ccc2ee0aed543e922",
          "0x0492bf383c36fa55540303a3b536f85e7b70a58e854ab9b9103d7f5f379abaaa",
          "0x05e91fe944e944104e20251c565142d61d6185a9ce85675f6a969d56292dc24e",
          "0x12fe5c2029e4b33893d463cb041acad0995b9621e6e49c3b7e380a76e36e6c1c",
          "0x024154adf0255d47958f7723921474131f2629fadc89496906cd01dc6fa0784e",
          "0x18824a09e6afaf4a36ed2462a86bd0bad798815644f2bbde8813c13457a45550",
          "0x0c8b482dba0ad51be9f255de0c3dbddddf84a630af68d50bbb06983e3d5d58a5",
          "0x17325fd0ab635871363e0a1667d3b67c5a4fa67fcd6aaf86441392878fdb05e6",
          "0x050ae95f6d2f1519122f5af67b690f31e550773fa8d18bf71cc6d0e911fa402e",
          "0x0f0d139a0e81e943038cb288d62636764bbb6295f07569885771ec84edc50c40",
          "0x1c0f8697795689cdf70fd2f2c0f93d1a79b39ebc7a1b1c549dbbca7b8e747cd6",
          "0x2bd0f940ad936b796d2bc2e048bc979e49be23a4b13598f9fe536a16dc1d81e6",
          "0x27eb1be27c9c4e934778c09a0053337fa06ebb275e096d167ce54d1e96ee62cb",
          "0x2e4889d830a67e5a8f96bdd3155a7ca3284fbd307d1f71b0f151be62548e2aea",
          "0x193fe3db0ab47d3c5d2ec5e9c5bd9983c9891f2cadc165db6064bbe6fcc1e305",
          "0x2bf3086e96c36c7bce415907ad0c40ed6e9661c009679e4e37cb13027c83e525",
          "0x12f16e2de6d4ad46a98cdb697c6cad5dd5e7e413f741ccf29ff2ea486e59bb28",
          "0x2a72147d230119f3a0262e3653ddd19f33f3d5d6ec6c4bf0ad919b0343b92d2f",
          "0x21be0e2c4bfd64e56dc47f957806dc5f0a2d9bcc26412e2977df79acc10ba974",
          "0x0e2d7e1dc946d70b2749a3b54367b25a71b84fb911aa57ae137fd4b6c21b444a",
          "0x2667f7fb5a4fa1246170a745d8a4188cc31adb0eae3325dc9f3f07d4b92b3e2e",
          "0x2ccc6f431fb7400730a783b66064697a1550c12b08dfeb72830e107da78e3405",
          "0x08888a94fc5a2ca34f0201462420001fae6dbee9e8ca0c242ec50621e38e6e5d",
          "0x02977b34eeaa3cb6ad40dd42c9b6fdd7a0d2fbe753af88b36acfcd3ccbc53f2a",
          "0x120ccce13d28b75cfd6fb6c9ea13a648bfcfe0d7e6ff8e9610b5e9f971e16b9a",
          "0x09fad2269c4a8e93c81e1b9770ea098c92787a4575b2bd73a0bf2af32f86ff3c",
          "0x026091fd3d4c44d50a4b310e4ac6f0fa0debdb70775eeb8af630cffb60092d6f",
          "0x29404aa2ba565b77bb7fba9dfb6fc3212543cc56afad6afcb904fd2bca893994",
          "0x2749475c399aaf39d4e87c2548695b4ef1ffd86590e0827de7201351b7c883f9",
          "0x098c842322479f7239912b50424685cba2ebe2dc2e4da70ac7557dab65ffa222",
          "0x18cef581222b647e31238e57fead7d5c758ace14c93c4da40191d0c053b51936",
          "0x13177839c68a5080d4e746745e43711d3cbc0ca4a108f98d63b2aa681698de60",
          "0x020ca696f531e43ec088f56f4b74325626cc4df712c0e5f0a907d88e5f0deffd",
          "0x27230eede9cccfc9fa805a30fc548db693d13708c646841d16e028387c7ac022",
          "0x01645911c1198b01d64fde34a342a1786497c05969a015439057d2fe75bb281c",
          "0x2c323fe16481bf496e439c88341ce25f198971e14487056cfdca4a451a5d8643",
          "0x0fc082dfe70728e8450bd2074c3e22e1b022c124d3bffe8b5af88ae6db5085c8",
          "0x2052c174800db209d8cdca568dcc25b3be9642116ac4c77efe8a488b423521ee",
          "0x28e420e10df2fbb5af96d621d55423190be351ce8129065a8dd9fd05b3ece9c0",
          "0x25698ca5e24a1b799f783c4462a24db655d6ae1bdacd1cb549d6e0bc3ae5069a",
          "0x160a9981a5c89a57cf8ffbfa57d51049a297b61074422ac134d9b857d6984d35",
          "0x21c91a39e145c3bc34d9b694b843f3bf8b7cebf59ddbb0a064642b069997f3d4",
          "0x1ac8d80dcd5ee876d2b09345ef112345d6eaa029d93f03b6d10975461e41734c",
          "0x0ab3e6ad0ecf8b8e7c1662a4174c52225d822895e2755544b8dbcea5657ce02c",
          "0x1c675182512620ae27e3b0b917b3a21ca52ef3ef5909b4e1c5b2237cbdab3377",
          "0x2cdbc998dfd7affd3d948d0c85bad2e2e37a4a3e07a7d75d0c8a9092ac2bed45",
          "0x23b584a56e2117b0774bf67cc0dee33324337350309dff833e491a133bb63b2e",
          "0x1e9e2b310f60ba9f8cb73030a3c9d2a10d133bc6ba4ec1152f3d20de1465e9a5",
          "0x0e01e365ba5b3031abc3e720140ae746c9ab5dab987520c460bcd4f1fa5b22db",
          "0x040884cdcfc64bfc7b7127340498d5c443382011b61c9a4b1387d85bc1264e68",
          "0x190b1ee1205eb9500c74a3998f2bea36353f1724d6067ed0a0a17de311ef9668",
          "0x1647c72aec6c4388d04f52fc23cd9c08c1dfcf65ce61e165fc28d1f832bd3b2c",
          "0x2430006346a0145f799880cc4c8736269f5494d89fb48b02842e595b71e4541d",
          "0x177b9a08343917e1365107a3da3ae7f69d853902bb16bacb3221850252b757af",
          "0x04a420e642b11ae94e58862a68f5e32609cd53d0ae29423439b11d04666df4f8",
          "0x25d0e0f739fb39fc105a88fab0afd810de2461858e956ccccdfabeddb6a25c8f",
          "0x04476d91b7eff2fd85905cbf58651edc320cb15610eaed452c4d4ffa0c740a27",
          "0x1090c0b68b3d7d7b8bc9ca2419eb8dea1c28f6d5e1250cb5e9780fd9ca286fae",
          "0x25393ce3b9256d50448a725c5c7cd5ad376f2d435855c10ebf2899cb5c6617be",
          "0x25931c0c7371f4f1fc862f306e6e5830ed824388d6b9342697d144f0fab46630",
          "0x2396cb501700bbe6c82aad51b0fb79cf8a4d353185d5808203f73f22afbf62f6",
          "0x26a363483348b58954ea748a7129a7b0a3dc9068c3cca7b5b3f0ce03b8724884",
          "0x27ca107ca204f2a18d6f1535b92c5478c99b893334215f6ba7a0e5b45fcd6897",
          "0x26da28fc097ed77ce4662bde326b2cceac15f7301178581d8d2d02b3b2d91056",
          "0x056ab351691d8bb3703e3055070ac9cc655774c1bb35d57572971ba56ee0cb89",
          "0x2638b57f23b754aec76d109a2f481aa3c22547a11ffc50152d729af632376a90",
          "0x304754bb8c57d60732f492c2605184fdc33e46a532bdec80ea7bc5519ede7cef",
          "0x00d1727f8457ee03514f155b5806cbf748ec6857fc554010752ac93a9b7619ac",
          "0x00ee1f3c66fbc05c43ba295a303c72fab5bca86805ec9419c588e50947761fa3",
          "0x0afafadcf5b4dd4a4a76b5a1d82415fd10a19fbcfc59078c61f9297eb675d972",
          "0x0b2449f39746085e86ce45e8eed108ee65a234835a0a6a5ea8996d124dd04d0a",
          "0x206b0ce2f1b2c5b7c9f37b0045227095f6c6f071ec3bdda76a7ddf4823dd5dd6",
          "0x0feba4fb87834c7cb696e67433628cd6caffc3a4ef20fea852c7e1029459409c",
          "0x254dbfac74c49b0b8926752e084e02513b06f1315e6d70e18173e972336e55d3",
          "0x0addb1372cee4e164655168c367559e19606c5bd17910aeb37719edfa0ca8762",
          "0x26b25b7e257f3e97c799024fb019f65c6ca4d8d81b1ae16221a589d68831d759",
          "0x090995b79acec240413b8d4c658787e5a4657b9ab00bdb5b1960b1059e113ba3",
          "0x08dbdc2e21ef11f2c57299687843cea3eb0d8e40e99131f42974178d44f73b7b",
          "0x09e8aba671481197679faf752a0f78e342fe9c491596ab6758f170939785179f",
          "0x1deb05180e833e45659052a7ebaf816c7efd12a7f9eec94b7bc7c683f1363d5c",
          "0x19a70ec6bdfc9098a926efbcc04aa9ee248997e8b2c24af335fd6523e5250879",
          "0x21d773660adafb8a879986f9aab4890566353a3777d8a3f1eb93abe10bbf1f64",
          "0x09f1890f72e9dc713e20ba637b89d5d397a6b01fcd667347f6f46617841c3901",
          "0x05af459361eb454d2a300c61e446998d48fa1f897bf219d608c2145c33b111c3",
          "0x0fa1a1d6829f0345664a66dc75a657335f336f15f340756cfa12fc850cc8b513",
          "0x02e47a35bcc0c3a0bda0b1c0307ad543f4280fcf87f636f853655cf97a628bb0",
          "0x14f773e9834c6bdeb8f90e78bf4c24b7203411460112491036621895204d0f12",
          "0x102d98cf502ed843255cf19d29bc7d8e642abe7cfd639992ffb091962fc8f7cc",
          "0x043dd5f4aa5a76dd4c47f6c65da7ca2320d4c73ad3294738cba686a7e91373c2",
          "0x21833819c3337194a6c0d29a48d4f2676f0e7c79743a306f4cfdb2b26bd11efa",
          "0x0f281925cf5ee649b474a6819d116ca3eb4eca246c311ecadc53262a3cff2b53",
          "0x0d3e2477a7b10beb44709c7746d6824edf625dd60504d5dc93ce662f15c238d6",
          "0x2cd7f641bedbf66956ff8a01be9cde35d80f80ab51e73b49acbfc3eff5aefc44",
          "0x29e95b492bf2f95f4d09380f98b74e389149d24045811d7a86dd861310463cf8",
          "0x22da66bc62e8f011266efca86a6c810f9ae4c51af6ffeb57f8b3c50df83cc13e",
          "0x0fe6d30de7a82d163023491794f4aca3220db79e8129df3643072d841925554a",
          "0x0050e842a1299909123c46eff185c23ad312d03fef1adfecc7e07ecb298fd67f",
          "0x2130a3a7b3221222be34cc53a42d7733666f9ddf714ed7c5885cbbdb63108c21",
          "0x2df9ee294edf99e3d8d5883fe0566c24aa66731f34a93280e1d328e67b33c9fa",
          "0x1bf7d6e489ad8c0cf26eb68cc21ff54158132396dc250aeba4b6fc5fc3372762",
          "0x0c602fa155be958761eaf739617ab136cf7b807728bf7fe35d4778d311780e54",
          "0x2e50e2c5b36aa20532407d86b8d22d7d5154080a24972faeb63faf0121ed7f21",
          "0x17c2510982a7b5825710d6290ec4f782f674995ee8409b42b459123b180332e1",
          "0x0b0d52f03c8af7276803ecf2465b885b21337b538eabd2f6b2ab255f376b42a8",
          "0x0f5633df1972b9455953d88a63f80647a9ac77c6c0f85d4561972dd8fab8bd14",
          "0x0ebf7ad29ca13804e1422e939681155124780ff43e76e929035498130a7f1572",
          "0x1aff13c81bda47e80b02962173bba343e18f94bee27c8a57661b1103a720ffe2",
          "0x210449dbf5cf3061da2465be85505862d3f31de1a3b58ff35713be57efac6c07",
          "0x088230c2794e50c57d75cd6d3c7b9dbe19d1e2f1d3001044b93ad1c3ee629817",
          "0x1c408c256490b0a1da08dc464138dfc78cce9a9e16c7705617a4d6dbb20e7e3a",
          "0x074517e081eb4c1f22d1771200fb07658f7c77654d58440490dd6f557e9e3903",
          "0x02d04e9c21df1dbd88524bdb203691b4cee5530559d6cf0fa05adf61e12fdcbf",
          "0x2eb7a011b8bce91082e13ebd75de3b58eb9b4650dae9f11aa81db32cf1b67b13",
          "0x2efda77ed35f4af0299f75d6e8a849b54d2ac6bf95368304e6030c18f0cf17b5",
          "0x09199dcafd50ce642eddbeda65206d4f61a73d10852b8114c51b2440192ae064",
          "0x268c5cfc446d399c4dd319db666a75b5cb655d8c1797e9fa76181cb4216e1562",
          "0x2303a652c949071826b0e9a36c80578697b44e912cce6687012854eda11a18dc",
          "0x27c53563b12a6ee2c3f041f31dc45922bc5353eb110868d237073f4efb35fbdf",
          "0x1201a87eaf4ae618f02bd82d0a5109049969b5248cfe90f42c278f22615d2b0e",
          "0x2c43169439fcd69ead8214997bb069becafcb1ba2c51e5706cb4b43dab2a443d",
          "0x0683597315359040ea03c45d6984c6894f46cbb36d702e3c4fb9847e6304d944",
          "0x03545706706eab36afb93b128febd16fb0425e158314197b77795ad3a798d183",
          "0x1a33c254ec117619d35f1fc051b31728740bed23a6a37870edb393b71a0c0e6b",
          "0x1ffe6968a4470cd567b0c002281caf996e88f71e759b87e6f338e517f1690c78",
          "0x0fd66e03ba8808ffecb059c899fd80f4140ddd5d2a5c4483107f4e02e355b393",
          "0x263ab69f13b966f8197394552906b17e6c8617a7bdd5d74a7be3396b7fe013ab",
          "0x16a425e47d1110625054d5a165de413e3bd87d5aa3958fdd6eb7e03e39ba4046",
          "0x2dc510a4719ec10cad752f03c673f0e253cc31d13e39e909fcc5f73af9138d9a",
          "0x24df8e8d856c5b5e1bd1cad23d07dda3423c5179329b7a82cb4aa709a94576e5",
          "0x2bcc94ff4fc3c76f3cd5c68915a042e87628249a01b09561bdf24a6cdce5620f",
          "0x076c1e88dc540c8d8de54e343df7c429d3295f52c38cffe6b48be86852da97df",
          "0x09b5f209a451ac431c051fb12d9a5e4fe40ee1601120947da990fb8e12cb46e1",
          "0x205f17b0d8729e2eaa88d6a44135a6ab64e9424f55b0f1ea0683af75eb677c07",
          "0x281c5c688836f6cf912638c38be046cd091681f0a41761720cdd1edf9f237029",
          "0x1a053e6878e900f45f4d67448c471cf3009a44e7a02ea50e4afa44f2592621f5",
          "0x100dc7d426debe3007fb7ceac84e4f5468efcb897e7bbee981742839d59e064c",
          "0x17022672a016a957bb87e2cfadc8b75fb28905bdb62c82c80b1cb31b411e49c8",
          "0x1086db7e2760fc8b71053a87ebe151239fb8b547182b170de0c27203f954f4d2",
          "0x15384fe39d73b63302460ae4c2942fac2b41fb65a185536fb85dd24fd7584064",
          "0x2ebb599fe9136d424bf4abc5342c6c7447b1a853205fcfb5519e551357709008",
          "0x1b4b5e87cfb9262cfec3c0f0542e4c5a4cf278292b4ce3eed996fac6f4d37288",
          "0x2465053ae50b6885801f3f82e302cafbbb4a7581bb4fba60b637febe659e5057",
          "0x114f32edcdea09cd095c5bb5d38f1b97da9f05e18b3708bf6e0ab9d3d54859ef",
          "0x2bc70dfeb2baab2f6b387cd77be779ac2e5e5519f3d18123ee28d8c2543c7148",
          "0x01c9bf7a203ce22b775e3a61ad7e77b6a78348b9f6ec68a412e49bfe32c05415",
          "0x0514b0fe5909ea887bedb0295fbbcec355cfb575ff6a97cd9f4ad00ccb57ee9b",
          "0x267c76ec81934cc81a132a8b058910a12092520b12a201af03e3202d7b6c1b7e",
          "0x29170e3322b3d8d5c78c84babbb470adf1622493ce83e95cfb151cf757bde5d6",
          "0x019f6a8124b19e33af33e5d3873f9c335c6f09a45486cab536dd596ca41d9519",
          "0x1904aa4d6908544a8b348e9db1981c27009ed8ea171518ae5405d036242b60e9",
          "0x26f17873949bc679f7f043956694e422b3cee1de9dd6f6473b932a476455ff1a",
          "0x1ac668f612b8243c193b33720b8aa54040c476031197131ebdcac9b18bc48f75",
          "0x0996d961a75c0d07196dae45bf624766ccfbf8555be9796da52f81568ef0663d",
          "0x030c97e1b8cad1d4fd50d1b4383fbe6674d171f99c63febb5425b395c24fc819",
          "0x06e3ad6a46900e2d3953370255b68f89b3e523f1fe502642ee226f2d8bd0848f",
          "0x1d6b3755331cd0216b6880e42f9880f565cb94b0e0455153a329890588cc916e",
          "0x28e4dcba4b96f12a59b041535e730ac8c35189dc0b85ac033dd38c08bae531f2",
          "0x08b6086046a835508ccf484f2974b6a6b0712a476260376c7a3b3e4bc4a47a14",
          "0x162cd2ca7fe3b5f1444bcec97812019bb6fd85fba6a0536a89643e15b9bb3b52",
          "0x28f1e03baaea9bbc05af5b11937e4f5cb5c9a9c1192063d1998c01c64d483a76",
          "0x1bdb062778d7c15da395af2734c25faa0127d2aab4aa71366031a0bb6791ce10",
          "0x2375839502e09890cb2914e829627e0e0fc98870b2324a8b50329ebdd24749cb",
          "0x1fa8662fbcb61fb3ad7c55668dc9423a332dc87cfb2df456e92d33611ed7bb50",
          "0x1e4fad2dd6b0a6f1f8707f721716c8a446e2fb2c47a5138f3f7f9736079d7694",
          "0x211256d16c7269fd6df6f5fcdd1fa788ba3bd050059f53d261b0f5f13731ffe7",
          "0x2e49084b336eceaa4f8e2a2e6af08318f42060e574dda341f4a1079b12bcc5a5",
          "0x0ce19f54cdc39f7f3bf35192ac6808211aecea08dfe14cab758d25891fb00bb9",
          "0x0011c5d56c390e893cc394221261d8748dc60451e4ae4e1c84a8468bab2c14cb",
          "0x17d79ff06b63ac2a8a9e05ee6af3dbb7ca60e17bfa39b47514a8cd8051579b4c",
          "0x19a7d3a446cb5393dc74560093592b06b1a8b35cd6416a2ecab00173639015fa",
          "0x030c00a0933dcdba2a808b2e1b9282f331f04596d8928da7aa6c3c97237037a6",
          "0x16bcb447ce2d50f3ae25ad080695382e935d2d00184c4acc9370be8aab64139c",
          "0x12341b46b0150aa25ea4ec8715312997e62124f37cab7b6d39255b7cd66feb1d",
          "0x0e86d13917f44050b72a97b2bf610c84002fc28e296d1044dc89212db6a49ff4",
          "0x08e6eb4089d37d66d357e00b53d7f30d1052a181f8f2eb14d059025b110c7262",
          "0x2ea123856245f6c84738d15dd1481a0c0415ccb351a1e0cee10c48ce97ca7b18",
          "0x2dca72b2ebcab8c23446e00330b163104195789025413abf664db0f9c84dfa6f",
          "0x06ff9ed50d327e8463329f585ec924b3f2f6b4235f036fa4c64a26cbd42b6a6b",
          "0x246a10b7e3e0089947f7c9bda3d54df8e2a60e0cca84ea2ac630a4535afbf730",
          "0x22a63501c5f04b9018719ed99d700ee52f846a715ae67ad75c96b39d688b6691",
          "0x2f4c50477f7fd9c671799ac5d2e224cdb9164f58351d8aa140ec07e514fae937",
          "0x10ffb7aad1f51c7d13b17f4d876d9a1e38f0ba8a4a23d4b50cda32cad851567e",
          "0x0e9cefddc3c2d3bea4d39722532d5420784027352187e7af1a056935c35803ae",
          "0x07af84a4d3141e7ac23352e6dc6ea4afa1656f96a33c8978a3e83bdd4ba62b41",
          "0x2d9e31a10aebc761f8de00d14b1e566d1a39323d6e89b638e940f3ec8a22c3c5",
          "0x27f19a6532e66b5333db1afd592f66f1d36034b314dad8447656747be27e64c7",
          "0x0058fa3c8454d63354b2024c3b4a577a180ed99f8f3155cd7e4d617d47d07ffd",
          "0x041627b6715b780967957c080699343eb0414a205d3a175d708964956816a5d5",
          "0x006ac49dd9253edc7f632e57b958ccecd98201471cf1f66589888f12b727c52d",
          "0x0131adffd8bd7254b1d8c3616bbe3386ec0c9c0d6d25a9a4ec46a6bf18301398",
          "0x1c4a6f52c9fccf7a4138e413ef62a28377977ad7e25e49a3cf030e1cd8f9f5b6",
          "0x03f2a6be51ec677f946551b3860ea479fee048ae2078aeb7d1f7958d2c2645f6",
          "0x2da770aad2c2eb09391a0cb78ef3a9648a1372d8543119564d7376396b8ddc62",
          "0x15278463665f74cddc1802febfab02cec9d45fe866c359c738062afb75d64a03",
          "0x12fe278aa36544eac9731027090518d434e38ea966a08a6f8d580638ac54c773",
          "0x149b9c802182558a4c45d119d3f4cc7fd8587604ca4f0d6e21b06ff30b6a23b6",
          "0x0812e7b4d847bc8517d19319772f3c9855e044fd60dbac9a0adc4959b691dfe4",
          "0x02ed8d8ddeafe3d9d8df7f28a0bfaa7f555813c7e7503aea2a66973703a0c61b",
          "0x0ebd073ba0537b514deb6029f921029e55e5e4d9a03d6b6ba1304038662d4db8",
          "0x15c754d5b14b2c4205c6ba8d2ccd028255b3e792c6afa08b44ee75b62eff9f59",
          "0x169515c89ac5479db0ed8fa6fa311b391cc1235270f4cbc5c29e7cbc30e8732a",
          "0x25479fbfb3a68f982388f2621001101608bdc29f6ff037696d9161f5cd9a4fef",
          "0x14475c4bd520451f3c852cb0311a578ca7f8e6e972182196ce09486e94be6071",
          "0x045a691066cc66bec9baf2798833a1dfd3a847502aec8d5f5c4e73363d097799",
          "0x26029c0c267c799fb833ac8a11e3a3f0147a8ca037221b90013b8bcb37eba683",
          "0x163facb34ff572fbf7c946969c1c260873ce12a6a94a3e45b8101d5b948d1641",
          "0x2c714e96e1913b351d969320cc69d5ec13e06a6275e58688af8ee00c4240ee28",
          "0x1c1661e2a7ce74b75aba84665ecd2bf9ddd6268f06debfe2d52b804eff1d5fa6",
          "0x06a69ae795ee9bfe5e5af3e6619a47d26635b34c2a0889fea8c3c068b7dc2c71",
          "0x113d58535d892115c5d28b4c19a3609374dbdbadf54195c731416c85d731d46a",
          "0x2ab89102e2b8d5e638ff97d761da6042e534f1ff47f7917a2ca1a74063b46101",
          "0x03c11ca79e41fdfe962730c45e699546349031893da2b4fd39804fd6a15ad1b3",
          "0x27096c672621403888014ddbbbfc9da1f7f67b4d4cfe846c6adf040faaf2669c",
          "0x2de32ad15497aef4d504d4deeb53b13c66db790ce486130caa9dc2b57ef5be0d",
          "0x0dc108f2b0a280d2fd5d341310722a2d28c738dddaec9f3d255754448eefd001",
          "0x1869f3b763fe8164c96858a1bb9efad5bcdc3eebc409be7c7d34ca50365d832f",
          "0x022ed3a2d9ff31cbf82559fe6a911843b616945e16a568d48c6d33767129682d",
          "0x2155d6005210169e3944ed1365bd0e7292fca1f27c19c26610c6aec077d026bc",
          "0x0de1ba7a562a8f7acae93263f5f1b4bbec0c0556c91af3db3ea5928c8caeae85",
          "0x05dbb4406024beabcfce5bf46ec7da38126f740bce8d637b6351dfa7da902563",
          "0x05d4149baac413bed4d8dc8ad778d32c00e789e3fcd72dccc97e5427a368fd5e",
          "0x01cdf8b452d97c2b9be5046e7397e76ff0b6802fa941c7879212e22172c27b2e",
          "0x1fc6a71867027f56af8085ff81adce33c4d7c5015eced8c71b0a22279d46c07c",
          "0x1040bef4c642d0345d4d59a5a7a3a42ba9e185b75306d9c3568e0fda96aaafc2",
          "0x16b79c3a6bf316e0ff2c91b289334a4d2b21e95676431918a8081475ab8fad0d",
          "0x20dff1bc30f6db6b434b3a1387e3c8c6a34070e52b601fc13cbe1cdcd59f474e",
          "0x0212ac2ab7a6eaaec254955030a970f8062dd4171a726a8bdfb7fd8512ae060d",
          "0x2f29377491474442869a109c9215637cb02dc03134f0044213c8119f6996ae09",
          "0x0984ca6a5f9185d525ec93c33fea603273be9f3866aa284c5837d9f32d814bfa",
          "0x0d080a6b6b3b60700d299bd6fa81220de491361c8a6bd19ceb0ee9294b24f028",
          "0x0e65cd99e84b052f6789530638cb0ad821acc85b6400264dce929ed7c85a4544",
          "0x2e208875bc7ac1224808f72c716cd05ee30e3d20380ff6a655975da12736920b",
          "0x2989f3ae477c2fd376a0b0ff3d7dfac1ae2e3b894afd29f64a60d1aa8592bad5",
          "0x11361ce544e941379222d101e6fac0ce918106a463290a3e3a74c3cea7189459",
          "0x1e8d014b86cb5a7da539e10c173f6a75d122a822b8fb366c34c8bd05a2061438",
          "0x173f65adec8deee27ba812ad29558e23a0c2324167ef6c91212ee2c28ee98733",
          "0x01c36daaf9f01f1bafee8bd0c779ac3e5da5df7ad45499d0991bd695310eddd9",
          "0x1353acb08c05adb4aa9ab1c485bb85fff277d1a3f2fc89944a6f5741f381e562",
          "0x2e5abd2537207cad1860e71ea1188ee4009d33deb4f93aeb20f1c87a3b064d34",
          "0x191d5c5edaef42d3d02eedbb7ab8562513deb4eb34913a13421726ba8f69455c",
          "0x11d7f8d1f269264282a263fea6d7599d82a04c74c127de9dee7939dd2dcd089e",
          "0x04218fde366829ed90f79ad5e67997973445cb4cd6bc6f951bad085286cac971",
          "0x0070772f7cf52453048397ca5f47a202027b73b489301c3227b71c730d76d6dd",
          "0x038a389baef5d9a7c865b065687a1d9b67681a98cd051634c1dc04dbe3d2b861",
          "0x09a5eefab8b36a80cda446b2b4b59ccd0f39d00966a50beaf19860789015a6e5",
          "0x01b588848b8b47c8b969c145109b4b583d9ec99edfacb7489d16212c7584cd8c",
          "0x0b846e4a390e560f6e1af6dfc3341419545e5abfa323d817fed91e30d42954a6",
          "0x23a6679c7d9adb660d43a02ddb900040eb1513bc394fc4f985cabfe85ce72fe3",
          "0x2e0374a699197e343e5caa35f1351e9f4c3402fb7c85ecccf72f31d6fe089254",
          "0x0752cd899e52dc4d7f7a08af4cde3ff64b8cc0b1176bb9ec37d41913a7a27b48",
          "0x068f8813127299dac349a2b6d57397a50275142b664b802c99e2873dd7ae55a7",
          "0x2ba70a102355d549677574167434b3f986872d04a295b5b8b374330f2da202b5",
          "0x2c467af88748abf6a334d1df03b5521309f9099b825dd289b8609e70a0b50828",
          "0x05c5f20bef1bd82701009a2b448ae881e3a52c2d1a31957296d29e5763e8f497",
          "0x0dc6385fdc567be5842a381f6006e2c60cd083a2c649d9f23ac8c9fe61b73871",
          "0x142d3983f3dc7f7e19d49911b8670fa70378d5b84150d25ed255baa8114b369c",
          "0x29a01efb2f6aa894fd7e6d98c96a0fa0f36f86a7a99aa35c00fa18c1b2df67bf",
          "0x0525ffee737d605138c4a5066644ec630ab9e8afc64555b7d2a1af04eb613a76",
          "0x1e807dca81d79581f076677ca0e822767e164f614910264ef177cf4238301dc8",
          "0x0385fb3f89c74dc993510816472474d34c0223e0f733a52fdba56082dbd8757c",
          "0x037640dc1afc0143e1a6298e53cae59fcfabd7016fd6ef1af558f337bab0ea01",
          "0x1341999a1ed86919f12a6c5260829eee5fd56cf031da8050b7e4c0de896074b4",
          "0x069eb075866b0af356906d4bafb10ad773afd642efdcc5657b244f65bed8ece7",
          "0x171c0b81e62136e395b38e8e08b3e646d2726101d3afaa02ea1909a619033696",
          "0x2c81814c9453f51cb6eb55c311753e84cbbdcb39bfe696f95575107502acced8",
          "0x29d843c0415d35d9e3b33fadcf274b2ab04b39032adca92ce39b8a86a7c3a604",
          "0x085d6a1070f3513d8436bccdabb78750d8e15ea5947f2cdaa7669cf3fae7728b",
          "0x11820363ed541daa10a44ba665bf302cdbf1dd4e6706b02c9e2a5cda412fc394",
          "0x201935a58f5c57fc02b60d61a83785bddfd3150e05f1df5d105840b751a16317",
          "0x0a8c2820c56971aae27a952abd33a03d46794eedd686cd8ecfed610e87c02e9a",
          "0x180638ff301a64ca04abd6d0bd7500b6650b65ff33e6be1fd50dbc163a281877",
          "0x095c716266f1de59044f97114a4158a3f85ca8a937cfbec63e9b321a812dd36b",
          "0x17c31ea02fbc378320d86ffed6c7ca1583b618c5c1a687818d4087a497d73490",
          "0x05b86c4bb8ef318b6a7227e4192d149d3c17a9764ccd660de4d50a77f192a91b",
          "0x265bc95df4a4c4876ff70d7ea2fde2c7ab15f4a6ae0d237cd6ce74ba986c7a7b",
          "0x24752b47bc6c6bc8d9bbe48f5fef2f6908701739c5f5b4b3d6c886d4715c7929",
          "0x14814a1e0f492a4ea0d86e527a96482178d624b98da96ee5e583b9324d974efe",
          "0x10def931073b6479bd60577378f29381997c8e041d3cfb3dc7523bca906f00bd",
          "0x14f7ae770bf7e95f7f706c0d8ab4ed03fa0b880d28c69d031b4592c98610175f",
          "0x1aef50a0cee751b59f926af40e8035d19decc9d428ebe4e775c5cc9dce1ce589",
          "0x041935607172f68eba65ca60068dfe3b086c2a2d57d09602951214b57e73cf5a",
          "0x26863e9dd24255d1573bd083959b856c0493fbefe83c819837a151d3bf452cb8",
          "0x2036efb6f9830965eb3d7a068bd087c9f5adf251ba62052c652738e63ff8b3af",
          "0x0c712a975b74dc9d766b639a029969ca30be4f75a753f854b00fa4f1b4f4ee9b",
          "0x08014dab3cd1667e27afc99bfac1e6807afdff6456492ca3375731d387539699",
          "0x198d07192db4fac2a82a4a79839d6a2b97c4dd4d37b4e8f3b53009f79b34e6a4",
          "0x29eb1de42a3ad381b23b4131426897a32709b29d53bb946dfd15784d1f63e572"
        ],
        [
          "0x1448614598e00f98e7ae7dea45fbd83bd968653ef8390cde2e86b706ad40c651",
          "0x0ab7b291388e5c9e43c0dc1f591fb83ecdb65022e1b70af43b8a7b40c1dff7c3",
          "0x2b7cbb217896f52c9a8c088e654af21e84cde754a3cef5b15c4d5466612d6adf",
          "0x2bc6b0ddbe1d701b6570428bdc1ca1bf0da59ff3bbbb95fc2bc71c0c6e67a65c",
          "0x123a55a31980384f3d20b2cecbc44ed60c38c11f7d20e9271efab9a905eefd3c",
          "0x037501cc8c9dc819309a769f4df098e588b01858bc8eb7e279e2883be9fb8c53",
          "0x1c2116e47e03a86bb11695b0a5f6dab6b9a460b1eb951ab01c259eca3fd47d51",
          "0x2c18213489032e85a9c8cb8e9a65839bfaed13e57bc0fae49dbdaebf54f56f93",
          "0x2ee8fed3d4d2c71a0429eafd8e5db1718f29e2227985fdf2ad8703c835b9e031",
          "0x28c64d8f5ed7aac004c92029d9e9bf91ba9436d1cce94b9316d111c70a0c1714",
          "0x18a01d9ffb747ae0de3e83c707f8b24f682c84f15abf571b34254a03478665e0",
          "0x1c21d92bef197e73b234e4777b60db14e642a56cee71515d54e1ac71cde72bd3",
          "0x0ad404ccbcb1e195897cb60c80981ebb9d66a6677dbbedad8b6455fe62d807b1",
          "0x0a9b6de833064f93b6adb99af6c005945cb654cb7bd14c8b97af8b60cc1fb387",
          "0x13129e3f930aed6d47690331ff09dc5160efa58ddce2c3e6180d45bec3aa3a6f",
          "0x0d7a614c8991508ab1ce4895813bb1c82f18bf7bfc9e280ccca18079839387f1",
          "0x0532f7ec36e30041b0486986875c913a49bddf2f5af5febe8c31f2f4094ffea5",
          "0x06bbcb8e8e180201293e712f4950f1b0bbee808c9d64263c84d9d8ae155cb892",
          "0x0f558a4db1a3ac07f61e2e6bee947f73586bf40f211ceb4f687ca5678a9dcb33",
          "0x2be140a60b5b5f2f8edd78a818a969b20c643e419bcf0b577c24a0d0e7acfe98",
          "0x1c49c4b9a9f09f7b9ad5f74ebacc710512b8e867bace27cb0dea06e89b96f631",
          "0x170c1a732721b12cde7f33e476a39a1aa77a81c06e2eac503847b00d597652db",
          "0x19c27d0e52f65ca34f4e31a068e49331c6bfc39d9241f9d4c302041615cf27f1",
          "0x2f1bdc5254f9220c1a731fc5276964dab26b385fa40b6b04bed9960e2543ba08",
          "0x05b42d2fbccbf4d39d2be9339cabe9d0dc6d921e855cd91154b639d28d4a1cf0",
          "0x1220040715a41ad59f4f410e0c05a42c5fd32ac52fe9d06f88188d71f61e0935",
          "0x25f9526526155b83946609f7bb9507dd4925ef871dee916d9144ebb4ece1343c",
          "0x017bfe4284299ae7740b6d0e204951e314a8a5d0452419147978a95b34742444",
          "0x2a5d4764021ca71d78a9674cb6708f1588d2ceaf3578c4111cf8b359eef089cf",
          "0x17f02dab745fbe3c081321fe5cef845e7b8d070b2514d29b2a7b7d89cc0815da",
          "0x19da62626db7199b65f4adcf57fa4a3dbaa1764a7bd155708ee6f378c89ef013",
          "0x0f88e295fa2ed81b426c91fa69366a73edf75f39bf18634cd266ec4038829e05",
          "0x1fe31c5548546c7948fe4ee1bd7412e3280eff7d20cb09aa85f49f2766148017",
          "0x10fdc1613bdbf67f38bdde561b2f91e4cc48b59f98d643638fdc0afadbfe126e",
          "0x1f2618c2ebe9574508b9c52f0000e33ebfddad1a03fdd6bca6ef7f0093127bef",
          "0x129fe7fc3efac6a8ab23dba6d886f394da11f5953cf98e28269a0dba2a745dd3",
          "0x15afd4cdf1e4f820c1631d4ab85ca4ba3bafcfee72beade9fae60523102448e3",
          "0x1f2c74ba5c367e370d728e71e15b268851a7bb8b45528cb734956079ac99b012",
          "0x1130e1872d76f2f9369cf59b95edf9ce19f01fa89c9c36b26e09def6786dad3c",
          "0x13523d173f7e6badb73b63fc1c9bbdbee242c61bc68656493327533a5c1b1dca",
          "0x14da40d0af427a65f1841b5adc96538653368f7254cb5667ddadbbad7a574cd4",
          "0x0091f96400e4297ea85bb186c17b304e82638e57fd631ff6315976e1a5dd8b86",
          "0x303329bf9031c5515b9a34d49a64bb6a0267bc7b54a0deca5c450277a002cdcb",
          "0x14ed47e55c1da1c2f05d3c1a1b2e6c18509fc8336ecfe9db737916e283fa821b",
          "0x1161f10b357775d810ad53bcc4a20d5add2b03251c747deb04ee94c565e58d6b",
          "0x17a8a50ae72ce707f22bc070eb992851ca914eb94cc68eafbb8a96a714eb8221",
          "0x1a6c61d795dbaf62f99250b37ec5df88645a1c153791db6312b932dc250e4f62",
          "0x1f8bd2ab8aa840664c4eee198c4684dc4b05772bb2a0869da6722b15f447a133",
          "0x1ffcb852a4f0027a9799f131cd74b98ccfb8cbc06349d8fefcc62f10c8fb3e2f",
          "0x035e742ec52f19b36d489c720f467ffad77cd53bc2db5dddb246b23021f79f18",
          "0x1dfaaee41bdf94d783aa29fc62b7ec7b55673aa818d305fd42d175a05f2e3d86",
          "0x2821378477a02e995005a5635088540945bd333f2d1455f038a219b8c4796b3a",
          "0x1db4a4d0f238a570b1061c6eec81c02f31ffdd4a7c19e763174f238d04897421",
          "0x14bf7889457b20b7a1367b34a3a538217d693b52426aff40a4bb72893b1784ca",
          "0x2ced52c2bf296f87e57410c3ec9a9483a796d164f6049127109ff0d3a9c08465",
          "0x1ddeac5805a7f4ada4d0441ed108e3149d4ce6584f49ae5bdfd46d6766eea334",
          "0x2e36b4e5e9c97b462304e8e2b5f9dc88e1c9f2161ba040673f911123f042ae70",
          "0x0c6840d1cb0666dc59e89b1865275d8a164b447c5ed64347caee63502c238d5e",
          "0x137e2e3e89e71d461f4c9bc3e8f12183262a4d1db55c589b2caeaac01238f58c",
          "0x250932e7b0adcf2c84ed4bfb60a36b6b82e55aa94751157b1d45794b081c8aad",
          "0x170a7292f5634c06dd3bf09ab5c9c4ecd4b00d5ce2f35f972b4555391f16b42d",
          "0x0d68cbbe77289e78d5cbf51d70f1b75ba215df4e7bd0149d10b2c50f2a4f3b81",
          "0x0caf74563b90525f645a6d2036ecd1306fa1dc680b49d9ce4ed24c9749973178",
          "0x20a7d1c0a27fcce78ffe372f4c58306b166f9456ed46cdeb255e395b7d30d42a",
          "0x0623f3226b5470b2789b8a53040e44443385e96b9cfa0be4d35015158a468465",
          "0x1632308688c25e790f57d68a5350241242a56305347de4a5009ce46b8cdcb91f",
          "0x2de4793a6f99cd14e3f6642211f4d0b7bcfa361597c544ffcb5a567e9076f47f",
          "0x1d4d06d19ea1b09cad79086d51bde11725a554fa99559ca2f09f3bb73d728c66",
          "0x0480e7479a66a7cd9ea61c8b28974389908350abc4aafc18cd75e33dd130c144",
          "0x30430b03368ebcaa91246960490bcf917d78681463e2e7d744bfb44335dac24d",
          "0x0b57b37320127d4c50f269124b0dbdcb2b1f1352241a5d12103283e089c0c742",
          "0x2cf4890650d27240e195f60a4f698eda249b8dd614b23376b50178d2df6d2b8f",
          "0x1e221c5526898bfd12de86851a0d9703751a2f239008ab5f9b7d3b6911c64184",
          "0x28e07485ad7d992ed1a58f329ca12adce4ec693ebddbb2952e54d339f2eebda5",
          "0x2f44d64f84de16dc67bd5ead51efb1dc8381c84520c12854dd5ef3a079acd4e0",
          "0x050a76bc32ebd1dfe2be330f304edc7ace7167ab7ba1516f4021c62cf0d4fac2",
          "0x2f58c45e5d659a67d781367241f6c35d8cb46361d97b28947d29421c270594a9",
          "0x25e8da9ae0e42e840e04b230370e782bdb67534844325ba36fc7e5e160c66a74",
          "0x2fec734da20fe32003ea04f127f844724f38a368ba10c29544252be796040f7f",
          "0x288a6778f3a83988a8ed1727f15e93b4cb14f4e3a3bbb91dd6d1facafffd5eef",
          "0x20dcc6c75fd89259be7f406750b3db679a25a8cd2715d245b9175390ac922c84",
          "0x17f42ba10942df25cb8a541782a18b6fd31cf965d11178c7b04ac45b4dea5dd3",
          "0x028eeb85d115a904020e0c6148eec6603e9cedabc664abee764aafd455986ba5",
          "0x0b1d7cecf3a79b2ad3fa298f6cea7ae95d80c0299ecc918e9f8c9c3d38d59d40",
          "0x0440339c9764cec79c16efdb834a26261db8e3f12ce1cf722d23c0e11ff4cf07",
          "0x06ca647c29727c1962a002177da2d504f4b07a5f7eb57c79b88e6b7abbbdad5c",
          "0x2ea120a864f5c4093dd1a962e8f013c7b8ef778b04d2ba5bfc3cab28619ba9e3",
          "0x2bb737546c4aee7c0cc2ba87c1157e2a77c479ebfb5dc76adbb39cf8697633fd",
          "0x0e30da6490625d33e79cd50176f568f9a2c28c2f449a2bd51a25d15686803a93",
          "0x0df7ca7278a13650b919d85497b2ebb0f71035a7c20430d4131d903ab7f57521",
          "0x27cc589f5bf585794abace589fb8a74a2f784c0990b80fcaa6944097f870e2d5",
          "0x2255c36a38c8735de45cedf452afa842332d33042f78e60c43c7455421b325bf",
          "0x133d9602bd3378d69f681c27b05bdffc98b7d86cca63d73a60caed485784d087",
          "0x0e1548e942ae9d3e26860699b93727c817a9948616c93ef4accd981b1dc3d78a",
          "0x0f20f0e55d93689fe09ec312f6af47627482e4bde0a1602a8e2c8d6e84e8a6ae",
          "0x2e52328483cb5b7ff2eb4e45b12e51b26232c9bc17b7292954c0a9f6bfa51bb9",
          "0x02b2162d533e059a6eda2abb74712edb3a7860beea95dd8a4abfc957660804f4",
          "0x19e0927715d1cc6d389429947fb3737dad733974c6b2e13e5b3d432519516c74",
          "0x0d3a800457d77785636303b8b94f17dcffcb46048872ac9f74ef7f27ee573705",
          "0x2c974d1952557a1aac5f7bae4996616da619b73f441c4e504dc8fe9cfb559e32",
          "0x0766bfeeede2ccf3708e1b4ff30714c22c1d434cdbe8f55514babc2dd5d97bef",
          "0x23dac8ea54082fc131e173ae55e4630cd4ca7c871b2a0a479c1e74e7f191e62c",
          "0x17d5fb6c2cb37010e3e358ab2d575376870ed33186b8eae49ad3b47e340a8d7f",
          "0x175dcac76d8a8126139b583ae38853290246e43e783fa6903ec8007f178c0023",
          "0x0c4fd08fede5d221adb7abf549898c91e5be7e85bf1fd2a611bf182cc2e71655",
          "0x277934b909e72d3a3475bb1ec766ab7a38ad59b128303fc5002f02a65bdfe729",
          "0x0e88349998dfe703f1b184524f9c394d6004ccacf9cb952896e8cfdb0b078b68",
          "0x1f1b2078b60b0fce07824e2a2bc8cae8ee673514b0070a8b45710cc78cbb9942",
          "0x2eb1559566c536ddbc316f6482d51fa340557657700f5b8a846e812a0ed334d1",
          "0x1c4dbdc335cf6764355208b4c9d243d34541d623c669dec2c3ba066bbeaf6773",
          "0x2374a6b2da6f8cab8e5cfe8d805dd3a2dfca1e8b7eba5dc8574021fd1241e3b4",
          "0x19dd342533ccc603a99738e3fb5a569b94ef71b3e49f90fb874f6161733072f4",
          "0x217d66db6c7fb3effa508800587d2eb3c6d03d8385132f2fcce7f35f2705cccf",
          "0x0815fb8591fe01038cd3a3b38b236f9efca77c618d3bfc6c2a7fa89296c7e64f",
          "0x2bb943b40c2bd456a6c17853b1ca88eb0ff36f5974b2ff9a5f5093e9bf63a16f",
          "0x11a5153fce659513ee7cb9974ae6cba581e3b4cd14570c5709fec3d8d3fc82e9",
          "0x1b72bfd07635d8501b2eff8785a2495bae74c7653cf90e6d5c9f144426836df4",
          "0x14902c0700eec897ae178ba8caf850d793f1d87512bea0ecea39cf6b1fee233d",
          "0x09c138c6e0a616a49ff90d43a6b043f3b745b78865856dc4c1a45e2fd84cb3f4",
          "0x05b58a3dce57b281a271d69895052d887458a715783e8317e024a61a35ec10bc",
          "0x2be8d29525c0cfdd5e6b3125e3bde3bf558e55fbe867f024457a96765474d037",
          "0x061d72f78f1ba9dc6b4d7f7784225d6a81bdfc1b5ad6c24369f9c0560523d9ad",
          "0x0bf18aefcacffabdf4112eddadca6145738b4803b36145bb9516db501a0692e9",
          "0x2e73dd105fa8b2ec931d8cdf29ec679e3a9801a93071a7d5ea30659255f03bc6",
          "0x0f8440ef667c9ae81337ba5d8c927a5347de7296860b211cad1ecbfb5d3598ef",
          "0x004d303b2dea627b2731be83f93ac34e7d14d178a13800558ca7396395eb118f",
          "0x234541ad72040a70da2996a35269230c94699eef313a4d480508008cbc3d37c1",
          "0x0d123f1e72d26b92bdd8fd73d14286c312ad4c23acb46b2e08c157104409e174",
          "0x2fb360776f0de79d7098ee7aa4123c05ee6b05a8be460a774f3a048e138545bb",
          "0x03685c079434e167276c57d3cc79703b7dfdc41c156ea1e8b7f99b6956a55326",
          "0x260af0e0fffcc9772c1631b179344566b47aaada3681eb9034c6f75c3705c1c7",
          "0x2862b41374f89b695274b33b773f2554916e2bff9ff672545fc2f49563f62767",
          "0x02a9912fe170310227189ea1e691d0362f18b38b400b0eff192ca59513eba8d5",
          "0x08e513ade694a0d8ac1f3ebf1a96440d32c713d5058e1224e070348c281f4a6f",
          "0x140a4a431e2ee79400ed7465978d84773213c628264ff80f21ac7a6b673d09ab",
          "0x296af4d019cb5df7d959b29d549c3f071202b4eba8b53dc5ee979ed143377927",
          "0x01832e284a7f4c81614882b6939fc0f185573bd2023e3e505765470bb812b349",
          "0x1a84d56a67bfdd3d965abdcd329aa78d4fe93434496f2d103861fd19d66d7260",
          "0x040cb82847773927d2aefdc07489037a9d1f7631eca75c9fb0dda0cb9dbde143",
          "0x010dcf084cc29cb7caecf26aa633bce4ed2b019f2887cee7b1a78f89d3fabe2f",
          "0x07edc22a0911ea214425ef542b776db23b0fe5817810d40c72ca98aabd9afa83",
          "0x2eea4ab08aec775f2148479ea36fbb96936da58ba48bd1d2d3acd48173aaabe7",
          "0x1e40c0e8257fe4a61005cdcfad148cf7f47d1b5cfddfaa082738695518245f19",
          "0x23a27809583bd1ea51f436de5443e108f69d44cdf51dc1f03e21948b4980b876",
          "0x2e4652b044dbfe40e63b6b232fcd5f3f39abfbd2051ee68adc754080d49250a9",
          "0x11e7abdb6ecbafc2e7d8cdefe9c7b9c50475eb475db3c2caf7f7d67f485775f2",
          "0x199d52350cc30e8c73821f802096f0e547a13551b27bf6b899396f63ac5cf8e7",
          "0x0f575d6ee67cbecd98345624e032a37c859a7cbef30b3fddc949cd0978484101",
          "0x1c4b6f9a2ae2b418e6265acba9c96b06184d07028e5fb784f3475ae7772ff057",
          "0x2dcb5cf8896de39f228e157c0c5593f4626fb9bc225206383db20360abf0c925",
          "0x1340abb9f4e113186bdc26cbdf4bcca50b531a107f863ca544575e3cf870f8e1",
          "0x2368e692b72787cb8870ea888e714e006f59d2b4460cfb74c48a8cc73b1d1a5b",
          "0x1fab9add9baa4a4f56f23165775c6f2d922a7632a94f96374b7dc852756f54b6",
          "0x0c7f7b82300d3c6ce3f8957ba1e4add54c4c015e20d9765d220571c16ab8680f",
          "0x15d63e86beacd93c6083688e5d9c8f3c6947929f9f1f99ab578a4c3a922eff03",
          "0x0be843ae5f9b07e52572178af7dae8ed05d36b12c0607862929355ea74023d9e",
          "0x1332749c523694cb6935e0963a07e81b05967ce1d950c0b731058ec92a7a0c9a",
          "0x25439408810e074c0bdd4598b9815fee892bb95ca51029ecf009bffa5b9b9682",
          "0x057e8d19dd999a918da29b0940b383ba9fd15db0b0f64996dff67feb55f9a742",
          "0x1e014e37e9b117cf3b4870d999f2b55d3534d0a6be98e9e357fa43f01e70a29d",
          "0x1a4ed24e6e03aebcd6bdb100533dc966597afe15c851b4b863f6e889084c6479",
          "0x253420007083f1aa863ad4760905c1039ed4111c9f053f27710452f83ce36a90",
          "0x2276a1441971709affe6d2a99320001ec45ec72155c575ddeecac0e32759ab06",
          "0x28957dd1218ea799fd3411eb19325853adf7ae8ae1281f753302fe7d31dfa7b0",
          "0x2fd925726ab794c88bd75796aa3e7f1e6692f2914cf802267ddf01e37902a008",
          "0x1cf8a5c9c76a84b147c8238d9253cd55b47c0c43d82966c4636a28674705fd9a",
          "0x0373cbbc306e1bab9e7077368715e6230b4b2e2e4a1db9c674b8c359a41e9108",
          "0x060283d2fe7f23dff513d9110b3dc62448bc48f531ce0c1eab5920bf23290a40",
          "0x0dab465d6d910740f33ef6cc0eadc71bf8119bdfd5a3527dc8bbfadfaa40263c",
          "0x0cba7bcbc8224b2a8e4aba17977230a686cd6421dc0ca5346f3446b62439c4c3",
          "0x1e4365db0790c9c4f445b0653c466ff21db96c38b4076ba8bd68bcb4dea6911d",
          "0x1bb2dba2199a9ab3bc86ef5f9de7f6c5ca13d60eab42ced68de98fc643800a8d",
          "0x0ad3c1870c6d6ef40eebad52123cd1a2913d9d62e80bfbacae812e082021f9ca",
          "0x01b098c91e7b0cbb5c34588077c0ddf95300ddf614935630c0ce3a2627245308",
          "0x19fd5c0eac14fae7598bd4ceea3b1e2998b0c168493b6d72ae41b576e55b9c3f",
          "0x0d4749d79cc163f17110a404a46fe427c6434f3fe67b7e7b4ccfa6ab95bd7e18",
          "0x1ebbfe8114a41bb809e0b33399241232eb940ad8728c8a516d40ada440dbfdcf",
          "0x2704e5b6133d9764d6d3f17d49d833223e3937f80eb9faeabbfba9baf4b4c1b8",
          "0x2165e1c8027305b1ae0e323571635e5d540d13d710c3f9a390b6913f14d035e3",
          "0x2e3497e4d35fda596c06afa63bc3a0f2e55d4eeba4aceb60e65081ad63aa8b8a",
          "0x031da4345eecd6db6c0f7b07c7815d7add1fe0546d738f4d79ab5c57aa841edf",
          "0x089ece54e47aa5c908e43e5f08737c1436967089006acab1c9cd19eac4a20876",
          "0x2f53c15e2aded33c47f55a070483e6cc7f3821fbf8aa40677d0552ed9d10d847",
          "0x142aa34f4b2e8ad0df7a21b3e39c00c8b0aa2857094801eaafd72befed077f93",
          "0x17aea4da4c7bcf0d7588b014eb8b40979dd2725eda4e6ace331982467c7ff2bf",
          "0x0e970c19d19748d8c465104d8f02200363f9a41786f02f1827742b20dc0d1727",
          "0x04bcad9e553795642f59baf714a6bdb432fc45a0a0b77f1aba3a9823476df9b9",
          "0x242c0bfbcdaa76f715dbd4ba825c71fcfed671c1b1901fa484c87f810315d0ce",
          "0x25db1343c24104071023fb6ed34d9909078311e1efe85af0a11b19114fa9e790",
          "0x2ffe4d9c420a59e9cdc7c31ab2bf35187ca147cb898a3942deb3677786036a80",
          "0x125bb03af3e2cf18bbe6f5b590eb3bf8d0d1ba63be696483e98f283bc7cd07a3",
          "0x0816be42745b7dbb4ceffe5b8e24ea60fd8b719deba50037ac7b75948745c6bc",
          "0x111160f9acf6ec360d1b6a712313a0dbcbe23e64420055471d2ee4c5dedb35d4",
          "0x1377978e1b1f6a8925fa8e7b7941bdf8fb59ab9542342419283d8203435c9391",
          "0x0defc1d8882166ef3ccde53a4f236fba83d384621937cee57e421a513d0d3397",
          "0x2f8fa5c78c706e3a5d4a03f2a7a3953046d7e94cb88a7ef350e67b5ba0f0debf",
          "0x1a2a957ec0a723da61c2134bab0bf17beb00e6dcd84690c230dcb9e58da94827",
          "0x1cdf8710995f5e03412b4a7f699532f9fd01f0ea167a8dfc1ddf37e2805addef",
          "0x26fd31471828c36ae36c27b748054b0c0c4fe5239b301699e3765eebecc18946",
          "0x0775d996cc2c4456f303a2c1f9007647e11a921d9fea3f7b926143b99d2fa0be",
          "0x016fb9337708ca638cdfda91bd0daea6b97224ef7b2062672addd1bd18bb8900",
          "0x2c392fbe7d3fde42fca4f9478bb439331258255356f184af6f76f119054117d7",
          "0x187a2a3bf79a69fa3e5089ef9f1fd56fdb47c55eece77aa228aa3de1b486bcb1",
          "0x0271a863a280a32641ffa33510b2edd278c98630359532f3e506b275fd5d20ce",
          "0x1557459c9c74c94aa00e5af69a1e3112fb69537ce897ec0c718958d96516f2ab",
          "0x2a8e26ca8d647d9a6388516ea9dcff89083d539e58168c2a50c6dae30f109f21",
          "0x21cb752194cf43f3b51942eb0040eba9de2bcfb1c2a3fae97924b710f26832cd",
          "0x2c26daf996be247acd6dd4acad60d38b5a471e6322188d02c137e7cb484377ec",
          "0x0240176ee0e7982eebe92a68d3e3a38c26821acc0f5d058cf8c137bca2d26f1b",
          "0x2636e0973c865c1bd974dd78daaa8d0a84cdaf6be1ad47ecf2a0d18f117318f2",
          "0x19e84f4f25a799496041661dc5d975b681f6e06744cee89b7be5d9fde1744ac0",
          "0x0ebf89064a3af247ca1f36f6f3570188e271e0b326c4fb26664e89e1454ca110",
          "0x25c7e97b475be00e8b559a38c452364f4c9c531fecb8ac698f7fd73ce22e71ec",
          "0x0444c99e592353e5aecaa302add901c14d8c55270a160afed4429ef5598ad74f",
          "0x138db8887830565f2693d0e0f02e4e79e144967f0ba53b03519aba764b5c994a",
          "0x24d40f462114fe9ee02aafcf74b4fca24e1ae365dc75c3b52bb13cbbb2f21edd",
          "0x21e65d6d8ee43760bca40e730b5df4c4cf3a8a732db148f4b2951b4c61d68e8c",
          "0x248dd79669ec09dbf0350a15d6c75c6a9bdaacefca14d51300978f13d1ab6d1c",
          "0x2b8238c1548f9cbe29fd35cf91e7b48f0ebda7e639edf69fe8d5aba7924d5362",
          "0x2439fd239257f38181c7be3cf513f1bf7235eba94f6b8942a94cbddecf6f62f7",
          "0x200958235281a61ba2c4be0aa3282a18c74b6d262f5de7c2e33d2bb3e893dfec",
          "0x0e1eca5df88ee5f60cfa7e1fe5befbb719fad8211fa9b2d02fcc233190c17f12",
          "0x26b53427f9b3ea2c769d9c660fc60881a169c12732d001b7158ee4b1b842ca24",
          "0x20f3b3f4acafe9f8af3e06661b3a8f778fa2812522b9d70a67402cff8db2b1b4",
          "0x211e5d2b39d62520a7a627ece8cacbac9f97506def4ec286928ba6c27d463b17",
          "0x0bb743ee34802129c556731aed9d302dcd085313ce572f6242d13832e536b4b4",
          "0x23cb2661b488ee71e4c753ff23ae4bd25d8a44094f66b6532977e22140eba5cb",
          "0x03a35aa3123911cdb4535baed3359f5f6a5205b9c93ef31d35323a47807b8bc9",
          "0x27803848a0aed96a93fa943b6635e450217e137f4ade74a62d7917322714b697",
          "0x0cb37839c2c9a7ff79884cbec75f41e9be5e47c76d61538231bd8162996d6f67",
          "0x1f0026d0bf1f8e1dd5423cc2fec1fb5cdaa1ecdc4c3cb218dbceef77c00d2f93",
          "0x02a7d7bb970b8a6ed2ee66fabbba956b6da3b100f5b5fb928eef42f9708273c9",
          "0x0cfd7f4215e434c8da17ec3258b0bc605ad1ab2e90aa494351e4ee40bbc491fa",
          "0x180b11b720622a156849dc6f7f6e7f571659be69682230c5ed9ac339700a7cde",
          "0x04e96a965bce3d3a0a24a4a457c951582c871349ce7eee1aabfe578a94c65011",
          "0x15931f782b45f7fb656f2cdbd1f7705c353a23fe1d30a5a46a1522ed160df3ad",
          "0x2e296e57c97a5309acd26febf55ac963a5444c1c5f703ad88a0d7b97b9dd38b1",
          "0x26157bceb78e846bbb262f9a1e06d4271bde5a5bce8f0419952f97ffd13eaca8",
          "0x2194eb89847d6b0f1897f675f19c0c56b61b13248eff3ca36e34fb9d1c79ee43",
          "0x2350bf35477656899151ad7dde96ea7857e15501447008dab6b3d27c8ffa274f",
          "0x1a486f0ae591cacdaf09c58a49c4d1795405435340819e003f0469d110b7752b",
          "0x1b56dcf76fb23cc4a834d455a4065e133571402b7df309d59bc3105d42a8c301",
          "0x1a749d7964af0b7202913ef204c653f2b4bfb65ceab7b685233ab59ce3bb6925",
          "0x18ae590073f969696af762ffa4e8f0ebbf97f8cc787e37cddd1f321be3beadbb",
          "0x21c47b275d82dde6460d5e769a99421144b1c5a9da59294ade9cbb317103f249",
          "0x0473ddbd52e737e527364e8eb63207975c38d5fd6cc32b272102b082cd1518fb",
          "0x0b12fac95b6d3a881d892657c8424e645ac4e6b00515f902d594574302b26e02",
          "0x08ae7616a260cf6657f8f73ac284588d2c5f07ff425d837aa7cdcef63e3e2103",
          "0x039daf6876280b80e873bf2a32fd2834a83c69757badd58a888ef819e926ce28",
          "0x25e7b1d7470a3c75f13f0b56546c8e09f2d8efeff06ef766f9c783ca869d130d",
          "0x1e8fd3634c3ff764184d03435f98584b11b5b15aeb9c75262da3f1ea2c2a9e7a",
          "0x241dcc51ac37808a415dd1e3c281f05aff11789dc0cafdd77a35484e0993f9a4",
          "0x1ffc3153c56ef9755932cea2be0573749bdafe1c4fa0781a4b8b4078ce9d7547",
          "0x17630d62d9a3e510c88a4d43c360f92bc0fa00b66031adec29bd9543fd3a17ee",
          "0x2980400edd1d74e3d69db5458d2ccd5fabdb236ec16a82a4301a0ab59ea4a6e9",
          "0x3034fb24366123ec6dcafcad35726dbfb16194c036dcd648fa69439bfcd00cd4",
          "0x1aa7e8f4189ca9dff3db2ab7648be0a2392995ce46041e04680dca8ad7232df0",
          "0x1fa195f834a69e62372f60eb497da167646eae14153d803b39dc5d11f5d7800b",
          "0x0f23f1c74d5fbf6195ad5a6aee5e56993c5477e8453f5b93a0d7bafd333036d3",
          "0x016556fac9348a735ab50aa089c97151b3caaf0a20a34fb9d9370505a1515729",
          "0x23d92b793648110fc5aeef0633f0c77cacb0dbbca1879b8a6f6e5df445e5f70b",
          "0x2e4c10ec5e65e2f239bbc43c13031df2686ab40fd79a304b05d611b823f23b73",
          "0x12418bbfd77b63ad5e16864ad9c32ffbfc5a3dd9b78ec2b79329fe5e0a8d2953",
          "0x1e4a8aace15abc1d5b76a9e848431d2c06a78f72b6bebb1293e6c58e5185696d",
          "0x0f3e96107decdbd6872c20ea09acf92cdf17a3ee1d1331488092d96176deb755",
          "0x012c3780207f395cc21deb0abd951681eea32498ddba6ce897a8f9f0c2357067",
          "0x13eab1b4e672ba1b1c1bb901769301f1e5659d03ea10c61de2477ff0ac221421",
          "0x20dc664abb20b7456c06629ce37a1ecb1a27a4e8b24e31b48b9c4635aa30323e",
          "0x2c6b1e2cfea78e2c36785e76a8cfb1b057e9471f24f5b391175c3decb01e000f",
          "0x188c926255f5b7af3da96355729c2a8670ab4c2c70400481b2ac903740e0c5ab",
          "0x2f9913208e09e3d6e9e6fba6384fd076ab89f2662976e3e30e0870bb30eb54f2",
          "0x2b33803d90889706e714f720b5628d26fb60b545a1f3e9ce49a6ae912b024086",
          "0x26ccabc10eb04327cb5cc3dde2abb36f097086c97e738c133c9f57077e748b09",
          "0x1b16ae0d7c54408cb75fd931f246751f2b0c3dc20d79e82a2531b76c22b4d5df",
          "0x11d0bb461bd8af2844f49f0f840c94ef9518b2511344742d1f5438fe3d415ae4",
          "0x233031847b476bead0118d3db338e89133ec420d673e504ad647259df655571e",
          "0x1f84e97895bee438eb3c92dc9b1846c9ad29c164387b06aeb6ed1841ed8c4dca",
          "0x277f7f9b542f0c2bb5f45bed054f09624536010c3cf9452d2273193327f801d6",
          "0x1efc9c9069e5068baac13d2e6645641b7d27e80fc23077161535c44682ee57a9",
          "0x0d6ec477761e2efbac4f14b3bf3d5257a99e64c3f25fe104faf988b20fe5ff44",
          "0x0e0e7d7c5501999b7d16173b59b7cae1f203bef21aebf00251881439ccf93013",
          "0x217bef2f4f12c6dcc91c2058a23391cb77de53ca6e44dcdc6ea3d36fea326ea6",
          "0x05780c88adf01531b50f817e3fe44447d29b35aa8a389c71e8cf1226acef68ba",
          "0x18733887a6b2b3b4c90d8e4990196e23445e47d7ea5939ebfb89a3ee3d67b4bd",
          "0x20bace63acfcae0b1c9f2bee24b8e9da85ba597d37b0905720c4f15db231b07a",
          "0x166ea595375a6786ac527ee9eced73ed6bf550876abcaf3ac92b42c808b00d8f",
          "0x304262a9eff4040acf43e322d6f52676ae2f853ec2e7a80db00c488cf917c74e",
          "0x226bac7050166e5f6db78cd0b12d36f305b6e8c9a055114ad7709e6f57245b6b",
          "0x26b2f539c573829f6aca91baa954505bc5c3eb4e1df1d638582717fbdf2388cc",
          "0x06a0fbf4cd52e93ba5e4c6c4af65db02ee96297f8ad200f2f1cff252e769b551",
          "0x2cb9c24112d35341aceac88360fb528924e58b6ecac321b9fb29e6aa3368ff23",
          "0x20e88a4d607526dd07fe08a3552a44669129eb87fcc0b13aac8fe8afd9301521",
          "0x1544649a2bd73e3ba72f396df91dd65401dd8faf51de325fbaedb9d536ad94fc",
          "0x1980077457995712c44da7e17713258e3f8eb354bfd80ed9eaf3ecbaf6960105",
          "0x25d1d22ff13e7705d3c085f97fc4e4f6914b82ffaa5d2091ec64dac423765ef7",
          "0x2fec990ef556efe1035a464ff5581e74067445cd54abcaf6b8c0399fe0d24cfc",
          "0x1bd9563506d9544ef3e4830e13545012c579379c2dcc1330416c4ae49bc4ec61",
          "0x00affcd17ba6003c56dfa85571fc29737b225a80d480e7dd7edec01f14f23010",
          "0x23670dbaef966881f07f919a2d883128c7b23cf767a477b2b2e0762bc0dbc18b",
          "0x1f93a532917394c7e22fd17abeea6389c66fd7ae2dd9f02f860f6d96947f0edd",
          "0x2de42e9f537b7d61b0213771c0e74f555512be07b6a50934734e2c5beb40be37",
          "0x25c557f45b99781cd37d3bb22931662a67f78b37782c885b456bb96d55e88404",
          "0x2074c8b709705c9888538a7f8a3c4aff647731bd16f8e254fa74ea9f2be7662c",
          "0x2738355956298138949e442171d6a4e4b74ef2065740db7cfc3a0b60fd573acb",
          "0x13d36ad0a4ebeb81969778649659c65cb7d0c41cc519871fdb71a9ea6a0caa56",
          "0x08a2c18ba41381348c1acfbf9617716806b462a1691bc2e343b79b8085e376b0",
          "0x059092fc395aed285807bbf557ad9a1041f59c079822b1088457882fee7b612c",
          "0x161924151b5a5ad2d8cac119522a991a906f15e8531dc70567f6b28371cc24e3",
          "0x1c68ca8f7aa17659075405ef6341b8e69a298b9a4d72f3bb854b309e4ba87a1b",
          "0x27f5d03bca1c8207f7239a4b2cf73ae559a15aa37e7bdddf3aab05eec5ce5592",
          "0x0ecbff4846962a975d347ea9a8fc465fb46861557622f2c2564a7e639833c169",
          "0x277c4de2363d8b5b456cfc5a7ff8e46ff2ec8daa59855f5ad64bc0521f3ac567",
          "0x1b11862c52acd351b7a464793f4fbb57fec99f832b63226f95d175c8d2fc08b2",
          "0x06a719c584c74ffbdd7218eb565cb4c8bd86c92e3dfb3c73e1527201aa51234e",
          "0x230e4adeecb799877f7ce9a58c836b99d533584a195c1d77a313abe1c7d126bd",
          "0x10b109b864809c4767a133cce6cbad6c88628173b8ea51e8cca85830ca7de522",
          "0x0e21117970dcfbd4b1526b253636f377538d3b4faaeb5a8b24bf6200d14cc591",
          "0x2667349978401362f6b17939eeb0e64ff55607ebdb35c7071db46bb3e7ba4778",
          "0x05000fa5fda505e029a13bfe304c267b0d86c72c039babf6d3ff02ee246be02e",
          "0x264d9e094aed5f41a60242220a34a284089087b2436a9bfce8174cc9be8c2e20",
          "0x08076f9c4743de6130ff622cf401edd2c92f24bfe114f3c5e724891746315c47",
          "0x132370abddbb0b1dd57f2a520c25336bd7cede94b95bbf5c2151d6d88e641b64",
          "0x08ff1116b7a227bfdfd4465a67890882b615c8c4c17f28d8d24958edf602ddcb",
          "0x2bcb0b0db8b9e3e02b7e9c1c9460fdd9c6cd98562332e648d8a3e0ab94597520",
          "0x12ea68ce6881becad7f8a6b117b03ab976f7abd597f903b0bf230d20d21a943a",
          "0x27439c98a76688067a097b19b6fdd7d78d5f88e274e0d8fea5ea6b7406fdda7f",
          "0x02f40d0ad05f5652e31ef9440ad71ebc8419e393493937f05f00499d02a99e36",
          "0x2fbf04284327ee4f680f06bd390e309d0d13acc74b9c5b14b63059b8cc7abff5",
          "0x1be686d53e2a8ad57a828b0651425cfc6978c7027edbf247f6b6723c21df86e7",
          "0x2683b425e85a508f96852f14b4220fcfe9f7ad8b17bfefc0e348c47ca78bb57f",
          "0x16dace9b2e8012e31db1c7ebe672d86bbe61a1aa3e1693e0eddfc0de0a9dd951",
          "0x27a321f8c7d3c9022e962f7fef2e3c848b4539dbb75aa139f30430fe545bcedb",
          "0x06ccd7210dee1d6b0e22b79e12d19082d8078b788d71007b95e7a774ed86a651",
          "0x0a41dd42221653752bef350f6d74a917b6cbb1fd76a3a12166f4d0be978e4026",
          "0x220a02881e4d47ac94d950cdf8386274d1782e27cbd0d845978deec91298f165",
          "0x0e2155a545fe5f3cbb6397606589eac19cd92639339c6b017298a4ad3408b4b9",
          "0x0f0f19c6291e51546a267c60cc774e5fb9d088bac530782d891ec1af4b847073",
          "0x0e925bcd1c6ddb4a3a1c67ec8deefbd40c53c0d33e7aeef1b46795aed5943c9d",
          "0x2ad000b1748abb812cd6e5411286b9ff3ef0a5bd3d259a36e45ef05b9eb5beeb",
          "0x0a65aa232d32ed6e8de63d1cdffebc2f3fa616465c27aaf97e8cd3dcff648652",
          "0x0263d8470ab4b1c61d74d8e896242f4f261dcb167a3a06923893d7cb2c93d6a1",
          "0x2901d946addc94b040fd58004d9a5f8cd1926540c7a8612cec1c58cb60c2b3a5",
          "0x1889cfa8209f4952df9022db9dc583b5717a0696da41cee64937d0cd6321e693",
          "0x236064d71cb6c64c84747ac25fcf8d881502e5f03bff87561b85a116b1f39aca",
          "0x2ff7a174ffcec29862e04f5dbdc73ebf3661570033576290c0c1f6cd8ced27ae",
          "0x19e724a1d742cab103455f0040edf745a2696a71084c93e322715450dd4d6f5b",
          "0x03eed3892b6f0e6c5da1059c5f3793985835aa283500a8129904a94c87f161bf",
          "0x08e2b8273bfa30c1ac850306d91e468a9e8d05092aee4cbc80c687248463ba30",
          "0x07adcca76d8337728839a1b6ac3b3ed42afb87d72af98f52f416f2ec58b28cec",
          "0x171ef37896bae2b1020a0a5839bd51784ce11bb4237d548c171169d32fa19b40",
          "0x20ffdfcb86f4d005064edbc296918c332d32fbeff1729de5056a26abbc3a35fa",
          "0x08ecd7a6f1735eed86baa094e608f488f38dbb398fcfed4b994383a0ca8e4647",
          "0x1c3f5d86e5921fde9890189f1d8c618754288600e6928bc182ac4d5e4c9f0ccb",
          "0x29c61184ed9d460f337558a1af639aa7e3c0975e4014ed8ebcad4a25d51eabf3",
          "0x0defd45b28958728228adbb2dbdaef6a5e9b1a64902a734f402b8cefb8ab3b56",
          "0x0a74ea22d8a09336060610179ac1d82fffa9492df76deed4ea60e0133b0811a8",
          "0x03a37bf12daf1400d297ac4ac13ba24c17dc262db16c8523deee4e0ccde9a680",
          "0x11fe1790d5abbf5935ff22318e4f7ffe69966ada2f9136b54f830eacb0a65368",
          "0x018165842f406375f2346686915afb14bf1fe0564c8858ee3bde0aba3de5f68f",
          "0x261db25e7cff5a9fb72f276b1f9260b667300fb7d361b50fd5c0e8b6995b05f9",
          "0x2a3ac3314b2b66e796fbe36df778c5e46972320cc43ec807048826b6704ba7c4",
          "0x23caa4b80ecfa99e9d3fea2bbc1dbbf369d1bfc8937d03d074061c30fd8cd76b",
          "0x27db260085e224898df145f23f635f2066d8e4e124e581e8c6261929b1dfe107",
          "0x274f6c5fd34a784d6b915ef05d424ee6c0babbf369e79ab138b8167b5618ec7f",
          "0x2c3a29e13a84d26a0911c9289daf1aa4cf5840aada0701d57e23dfc796da6da1",
          "0x1ea210f2001a334d3e801f4e53270d42da7aaf317a553b4282aa78eaa2282e6d",
          "0x254dbeb52884b699c1ba7fa0d6e80d610903b18a3e509c36351ccc3b024946e3",
          "0x059e781d65896ebe0e4ba26dc2f29907f47bcdeda4a2ca2c713d8505ea31fd5d",
          "0x0b5b1cec63d42d5e615dc269b885a24cef303ec78c972dd17cdbb3e915cc4ffb",
          "0x2a7c015e9c3b2c57ca8b7d26d39a1bcc85d6ffacb7d9fbd66d2a8f1d64ed0c92",
          "0x29b736b911d71a79cf63d8a6f786f11bd5abee24161dc567a7c851eae1e43b51",
          "0x285745a90a7fe3d09af5a808704bc69c6f1701e573912df5cc1e265d596c4141",
          "0x2d901b8195c3c96c8c36eb99fec0134ec2b8304ae810bd30da554e3080826715",
          "0x1905d3518355eaba7859b591ed7b8c9c253980f0450dbdf54d7a7782ba058392",
          "0x23e813026fc0b80064d19b5c5428942fdf7efea80bfa8ec4095272bfdb7b4c9f",
          "0x23c0a19a252c87e6b1c1c21b1a79800200c3fbff3e3300e7e5568071de9efb81",
          "0x11c4ae607bae492413bf62cdaa2c2868ed1fec6dc0631b067ca60fab125b9e2a",
          "0x2cd055ebb7ee4686365dea450f046ff62405fae1b1afc9fb01707cf81da0e3b9",
          "0x053c9fef2e021fa9a20fada22fdea1505b58a3159bbb47337dbf791b215b1452",
          "0x0a35bd74e87cbabaabe89ad1319d2c9e863b4c631c21938c9a5395bf97872a9f",
          "0x1c115056539ce20cd5a04d1a5c43e2b00fbe83b25901be36f5ddc4666fc383fe",
          "0x242954047e5772fd3bded590ec8beb4c542f2e264c8c3e284cdc473505c51a90",
          "0x0e2abd315b47c0dc93849c0cdf267e811cbdbdb200a6e7c2b67edf7cb0174214",
          "0x282b37020c0890d751c3fd76950d8068668e1dfeae621dd552d2de887da2ea75",
          "0x28933852266b52d9ea6b5bb923d9d94f2e5a5be5c778e75e07942c234b643bd9",
          "0x099ab6765505ba1198ef140e77b7954d4fbe79a056ce72bace39c048c00da3cf",
          "0x2af211d8e0ac2d8fda7f849b8f229a225c6186b55762c7a7b2ae2d1dd85c57cb",
          "0x0cd070f234014a2809ab90c71c1da61e98a96322fedd99b6aaae1ca104f3facf",
          "0x26793e2abc8d3c30c60626fbaa158f263587d6bd15833d448b116264b930256a",
          "0x225be36ed0ee85e1f845ada84e5748a56699152113ff61b5056b6d8bde60c19d",
          "0x02174f49edb02d5154d2beca2dc92b9cc595383da1fde8f09e4b5ee3ea5a065e",
          "0x0f64891c2c8b020e46c3594cb758f0bddcdbd09bd0308816fb41734a869872c3",
          "0x192a84ca2f99d36991e2d2b1deff3989d1c156c239e10e9f56140e1854576067",
          "0x29dfcd7b63f05abf2753a8c341d6b7a60c6243b04c9a1b8b3320bba04a4d4787",
          "0x1ee27ad6b9b5a867733afc61a2b3e76a52ba3e4bd5e657ade91fc038819dba5b",
          "0x0ab4773f150c3f8ad3bc9538f43cec395a7e3731ae973fefeb623a09217e64c7",
          "0x13c352a02f595186202cb0b99fa58c5542ab67f9b6d3a0afd103deeff6d80f41",
          "0x2a97cf2c10c4bfbfd299f67c52a169f92c05b7dac56a41c4dd4fe87c8246ce14",
          "0x00becbb47042bd7f8c9f6bb422162d1aed089a28482f7fd16ab06a13285fe702",
          "0x008e44da21d738691b881757ef37ed29c5bd9f7a4450fcf53290a92cc2ca2176",
          "0x2b205a8b6d4b7063d931f3bb5d3464053843fe7fbe4b83c17883f86527882a18",
          "0x2d9e32a7c90556fe108d255ac01e75df338fcd63b2bf84c19280d427298863fc",
          "0x29a322a84c25bd2ddf6e2e4200228d95abd6349a02266ac1dbba520738ceca97",
          "0x0678c9bfc6f2df012f4fe55e33bb68ac14ced1df0d02152792089d046d828c43",
          "0x0faff3a5e7425794fe20a7e0eb615b8b1760394b7f2304286a3ae4009124db23",
          "0x1f8f5b611af9feb9cea86c084058120553e404103aee213f5a41d1d02541c0d3",
          "0x160875d8479602f96f40acc2d042ee52c1588b6a29de4284965a6dc6c930ea07",
          "0x16d87a5183a316a1d70afc951efe2cd667c77328fcfda458cbf5fe3045f46d9e"
        ],
        [
          "0x2197703fceb4cbf07c6dbf46c4ad93e7d14e554db66d09102ff84824743fe4e7",
          "0x1322f0fffc7e4854bd8b5fc23e7106b51f59bd5061d8b565aca2fd3efe512f79",
          "0x19e414f80380aa2d222133118c337d82a8c5894c2f88861ee46f448fa9d61359",
          "0x22241199a4df9cb7d65249d9562cad6c65f16460e79a7939cbfdd6d7b9209d9a",
          "0x0301061735384dfcecf9a311c22ade327b51c78b211615f41c77f6d85e8a41b6",
          "0x229e1d86c1f2810f4a2633b7b4b5bb61b7dc5d19ac95fd8d379548ff2b6850ee",
          "0x0e31dcf9c53209a817eeb292e989727c3f56bff65883afe5fdc28ac3dfbea675",
          "0x222c7318ebe96306c9d79ac11237263c6b8eb25272eb88407e8c29a358b40f2a",
          "0x0cb416b42c53a829cf4fc823be8f4fedd12593394cd529053ff4e3604974a2c6",
          "0x0892729d09594a8d8b1adfbf2e2ed75399dee612842b6db3d2d2c2aaddb6c0aa",
          "0x18e39e9ae45f14ba97a15bd672711ae124375d9f482a4487a0e334dee2d27c71",
          "0x2560c9ff672e6ea69dbb33844d0d22870461d18eaf0f8992d4d7ac649edd6610",
          "0x21bee2b8ed54b726ef17f77366b1dcfbda7ccf1e487f9916e5f963e814c57312",
          "0x300e1b28dabebdc0d4bdbc19be29a3dee4eda8425dd0c7c6e82fec147cb070ba",
          "0x2c44a5ff45deea69dd2961d67011af4982b9405f9fe38de4a732d2aeae88cc23",
          "0x0c8d59fe1b7f55095e6aaad9e3b4e7b1c93d876ba3234dd1ac5ec64108291bfd",
          "0x06cf82bc5fd115d348a30b0c45378d90cca1660446ba049759fa53103fcd78b5",
          "0x2f80ed01a2118d02e2145111c3fe6ca70efdf95d8abeaee8829293347dc9061c",
          "0x0bdfe7f6803e4dee7b026e079075908cb8414e3d651dd12fda67df08dded9e42",
          "0x06cc48ed882405595b34d39138f50bb5b31a963a0dba66aef17c19ad622e29b1",
          "0x2a67f3ba6d15949932ac5622cf9e2b493801bf16a50336a4518258bcc6867c95",
          "0x2572725a67c60718df656934aa78fbeb80c8f395aeb6a20cd833c4b14fef412a",
          "0x03bb7f6ca43545b11f19721265b416166579cb753330b1879b79685d1df0bfa7",
          "0x2412815e863f8f3bc28bfcbb957faa5f393300b25133e9221b8eb3156ed5c12b",
          "0x0dbf64d58df212e4307871966de097a5db09a93e5bc305cebdcd0630f433af45",
          "0x274c06c01158e047ff4a791e25b7bb3db190529df8f50b6386273f810f15c6ab",
          "0x23cf40693f52abf0ed3d842f7bc85d1a2111d0abecfc18acd0fe3991ee5fd33d",
          "0x1daaa926528f3368f4e4cf924166b8bd3ff8daefbcf900e6dcc4ee63c4099698",
          "0x10103789dc9471ad718657bebb6781e39bd92fd20ee1a32d0de3ea2817a01555",
          "0x0009bc25065080e6c6e9932e34bfde78d1085f19e9ffc8965a4660a4d9b6d607",
          "0x1312c727cb5489bb174e1dcb82588edfab31a2999b377dabece466e9dcd6afee",
          "0x20294a462c7d0c25aeb5374618e5e77316682ae3d726824f15f00f7cb9a7009f",
          "0x25e0c6be89bbb04bd8391c90cf35588f0e9d73fdb06259f47a05513ad7a23e91",
          "0x0084a0b87e0b336c9a911069f89d875a38be313efc420d28b9ec287f28810fd3",
          "0x28a03ee29f612aab268f76241d54d477a1d97f5807ba2e1812f4d350d7c6f7da",
          "0x0b6794182b723a12e0b35f76bd55a7d106ee6a4035527c4d329a6f33068d7eda",
          "0x015b9a698465428fc686b79db4959c8495b92b85122f6a6932940836facea86d",
          "0x1bfe52289f811f5c3619f14866138ae9a1279bb76e8cec9a8936fdc36f59df7b",
          "0x1cd574fe8d5e4c428b92b23a9717342176e1d309a7e259052c31bdc9af091fa3",
          "0x212d1bbdfaaf0200735bc5851a156adcbfa4f607f5da122e1f63afaecd38cab7",
          "0x0b0479e28820e883d903a951f95b13093788e9e1ca64ddf2abb94b13fee9edbc",
          "0x0110f5257c21c9379d73b76e9ca95c513c77a15cc8ee0ef726d8460d4fbbdaaa",
          "0x08c52e9401a9764f0c2487dfed34e215c186b6c2838e38eb5a50cca4f0bc6994",
          "0x2e422b4323cb4c0af46f4b0e5052f75744c538abccc7643f339440dc3aaeeca3",
          "0x2e12482ba160472d45549ff79cd04aebc4a327c4bb9d78c2573b835b05c55fe6",
          "0x124fa5f9c5a96d6cce92cfc73ea2446202f09100eed203ae4267aa637a032d36",
          "0x0bf651f82f83ca1fa037a941d4e2a4b3e08f5e1603f933a1723adf4135796de7",
          "0x21c674ea7b834741cbad39b21b242ab9a5554c6c9f92e801cb1fe4382b619463",
          "0x214f91d6c4aef57e83186b57fd9fa48a193e1caf16d7f6dc1559d144a271b341",
          "0x203e2218389729c26c6f66213f2269c262785ec68c759599c2d8e3f68035055b",
          "0x1aa934198713ce17658f51293fad44b1c22fc80391405ce76c92b2349b7eb3a2",
          "0x1014d4e5ddd9c17b3c2b29684476afdbaf7fc56e8b799616a67bbc6678e45351",
          "0x033c13ed45b4762a47e1d2d45d7fc8fbf9d4e24546e20dc596911fb991710358",
          "0x09bc1c3274c569e7e5c5d77c51fe69b23b7e435138f4f3217016a2d70ce71d5e",
          "0x1803171c9dbc0610e38d8308db101d6a99ca90137f6ab8cdab2a91b36b63322a",
          "0x0ba6071aa98afec3fbdeb46a88e4a5d17bd4454c0e7da8c74b15b084488cfdcf",
          "0x179e90ab4b08a4ead281a8709057487e077b710879911f215fbd6e8ebf838e97",
          "0x1cbca88b8ab3f0588ff87deea978d00008adbad808e6510897238ea007f491a4",
          "0x2f50b20b33692bb0f62777de5e3198377d7923ef2fa8ede08831e10f7e9b9f5a",
          "0x15ba030e8f1ef6f260566fd6fcfffcd21a1cfc1232f7ec7148ff076d1ba68707",
          "0x0dbe053da01aa4b7c0fad83a3cc966f0b8281bb4940f97a5516cfb9dcd543a6f",
          "0x222eca5d754afeca8997f31d6fcb94a5d799afb795e68d4d8b0ce6d839f6dd7e",
          "0x2abffa43d756ef242db7f584bd62405991112618362f1b29a33ee2131b46a446",
          "0x03c92524ebe67300d0dd0aac464f0e6ecf962d6ad41bf2685f077bfd788eb3fd",
          "0x282241758ade4ef8ff3858305288d3b4a52209295d1a4bc89d885b2f5dc3341a",
          "0x02635cb973d71bb3d2137bd81680dd3bc607fc5487e898c4c2d83c1dc2817687",
          "0x13c866aa66e8d506079dc24c2df7b1e691994887d35622f4cfcf014bbea223e9",
          "0x151f0007ccf42a7ef969f1b6f6315992e6594bb5344d2839fee6620b60e2c023",
          "0x1c1c6a5ebccee8caa4dc7ef18e194274f6e198d2b140ddcc97cb15c92ba1409c",
          "0x18330c9e67d62f7861a996d7ed69bba904b0dd459f2b254fc7cc53dd28e45a65",
          "0x26b747740c95bf139cb11bdf02fa63a4bdb29a90f158933a1822cdde5387290d",
          "0x1475676fb205084246ef9bc7234f312c214f426852dcb2ec7dc3772f579af8b1",
          "0x1b03ad9080d29b70aaf30bbc3200efffe73ee269dc032d2e32bd190767bc380d",
          "0x21c175f937c2f82e99735bc7c201284f89577b27a1f84fa24642eceb552f4455",
          "0x1192e0269a6b66a8c5887527aa4474c2de91cf8c71ebda835df2cdccdd4a4e4b",
          "0x0f3a12c0ee52f0d34f2b4a0dcd13541b48aeb3d5121d311113bba9792a45a58d",
          "0x07fb521883bdf78b33689205b45e52269458a061bcb87eeb3b1e183c6d7eb5b7",
          "0x248d0e8051c1a965640c96c6f010c4931fe648b96f95ef6f5b8e474f64cf3169",
          "0x2ab553db9ead2c82ce91febe180529eff3521875f7e90a9b8b7a3c4de4877cd6",
          "0x211ee3bda3c95f1954eef22a0a82c2ede8444e42a72a8200bab6a133846d5b5c",
          "0x111db3b5184ff7412f79c129904a9cac4ee65a51c2062d66732f54bcdf767be4",
          "0x1a73843264cf9a3a1bb6fb68ef76037c4fa98337e5c10096c630b449ec4a5f67",
          "0x1c2e5a2d9332f65128c85358662d6a7c44353add09c27cd07da02f9144da855e",
          "0x0e2b35fe1021b879de5b67a7458fa6188bbdea39e2bf468a1a24e3625cafff98",
          "0x2e568594e5dfbfadf272b8d6e8c99bd785c4fa94ce9e87fa8a9a37e32c7a28de",
          "0x07043c7571cb7dc5205bfda42d693527a4bcb58238ed6a6a248e7917ddaf0c3a",
          "0x239e18a0c85b845ffd6b85e96343f1a8378f3c691dadfb228da6ff7aa79efe1f",
          "0x25e247af250c564c00f5ff1cf1f2bc8606600f173cb65ef0780af9f5a1b676c8",
          "0x031ba3385664544e3e0801f1698b15033a6049b2504e9cdc2c6e3eb2fd12100d",
          "0x2a33777739e2ab0adfb1ca5687db1e059b20370cbeeccad32da5c3609431ff65",
          "0x2bfd6f0e9e996ba13749327b9c5cec69903d413b2df29b777d05384b3e7af952",
          "0x2d453d93fb36fbf8e36747ee92d90cad9e02e692d0748c07fd43eafc2cc5e823",
          "0x187bd8043f8642cda2b6bad82958d115818880eb80f6b730381d974ac5d5037e",
          "0x21aca605f92a48ac35708fe5140729fb35c3e48ccec441217713b08649443930",
          "0x173fd164f5224ac06c2e99f3e2eaa6379df113de30aa485e8bbcc7f0fd2d1e03",
          "0x071c66a6463c3fd4292bf1e5acb6de611142d73cd1db590e89b61b57d44d69bd",
          "0x044a40e396855be550d8ccce7b82ee2caaef6675bebe92266c666982ff72bbf8",
          "0x1176d9f52e12df67f087110a15aaf98d1ded293ffdf99599fedef2e51569e4f6",
          "0x06e8eb7dd026d257b15c6624bee2f37d5b67b4a671cfcdfee5797e8457b63916",
          "0x0696aa48c1d5fe84ca5cf59009ab0baaefbb612e32c91d5ef306def38dc5673a",
          "0x0853c33a9c7a7c3b355c92c75de444365db82d241eef9f3fac417004a3a1accc",
          "0x3016c0ba34678e0a67f59cf96ce16e908154f5f9802591717e66e95ba25ab77f",
          "0x0af008601dc9552517f303ff9e22c793a682caa93256f2f09a4f746542603b0e",
          "0x04cb6d76b5a27a5aae387cb647790318c25fc16f8d7d1855a38765f847f731b0",
          "0x2ecf70c372d8e5edcad49e58d47875f26933d62614f266e6b4f586177148565f",
          "0x01f393a6ee74dd6c4d52b0e7820a7132f8c4889742313c06caa6ecc55f3dd413",
          "0x2e4d4ce3f97bf96ff86b88e969d13e415e14721282769f7cf8c3a73723f094db",
          "0x306000ef24a7f5a9c652e3a9367578554ea59bf8efa0bd8bc5776460c18c1add",
          "0x26e58d6287678f3db9c225c1d3b93ae7c43a69024ebf249c8bde40617c2b3d49",
          "0x09eee09f873d1bf683971df4d7ce56c8f0b8b98ddc05b9612c0a0d317310655a",
          "0x0f08879dfd4fa0dc11ded556ef01c6f94cc6f4d18553b08bcb1dd604392ec00c",
          "0x11459f7e9f0e3c727777e34d6d93ec28a25bd867171523bad5be0d5a20029eb7",
          "0x04e9cbb6f6e8e805a20fbd801a53b723f78c1f5acd227880f7f37f4e5b0528ad",
          "0x2d2ff32eb7a0c0266dd46bd5939c9a9aae88b3e9af5dad01a7304f9868f7c7c6",
          "0x23b77eb0f27e950200a590447d645a723d9b405fa2538a5cb76fc5fdae16d839",
          "0x2cd6d2c5658ec0792daee2067e2f958d6849886318a6c1c27233a469e9998c2f",
          "0x0ae1daa420bac90780d0c83026bfcc84af83953e26eca839da76861e739855e7",
          "0x2b495b854553d02a75b68763bda6dd8ef0e81fe32b5cb072d3f580a914967bf0",
          "0x056fa5d7ce2c32bc5735351d2d48af5d6c9256a4b72e12a35640b53ea959e296",
          "0x2ecbe1a06b28ec78ea7d22df11cd224a0e1a0ac7a3476c5cc3c4e50da961a87b",
          "0x143053c1c387f9353bd677e5db6e9975792bffeecf02d6aa0fe8f627579fe6cf",
          "0x04064b25584499a011ea74ac047a8b37494189bc63342bb1182e234212d42bdb",
          "0x100f61f6b81542156760a6d29af5dd8644c82deab5b90e6ac66de8b4a069564a",
          "0x18d331b2e8180b7aa7055c029fa77aff4f02b0e2a2078bff67688ed65b51d6dd",
          "0x0fcf9b89e19b1a55f9b03255cf80ccb9fb6aafde2b46207d873fac80ccef085c",
          "0x254f801f3c89c62436ef63df67d912c1f231bb1f76c6c7b497f7708dbcfdc17b",
          "0x16d8e85e57819a10a61461bcd8d3d3c963c4f95afba3e4d8fd0d6ec882b9d161",
          "0x29c9565aa702088bd443e4620d84bb2bfb93253a8f0f04e5cf408c92820ada84",
          "0x294fb68064643d8beb237bd705a557871b5f1408624eda46d47b583a60d29cf9",
          "0x2c26f3083140c104baf24c3df922317584aa11770451e6a846de7dc795197313",
          "0x231811279854707dbaa537cb27241e7021a949a1d9671380a7d6944c838904cb",
          "0x1419365adbb91f1f7d1bb0aa8a4b5d11c7ad0570cc6cf3638be9c5a2a275b495",
          "0x1674425f2e9fcaa66eb001feca48ddd4b2a29e86d451f00d176ea35b4e02fb84",
          "0x291f956def59b878028000cef03d7b54dcc2fe1dd5a75dc180d6d5bed898cd30",
          "0x2f1302894fe6a26b5bc03fbaa69c4d95012394d78de494549c7057b7ef965bcc",
          "0x0627d6d6d94d0a19a17db45c0796f7db8de13d278a2b24c99ac5d92d0a1a1ce2",
          "0x2ee297662bafebcb01df8e62bd5f50f03025515b10465d59f3a294f0bfbb2fc5",
          "0x118029945df773f52fef5429da766b902eeae7d967062fdd879c60a1bfaba75b",
          "0x306042d262f6268ba789eb4323c2169279752ffec6b8536cc68b53bd4df0e858",
          "0x0472a13ac7da9ebe1132e05f9ef609135c82a0ebd9278def2b34f8ce709aee4a",
          "0x2e8f76b27b474180f00c5a6c2d65850bbf96019bf0d76dbb4743a970f42a130f",
          "0x1e33984165f47c204a33fee31f613544b7d846a7d5ea45280ede4b362c32aaa4",
          "0x17f22e27252bdcf91a72b59eb276a666ce4fea7adfbacb2ea9fdf28524b7b43d",
          "0x00547e7c70ee4e3fb4a4d386c8baa55d823a0f02bc963b43039b8847cff6e6c9",
          "0x08ea4ccbf815be325ccd15494f38f3f97153ab09c54a87a852b2a99480724e25",
          "0x277cb45f3e632718673ba05d48c712fe7404df9eff5401cebe45d194c67fa8db",
          "0x0159ec7ea49aadb3a8b0a23c1dba0023807b0d099d3c40b69df866a92dc87b37",
          "0x0c33489297e244956de579c5c112ab40c7fb2d89866a28418f660a86ee18524e",
          "0x01bb4fcbae28a2f3399568c6b3849da27d6ddf4fe6adabb591151679ed37d21f",
          "0x2a23343d24a9cfa3b8f413f52ee1b233ce4c1d5b9bf34b03dbc6d733d52305c9",
          "0x0707a6d515b3bad03a9b06d6be048defa850134aacd120f38fa93264016b7786",
          "0x1837db5401dd6ec30ba6b866184da56e8db439ffd04154ec469b62120ce35cb4",
          "0x244872a0d2766b8547e6b6a5afeabf198e1409a0f0026de36c101793952f6cfb",
          "0x204fb17927ce873c761196395f7da46f679ca331832a59fddd2ae31e84eba1f5",
          "0x056f53037d5d8efc7cf6a6feba18d102bf818bbba70b86dd9b763a12072f4c2e",
          "0x1df4bc5d73239f5ec3b89efad53df9cd8ad8fca543be01f5f40fea2952071bd6",
          "0x1ffb6ccbba001155d46e167d1fad1c13bf2892ac87cd9c347c734ab5ef658367",
          "0x08ee36e881496539b0abd647d353e51b63fef91fc944880006f2c26c2ecf2a24",
          "0x1c3080c254443332a3e6283d5bab6f7fce8aaa68487b9ee4e372cbc6cc172665",
          "0x2dc6040500e7329f75a3cefa4db49f9b47085b1660f8873b3e81b7b1af82af53",
          "0x2c8bca9dd293bb67db1f66ff2e82047ae9385ce67d7f33568cd4c216a89994b7",
          "0x2a157b9786f9224cf63648aaec1b9f61c7a7087ed6eb8ab20c6c5469d401b7df",
          "0x1e0fb0cdd8a54591c42e7c26b9027b77417e4e6522b472bfe61ff89c39bc40e9",
          "0x250144d1cea033fd78bd73ee4ea4cfdcd6a42f7c00e2d7ee6794d464207d2b3d",
          "0x0b6b3fe9a7a525ca60443c4b78a8e830957aae0403116d22983a2e680eedff65",
          "0x2fdf613e67d176569f4743b4963f8c53e52482fa32e705247eb650bc7bd616e9",
          "0x048f64b14275fb86fc55b3c0469cd89306752827c3c04463be5bea66fbd7b38c",
          "0x0f2027b781c2c52490e11ed4b7b494d66cdc16e690b6a4b3c924dc9d6e854832",
          "0x29652785160b261c1c20c741524a26147cc3191f33b74ebf17d44ce2f88b0f91",
          "0x1176909e02a5b37bfd47810fcbe73af87fea130470aa44bdf6b058c4d359e179",
          "0x180f26c6ce2a3a477baf0da58d069769c2bf0156d636f2255e1bc35c01e98993",
          "0x2afeedcc2cec57285ad22e734fb7fe3dd65f62601c1ca4884a86c7a6a05f083d",
          "0x0dd21a87ee22626998dbcd73dd751affb49d47a02e995a41bca26399103087d2",
          "0x1d21baa09d7f50f0159fa8a0b6e0d61446d1c7db5d1566469da6a85aa7224962",
          "0x2dc59c4c9e275cd8c2506282cc5bb842c014bea4236b1bc27a856351b48af802",
          "0x2cf62d08541dff0919ba68a697f44f4791c42d1447a41513ab9d5f755eb1f38a",
          "0x2f5b8853e2cd2e47a9fedeea4047e46083c97acd4b687aebd2264e7a0eb354b1",
          "0x05865328a9b2fd469170c391c5ba8db5c66eef9938e4da5bae33f2703c470730",
          "0x29761c9fc3d2c4cc1b126be1dc0470a97b8f2725d327c6d1ca923c2aa8092b1e",
          "0x1d3fb1f8dc3c77cb515c37bc810d3a5e3b96552d4bbb57fdb01c2aeeb1d9a048",
          "0x05f2fbeb7cae0a35ee2f3a4d2964d241a0ceeb47b3f7c4c87bb3b052c8705d90",
          "0x1f445014a0f266082a50257152609cc219062154f4d7c13288746954b97998f8",
          "0x2d35917cb1d0ca611ee37cfd9078c924fc84bd1a4bfd7db3ce39e05b38f698b1",
          "0x05a89a4eb40387b8512f2f398b6526efe76716951c500fc8dabc835775335ced",
          "0x04e26aa3f02601174f46ced15594329e4f4e5bd5d7d53d5df6c8633a94dd01de",
          "0x204d587d61526c1e047e1dc6b6d403b9eb8730f2e2dfb7bc7350d939bac5b90f",
          "0x21c8ca213d2f44446ae90a6bdae5843b7c2cb53ed699f36675ea8280a2a420e5",
          "0x1303bd921f32fa4c4e73af21457c46b6d69e2e6a2c396716217787b46e822ebf",
          "0x0613823c5b6abeef14387465317e713b45ace79c0e4433d7c4d352097e5c8399",
          "0x0f27c5305ee978f4f775e213e3ba12a901f51144ce1ea89bb5046930f5ec55d1",
          "0x2cad11c693c6a627531950a307e07b30ea8a495115f5a5388827792120c7bdb0",
          "0x16bb256883c44cf37366618e46c6db4e3da97a9d4ae7d5c585959de3272f82b1",
          "0x29afe50bd78f72cc763695976410324bfd67157a5ccdb7ae45b00032e1d57a51",
          "0x09329902e59e5243a726ae5ca35408a207148609ab3698139725aefe29aeb167",
          "0x04b1800e600c90ec4776bc6af1764ccbdc10bf55c3314f42acd0531ad53420fd",
          "0x298d0110bb90e4c35e293c7a7dacedef7ee9342a591b4330e27276aa13b67ad1",
          "0x024ea6e68cb1aa6b407e022649aa32d1b7ea4a350e510c07eee43929395e4f82",
          "0x22ae3a1a81c4550f5fa0116e135d2df2bd9f6835a0f0d03f4dd934e1320a3d8d",
          "0x1f0f5eee9e9abb2a2f4ae04d6fe09311fe0115c1e199c28e22705e681442ed37",
          "0x023c86606616f317af022464f350b4bee80c2fca32064bcbf83e8cd35dac06c7",
          "0x2a89c4e5b074fbe67d04cb03efe18c4bf904bec4759b33dad6b2c86ebfd2b9d5",
          "0x04b0f48c4f2e05bda4b9cf806075f9c275df2cf60b5fd11470eaa7394a82727e",
          "0x0edde5a2c01327ad042a686f443417bd8f107c99eb7c02900c931a7bd8cb349e",
          "0x2cacacc9c9d8b0004d8932080f9378b60675a8bd853aad1dc50672f137212cc1",
          "0x0816f33508621f2d56371156b0a3f7731030e4b218e44c90a88cecaf07170dec",
          "0x2ef8e0a455d472b49bffda935c8d3bee1ae9248608e2a52d53f4b76313c97920",
          "0x17184a8af9199aba605dd1f2dd18ebc02e3055ce408068eccaaf3ea7c0a334af",
          "0x16395e153937a83660db6f78446cb995836436602777d81f0607130b44881448",
          "0x0e174088223c38e9440fc77307d6720ac32784c9d2f591e2437eaea9b8f5e2bb",
          "0x19e70fa937788f7a2127573d56c8197bd0dd096140f39064865c65c31b47d402",
          "0x0e434c329d5242adbdab24780495ff97230beb344b918f6f8d6bd7d21b03692e",
          "0x2c88a82eb87c81ba42a211bf2ef3c15875ac157c7f3868fff35af9f55a8c22bc",
          "0x111dc223e3c9fc7452a9c2de469383915f33adf4cf5b49fd2e01c51d09ccf436",
          "0x10647353de3197b9cb48f4539b507e45393b000842e8baa1218af097f871baea",
          "0x0e53d64121c0a851c1b3f07423582034abce698525d0a47724354c07152f703b",
          "0x2891938acb83ee193754969f4aa5a62a531081dbca4dec226258ea92984b4348",
          "0x04106f95e4ba3fb74dbe4bc53abc170262ba00c7c63ed8c457c3227532c12ce3",
          "0x2a73e61b8f1babfbb38b186f401eed0d92c5613ba25dd2ff4d099f7dd3c19fe5",
          "0x18e16b24642f19193b798b923b8dd25f6e4856d6b21b729aed2281ab154f7c5f",
          "0x0d5f849b166ab9f6fc1a64467c5557029f359a2d0f194030c4dd875e12ae3485",
          "0x0e25250c57365a29c63a4f1531b8b0ef523eaa93c1d70acd0aa7cd7844dd0442",
          "0x0f813d14af0c85bcedfbf480b3d80b9f335853c60188526d80761274074a599a",
          "0x0d2356a92dbaae8c24a8cebed6428083ef2f469460f166a6e774377e78055435",
          "0x1fb6dceb495bf90fff56c8aad70b40bf773ea1003cdd092fd77a43961e9d7dc7",
          "0x2c0a70ced79951a75e23c5a323fd706c2ab87c381cfc3c269081627741c2bbe8",
          "0x13dc6b3bdb05167dceb4b11037064ac5fd22db5e229e4c6ba55e8382321dc5ee",
          "0x210fa8b777907ec30bb88dbd7c0e6ca9004eb3425d498025da6c90a47c35025c",
          "0x0c5cfa957139b45a72fbbf80a410aab5454a982668baf24b0dd3c04e4d599cd9",
          "0x1f1f3bc4c21d633400fcf8bdb7be59b7f65cedc06bb2fc93a873b6ef12e0f52b",
          "0x188f0ee95a9dfb03cd5e3fb30827057e933711644ee7bd57490374c0d67532e1",
          "0x0823877ebf8a842b77e8e0f3b44873e9409727101b186cae2b80d0cfa726ec8c",
          "0x0fe81603de39ccf148ca6390d6f8bdc9395ca2f3f50878283d98f1f0e61b1aff",
          "0x2ef61fe192f52a9d7cebf41c134098f2ccae35cabcaa12963566768ff1b83706",
          "0x0db6d076b2dd1b9f4d56d2f66fab4d7bfc6a38fef7f9ae1d4c2f8c44b1510f51",
          "0x2a194a4ae8583f28189f9c011d107b82f279e6a0f8ca8bc9cb0aa581831c7d06",
          "0x0ae539fa9ca67d4af48fb292f9188c9e72f2eeaae2e500b7e7201718c8da8de9",
          "0x23f66a894b1df4d26a8baa6d05b1ace511faffd4605b36cfd12bb4c6dc2bb4d7",
          "0x137cef522af2942aee9a4fb8017bf330e64601f466b56d32245669d9fe5ba707",
          "0x187aafcb87841b2df9d64c1767789a6b221767e4634f0d550063a0bf92788c32",
          "0x23212e75f4b89992a3647036ee36d74938bb9a9851e13d7b6e52daf66c4cbd25",
          "0x0f54cbe967770dfa9d068b2fc53abc96489bb7d266212654d326de6b9af16d63",
          "0x23d83a60b9887ab4359b8569ff3a219bb81367955fde72a62002d3cd51101fcc",
          "0x2ea676fe7f21fc583ab0b0e189020d42cb22f044607ee15bfac7dd66da5ebe76",
          "0x16f37f357a0c584821a356ab56a16d41f045029cb515f58ede001f05a807890b",
          "0x139093b78fc9603a4288ae5811ed1311be916e4c97d35a5cf18e4b7e47d13b03",
          "0x0aaba5fcad1c047030c8bf246f41610b68d60bad285cc15f55900f52778a11ba",
          "0x1611827956f3435c1fc67dd3d37954a255eaa0196cddc5d5a6187fa0a2839efb",
          "0x23db56362f248912421e5f087ad16e0c9e6d2bb59db30a52818e41964b7d8126",
          "0x2f215e640207a88b02999c98f1af8fa17331d19ea3de1decfe8f2e478224209c",
          "0x2b2a261917c0fecf2bce19021f8506e378e9d3e1afb451e9d162b3d93eed8612",
          "0x2f662e4cdfef5f822cb956df75b17b46f17b08f930f54bab4324a0363e23384b",
          "0x0870eeab2e7bb1e82c426c2ab1d65fda25d426749a538b4ea669eaa31f661a00",
          "0x169418dffc99f2ef5dc6b1013717c134409349d846457985725b15ac6a152fac",
          "0x021d3cb240d6400339ad5bc535b4fbb40919ce6b90162e51ec6895a7cabb4375",
          "0x12e45c46c45b660b6addc149e4216eeb6fb19474c8cce4d78e34c3cc18024afb",
          "0x0c7c86394b7ad61d8c348d185403dc77152fd310b5d05970375a11b5abd03548",
          "0x3024e78b217f85d8efeb60008ff70d33c3e84c238d9c21a04121b498a2fbb131",
          "0x235977101b56071ced3163c1ec7187909a3ed7679bb54ad40811ba318e1afc81",
          "0x14bf885e66f7c01fd974efdc0bc2d628ed79ad6fc6ba511c5a8ec383e1a73a70",
          "0x223325ae7e73cf093e1d5891aa92ed43f82610f1283f265f56548b38072f38d3",
          "0x239a5ae138dce6a019f44560ef7c19d2b8025dadf040559226f54870d318a57e",
          "0x01dcc35115d9057efaf468d7c8a7d46048e01359c974855bc99738f0b247672e",
          "0x1359a40012c5332587a4deb5604a436e269c282ba240cca0a6d77b343e76bbf3",
          "0x0a9ee39712223d4c0c37c26a96f267c85fc8e31acaee0c07354d3798dc5003e7",
          "0x11812d1ca3671ae688a9877233eeb5ec29868f7cd7c5e13275391a84167e0231",
          "0x2435cd699bc94985945d878960770f9298d40c0e28b6b5979069e0590952f0b8",
          "0x2bf020785e4117a1ea5930cd5355303bf9aab2a1ea0d6685391f40eeab2af0a0",
          "0x2cef6c78577c9e97a76855292ca92e4269ac53e9b7439dffbac2eda5c6758024",
          "0x09a30e00c9f0f6f260f05f029cdaa7c7afca506a5ce562c877b3b8d543135429",
          "0x1fd85928f8c8053c9b264a74f121b90bbf9ae8063e0e89670165b9ba66a3e7cd",
          "0x24482279d9efa57862a6cd4524aa289e6950606df8cdf8fbcaed4b674fdade91",
          "0x10260a39cfb0d82ad8182a6951f9c780a455fc1de48c417d6ce6b27f36462185",
          "0x25207827a76052d489bb2698730d5c3fc97192a4420578d2474a37ae7d7e3148",
          "0x28e36b634ecbdf7b8e4f9e1a347df95d771f15d97f2d5c401edf6a6e375874bd",
          "0x073f0dea6f83d443ee3ba27c5b7f0064ab7cc0d34babae859f6bf66d46a1e165",
          "0x14c6618569f748ff65514437adbcfa97f87b9b0d169048e84c553ba9888c451e",
          "0x0c7675a042ba6cc74fa588a0b26fdc4f2d1f119a0fe6ef111be6a2d45b4bbcad",
          "0x03dfad7db3f32c6ed8130c43cff604dbe1c29dbff250c684c955f09e495fb34c",
          "0x20114281fbe35c188164fc6d4144200fc1d9ec433efc677480bd2cdcb35b64e6",
          "0x29e42f5218b1ea3fad06a48e2292c0fe3df08a2c4a823a3be4b998955da8a21d",
          "0x13bf4039488d94b1b6a67f256296daeb6c7c80fad2726d6e9be11e17c2352816",
          "0x1847a4e36b3eace13de58fa4662a9f88c9c17a464e6dbd2083c2938c227ee3fa",
          "0x0a7a2056c7b79384af9fe3c6826830145f51f6f8ca5d1a344e295ca7663ada27",
          "0x181278caa15bdfb5940cff2bc3216ff06a45962d4979dfc0d6c94993bb7de86d",
          "0x0a8a6f4fbba2ee09a36d390fbb1485fb789cf3f9f641dae011520c8f10e57a43",
          "0x08f6b4c0d7bd5e4c87fbc6874520e3329c067b6841fc833aa37514435e987cea",
          "0x2206b2c18f3292e7a9a91039683a55d813dd914b0c7d523210424ff0f2817df7",
          "0x0186cef5c04b3a6c32da26405a16cdd359df57be8e93291acbeba3f487329cfc",
          "0x075aff67570ea17c7c79c9114c7a10d533c6080b6d15a5bebd1204fdcde772f0",
          "0x2b06d8389ba9621c3869d2e8b25ac15e2c97389caaf7f97a35700be66c1655a8",
          "0x04fc6d0a6b67744428161cb5228a94e7c0e95dede804b2b47a18055acd737aeb",
          "0x25e4a295b4e7a2dc71394d41ec2a8f4b124e58c234448a028a2c3bc6ad25e69b",
          "0x0094c24ab01c6db594fda907b639a7b3a54301439340e889b6ca9cb6cba067b0",
          "0x2751821a6e3b2206cd6bc3cd5d98cbae8850745ec6cbbea413e7254d2a514549",
          "0x145aaecc24e3878db9a8d77149b2419ed5b42df025ecbd1a8e97d8b817904bb9",
          "0x0d2aa00cc6e5167d845ee1877b7aa059b5e5151c57e4c163da3403f9a95755f2",
          "0x24233b69861c70c449ebd36e4420ddfc3c242b69ff6e3d4c6090c2bd08a764c2",
          "0x2c55fe1a75147c9c826f762f836d5645ac4184ba1927dd56a76dc056a9895667",
          "0x19779b1cb16a9c79654016674978b8b6ee1a78b64579de93ed2d67b9e49f098e",
          "0x1807721ba60fbae476ff60120c1f47ec0bce692cfc00102ae50bd9376c5a22a1",
          "0x1c0208f5aba12750802fbdc3bf12eac9e00ada708f167d4b167bd7d4b03d76f1",
          "0x090b6e28ff541cc38869abe2f5dbfb9fbe888d21021f29d2bddb9127d3c273be",
          "0x193d6c7e76ad94eb59a20010a799c7bf96a8dda8c90887d65214c8665ecda01b",
          "0x09ddd5bc0b1f8d4c4f1a7a102c1ba12ec7e7540cda285a564ea7c4753af8a8d1",
          "0x300a1dd5fda15d1a9cfe2a287801817168721da2f970139549e16811f555be1f",
          "0x1520908df2eefba075bb41cfe0740e1e5a1ee181ce492016e152706e493cf470",
          "0x0b3f215d52e85ec3c682698ebcb6228233ae9518f9450f480689e7cf30137846",
          "0x050996a07af6765c56a8ee2f736650deb4972bfcddb194a0efeb1954daa8a4d7",
          "0x23a59326daf5f94f3b5192c18ed06cc58cd9608e44138686399dc4f1ee807add",
          "0x1d220b9add0592866898ce834b1bdc2003976e815c0cf7d3f6b8bf967ad56496",
          "0x19b49c4da3d9e3a26d36566738658923477c504e76a38a82b1b1247104f681e1",
          "0x139decc567b06b495bd6f3cf006c05b7e1f25d5b7ac554445c37dd285beaae7a",
          "0x1a5a7d8bca8d4f07d4cd6e9bcd00c009e3099e99af3080debbb21f90f8e5b425",
          "0x0621e3811d3dcb9584d0a8be41e431d588c93274c8549e625f98fd15983a809e",
          "0x02a41c2d2bcf14664a0130a021daa6efd4a3b0c3aded38635bff97e3785ed6bd",
          "0x21cfb54ba72fc06794947cc3bda33d815355416e2aae19084d84471eedca399d",
          "0x05115093894089a202a4cf8d0aea329d83cbe0ece741160f9975cf01b7c85dc6",
          "0x2e40541caca7653212827129559ab422a1c06a6f48c974291470c65fc070dfb6",
          "0x07eeadd730284f5ab60778900b60300d27970001aa63e46ebb7f9cda1157600e",
          "0x0cf33e4964d350adf2051f8e2e8448d3324d24d3f4858407f4fd60d3333bd98d",
          "0x287c60483e2db313f1a2bda92c1e1c28b65ef0b99df4acfb75709edf6a3bfcb9",
          "0x289440f4b7fdb8b2b22661d0742e9695139c1a1ecef53c3febde0b5f6d9bb4a5",
          "0x291bda2c37fac962a24555a7abeb36d8e8b9eb25222f97f4817ef2e5b0bc7208",
          "0x0e105449589412404cda7b82f14d527594ff99d04cea894d6ecc315119f42b73",
          "0x0e6097f0ad418ac7123ae7eba6cd4522b7ffa8dc8cf60a1f836be23e41ec25e5",
          "0x22fdb676724017afa8a8069c62d307aa4ff52c1445ad41b94c3e406e33e0def1",
          "0x0204d594ad7855ad0f6950742b19e60c2c5338817aab7ee7bf631c3aa92160f1",
          "0x0b6a643dad3f953877110517f7b336518c8fc11d868bc72e76cd76c3b2f7dc1b",
          "0x04189ea6c2bd4b00fa6349adde17027eb7d76353a10bd07d0942639447cb43d3",
          "0x23bc8449d898a7524b2dfde263036cac2e14935134f8c3baf7f1e13ea2deec3c",
          "0x0017efa608d9941bc64d39e0b2593b742576dba257fab323d4c99c7a42107a16",
          "0x02f061475e9d8888b3877f9308e7758a16f91e3a34a5856f15ad0b9f2f92e2b4",
          "0x1f257d4d6f3277674a061330d73d6ba135da7cb0cba318686872fe1ef6d52e25",
          "0x195340f6c1f7b5f6158884bd237715149cea488edbfd80fc9b9cc61c384853ab",
          "0x273e200179c5c45d860b26a20b2c0853c1008f942459d5cdbed633ede031aa1d",
          "0x24bd0ecea1e1df97af0f296c0e792d676e2c8e02e808a158bdbe01431c5e4a48",
          "0x0c6e6f0f7c20811f404599d458af5c6cb41ab671599d6350df38e82104bc6835",
          "0x1dee1352470235cd8e129b5611fa953706bc08d58f6a3ef3d80370d8d19683a2",
          "0x1be0cc30343a168fda7c757ac0c7e5e16afddbfb7265878080725a12fa12ad4c",
          "0x1a449abf644f68a64c217c6a042a231107ca8d9c619208580eb76bbd9215d984",
          "0x080117dde58f228a459f59d90e64babe2daf476a9a2ca018faa3c5fecaac1789",
          "0x24ab9a167b61855e0f2c60bff098d5eb7d15166fab51f2b62c809de318d6d176",
          "0x2b56aca9d595460503363292bccdc80e823201f71b54bda684c93eb0893784f6",
          "0x057361ec23c87b30080ff1cdf3467d57c95a12afbfc48ab5e1e4de0162a41b5a",
          "0x1baed177177a25ecbbfaf4f204d9921eade3689ba1378cd9362cc14145089f95",
          "0x00ccdb6d5f4913d7656889c312975fdbe0e0309a841849fd808d75f593a71481",
          "0x2c52f5e1ef57de5dde528471cc1f0ee7839929df98ee743d9eff962515561910",
          "0x0234a4a32f767f2e1ca48dad3a2fdd3ff54b2ca3d53ce13fc9052414ad7f7555",
          "0x182b4c0c551ab0ce1990b472278f794ba9cc62abcc90a89efdd80776558e3433",
          "0x001ab2bbdbd043d2d7d1a4eb76db4de71fddf19edf10d7cdb9550e1846e53fd5",
          "0x206e6cd1e3154c113a762a628e24940907b41e90e7c2d43aa256ea5249978358",
          "0x27816cab4bec18577bd335bdaf8298798a261bb175137177d46ba95dd03dc8bb",
          "0x1680b632a04be3eb1ed64ef589440b3f9526b2ad82cf0b8839d3e7b0f585bc8c",
          "0x196b2cc0e6e07628df8234f58c027c190c75b0342511efea4c3724c4fedd6e75",
          "0x29ab0b6065ebbefc684608acc6bf3b5fc693770c38bf91b4be38fe6f72647486",
          "0x224ce814d39c382da2d65eccd9deb48056ede18c5efcb8e25515b727e540a859",
          "0x195e1cb28f38a9cb57b2c719b504f5fdd1d42559b6a368264fd0fbfefa66559f",
          "0x0e9e5eb70f4490ba6dbd1c0ee1d6724ccdd58acdf138785ce98ee3848ffb7840",
          "0x1995c9c8e520014e4412ec653839d781548cf71f46fbeb51919582226cbd5b21",
          "0x0886095cc376c87fa653000283a6eae11008982f27104afee198fc377f26e324",
          "0x13761e206b3e89b23de2342bfca860f9b0d9a36d486aa115565f9f52369c124d",
          "0x22a8c6cfc0e38a500a47515c519ad6a72506ec0d508de25942c10f51f0dfab81",
          "0x18985e9c7ea6f1a16962e4e27cf1aa4aa3086938b13f8ee9465a5ec7bebdee03",
          "0x215b523ce3f055c92eb148c00027d1ad406a2abd64081043e0d15492845b31a4",
          "0x0102f78c7513b093b885726b7df2e70298801b3e4019cdd42239d76448588c31",
          "0x0bce88602fd3a0f0ab8885891ad44045058f9ace11fdabd24e8dfa1b0a4ae727",
          "0x0745f760f8d466fc21043e2292e6cbb20b6227517f5200251129c5481f52fa4b",
          "0x0406de3807445c6d3cbdf7b174c410a998a1530fcca991535a2a262de4e2ee56",
          "0x26779e7346349068dbba66f784f87e243cc27cab59e887f7ed7a0117887d1acd",
          "0x25150652a08af8ca574c7c5c77ffd98b17259a1d914a6ea41db75014267949d8",
          "0x00bb8d13438040f674a79ed42202c5bf6e67de6fc3f6b65ca837ceab795fcc6f",
          "0x0c1ebf40eeaac3d4a192dd50ee25c0067f66eff6229d045d5a801067639ccf2c",
          "0x1a39731eb32fdb51dd793754f76103b5cab86947aad12d490d4951932ff20727",
          "0x2baad3d41b18ae10c463af1662ecb28c6988524edded36943672a0e857b960f8",
          "0x2e778da1518b6a4fad2e833e41466fb2fe82f4f8df1b5c218cdd3b7e49af67e1",
          "0x156dc717930d6490167743911e9bf4d4634ae049b53adab281698645f8b16dc6",
          "0x117f2ef1712692ab9dbdc51db4968b45f5e0104f9e5281329349d908b23e231c",
          "0x0b281b5d9dd2ca1a92e2d83b5087b6a08d6ab08330f47512aa047b2f88ba68cc",
          "0x1c2803766dd9096567a3366061764f8c916f2a2dd640b6eec0942ccb75d40767",
          "0x120174d53ba57d1a141bf40e4c705683668bd55800000aab6f34766b7b6575a2",
          "0x0c37b25020f8c76ea5536de54c722e47d01795d31b5ed73466e7d8b8ad376d46",
          "0x0a508f345cc9a8b0c30ba27651ba1c3ad8398025a4000a5c2500228c44fa91b8",
          "0x12afa49ff4d8b4c6c372f7e065840783cb9497eeacc847a340f61f1823cb2a8d",
          "0x29fc37eb5ec7cd004809516b7aa3c716f4f7f6e7772f443e0730b01dd5071a55",
          "0x2048fb9c1fdaced0fdc5159490db2977e57dbcbff7514ad1e52a271bf84dd1a8",
          "0x00a6c4223aabe583e899bbcd0314a4743181f1d5e03dbc11c8a4d02550fab64f",
          "0x15f462ab5b21c31557e25d9c22d8dc6a0cca93c8ed68a35655cff745686764d0",
          "0x27bc1c9af68edf8e3730197124be559f1472e7e3bba0d35e079b2d1b9e4271ef",
          "0x1a2ec148f900eeae38c0d3d6efda64e146929c71eb82da3139a3a85968ec6ebc",
          "0x04ff41cb553ca616d0616545922f2030b71b2354bcd1c55d7eabcaea8904c22e",
          "0x2f2c4e7b18a845fcd6add67009fc237b14a984619260a7b3d38712e03a0849b7",
          "0x22925c606a1f091c1d5c7122f8e1a8ffea6a140031106826ac53a9c69d84c0ab",
          "0x10e2a8c7b12bf70266c257573ca2594d8811633f77822d7c232b329c5b4e7279",
          "0x1712319595ae464992524bf8e488b783fa45b3548cd3f162d586bce31ec7184c",
          "0x2e9616987d3333388ea5a1cb56b4c161f279ff19454a64ade43daed4dcda5c0b",
          "0x2c68210d75660df5d9a8392a2805ea1612fc6137cf5b35a68fc1f03acfbfe4ca",
          "0x053cf3707283df8730b6e1f637d23c67b0b3533061a35bcb0cb0f9bbe4e8adc2",
          "0x07577491483d03d7769dacc79607b9897081c0095decdce3d227c059ddeddb66",
          "0x05639b2324c0b0af81c5b256ca6b2d46b95eaf855fc26cedbf90411312de4a12",
          "0x0ec90944eb8fc36c52f3fd13763714f41cea1ff487ea39d70bd94e9b7f8f16d5",
          "0x1e96cd3ac345bb2e5bd3e755922f84afaf303d6fb227fc68f703b93665f5ea96",
          "0x0408425405c66baa7d49858e6d5871e5b42ffebb0df885a824942da1e2e36d58",
          "0x284d77566b42f3913d41ebb0528b899426e0805aadb9957a534b022b081aa977",
          "0x0b044e5984887cda337f58c7ca50a78126deb5624f644516239427948d7d06bc",
          "0x0486972179ee3496795bded1c2fc9674c0c3f71b58150c9c525063a6f2b340d8",
          "0x25b7568316c4b2fef9b72543b6033b317a7bfe406623e47cb68e5c79296e6bee",
          "0x0cec9e74c344198703ceff28a4d11275f6c5c15738aa5a54a19269261ec6a8a8",
          "0x2bcc34a99345174c97a65e8978194486a9957c9d736f0ca39b98130801d1a114",
          "0x2ddb2ebc0ac98f6498c0f2be2d73e86a786940a1e8c558d8dbed8d6f44b02551",
          "0x2642b4a208e503e3480718d4d205351f43da183ed284ed7a385ef7cdca80bea8",
          "0x23fabdb09b481bc764102ae85ccf1e6ff71c7762f8bad04a2de3f7a025cb5087",
          "0x0ae4ed0ea6adb74b9d327fbcd01dbf37f5f6c467480c8aa5f495124cf70b823e",
          "0x09034e1a646d6674bef041afa774e3634faf8adcc7c71bc2ed6e03b0b4492016",
          "0x2817ea20b471a4bf138dec79d84f9f6c0015e0ca147b650683df4b3372b55ef2",
          "0x2dfb7f81425c2def6bfa4e833e51e912298397de78fd2aa17f6d1dd2f1379ca9",
          "0x137b5bdb746523c051d680be08daa6b0d54c9ff7099f2bf5ce894c24a8ef1f37",
          "0x03900ec7adc8e28af7046833dbad3fa1024e382aebe02bcb535243ddca21aa85",
          "0x2b285b6c23b25c52f2079863c759e6a10c33df8f191551ead53ea508511cb555",
          "0x1242067be2202d1b2c32b79c464e2d6c977e6fd12d8b35281e84c375864613d8",
          "0x1e8690f5b0a8729b9536ef2920abe7e6f3eee805237b158d997db63b17525eef",
          "0x047f5113e1287b5572c82edb369fb0f717a91f261ef9d81764a5b279ad9c13ba",
          "0x2d8800f21cd6774d5a6aa58ae2cd32593593d173b687122a4d61c44743902105",
          "0x274ba1521d5bc5c580647f10d1a4c4cadeef088685d1976979bad813756f84b0",
          "0x17895b7c10d6a475310d34a0737efaedddca8f1eee9d8d56e7fe4934c8b56441",
          "0x06eed11ae9f70df5ced09b1a6db258978cf5becad2f66d15761bf61e7dc13440",
          "0x3036b521c631ce5d3599e37f6a5daf928842cefcbcd2c6bf84e2db5ded748f09",
          "0x1f52d6e9ac28976c5a6fbf168c818478645c90d72e367609d7d7805a6367482d",
          "0x2a0e60356875d6ace1055932b3dd9ef39c3dd871091e96a323c1596cedb35e6b",
          "0x02089633a6194f3ed38eeec2c8f54d0c7f434938fdebb9c0e1830dbe5311c38f",
          "0x178c73d2769765d85383283fdb0d769457cfef0612baa963336bac1240b604c2",
          "0x2fc20bcaba9e3d96ebcdd710e3b341837d5d0db849e789f28c4be5004afa19a0",
          "0x151a423bee67fb14d5ad279f425213db7e0f21494982df872354c01f0f4a722c",
          "0x25d61619e135690c4e10e4afeb4f5578ad0f8e25c20735366895b31eebcdf47e",
          "0x15dd579bbd075429301d7295d3e685d832bf9f36c51277d09f2c3a664b045cd7",
          "0x236fa29b81678c8a109fd361c1ca90adf4423c13cf5b8cc1032b7283bcc959b1",
          "0x2a80cbac9b884e20368691bf1567cb7320537a977da10e53c5baea3446c01d1d",
          "0x11d4cb8957937b3628a3b3f4d27f276cc0c179b0c22b2c13fffbde85fd912378",
          "0x1289bf8ec507bf752a07c9b71efc0f800a52fbeb1637c5010fa54eadab402946",
          "0x26f842b1a99394297d25799f2f03dc9e4903e77d2ddc03ec2fb155466da6f303",
          "0x15944b9954b6182314e878fa2f9e091dcc40eadc48d37d39bdd5f09905c3a369",
          "0x0742166dcd8ebd8576a6bfe0f1fed13793928f84442c7465a0012f584426fadf",
          "0x08603d5a0e937b5353b56b05768fd50bde792e72fd61c06344cbd735707b68ff",
          "0x0caa1711c66e9301b6f25e21a31683d80bf58d86032d03bfd25b9777edb74a75",
          "0x2d6506da695d2087dff87b5f636ee676fab00c32ae45c75b3db345f3fe74a311",
          "0x0d9244b07af9b6eaeff6f84049cb2e01d75dc4cb68533606e976b8b300758c84",
          "0x243abc3c3382faa5dde3f1c3b432042d3f030ef6a1f5401aa37acd15cb1c8c46",
          "0x168416e0a6d275d30eda3989242e0723024727d3b0791b06f8e1bfe8efe40198",
          "0x1bcdeef03693d1ad0ea80c65688654affe634aa14cb11ae3a491681d9c5f8eeb",
          "0x02f66bfda3d2a1bdedb0ab8bf7eb1c4e551bef58d94fad7f7c231107e5653909",
          "0x019f6802171ab82a5922f023fdecc097eb8ac1fd0a1ed349afe9a7b94298975a",
          "0x195a1c738398feed8c760468a0556c232645a1dd862d87c1f508c949ad52c3ae",
          "0x0a36a3a46e6ec16567dfae1f853f360e6f24924810e838cb24ed1b0fce37f1e3",
          "0x002123c29ea87f7ea7b35c25f9e8dd3e81bbc3974c3c17c607cd840c09f374ae",
          "0x02a717499cb6c31f71f0f0352b0f5bfef3005b80e93a520b6e42b3985789e2d3",
          "0x0fc053584b0a4607a2293e18baa309c52fdc933e9ba90fd327aaa8c8cfc4daa1",
          "0x1310d1942129737b32e87a86f4573032b1b99ae3c6d71bafef7b494794855541",
          "0x1bfadae53fc82900f5761c558fee5e1218e6b2a6657e74b540969eeb49e0b8de",
          "0x28c08a69e5f3641460ff2c60b7579395650c5b6afb392da142d32de8677556ea",
          "0x223222ee42b6ca997f44d643ed6a3f2b040f47fe8cd922163d9d9d8b2622d909",
          "0x064dad4752e708ff29bb0842d2c452a71448b43949345690031cb125588876a0",
          "0x2d5ddc21797043996b22dcabb9a1ba6c82b71e9a1bc5919db8befd35411056a5",
          "0x26315fcd9b5e1a266ec8e9f6600f5a6e0bcdb22f926d61591e83fa21069c0e0b",
          "0x0759273a4177fcdeab23da38b478faf2d4f22e82f346aa754b0a1331bc8371ee",
          "0x09e13300eade70568fa0a840ea9729896ddd84c364d6279d34a0b9d1478fcf2a",
          "0x13e97ed3c16fad6cb5b7bb954f278f2434b22f8cc054463a145cbe0240d4f8bc",
          "0x05cd3486dca58f4eb221bc2cbedb8aa3027cde5765971bb1f61c272c5aa51ad0",
          "0x005ce523f6bc21daf1df468b12fd3e8665e1c1697816a9a671a3b2b6149c7de4",
          "0x2103066cc5df55e67cd7914028145fb71f089d671c83c5b537abea482b2d8cbb",
          "0x039f8077bd9b71f91ca0502eaccc1672c539f72329317aaf8173d2edd7636928",
          "0x2247bc0cc4373705b89672a2205346e6af3a6422e81b4f4885dc3af7cadcc5c5",
          "0x27bcc768bd31b9d00687a7e53c3ce53c426762706188790ea20b2e819638df80",
          "0x0d91cef51a76f7a62c51c73a2809732d79ac350159814ea536487368cfdfd708",
          "0x20a9ecdc649a26388dc68dc02343a0f167bad46d6aa1cd008537f627ba140730",
          "0x23134149a0d4567c6dfc911d5cb80c1a1016220d39e0c230325dae2941f528bb",
          "0x2a07507e9f030a42c6f29ccf1c9cc4f3e5a5b0dbf05874d5edadc03fe74b9474",
          "0x1bdf66bb1d57fd788e54ef29f06f35fdb2729b718ce81152cf3aafc64966110b",
          "0x275c33d07f9e7338ddf50783bf158d51be619bf77a12020cf5630b78e7e0d0b9",
          "0x16411554e55fe604a1ff1b3b5b7afb6a2bfd0f32c4070b55bf1ad234e8b28116",
          "0x073e6ac7e6af227557249ca1a5c55222a36c641bc2851a0dfcfb60831f6759a8",
          "0x10a6fde88c5f621d748543c76a218f95c202bbc3baca06838f31331b0556e12f",
          "0x29c5865a26588ca8a88128a072c8434cc97a1bcec23e136f038d29dcf96b0eb6",
          "0x233e0ef6ad132ed211b1911cdd569576fea8c17ca64e4d5dd516fcca07212c1a",
          "0x096f9b92b9cf2c7d664408a29860365f5b6adc238d878a476bded3e4d2e0b840",
          "0x2fc788fe8aad4c28b943bb57cb90edf6d7b1f1e835de1fbf3192e395db785554",
          "0x1bac0ed609233148503795fc5e114076ef7c9d722bc648dd0338d9689f6e023a",
          "0x001c35268aa030d6cd148e106e3fc23094e561573d8c72a69fc383643e2adc82",
          "0x2bb1f8fe5d998d0b8b92837ffb27bfe7a39ce39ff94fc167ddcc95a7202e34b2",
          "0x1a98576450a43e5e705b9af68cd0c145422da23945630b10b8e821dd61f9a2b2",
          "0x2714d37ee506efbc2ba9941043fb23f16af966f123d653f38388bcbdd50e6037",
          "0x175d0480ba14abf0bcb8075a03f4a2a01ff7ed75413917b53e50ea00cc2a4ad0",
          "0x203de45a037b75ef63761750dce08da2be7709701ec8158c17fc026fd084d541",
          "0x265aabfc78b70ca985c329080d6329a12560f76b01cc3d431a7283022193abf8",
          "0x135468dfbeb70e8c2edaffac8658a6c22b2ad1520ac0819c127af2ea5f3a87a8",
          "0x216a41e24329deda65a8a82001c84ce8286c61758447ff1bfa9d9293b6711fdd",
          "0x2887ed49797bd6652bed8bb99ae345ad70d1a27cdb21b9460bb6fd0d4fe482e6",
          "0x03e2bf82690c804bb6ee3c79dabd1892ea53a9811e2424a19fae446b8ae49cad",
          "0x0e6dce1bbe6e9e465cbe14dcc615611867414676dd8a8ce9946649b1c4e81116"
        ],
        [
          "0x123992df3b9daa65139ec13fbb52f7d348e134333684c1596feb0e8d8c3ad596",
          "0x2fa46f5dba9909ce9984a01e2af30b550dfec978be92b49119a3959c7f623703",
          "0x21d8f94d3bd98f0b63a7aacb175b2cca13b2dd8a8cf68fc36d94ae29401b2d2c",
          "0x1a8c06c61046e0f8dc6a39bc57aea0d07fd7db34e68f73579da89e116af87eb8",
          "0x298cd7046f58c0cab77523a58a6fdfd1401b89e7ae5eef4994442d167f7ad1d3",
          "0x0eac737966715df4a20b31ab693eda86a07f3e830fca475a6574d67fc5f19f63",
          "0x06b9b718bb3b6d45e0cbe6d5d9a2f096a77beb056821750d072262af2a70a33e",
          "0x0bccdad6e8b1fdfba846a9553fc7905b3f96e435d653eec3972565e1fbbc302a",
          "0x1b3ff4a6bc8490993abb7a002393cd1c1c007f49240ffc2ae1f1057cfcd8c7ad",
          "0x017f0c9452d70eecdf5cc8b6b0b205ec2da1de59750d6d1709751831b7e4ce26",
          "0x0cf1ab805bc47a10349ae77135ea95a4144a6ed0718fdeed42971c160791b269",
          "0x18dcacac61318af644ab0f2e61ef48c29a8aecfa0282e9fc325b5c0287103ce0",
          "0x16fbb3bdf4066e2b2f050b89b685d408711685db7e4638dec90ab1cc794350fe",
          "0x0eefd0b8617a1ecd7711ffd5f6c4cd0496487a1b1146e9f3d53275af18fc6c6f",
          "0x03c707d1835066fa30e7295a097a6ff463b85b778ca11d9bd2988d41b600aae2",
          "0x063ad3f6e3f8443e0908af99ce32d2c09606e84aae5e3ad30ed60d7a660738cb",
          "0x2cf67cc9cd3a5313d992e315010d90cb501f790bbe35a166392a51d90d117353",
          "0x2a6e7a7bf7c190d4e4f7f258d890dd41780e28f6b71e893716f70140f4406b34",
          "0x26140420009b6d8c7314723e66925badcf98440da6c2b97b66a52b98cbdf1d41",
          "0x212c611149d057b2ffefc9938ab1498d3b265392c73480b9cb02276906e445ba",
          "0x08918ab686c1a160a55db12010b20150f82632dd5933e27cd01129518cd9e952",
          "0x173ef7767749a3249b004eac7aa7e94dab20d465c65ebf4bab422f743f17d8b0",
          "0x049d90fb549e0e25790f5a6570755c68c13c97b18d67bb9199dc765355fcb1fe",
          "0x0d1aa7cfe6ca9e048ac6ce2cda40c6d64afbb8c15a7cd9e0222566f9922a1547",
          "0x2d82e2ccd8bd63b2ba44bc0f4cb5ec88142a4408acf1dad452a66e8219f667c9",
          "0x2ab73a842e0bbfe229ea1154bf8aeb48cf2fc289b939471d6b465b7202eb2354",
          "0x233f36bb205dd59d045310064408c6eaf710173a118f9ed21153c99a6b0783fc",
          "0x18c14a50595b8df32124bf57f8b8df430449f35986242a2ff79a644f510cef27",
          "0x186508d6b75c7902ed6a1948f91088c7cddf973d8cfcdb4e5a5b0cac6b5b22d0",
          "0x10bf42990104c39b27ef0ba451b510cbb001f8ec39a313d259be4309d6429bd2",
          "0x163e875fd9e04b255971072c0d2e7614ee1f3c7d2b93799aa1570bf73153f3ac",
          "0x2925a59f82c1472b8120988e3af6cf24c2ebec9a9f0f830bb5c826061c65eb8c",
          "0x25caf9ff6543dcc34e2d0b8c2af3b36ebef3d4c3fe62e2937ce590a38df2da1b",
          "0x14cc417fd674083090f4463f66180e4a3f38ca5ba87f4889e510ada924f6b799",
          "0x182550aed7fb3b7d92ef0b91f4916ac7f7db3b943103ae7ba2e09ec0f4a08517",
          "0x216305852467475a9f934d3b1132a99642fb79fb6bb91d948f391ac9e1c3f1c8",
          "0x0423b771f7215716cf97b3a72ccffe156bb9f8097c77a2b6dc67bb5848689b8d",
          "0x2247cd5af8b5ce0a983aede949f81dc7d3fc5a2cbbeb8d16ad43fa2c3a882537",
          "0x04990ce49123ed1eca92df7bca2b271d07ba4ae5a30c6a0119f77b51c3643d2f",
          "0x064e8bb29cc072af727af1b79af50896a6548dec41bac10f0319fbefc1bfef9d",
          "0x05f9be83351a037f574fd0f54d4e9ae5cadb930ceb51c91b07894f0160f8fa42",
          "0x202ce17e96cb24e8986cd09351ab9576d5a5167168f9d5f3877c4c5ce03629b6",
          "0x098a2fb5cb01868cde6424c4211b9549b8f550a7f03e7fcd8b5121516b3f452d",
          "0x2cbd947e532cda0f8f1b899ffbcdd5e0b6b08451e637fe53f3b4a8ea7832aa27",
          "0x0e0fa4620cfc943da81b40b6b42f86fe74e55900f800645ba66137b6b7c728a0",
          "0x2e1ca081c96d5abf2cc40b3797c38b0ae8a8ef5d76e6d03e9bb06741c2184123",
          "0x271cf3ea7b06b4e743585ae68997c0143542e405c70855787181163e4ac20b45",
          "0x09dea127972d2109cadb7e96abba7577c0ac0077312b9550f81b7716a92f5eab",
          "0x1982cc716da20b119525c64a3fe85f5e31baa97c76c82376999637d8ef1c8a07",
          "0x226600de8bb65b38ecf996e5bb26fd6288c690f16a5eedb730d939311d0c3ff1",
          "0x020f7b77fbbcad998e7744ca27c0f7c0c2550a3db90fe28944e73d01d24ae6cb",
          "0x1c2e445cfc98637aaebc2c1ab7b6d790ebac5027071d1057a945bc90437c49c2",
          "0x244b349502df4a33563b30237ee750e79bde135f0b0896f0d9cde04f1004171e",
          "0x10860a875d80bd71c6267c1d54b02fb58c890b1cffc35fa707fe6a94941281cd",
          "0x2eec5addecc4e24650dbbea531a0fef0dc327dc694f229b2526d2f30b2c499c1",
          "0x188bb7150b6e40624b02ea2821aeb6b52b1e85b5b724bc0ec512f8fa641182ca",
          "0x05e56007dabde2cc83d498371e99ada953ecd69e135ef0204d2d3b6cc1f49aa1",
          "0x2553755b36de611ed557768bb5513731474a0a8cdc6dba8f04f3031b07687b16",
          "0x1cf267dd9bfb6e678a82c7745857a63e2b57066a8626b52c0fd5ff42418aa65d",
          "0x106b2a40087375ea2988b8e0700fdd71d3716af2bfd0b6b0ca6e24ab4b4c25e1",
          "0x0b978e4a10dbcdcbc7e90aae2ca19615df674819cb611d93b4cbf5f2ff9a0a16",
          "0x2ed68ffba6a646e5047666b8ad69f6cb35ad096d6d34fe1ca67e532b5186bbf4",
          "0x23c632c2fe68d4f0a71b1ee63951c72b7d349797f07053df2ed33520ea3e94cd",
          "0x27fda5f826ce6a8340d12a584d4b9c84f0a4ea3c9d33eae8d6c0e23a5a9897e3",
          "0x2d24aa4c0772256e90344d20d46dfbdbb5e9dc132a4fb07faf8eddaa30da7674",
          "0x048d52c4e3d71485ce6af122ea136e60053e387d77369eedf8d9bbc663fb98f7",
          "0x0e0c1f005a1759dd161302fdb233cbac5fe151b5c2192255bd757b3ced899f92",
          "0x230d641c4552e5e55416e360eaa32900751de5ca53e8654af8d422eec627efb2",
          "0x02ff6fa8364a8cfb19e30be87d4cdeed9f957dd024f8138d535c6380a8b5d38a",
          "0x1689a04762a5ab1388f6a7257e7c72838513c57da7f546a2017ff128afe16171",
          "0x288d8c7325204250e8632f42debee8a31a470312ab2fd00afbc7694f95b827cd",
          "0x23996135af9f3a42a6db33fd55319a7caed8da2e6e338068d78f5408552c83c1",
          "0x15d052dadce14506fccd2690c333f8ecac382d2b6734726236cf9c7be278bbe4",
          "0x1494fb65e5993d96c30bf0bce3f56dce68a2de52299b4809cc119e37d8e042e6",
          "0x0b800ef8749f91b307947c581095ec9283c3b131be5ad5bda4200992fbff053c",
          "0x0bac1f53d5a7d39811bae7c1a79dc997fdd5f1270f72805fb05f5c52d77c1cb0",
          "0x179249893fa86ee067b47bbe8335b8942bc921ae0e082c303e32b809d939786e",
          "0x0985a7c9b42805d910a89e2dc9563e7e3449fd5b401ff4d5eac75dce7fcb420d",
          "0x2c1905b5f00c927a57a154c474427e31f3caab81981d621fb7fea525ccda9bfe",
          "0x0b23502ce04c0f4cb30c0bdb6c4f2a4f81c2ef223936f07ef57856f0a9bb4f70",
          "0x2dc051c1bcf637233ea7c5e086aed7dcdeb51b7a3525820bdd6eb65e578519ba",
          "0x273d8a4166dc3f53b1ff24c61f1a3b3007a282b526c7239eec81e92f51c741ae",
          "0x257988be7dc257a0c5dd7078b72f692c755f01ba3c8e57d82d9b969565dbf0fa",
          "0x213d0fe5a3e7608fa602f5b5ad5b8260654445ebd72492a32ad3991f3a5a6218",
          "0x07a383e7a221bc76fb14370d4b3eee8de502601a5e4d54b3370c4c502b097a8a",
          "0x18ce7b3e647ce9a3a90d0ed9aa57eb9a895d596a54958cc9702d8da219623e81",
          "0x12320ee10efc1f8118d3ea697574eae2dfaf8f29c183abd123392e3c2829900a",
          "0x093d0e1304c660fddafdb48295928fb6a83114827566cbcde26ef4c87c9fa89e",
          "0x2931b9295d96e5b97364b37daefda7dcbf3dc9f48ab3364da9dc6a7234d714c6",
          "0x1f533a1e4b4878c2fc2e9706e541d28481ce43b1627d0ba46596906cf3281624",
          "0x2517cb724d12ee6ebfa7b4b0d25cf0315466e98d8cac3ffbfb1a1bcdee0cf064",
          "0x00e43dc983bc8febeaad40130444ab7f9187185624149a7f274492d9bd8389ea",
          "0x186bc09a7ffc4edd291579876b77c2fd3eed0b1b83f21ddfb899039ceb77f379",
          "0x05d22a2f48f64658e181b8ae5e72e1a942796af2bfe6ef74ac9abf53ac65eeb4",
          "0x1f006e8d2463636bca787f765fd6ac723ad2c2e466ae6324f5d39f3eee58f0cd",
          "0x28913d42bdf680478ffd17374e895fe7799d9d100196f6ccc30dc08f39a479f7",
          "0x11b557c8d7e97bd99ae5f49e823308bd6e22694225d4029dfdcd836cb7c0ad7b",
          "0x0744b53926e1a0ef395bb04908b13326ae1866a68983c41de56fb7cc7dcce297",
          "0x2bfb2f2456a70989b165fb6a3ee6f944d28362935cabe516114980f141422a03",
          "0x3027047944ec82cef6240d1637070c622c5d28a74302de0efd6d4addd4dc2db2",
          "0x1ed0b5e4b29aeb0b5b3eb128cf031759cb3bc47cc1286657cdfe88c5c411d4a2",
          "0x263479ee77e44e8b2ab953e82ef63a7e4aff48f0e730f4782b225cb22777104f",
          "0x19904c84e55e1af3147cdb7f3a428265e20c1bbccbec2a5c8b950417ca2ee471",
          "0x2fa8468fea3204ed2a934a1eef7c78580a8da30c5ec5922fac89ab92ad81a3a4",
          "0x267c0b4b19662cf09b870e05f7441e042e5b962f73dfd78d23384dc7ea71afa5",
          "0x2f1504675041755409946e8c5f5432d35849ba7bea0d12512547ae684b83ac2d",
          "0x204199d64982f574327ff3f400705e0a53b25d59ae91ce0b9d31fdbba1ee2b0c",
          "0x0a087554e5511426780e457757c175cf6187a2efb9568a3d390d3a51c2297ccf",
          "0x2ef9b88428465f535cb04119f518d1c2052268455f1ab145ccf1693be92416ab",
          "0x2a96c9f200b477eba78316fc4497e08b2a4384b26c97c7b4ce877cb65ff5634f",
          "0x043293e61ef1b614850bc015dd316e2c7c54f12d2db746f7c0cdcb0ec551cfc2",
          "0x1d81e0e280611bf30989c1a74088493504b818b385d04d96ad298dbed9a7bdfb",
          "0x1ad9cf17b8368d98002ced2cf6ef9385a074c5e3aa0b2e12f4b768cc4804bde3",
          "0x19b30a27119ff50da2734b127ab83299a4b099694c31acc182ab453fc000ef95",
          "0x132d81f00bbef2804901c4073fcd9c817a63832c30d653063f67fd86482e1998",
          "0x292ea3ef2313863a1276b1f0e4973fa784dea78a1ec98f4d593947f6a4e73924",
          "0x028cfb5e0c41b0c77d987e737a5018787079f2ffa650102f2feb735c7d9bce84",
          "0x11afd75dc84353e2f9c2f05d1f3ca734eb45546b92396233a3f29f4e8f6791b3",
          "0x1aaf43ed6da39b453120bd0312f259294ea101b678dff427843c0fc816409ed6",
          "0x19db09df83387b1e4185cd79400609e79f37e5a4658dbee0785dab5dcce32868",
          "0x029cb3dcaf2ebb0f5b0b949e84278fed2d11db8c1fcf35e38189afca16c0cbfd",
          "0x2881df9352d274f0cfeb55df8ffeb1d0d81fcdab794082e2107e1b0426a730a2",
          "0x0628a0f9594c159206c7627a8f10748a1df2ce582b7604a8e64a7015ebddb65b",
          "0x22657393eb7ed9f4572c22cd7b9d5134d1fbce295c2a95f1afc6441de60d7fb8",
          "0x006325f509f0362714c4850daed8744062fcf8098608005e7d08b509bba33624",
          "0x171d6498b42b39345d56e8661ccc2b576ef449b1f8e5bdc5ac72d9f93dc3dd9a",
          "0x1be82f3b1cc9d849595d85e3398331186b6e4b4cbdf43ceeedbf04735315a8d2",
          "0x154711be62f23cd46086b9311b28eeada8d26323f8864de7e36e5543bcd7a38f",
          "0x19ece5d8c0b6cc07fa0119746e7f36c9c8d496ac1e1d95cd5bb8d769a6745cd8",
          "0x26d6162d8d9c9c60244cbcc1bb78814265fef97a53a168c62a43b9e6f4cb2d16",
          "0x28bb85fef9f65884e4a99a63a59a906d586cdd88bba7c51259b1fe6a375fe4af",
          "0x267ccac1e34271971e474179c5800526ceef2f1a6fddaac1de2299e92d9d8ce0",
          "0x2e6b4868d15390d8014248eec0c7f10d8ee9eebfa64025f961ece49a9ffad985",
          "0x17039023ba24e37bc4cde497e95d134ff35dde6fe093ed788e4839d2bcecf840",
          "0x214455d91fc747c6aa9908ad92d19b2dc75a84651183dcf43b9a256320c33e57",
          "0x0a07405f036d30ec77ec64b034b9fc5df2cff5877c3c67b7ab23b9f2d8dad2a4",
          "0x29f6807284b6e435ccc2fc14579baed0a60617e0ee33a358cb316811b3d8864a",
          "0x246894f6071fc9630f69187cb5ab506c05084114d2efcf231780b5d4b5c4a0c6",
          "0x04224081b90a67774d15ff98e6134493c01926f7ec25053de56215c145e5da67",
          "0x0d99cfe7649d1dfd292f11773bfff1ce3645ce4212787ed369c0a06b602bab21",
          "0x1fc76023333ba4dc0f2a8dbafbba1bff33b753fd77e6b1bdc4c796a031b7815a",
          "0x2f60e05fa1f7446735a3717a9d73728a5b20166537ffeb65707e5f7503e8acf3",
          "0x1a2b7508921fa054f58ca4d6eeb133453663c8979d6216ec9ee1240b8c894e80",
          "0x0a0aca4924bea6979a56e47af0bfa19c1db7d756bb4aade0a58e5bddd7ddcb4d",
          "0x262a2365cc780f62557c854566fa2c8822e6fdff8eadb90949faa5abd63a7f82",
          "0x19ad5a882f1dc4971429545dda3db1857b1ca0a246768b3a2b0014ba5a302439",
          "0x261e3360fb23c08e87b8f588bd59f08cef07bb48a6f1226a64cdc7d4de7e95ca",
          "0x069cc67cae46ded18fdc725c9cad9dd64e445c990271b0e2d2ccc42fdce0bf59",
          "0x162e21896c8d1f6c2b7ec16fb7ae7ef8c8ee19216ae189a6ef2d7ebdb1ce62c8",
          "0x128d42c08444d8956879995a105a336c4248ff9581139122ed9c9d55464ee9b3",
          "0x12e9391f7f131f13c39725c4414669bcc64c7a41b6764e687cee8e507433e3e9",
          "0x1de988e46c2c9a1c00d85dfafb1da7509bcb36422aab6052fd1f927df741c170",
          "0x2002cb8a779f93de8b44d7fb08cff50828e0771d65011f9954b424e67802cf0d",
          "0x28f6e5af2752c79d01a3c6c7d2930fdfb164989c20f905ccfc0982c29365d631",
          "0x19ebacb5354f7f272f5c12d6c71b39d89e14aaa4efbf987377337ffa3c026b2b",
          "0x05dd47c695cc6c95e2acd1bfc0ce335cb304a3c3380a94e8b7c070682ca869a1",
          "0x246bc3c037a3c9ae2bba7e73578b1a825e1672a7418801cc0743954534d9c0c7",
          "0x1b7ee255815ba7020f0cf78ceb9860815c0eeba268a72cecf9e3fd1a6870b3ae",
          "0x1ce04f643bc9513316211fdc0bc23c9a52bdaf4bccd9ca18590c1703a2d120e1",
          "0x2e3a6532afa95388b41ad59d7c2705445d7ce10c88d73411b7271f52ed4c44cb",
          "0x1f91121f2cbd1ead2f70f4f74729a25723721a895a87d73394cc9c1809fccfbb",
          "0x11082403388a99da0de3ed7d3b873f5abcf71f8bea6e358f5b0f17ca5276d926",
          "0x03962a691eb42cf5ef779bee82508641329ed9eeb7857f1cecc46dc93046e1f6",
          "0x0a67910e294583739c2b6d18ea5ad74e141bb2a353fcdd93fc3ef83f4fd7863a",
          "0x1c20f9bd1323709fda124f71e88901235f44c5e48287bf0f43b45443ddcbae5c",
          "0x111ab56e19274efd47392b70171dfdab0c8cef5b6de579de67f579e86b506fbd",
          "0x006e6b88e6f0cdf982de483aa04bb9d0fe288ee5863a6892915d125eaed786b4",
          "0x29bc59d6fba6d692e2a5e85ba50d6fd9bcfccc57e2bcbdddd65881af445fff84",
          "0x261d13ac441b2f30096c1f7f66a6d973244c2c070211275a37d49b1d70340edd",
          "0x077f8d9273ffda37ed1ea683f69349715f95986d26163f00d41c9e3c366ccbfc",
          "0x1678f9fc6c4502c235267f4b841d9543208542355ed7db420a609acb8e8ebdce",
          "0x1a65b41dc302b906fd144a594bea6d909f72fb707500b270837c9a249590075b",
          "0x265359bf0ead777264d18dbb4c4664301a23b10579368f40b433710b97f807a9",
          "0x2e944ce0eb653745a45632c070b931d08ecc4973ea091e5dc67125cc9045e41e",
          "0x27e3025a2d3e82614a4dd0550f59359f5643b86835926aed2eb0a7aa4f06219a",
          "0x0d9848e0d3b8bc8d43e5e6954e6f0181986e575054840f238cab4cb5b03fffc2",
          "0x1ac3aad815d8ec13b035decf67a685496a87b104bf57ef38cda855877fca7c75",
          "0x0c910186f912eef95fd673ead2281ffd0d5ce9c80cc51f6f931d0c75b9c0a3af",
          "0x248b63a76a024d5cf2e42a1bf70a954f01b1849dac31fd545a7cd74c5c3a1e54",
          "0x1a71fba60cd363b0be3ea3604a386cd1df466b5e69f93503858c69f5a868695e",
          "0x15a2869b6363cd02a472cbcec5c91bfa17242cedeab83084f0eedf28343178b1",
          "0x2813c10731f7694540eacde857786ab2443fb1891619243b8d4d9a529a733548",
          "0x2aa96905ef42bc1e8452087fe13dc3d55ce94062936fde48fc29f8698ed5ec50",
          "0x0f093d369fad0a0d255bfc311c4a58dc98a1900cf359b3e7d9688f6591b8d384",
          "0x068dbbc530967765cf7c7e69b8bee4ee08d486b420d5339626c8411ca984027d",
          "0x1dd0cab71570941ee962bd61dad1cb68a8ed8022adff356a67fcab3a6eaf5aee",
          "0x29a857f084ae7f2b506efd6cfb0672d63ae960cd1979f78d7f55d78259553777",
          "0x2081f7713f51b3930dfa0a6df8e83611bc8829cd1f8471b7e2e17f480d853c33",
          "0x2eea374a60ab1a20648cb908e605c6d8599ba601538635c8ccee00cabc85727b",
          "0x1a1b68bd2951131e6d71952233647e4165bc412da6d99c2197aa397d8d3ee5ba",
          "0x1defdf14415a78d5e6f287ae6e49ebb11822b8734c9df91c80e08de57b2d4f2b",
          "0x10040cc4fd20bacca69e26287138be4dac94040cc6224e2bfdc76661106a7249",
          "0x20ce67f32e823b988011d0c33abb0f725be96fc9ab5b2eb71012f5f80a55ff40",
          "0x202ecd50c82c9e1c79f0fe136518b22551c058c21b6eece43585bcd28cc4ea87",
          "0x10fba50c060fceb989d7536c3692f0c3243338210d145d6187926798b747087d",
          "0x02680936e402765dd6ccfdfe2dea719d3c507a7c551123c0f9dd59a58bf8dcb5",
          "0x102beb4a5c4c903eaef9ecb0d5794154620d7e9de84364fe0583be79b4de7cfb",
          "0x08d01db18faecd1a26c285be65414bf18ab012d7efb2675f4ae1d6f5e1370622",
          "0x112fe5d217f33c2d2d19762d286841366ba782b4bddfa33bda836fa2de419010",
          "0x064885f457cfafe6ece2944a9a935efdc717affcb4449ceb31a2792d5eea6765",
          "0x0bbdc371ab6d4296e73ed2078b99fa47d00c44cf51eec0ad4ad0aab9c09cd886",
          "0x0b9e59b699aa688dd12143e890b6fd0e34800d6b440f5f6b6c426b30ad078887",
          "0x0a5aa31d4fab8e109b0fdfc55eb14a5c2d9267d7f986b610170ce5543bfb30b7",
          "0x03239d50b4a0128e39c7673f2f99d88b5903eb1bb7704c6c0cdd4c31408a7a6b",
          "0x11a6945949a182759b6f1da60eadaf2c730cce66ea046f8f5eb781e7c45f8c9d",
          "0x0c502ff1bed8a68726803e222b87d59074956d834f2d63817f2a9efed3dc931e",
          "0x222d9daa384ae2b40e43e274cc07d2dbb9eb6988d03894b6fbf51336634c917e",
          "0x1df8fe0dda8e51971b917b0ff0f3e05ed4b00c09545351a1177805c50f6bc009",
          "0x222bb8290405c5b3373f1b199969c6d0f9ba8eb772f2497c55c0f551775b2635",
          "0x07902bec23d9f91a003a928eaaff9647ac030289dd5eacd8cafdd31b93264d10",
          "0x2c706f059d6a86ea496c2e4693d1717e4098ff87d05a82d738fd8883a82b9d5e",
          "0x05ae261694bee2446a1813608edec696f252922d33e94280aa805bfd843786f5",
          "0x186ee2ca779c5c26a193adf0ff47d9f333b750f99b77655011c64b3e8ccdf93d",
          "0x1c2ab6e96f68e3b2cce6da3465b19e3e4a437b1f209c55e6ef99a1ac0736bd11",
          "0x2fd17db7e1827169c32ccfc0ad14d9f97c7507f8ef88dc5d6f04b02203c37e55",
          "0x241fad7570628418ab9748ced53646c2e100aeebd62a6c73804f080de66d9720",
          "0x0016b5b53403ee6f47e6100c2778ca970b40af6be277e98b71032f894e6f6a2f",
          "0x000a095842f718e71645b2e81c90b3f0857c8c935b135b0cb25df1541d38c7ff",
          "0x303f2ba04eedf1425b5d7cc4be2c5088b9d2ef2bf478b9e9b8ce6ff1668909bd",
          "0x1494435142c96fc94e8d66d9b643e019163c6ac2e4e162056fa8feee51956667",
          "0x031cdbb9ad28ec57c4e1ac8ff66c791d04b25a28abcadae83a5573e3f3d4bfea",
          "0x0c787dff012f136b89ce3516c1cf867928d7107d218d62d51b0b2d8cc9850498",
          "0x0b20b314907f522e17a9d5da8c10fcf88cb956556cf077457c1e4a9ad5dc0b0d",
          "0x11d5cadfd04189c6c14a49e8ba6783540adc7ed70bf25afe25df9e2ffd9bc35f",
          "0x0852309d50f14538c8b7d35658d89ba30e29aab6626531aaa1185ff0cab8a1ff",
          "0x257395e7c190b3cdce5f934dbea907705008a30593c69293fd7105622602604a",
          "0x0aae37af5c3a542202935f590b667f979fb414273cc87931610a4b3144aebfb7",
          "0x1c1654a77feafcd7feeba94c32605f95ded03e13c08a6274c47edb41134e2444",
          "0x1480cc4cb3b9d9fc97b99e340fec19823dcd2edf198f7095ee5c70a9200995e0",
          "0x18711057869189126f88536accea4882a34797a9dd96a94cc87b8ea462417655",
          "0x0e9c4735ee797b9c70833a7a6be7c2cfcb962f070caaa649466fdf9bbe5828cd",
          "0x2e2e38ccea7ef6c29a922b027d31d9870ac0f9d27de19d70039bbd1f90ff74fc",
          "0x1d66369e95c2e76030e380d6538a93278f91ea5dd60e5a316b3dced27fc137a3",
          "0x29ef9102b5e671edc05f87bcceb6d900484e7ee7402a32ccc77fde2e7866a083",
          "0x2103b04c1735f7511eb775c7334a0bb6d626fb60937ba3761dad73a84478e3dd",
          "0x0dd1b6ba84a3c29b62923765068cf63c711bc1d6bb28eefe38a0e4861ad13963",
          "0x1eab4c7faabec58ab9b73b2baaf21e42880b77b0f0dfd30d38e1c955e9dd721b",
          "0x002e1a3f669dfc929b9cc84d96d489ece114d5be5db8571469f774cf6f6c8022",
          "0x1214ca424ea151785150d7db57b93cc6bbc8d75d1929938460a7c67f0c791f11",
          "0x2e174dd4aafff6103164d9165ff8319d9260c86218510a4d910341f0b4e01d38",
          "0x20b32f4a423617fef146da5f1a2695fcff6497ffaba30decf6ffe62ae952c435",
          "0x29f4dd468db0873491468b7009dbafc79951f3b83ab64efb8dd2e56cc9b31a8e",
          "0x2519801de4e58e4164f7f0d86994311c87f279a38afc4cb3c4d26cf41c642af0",
          "0x2ca123faf875de4eaad80eba73cb2a00f22eaf5b6109ef41a65d2d286f602cc1",
          "0x0efed651a61fa30b70937bde9d02b9b6a302a1aab706687b2233ae9b20331267",
          "0x13e21dbbfd7e5526bdc5075e73dee0aef45a0ed2c880b29b7dbd5c9e6439ee3f",
          "0x2c2486d85aadbc358b1065dd7b14957e8cf5bf7451afcb394659741cf6be5821",
          "0x2c97a5d5b9751943bc11e04c2d60a56c43d945b96b0982c8a3f5e63b73550d6b",
          "0x0d3876b0553694380adc086cc9272e1770e2f86b336ff78040419e5edccd8cf5",
          "0x12365c7cdd616d258f9ae3504b37d44e958c816a0bba374278e8b7ad79ab9679",
          "0x1b60354d16b01843540b8fc6961ff84a58ebe5e42b46d22aeb618e2db4ade65f",
          "0x03778fc723ccd03ad8c90c311c141963dea639d2524ad972d8496d129e1c2434",
          "0x2ee721dde852879e1238cb7a79207147b3d864e6c8a14a327e2e558b9df57662",
          "0x11020d0581ff8e79c8f5aa4d50be2dc792a038bcb61aec4ccea2ec4df2d0af4c",
          "0x1e0e921193e35b3c42ded003dcbbed8eae46712e15e63aec715f3f7031cf4f8f",
          "0x2a6c13d7afd6636c2d4d5d36f42c09ac3286b67703ac4d2c24dcf5a3add9020d",
          "0x27bddedea7d8d398b4b6e9152e17c2d092217609b109c14574f932bb02c88440",
          "0x2e13f9cbc356728e6d2b7a5c593aa9ecc9b900bb98901593d021d61eba6555a3",
          "0x109af33773e416156885bab0513dc199a0045d405d81bd2a151690bdafba3b66",
          "0x0bf7a121a985d20eebebf624f3837307415ae480954bf49552dd8c5f3e50301a",
          "0x0f78ba7c3e6d15d11292dd121aad459483271b5fe2ee56a63814d5db19290567",
          "0x1625df035eaa992f424ddc6dc88c1b700ac5e6d5981e2ad0df9b290a56bd5001",
          "0x1ac7d1f33bb598fe9581ac73b0aad4e9ace99ead01981fcf2c502a71afd56762",
          "0x2d37296ef0cd5676d0809608ba340cd7b202e2e1c2546d989417d303ec319337",
          "0x019caa62c5238e03ecdf75bb2c276be1805be3fe44a957d8aa3bf07cacf1c114",
          "0x0f32dea104320ce0f00919d90f9c6c76d496882791146c522a8acaceae3e4a48",
          "0x2ce5d2452c0a5a9fb65a4a6482f34998865be9a29f266f88a8affa850f5ec6e5",
          "0x135d590de80a0e717da7325c781aa167a25e5c310d92df83120e891cced24a8b",
          "0x1d3ce96a7cd79e94492e32b8983d62fac736499850722f7fe7dd1589706ab693",
          "0x0ea3a1e1f5dca3ff7d8671f2fecfb467f6a4e6516c8038a9306b36dc818321b2",
          "0x1ed08c4f0e16d144059100f05fb463098e3d869f342e0ef8b4a47afe74a83a25",
          "0x0adf612bc0c24e826135c7de0dba90fbe1bd249f7424f1970b52e8bb24d986ed",
          "0x240c424a024e59bea3a14fca73d7b63869eb9b68746ad9c356b93fb6eaa3e22b",
          "0x24dfab7238b05bf08f66fbe599763f63d5c70a181a7e9fe35daf0479e2b1cbd4",
          "0x160d79a03959c968dafb76ea3e08ffd2ce117d094e820d5e9f7ce1debd3bb08c",
          "0x1b65216187a1ca1679642d4c40aa05bff725bfa50248aa89d57f570c2fe9345a",
          "0x243503bad8adaf14a8e565013863c13a77f6f7a0fff571c1275b18f54bd77351",
          "0x06c2ad47bf4de574cacfba515d18ddaf782a8addfad1c18ee4391163c541a62c",
          "0x214366673d387148578fef89434bcfc7e0ce4eb08661904026b30ba10f3a1341",
          "0x1db81d98b4d4d83226ae4131301c8e3622a32e2b7884860e85257f5f7b7e6de4",
          "0x29d2bdbc19896e8faf0ce15d7c883bcbfaa38861d7c92299a6bef42f7c443f0f",
          "0x19295f72c5907e8d9f8d8cdecf7d193fa86404cbb7a85522f7fc33857b7a9c88",
          "0x0bf015760770cbe8e6f69080f3aca18258f2cd092e33d3ed62d8d19d144baca8",
          "0x06cb21aac0be8dc2528c3974724b38d73a918530976ff118d08764cd42e0b240",
          "0x1276fe2c751ba49fd5b75cab5b71f64aa0588ede807db1bd583c3d6ae6941356",
          "0x2a17fd8041ecd762f528d12067a09204f9296ea57374806c39896fe9499b98cf",
          "0x1904e2bf9c0512c72559e71e3f132f65259058f7d68b9d7d6da1a8f9f5caf674",
          "0x115b5eb99233a8a2200170733c4743b804c601b5d8d4656a138212d66eb89d38",
          "0x006b58885f0e09be6ba91176fc8a6172bc16d680f888a3d92f31a3bf213e7ef8",
          "0x13c6704e90535352934dcdc0483b4bb974d50beb7a5b6be30af0e46fbd7325ce",
          "0x0fbbcb96ccaf43c773ba1ce70613892543732feccc872975b8eb73e3fb4d54a5",
          "0x059b4df63dbd2bb66e0b2a826c5cbda96c338fcc38dbf9e9c46041918bdd8bfc",
          "0x27d859e7868c99d80f99d181e6ef7ea93a694623a89bbe57a6c8e7ee54be21fe",
          "0x21eaced08f9d0b42c6fa51f59d65f96598e9ca50d6cd1dd49b84fdc0646ed68f",
          "0x06815b7a3b80971d05fde6d7dc5cd2823363f38d0af5c0ff8abeaa71a323a2a7",
          "0x06a778d29aabebb5a3cd940b1c33f05551217b6005248e0e716bd5a10d558c6f",
          "0x14fe9fb1f167c6257ea010088115769e62b60ef3add0f3a22c9fe7a4918e94c7",
          "0x090305dff314174e27edebe574bd8f0c8fd85843e7d2627db607b2816e357dc1",
          "0x2ce23dfbeb8e1874b9ba894cb85f068bfb0497555cfd3dfaf3888aa492d20445",
          "0x1b0fd94dd9cfe774d9146be584ed0b25cb2c7495a708247f5763c2380e5c1cd5",
          "0x060bb716ba723a4e5f5faa179363a36774619d1e0cd91bf4789a1aadb3e612aa",
          "0x043b10c508e8681843eddc05e73b95b7f54da5a93b701cba4d6822f9c9dcf436",
          "0x126734e9502ba9fae4a314b67ade6ce8890e304a430e6c9f4fd60cb8ad69950d",
          "0x26edd35db97c2ab2ce27b503592859b4317a25a688f9743ef0dd9cc2619db7e7",
          "0x27b225e4a981af36cea863f591c8bc5aa95a4beb6d5c9abc5e03ba906ed72062",
          "0x1102728832f751c313ac6610fae58b9cbd511b51d6121b3bfa60f47db12518da",
          "0x18276cb011bdc6d75eb1c7d5d06cce10c7c9079c8c9920fa389b116620ee4141",
          "0x2502d7dece8cd7d7a04a1730bfd2868fc64f835dfe143cee18480c7c3fcada76",
          "0x06b20beaa575dd846254695068484611bbee1ae48285ba2c3d99c14e62581a2c",
          "0x063ab4a078fcb212275ff5fd06042bdbd17aceae994e2c27a1ba876139f8ec1a",
          "0x06372d5952bb69a460bf1333ef4ac6b20b07ad4ab4124dd4066a6cf66f406993",
          "0x0f41d4e3ef55da71cf4037c49d44c0a641f52a5a174f7abec522476e3c623ce0",
          "0x0f0ee9841b21b9b223c1d1a906993bd66b0ebcb7dafbe2b802bb8165c6011773",
          "0x01df2eb2fa423f01396e073390104cad8004a6a5f140a2b18ed658068167521a",
          "0x1ce05bc55407c883a5a41792ef3486ff22e403d38474cfa90f5ed30c8d30198c",
          "0x037f1fc7934bbd5fdc34388bfbd0f95467254e5df2b5b62caed0500a2594ddad",
          "0x1bd6a614004398f329b7080ffe69d3dff6de06c819fedea24aed16e4c47164e7",
          "0x0fc2e5cff7e9efd46fee62aa3b3f22bcc9f1a3bd8917e2e1cf5aa334d29d2a06",
          "0x274fa4e3d86e7ef8b0fdf1a81acce8f9ed2f2eb4627de75781a813f106a377e7",
          "0x193af1c5fa057ce682ec728cea90735935a22b5aff46ea2f803a29421aa950d6",
          "0x0e72c33ed6055471adad61d027c5ac1bf75444fc4e14988b42268f0787e29875",
          "0x1c75804a4ef1c81c83684d688c4429ab1a7e517dfc602c9a2443c59f32ee9614",
          "0x08803f69d83e0c3397e09dd47a80cf9f4e423437008cabad2e50110456c8c60d",
          "0x2d1214ed17bf81162a5dd43a3fdcf195fbf47426044cb22db538478e942b07e6",
          "0x0c85b24b79ab57504422135fb1cb0c5e1e3a5f0a06103c2486ee6a3eefac7288",
          "0x2e29f517dd1b30b791bfab03ce747f950202f0eb8267ef3f71ccec40e91d95e6",
          "0x13281c94a670fe5ab09773af42606740503509efd74c1ed993bc6afaf3d64174",
          "0x21a211407cef7b0442160acc9dbfce1a1e1d58c9e98f381a7eb48f7bda0f1e05",
          "0x085ef1e77f929bcffad1a93f920c1d8c8b3632e1e1a1ccd4ecb01602759e087e",
          "0x2b6f796de3509ea703c8da6276e3ea154b504170c59a8ec4581e9757d74ba759",
          "0x1fda5074fa5bae5e16fb4f2d18d589a7230b9a1c1e4d08a8069fc8d45b1de3cd",
          "0x02d22a3c0d324750d3be31219af32a8282c372dfde4861ef86ef15c3155dcf14",
          "0x0c21f4f4bdae07a79bb3a98cfb351aa629f3239c4d24aef92ea79bfac9c2fa25",
          "0x1b721ec1c1df81c83acd7a95ace16b3e2ff4297aabb6f58100b5dab06d3dc404",
          "0x27ec9e9e923edee58189d6c7f303ee3e5249c5aef78758c7f511cf87b953561f",
          "0x1ecf1060366dea9506fda0d01cba016db9620090a160d5a760a75d12d5d72e78",
          "0x25d432df312e005c69a06a1f004ec899575034da26392760d17acc80c39506cd",
          "0x17a0ea51f9a201ba2a0f857c9969a7f6bc6f5d5bc0e4957e1c0dfe4b202e4a24",
          "0x02d34c47b847d67c9b4dc313bc714ff223ab01127806ff6c922d8763f142024b",
          "0x020e59e5e5bb0951a660122fc1aefea294e7ccd5f9c79839282ebd9e119f96ca",
          "0x249c9c850173dba0ffea3568c28416020121c3d9990dfe2e917377467759267b",
          "0x01e8ec57b7681d631a02d530c9aeef93775869ef093de92014cdf85ee2d459da",
          "0x00f739dcb9f3ee6e7b5519774b540b2898bb6cba3629bb6c60e423b7eb6b5ffc",
          "0x0e016f0724fff85d781aeb1548d76c566e5c26aa7996edf504e4167285fda66e",
          "0x275270828b9ddc964bb8d68a6258543568c844947ed5ed94b3180cb874c68325",
          "0x00f1ca3fc28aacb8ac21a5b44bbeb0ae64cc339de13e04c74fce820f4f93e48d",
          "0x216b2f89c90105f570e0911bd1ce20e0664ffe01811cb777f90376719c0e20f3",
          "0x1a91edf90950cb2689d2c29cb22f8dea61ec41fb061f1b6002f72265694c784e",
          "0x2da3342eaf39a2b242713484462971afe53df55bed5f5d50d67d9138cd78fe84",
          "0x29f79c86f5a9c96fcaf2296be36425b72afaad4865cb9090848249158e2ea4b1",
          "0x0519426a15a599f20d2979302067dbd1454b46539c9499c65f6195b55c760337",
          "0x0f9c475cd72b7e2e3865e96baef89a149eacd3ab340210a9c5e0de6fc082e89d",
          "0x15f1d711979dfe13e45eeb9759a89f51db3d27594985890b88c9bf276922173a",
          "0x1f083ac0549a1ab00d4bc9066f05494148f60c9569e7989941c3f50fd6acf760",
          "0x1505ee4f79bc8187856d5f3f5a24de97aa082b8d452c63b17ac3a591451b747e",
          "0x0f20876d712f147e2fb9f7be6a51f346ea28447df529eb41342948fc2d8f096b",
          "0x1696d12d9ae779c92120ee715f6b8da11ea93af2673715a2df7731db91e360dc",
          "0x28485f438eec133b0be36b32fae82da57fb4006bd7f5bb15a267e7746b37bad1",
          "0x2780436f9da12461fbe31d979656e6d1a13386e0e6a5309b050ca819e10ad945",
          "0x271ea863673332df2bf2471e6c8935b037ea8318ea5b32379583f611e06b3da6",
          "0x29f1ba4b29c1daecb9839bdc08431bcabe68391ca540f68b484a4f8e96a9dc61",
          "0x294f4cc728dd423fdaf37377e069aba66f4d3000f1a559bf4c449103306031e3",
          "0x146b521b1c08c9181213ebdbc2a34fc3efd87ddeb1bfc5e5d17ca951f55abd17",
          "0x0dae0af973ea0b0fcdd8158ea51b9efdeed5eb664b84ef67eaa255fe4e55f3e2",
          "0x2604cccc370f0a50f3f726edf1242bcc131dddf2697853276c079ebfb883d8c2",
          "0x2873b19db1d03896d3d52d6f9361e3fdade5e7b2e6833e4d5ce4661186bbbb9f",
          "0x0b04d090bcc4cfabfa47f60043859aeb5f33a6de205dfdf0e3d099d4a8394e08",
          "0x0508a195c0ca583ec10156f205ca1bb6f6917318b8ed6ebb7347b77d72dcf748",
          "0x09262dfa80aaa0bc61c5891c237a519d3808c53fc05dce3d71f17c0e3f2a5eeb",
          "0x0ce6d25b1c6c1b89fa005c23619d877f2ab2fde708d30923669a49fe25b3c7dc",
          "0x2e69685b46c8050268dbc1040e23c739d7216b2c5e76108136d6895ded3ddc44",
          "0x0278fb3df3fe913657bccceb553138fa7b8ab6e062a5ddeadfdddd5b305ff822",
          "0x16da892ade35754e57d8f03f3e6f4110a9dc1639d9b6de65e479165ca49f7a4e",
          "0x159754924e7334854ff803a1782ffc059927a3c26dc43e661e09a1261bd7c94a",
          "0x2212ca6487b845ba4d16c09e224297d4b1a16e341e6c593d7fabadada3929d7a",
          "0x2dd088de831852d169aee1d6be69b52c5dee0b73e18fca91cdcef9b90396a047",
          "0x24ab42ad6749a14fe2f707ec53ac3b0315deecf421b9753032533e28491db30f",
          "0x2f6466e50ef3c61a0e6493b18d34911406e2e97d3551887af808d67e1ce9ae27",
          "0x1f5886fb8618c8711ec08de9477571f0eb6e462b8f5e5349f85631f059594480",
          "0x05ba34953959784a57c0019e916e2ade5d6a523110437cea9c2b94453dcdf2a0",
          "0x27aee67a3c6ef783cb55915165a5bbfdd86bc06c776f145048bb2401dcf17341",
          "0x0f57efc05e9f97e7f68c694ba2b3bf216eefbd5c71710a56f460682a6ba5d5ef",
          "0x1d35eb4a40a41dd77506d872a458ac93d7336dcb72f15b182a6702ca53b94eef",
          "0x18a33064586d5a702bc4bf64f70b44b5a77918255c2dffbefc537e40bd5951ff",
          "0x0b0ae5716e42b440b7423bd899319c880a4a674550b7bd036207e006ac7a2d21",
          "0x1136a0f6c004a2c57d21a00c40dec6f027b140b36d3594c1cdc1b0e8707b62f1",
          "0x21cec52ac4b2aa7f80f98eb75b4e0280591977d50b677b8ff10b0a3d028532ac",
          "0x284a636786fa63579b1541746901d48e440cf0c586f1b089cc45e8b830fad22e",
          "0x1d4a0aba0cac51c3261f7c483d89628d76748b0833cba6bbfcac5243e4bcb4da",
          "0x0410a065925e90fc70ed1aaa46477a8ac8193a10c48b5d84fb5e9cf2123ae24f",
          "0x301453b23d055c184a65ad6a6acffd9f520637fe751ff7b769409d512fc92f0f",
          "0x037827104287d94bbdc06584d36d4d5e2c46c4ea224f4e0dc0c3bb541f053b79",
          "0x294641ba8a02768c5e3b7f542d281c69dc2c3f2e8032f864295a64b08a93d993",
          "0x1c12f993f0f1edd809eeefae6932e5b88738b336bbe6f976f5f7a0a178ffeab0",
          "0x0cb2d948d38fb8e17c60ba6c67608c9ffd912e0a627eee756b8d22af8b9e5e43",
          "0x26f1ff731268d9bbd26ab33e588acec09fd5a4b70d60b553904f5e2d05e894c5",
          "0x09aef8a2029f82b76d80ad8a3926cb6e1174d8b8b89c59707c123473120b4c7d",
          "0x1be80cab12f4bd1737796bc770f17073c6b0046c327bcbf3a36e26406c775c74",
          "0x2476e7bc637f243d23d762cb3e2cd8430dad89762576cbdd918428a75828836a",
          "0x196d707ca5a9edcc0e3103aedfc60abdd1c9e577354d930be0d5b6d03617c209",
          "0x1d262487237e8503908d5375a1a798a9b8c0faccc056eddd8aa87d0a66b07d24",
          "0x2a21e03d41154bf3191f1a834b9af6b23d40bc01d027c2b4841fb23dc9ff715b",
          "0x029c647822a1ae565b2bf1249edaeba0cbb3ad730deb6d2e6618fbf9e74daad9",
          "0x23e1971175b8fbb26c0989dea82d8f4a3f708774c286e4ed2f8dfaedaf3db5e3",
          "0x1306188b792368ebda1f2e31e846854cbb34f175e01c92457959ee1c6da0ff3d",
          "0x127d0f7eb9804fc20ab4f8b9409834ae521645fffa86b0c221d9223fa0e9d2b2",
          "0x2441985bcace35a81b1f81fc6621215df0ba42441e450fc65e3519a0393b1196",
          "0x2df7d4eb115114544ac4f52fca36d6b33f09f639253e9e3549d5987b0e097136",
          "0x0f6c5518f92ee2e549d31adbb4e78036ef9aa3c2164c317aca92203e3b99f940",
          "0x26e2cc9dea47dc6807f87cd87c531b17a7f2f5ea86ac094e5d5a22fc3433dcdc",
          "0x1c71e33c864b0a8de4d10dc26f76bed55771d1601a0e04d399cb2397064c5cf8",
          "0x2a2f0b563b4083766c8b6c60872c32eeff2b207a1981c05b1f396178f01207af",
          "0x0c1af0bc5546250a7fddf1cbd3e7bcdbaf74ebb979535e0b343676dc9f9433ca",
          "0x018bdf2e7078dc40af1cbe488cb562fd32120499c4c972a6d43b92ce167ddfe5",
          "0x22b36859a16a8cdc3df10af2820715891f779660a1f9a25ef652019f640bef06",
          "0x10e697dbbc43c7ae2030f5d49974f8344d5e48ab66d635b41e7b96fbc7c6289e",
          "0x057deb4fe56390abbbdcd8822cab5da1207a0ad79423920622b0c4a12fef3552",
          "0x12b27c1639f162f846fb37ae7144f29137682ee7eb1632e791b4628aff4aac23",
          "0x0b2c7c76d01843a2d14655c23e8091afb6f3559d66c3bbf3d115dc9d70db5af2",
          "0x0b7d9684c0c8eca0e8c31634c9fb68b2e83abe72a3679b3678a8c9b1a13a4895",
          "0x13ab0a7fea9b2c828766d2fabf574248d2d7f7b2f8e60e261cef29cd916e9a2b",
          "0x2de3579d790ac367f66d90557b54668153a5c37d5391e92a6a5615c9d60be979",
          "0x1ba010b6d63b9538b281be3764e8e6231642c6a6735d89c9808fab7bada21f6e",
          "0x26ffdea8a8d9894ebbe02a705fb7506e12b1a7f100c5902584e4dcbe1f2119ac",
          "0x11ff1619a49d6abbb56390e3dbaaf0c1cb01b951a734218b3cbda4e8052ccba2",
          "0x260c36b80890befae89cbb3478b9f7b5b3f6b11ded47aae2c0d5e0c48d8e5174",
          "0x05ca88857cb0dd5f380e592aa37f6f94f7f0c3262131cef29948a1a49fd184fb",
          "0x18b3832a19eb7ee1a9dcf574302ee063ec19046b3b9eb7fb277a48ee8390e485",
          "0x2535291f03dad1e3c540e7f26201c2e330188fda58be783067698a1739f79369",
          "0x014f832b38a9f43af26e5ec2fabf6c4250083cf87f0ba86b95053e9182d1373e",
          "0x2548e6c4767c67691af55162d9ce0e45e89ea08a4232fa0a223fde869bfd3ea4",
          "0x023ecdaa3f942bd45ba46f528cbc81a51ce1425039f44781a7696f48d29dfbd1",
          "0x1611bb59a3b28756b840db3189a3a5ea22ec16845472abd68570ac771c8f15ee",
          "0x0bf7618845013330ff465f12ca95079ab72d0ca9d8a7e633048c11bf2c46c7ad",
          "0x15c88fa2eba3d087fd29f6de6fd864b875662ffa438144352d684717cdcd3ccd",
          "0x0d58d12798ab552f96f0d951e97cbeef887d858656b1f6af4010c80091b0c662",
          "0x0406eecd7bbc21eb04fa1e565745cc65445e4f82f4a241efb8bab06eaf9c7cbc",
          "0x2fa88eda065714b9ae5e18456130e31bd6f48d02b2415ec61ed209ad8ddc3164",
          "0x01749863aeab13ca512261103eab93b43fac53df6b04022c7cb7f17638f51c29",
          "0x01553263a318edf34429d901f3879932b72f5c32ad56e900abf47672f86f9a62",
          "0x028b7a8be47c2239079a01dd6d0e57ddc03fca9c6a58d3df6f234dfe82f96aca",
          "0x2c489bef0fac19bb187e5f8a064e67636f34b289c2e8adc76ecbdbb5105fc1c9",
          "0x1ff548c6690f5227d576668fef6741f999c9914cf4842e793fd5b5194bd0c3dd",
          "0x03c1b551c84903040faf3d6db934e83dafc5f0efdeb7a8feb27547724727a344",
          "0x1ee3620e8f0dda8c6f155ce81a9376009bcef2c8d8f6f266e04b7b80ac8cf867",
          "0x18e45fe7ea171fb11d0c4af5338568990f22147e14421f336fe6e0bcbb8a0014",
          "0x27393404521a55e0e1a4e58c561180040c18682814882f45aadd131b9f08753d",
          "0x07ff6857011a24b20d698ad43a5f959acefff729940e346ab18f9d2600f83d05",
          "0x2981b3a288b4327839542c5796ce2f09af9d022a604ffad61fe0077d76748bfe",
          "0x00dd5b0b8158e8a73995efd0b9d898d4fd3587011fa586cfe02ce800f3064033",
          "0x084c05fae73cbd6432e622cf9880f0d28337c6874b87b88ec0b45a55d393623d",
          "0x1e2ee2fee9b9bf8d3f3722e7028ff3af8e5ec6319fa6d8997dc115e5de2ea8b1",
          "0x0003418fc5909b62b0296e6eb42aa07a971050939e99ee371f6412e44e0ef577",
          "0x1c4994a2d41258064376be5cf3c99887aab74803f67c12c64e65aaf7f1ef56b2",
          "0x0413c2b38733961feda0a68493d3cf44febcd77952b8806ff583e8c40b31032e",
          "0x01c46ad39455255525b267b8a0533c5c66504f81ae9534bdd091ea98994997f1",
          "0x232fa2c090ff3ddea83adca0b9cd0e0918c9458b75b0ba3b7d677add820be289",
          "0x1cd5701c80a10f420eb34f534738c0dccfccb6c87ccf9aece35abab37cf05fba",
          "0x03b981fe0c71882c6194465537d5e402b816118aae94bf8518eb07a529e4ea54",
          "0x168a588900100006443658a61ca9d659f0ac451d1e0bfd5a6c6a3aee85723bea",
          "0x1e51f558bced240c65b7cebcdcbbdb7a9ab06e3580d46f318de84edc795e6f88",
          "0x1afa5a8c5fce396de56ec97dcf0317a6b7cbc3ee1f8e9a3bccd6d870022b750c",
          "0x1135efd63e8f8cc9cc0661dd49d36ac8ebf7900d90d66dd5fa816054d4017dca",
          "0x2914d21c2d2845ce2b14e951f42103599c8755015641db03c54df337103440ad",
          "0x20c87a2d759749aea9b2f0f8cc01452452e711e39eaf5a8b07100a197127eff6",
          "0x0db07920dd779c19fc1ea8ec5323d5af0d511b869db67dee0408785ed922905d",
          "0x0d631f18fadaccbfdd3b3be46772a3bcee276378cd2e46baba90d56468cc50b6",
          "0x2c500f790d463fb136f2d8d4cade62296e7d7c49bce18395b3014c9fc72d005a",
          "0x176a9eba97635d1e59b19faa2b3325a5b1a27376a16dec7317aae4afee02bfb4",
          "0x1202fce1a501b88b455ca44788d55214baeb3b54e37d1cc80f3d6ec0e09d4747",
          "0x222948377ee9d27fc6406007e1727b566b825decb95096c9aedfa8e6453a5cbc",
          "0x2ec66fc27d82aab2c98eb50e67a0932210f3c6e12456269d57ea9095f41166eb",
          "0x2f5c233dbe3571836fdac0915ce6596fc0844fec3d0bf5a9b968ca58c45846a3",
          "0x13889bb59b9c07953b52f66123c8c1380e6f272426103adcefdef4dbd2865da2",
          "0x1cf78f25faa52c747312d09fb4e9abb4f1e55a3da349cc8dcc6dca81cf99ac3a",
          "0x2c0eae2866d65c97077047d0f4c43c28c8d7f36af6a9c6fe07ec89219f1cc735",
          "0x28b816cd8b8c98163380066d0a50d8b0e06ff1c690b81b918c7ddd08a6b7066a",
          "0x1d46d91669ce5be6554fc3ecee895d41fdaeee189adee381abfb75ede1488cfa",
          "0x1841e03b9fc527450e4470aa8f0888d9ec8599db6b0f7222dca26cd43d22bb05",
          "0x2d2ead7b2078b09085805c2777c90f6c55744b49a73bbef04c899313bafa0f57",
          "0x01830a8db342676cf7492281b4cfc7b138c55d44daae47b14fc888e5bf745095",
          "0x074e4ce32bd14b01fe9f6729de2a12f218fe443fb708738a860f1910bdfa4678",
          "0x1fad4cb140fa4d559cf9525fb24e7f17494d239af679a030e7d1b7c9cffa949d",
          "0x1e50c6526c7324b97b7f338752bd700ca5bd6c0efcb225260224556d76a28331",
          "0x02cf0359b8da1abffffd73f90758645793f5d1112fe898e8af0c61e79e673e5b",
          "0x0a14ae497b49785ae7771f0dfef4bf41857bb2fd1f27d15c3cbc8ce3df9895cd",
          "0x16bfa02f57735662eac1c1f520b4b3f9c4bd26cd2792177b276068916954cd41",
          "0x0f6fa95e0117b734579f68dc59736c7f9afd9cdd4a90e13629eeabfd84525e9b",
          "0x1d59cafe27bdfd78f564894300763436daf93f863c3213c1a849d1c3169ba771",
          "0x289e39d6a2d4bc817ab104443b89b8a608b13bbb93b3ade772a63bee300bbc3a",
          "0x0d47edafd6a8d4651c27f6bee48e9756f5d6515af1a3a3512f59e9e3ebdcc331",
          "0x198d6aa9072a06de13128d7b17157f85994a10c4957262770cc4f59e6c6d332f",
          "0x174b80e4210f9d81be7bf70e3ab0b21de8065f7222e80cbbd3cf985d6aab0f05",
          "0x2d78036ba0948752ae78b1138b4b9c4b67f0d78a9c8965e1bbbfa356158532bf",
          "0x0c1ff404599af823908f32e607564f521b75812c670543e390cb02e3087ce924",
          "0x0a561b578f4be4c533151da1a529bc98f4940aa5b48f8c012a9c181d811b8f34",
          "0x2012a6ed245e48cf65030289a1cd01d26d3eb2e439bbc4f16f256adceb40bdec",
          "0x0824422abb64b758f600c18e6b998c19d82a9ffacb95f9eff9e018d5afb30baf",
          "0x250a091bc91301bb1393782a7e21eea81c0bc8e68161a3a4e5e4a8a7e30964ad",
          "0x1a4adbc8530eace4e19696d77a06e1eedeba3dec2e44accd3acfd7fae6d076b3",
          "0x25a511f7b8595b12278f2b05b4ed6684ee12b1d298fce27ccd6787b5a86e26bb",
          "0x07df25e8f76f32d99b99dd04d927c1b2fa1903776636e38f7188d8c2b73c3a54",
          "0x059421ced9bb92262f97e7c7beb8135539dd66bcd6f0bd41bd124a929823f75c",
          "0x26e1cdacde91e112796df70dd3a479b595b8cfe7c4c95b5956ed477a07813842",
          "0x298083deae9e0cc40a9b60e494e44e6efe93a8e0fe21181cb1351d97fc0d954b",
          "0x0f01fc7bf4d2f1ec8cb1af8ff17715316fc44387d515185f49a2443ad2a14ede",
          "0x186049573b3286b17003f9e5b27b8a36a78b8f32efbf0510d9fcc8fa7e73c5f0",
          "0x07335829d8e3758cbbfc4cc49b655ec758086676b4d3912da39f2ccdc4a28d14",
          "0x019d072d6e66aa6e034843cc3d7ca51c47df51f35dbbf4a99d34293fc3d59624",
          "0x2bea340a223b6665f5be6dde2eb55b40a05aae26d349a6c4af07e3458ab9be5d",
          "0x1b90f5c0e53409f8b573056438bd9e6395f5256fabb16006c009bcade1eecda7",
          "0x01932c3f3e1c4481420c603e23f16029d8b97603565f6314184776d865ba2e7e",
          "0x12e4e9f31be336777527af3ad443884e353552da362921074e023f14580b5e73",
          "0x25e7a09a55698b0c7323472b2409654ef12f2959a7656c0dcf35ad9a7926f3f1",
          "0x178c9238fb91fe512f6885e512e2a59b7686a34aed0fde1ddece6b1d08d422d4",
          "0x2b568832e6262628c31e405305f88402948b515d28861f0dfaef24921e7e352c",
          "0x146ca0dbfb0fbb98c162eb84b37228cfd7311e0d15d2e48def85f9d207bd175b",
          "0x0095371673ed3ee55892e373d5ad5c760268c83df7f50d44d29d366e1d7a9373",
          "0x051c57cc37343989744272869cdc94c0660bfcf6ea1c1c7ae51427fb298c9db4",
          "0x1c8bd96ca390714a2b0079ec38e25af0fe7a69fce1620f376f770e1325aa65df",
          "0x1712f67e82f90446550d51c1d2e4ebb1475d6e6043a5c46eda3170839785072a",
          "0x1c3363715dfea957de9614b6cdea17066c385a8864dad5b43aff09c963573925",
          "0x2672b8adef74adb0b71c0166de766a39e5e1cae03719aed0fccfb7ff432fe916",
          "0x10635771a37850c2417c96b7f5fa48a98734ffa59038d8b7136cb5d0c646e1aa",
          "0x0b16fd5ba97f28f5619f6989cf0d665e908cfe8a1fc24e5326461973d09bf0e7",
          "0x0027df27e1618278ed22497590175692d262d4aafddfe34bf8db619c37a66068",
          "0x036ab8de1d7df77301d16cb576a1346fd196d25534b22667f50628769ae136ec",
          "0x049ab0f37ec5bcc724a3ea321a91951f90cc00afdad5ba3d5081706df5e75e6c",
          "0x112fe3f664849af9f494ccf3ccf0d4b8f1e4a600c29631d059bc6ec343450c49",
          "0x232b3e1d4715272d5f18a036c137f0c6fa56878c9aa054cc33064e2a5d30f567",
          "0x056c91dceace41ab131a1c59ce4a320857224a09657ed82f7141e7619a5db545",
          "0x144cd983cfa259516382148e290dab14ba9b5d8e6e76b84ddae2ab086e7a7952",
          "0x1d21aad5c6b407e6eee7d0b55aa92ce0a32a39e918bb32bc8d45c28094a634af",
          "0x176f60be5a21b98d3469e1339bd5c7a0a8ee84a0d34339bef675d064e6e0a466",
          "0x0329d048658d0eefed7f3aaa9bc143b0c26636f13262176d650a1a7a2044d34b",
          "0x0fef28f114d6420d1a288f960fd9dd40bd4a5a02d58081621711ddd2887c757b",
          "0x08818813ba3e9a9329254e78e00a83b360c905c7202459cfad0ab47658276a81",
          "0x020a128b7112994e52c4849bba8d1217f13a957bb4d0ba6a0d97cf1914b65b07",
          "0x0980db3c7d2c8866e9ca0902c3b8e0a078585951ea4acbac245b61cf55a703af",
          "0x14f2bd6dc317fe19126b583da18e2d7175cfa704c5267b848a2ff9a12bb188c4",
          "0x11226fe9d81faa6c6a35d3a12230d63245061f2045361e757aa0c5ba7c5b3152",
          "0x1fc144aa275cad950ee4e3182bb87783dc45906b2e846e2703228e5d5328c1fb",
          "0x07858a3e15adfc14141090d972cdda3461908dbfd1c91b7e9b991760c1d47749",
          "0x19284489d7b53ed2549c5fc66331c71b9b31446eb3668c65d85ad094727d45e0",
          "0x0587702c19b9737857f99cfd021f8fc6af71b428e3ae90f9f5d2ec8e7140f5d8",
          "0x30602b296ce2450d72b00ee8cece9f896842ff3470b98e1cba2a1b3ad87539eb",
          "0x2776dbec079a5034700cd9c6e21404eabf7c13fa17d065a2d69d2987a718e78e",
          "0x28bdd009549a97fd0c29e9c30f7af9555d864aee05ad1886fb918d371ad29e90",
          "0x29791a2e17dc204afe645306f584ad767f2be949aa6d061f886f21d0401aad14",
          "0x22a667b65908699a22edc1697324bd37ffb0f18f00c0ba7292ec8e05470fbd76",
          "0x200d4863b2f35a853b7d5dcdc22bcffd8f45b60bd036c2f94907d873e5d95ca2",
          "0x18bdccaca11c8a10a12be6f7cc96d4557dd9cdbecd5f841e87303e3a312e9e23",
          "0x126ff502714b58c3a40ffa3d96df0de4e8aff3543975235bf3510c7ab22d897c",
          "0x0570fa4d1c92cf2917036fb2d477727e55b569b4a58891a07f96c500c28bbce2",
          "0x08c84000db8f725655f47432db3a4dde514dcf49b40fc4d301a17ce5d7228feb",
          "0x07212da8afb35376a4b9f93c20f7419ec704b22c898b20ebbf3ac9f1bf513038",
          "0x28c6bd8667a7e5336ebb7e53c724990fc8af6a059390353bee16d8c8dba971e0",
          "0x01790e7a8c59ebbdce18ea7b9be261b8848a8f5c69b3cd7a7b63a1b1e6d4c926",
          "0x09ce10751c2b7b90bce0d62e8fcb29fd3c8a0d286e93411fc66588a70a14a4fe",
          "0x203ec579417ebd5f056e1346a8c5be34cda66c9901fbb0bc27b8d773de7f665f",
          "0x2297981100bfd0bdbc495572aae5ed5676ecf2b693e33913b8fcffe65f57f4cf",
          "0x00e3fff36bb554a017f94e88130957a975d343d15c0772a67ce88bb1736db3e5",
          "0x22214f9dc31c1766784846260971d051aeee92226b6f13e2c4678689ee1304ba",
          "0x1eeccaaca23a1446309ca4c3d9b7d07962dbf8bcd8b3b37218f4199281263327",
          "0x1bd52cf0abbd32e888d402aac0a358309bc83eb74256efa17edc1abad196bf63",
          "0x26cd8ce2ace79114e2ee96fc1ca3801d012345c68750009745735edfc4e29d71",
          "0x1dd921013e6519e29b9aa0f52cc8c02fff3ad7af6a187ef0e90635008406dd02",
          "0x10358e1cb8ac12e54988a64bee4f1e94921f030a6926a00d57236283ea0c0ac2",
          "0x1ca1168b167aa5298bff96d82356b7387ebd1d70431c30b1c0c0df81fc0408c3",
          "0x08d1ab2692d291aaef2e50985c869485061578a2dfc37997222c81ef301fa942",
          "0x2d59780dd0a00a869516c6a0b300ed06f6fc39e0f9ead60507cb24c14444899c",
          "0x19b30f06355690afa779693f7f99c4a470f8ab8abd6989993d489a9b17180cb2",
          "0x1b93c9367d56b207bb1a2f171b56208c6aa1279be2572c1a59e65345d873768d",
          "0x2f8b45e1e079448ade818bcb785b0c8bcaeef004d956142347a08467e1961809",
          "0x239af691b7d6edf2761f88deeaec665169de99399cef819dcc37b4609b6cb4e0",
          "0x1260bd299d9e99321561090559b3f90afed3a36f36c4d397072de293d34cf8b3"
        ],
        [
          "0x2088ce9534577bf38be7bc457f2756d558d66e0c07b9cc001a580bd42cda0e77",
          "0x1b86e63908c4b12af43cec6810356c94d21c9e37d73dfff9742a58e0ec356be1",
          "0x09ca022ba1142d170f755212e2edc9d0a4ace33e16825f540d5d50d5a021a169",
          "0x277e69d47a133804241f6aebe9449be6e22c849c6d8ad8c938eaf613bc1aecd4",
          "0x17b57ea03754e24ae0ef425aa2ad931aac9ba5457a18cec594545a235db6b269",
          "0x11c740983395e0f4a026e2c7c939236375c9077755eb1a37a77d5a1fd74abac6",
          "0x1cd85529010dd7e2fb7ea403515bab5727556a479c59b822efc5a81eb37bc5bd",
          "0x2cb9354002cec4bcbfa985de34f43d702ced83d197aa374b5a1f96f87b12f292",
          "0x1f7af98e08f6877923f27a3dad40c525ac52f56fbbd878506544f9acd61aa32d",
          "0x2b15176925df33a45c9e99a7c4f26ad946b1075de58c7064c0ff92c431d31dd5",
          "0x22c89859b4d399d3a60a322d6b399b88061358493f3cb3653fda940e988c1ca3",
          "0x1a9f2730c80854d8f6dd98109363d405597039373af5055aa67fc18e5b1938fe",
          "0x040bae2c57fc68e3ce5e294998ea060e2563ebbac58ff8fc4a1a0a40575f0ed3",
          "0x16bf4f5622729467ee9749cc380605d2bc4d885cb99699aa2dd8565c4faf8b7e",
          "0x1045ecea044ba1cb1c3bf07ff4968390a3ea075001b21637ec7fcef61b11329a",
          "0x26a319fe6b7d6e08dd6cea9587cfe3f523492ece769f70f66d3b6197a262fd09",
          "0x28a5629b4c2083387eacb09c1571256d172ef1ed9c0738686da84216ba81bd6e",
          "0x186be22b6a063d18cc8760dba63b119cfc6d8897e32d6a0b19de280532fa9726",
          "0x2c41eaf9c0128c486c5595a1ced6b3dd15bd9b73218c6af88137cb8aa5c574e7",
          "0x11864265d76e8873b4d2ceccd18dada46ab7213321dbe0683727fa2df7e3cd7a",
          "0x1383e7371d7f3eb75f97461ff79565538166ede6fb6ac68b02cb60d8322467e4",
          "0x1a005346e9edc59573e3989f34c304ff1351de9642f398163602e138c59c7469",
          "0x2b541345bc4fe1589d649270ceed4b2dc6299c69a5d24b460e36f3b4eb486052",
          "0x213e74e3b88692068b420fdac7a62f3e90f87e8bd993310b982881b4ea7eb58d",
          "0x0254370fdf60e319df5d27b984e21d8979c86cc6c9db77b47e9e037d41ae2b84",
          "0x083b7377987bed3fbd0c5ee3279cccb319adaa660bb6a79ceee627f5a6369ecb",
          "0x0a2b26bbf2b84a55bc4c5b09b209d4a77bade4ecb0999e2a70021cccd4fbce1c",
          "0x287090d407c4c5293cd72bdd881ace1a4785c51889ac9ca053faef068533eb09",
          "0x00a9fcc21a234bc22a473c04931dde66476001ea6e32931277ca4cdab62a8587",
          "0x1d79fcc5066ff2a62d6ec0c096f3c0623f9722c5d10d6411386b8cf06606d116",
          "0x1d2da676081b7b0a7d87a57c6a6f2c91022a82291934ae8d646814f38b7c9cc3",
          "0x0121189d7362dba92f3bba28737ea247e85ff4b3ceabb4eadac26f7a79d371ad",
          "0x03ba01bdc7f31b4b3626831d5e82852a5da5a7f472f497564362ee63bd6d6102",
          "0x216487ac4eea81e4d835b220c7f1e7b7a3312df5ed0b6e606a169bdec89a35cb",
          "0x0eb5eb424bc72e5b20779d6138a7296dc333b4d98e4cede698c1d8f3069fc804",
          "0x1476087ee68863fe69d538de90f90bf271875fafec3aac6831fa17811afc45f6",
          "0x25995ecf079f4f81925ce8050e6bdd0b440e7adfb00da7e4dfd8a5aaec009f32",
          "0x01b590ea145df6152ff0e8eccb97f057eb378d3dc8585a8195a8fc6b03dddb21",
          "0x0ebfed12777ad9747734d82fb7ab59ebc85f07c3d055eb987dd42470e016bd52",
          "0x2e03b519ff070e31bad1ced25d02de18c5c073355890f26d6437c9990a3e232c",
          "0x028ed48befb70534a157c0bc8037347830ff6f7bffeda93a22663117c3038109",
          "0x21d5480ef2288cf37627083f5c6ff5806645d7878339792169d109945aa879cc",
          "0x2a017f4ca62717fe9d616fc3b74f426a22666a268eed190c92513679ff531866",
          "0x085cf123084d6b4b0b2b34cf06cf6f893e0a9db664958560e13102dca258a182",
          "0x01cab1eb61ae5a9c4f1b1f0f4cf71073d063cf8ea6ecb3a326bc3f2f24fc30ab",
          "0x08b659a737c0a7e198c51de07438e7faee94369715042367495f0305e89bb96f",
          "0x02b3adfef956007ba949e044a68115b0a9c895a81386e769744e7b5b2c307df6",
          "0x1a502a7b0883deaf9b24a7b451cf439d9b04c40af2fecc172b057b4fc00cafa6",
          "0x3048a536a2a75af41a0fa596752c83edb19c46c00e4072516a2cce33a42ce949",
          "0x01d008216832f77736b9f2c8eaf18d2ae69a7595a3d2e8725e75b3e9c66ab22c",
          "0x067389fa6719bb9e493424576d30d6254f1b7d54e69e1d1896c1b15ee85c0c20",
          "0x17da04cb5060861588a4dee60dacec407e08d6b19650359452705699bcdcabf4",
          "0x1e110b24526cf19448a04b71f91f834d903a08d3a7658e05ff0104ce6de14af0",
          "0x0b0a28b67269dcfb242231c7384d9b96c4406708f1a7bec26160e2352a820e34",
          "0x0226ba223bf5cc831bca604a2f55b324ad1d4b29b81ae33cbd7391ad0dca0c61",
          "0x1fa506fae71f617db6a04dba21eb6224accac5f7cff145947093bfce2f3f5cfc",
          "0x29724cc2973b5b34c4e53fb981f273589e7e0467a5b4b5a16d596f48844f0394",
          "0x20185815e6d5bd43d769b1e7b3a42369db44fada44534a9e41a181a7cd90cac4",
          "0x2cb5ecab94a2faf89986b565545493d5d8649d73a9f53133b614af6d89376612",
          "0x06772704a6a6c396f2f186272db825135c5986fbdbce0a3fd879bc27ee2134bf",
          "0x0112bff4736679a477440e744d7fc6191e168efe6c37fd0beeb6e64d30591851",
          "0x2faacc248d2f742b7dc50b013be9c4b2ea8d00be172832ad07ac0e268e391a57",
          "0x115ea053915c9231d6b9a71b4f3437e76d08af6e8fe7e42a3800136498df40aa",
          "0x0353e2c2845c0fdfc53f58394e2dbaca06164d10dbaf756127621b5a22181235",
          "0x29b3685900bbaca910363ae0cdec5f61cae2c52c7ede3ec010e2afeac748710e",
          "0x1a73ba985b824209d0a9f310920791fad9227b21bfd8e8a3a9f1c2fa89fac1a4",
          "0x274682d63a1d6a9eb5ea22e0558b145f5b9b5e845c8c9dceb83be943309a305f",
          "0x249de663dfdf6682ddc122e02aac0d79398f38e6089d92e2c892ccf949fcafcd",
          "0x076346a494ca499918229d2faf87b6b5afd4992f0d7d4023cbb677ea4376d4e2",
          "0x0712154eb43b0a3e8bdd94e29ad85939e220daf6931b84464741e64e9926b50e",
          "0x15bb7e127b9fc937642692a92d864960e249ddf327fc6c92afdedd89befc6c32",
          "0x0d438d885c3fce5b06a80584015eaf7a8ae05c60052c10ab80d80076800d8e11",
          "0x2bffb873c9b04762b2e362d6195c8013dcf7a5fd881894b7dc383c8aa34a9e0c",
          "0x24ea42c76f7350d08e8b1016663fdaa3f8552b9564e5ba2da45b76652707d6c0",
          "0x2a62ea21a0ade4740b808b9d838b4ef205b1193b579ecece0da34523c481dfbc",
          "0x0c49774a68f5274b468cea0f32211cc9a8ca864c6d32f2c644b1ab89edf475e9",
          "0x0a9b4d3d32564d83c24d4e052dc3072cffd61cbffaec957151fead13246073cc",
          "0x221179d848ae3c29baa0de8e19ad399cf000dcfce572ac310fc64bd4d201c3a1",
          "0x1702294352579a43d19da15dee1fdcb2a70a45de25203435e2340692f7f5e0a0",
          "0x059ab788273600685cf6de04f87ca9dbbceb1aefe37f779663a7ef5019d4d8e0",
          "0x23af64b1622be07735af1999691398ad6a034029a109ce435f12c1b21b41f599",
          "0x109ed21e2456ad7f94a0c6ca6ed942ef5e8132433e5fba6ed8f49b2038594516",
          "0x26d9ccfa5379d3fd6927a58958338d6037872271d891f19f67f70c39e0893326",
          "0x24ea9e2db358c1becf7dcd7d0e46979a647207816ae5a901fb00a6ccd991d0fe",
          "0x0015a9b8c33fce93ae3971d193a430be98eeca1d27735974cf502bfb20c71bbc",
          "0x2bbb366f79bc3baa138d79a96ab5cd14826bd3a85347e559550bf351f296dc1c",
          "0x0a1c76641eded157eaa1bf4aadc956791d9e7b29eb14d07654af052686b70e29",
          "0x0a8a9f9ee8ecf8ad0b5cd84217af26fdce2ca16c07bc747d103abcb48ab21fc2",
          "0x26d6852b5917f4e229c46824d00b44442b77d8e566fe3b3901ba6de2011dead6",
          "0x19601734c30cb2a44ee4a323b35f2c171ed67e0f3c1fcec7096e5f01fbae6885",
          "0x07895f7f029f84c3f17e359b0ee926d402505587f386cbb71070bc17cc87d044",
          "0x05807e0a2b2473f3b87130586c7868228eb4d9503bf25cc2b0f35a939e0ef483",
          "0x1ac9ba8eb9e2fde0a79886aa8c7dbd362aa490a355e07982828be3e5099d2fde",
          "0x231c7595f76fea5828672afc5bbb6463cd00e7a07346e2588af5638e3b321b40",
          "0x2e3d1677310217ce5fcc58f4039532ff946e2eff2b80d17f581ca78f0068672d",
          "0x0974163441712975a33b4093f922d7df17b2bdce7b7eb02c7830c5980464000e",
          "0x1cf5c1a4280822a59deecb82a64baab4edb87977e98ee29139bb51671b9919b2",
          "0x11ad46e13792150cf57933aa9476ec9184bfd5f23de46f1df78ed7e94cc81289",
          "0x0828fbfc0951c1ea0c0f3d5af2fe5796ed792a9c3cc4002b41e7a1bb8e63dae7",
          "0x02c720a8486e7122305304ecf3a00f99854535c4ff404fe82e30e99e8500fcf6",
          "0x09bdfc942fba8824c0a38d6f525f9176360d2881aa425028f1cd3a7fc3ef72c2",
          "0x1d954a0f93250e5581c6b897fbd72f4f2a943dde51e262e7dcc4a1b2ca82e2bb",
          "0x2b829352e297ab2106e74f9fe702f69635edf37e7ab0e1a7f92f14c98aed56eb",
          "0x12d3b917e58f1f44e1babaa341d1dac923dfac75482e108af1c33368734a904e",
          "0x28a9e6c65d06ed6ea47795bde9b177b5509305f85326062ad5015077afe4bbfb",
          "0x2bd3c33ae311c2f8d4ad82508b76df890c311fc8d232fbc2dc535fa593221ca8",
          "0x272d00d7a8fb1463bb624f1dd774edc8f3a0923bf9059bae3d84da23767d6873",
          "0x1355a796abdfaa903b81dfae32101a13068f5070440552eee0acf2a4d07d03bd",
          "0x0734bcbce4180ae16d4a6689b9b94f2b02cc7d74ca8ef1592cd16afe2a033728",
          "0x0778d4a614c2f76e28199d989a9052e2627464b620d91e7b6d3d15dbd4799d54",
          "0x16bbc980a67b2a65434d087c501859d127db377ae144ff634cb8574fe8bf869c",
          "0x12a3e7e197b0504c6894366245bed65e326db7c7aaf2c1c0d59e4bac10d633cf",
          "0x1f35f8c4431fb0dbf42d9d07334fd67f99160fa9f7e20d811f4b8fea7dd5d33f",
          "0x25d5bf1a863a0a6441cf55e7c85b8f232ff1556e77fbcc6d71e8bdf349bfdfbc",
          "0x15e6b8d9ab7e063a3638216ae471176e87ee4ce30cc24cad19587a23332320aa",
          "0x01929ef47c7322b77ebd0d1a40f9ec4d41eb2641bfba35a9cba7b708a534c9ca",
          "0x184f51e791edaa2dea7911151247bad4b0e864d7a8f678c7708ac65c51e3bb79",
          "0x2605adf5562d5055ffb284df1ec0d4e371eee0595ce1422ac535a410597cd866",
          "0x06e6d41feb832c2fe007e1bccc81442585bc9eae1612b8bc3d2a4925c239ad51",
          "0x137eb7da068955cde28db6ae5e780b7ae1c0d633cdd113bf0fde4345ac9c954d",
          "0x2e97930eb419f7353ba27b25879753fe64d7d187023ce2de4bf9e70eba6e9bb6",
          "0x13af409362087866e62d6860fdab159207405bf9c75a9efd9321736a1d812413",
          "0x0fd2f95404a9e92f46d57c80507375724966264560ebafb3ff2fd19259d47d62",
          "0x0bdd93ac21aedf31826fc3012fc8fff14384add521d98135df3ce70e47d38116",
          "0x083ea678d5a53e8a9b601906befbef23811a6137788bb873fefd5521f7d99f03",
          "0x08a9906be6e9ab93cbf1b94f090df2d02df6c6ccff6364c2ed6986d61f16af29",
          "0x187b1c82cfaf880449337cfa77f618e3ed19c604e65fb768b0333d8d535eaa47",
          "0x245005f814e38250751143117f5e27d5c173f0ca4ea2a81b1b8f3e90d7fec4f3",
          "0x25aa5a53ec5e71f3f47fb1cf8ea8c757fab69a61274fb36eada71deaf1614db2",
          "0x01c244a2ed1922753b39ec6b775f07cad91b14cd9b6578b64492c2cc4b0c8bb9",
          "0x01664e5c861216c4cb10cf3a3bd51afa0f3e59eae24fcd7e7daaa853d46c382e",
          "0x2af001a296c111e41e327ad212ed30234da2beada0449ea1d2e0f0a00e424074",
          "0x16022bdd67d2ade15f661a287dfe23915433b270f28c24e6066e45039aed813b",
          "0x132d7ca5f935f3e8864268ad723e8780df36916384a54b812c74a749a26826f6",
          "0x20bdab9829e48c89a99d0e8b0d69b79a4a273808807ade4ec5db95fd184c4f37",
          "0x28db494350ae9c81ab52d719ea05f98dc2afe87bc1afe556161e61772258a951",
          "0x19fc92f1d2c1dc043af3427b77ea74e80ab9f6041e0e51d1b24d9cb9f3fb3ed0",
          "0x16bea7126b8f072ab6c86afca80b606cb90c7e5fd02bbdba1dd733c3cb884705",
          "0x1fc57b168a5badca15a417ebb4bf5beb28fd09e0dff889550a126f5833f1fd5d",
          "0x1ad20d1a3ee559b6334be4ba911dec957d56699cf37dd7b97d23dcbc65bd9afd",
          "0x2173430a6842061f027393a443b6e25e59a3e5bcd20895ade0fcd7bebcd88885",
          "0x11673173043e15137361db05a0b067147a23d7f3003680f3e1534b183fe27cd8",
          "0x037c80af5ed51c1c22181f3e7738806984493eb998add05556eff65129259ff2",
          "0x1d70b961246d2262cacd8c0954040548b63fbd25f3038285c36f6b44e9b9ff5f",
          "0x2184448a7bb80d176dbe3de73f383a909635e4610c25864b2c63252186b6c44b",
          "0x03bdca6b22fb80cf9e7b317190ebbb9f6c7d3c96c1bf7d5013f36521a5dba7d0",
          "0x2b65873313d5bffa44d510dcb3f55048436f4eea91a100ec0d1af952eb64b247",
          "0x2a7fd02ef10db1c9dc03c9cbe82e857cf06f37ea10e7e3f539b53778ca274616",
          "0x1cb880cea192153865713565ee4255ce72da23b3d2142d265fbc2196fb8b569f",
          "0x16628b6f83fc36bbc1d60029a69c843d27484f594a7e3ba8d47cdfa548a91a56",
          "0x26fa9b84e855f1069e76e037104f8886b760d4919bed798e2e4b8dbe0080f16e",
          "0x0ee86c87bdf0ecd526e36a6c4ac9fc9bf05b9161856d658c1b9ecd80da9e9687",
          "0x08a5179993a8056405527cb82b6f619984c63cd115ffed3a6734ffa85267191f",
          "0x047aa61e4bf0721ac4e0a2f291e62124bcc2ad3949dcf96e875f45df7eeb5437",
          "0x263a511f033e1fbdc6d282b52712a09bf5d1fec21ea8bbfe2eb1ef5bc4f21148",
          "0x226520bf730486e2d8c859b449bbda7631b86432a2c100dd7386c9b1f993f34e",
          "0x2baef27107a52854788f0c5a940f5a4df0d18d38b893cbb1157b386a7d356357",
          "0x18022cca17f26818d54e60e300b5c949d9c92122f7de5651a60cf70c8da5fc52",
          "0x07baad301d58460d1e6ed10f52abf1bd785caef8565777fed94dd67de6717d25",
          "0x1e476106c4bce3903a5aac6e110df2cc1a7f71b4135be3662f4b01047e248a6a",
          "0x1e019dea5028d23b2df063c210466a88c3fc1ebdedccb8045c7e9d1bb6e77a98",
          "0x0dd55f006559bb6747b254d29a73f5ea7174c6b6067e730a5f9a9908186308e2",
          "0x0993085a8024a598e0c9059d3b919fb2ebc81be408cb96fe38a48a952c029189",
          "0x143f3cbf98e40971b2115493ee06e26c7893787bfcfb13b39f165869ec7fb9b7",
          "0x0525ff28fa24291b8d033b021395754fa030d497312cc17caafd008524eda07d",
          "0x2d9fdc18cd2586b9f449142017909392025095182d5f40d5911f708eb05cd852",
          "0x230997202fcd6f051e1bf1e59a9d01188e3621d613fe0e78e6dfb400efb43f45",
          "0x044b56469ffbbc9d0c0f075e20f390d30d11981a767e507b80aef7ed69e7171f",
          "0x1507d88bbe10b21c23a94555d1e4d379aa71672e002450393eaf7a23736150b7",
          "0x104d6752a761b50026377ec798404f71151b3cf6a9ea1be93c6840594824e9b6",
          "0x25276305cdeae4c16558de60da72941446a9fd2226aa604d44bbff12b1e0ec23",
          "0x10f3cefb054d630bd7dc4c7cabd97940dca683dad8cc35a6d0c30cbd9812051c",
          "0x0e406cbfa384c6b24ed043ff3cb1d6891baff0585afc4fcecc7cccec809df03d",
          "0x18f36033fcf64f1bda0c12616b00b611863efdb8966db7ed3534cfda40aeaf0d",
          "0x165d022a34cf10ad3255723635a51a35ba2a6db07572dba106dc56ca6c937c52",
          "0x223c8c9aed305b3d18265b56ecb7a4cfc4b10e58baa1365827a539c47819424f",
          "0x2103fee94674840b1aa185a1f8221ee4511a2b5268f1ac96d7b28c8984fde6d6",
          "0x1c1396433bb9eac9a02abf2390973c1723ec5cd55297a387a92806f78ef9d384",
          "0x1befee24005a88d2c9ae9226169e898106996fd32fecb72b0cb4decf109f1b92",
          "0x1adc49f1f1b405df727a64e98675ea0ac2fc742c806f0d5950c8ac41350f5184",
          "0x10a0e0cab76db0b6a00799dab1f2e4a74ef739173cfaab2d03eae240c9c847cb",
          "0x1a9aff62d6c66fdfed0eb91b6c4f974c1e047c0b27ef49b10d2933af1af3f997",
          "0x261967f6840995daf7411034526eb5ac725f95e21fc36c8ed191873985f95cb4",
          "0x1338030f85fcd2fae09eb016f4254086e1af2f88fe7dbe29d183c89ed5286098",
          "0x02c53745d1f0e66499ff109e777727e750c1134914cbb4d52bdf1649c7911ada",
          "0x2740100354406de4d94eb857a1c5df1c0e88d8b0b82d10c1276ea7d9f62a05d0",
          "0x0b8a9153d3d643f0a9f7dc08f24d70863e4f150d1c32ac8905a6226887c9bcef",
          "0x25dd73d81ea8918c9c1ff69b0b86a0ed3801ed1aa4059d94eb72cf548b2eea1d",
          "0x253d813cf05f2ff1c7d6622bdb9faaff277b4d0312a5888a9dcd12891ad1526f",
          "0x2523322d2d2a78cc54c944b57752bdd8d2c8e62e3af51e020eb2c15ed830f5f6",
          "0x2ac9c2d60d456848e8dfd47499cdbd4f2377f3b4ac98e10e2ae3e4f83b0071b4",
          "0x2a4e35f1df833442f9ccb8c75523b1ac8a9716174f47fb0830d94f9bc4386bcf",
          "0x270e7f6b15f2c0e0926147cbf79a7330b676d174acb65b730522dccb096f9fdb",
          "0x1933ef75d4b862f2274634e1f5a4e50ce899f15214f0b8feaebb2ca2ef52ced2",
          "0x165130ddf77a82db84278a31841109da4108d364bbdc6acbb1b0fa7aa5175dc5",
          "0x2fc1fe031dcd4538d5d8b1340d0d37df5505e965b7e7dc4c19895b9f6fceda6c",
          "0x0e1ead2be6f64559d903eaeb6e02a7c85d546422e7730e360a1e4bcc0f62f16f",
          "0x0a983360bf32392d5df30a2e4b22535a4f161fda3d05b1a5067d278e21c8e54c",
          "0x2e27e61828693607c17eff9bb1e5ed0baeef782e879c5230b86d6a79d729f4ce",
          "0x0d1cea26a08207e522ace505e837caa2ce7b105cbd04e7c838c1acd006ffa53f",
          "0x0b958dabc9a8066de9e4cef89abc82e3396a03568376fb44ccde4c38cb2a1944",
          "0x16f5b42d88f8d4f787ffff796bcf8175b1cdce307261dec86cf2034a9b88bbe8",
          "0x12b68aec2db262e0a61f0fd4b976b00ddbcf7546ef27f47d7435a288c2b6c63a",
          "0x1d2238d8d9768dc639d06ca5870e3503f3f81ef863300944c87b77628ab6d84d",
          "0x0d164e32fca3c3c8da3ae332a831cc9a95e75d4833ae232ae382bdc6b790d91a",
          "0x02fcdde6d6eabd7f2fa19234fb157661b762a5c47b57739a62000d7f6ca8ef3b",
          "0x0f133b8b1e54f43484574647812ca377c802a1590df5e5b8f9c8c21908efbe37",
          "0x03057ea8932e9bf7d1a4bad8241e14f1e60afd13ba4e90afb472d9dd29c42bde",
          "0x23dbcb6ecb4807740debdc825f7764571bc93f33645825d0e45c88b0088a9f18",
          "0x01b90754a2058217cdb64ab45e24c2e29423bc3a76f8289579927ecdf63edac9",
          "0x28db800ae16d7033c8e107e198aeaabbf9d0271c74d957c6bb9514a0f038fa91",
          "0x02f97a36ef93a7904cbdbdc36e5ef374e58eaf37b5b9439473cbe477c3fab178",
          "0x1bad1d9637a6ad6db5cbd19ba7b955a45b9e8089d1697445a130743e03ed3caf",
          "0x2b96f520dda8251a878b28bf96d281855b9c43220b0a3279179753f740edae80",
          "0x041f97f76c60b28e0fdf7974bf922b7a0999e0e0e40c654378ae12843212909d",
          "0x13b5cf57475057a2f5fb6d08093123973aef9726cbd9835b95616c2aed5588e0",
          "0x2ca43aed5aea162e8c9be92a15e7ad0af84d44f3d2e398b5f7491fa2df12deee",
          "0x089f6b1ec8b51cd1e6ea69b9649520a6f0f2f96ea11df270ab0c5d9adb5c3df0",
          "0x04f510cfc7e528370babb8ed7c50c34c6041772627793a0f3711d1300b4d1275",
          "0x260e12c47d0ab52563affcdd5c2862f4bad5b7af4ee037ea5f8164d0f13d1059",
          "0x1a656424760e75468aedd8515b3111e16cc0d60f8dce451f7bb35b12dec772b7",
          "0x00cc850e959c567bed20058b6769fc27a6c70cf72f222b80879e9bdfbc6711a9",
          "0x088947910eb3b43ebd8688695c64ac020e19d0bbe875a7f3a0b699bc60f18cac",
          "0x2c25c236bb48035f45fde5b178105655ace9f3f9afb09071e790dc4babdc86be",
          "0x12dfe1bc28654f5c9ba65865769c9e47f2bde0d79ddbdda21704904b2905da68",
          "0x05645b68f99a564ff08f745e1413bd83ab5b0442f0b8efaa2a986a6cfb2fd8fb",
          "0x17cf3ec9831b4d6ead640d912e41b4c72e9c259126bf6310fa4b110e43864c75",
          "0x12b15f28fefe5d6fa519ab9cc67a78c57dd721ab44af286e72fbbd5689a66f61",
          "0x2da44f7210520779cbdacfaab2e1ef01edda8eedb6fe6d037ffaf8e59842a00b",
          "0x137ff7323fe757f32afa165f11588b403bd393d5c9a961cd2f7da2e5d9a894cc",
          "0x1318105fa9fe1549f04ef48679c73d46b91ee0bf27b4451195de945c8cf78aff",
          "0x1408a4259df52a491775936b2c2d476a121708c312e635ef8d1f843c3ba3438d",
          "0x10cf20dd5734c18880dec5be44ae2ddcc4f447f20cac98c95193eb7571585d07",
          "0x2787fe4623bd3264e0c8b5a471974ac1feb1e37fbc3a9c8a4ea74d6010b7d08e",
          "0x1b90e21074907545c1dec3c59dbf2a6b1f703258bc03707e33db582d45ab172e",
          "0x0b8e912a5ec5a0bfb779a0801b90863edfd9429a7b3632bb5022fdbc40636cfb",
          "0x0d9982378cd9a8370bb7a555c34df3183ee6b0d8abf31f1f547a3993044188db",
          "0x1e497bcfd5c95cdfd630b0afbf6d376f29a468d1cd3ecde56f6940221d248af4",
          "0x2d602401cabbc69dff3dd552e271eec29a5a4acbc935686ccff9a15076585b7a",
          "0x170a5f4518f58544330671ad2a361f2c803c0d355f3e10a5784951f2abefa707",
          "0x21b3a23c3a553d401c08502eca497be938776af671edfe44c784956acf98865e",
          "0x224dd497bf3a4247b9c48c9ac3cee5307490e824a14204ed88c2b1166e8e479a",
          "0x2654965a3bf3c92422fb54e676ac8401baaf0f68d42664e300624a375302e0ef",
          "0x1d525f4105f51b69c006828670e7785b726e95be160ee1a3e299677820839f32",
          "0x28f88d089f421ca2bfe697270fc0f34f50ec41a1ede53612c52db74479b4b323",
          "0x082e621153ee34324e9fb7ff3d123fc9560ef9af0fa0f948db24d1c8e6f07a9c",
          "0x07f8578337523867b1d9403e9ca61ad99c0d7d5bcde4f19d8752e12a4d5805f7",
          "0x2e52f30dd05931adb7d7e85255849b062ba1cf2eb8d59208b5bda8e35d69819a",
          "0x14cb3e56b2b8c6605ba04261a8b117791caf26f7c233bb183f83f72ef4c8f345",
          "0x2fd6b4e6c892609fda21414dd8712de845eab305be627df4d36c8d325c9bd7ac",
          "0x0325898c8434f7ca32ebd73f53df3b1adb0c9940a69e9191fd996a4a96157bf8",
          "0x08f50a7b584dc022b85d6a16a0d3dff6b8a7ec4dcf5ec066f99fc4644d6d5d48",
          "0x29c5bbb8eb214fb285ca30a43cfd7141d9ceb8a19ff3c970f2bbf4c9bae9e11f",
          "0x1264cbd9ec001175211e2856a78901e4088f1eb7eaf5934999e1997307e7432c",
          "0x28a0e7819aa0251e9cf2bdabf64fadbd51dc9416533ae33f7cb97fd177688504",
          "0x1a9be651c412fee6c800848477cbb67e4c52fc23e51ade9c48f6af307ec621d6",
          "0x1bf70a24fe7fc8946fdde6f556b3ed4b03c33005cbe7f34ac11296e5b0c75f6d",
          "0x2f56c8c0387e5e44cf4921abd33b1590cad0719e932a36195c5138e0c6ac83c2",
          "0x1109db87b7684f4927b2afeeff00608af5f211920eb8d638e3a7c943b293fede",
          "0x1851c29804025b6f9c69c80891035590a51d13032cd576d332ca89222bc75787",
          "0x0909e4cdc0bc47f2df4898106b5c40f25c7137e1d5ac9a986c9f66fd5dfadfba",
          "0x2ae3e90e2650e286d5913d4dd1e71d4f233659701b319aa228e16af9f010e07e",
          "0x06a6c015f95173441f7a40d4f1bde04eb60fbc4dc72fdab7dd81ec557235d530",
          "0x2f6ab5d35ccfe9ea366da257c8596fa6ff30d6c46816a3bd3d484c97f8d2446c",
          "0x01f9c60308182eb6d4a83f9272bc220a8745d9c9127050899bf6426f7ab57cdd",
          "0x2f514c412bfd9754e6798e4c3cb13d5e4c4b29609d3ea5617ded35bc01d799d8",
          "0x14c4162b9c9eefb97941b1f133bb18225d28294d092cb8917afcb3e08abcd9cc",
          "0x19921fd625c66ec67ecd8af3d6ff0e0a3cb650e1e72b3fc98884b00354085b32",
          "0x1c852aefc9296753e1268739ac15d2c6d21de3436c816f75f93b8debf37eb6ca",
          "0x04bf4a69b1aa4f304afaa1dd1bf60de1f559e8167edddac1eb88ad9d02745fb8",
          "0x240a791f3b8bb62d5d9aae80f341cb569fe3fe72e7183d8e5830165e4d123753",
          "0x151b295b4242e0c09fef7bc5ef40f1e3c8551654186d62cc663ee4f28ff5e764",
          "0x086eb3d30bc4d80664a074a09739dc8c497c93cf7e657954b0cbf7676165f23d",
          "0x17aa8992d7b901eade7eacd95a8e89382a292a7121ab0ebbebe0dd62622c21c4",
          "0x1a5b3345a4c0d875663657607b5c7ff832f489b23a3c43962008570f96eb8de8",
          "0x2f03b46d9eeedcd7f8f4cf2cf710e48ce3f31d1364f03345b2a7964b01e6347c",
          "0x0fef583e7e8e102feba879f7bd60241870a0291723aa354a35259e0a40050d45",
          "0x2e07b5d70ca583cf4d9baffacd02d7d80fa5e523abbd895086a36288b969fa6a",
          "0x24599dbfa1dd1f4714d585248cf23ca1394b858af8e904c0517baedbf2f176df",
          "0x00a826afd370bcb65b66189e8d986777e61377388d8727e407b500fb5291f8ee",
          "0x28745950870bc1848adbc5f4bc03415f0a2bf23e905e7d33cad03de907081e3b",
          "0x219e6dcda590fc88d405673d2cb4710f8b5747b46dd9914d1be4081714cace58",
          "0x296692077b42e972399f17ba71ffededd95185ff7253d9d1f41747c6f27dbe6a",
          "0x2ccc5f0e2049d426841862f32f8062829fb5d826a6a483dd5078de859f9cbceb",
          "0x04f915a4fabc8ab208a615dd89fa207d367700bbb9bc061d07fa90a70feffda2",
          "0x2e04b7c1aa853f9ee5e4fbb5cd7b6e60ccea4ed5928a34f4e59ea9eba8794708",
          "0x08700df51138b36c0ef2bed12bd78340ec69b04a2e1b865108036391b4b6db3a",
          "0x2503336398f165bdea8d4929db1dd0b3710416fd63d7aadcec41bb7062c24782",
          "0x05633785a50a9c77573ab10d893341a0cc2df072ed8eab9a2996a47a527bdaed",
          "0x0ba4084e44c50e1412a4c982dc0d8a0d4622513b7c96e9fccb2c3be2d3901e1c",
          "0x2d6f32cb761406dfa9e03d7ff8a43bae106dc4519c61c3996cc9cccd8f307c86",
          "0x2f959c830737e631395846373b1f7d003c8e6bae3aea2edb73491244f8373687",
          "0x14863af59792adb1bb40901664349217498d999250cc0a858db27aed54fbaa38",
          "0x27623d101b1f922899f9c5783e1fdbb1e7552826e4d6b58d6df8d986937cdc82",
          "0x247328a4d9ce81603e37ea72cc5d1c895c21f09305301bf1411c0798602a6268",
          "0x1921909aaad03cc78a6cfbed6c1056e3d93a25a5496cafaca12af4ce324c6081",
          "0x0a85c0358cf388b47d14d42feafbdd4392df154f649b7213e29cf101aed00d80",
          "0x01bac04734a5920d65d67aaee04165de621beb56f902ca483860f7077537512e",
          "0x1dd1720966b3231bb00b08d6b8bac6c76dee5454f784134b93d8c70ab3eed999",
          "0x22897debc6eb2a7f36bee1e7f42ed4b0d37ad696535d82d39ccfbbe92e86c08e",
          "0x2ad01bb42b95d113b3b91ad88c69a33c1e94dc85512bc5168ee73065b387e175",
          "0x2e82bd0a053ce03af9aa947df5f131791529a57f8360a2cd697eaa177c6000b0",
          "0x2d2daeaeaa93a5f9d8b6529f00c4c6d691c3bc4efbfc8e7c2f08ae3e44e1f4bb",
          "0x0ab08914b2de57397983bace0b327f98c1a9c1e58c76ef2e716cc305727a0f72",
          "0x2758796cd1c178ed0c433c4f1b6b19d42ffa1bc884c3cd1ccca107cb2bc91998",
          "0x063df5b0349016e7bda4741ec898c74e4a30fc4f1b59fb713a824992311e30f4",
          "0x23713016555546753d41abd69e6fb91e4344b7c05838048ed0641cedc5fc6728",
          "0x26bdfc0a894998e693b7e2059d6a528aa86ab57eb031b96b53fe8b5adb74c075",
          "0x08897118f75cc8e9115dac581b9553cb407a1de135b632541bb734f53985286a",
          "0x02ef8eb2c7b26f7a57691ecb1e15a40afa9b3a5557abe81146ea6f6d4960c346",
          "0x254e8e5fc11b992348fd7a2c9f4a5a0b586bcaaf12603658b25910f63cf08b01",
          "0x02f41c21b73dd4e7b510dca16e7b4b4277301da5fbbd59db03d3a32b89c57b7c",
          "0x253f09ce9ecfd2aeeae98ba1b29806bc2871e5fc67bff13e303db99618e1d0a0",
          "0x04395eb655582d03f25775e66ae67be0aaf7c63ceffbbea9226b04b0e795bfc9",
          "0x13711235c3d21dd749e3e41bd048a32bfa2e796e26b72e05c999e6e6126e402c",
          "0x083c75117510a37d43b5513963fbd0f9f33590ddcc297e3cdd9ea42add7a175b",
          "0x26cc9b5718d84e606582d35d8fdbda944c6525ddcd7488cff21d4d0d823dcea9",
          "0x0e8978f047929b1a94601499634a8da020b9a46d0b1187d54504ed8a344d56e4",
          "0x2b11423af39a5d15be397439b5ca50aa9a6d41234acabed2006247688f6fa805",
          "0x21a56381040c702dda5a31a5aa275ce692685625e5aa77bbc430382573b402b6",
          "0x19a869e15b3f9b965016feca2cb82a2f14c800945ba49db74aad8e9346af07f6",
          "0x2b01c5a2baa16f9569d4670098466f05bf3ae097aa930771b76f24afa6be50d5",
          "0x0586148573b6b56617f94602fd6c86ad4a71b3fc67a35448d64eaea532582124",
          "0x040352e19809dd93bc7a2c549bc19cb007872e0599a3127a3e7704411894f98a",
          "0x2d6486b8e7b9549ea86cf044e8950ffa36974e842e1fef876561e1346c5a893a",
          "0x2ea9d2e1b7d07c9a3895565840e25843c9debe589044f305c1b5872c74e5a49f",
          "0x12e0dc4105acd8692b7cea0bd76da34aaeb8f6d00ecf84b4f062270413a8087a",
          "0x0da9c10656e6f42c3ce7c980a70c9d793db4df8307599a33a491f24b6368290f",
          "0x02f3551c6a648387da629c96633d5cc99360d9b89aec23c18ac76af21b11a850",
          "0x202de33a6fce9dfe8aeea34af1ed5c74093386c8a553d3a3da46e134731dde14",
          "0x07372d41054dbc009e3e91f902d57a213f043575f3427e35768a5a52482b1b7c",
          "0x02f7e35a4bbe9699949a819262943c97e8e938cd999cd911a9edbc716e2454fa",
          "0x2a27b84a7422e29b8cc73bf54bf535b011606c819b4baa6824b6123036d73ff1",
          "0x19527e9093b313d5d2638c863499839ff5d8e5f98e74b312fa0c63aff7161a3e",
          "0x08571a6b8b730363299666231e3c49ed231d1e355d93894c8562ba033147f025",
          "0x2c0f32778edfe932d912961c81d88e98d4fb64caea2cc2d4e3f213a5d2a1b9ed",
          "0x2710a63e84f8bf3b15da09e69bc24c567f84a4577610b19cc58191b2b1453ea0",
          "0x2d4b8440f168745ed84c3e393f75bdc0b0fb3f148e4ee77b525ebc258a953dd7",
          "0x234901ff3ec65e0a4f629bf6e96eaf379aea7c808ca9ee79b6b796895917684f",
          "0x28a529a627cfc689ba1bb3372072518c7720b450975339e87865c36be526e5e6",
          "0x1a1af260473d83489a6a466ddc1855fdc6e83d73b5c5c0fed554af11c6cef5eb",
          "0x2fd594dc14997e8e0123f3af16c9289d088264cc16a8119e8f02ab7270952924",
          "0x0d3564e44716de8c02d8f8278b0d2f819658234bc4db59147fa3a5dc23eec833",
          "0x293e9ac448bada42377dd8b02d5ae5695e886e0f8e43f01b38266aada3cfaa0d",
          "0x2186e961df0728bcd7b667d35e95f354cfb1ee1288aefb7e0b2381296daecdb8",
          "0x1b4972ee03b2787a27219cdeab7acdb5dce44bf8368a0c43e1e3b8c8a7f49e74",
          "0x01105ad26651d5ac52e817c32d86a3b10f05738fce996b2fa905ce1c3279522a",
          "0x072b770a70dab242ac30d03f5d2477595cf521ba7c91478d72e45358569ef30c",
          "0x1e399a42196a8061079e9d61ec97ff8c837195bb936206997f5a93021b70d275",
          "0x24f50ccc3a68ab3e2cba453ec40a8796a3c59735dd3303bcfadb6218aefb7d6a",
          "0x14fe92dc9227b42df23f8a5a0a7a2f50bc119f01dfe708b9118f75616714bd3c",
          "0x24713d85951736c77b66941c007d170282271958c98fd42d6b12696a7065916f",
          "0x05cf2ad05c75de38238f63258c8dfce0d1b698dede7feea9a97b263cce815ceb",
          "0x2d62695c7008a11d0c874b40395a695fffaaea6e6bfce85ae1580dc48218aa26",
          "0x19e47227e74d5563126770fa5ba61405ea6f348565c3aadad0830b3ef5d775a0",
          "0x20e43ff580378bafe2074a6b2fd50c74594537f98565f2d65ed8c15e5ca1084a",
          "0x264e4841309ac1aae92ddd9cb4d973e237406d50d2849c7091bf1c1bf5c1273e",
          "0x1238beacedd4f53b35b578af1c30c077f4289680658fb26ae1b4c0b2f710e604",
          "0x0d90474c262aac1913f37459d4f2055dade903de9bc02fa5fc7c137cce05fe35",
          "0x0f5aaf4827d5f40e00235ebd1cd1b9f6ebf3388383e692573b95cae4f653ad82",
          "0x2cdda4350f35334773cd823df37097ee967c28d62d0c45c34d0cee4008834893",
          "0x1c0c8c2ebb6860e64dc46755a7e072795bc2c78832a618bb6a2d5d0911b7d768",
          "0x269fa26069db1cf0cb705bc3584c0150b85642d4f243d5e68d7240b8e8c03276",
          "0x09b443b0a7676575b9a6d3f003609fa7c7b6226341ac8389258881d994fa91c8",
          "0x191b4697a8e295ab80f81b25743fe13f3fb6998e9131e99a86f22bd33e7bddbc",
          "0x0b488b6a875f238bc324f04288ad865c8577e8f906a971ad4bb9d91775645730",
          "0x275928b25e503c9c95c01b18a5d30081bb0cd31c36cd172bde1db83287f5f5e6",
          "0x1fde053dd87291d7e14f0f2e7b7461b49f60e4afc39cfdcde65d70f65c3b026f",
          "0x29b2c386816e9d3f76100e8fb9543329ff88ac29199a181358dc231aa1dd3e0b",
          "0x04987de3e3121811ec3c10421005e133fe1ce9c2aa7d7c54a26f425cd19767c5",
          "0x19a23ba97426bfa81b757e35aa3559050628665eb496ed8732d409942fb6e16b",
          "0x12333e97d1f0e3280b5e2f9d96561b2c04d001d2b393791a861fdc26c1b7f767",
          "0x23e48a5b646d353895d06928a181d75ad25c95a7672f3a1f4917ca03baff3227",
          "0x1b6bff423317d2c2721965972823ca2e93b8f2bb0a52245cedcd94587d596382",
          "0x16af0f387b9ba94c0ba6d176df30701ff378b3524680aafda4f7c4df4b088b07",
          "0x1bfad9c1a92234ed97c51ac7dc2d80f2e908c098b28bbe712cb75b92797a2103",
          "0x29bb5064073e9a6aaec7bfd94d48fe2207d90ea8962530f388442ca4d95e6256",
          "0x1cbe456ec3f8d8849e10fea36509acc3647edc3e765f4de7489264f5e34033e5",
          "0x0087a35062dbd735636f76cef6fab3b412749781f03b39b181495a62aae42424",
          "0x1f1219145ff0bf15d9645e347879a7347f9a6a5f3dea9a9bf9495174d228bcc3",
          "0x07f93fb41605d3cae1b42b92d527b2ce7cef14ad2b907702afa13d76ce02f88c",
          "0x0ae3de8a6edd589ab62767e92f3c19efbf32115679d2629a5ebd26c1c7d34299",
          "0x15b6688e877724b41ce08fb17695347b5eb8844423c71a98ebcc188c23888dcb",
          "0x131cdc252f00cfe48cd6cb1b15344b6fec8b176c1ca5584d76d6f9f6ad26bb13",
          "0x1bd570cf878b3dc1616ca32bf55e0b3fd898444d0e70d64909ec789ff11e8eed",
          "0x1e5a54e71ef7b9eabf717c01dd99b7262c3b43d1d6960094b8e508d1e11f03cb",
          "0x21c88de360b36a24fb641014feceacee94856233dfbccbdd1e9f0f35c9e7fccd",
          "0x2ef387dc1012ae94898b8afc9aa54a3be1f91820b61ab86f45ecb3ae21e23ac3",
          "0x283914da97f036349936af1157c536d9c2873fc3c1543afdbfc1c0c55cc6d5f4",
          "0x276ad4f7ba33971e4db2292c7ff704d15a14246a6e7d76ea79f1189066dd42c0",
          "0x24ca7fd6a2014d9821a624bf07950e8f64f5e6892d48e4a71cd4f63e9e2c63d8",
          "0x0fe8f370d24968de4dec0fae5919d8f4f666673ecae78bd7e22dc2276364afd5",
          "0x2f0bbec7f6a255512df348122df4b91778775ace589d4657dcc1223aafbf2586",
          "0x180732ee6d3ae2aa4866158f54f4d8b980013cc671d68c69a72d5955678703d1",
          "0x05a0b0ba16b7b0631dbe2c92f9121284974a7033a69be30407bec6b153590703",
          "0x2908a5a3204a9a144f6565e561bbfe9a4b664edaeba4106e1a57ac77290193db",
          "0x18c860a5d2537a84944a1075e804c32ec66cb5979908a8ca8cd7f2d8a7029c0f",
          "0x1ef80617b025bd54de5361dc2fb16cfb90c364e37f7a1f07ddb9ab292afc0e91",
          "0x2ab495215ccdfda498510f6d5dbfdac1429464e7788a229feae561be3d62c2c5",
          "0x251dc073bf23010a06bea25560e1be3ccb2c38e67d64eac680aea6c19952a7ec",
          "0x02201c3662a59685a511e2555643567df50772e8c150bcec0943a8af3f106847",
          "0x2bb9277b8021c5d354300da09101d24c72a842f97627a82065e5e67a22f465f9",
          "0x14f5ee46878e605585b3ded3fa8b9b7fd62a2017b6d2f30ed61339cca435e348",
          "0x114578668b59522fc7d794abcd2497baabd855f3fba503d5f5e0486047bf3fc4",
          "0x20bc06a35fe07cd507d0dd0a9da6987f228017055096ee68cd33eab3773a1146",
          "0x184801f655e82f8d32b94fb0612baa4ec983d1cd94cada67237670051d5fac5f",
          "0x1404d5fc7a2e8940778158fb2d303364892147a64bfee54b25d3906ab5b3490f",
          "0x251df4335e5164fcbbae73beb8cb57b809d71cb59d6e303db0560b0c1ee79e0f",
          "0x09a45be49f35c4f987b58d749c78c69082486d3f8777eba4103eac7190faad57",
          "0x2ede228b9b96b21dd5e1e6ea260a87f902c0051f1f203c788fb907df00e51177",
          "0x100a3118e3248ac400e6aab0e4e6b10f07e96de582c2c923a99cd14e45d6f209",
          "0x15872dba1f1047ac1faeac076b57513ad92ff71b6a6a2b32f27adce084894e10",
          "0x1f68a35d81c05733a573076ccd7946a4039da22e42959520737e4a6843283fa9",
          "0x2a165a1a2b018ab2fa4e581d7cb567d9b1515db27ea710af3683a8919e99a282",
          "0x064ff94b98a0588aa924e943ca627fcbd2ef854c66f917ae526f719fb40c6759",
          "0x1c8349f898cbf2d1fe6db936c53bd3564b673b72d673aaa39f9691e08283d5ef",
          "0x2e4628a8655d2fc84a32f10e0a95e92d0576739c07050bcb0158f156db6e7c5a",
          "0x0068316de71fed80213380a8757b3a9d517e7ea1e4800a22c510755a4a1ec152",
          "0x229e32cdf952fd49ddac8bacca9ec0a85b9f5f1e8b4ebbd995ec5b8289a54289",
          "0x26c9af69ab4a7e08335cdfdf33ce102a14cfafb05ad000afa7383f01b9b5b892",
          "0x14bc5140566915518f20d51498ca60f6e5e48678f97c1bb58e17af4db8f232d4",
          "0x22fe06bbaccc5b18b4a8bf2cc8c47e351291bacee5c5226fbd0cdb308734339c",
          "0x1dca1403773581144b083aa9b9768db5a81902626de0d81d80f53d75d247af04",
          "0x04152e8ca329e892a4503613f3472ee94b7e3025a592d4625f420c45c56a1f52",
          "0x13ce7edc9f1c7d2ed533026150f2bb6d261f379f1fbb48a8d556cc5ad7914e36",
          "0x24f4fa36a48be01d0bbe57854d48399d81ec03c394fb2eec544a631f4e1cb1de",
          "0x26e0659af8c838aacc352710f1433d9df9ccefc47bd5c487a0b3c29a01e559ec",
          "0x222f80f3327ff730c8ca585c067b5ce946724707601b7a4a72476c4f73e7818d",
          "0x19cd3a66216e859e433f64e4f9f3e2ad9c58d993ee168ceae5ebed3049ab2f87",
          "0x0d01aa823ee846c2cb695543c8499803101fc0ef222e3c2b44d8680e8a76188e",
          "0x2e17901918cb6f4fad9ac0d387757aa77c7207924e177d0826ebcc45c76488b3",
          "0x2e30cc49639069e2101cb479c7281e8715ce5f34d17c016430a9fa75bf484ad4",
          "0x18694d18fe6758b36c38ac70d1344c6d2b70249db92a74e1404683b2f00dee5c",
          "0x2597efc11329ee3e0c8bd40b4a78681738b4c52af4e55fb5be529996b56bffbc",
          "0x003ead8cba0d24715aea9ff5443d25ee640893186e6ff6c045dfc91edbbd1c94",
          "0x1e17e4583d68f0e1e7234d41915f2fa3c7b7c04cc2afaabd7f3bbe071cf1ca2c",
          "0x2d05098ef2828d71e8758837f5c973ec97b7547bdfa1433a5527168ee9f9d5c0",
          "0x09220ca57e2ddf5a1b2f2971627d1a74b7c1b837ade64a37e8e1f0d436051a7e",
          "0x22ee5c6d36a980b7a428f8afc999eb09868adc52b4fccfdb68b3f5fba518e03f",
          "0x1b70154b6e76cf9bcf4411203db1c19c77bc0ca8bef907ae8a4b4aac270842c1",
          "0x1a2ad9a834a4d41bc0d5bac3b7e9453100f58c8605fd112ef6b7a25baa7dfb88",
          "0x075aa06f43a273433cf8ee196e8577e5fa28844595b1f2b36f6473ffda38380d",
          "0x070f884d5d0093ff75fb09ce934c8733008f994efa4f556520f11ee8bcedf82a",
          "0x07d5a9301209de0fa56d9dee45f8480b12d33a73be02f078f7b9df6f9225ddf9",
          "0x0100dd4a2833b127fd800d28af04254a018853218ce565a8f615995a0f2466ea",
          "0x164c79e2906202e73bcfb8105c5c10829397bcb0089ce03bafc5f0e627e0d836",
          "0x29dec9bfa2a12f2fa1bc9158dc1d3d1ebad1d849fad58d34163d741923f8fdac",
          "0x27d590c95d3dddcdd43e3c40f7579dde645f33c7b0ce03d55e07978096257f88",
          "0x0c32e71be02fa8302d8abcb8ab2c6a3dc4e962e75955401c1e6a66157dfb965c",
          "0x0cecd591ea4f3cfe0c7d3edf52f4f93d60a3126433bf9b9e47710d298c31e9d3",
          "0x070627a0421fde844216f5f24789b3f54d44f1a06184aa81f75aa227335f264e",
          "0x116f5232abcabac8a8b9f1a3ac86bfa97fe285811ec2cfd733f1206f449d1de6",
          "0x2a8ecaecf1355850d03fa2f1a7904cf3a2ba7d3bae30aad7a35cfb4a6d7dbec1",
          "0x252ee8a2dfbaab265c060600b3f6e19f24e491ddd37195211f95918d3d39b911",
          "0x23ed5e73a4223df85afe948fdef2b6e0d3c120aa31e2f1b4c89054d5218258e8",
          "0x0ddef510d2c7ba32e4331ddba93aa688bb9fb86173625037b86ba4c62a0600fe",
          "0x2339cd5cb769acf2dafb5073bd988be15a65bf8ad06c38a82d38d317f0febe8d",
          "0x26fb4a101c97c06acc999150483d44aa762b585c422bf8dcb37afbfdf076ab49",
          "0x077d5874dba21d260cb02f280c5fdf78fb8ed9e0acada998ab5cb833b09d1858",
          "0x22ddb2bebc8cd1c946f8522d7326702328511313b40b4a9e812b69aeb6113220",
          "0x2e7c43c6222e6323f682c05c571f6aa62a3da64be2c3f381698e2c0ddadc93b5",
          "0x19ee0e60fc2da7a295371c667ce850772acdbbfa0a9eab7a7c94a50c9c682de5",
          "0x04d46d32c131ca79258ef2c525659b8138c0e199ce5968e57a82e780f1fa79b9",
          "0x2ddd25bd37dea23386a030f4bcc1d4382635a6dc7ea3cf3889a5e8faca46bd82",
          "0x0be3e9d472b8118ce3d01a92fc168de78549347b44526893312fd5ec3d2726ad",
          "0x27fa8f235db616a5909a2f31896dc8de9594798707b477f343b48ff528e49b8e",
          "0x17226412ab2fab6223eeda0b848333816a4dd6495e29ca47ce8b96f8c87aea21",
          "0x008a2aca609e6344086eed8a710a35469bdce68646a435a6918277a21d03d4a8",
          "0x27a10619eec3b5211b7ce9c318df7edfaecf7bc84098dc1c58232ac25093e35a",
          "0x06def2df638eab9899865393563ec8bc81897fe0f1adc5c0499755f25497fc46",
          "0x0c86bd5b00467b98563b7ad1b362a058538a7faa110a438b9d0ec7be8c50c098",
          "0x02237c3870ca51c0c9daf086524707a78be8845df471e4d4fb3f2e7f30d90214",
          "0x2aef4c14a514a36ce1afa9f2c5f1ede8d00530e01e2a704d70494cfd3c2982cf",
          "0x0f425f81861ada856f01fcf0d5ef108acea281735a913d24eea75b55833b328f",
          "0x1e562f2a3a83be1321eeaf564fb19f57aec9c66e6cc8fda18999d5baa0b4630f",
          "0x0627d8f4c1a8c8f8c5e1eb617598954aa814a756782e2cd85b79e8e1e748c705",
          "0x15e5ad36f719cca83a41f67782388cca380c25992e5cd14c670fd3c317b0ea5b",
          "0x0cc8d138d0854f9b62697b7791da960be500e3529cdefd4f0b18d16c5e757ce2",
          "0x17ff555b52d28be1b3c46c80946df519e9de247d2cf8d8175086f975d24c1e8b",
          "0x0fd5dd57c2cede876671978d2fd289aa0a02693252b74f7fdee8bd404e6c79e6",
          "0x203144a77c72ea89fcaff39b141def7e93a1da1fb9e22b7d0c6733bd72f06f69",
          "0x1979320524dfa45aa8ef35eebbcf6f621e1c855b5704d8bf755bed7daaf721d4",
          "0x089b6683b1f849dbbab0f1092ca04880f8b894d7f8bbcb95cade4e736ea28998",
          "0x2c2dd8e6610a0495784aa08bb9661fbe25c908396b5c3f2bd51109517fa28162",
          "0x2b9627b579ec4019306886e1ff4003aeb3a33249be5cc6b56dc3607b17e42477",
          "0x178f70a99501a6e05bf4ca79b2d6da47049f8c988936696519344ddd931174f5",
          "0x224ffa0f9d0d57eb0c7d718e99cf3b6ba01b523548ea0ca23a3f156c04083abe",
          "0x00f2ee1e2be1ece2cd8aef1dbfc826997d304d88cdee555ef67a799759c39ed4",
          "0x25757740ab14ca93745a76000e24328eb1a3d21d3cbed1930dd1ba2cbf7de236",
          "0x0fa6b963bc65bd930510b3ca6e1ae62c1b4675edf79ee79a7f280eae6496f16f",
          "0x0ccb794ddf870bb92a9cba5f859fb3cc3f4eb1f1117d14c1caef37beced0e32d",
          "0x123fc6d306f17fcd5a4309d4fe6e0cc1ca00fc23ea9447a7c6b68c7f6ba50005",
          "0x22162170a1f845eb0aa1ee7baea486212a09814a9557bcb9fc72cf90f0a29961",
          "0x13e385a5cd2fbda978dc7740e927ce8d422c9ee861c43036257242484e497e3a",
          "0x13bebd80c2022724017d8e3eb84c269810cecf47f9f57e237bb4be69410a7803",
          "0x13ed291502566a7033b4c4607245156a158a6fc84f4ba6f0246c1de057d8ff1c",
          "0x2ffa06928536af91c7ac3b7714f204e26c541142742179217095a6e54f743247",
          "0x2a6df655e926c4aa029749aaa7c9a40a10fd55a368624c148b5e528d4313183e",
          "0x27d8531ec6121a3eca74db524323fc100db502a580b8a4cf8651f1bf6b9b0238",
          "0x1ea104a44d82fbe1bc1ccfd4626cea0c06693422b3846b3a2b4aa12a3b0e747d",
          "0x1d69a3852720a88758034d954dea602e5989114a4667251b0da5915412ac5ff4",
          "0x1b8e232710f6c1ceeff9c1086d49cd8d2e647f6926da913cb5e10337d7f3d7e5",
          "0x2d40d3f8e6f9e3aa6014c69630dbfdf3169f88067574ffc9210f7da599c4fb3d",
          "0x24e1c2f60b1cd36101770cefc4334a8c02f00cc696df64f76df54a6fb6f0508b",
          "0x2408f2eb6b1e958ccadbff81c9a44913ac0c9cb5cbcb4b4054017abb3db8c04d",
          "0x0e3c6ecd281ba2e16aa37dacd2abc38eb07c1353dad96e87d14e5ea33ff8ecde",
          "0x248c7cfb7ba2e71819bfc755eb9e9a306cd0f6e3212e254090f0006d9ec543e8",
          "0x267fdcdeecf69d799e79f68632217df51226d8ce39574d72b4ae4f39d21721ed",
          "0x2bd9173ef276b7d4911ebf78dd15342eb261603c2c9afcf4ad831de9fa34bab9",
          "0x1cc0af33d07e50b2adda3346723006250fabad8fa3ddb365c1d8582f4dc65f14",
          "0x221f2bc4b7dce9195f9ca9ce8fdeaefcb05440c20dd9754bc59c11447caecebc",
          "0x18ebd5c63b0bf20f45d238fd0cab5dec8dbf1996bcd1b3489f3c2499ecf92b07",
          "0x2f338bc5a586f2774af3beb92aa92ce8e58a5efa19ddc891be47a5e77e9f5a4b",
          "0x0556b9c3784145eb4f2ff6e0c88f41989da5907f8c7118ae492939bfe4e9fb1e",
          "0x1ec100367f65684538bc6956805ed37051238a3637e47022a3294cbde38b2284",
          "0x1645a29dd4527ab91a4b798c7096e832073c8baac6e5db87e26c215bf448f84f",
          "0x22a78abf7d5b362a743ed52ef2737bbbddd375e9b3bfb42409a95ad105ac9350",
          "0x1a9921dead26c55aafb3ac9f3f35acb61a49d5f181e8036540830bb18686eb37",
          "0x0eb8645b0d2b8f0c3927d4643574c0b1a588272465d319e15fcc6c3262191aa9",
          "0x0e48af0cb275af55deb825a34ca48904a47c31b5592c4afa9077d60e5e7ea655",
          "0x17dfbac5a26f06fff967cfef597a6da11b5bc894ee6b62e626a62e85a3ea4b66",
          "0x0dffbd016ffd2b795226a83edbdb3c5a6f78917d7fbdbbc1b3631027c866aaa1",
          "0x2f948d5f70856b5f23a4338d244f6ba7e7ebfc750e16ebd1e2c2d13825094310",
          "0x194c9f7615cbe3eaa0f885c59e420bb89dca60fe174ea321d80435301511713c",
          "0x16e81a0540143cbbe662c7ae726051ec663d621562fb3701240cbfbb4b17b3cf",
          "0x11ef0c2d88131f715e47e9a4953f789fec78decdbeed34bc8eaa42927ea6eee2",
          "0x0876e45a4f862901bfc620a55951802a1d1d5c3e1414308db7d548400f668535",
          "0x2e78d35e1dd86776a4ddaee1192c055aa8676363bfcf3165317dcc98017e6c75",
          "0x19f6e589ba384db3c36adae4bc034fb9a444da42164b6ef289009a2cd7d15a6e",
          "0x09fed90b1f10f84f6739bdb1b4b508957acceadace687aa735dc9f6ab14404fe",
          "0x055e35bbef7ce5ee7a3603222e09005dd5192adcd70dc33721714137221f4831",
          "0x05e8dc359ee98d3bb6990fd928ecf056f9bb736e0d47cec22a96e7cac65a9828",
          "0x0c732297f8b0c272fac76944ee969930752a7bd3943c7b97e038bcd2315d290f",
          "0x16703fb8b02c94ade315d5b62aa1bf7834de248310887dc13cfd13fb6c2a10ba",
          "0x28715ac5265d7a812af4e39e43bf9ac80059635d01fd6fe40f3f1e059d7f7f4e",
          "0x2f683b0027994e095e71eec8475730fe227b480a6aca67ab1593ce6f837bcaf8",
          "0x0854d9c3be72187a2f198590decd43943c5aa6140a858f21595b9a08da85b323",
          "0x1e3d592b71a473c85b2104acc1d8db8cb9101a3cce55c66801a0d379497deadd",
          "0x1eb27377cfa38a3967a71e697725c195bc1d7ce047e83d0e069dee8b95a9a70a",
          "0x0045b9fd1e0f115801232c7aaafb5e73bc2d657c47b122f4e3ea30a659bdd9be",
          "0x027aefe3d1130e9394b61a804dfe2231d68295910dd39245f1e1de65a87dba6a",
          "0x2e4c5fa1a42064e556fc50dd7fca7b48625e4c169415487d4df0482a9b1df4eb",
          "0x05767cb28f1019a39627a19196a7e4672e82441be0b90523c7b9b9f74dd3315d",
          "0x17e443e32ab352d209d3e038d1364b24eb3f945e99a6809502c5439c807fb4dd",
          "0x017a0c0d83cead8ffb70978edec1bf3c4acef4a2cdcfd8c335bce42793513e43",
          "0x28b749b2a9becb34665e38f3c49b767f20738a481a7a76a19bf1030008a252b3",
          "0x1f5252eb629922c70f2fc1b5ec5ea0a0e0acee47da26c40436c3f1ffca690356",
          "0x29324c40ee7bc85d33a056c3fa8f44d6a7724da53ccedb3e56cc26b73358aa0e",
          "0x00567e9bd8a2b947d75b376a9a1af17bf8bec6c9abede582054fb3ecf7860cde",
          "0x1e96bab6ed6f45550f2621c0adad747c2fc9988485f6184355c3176d5c11e8d6",
          "0x08d47dc23b1ff527992c9eddc91259a748f6cd7c1f61874a0836f599e995a399",
          "0x22733cdd318150f40d89d1ac142f26750809a0b888c85743af671050cf6736a2",
          "0x2168174bb9c45be2ee87441174a24fd41de6bff4a377803025864c5ca1927347",
          "0x0b48fdaba88524ef8d0495ba63e8713b65af4a9267b5d62083e7b8726043a1e0",
          "0x18658643fcb63644520c0fa02dce232935a4ce8d7b733a9b17a866e50b3ec8a9",
          "0x2fc94cda5238fc785871bca97960b299ed0df05f6c6b28a3834865fd4974bc21",
          "0x1a54a91a89dd7e0ce87530303c12ef76244fcf42c38db35513d65c6d5994ab6f",
          "0x15610d8d64ba02952f4170eaf42a27cfb2d13f04d4673537b72510c5c4c3da22",
          "0x13597b4707657f437ee42087cf8b589042b277467d8a0436cf66ea44a6661212",
          "0x2dbb95e5114e740028bc5edf58b2e9fc7e3871d3f16ad0c3845d5e961a87837f",
          "0x2cb3a3e7ce16cad9596eab92d772f6b8afb43cb6492b2c363ec71e11f86c52f9",
          "0x286e8b9468bd2d392dad5d90ef65d28dec27de7147ce50b8edffeca5d70020a4",
          "0x166e762a73b519001d753737d7d908ef226237b077cb76ed9f6bbfcce9989317",
          "0x1dc5bee6477d7e7879fa2f33ba9adce878a57fad3845e7c9eaf4be54ab844f61",
          "0x1f16f7f1cd61d9563e064c86b508afec41d614abc7b34bb45174b40d3877155c",
          "0x28df04cdd7f79cb06fbf044e631ab11fadf9691e4ea5f6209f8751af58c8eb15",
          "0x18aa6490047ab52105dc1e60f448762461b7075d38a7c0b2ba95646526588fb6",
          "0x0076ab8143a290792147c6a6465c9a83bddf4f65388cae8357bc6bd9400ab99b",
          "0x2616217a94f407053cef3b234cc11acbbd2e344b403bbd8a26f821bcb6f1f8de",
          "0x2296862cb9a14424a34d3a11080d6ed5bfe1bc4e0301ec1cbd4e260d81675684",
          "0x0828428022a299903406314c159732bc0fda227a3e7a40a4834e513f3ef97c53",
          "0x0771ff9f397469dda6f20cf1841e702c1780a0719b3f590175b394f38279c77b",
          "0x0dc489dcf61aba1104925eb9439a4f44228d06dd4567fce1444965a749567975",
          "0x104470f92923d3b9dafa39eabdf7eaa23b6ff11b2ebb64a63bdb912d43865fa1",
          "0x14a490ce09c929505ad223e2f397186135aa6586b27cc9ccd4f78efbec993a6d",
          "0x206893bb747ca2504461fb24a2f72eae4cf330835825fb8ac9563fed9a7853ea",
          "0x03c2a738e753f35b068c6ac8171244c23fbd4f37c80ba508618c800acf626546",
          "0x129edb7a013029be80efc7400212cd7af1308100d34a569ef3646b52cfb06e16",
          "0x0874b0edfee05d8cddac89e7b562f917c7ece1ec2e262f226f4d1524a1ddc158",
          "0x10a0bab2786cda30537c696bb1ffaf898078841896f7be41cdf30ad2517b2aae",
          "0x0bab661c2a17fbe0221f435ba90520bced928364cac984e17a6c72a47e13fc2b",
          "0x2042016e686c984057a28aa2ae13c981ad8dd02ac7d4663005e1380c54f843b2",
          "0x1fc295ac71911a59a81d087f967f16a3a887739d7cee663fff5d6e0710cf4a42",
          "0x05922697b04ae608cc3bb0d9d345cadeaf4fa291de888e9b1dd32c19cb1a8777",
          "0x271b87d8b895c6e1d864b9cd030729e523bc90b469cee37b51144bb3b0e4b9db",
          "0x24aa401343e4705f22900fee892cca269d0c0ffab8f55c21c674edb9d7bba552",
          "0x1b07068cafe17b55b5e00f7037c9ac37ef0268d5d2b76d7271c617004f05922d",
          "0x1e35bad319a036cc6a2094f2a1bf2d1984a2b74aaf3e5b13a6ee30c90097cb33",
          "0x2ab91b9a85ce69e7bea68f4fb5b1fa0903945e039c4ddbe05eff2d5e754fc219",
          "0x21e979fa3a2594d2365ec70b5b3e0ddc5edb8e28fa7ec307aab14b547858f666",
          "0x187cffd76c5fb29795523ebe065c9c2115e73784ac6b15c596fdd68469d1ad0e",
          "0x18d2ff882c52b396a8c068f88c3d23f9d11d9f91c0f7fde9ef6af2180a007392",
          "0x0a878a77de615e83c3d430f11f326b785c1ac114e599c24e5adc1d9fb91b31f3",
          "0x286b9c6381700288bcc75d020ea09c45957a615576d7620a0b9af2609d39afcc",
          "0x1c4e5ed7db96db52059ae2da709879d489a1ac5031c35ee1b6c422d9080c3f12",
          "0x27141679bb9260a693b880784ff5fbc5d59457b96630e0a5c04912092a4d2abd",
          "0x15e337c65fa58edb6a74fdbe7cdd1901b5d019ce7dd4144a8b49eba02bf085fe",
          "0x08256792218c8227eca89f5114f1e7f091d88a557c69b2a956fd2dc90cae3631",
          "0x0c08d19af9c30a31acd3928ffb5a57de5e83367204ee67209ee7ed1bca5185da",
          "0x1919839ad91604c370f237d2a0aa98efac29246f93c24a1bd0f9d2b60709b6fa",
          "0x15bf65b02b92f40b9f0ea893ddbb0572f49375acb5958bf944c77ff6c3561a41",
          "0x122e02f2e0169809b22def001acc797b202d335af7bd2cf032e3a7c75ef033b5",
          "0x12075100dddb8098654e718605211f7f6a21f5176d380141fb39977305182469",
          "0x2dadbbb8fecf5ccdf01f73d0cc60b15f1bbef018a63f50f68d00b72d8adf0878",
          "0x14334ece05a631ab375e7cfe7b89fa0d8092ec0cee24c9fa3009edcd62ea8b71",
          "0x09a51856d49ec654f7d44aca57b174365ba5479d8714a09f0f6de08b34e3942c",
          "0x048e8feea9b828528dbc63cd3d811ed05ce9de018f4a4647ac1f685bb8f6715b",
          "0x204ba6f18193f747ff10980957022ecaa8fa4c13e7fa4e89730a76253c9b07f6",
          "0x0079e1be1622edc5742e4f811ea2c0379bff4fa82b79fde5d0c9a0d174df130e",
          "0x27e48eabb0ef3b22305ab720ee4c7f414e8d4dbf4360c81d1ffae4d7683f637a",
          "0x15571becc7f5454e45ae416a6b3576274767215f659c91ba354372d999881d5a",
          "0x2e6a4545ebf7c2e44af91ca7192eec4aedddbd2ac1df4f5101f7f8cdd316655e",
          "0x2de19fcc78800027b1932cdf6f9e959208606cbf8a07524457492867f8f6bca5",
          "0x2e1ca8efd1876e209fc2d62cb14446e8f3c4bdd53d6382ca86b113f3209d55f2",
          "0x154b3f85eaed8b65718e733ca2ca7c8af03cf8f23befc4d7c6177ac00ebad368",
          "0x29e58f39555d9dde7bac3df18d8eaeb2a5a50503860d20c5cd0ba2a2cf6373bd",
          "0x032d32032e52103ad798fb36ef7c0681504cd2d86a12c7d937ff518e57b4c3f0",
          "0x281de0191d30af73105e39dc174015d65dc7ff12d20888d02cec650e1a245a3a",
          "0x0f7e76af800ebab14281645d290607eabb062bf0afe1419133e1ffdcf70c808f",
          "0x27ea405bdfc6557a4dd338a2bca9819547501f6f77a588a75c014d46283f75b3",
          "0x0570af543efefdfddab63fb05d31edcad395ac82381491a80c825c621c7ac22b",
          "0x027a797e0014302478a413cede7a45cd894b0a229c8e89f56ebaec4c46692bfe",
          "0x1dd0e283a8ef7d0f4966a517687fc53243554a8d3c7e41d91719b36bace81516",
          "0x2006444695987560869df6dcde2673e5b73ee5bccbb43a05c2d8be6c59979242",
          "0x271926392e5f1c94437afe2c2969bea4ff3f6d83ee71394008831d24bb1b6cb6",
          "0x1b607ed2f130580d9a8c20ea26b33b478d6e1f00cc82f00176935a8b54cabf8e",
          "0x0b7a6e33808d217a9e55c23871cfdfe495c10d62b8b981784b0487e63df03e0a",
          "0x28ac790d462bb345ab80cd1670403943599b79edef17cf70236ecb1ef872cbc9",
          "0x2f8d745b1b4750fd2f932f7913095515c498be314210180c6c3077231226bb94",
          "0x2a3ef20e60142f17d2f3b82eef6135079523956d8bc684092eecb7a7d56d71be",
          "0x08119b14b83922e4b224697c2c6536cf772d067489d42672b988cb638c71a0f0",
          "0x1a4bae6c9cf73ea22739a275bc722c8cc83d91e7ddfd5110614a52d84ce73205",
          "0x1d659aebe4b37b888be3a7d7f23e362c250046c09d5326312d8d94cdb384d1be",
          "0x28e2fb92bf6da4e6b96730479f170760564458d95f732aae2406af4c03969f8f",
          "0x10f4ec3ad6f3ed3387729990456c9685786ede8e6e14b7c66311d47b8778aa68",
          "0x2ad366d90419107866504d4d34346e0a3c595de6e0aa51c805272ae1bcddc2d8",
          "0x02f1dc29a06c64c9e43d3379db0f2e8f0cd8f80351724d313ca02ad24c6dac81",
          "0x20086a672c397e65cb37cfb64ddab08074f173f37d0e4a1747b7f020652da64e",
          "0x0ef2861f4ec9ba5fec74ba22c0b7af9d458c3cd8f90c825c1f36110ca2ee9076"
        ],
        [
          "0x0e1962c232fd0a6bb54ad8962a82b9838cfef19d290a55fc49d6debd061cd2f6",
          "0x01e1f45cff3e74168accd0a94536fca6317128953eb47d8d2d79b847b355cf51",
          "0x1367eec3b20cb74953618fd9261047755ef7f8aae5ffe96fc8f7d9a02e37bd1a",
          "0x2ff6ad40533afa2acb78c9b91650d7ccbd274b09f78c100479f3a4d72956d706",
          "0x152c8c3d9e43d90ad8094831a74af8151fdcda0b18d7bd8374ffda68d1a5fc71",
          "0x241707db26f96df502364d26712c7f465d0ac5597a309559b075406351a20977",
          "0x15a4e4728a197dae6303d0cdd2b6d1e4114a9fad38a530bca6fd06ca1ffc1f56",
          "0x0cbfd63f363978c387d656e93f11e336987a68748c8f54f385887e64b1075598",
          "0x1fb594474b8334f9aea6fe5e323fb0e0ac27d2895921ac64e93e524e4ffd25c4",
          "0x05ac55361da931c1b4c560aa8dbabc8624ba225871bce224addb5af901676aeb",
          "0x135f83314252585f7e011692cd9acff36df6be985029f226de256803ea704d78",
          "0x0a68f262c9e14d8a9ee116bf90cd7d65e3df561bb3914e314e3f43f167f5c04a",
          "0x0a8360a837d4c97b946633c353298b77d6891b6ce78e82a3bd39fb7e51193d10",
          "0x136a21bd13b11857e0f7670e12d23290c2318bdac830154cc37330ccad9a3fe6",
          "0x2a60989b8092f8e1c1cb0238ec85bbd6b8b659327a03e8e193c15a54dbb73c04",
          "0x1b5eb81f143bf326da0f4eb95d4f45c8142cea640d33acafc8deab155f37345f",
          "0x08903cf6b684826737a348acaa452e1ba9f9345de911f2340ab7324d0bcb47e0",
          "0x03b8b717ba10035a12ae4dc40f4210b0f0529ae837766e1a269522105635d818",
          "0x0623ee7c19eabd13115398893e826eee211daea73f80fa53a22f8ce55906027c",
          "0x0bc8b24369ab76647fe0ea278c866d4d45bc3f93e8b06e76901bbe5bf20db5c6",
          "0x1a327d5f540190e1c9cb1e31d857b5c51c5cad9f1ee126c44670b782d46c2f50",
          "0x1087efac87bfa4807aca410a9c297d23184c05bb58abfd43a3fc2dd483380592",
          "0x2997117304dfbb464b5cd4a4188aa4f6ccd56de9cbd813da270ad7ee699e8065",
          "0x2296482e919fbd46f7a518155e72a55965596866f32b1f8433390f3e1f0e4063",
          "0x2152d5f164ce09f6928ace2566bebc6109a4f62047e4747a051e29dc187525d9",
          "0x1054109861b3349e419216f1bbe82f4a57823a77acb1deb6c48fa267ee5d302f",
          "0x1772f4029540432ab8c6968b3739c3a241cda3ade13ece2ea0a0b157d65c2c93",
          "0x00c296afdb2e037d7979878671c78a5f6008d98cbf75be4e3ec3cc1d44e8459e",
          "0x0ec85b22c62686e52cb79ab29a0181dc8e34ddf3167d1e353514ec868e729a5e",
          "0x149e2435c20d48a3ec56c4e45dbbc583b85bd64311a2576ff352668962c21866",
          "0x1d44140dcb4597c7214a6ed85bff1a3b5fad33fd7c530699bbd610e3bf5240de",
          "0x03cfb0570f824856fbf41513be01ed3271e1c38a16f610a8097cd27a1325d4d3",
          "0x0f223b396423edc29d51e58872b2dab7ea3aae89517bc41957eac79ce9761379",
          "0x1fe6dc2e6e83ab88e84337a45130963337746ccd01c2f2be100080be32a59520",
          "0x047310ebb459fe860c954517249440d367c6efc5b93f70c410bc76f8088b4a3f",
          "0x21858ce69a019e4cd46096a61790bf7e03e10e3edc1a2988df768498ad667cdf",
          "0x0da4f87da196dacc964fb6928a51f3acef042037db741f317b4d80a81cf98a8e",
          "0x198eeea981eb256b4fa43f05fa4e1aec908e57613eefd35026358080e329bc12",
          "0x11964efd21ea079340c66ad92fdb62b8a18ee08a9992f133a417d23b78cb1b0c",
          "0x04b07b1960518122f5725ceadc0c1f060928bdf0f5ec42e16f8c2934877b4143",
          "0x0246f5fbb5f719b0896e07b4c23fcf1d24487b4c775983cea49500f8637709ec",
          "0x24d78daede9327f49eba679539f85d099d6583060938cb052dce50125b01cdd0",
          "0x23de932658d2f181f59d7234a67e174763ff790d3904cfb3dd10af8af4d8865b",
          "0x0c4f5431daaa994ddf5f3fe6b1df0c0c42287a38c9a5c4c758f72638e3bdb403",
          "0x175999589895b6947d386d83a5e6f5faf9c6588d523c7846433212233f64d04b",
          "0x02d54cef5e3cad1a80471bc6ef0c6e4e74c2e56886a31d79257b2762ee7ab517",
          "0x1539cdc69fd93f2ea50dd12ebb0437c23df4ecda29c76aeb09437ffdbf01c778",
          "0x2359a45452824ba97dbc050086bb910c12cee0a908db1c2808979dedc8f29942",
          "0x0880e5da2125b0842203bb98e5f24ae26228a5af5a6efd5461f634a4476a15f2",
          "0x16110fc6c8167930bde230d5df954f107cfd0da005aee44ec5ff642872764c19",
          "0x1310c844b70d6a5856f6d18669e532c2d6bd5d01e6a31e804d81a2f5adc63fdf",
          "0x2ea868217a99a6cbe79b442e2152853c7330fd8de757eb7555765879fe42ce2c",
          "0x29c5042471d909ee4813cd1a36e8eca08d4e0d383009f17c4a367a877a3df4bd",
          "0x25e36eda0eab576075e88ada3914c29442172a027c6d174ce0ddfbb017d51dff",
          "0x2d21058ec44674d8493e702aade5bdf3b691e3faac0427089e867f9ed856bc73",
          "0x18d17c3835ecab44bdb8b67efe2acc71d39e9d3443dd0ed11d95045409a7c788",
          "0x28a2f63b0e940afd2c78d00de1aa6fd6953e6d6ccc3aa3203b39618f5d698f5a",
          "0x02635f5bd9bebaff0ce7614ec7843418a9aa83637910229beffdb91e23ebc10f",
          "0x1fb8e8726525268018845f8c826b0e4d56c4e9c58ea92752d581d1a51702b882",
          "0x087e2ce4d2ae5c93ea5611d50c313202a80c4b43533b49077fb569f837ea1fe5",
          "0x0788fa9532cf00f13c817f38ee1bab85fbc687998cf1c14aff5fc1eab115a7da",
          "0x1c5c85c57a1f7587f8d2fcefc1d4e98c2741a019effbd4c50334b0c15c3815ce",
          "0x0c1fb832b7cbe0e7e11e8edc2baf8749f6ea0637b20e972a63315dbdd5be1472",
          "0x229758a22b52ec3907f94a117f6639164508c77bfdbc679c1b3f876b46caf809",
          "0x05e066ca1257d8d5edca65a2921fb5b5e01e3a2f0a2a3bc6622c791552190a2a",
          "0x2b1a935a4ff16c2500bdfee2086d9df3927a358e8eabe75f6a70d7db25a31917",
          "0x19a55993108088e03fe7fbc2a014509ce987f4277f729ba5b924d25b39e0669a",
          "0x1bb65a3f9a4375ad926d44c188dcfe51b5a5dd6a7ee152aa6ccce44813e95db9",
          "0x1f721c4d0db7592f9bda01fd1fbebc8e57452e218d8a2e19163067d4af128d37",
          "0x2bd32a02899498a973382a4d40266dacae898a9847c2b33c2ad30bcdc4254776",
          "0x28585b052d22283650a9139d6361b08ce94d17d7c8f6dc1d54f58589066e4a31",
          "0x03eb34352610227beb26f8edfe466cbfa347d7950bee431e7165647bf1c5ccdf",
          "0x1c1347ef418d657abbe6e4c019011bd34ddb207ab54a9b99f07c4044589e0986",
          "0x04a8aa3b18263e171363e9396847a1933f044fac5f5b11f754e6feaf54ec4747",
          "0x12744a063cabe92e2e18f000afef29c928585a03afac3b2f4c17141203944239",
          "0x10af4d39a72d2dcb65eeeabfca40a08a69b274129704c021a01388ff8662fae7",
          "0x1038c656b332e519f483d54e5222b34b35af12906d13652d1d8c6b0f509b27fc",
          "0x10ee02ed1176804b7d43696eb87643b4fb45f01dd65889e5b65128f781d39d93",
          "0x1d08ccd47541575c60b567fd9b6705de88248f9cc60af2343098d35d9e4f6d35",
          "0x06bbf6e32d26e922baac8c62bcf85ec934cbdf6870e3818cfe49dd3a4c70897d",
          "0x03ae60403f93a98370688100dcd87ad4c71ee529c4dcc3be32d6bc0621d42355",
          "0x0fd0f776d267dc3c01a377d217e33a255c39937ac281a3b0eacb58b1012393c8",
          "0x2d4ab3b85ee6f55bc17d051fcef739168ae28b7e6d5aa4ac12a2dcc07b9ba6f7",
          "0x2ec07b3fadbe296f9bd1fcd1758f95e6b922db7582068d76d552184131e0832f",
          "0x0a6013e37f560f540dbd3e9790600200777b86a577c2d2d83ec7cd13db319376",
          "0x0dcbc3cb4aafe08c62731dca44c843012265950e0796c73d8f9e53a767c7e888",
          "0x198c373fbc6ba598020456f624dfc906f28cab915b70eb5568f175f842355c27",
          "0x2a9515770f3053638e3c064f5901da7acc2510fb29f5f3607f8ad1256ada07ee",
          "0x2d4154739ed8a6cf9a92e590812f15f93013163f57b8039773cf86348d5318c8",
          "0x02bbeae4c716ee136c4ceef194e7985d46415fc130430a65b24e9f47533077d9",
          "0x192b5b08320766f45be7bba9e9a70c0efc69afec2a75e4e071e6c8f55fb9ef54",
          "0x2bbe0e0bbda936b305829e3a74a82df030d4fd8112aa7f169670876b028f0702",
          "0x0963722d8db532fc95cf2240a570cd7a136366dff544947845b6d487dc7fa62a",
          "0x16010c0ed7a37bca9682ac858fc8d2c4af513f02d0f17dd306f05cd57dc694cf",
          "0x24486122987e17077b026baa81e705e5d0cb76b4d92dd3ff54bbb813f3d09ea1",
          "0x28da35a85262582b220f7262ea68c381573a918c10dd17e8e564eb6da113e5c4",
          "0x1d3196aa6209085c34db2f0e2b3dd4bb6bb670e6ca24d27d90dc8efa5e81638a",
          "0x0e56fe4b7ba62dcda0d2f7b9de86bce6166d79a0a0c3c695341fbdb407b9a506",
          "0x145fd47676ade5c380b90bf08020faefc8c3d270c6bd97f92a18ab94f973dbcf",
          "0x0b6704486fdd2a633bf9e40a5c5e4091e2d430c937306ab3045b39b8b74e333e",
          "0x276747994473ba9152275d15beafe42b924de69728107898b4701a6636df3cf4",
          "0x12665324c9fc8d246c1518e040a15e3a17c0f83f0a479571d8f61a47f3982d21",
          "0x0288c589327ff97824eaa3dff40bbcc9ca73f69e43eebf24b29cd53fa111cc8d",
          "0x2c3b3f266f21d21da33e4c39001c7a703e6b93e047357840123f30724fda336c",
          "0x1d089260f53d9b6d912460c6a9d9ff9df5a6391a492731534826a5575e8a7725",
          "0x052226cd4ff2c85dc3fcbbfdcaa0ecad7125a03d533223c8667040fbfcf7062e",
          "0x2712f9171804273a9c1973f7e87fae28bed9a833fdb70ed93dc6274865869356",
          "0x276f2f781e0c9ca0424a9a5135593be95764a759c231199db5d5e0e776e15aac",
          "0x2b21ffc3ba163ea61b7c0b717d519c64aacab81957e268e175f46876e9ac6f62",
          "0x2f3c2b6874b81531b890a603be7e36ceaaed6c8a3360a868f18bf23736288c09",
          "0x056721148d9a370a8e8128ee00178695f66ec5063c6660ff554913394cd5df67",
          "0x0e1712fd1798dbb4a2976dfaa085bb9822d2d2693983e99c76a556e75e63313f",
          "0x26c9846c7ca0b8227b6eaa7634cfaa6c4a13bfa4710cbefe80befe5119c0b608",
          "0x1ebb9eb479a644d25f53dab3e6dca08339f0effde9b7aad7a34748507d69a8ae",
          "0x1611f5e2add8ccfe9d093bea1d55eac62661a9ac9713fa4c70895997441bba88",
          "0x2462c3d5555611aeea4a146b8da50d30c419943c1aa600e5b13bc47a3810f63b",
          "0x0f376eb9e7de4c45ff508a22b34e55f0ffda026826a98b298672d81c826b6292",
          "0x0e7ff80c3d19a2ad98c8c52a5d19d1712517aa65826291ae6e75e0503c8b8a3c",
          "0x2eb13ff66ab49a73aaad760f5bf271316f3f8538c526a1a64fa65bd3b3fc2d4f",
          "0x22a40e530de7dddc1f842c9421192c635b43a6cb1f83d89ddbd3c56c2a512edb",
          "0x2740baa318c02fde162c920a6245b0f2208f7d0ee189823adb47baffdd5ee21d",
          "0x1965522cce8bd29b3ceb508ce40431f40d54b59c0411e5ca427f8c1c789d29b0",
          "0x10a0db7c2b0969dc250647af0bdb0d99cea4285fd8a90717c2760232a906be7e",
          "0x0295486271ada3cae4cfe3721e6d7b0acf21bdca3caa0e020a6d88ead1f2bb11",
          "0x1d00206d65a92466ddef22e5583661c68ee313cc40a01c090e5ccb118a1af13d",
          "0x112222605052423fd6da21d95545d6e96878e5a6f43fb2666e2fdc5937971bc5",
          "0x25cfafdb7df32a86f2ff44a32ad7b2fd9a60f31a44e5b5ad423ae52b0e3ff2ef",
          "0x1a42aca3307df84a81ff5b9fbec011ac9fdaf3d9c73cdfe95011f7c1ac779d15",
          "0x14fb6c4e0df0063275d380e67c251a29ae638028d8e6072a6e4fdff4e039a4ff",
          "0x1687f501a8c07c9e43eb4ab2244914b651293807a28bc43d73ac4b5640445264",
          "0x2d64ba4067ab898f7b434409319d7cadddb14182f613e46642919b43c89b8159",
          "0x265e19e2a2bcff9489cb749daf9b77256e408f180cfaf05506e11a02d6d4b142",
          "0x1120d9116a584ecad323cb8b8825b9e43ad16ce59c5e8bb5f11b4ab8e5ee6801",
          "0x135c200f7c145c042fdc94ad5bd2e4661b0db889ddc3c24a207f5c7c4098034a",
          "0x2f9d365d9b5f9fffc5491c0cc39e6b9ad14e4d8794bf76e66beca2974dc6c65a",
          "0x2bb27c1a1e8452f317bf86a6384954f8609a285004593c52fdcffe7d85812df4",
          "0x245f28da6986368776968d7e5da1763d38b4e1a5b53ac3b457b26d35d8cc553b",
          "0x16047c3f4ca23c6f5daca5d01ebc6721a3d156ca4c35e0084903836bd12893be",
          "0x13299dddb9e277b122240d08656164d15f8d15cc7483de7087e8ad96909c0565",
          "0x1590dde29e11424a0e7f7d4b3e0fc7e412d092463cf9545b7c62260ab2d434b9",
          "0x19fd60baa2486bfdffffc8f672ab64cba40b394f2818366c76d05b77e91e2b36",
          "0x265828edfb0391d860822c4119b39ceeec02191653f95c7392c01725444ee849",
          "0x023bda9a3c2e8bb1b227b126ea574f97ec7793cd80c62ca44cf8b2e415132bb1",
          "0x1b770c804bfb918b1976e3357ab884668b0d2aa414e007ede000714714aa09d3",
          "0x1d84eaaba6521eb866b600749069e6643daa80f7de10ec27351f1369a3729d13",
          "0x073a0aa1ba4c1e1e982ef00539183ef648fc441be88ab1dc5315a0cbb401c9b3",
          "0x25ac099aa85c9e2aee6789f2592258cdf5ca8c7b5739e267f12034f705797f81",
          "0x1c1f0dc22ad54da9f26321b793e014ac1b853001d156eb590e6ec522e6850c31",
          "0x103749ccae90e434a1d961319f96c744e04ec0f77c8c6505bc21a1194da6c14b",
          "0x093c47c9dad5ea61c8566620e4f436c36ad00d046b252d2264d06d9a377e9c68",
          "0x12d48a22d443711b05bba73fe7cbf5e0734df7ed34587f85d850a5158c0a274e",
          "0x0d1487ee7bfca46febcedb83e9dc73c33d3c099bf3c1a779334834f89f7da334",
          "0x2ebab1e544f6ad4525eb5592152ecb46f8e0f70cc54e739f5ae4c48945e534a8",
          "0x17260110bc0fa2d859a65a519b679cab157a6485e5062cafa3d9e8523543d460",
          "0x14b60bb1b813533655b74d1948fafd94c73e1e0bad2bf3e7cbbe997c40c22cb0",
          "0x144ca9b18104b5bb5a9d21d73bd957f373259539a163c78197210cd16c886641",
          "0x0b698540c0ab22734bad58e48515ff84520051215f5ce4915d80444032a3ba49",
          "0x1f458fdf92a4c03bce2bf69dd3dd4e26bfc1663c187799bb35958d3613e25bda",
          "0x26c0c3f9f2abd19392330ee93e2554abb27ed377481e2a2552798dc952a0acd7",
          "0x00fe825bdde1abafb480e985d6fa8f4c7ae9c6735f9be0a6924293d2ba1145c0",
          "0x24deed3988546ae6520a6c20c7659ebd2a5f4b828182a30f5195674997b1f734",
          "0x0bbbcd555c184aae0891582c61d65195132ba14aa26fae5bca4cfa0ef71c90b8",
          "0x0f9f78d85dede378437afbec3f6ba40c8e3f674cbaa51f2fc53555779ce9aa4d",
          "0x269cd2fb8c03936aa6e30dfd09c34ff786c83996e89f706c39cf9a673a79c8f0",
          "0x040a5ed55c1541ad1431b2e0a5c2370cc0ab8cb2ab31e62505f799b0a535537e",
          "0x0b10db52d69a08382c9b0f60d53c586333018877ec879067a2f9548fa035b613",
          "0x1e6cc5c4090d2d91f567237064c57abb80f1d1886a509cab6bc23e81767a2aa0",
          "0x104f9966b6a892138319ca037d4298fae4fad5d09cd05e6e4814b752e51f570b",
          "0x29d96f530ed5cc92c904d21bf560c82923bf6569acb90abfb9d68c495cbb9814",
          "0x16b917a241c5e2a1941d745666d8adfedefb48f9cffc756fef6667439eaba1fd",
          "0x28049dc8703e7eeb4ae5cb7eec9d0b9614f33f03beca54a67d729cff65971fa0",
          "0x2bc236714aefeb86454cf972676c646a071e70959d53871a23a27bcc4a514b46",
          "0x0e85e3f0b62dfac04defe89326b1f1c9c57f95dc299ef95fdce2dd130b0e09f2",
          "0x1576f55650e0dfa819a1273e6a0fa04c1f1ae18f1f841daf0ad5a235793b862e",
          "0x2e6d1f984d90d778bc0e0990dbe6be66258ad00487129ab3438da90c9ec307f1",
          "0x0a5216c240378084d7410cc778801c590391c6f600a85514de1d5cfd2e29fa95",
          "0x16af0c6ec857714b9e9e7932ac8a6b1b01fb42532e51e957c735e02403ecd492",
          "0x07ef3829b21e86dcdbc3aa02fd246b8fa8e7e4c21578ef0584874d36de491aac",
          "0x021cdfdcab1ffdac2baf015ddad7ef6fc196b7442e82b370a1187b484d5d62d5",
          "0x0911aa1ce608f4234ff3b9f35d9be546f5e7b94bf0a25f8bccb3535ebf1c5846",
          "0x1c861eb01c4b335ecfdb63207c5167f2f2a2dbbd4c604df9739082c5db91713a",
          "0x032ab5c0093afc059d72265152026bc674b6988489fa1922d3f6a130e6e98c0b",
          "0x1dbb7c4e30b3bdb3a248e0118c9259c31b75bebbda8acde2d114311e1166b850",
          "0x295721987b2a072f968216f69e14afc10ac7ce6870a1cef620b9e3167121e565",
          "0x0d848bbb53ea8c72c8ca0a933711061cd11c38bef5204e1987c6e0016cc87728",
          "0x125437f6105b57329c045376be9801f150088384916ab57ee90e4df260533e40",
          "0x16a6f85cf070a9343769dfbde8cec30d62500d50ee294167b0cfc9af4707ac24",
          "0x23e4ba166e2b5a1506df9dd4dc74c7a30dfb79f493ade38be21c0a604073d359",
          "0x0d7a570d5c131bf78031c66c8ae5fd454ba9855fab92eaf9ca379d08e856414f",
          "0x21793d46a696ee5040f599f482bd9845356c02e4c2b07a6450a1005543665821",
          "0x04cf9f12178ba86fab11c12d690e620603525ff7dfcb5606d0f67f0a7250d0a6",
          "0x1e1c8714aeba7e7549e08477b4365ec2dbebdfbb6018937f680d3cfadb5b9224",
          "0x125f99c81db5d7e74be0c6e6b4476dd0e503c1c704b3c7d3ff0ed356f9a5bfd4",
          "0x111bc3215b3bb2a5d17257fa73a77851d2a24e4804ad1ac6e652f0858326ceb2",
          "0x09e73771faea0065c80653dfaa8bff402eeb0be36688343826faf639f684b31a",
          "0x0964f621946810a123469fce6b544ff61cc9b733033b632070d47bc9474f4b0c",
          "0x09532bf9f11051f863a4e80679782b0732d663947390c12b02954918a18e47ad",
          "0x1d14808c54583a620e6587c24b993b1838a0eb07395c3085b449d3135be322f5",
          "0x09b88cebccbb2a0a18e2d2e799e77cabcb4a231123c303e98cd897ffad598d44",
          "0x24ff5ab38ef457484493054c9bd3ec894a8566491a91a52bd788343c429d0a93",
          "0x13eeaea2298ca24ee7a73162ec3a21d817ba86f9772bb68c0461d115535daec3",
          "0x11600a36cb41fde2dd26a7cd4a98cd8beae0a04e46db399eec5c1d49020510f0",
          "0x2c7682d3ee4ec3ce7e1f67cce9bdeba4a1f669f04d9f7a4bee13b3c97d3eaa3a",
          "0x2d9b1db246b004e185b08c953dc0af4fbb7c7dc67b2378eff707507b2db06cb7",
          "0x17f1407c2872d3810b7474bebe3711f72583cc95831301b4e3e06a3ca9628318",
          "0x089fd58055d20602bdbc2171ae485ff48f205301065932bc9d526fe54d297f02",
          "0x2779eaf53710f3a5848a8dffbe40b5f442a8a13c514ff97501fdca080fb3bafc",
          "0x07d6c3ddb807b8634c89aef35615da73596e8ee1a8cab49d022f0bca8780ec15",
          "0x1b2918da0b9beea69a80b05a151e681722cb66fb8ef1f7dd82939e991cd021e8",
          "0x1a21a1409ddfca99e3c0987f97450840f958524affeb28c18fde739c8189cabb",
          "0x1f9e67e3979195d368172267a6ba3b448173e2379f25caa137ab6964714d1fe1",
          "0x07e57931399bcc4119d9cd7b2191793de0ee69474716b08008a9f68a428787a6",
          "0x09ef7d4aeadf7bf593c5a79279e9e65578d14315df9dee07401693d199599482",
          "0x285fe3b15f4b43269d4cc0183f9f75b0b4fe69ff170ac641b18c7fb105d2d711",
          "0x19a7682bfecfe18fbab22301273895c1c4b9a994877dd778646e9dfd64f24dbc",
          "0x0ab794b4433b5d0ca9f3f9236159ee7b9f112abe71d3a4d19385202c209501d0",
          "0x08ff64f5bb9e3f8be81573117e011c803f69dc6a0970dc05118ab1071a28980c",
          "0x2f0d454b49e0366171d95142230002d70f90c8c37047c6b258c07c0c9d0388a9",
          "0x17b463c68fcba461e149e56eda9e8db1a4bc5c7b8289b0cd4286deb5c93554c8",
          "0x2d1a83ac832e49280df94b1e27bab65faa9e21a60a48ef0f4557c03f9b7d11f1",
          "0x1e182411560c80d7d4c480e4fd65b9997132a4ed29f9a8dc3d882209b63b07c2",
          "0x04bc5c19cbb312941ba1b731f096349ae7624eca3b83be88647080f794d7fab3",
          "0x0f10a1319508c09aa4427ea79071da02dce4a1745e139e6949f99216acd8305a",
          "0x07579d96bab793ef1f740713f70f3d2cf4af1d20ea560f48e6f8c04df64f2077",
          "0x1fd8b55d0a28cfd009b298b30e226aa3d42433dc148318c99c4e32af13c5144a",
          "0x2affd50c6aeba57687d824aeffa55c217f633d46840c928c0373ca46432fa731",
          "0x2fc1634b69dc697b668fad3e89c88186a76e4077bf6d1140d8e428eaeb7a3872",
          "0x23a53e514ab262e22eca7ee722497818c064f8f74ccd330503d7abfa85f015d3",
          "0x086ea98e8a4edb6d8500bca03d53a03a22f69b6f132c99ecaf9e950fbf26c87b",
          "0x0f48915855b4d191b7c37d85e8a5d491648cd4e53f5806d499a8de87ee10f2e2",
          "0x13e0bb95d9d3078c10ed2f731f57f5e9e40c95637574e95a933d9f2a7aa56c5b",
          "0x2bc35b0c5b335dfc6f1a9362e5b389dafeb65f0ce5b44548280f46c16ff51feb",
          "0x05b2ddcc86a8504b00808acbb4a643b169db2b07fc25c9cc3138467ca750b5ac",
          "0x1750d1a47da211d8e8386c198095b83ff665b589ac278bca8c0fa01bfc683cba",
          "0x1bb5321e95d1fba2b22cf4d75e2ea2c3643b85efbbf1a3b2cd4be0e7d123880f",
          "0x2a4e8ad4dfa27652839ce179e0964cc4d4732fb55370901b3292d663bde41ecd",
          "0x19b984a2d5a0323b956fae09b529bdcf455122c443eeac7ff1584bcdd632787f",
          "0x11105f818cc27232a8445ff886ded838fe980038727b9e2b33436a55c2f9fd3b",
          "0x2228205732fe6b9af281b5b2b5fda2d07f5184c555fb52a7f514c6c1b1fa80a0",
          "0x20b4c468bb8e29c186e7f45feeef84bd857db85643aa798bc264519daa463fdd",
          "0x14bcd2fd5c7392bf9d93e49b5855b5f35c717d4ce51137b8751b828386a7a5f6",
          "0x161cb26e6fa48dbb05a5c3bdab4a1a524469f98b8d10181f2848029c795e0576",
          "0x26d537ccd8d4f3e62fd0fac41c6a24c9411f4d6ddc03276bac261768953bd745",
          "0x1de7d3df97d11a081106a4bd21b97603a76adff165cd40ac747ed49e61c611f5",
          "0x29800fb0020ae18d4efd8fac1def5c7607af35f4e223904acc6a14d8c6d14ac0",
          "0x271271f850f692a3503fb72124b583a81f3f0ea6789be3a56ffb49776579eb25",
          "0x16694bf37fe421340b186cbc817d0b136f972c935579f2da300d8f3c663481fc",
          "0x19ccaf839bcde3fb9764e57b40f8be036c1d0ad6dd23caf40f0c2dea764b4538",
          "0x1345bc63be8e3e86d3eacdcc4cf142542e0ac660f6f75fe34d3c7f3453823d2f",
          "0x07e733e36a63b1c54e453050ae43078c86a1803b9bc1984f836da9e5bde26cf4",
          "0x067df85fc461d1e13b0a744c4f7894d3126d400c0f674115d764a07a053f6431",
          "0x03c2025ea4ee2c19b2f8d8be0a2b90a1d2f43453515ec04257ae1fc6ce5334af",
          "0x2cbf1dc7af58fa9adb8ba31b1930847624cc4f8f67cdd8bca3a9276c1f06fbb7",
          "0x012035a5219b900dedaec32f62cbb85a2228a3e71b53afd4d2fe6b3c964f91fb",
          "0x1b8c713c90d62b367382c0ceebebe29893157acd56e10755d10699928f3505ae",
          "0x14475f758d5db01a2de2add46c405d939eb1af0ab36bcf26ff93e4860541dd56",
          "0x213776f1e0fac855f958cb20aa090d4fd47e70fd0e936f751037fc33cf9c4127",
          "0x2acf42c1eca1a093f10198dd5a16bce16bf8b21107724a94aff2f190906e6980",
          "0x19194b68b898476596a9e2d4056e15c95a6648234abbbf9ca592cc2c53703380",
          "0x0b20a1d9a2470011eb2f8180215400b583cbbb1fd085fd53bdd1c9217cc5a3b8",
          "0x14a7d1d7065ed6f6ad72a0ef3b848d76034f7a95d2da2a06433c6c4160ef9c8a",
          "0x19142416e3b168abb99babc17ce6821d95a29a31d92bf74a122a8efe799f9bbd",
          "0x2cd1571dfb32abe6e5dfec8371f8130cf77566a9eda06cc8b6466fe9e1b3c528",
          "0x1cb1ebc4b42052876e83040bde7b380230f5f145f9400b5d4d7136a61c6eb458",
          "0x05c4ab72cdd1de95419689661e5e735e15b3ffcaeca1fdc8669e73d8a6cbc96d",
          "0x24c8da03cd8fb497e4f0450069b5d4deb102b64e68d5889772483e8d0e3974d7",
          "0x0de8195805706ff74cb251cfb0bad9b9e3fdd059d01a5fc7c705d60971fa4840",
          "0x304ce8cb3cd5519623520a4883d35792256dca0c12dc1e855157a59daa4508f4",
          "0x0f36b586984d1959a79c38a0e06450edba003daeb792c8d4df307c55c9efa8b1",
          "0x1a8325d55480646ac7faa3addecb2ec0ef7482f10a099c5b4656752e24551869",
          "0x2d7f6744d06196ae0879f406814aabf889073505deda846651fafc8c20185aec",
          "0x09205507dfc37672dd9711d7bf42e7de290b366b5df2367d437a82dc9e086681",
          "0x1c22e9bd3f23dfc3f73dc73c9131e16a8b076818fc8823425ccb1b732bf5493f",
          "0x1c5976233750078411d6c93680d8879596dfaf5f92d48fd4dd94ee5d29c51ca1",
          "0x07cb86c6973abbc69f89d248d744147e26690a61b6e31d10e980137879e42673",
          "0x0c3c9880a8248520b611ee4df7fdcc16a66af45f52eb010457579107dcc99d39",
          "0x03928e6de66d490cba3a1e3e3665123919938effa7fc4f8c9b31bbdee1e479ad",
          "0x0340f788573b536fe1e42c7fd409d367124723dda9c4b0f3b962e0137667e87f",
          "0x030a65bd5db79f009cc1b3fac1ce464c4c0d543385252da017b116146fe80d82",
          "0x2a42a802de9085d92c3bdd4086371a3f17ed03c08a2bc61b3e43e0539357de14",
          "0x1549a1cb250435699b3a2467f83901128094446a6bba526d5473e8241b5004aa",
          "0x30501645d7f67d6d4e1f64b95a344a85bc6a6f97fb361e7692c96cfd54a1d414",
          "0x1c3ea369de18dcdc3378f61dd563a1aaf256982fac9ea0994a3eee26c1f5d00a",
          "0x004f2d2437252a0d4d9ca4c1b01b66083c701281c233807e744910b3ddb971f3",
          "0x132fe529e4aabd030412962480562c95c8fb3c4abade9326e1d87becbe1392a0",
          "0x19fa107156b961886fb9d99ec13bcd8d0c4c544d4240c1f7f43c77c63f144857",
          "0x2d5f91cd3cb552dac7f7843f60552bde86f45e8bbaae484c6b79ccff34ac5ee1",
          "0x2dadd9a69ad146e65bbabfbaac3378af9c5540d17b9ba19bb29c48c85dbfe71a",
          "0x03c9003074e450209212b3bd1622da61c71aba0e8a094a7660be1f4638eabc8b",
          "0x0ba91729271f6b814378bf2b847490d8b06b46ca31cc5c4fc74c1cb04b71cf14",
          "0x0ee583d817f1705ac7ac0b9ae042158ad0d5ef3672c1d13dc7dd794aa84f3061",
          "0x1140026a5abd89c4012d2c43a478b52fbb46ec0861ce5b3b7c1cf69fe5c40f62",
          "0x176ec0bfa58b3976290ac145954418c577ed77ab87fb9f8228175a9ad8e6f5fa",
          "0x13e5899c46c14f7004fd0fd376476cd34aa7d3b13470fdc5232d56a3e59b47ea",
          "0x16730ce766f65c06cb611f8d7f4fc3d53c6662ea12ca4502bb968873f3e14f86",
          "0x165db0eb885ffed5f77a557b3eb21ef2d48b4a7cc6220709de00e61cd9f8f525",
          "0x0c428278c217c1e7e76e3110f7e1b26a9095e8c8cbc07a171714e9afee2670f9",
          "0x2ef183424c590a0a5d3b8a639f37e4e77d10fe9e12327718b8ecc2b40a2e92be",
          "0x0bbbe09fbbfda7b6e06cad868cb1a389fba5ca299ed9545351c974e612f5fdd3",
          "0x2f42003eccab3bff0dce2b22a8769a5ba1a0a6f854c73a788443bc13e8fa5ea5",
          "0x059113aaf928acd9154ea9295a5a69f864149ec96f0409673be860cdc1edded1",
          "0x1fbfaae77bc060fbbd03ffaeabae2cd4d3279363c5e4643783dfb9a5d5946825",
          "0x25b3cef1d524c48156e9a24aa0d2c20ed32fb69b4debe1c12de50db246e3c805",
          "0x15e6f0329ed4e44d0323f02744b4f6d0321e204fd38c99ccb72a35784b94026e",
          "0x16e47f642bf13ce66c2c2bca01a2763d704b46de0d7c99dcb2b480707c1a3bf7",
          "0x1d9f848cb9dfdb81cad62dd5fd43156e57c4ba194e32b421aa07de9e0a8700ec",
          "0x070e206946f4cb2c2a7c5c7c0ca84fe53ffd884279259eaeeee00627dd985cfe",
          "0x0a5f91aed115950ce6348b0f0f001569243c840041b974e4fbdeaccf72b19da7",
          "0x27736747795d235597047a57b524dd4c1ed0e3f42798215ba85056bea765540e",
          "0x0167c1d76479106953282f945c8d8cb72160f6310470a7f5165f1572d6c27ea4",
          "0x1becd457d21ba094804c47c3a688734bd543b2e6d7cb51aec0ca89d6c1e3c355",
          "0x1f43386fe739e7f9c63fbdcbb82bccdcd417338feac1eed42def7150d4a21358",
          "0x2d091c358175583b32cb97c58168f32d83a68c99bdfa7c2008d9c454b0eade16",
          "0x017257c5bc8dad57ef6f66cc041a1606350900dce184c312426065346dbdb1ba",
          "0x0b4adc03c7bfd313902dda678c2fa251522a92a7fc6e4b47d4f1ff98ea1f21c4",
          "0x1af84524441ac03fa2d8b5b391a7c371f2d9cf06a09005fea6e3b708ccce2cb5",
          "0x23ecaf81286336251a1fcc5dd44a4ab9fd3940a048e771ee4668830744a5a9bd",
          "0x187bc703cc893e2cba22fbb598c0e778c2046adbe58b3ff252d7b635ed990c20",
          "0x260b02db111d63998b6af09a81928f62cfc97c4f8cba26e828ff5c057a0e55f3",
          "0x2f0232a9940c4c4cdd0e44e3c4785ced14ff13b5f871ce2f6ee35742ad050ace",
          "0x050adc4d5d64807f730d0f450da5517479a3786a3bb2c8de24536a7ca5de2d8e",
          "0x16ab8f682a4083d0f999f5816f41cc7edbce82c0d59bccaa89c254729440f981",
          "0x1127fb2f0ca9cc953fbb1d4793474263a6e51b77e72c38b1147ef865415d4dac",
          "0x1f6d04ad97f2f4b710f91f5226a8c55ecbc1c25af4e4ca8b76cc4fad24eec674",
          "0x141be544be4c23b3625efa886da65e675b6799028d3a7a6dde1ed149faa49678",
          "0x1bf785f9867194b45e21dc76b200325ce4bd664b7ce3699174b28c0fb3243906",
          "0x24d9be7c32c7e33bf76816e19a3c1e4a887c9ae74d15a7712dae802864c08651",
          "0x28a481ef8515851320db9cfde816826a2eaf994aef8a551a3d0022d77205ad6c",
          "0x20573c158a49c54731fedb7c494eba7cca17975cb4a448c688bc56495907261f",
          "0x0a15b156592972641eef2970904de3e1334376ee64bf76db4bf5e7c8542c21c0",
          "0x1b2bc4a3f3f448efbfa21a4e41d5d6e09b73574739b66eac27e65aa1fdb78c70",
          "0x1a79a5d83a28bbc4c113600038135e86ce6188df4dff938155301593d4cc73aa",
          "0x1e15e7f11ea36757fdcfcc558e7c6bd8c7cb8484388a2c95258e2125164df413",
          "0x298a03bc1edd776ec3372c82ce73c44b3e12e9509c124459f15d9df783953816",
          "0x0acaed186bd21b6bf01884c2e80dfb84699e0bd83b7770d03b918d24a0129316",
          "0x2529c4ffb6c39cfd1aa6e04800cb59baeaa31da43903d3385b2ab25864812963",
          "0x19c47c2a37278f183f3b58427114139b3eb82c0b890c4199706ad944391fa6a4",
          "0x0d2701bdfa57cf911f1cd1fb435fee068caed685c636382249dd9acf45d4c989",
          "0x1e58e36e0ad7b4bad27ac7f76d34ab497488d1661a444dbc07cb9c7219409f12",
          "0x2698b2f66fb15f3b16a7e50cbd835a31fbb83e0b65982d7a7acb2971cc5825b8",
          "0x1c3a8e3737856514071a5891b7eb286fcc836f11b629c12c9b61a76a6f6dbe2d",
          "0x2927ce5173086473fa445d53172a05aa66a8f9d9a169f685c47aa989b9e0f5ac",
          "0x25aa17d824580d6d533236412a489aa45aa389b3d3d55a345d35663a1b143bf1",
          "0x0fcf1112dacc31179819d66574a5cb8ded45003f76667d34c1d34153d8fca994",
          "0x06032d6e50d059057d461477999efb4acabd1a9da592731a4048ae8d19b3d351",
          "0x01e40e819f426fae3dbb00926a7d6556f30d84934ccabf99e9876351d1716b5e",
          "0x27908496d0906f524c251653251098cfbdc97b9d7417e437710e1a7f4b80d08a",
          "0x02db1814f1435cd07ee54f8c3205c7d76262cb5fc5da605836a08d47f3fdf134",
          "0x19377a45d6a5de00751ea901198e1a0acc41ca8a99feae5eec07fe5233d289bc",
          "0x2d004fc82e3df9a9b89321823458832770ec80f875895a3ffe2370c0aaa5cfba",
          "0x17b836256a7de413cdcf93a4c4f8fb6b76975b1efe30aeef0ac12a83b3434c0e",
          "0x1b234a28dab9149e2cd39bb34f794a85dd125f33383b77841b913128cb86a3fc",
          "0x158861fd76bd8a58950c0c55d9578c9c6c3ff1aefa88803f32770adb1a6f17a6",
          "0x0eef809302d3141584285618b0ff2e6a373b1be0db0685be371bb601888aacb4",
          "0x1acf3ee76f19de157996768dafafe604e185bb23356b6e2592032eb732dba44e",
          "0x2f4f55f57b771ecc15813526d73b52b2fa1c4f065517b9bbf8c3658040e120bb",
          "0x0622964ca65a48b30d40a9fd4e8fa757fd737f020459e74a533cea55829072bc",
          "0x1c8cb349b5eba594e3e96ee041eeb7e096facd421f789bd7df6aead030cfd1eb",
          "0x1ef519f3b82f280469c1ea7b2551d3a38d3e50ad2b0c52ed0185780e83470697",
          "0x071f966c5bb87111e1d0f03d17e2885ddf50b7b5dac99f2cf9c87f25a1383354",
          "0x0768f94a8cc8222f9d2eb36abaeae3b351ad7c8fd075971bc95de6c2422ff2ab",
          "0x136fb9d089170fcb343dd1f2cf254468118c97ad2c951b6b3fe4933d5a4faa70",
          "0x14204ad52e17efcc8d6c3b29ce5220a5ea8c6829e2a9d33f646df24212c2ca81",
          "0x19349a56f15918f1e9c6c587cd23bb3f933af583322dd5c0fa6166cf1cd58c6f",
          "0x2ffd15400e3d57af1d503755eb97d331814aae9add4764bb7e951816e06b4fd8",
          "0x001880d406f04352ba0e70d1ea4e55302f239327e1dfbb0fe9fa74d947c04304",
          "0x2194fd04a6d3e80a04f53235a5f46e8e2225e99c530173cc28fb1577a0ebaa4f",
          "0x1384ccdde57742281a3d117c0dbc825cb7d1b7e2b57c0dee6521d315d60d8a11",
          "0x0ab80f679adf8789e9f68615f8e65cade12c9c19e8b096f9d7a58a6e9155afc9",
          "0x1be3a55706d4814487268bf10196ee80009ac69d26eaa4ae6b8299d3fa27da6b",
          "0x1f8a7889404464277e3fa7dad1438e5a55db2b53b46f1080ab25b31b538acdd4",
          "0x263c85c58282f656ea6193f72641aa2cf99ee4f7e47f1bc1bb22c46cefadbaee",
          "0x01019099267ff1ed724e463573701f4c2d074337b27f474060dc35e72ccd18a1",
          "0x0429bebc430d4062e38733619b8d3fddd5c26d05b203ba9bcd5fb9058c7545f9",
          "0x0a03e113f74fc0aee3e546e5937bf8c561c12274fc5008cc63180a26004147df",
          "0x0688887334f483422f47a9397e45666c9fdc15e508fbd4fa83a5e722be92612a",
          "0x1cab73177feeca8c863601745b40138d81b0c209334aac58951709278ccf7c3f",
          "0x0589e112f43c979ab3b8f131a7909a284f3786783a9205271f79813500826f3a",
          "0x081a1d79b226d02f3edc79d6756b2b78d06b7677fbe7bfd2e1c73c5b055cf6f8",
          "0x1d126b23da26bd262a0ba45cb83b78ae17efcf1aa5b97478d90843f0a618e923",
          "0x19d02ccaf1f728c35b88592e300daf8c6cba6eaa7334352eb047885db22f97dd",
          "0x1e7e21dbf66da47b76b4e025bbd438a654d665eeccff928e29ddd0587bdabdec",
          "0x169ca09f61d1010465b3d6a04ea6f323ff2126b2c513f473e258a738c34e84a3",
          "0x1afc1d0db8f4d43d32193344634043bd3cd59ec3c9e867e58f7c83489cf8e1bb",
          "0x219f8604bfa2f5aebd196ece21fbaa2b5e9d5a62855beda8781afcd668357eef",
          "0x0db71d9be8548133a2605d713b9f50cc768c1ab2824303b141f4b2f274c6f098",
          "0x13603e5cd20c12ccf12da4f7d04e9555cda644e5d9abd0f5417f7bb8c6c24544",
          "0x0035c4356044389e8d8d3d84619243b57ec30cecc3ba8c7ee66d8ed9877c40d3",
          "0x0ba68c56af0f045fee1b2266f53980c31cee55187faf97b612dcd930cddb452a",
          "0x23f4759e8cf82af4e51b1a31233dc5277f53aa2422435da2698f1b65a9515787",
          "0x12012879b9f59dece1ed0e03b17ec94a6ac6f2919157ab97dc1d5fec6fa4f017",
          "0x1915797a54b7038336310e46e2faa0b48ba3e1a2d42b8b587bab86f80b9594ea",
          "0x190ed18777ce88aa8ad85e8ec239d8259bf0f51ed8996339759d0453429b4425",
          "0x24e04081c1519eac3990439d5f86f2967685fe86b8dc37a4444d5fbf2ab701b0",
          "0x1345cdab47510fdbe7fc389be04256335e387d3f24d2aa7326f59399a10c85fd",
          "0x119a3ac7803dfbda5564dc8178a79cc1eff78597aca6fd95b3dbbf4952511e7c",
          "0x197b3596d3b66cadac6cc4d88c2da1de336594ee48a4f2e82ceefd9c81267b49",
          "0x015740cbf5b80c058f671ab7b14b2e0bf3b15a44dca4d640da40453d0ebccb13",
          "0x23da644943d6f890a344249f0d499702838011dc6e4535c478efc8a0e7ea1afc",
          "0x2344f76a1be8f4bba48d9dec02fa88b6eee01d1c48d7e37d7210b5a8e471281e",
          "0x2ed6f7c7b4188acd5623022b461c2672054ef8f69a05ec58fc8ec7f0a8fc6085",
          "0x0f5a919e83a103cc62a73502819fa163494d902d7ceadf613d7e0f7b56ae962d",
          "0x168506fb5ae2170331ee463708ad0124c50dda86c1ab464f13711db7a2f6c4e8",
          "0x065064ae2c2846b1e8c73942bdb1e2b402eb97a393e18a600bb8edbc8d029af0",
          "0x1710ff94c079aec5589d7a0487ee074ffa49f880abb14d9dddd2739ee6adde2b",
          "0x2af3554c9bbe595b39616669ca1984c2c143d16f9ee9ed316229b4f5a0a0103a",
          "0x22964fc3479b20e70b3e98306ec30bf3d5128056b6fb525e100f684366c3891a",
          "0x25de0b4cd61c81940d0fea87d9389eb473d469f0415eefd81b56d2048ebacb62",
          "0x1fd575da1c5352daae237b0e8f76723d44a3413b49e016ea12634876310edb38",
          "0x0533b56af329976350645c7cb7fa29c1e0c3b5d880e25f5a52774d056e9658ac",
          "0x167d885c645bd9cfb4a2d63d57268000b73d88398616fbdbe56f231b8b2bc825",
          "0x0cc2f243dd60cd41e04b2430c96abe40f21e3fd109e7a1946131880516bf86f8",
          "0x0341715bcd52b75e84c60edd47292611c4703f8f81abb45f58f86ff7897eee12",
          "0x1ccc6d8301ac14bcb7d8cb9feec228f9c2eebdef5778fb88e69571374f2c2481",
          "0x26d54cfcd51f1d76c8a6f67f37dfe4cb5365e33017fb4cd4d5aadfea672b3b88",
          "0x2445313440a20b29650a00e2efa7432ecccd218a8b111a67e0ec28c559be72c3",
          "0x08287cd7099b718a473e3a2dbff7354e6f56a54f860d1533b28a0c03407558b7",
          "0x26c24628356a67c0a450cf53f60453defa580ffbec5295dac6f26d87ca67a71d",
          "0x1d1cf3eea9d6f23c1722071241367ee8b05560a7af1a825fe788587692091aa4",
          "0x29a6cc340dc509321a8db99a1e4a6f92ed22518718e050946a211b9b0b035091",
          "0x22b0472d8d18e2207c7faa819e646aaffec0283c06cccb04554899c28dddb385",
          "0x0aca637d3f71393f5cb5d01e083778f519b821ef37e1335d65d14b2fad555568",
          "0x0cc06cdda9bbac58a1e162ef5c910ed9fa9861163b5bff627765b6de8e1e9719",
          "0x21c547728fc964c17b65a60176da2a1a8292d0d503dc16a5c60513bf88863c44",
          "0x08512df52d8a94319bcc6daa9f814853e4bf58f57d16f57997eb61d6a19bffbf",
          "0x25c0d9feb0c02a64b753bca57cc68248a5dec4149be2b759bddb53b6f7593c39",
          "0x2352d3944fa61a2c4ed5c84ec318fbbae05eb102075612c26b0f38670e69995e",
          "0x24bb393dedb3f8114acdc77cda2e74a97ff8cf89d751fbfcd9f52a4287441763",
          "0x033ba091bc665e268b65a8f2278ab3113f8c4ae9b6a0baccb4b840969a3b4f3b",
          "0x21cb4b445e8a579c73436f6e08b6b2487ad0f5c4706f0ddc9545fa62ea0224b3",
          "0x04a925ae34260dfdeb17f5c793e4b672b8f5c0da69f16bfb29403926e8d7d50d",
          "0x2df42667610a6bc6602aba26746266877079dc345a79f6d673d64fb27d7ff499",
          "0x179934386a6423cdb3a10950fb65d1c7776812ee19c813f5a67202bdf36c9807",
          "0x0c0f3cc0643c9053e7e87a1ed590dea8a70e6d5ebd907543c9561da4ee9fcf63",
          "0x051a858defc040eaf0847bc5714fca3d63775709d5486a995e93336184fe0aa8",
          "0x10a0da93f5e24e02e1da3b703eece97fd3a08f43a0476cfefd70372d6274fa47",
          "0x2d7beb4067840b65456935fe808f57cc971b6fefb7e09ec91336103e2fb072b3",
          "0x13f1bbb6a850cbb536a0197c016a46723d7387e991b67d58a8065c3e4dc18c55",
          "0x041fd980971d4897e5e3f42f4342db10e517f639855fbaf21c0b9590b23bd8d8",
          "0x09636927f5b349d290067029f74050c9750ef572691424a8a0a01663a45c5031",
          "0x2af36e704001f6023acbe0757637f6cb0facba8e0515b0df5eb317a1dd0e65bf",
          "0x2f97558fe6f6004109ac4658609a6d2cd1b22e5dc099a2ea132e88087e72cca0",
          "0x23cc4c0f96eb9152447440a55e3a3d0be1abc83834d9fe0873fc9d714b0e26d0",
          "0x2a5b6bd888a8a36578d8625f5b77e527ea06db8dc1b54796d80fb1c7db293b90",
          "0x27220be37f223c82ef3157df596b7c3f21bcc03de8c4ab8d7f1d5baaaf638f0c",
          "0x09b92d05c05908c5d9aaf4e8d234481f9684066bec0f478a6f7f41e4738f94c2",
          "0x103686d84f6209572cdb829b7aa67962be01752899ddb717831df659c2e2f60b",
          "0x23b62723d58ed5c2c6ba818383acd3964cf39243288d591a4ba0803b15b48735",
          "0x18870f436ccb65a0e1dc5e6837248474ae52fd226b179221bbfe73f747eae139",
          "0x028691d2f0c336148b5b5f1c5dc06b422d34071705f9a33faf2613c907f3325d",
          "0x1191fc63b79d85edaca6a27d88e92d40d897cc0ad052136e60b5bd0a8e560282",
          "0x16680b82f6e755d8b419d1e303203457b5470d8dfa214d023579cb6c1d09a3b6",
          "0x180fd65f8c737e7e07fbd0e7646c1541c8c34f0bd8a1e1623a3a0e383ca42237",
          "0x06c7ac54dd40d3891a14b48e742a06e587cbdfb65dff4a955da9c71d152241b2",
          "0x2c65c95a72571373a6ab7a18b7f4392c1aef296eb581541d876bab6c3bfe6daf",
          "0x0d9c0008a4f07214c24fd0e733864d7c57f4e13c040c31923bde3e9288552bc7",
          "0x12d3a04f3439bf85b6525221a3f314a2663b9b84ee290e481169dab2b0a48d0e",
          "0x2c75ef5fcee292d05dee7a7ea27eebe87bedfe6582644dba0fb5118cfdf255eb",
          "0x17c01330bb570b1ca9970d5872c1aaab8cda24b330e94a2c95d12549168283e3",
          "0x035fa265ba78efec1b389d50f1880191c35bd402977c50d252892c70ff3a66f9",
          "0x146a648e47158802e1fd7b6e211561de3ce10df63473c254ed2e3994796f3b28",
          "0x05c2f2d7318f91f0398ab541c72b9abe4cd4810598bd0afb230fcdca28f0dc9c",
          "0x1a14bac926bc804faab0ad62fa213583872294ff31da7306e8a092eb070acd47",
          "0x0883cd6e7dbe3bb29320db1da117618ff9f761713b7b07814f4bbad71610d89d",
          "0x06f98d2bbeb45ad82e7624bc3e387a1b0d818fcc94ce9d96f4e73e80caa23e55",
          "0x0c2ec98dc0ee676d862cc05b09e7d74389f6844ef462de336f6a8b693e568d96",
          "0x255191cfa833cd6a862ac869e520575e8da70da30ec970657c38781a7b002641",
          "0x2636c3de1dd779e5577de214b3e6c6351711e9cc1348dbc553be1c8d68b8b067",
          "0x06437037937218fcf4e73ce9b338baca0c3fe948c398cf9fcba25ac02e652956",
          "0x1008550284340174d1e47ac5a027793311c42867e3b718b24a4789acfb7d6dc9",
          "0x152b99159e87dd6e681aaef38bf7295419bb87db5f9fb0cbf37320ec726d448e",
          "0x0d382ade9b281a2e726cb96db54d26f433258818753b88e266280f74d8dca806",
          "0x0f544e2459e6a636d8da23834e317ea9ade7b2a07c4ab94c368da356cd884e6d",
          "0x2a6122af7c1cf2946b33735d2a9f5020cc5dd8669529e77d0069db364ccb08ca",
          "0x2bd710638fa09fa70cb0aab6bcde56cacaeb11aa9bec688c033ef7830dd0cd07",
          "0x17e172b03f25c98e9680cd0bbacf1933a942d834d945fb9880fae95d2594939e",
          "0x0759acc9cb975aefb18a833ff4c84df8346ef63c4eb67e220b11b0f5350c6331",
          "0x229f41e153a4409fa2c0c7c75811813d8a71930da6c8b1b8827aa648bdcea63c",
          "0x0d3153d6d1440aa8e8dc0bf1058667a18e5931afe24fa90ac1911fe322d3d9f7",
          "0x198a6f179f92ba427490fb90b8cf3455f69f02b756e98eb07d4601a52c77a33c",
          "0x29c2be07e30d93dd927e80aa49c44df0dbb5f0506e96676d2d4b1a91570bc7e4",
          "0x13e75b095ad21ac9d107b2a7f1e62088974240549c0bb4e7d83ce4630cdabdcd",
          "0x186d1e26c4e415c8aab305f162f00d8a7754cc1a7a4a5f2f318b7437465ca869",
          "0x24462e17b2b3ff3912d0e41f1750cff169806bc158648da822e1bc9f6212886c",
          "0x04c8ff3b9a174fc06d3b3302ff57c510ad38580c35f4e3b5af79e24055662bc2",
          "0x174a26f79f26fa7c4c2682cec14da70aed49fe7c75770f87a52b5a672413289f",
          "0x1794c80fa206e99862d7e1a753d7754f6f1779581a85201fd46a5bfb7baa952f",
          "0x025b4632d29770667d09f79c33bb2a8a5af66a449d6d39f6fdbe63c976e1ca11",
          "0x11adf7def96c53dbdffd06a85d63145f0dd2395063e8d332be42ea99ca368547",
          "0x01b928b7f293beab032350dd3ea4c4b48c4a04fdff082b4f542e094d973a399b",
          "0x281187bf98a4c5a6bf90203092c6aecb9fc2e561974f79f7481aa6d2991832ba",
          "0x247168cd8fc0ee2cc9fea561bc4e01ad3ea57874756f9d9d734a7fbc45c000b9",
          "0x23097d74125e04278e5fd0e14f52ee1936b901c2de64a05b2b80991a1f3f19e8",
          "0x2cafdfff6422239399753a96110feaa8a156264bbf59013f1d8195a30838e649",
          "0x1a5820280d1cc66e2cbb99320a29d80e7844576377636d8cc22a5b89838b5e81",
          "0x0439af191c824775b86b6ae9cdded69e0ac524d2d7953bce65dc54e116546a47",
          "0x059216dce06bd797a98709ad2b90c15d1f9f78177f0ad66d50009725ed6864b3",
          "0x17453fd8ce97c60079f3d00aa29be8b9b90cbcc9a2161b7cef52c599c6286cd2",
          "0x023a1ac8f3a07c86e93184c5f082be51a98f706b6d1467dce344bfe266397ec7",
          "0x13b7bfd3ad519190d49beb27b00df30991fad40a694ef0df12e89d617263eb98",
          "0x03d37546147228b5faf95ba080b2b40226a58810463208b9b39566f073163dfd",
          "0x05f3bcfb8ddc917835430a22e50cfb51396f15242a5fd0c7e3ac1538004d19ee",
          "0x0b75558f92567fc1ec54e9954a33efafbf51866a5894a76552d1349523cf65ff",
          "0x09415183df1031dad23297c334ef7a255819b7d74365be4f353a88b427d90697",
          "0x2dc2c7f19b5024315cf5b0c76546f9432e068efb50dd37c395fb8744771c0e34",
          "0x115a5ac148ff0c29901220bf5b9cbd3d5de9a902c8c6efd02f7a92cb1d4eda5d",
          "0x1ec78942eb0fed168fbe55b730675f3ddfcab69c122d9f6ca22f7cfa72280ba2",
          "0x24bc460c697257bb30552b45ad37313987739e25079c2842dcdf2f974f9bb686",
          "0x278a2b29bde54b5e1d0f87216de48f51d4dfa284555ebd7fe7f3dddc234d1a5b",
          "0x10f5c4b02af508777c4cd3cd0c6c11f4d679fb3b0d7a52698593bf50cf203cb4",
          "0x2d695324f885445840f526b71e519f295cfb0a6e4f24145f952d8baf8572f573",
          "0x18113527536434b631fb3777ac733ab250ddbe971da50f13fa6cf26c9e05bd1e",
          "0x040730e3684e391d5a166b5487ef2fa42a9efc154629ce413c989efe2c878592",
          "0x1ebb21dae6af4dc7d80bd2bb938982c215ca124b15e0797883af2a80adec4a12",
          "0x0c68022eb63cb3a73859b577b59b17e6f836176c595c6a1fda124a05ecefc10e",
          "0x088f4a9af5d668475bbaa35610bfac5790e103ef53b9a1b3abdbbe293e56f5ae",
          "0x1325e2e84e281caae87f905df719eb665173fc82cfce43743eb3f0d1fccc98b4",
          "0x2f3ea3a22a56db970cbbedaafe9d85f14f02456889b64ab7124b2479978ed3ee",
          "0x055564b7831acfd8f46df96ef819622a4462bfe8281b05e95557598167ee9f30",
          "0x08c29e9a22ec7f02449273a35136949b73de66834e3f015f4689043aab341015",
          "0x212a65492c6e2992484160e5e2f6fe8fec7581256613b05b8cd4237ea596dda3",
          "0x20e629bb5b6c1ef07efa2fc1f8f63b12aa92bfb42e38e48335db3adf267416fc",
          "0x04086fd6c2128b11a5aa58fa2a8b25ed5e57c5b6a3df6534839a817299ce7713",
          "0x065245cf59148ef3cf923d2866e6f1f61ea54e6a0e650b6ab8c9bf94dcf1e9a3",
          "0x0b6c1b1badc00e60dc7e286bf1b76198e61a063cfdc2630f7565064af179fa54",
          "0x023a3829defce44de2819dbeddcd9bd17cc1cc24d5efd94345352d153c898097",
          "0x1b51d50b9f2a1ce039e1bf33a4395f693e12cba9aa5ceaf5fc0c6265ea446bdf",
          "0x0ada2b8bf069b0a8622be85bec5cc1502475bcc995a5687023ea33d3a949382d",
          "0x0832620a355e131a479d163bd702e2e96aab3688f818b54ad378764ae1a2d3cc",
          "0x01dd7cf51102ea8b1048d3dfca649308d59f65f4f370be00726cf5c8e3a72fc5",
          "0x22cf9eadd9580935f02cd8a788978c53bb4cd780b262c7aa0beb67def5d1975e",
          "0x17e3b5605516db11b62512348f8e7f206c2e71fd57a7bd9fe96832af6bf7215b",
          "0x1aad1cbdd185bc5a2bbdceef570edb986520eb92bce2b265ab8864c51ac489d3",
          "0x28d5eced9d9e5515d0c29b800e333bf66662a8b5b9839856e4094222dfb4e3d3",
          "0x15660d8c936e1eeeedb10437c4cae544dbc1b9be0fdd639feffd0246a313e886",
          "0x1f5e8f3f715cba0dba6f1271e1cc8940b37305246fea62aa7e16c301c89fe3e6",
          "0x03bc3a131bcea5b2f4ddb5cd58f71a92c54973da67f3b6aeeb9c2b2b1ed32628",
          "0x10989c21815e815e3695b1e86eac0ad5e68468f37066142d042d951afa013609",
          "0x13a14796be2c62bfcef389accb50952a46c7569e009201965f13223a77feff88",
          "0x0f307148b769d5a3aa0d70b54514d1de5098e070dab986c02cd91005c37a9385",
          "0x1e720c542b831a978860eca880ad522210565a065884b82fdd9abaed3d224b99",
          "0x136981fc4f37a5ddbd57a28438eb003ca7ff0109b349c2b3114447bfe6420d5f",
          "0x23c0f4dca797a7ffeed6185b6270045ae960f80e1ffbded2349f7857defcc5e6",
          "0x0cadec3532eef6e435656436bdf7ec56853edf2ecc1dcab33e585d7f9f33f215",
          "0x1d3fd0cddca96749c0e76b1094747f66e822bb07a1a011506d198eb80b831421",
          "0x0fa4bf5751e05cb1879a7e9d1be18c0cfb070ae2e54365037bf152b45ac085ef",
          "0x0801c4500a511b5f9b6f0bcb6deb2d0898a3ee9d9727cf027bb17bced7992263",
          "0x13b257c8b7194f0ccfcd859b03f7451cde8314798115ac1de5981ccbeea58e56",
          "0x0c8e8cb135dd381120087376a03c386e67871000da2b1bc02be951330f7a5670",
          "0x165762ac8bae66f3f3807dd925a4334e870a9b885628cb7bc0b8b7cb941c070f",
          "0x042543556c325a58e3ac753f4a5aec40d3c73926e9e3b0a62b92a5b920c47cc0",
          "0x10884137e86600bdf06f81d79045eac6c34f58ad687b799c849d2d12afb2b005",
          "0x243aa9a7d3478eb73fc5c1107b39becd9808c6e5e45533a3b267cea612a3bc10",
          "0x0d56cd4f582b5719a3301be7873142cdbdbac3901c33c71f490a29f198cf837f",
          "0x01bfb79eb37264d67c12bc4b214fd728d6adf84d02a08165ecc982868612e504",
          "0x082b38037b96a47f54fea54f4f851430f7c716766cb58c14f3db8ee1daa707b3",
          "0x1d92ef0b67d46a991de603c82917a32b7b0911408f8c8ab283bd36fc1c62ba78",
          "0x1e85bcc91932f9ca07b35984a41c4bfdca243a151441e1b758c5a4c0ae6ba181",
          "0x25e30f6d84da989e0d4d0db84cf57739ed9d1f354c8e3aafcc01b47802c57a34",
          "0x11ee0dd308c65edc88ce2ad2edeca29b6600ffaf309fc6c5e3a3d6318ca98c83",
          "0x18f3ca75188fff5274224cde36c2d85211b094c20f53d9e3a4351896e3d1a1c0",
          "0x05b6b21c1f708032911b6e0dc4e57d1e8edcbdd144102b28c8617e53b11e4e7b",
          "0x00eb79b07bcbdf2d2258177bfd15ba43bc56d9362e49f13d002394f6c635f20f",
          "0x1d963571ce7313a17110b17d64d45001b36d20b4869ffcee44ee578d23d6488d",
          "0x28c45144eadce345f87378b432bcf30e9fdb40e2ffcf61f5b918e3ad42ccf153",
          "0x2776530993a11fb7e5222ee0df505be5e57cdbb6352ff7853e668007714bd718",
          "0x210a7004456a4c7e56642e7940230842fd54b7fbdb8c337cb1493561e778fe8f",
          "0x0cc1cb51986ab1a0f628c12d7c6656a9d8495db91d90e5dae8f0dd264d9f19ba",
          "0x13d1e0cbd9e0f421626c8db09dd24df92c270688e702495231d057c7676fb1dd",
          "0x1c2b5ad45cf4181611eda67060a0490d8d6ae3cd1b10a1570b00bf0bd3a26e09",
          "0x25edc11d3b5e6e968ca9a27c340cf9350744d28920f5762687d2d31dfae14235",
          "0x230c8e7ac3ff2b39daeba2788119cd58a3a90a9c24c3ed821eafd08383f389a0",
          "0x2937cb33c930ac4be787b6e890e67f8a08cc92c151f7e673ffbcc27b25cd0b1f",
          "0x28a3ac677b6f19ace69e3d06049557fde2a92476c199e1c819c907ce456812e5",
          "0x2dec341eed7524a26b7b91bab300323347038c01206e0f780349e5c2ca247076",
          "0x0e83c9f68c5feb4210d633821cc840bd1fbcbed87effde9f23d4403d9b8b03e5",
          "0x112fb21185598e785bff0f0f7e4821289232403fb2b31b48e7ec9022df2b7971",
          "0x1faa621f0c039fdc8024cbddf4ca817581c6e3f26bde278b13c34cd651bd8782",
          "0x04e3d26adfcb4ef7cc322ee557878606ea5b537fa1f880445c647e8d12c98c91",
          "0x1a70c2015bf1c5dfa637e8debf8f759e309f46c37e535f0c64486995ea5b9061",
          "0x228f60de5b5f3ae8a52bcedecf7b3830d5b6879fed7eed95231c674c016c7fea",
          "0x0e4ddc512fdf839ac48b7ddb03e765e9cf5e320745572a5d4f70097c1074406a",
          "0x1f8e572e2e0b48f9b6bdc474210a1c8df655ca5e19f7d13b5a89a185f3a3cea1",
          "0x03a183213151c33d6c58b6631cafa0c05300f75deb9ff971fafd35441f5cac78",
          "0x1b7da980828048a7498cdd2b49ec08be3bad7d4327c9754b5e3fd674e02c8286",
          "0x285dd9c3bde7c361a16cbf14bfb0b5a78d8f4ce4433d41f13a372e92c35e21b5",
          "0x06f952d66d60cd18949ec08a5c203707ff452e3df32d50a4e221e72a793cba06",
          "0x2f6843da088f675ea773a0377ecfcee33c9601ada5b8256b49f2c2259ab8abdf",
          "0x1bee4d9e168ac606a73d79a990c590900012aaff03291747553781384c28d800",
          "0x0c8c85c0320d6911ab65a50deb2b2825d3e33921a46522e54ccb6b806e55f192",
          "0x119ffc6ee4a000ec8b6bd175bc99718dab6508e999578d85f57fe22946120d55",
          "0x300d0e8681f117fb491827fa12101206254ecfe5a70b08716d1950b6635cff06",
          "0x04f424c26471906086dad2de5452b3148a9480a644e69b0d2c6a8e3572070181",
          "0x2aeea0843be6d263700672c426e9820c16f096fdeadef7beb1c423c04eddde55",
          "0x270aa0ae5c5a5ddf685bc432b47c996eead9eb1ed89a25bed2bb358cb4edb6f4",
          "0x0ba4f42fa43b005e31fe2fbf27ae1df017ff6d11f27cf952436383ac901bd17f",
          "0x189ac9f58d25991d10ca6233b1ad8cc583cc1c2479967904a801f92c4db08818",
          "0x0ac7c203b5b06e4b6f56de45fbd9e502d79662b3ef4c122f73f7a3383fb52af5",
          "0x2ed482bccb4a7c8a75dfd31a443b74d1e4ef522a250660344c21a8320a478cfe",
          "0x0f4eadae92ccf071dcdb7d67241db82286a0b53436225d8d6d06c3094d032be8",
          "0x2f3ee4a76715b3bc3feb74e528948ff152d0b69cae7aaa30ed3d254ba8931a73",
          "0x0a666ccbfa6ed09c57f58ee2963407236b8ebe1935729e811689b398a9dd7b40",
          "0x2abf8b9e553379c8bf68fbc67a67dee5a22df97393673145211d0fe9f5efca24",
          "0x1e0e4a52a2fe011eafaace83d54b92e6d857634b4510101958e7d80686ee9274",
          "0x13ee73f6525acc520a0987c161e5195723b4785d7ba6a031c8357fd55ea7540f",
          "0x094ff2c24cfd2859ef66c4f62696fcdc7edb93ab92127ca6227a6c029de19e11",
          "0x026fdd4092be37092fa13e02d03b3c93dabb7fb7bbacf3129344061909556cc7",
          "0x060cb0ebf20906790098d260ed00a75704e88e33386f43e272154888d56fefe6",
          "0x0ab0fa8ccd280804c537d2e09aec4c1306b1a7b479c6623e9128364d9297f7dd",
          "0x13dd22e61ff5e9e3387f90488037e06c48cf9ec7b8fc40b2f78e831e977f3d13",
          "0x24c62af21d61cc277ed3eecb6b53da40f824a6bc8619f830a5a5bf86846c1d41",
          "0x2a025c7888cb0ec6a2338a4be571a7c67bdf7f7dcf5c0775b785a2c5ea3a0c60",
          "0x035c1ff077b016b8069c044a2bf5cc09803e94ee0110c17a5bbe594cbb270e14",
          "0x2f296505bf1353b23a672791a4ee325a28a9e1b21ddb02278e48b7c8fd354d18",
          "0x13b16c3cc0ca470c75bc2ad7bfd6cbf0b669c762bf0411010099c1162e26a9a7",
          "0x2d3c900ba9a9d5494fced5d70e8a40acb68f47a0bd2521f3813ef831f690f5af",
          "0x0ce9e5f31feb0a8d20eb1aba890083cc3092738bfc196e10db8cc34b31f1af2d",
          "0x0da413bc6c64a52d068bbc66aa2517c323ce2e00ec365235cabb2235c32c93d1",
          "0x1897ae1a23df0f99f8c1cd4d480958b959d327816e6a79d83f64f11f29f9a26e",
          "0x0d116dfe5362123684539d6841825a764c053dee6db6b2bb5d35966760a232d0",
          "0x21e25952e98f9615b696b4cdc5403cd7cc432835a8e78ac727a64674b34e4314",
          "0x1a3dad57e7ae205a48f3a024984c4da0501b544afc63aea283022642d3b74528",
          "0x19bd3efa0a6092951ee71b313c1b6cd2b016f1decb5b51d8dc14927ec770f186",
          "0x266efc42a30cd04d6778f50a3fbd5c51dbcfcefb6eb400f85a7a278ae184e381",
          "0x1c8d90d85ef64bf4bedde609957ff4dd007aa05eb2a2d04e07b03013d7c90b6a",
          "0x02ac06d4cdbd30847a9fce14472ae320e1f36252687227e082f213b219e72703",
          "0x0522f2c9b0876d27388b8b52a51002e5fe0669f33da07014dbb8c0a8e29e85cf",
          "0x26bf744624ce575461c466270c3c7cb09ef5c0b8342d865985ff22d17b47239b",
          "0x2375100f868f06ec614e0ded6d99f714a1b3159f810493c846eec25cc2df2854",
          "0x0bf461146b46b3e73e0edd4936989f404cea1f9d9a058297b94cdeac7758325c",
          "0x0e98376ed641425e2716faefd8ed7544b173c5a3a66936209e4af629ae6771c4",
          "0x2f9c4d96056a1391d89f28720a20d0a1e7cb59a5c93a87dfe6069b5f4eca2710",
          "0x192f200bf3b555bbac797819bb21b990b729d65a4d28a27d6d3f00f1a02aa23a",
          "0x2bf8984b5626accf10b7667f4fdccdb7cb605a0ae34d6d204ac1cbc80cb49126",
          "0x0bca21c12464247244b2a19fd30fed65f8e3abbf8335b49205c1fcc1f6aac1aa",
          "0x14078d4ee11f463471a49516c3c85f9a266f8c40f6d7b1f86b1d1935b09f15f8",
          "0x0bb8a04ecf9f98e1697d330e922d0c8abde0000b50b5aa57c5800d52df4de011",
          "0x21526121c05e09a0abd2ca6efe5b42ebf7e9115382221caaae628a334917b035",
          "0x00f6a443b0e7ebb0bf777511512f66c5e5bbe044c9665d96109018d9729c84f4",
          "0x10092751e94fb6b5e49bea158a014bd99078542458af14ba4cbd9258b8acd236",
          "0x029389903d0d3c29a173ddf452a66b4abd36efc642cb0b57d8f10819d5c0f5f4",
          "0x2b6d20e6cc7ca916f542668724179d8d0ff0741c3d51f74545e2139112177376",
          "0x2900b4277fb3a0ff83b4c58fac79a8861e305d5eb313f2cf57dbb05939036558",
          "0x10afdc0066dda9b64bdd43b86d0ed62b9b3938007cc50f5699250240cd2ee1a9",
          "0x301ed1566f5220e17fbd4083a57bf42c12c15a6647ae8103edca272fbd5f8f11",
          "0x27f1833229c3a5998686903e824bb3e3e10bc969f1342ab0d02de635fddaff11",
          "0x0c4ef35ff9f906d0bea489d201c210c53abbd47a151a9e4efbdb922029fb64af",
          "0x0ba5ab9246af723bff457ab8228be06484af3e3545dbb4c932ca49115f957d27",
          "0x21c572bd4264d821c5e2aef993006499c88b3245cee9593f02c250149ae87ac0",
          "0x04d1cc4795008719326f8106c9ce9a4b0dde4f4de01d2429a23511b1fd0fd171",
          "0x0a379f7d6eedca7c4f07bb5df2d8ea0dd87f1eefe2ac2271370a7f3be27065cf",
          "0x28daef7d37a43f2ba44065f2213912eab6c8c60e3f7560fca990be0ff4639720",
          "0x2906e8996458504f2c044f053c4ad24d35b0e0ed373b27e02e5235a3d34f65c3",
          "0x260738b3d0a746fb0612dca6db53bb968c552213b2f9a134df341baf3e1379c3",
          "0x05f177ae8c6eec8b9712cfa042776690e924bf422430011ef27af82df0abb237",
          "0x26811027f445e86c192e8ae371d2e83fb73561c8cfd10bbf5b29a77f56b1d95f",
          "0x12def5ee59c1b4a96b50ab3de36175640cb70363fef89995f34926ee84be514f",
          "0x069b58a6aa41994a11cc7dd3a428f6c4ce621b5b06793f5e95b4034e2ef7e9bb",
          "0x0dbb162fce1812bf2a16aeb6aac7f1737f2d27660ca4cdf6e79121fbfbb6c5e6",
          "0x287ba84aa5087d8cc9f89450f1fe391cc3a84f28a24b261cd1dcdab039a309f8",
          "0x1e878a1f2fc77cbe232aea7683d46d8996debb9cb06af003849fd099e9c504e9",
          "0x1c8d1ef246dd75f42de13c5bfe069c08d6af9943cd7f2336f31c896456cba2f1",
          "0x074f1a678cb029488356dcb477a88303d0ded5f2d5ece54769f15abc1994538c",
          "0x2766e558172ac70b1f3dd85f4c80517ba6e18556bf51d20f687b669e7815d47d",
          "0x20636353e29facebaee5f04ede42fc3ead0d07727ede7a80af1c505c6ff5d534",
          "0x11ed975aa3d3f9bac1e0bab123041671f8db695fe07601fe5a71e0fcca916b46",
          "0x18100160418fd858f3e4fe8d5d6b80e2ef376618bfe5a556f24bc3247099c441",
          "0x2abca18d9b3f2522e21ee57a1c6634ec12774d041e65ef8430224cf31f960f14",
          "0x16625241533c582b9b57f6e0963dfbba9a7026139daab3174fbe71b0d9522c8d",
          "0x1bd3cf1bd3124abaa627850ff77a6778e8d82d07ca24655d94c5a27b57c780b7",
          "0x084e7ae8a515bbe6fd8370e7c13e7d09835c3749ed21c2842e7c46b4bfad4e38",
          "0x0105b64fdb0f02988732b58e06db800b2df09a71a5b5a165ad2011ebf48a6447",
          "0x043ed436d6b9af567aac7e24206137faa086d188e8444cabd5234983904bcef1",
          "0x2451cb7a5dec1f93fd2b3f8b97c4b1dd2fce7c87d0a92c9f699bc550032a0a7b",
          "0x18f37c624e96ef9c494d2f016bb1ed956ef951f3b57420a46c7160bdfaa576c1",
          "0x1bf84d6d70c748ccd981c21b19d555ce7c3841f34220c10797af76f62e258980",
          "0x0bf9b051f2021f38a294eadfd0811f05c08852720bdc749e1f9a62720f62719a",
          "0x19f1fd2199e3aac88c7ccd7dd858d158c2ef10e8236d2cd66a70a3f0d187988a",
          "0x1af9d63ace6db7a8ae20a04b776fa39de34b795394231214317f036e5954eea4",
          "0x1b3a2d08d1c3763b7678b9d9de1fee10cda80937fd7d74f27d6e550386f5443e"
        ],
        [
          "0x0752af3c6fdccaf3868276685f0a69b9749e1706a82917b64ec2ef847f804559",
          "0x069503d417e25f4568c7858ba8334301c0fa19c1b348bc7e18a4c1ace1d15418",
          "0x25c1b121f33f4cf7b308ec4630f27b603d22aa81ca3595e801c5fa7d9770a096",
          "0x23d6b55145bdb32827c1456af4d7be4c2d213e825c1d2f0c9ff99b2273751f6e",
          "0x1b357bce3ef3f2b76afc2b5804805adb14cf6bf37fe2357c79aa7d6b32acaeca",
          "0x28ec5ac0881c1e6426ba499409894a6f3c276fe5689f2c35c9027e80944877d9",
          "0x2c9862524ac8a07b47d211c9c504c8b0bd398d028acf690e4b8ed4005dd06eed",
          "0x1f6e6f0ac4aeb7a52343f30418078b40644cd43e290da0baee92891c4c065ac8",
          "0x03db3517e233f8a76d21b2fb23c85fa7cacc577769edea09aae39407b9af2fdd",
          "0x0fc333dca4183dab479c5962eb05ee4b79a8ac6e0cce9e9b0a2142247bfd0877",
          "0x1eed281978a8395c04289b86197673b0f2b65e1a135264527e250a5cdf99aca4",
          "0x2568bdf6511034343fb5d5d021e052d3080954fee357dca36fa5d78f33b5be3f",
          "0x1dafade374e63251deca970591da4a285a63d11cfe64661fadd9a001dff82330",
          "0x0af25c781abf56fa4cd6833580e97c7a60eaa97f1dc32b622e895df3a6915b39",
          "0x13501451cb7d3e0cf3cb57741fbe8dd59757c9367fcc48fa11deb135427c5c1c",
          "0x197045fcdcf15bcdb247d8fbf6c85c80f2d065f923108559a1730d71c73e56ce",
          "0x1a390d7281375fac249b9855f8c67a275e8ff8a0a821d1b305c4cdb1313c8661",
          "0x17f0706f7e12fb022d15f94297c7b45947755e5e84c7b9957659be1de64b737c",
          "0x0a8f5f03f19d49799b6fba650c06e4aef251ffc75243a8d7aee8924d563f7e49",
          "0x24c9e6c35f4f819f5bc1ef26576e16d2c7c7206a0598044acf0c18fc5042f0e2",
          "0x002405ca70d51550dc14abfee18e3823b9e979072330d547133a14b25e461fd5",
          "0x1eab4cd56f1474b270d502945621d93e44663caf8f1d31d86b156e107fef38cb",
          "0x066b9750f73f4561ede55939407e74b497d4deef598b873c4b4a1f32ae425d00",
          "0x1ee3dfa596f5d87030a6c9d27d61dd175b271179408235f13bb3f84ea28e7a42",
          "0x1ea94b9ac6fc1bde29d5893fdcb660ed61ff7b2c65b638a4046eab217c02aae3",
          "0x131388351f0796d4753ce564e754591cb1bae02a2dd54878281ac6e7a3c069cd",
          "0x1a45a017fdbe53619a29d8d31f27e408f64be10bf05ce16c90af3d1f13886a2d",
          "0x1b4a0d68e54312b9fa67550c5c0ff0d88fe57822dddf9d58d9d2215057aa94af",
          "0x1d45d369ec0399905bb029dd9fe0b97a5ced1d29c7b5a39da358ad226691dbb0",
          "0x26154c9c51df8059745bb2d97d9a9b8cc8f3d3d813dc4af414adce1d69920e8f",
          "0x2b748ad3da43c5cb9412cc64313c8d4711251a7080ec5b59206e7ac8c701730e",
          "0x17a5468fdb1e5fdacd9c9fd0a7f5fb756e05f2f2fb4104b2cb48d830fed13758",
          "0x2697a5e22542123f0923b86b1529a5405ef809de03ee4129b2baee5cb3bd94e6",
          "0x09b07ad43370fc4bf9ade610e1addd38d9d962e84d8ddb109efdba69916dd489",
          "0x069c194b5b9f2301bc48d6363c8e5afa4a75ca2f8a009e15ad4ca11a17c81a1e",
          "0x1a1974ad418cb372d555ec9af0f348b9729cdee681eb0e4479b90bb720f542c9",
          "0x18a9d8d34cf2c633138a9eb9eb29820c85b7098895826ecdf2e1bf040dcf0287",
          "0x2e0554839dd70a4b9998fd915327fae14685eca623d662585186d2f124ba8bb0",
          "0x1e6d0216c8b678bd9e890ccd72d23bc267948ad87fab25aea6257f8cb7012803",
          "0x0920932a6c405b1ee871ae173949731e6169a24442d8f8c9ed79ccc7a24a495d",
          "0x142c42de6abfff58054f6a4bda8eba5f7f10cf39fbeafb8d39aef30e884fa3b8",
          "0x1418edd88e64d3ddad03f33ca0936172444bb0712d646a8bce67b2e451ee0d81",
          "0x05c5dcf2bd5e04ea65654fb473c4d4692e9958a5999abd7e5cdd706cb7e082b1",
          "0x114464311fdfa11eec166d202aeefc601e4d16959ec936a9e8f1b2f97fd35ddf",
          "0x21b713b0fdb238f3b053f6d596caf07223b2a9d1fcca758321a1d9175c327ef5",
          "0x15ef67cae5838a50bc671a5ea78e87b48bc98e3cd7bf76d5fa033093ddc97581",
          "0x0bf88917cb7c570f68b39429d8fee0fcfe583306a6ca69338c349026fe66bfe9",
          "0x1881f0129a64b7f861085f6b3669dcef57e568d63497982780770b4bc3b437f9",
          "0x2055eb732a72d37cada83f04ef741785368d648d09cb50142575430a110e89ce",
          "0x19b848c33b3876bb168846d13897cde6b0b9e2b29954395b39946a4f5f26d003",
          "0x01e19797232964cd5f26ae8a2e04bd7b3dc1bda25b541f3d4a059b48fc952da6",
          "0x028b8dd78e8712e172486a4b278ac8e166b1996552c74bd2fa4bfbcba3913457",
          "0x1fb1cff73196d134c30359da15a530b1a5741aa0e05788a9d4fb2032aff0d586",
          "0x23bd3301f59bd655225f85c42a9466bcd7c64aa93637ee27aefecdf288326039",
          "0x0e2adaeb2ac7d6944e287dc7c833015313d3f2beaba25ea4c1dc6f0e3fbc8e34",
          "0x2f5d08548ef73d65c2853178cbcbc8a70c48003c0d1386db7288260d29a52d0a",
          "0x2f55c0e96de74a61fc974df0da85b11ac544b5c8544ae59ad76cbc03889e79b4",
          "0x18885f739a9c3dfeed39ceb7c8eef77fd635ad52e3294d3e126a92a64c5a4543",
          "0x1267cace9cec3c1a96fbda5f20df309df88f9edf5684a05bfcacb11167983082",
          "0x2a45c0484448da31b253b632f39c3d4f6c6af8e3e399ddd393b820cdec66f902",
          "0x2260279c332583a36011973aa7626d4e81d6382967868a9643a76e53a2b25316",
          "0x28ec82446ae8bb21783f54cd4daf07e279bc0ead04d7a313769f662c8e74a0eb",
          "0x16e13570deffb3bebe118958b2d86470578cb112969bc6eef3a1321befdac9b0",
          "0x2288e83beb79459807cb77408c9bbdbdd077e620279986f4e2f0b3e5facaabd5",
          "0x2db5b06f1102b72ce49946084d75f2109ad970785a8329de8e225a410e243389",
          "0x2fce39a19ea115f3a917041fdb267c1b5103b5887e5d63c48eedfdc533699758",
          "0x2c65ef055b28fb41707c324a36a894c6ad9f862fd1f97da54459c5db0bda55af",
          "0x29e63a24c91235dc00a6770b9e572358c18a9063a34066f8b6f56683cff48ffe",
          "0x054211c56cf9cdee64b7daa7677fe9f235e2b5c99c5d8b55de20d9aa612c72c3",
          "0x108e8e83433f7cb1728723837ede94d073032ab66e2e0fb6db9787b39559d73b",
          "0x0ff9bfb41914e199a553e070eed9438fff033cd31476589149a9e60d5058114e",
          "0x06913bc2e37230d4b6f56b44697d6f80418d7c11a1d20d8484e95b067f935bf0",
          "0x300d3b773b9a41ef818fdd12202f499d5dbde395388a81c5ce3bc3cc8b488099",
          "0x29f9b289721fe3001937f6c487bb30e342b344c71ddd0f957d02d9295fabe594",
          "0x14de0dbb50a0aafffb3994762d1496cf51449350b5dfceb0650667f7db7f33fc",
          "0x045cf1d37629dee9289fcbe4823519deb857ef66cb39cc6630a3ac6157e9e0ed",
          "0x1e7de46fdd23c6aeb94addf6cb999856322d3ad6d5803cef88b6693ed13590a0",
          "0x2c033fdc57232e685abe9aeb18a5950e59f666598a0a9032afcf58aea772939b",
          "0x117eae65ffe6634241265348d98472074e89cabe3d8f9f55cbc74ddbd9843e4b",
          "0x2988e81a9b5dc22c8b3c7a9d01344422f2483364c189996bcab079912d25993d",
          "0x0dbea591b66a2448fbfb886d10b899d656fddbea4e666c0f14465e09ccaddff5",
          "0x1edf424bb6ca08ac8c4cdfc98d6d3fd04000ec4c6a8628d5e2b3b1263234755d",
          "0x214306c0105f363d5259e2141e97b7da41b9d5115048d1ac8483fc688a7034b1",
          "0x242e00b6930be5835aa5027493d3b11e311877265a70210e01216328452fdc98",
          "0x29154d0128cc650989dabb8ca0b18dd5beb1ebac0f63fa47be96e3832012197a",
          "0x25d22d54d9c82d7cfb89c61aa62ca150506a2bfab5d300db784d25d260827d0b",
          "0x2f23f0ba299f5c0976c16eb3b88306892612873923ee88eaa2db8cc10108f5c6",
          "0x0b743a8913bd8e7e709e68311a3585efb096708315a9812039f215899f4294c0",
          "0x264efa00929546cb4ec30a621c3c6f661325872864ffdf84d5adb61af8dbb3d0",
          "0x1c49d76663a358387762d208dc85400e7acf1b65fbb13edb346df1f2a10ace37",
          "0x2f40725d1eb518ae4562ee25ca08b3e56dacaa511bdf82d099fbeee5110b682d",
          "0x2651bbf39215d6d6632a652ace6ff5118555acff7d4c8be7ee3e206f44ee7c00",
          "0x2198f3b0a3fbd0bfab07578d40d7fa03e50761ba8f1f2b018613d65b091f3eaf",
          "0x18d4c4699f7d01fa00edadc43c8e1f10d92a4f7db96c2d9139bdd6fb11fea408",
          "0x059edbc553491ec6b94233d53b5328a5d24b6e49f457190bcfd062a5822957cc",
          "0x129a61614b4e9e421e6667daa9b85fe14beaa822b3954e551288564bd2b14552",
          "0x2e2bfe4d7b3234df6b62688bdcb2c8767597ea3f7b7792fb44377e71e1ec9f16",
          "0x01f8397cfd8eaeeba4798e9863737ec54572f6a355ee47cdb827a7f20dc389c9",
          "0x117db9cc9140e4670bc74e7fd3a6fe99b87e1781d2ae191d011c6d64e02dcf8b",
          "0x11e0cce35b68def7ded5522f434c486f287db0b6bae3cafb231dcf951598f89f",
          "0x25bf4ae30c44ddfc8700e2369aed7f568980c6d48e33b6c63737c82f942b9230",
          "0x1153f5c16d5608a17dcfa2fcc5ff92d0a41d0fd1380b58d2f77c058339886f6f",
          "0x041bed39c29afb7004cee993fc222605cddfe641fa3a096c8013f38b5cd85b7f",
          "0x047cd5c5b0c2a604ae99c842540fa37d44e6abec3657699a116b84fc42ad5d3d",
          "0x154ef25e671486db8e882181a331826dae7b9739f2eb6c8f748a30649aa4180e",
          "0x1b483e74f41c2658fafd081b9cb7709df288999454496a29a492eee79efb9622",
          "0x12db88342d014b56fdbf93dbf9d9c082196cb34e0ceddfeca0a40904e2b8cb2d",
          "0x0944263fcad7635a7e8ede76f4fe3afb205cf835f42a95c0336de6c42ea5a990",
          "0x2e7ac6fa9dffaf83a9ebb6966ef5464e4429b98b78b8f14165c501546970b734",
          "0x04bca07a15b585cd27790768caa382e99d14cff8fa57e2fdaa115a472dd4ec12",
          "0x0a230ab485e781468fdbfedf32413aa400c839ea855a50f1916b03c6761c034b",
          "0x1621dc3c8c3db86fa83059f4a3c41298aec8ed93c49c53bdd2587339b216ec74",
          "0x1b4e4bc4f028fded0daa5c1a094feca0d05094fafebd6619348e1dd9fce168ca",
          "0x1a739e55ca644e9ca0ff28062320977d9738b357287fe6d8727e10ff4452c799",
          "0x292800e8452a5666cd02b1756950f8048c367a2439adea3d942ee3c3185cfd92",
          "0x1fa371d9106b81aa664c11f50cd41d2481a91439a39c0fa1311ffc28c4484dd8",
          "0x2a786941b8ab631a455f1f0bdbbd3eb9a19cda5d76c463bff4ef12200bd6cdf1",
          "0x1521f303fd41509e122d6b7661d62c911fbaeeee821fa2e11e29e70c843fc859",
          "0x242af7a107cc7bd9c1c5b2537e5eeb794c677827c5663418bb9a2c9dcef29157",
          "0x1cc30d4813bbff4b91740cc8ba20bd06afa9d217ea012ce12d14e0271301e77d",
          "0x23bd2922b425af4d8bdb587b1cc08ccdff010ab030431664899a4a323b29735f",
          "0x150fab5986eef5bd1fefa92aab5002530d9f54cb7e65633cd5c310555e0b390c",
          "0x18b43cb064bbf3c83fc2f158ae785aabc730df7e5c6ae3bbcaef613bc0ae707a",
          "0x13bb42eb4e73787060889be175018b8f2e5a28a1181d777e2aac1c993acd6698",
          "0x1ab89b566dff36a95f8050e843494740ba34cd3b35d0b7c97bd2d705ef842abb",
          "0x2d5fd90e717d8af8d5b10f73844c6ca50d005940af09546de8e34ff991435fb6",
          "0x0b836d0d581914218db0e93c8598b388972a479b35c933ccad984a0b6ce94bc9",
          "0x02ecdfb150fa2eecf4c34c76d56eb29a44a94003996fe3c7fb9d64d72d352e3a",
          "0x23578d7d5ec8ed31b2d7eb794564d389025fefd00652195dad122b400a5196b5",
          "0x1ccfb8b4d93e5e08c7c4c4f30635706fc9df759375fffa6835a4c1c27f222796",
          "0x1c0cb735346164ba93308881d536f5888873d4441e308375e8e6b738a1c0cfd3",
          "0x0b73e5b78e0d23f77b0fdfd001738191c33029c06dbbf6f410774f242d0023e3",
          "0x044715c00e5fcb99c435189c1ec24b3ce9b8311421f5b1f38484ab7692c6c632",
          "0x1d3b3647b8ea345e92cc286f1bc18b6ea3b3a8551d0bf1a5b95214cf2310f700",
          "0x1044b915a339a2582a6e7fb6a66f2b97bd6182f9946ada1e5d3f764ce1ab0ce0",
          "0x1813db2251e3d904d0d30bb86be2d7c5803a92b87375dfd68f976f4622a51534",
          "0x2808152f5685bfe577c94fca9d70962e5a08e0f6fcd8d92182df7fb3b2b3924e",
          "0x2da940a1e8c89a6f983e3f988a4e79759b5c6987ba11f3f51d9a53d3fd1d4011",
          "0x20fb1d869cd192c87e34254e4b48f222f997b4526a3d3f9c9fedf51cd1670269",
          "0x1bd49eeeaac3927d1982829065a4db42698c0f5d5febcfd48ec3bc1059959f1a",
          "0x135112b374480642311b6b142704f21684dd024e0ad55ae02728ac322689e66d",
          "0x2c9e245c71832c690a7ca3db1cdaadcdd7cdd39570bedc14a87ace5f726ffeac",
          "0x1a319a5ab3b2a9e95eb0c11a5a12b79e856929186a1ee3eb2872ad86be73f564",
          "0x1a123c31f99d5ea55bc42ee322b7c070f4ccc1fc26bece9f4f3eb44b90513808",
          "0x0b23ffdea065c8e75ea0d3bfd966dff136d6602afa94328439590ff3e200ef76",
          "0x1c81f8e014ab25b8ed79c5e1bdbf869fb1be1eaedd875a7539678046bd1a3314",
          "0x01bfc092f4701d4caeff6ed32605cc0f3543ef523858bf7de922363354ac3370",
          "0x16068fc89b3388fe5bd541a72eebf297689d1e6f978925deed56f2ada6d01fec",
          "0x03bd9dc121e7e98b549441bcf073b564d5a9d40e3020de4d1a71039ef2630336",
          "0x1d0bbb93d9c927a609eff76c3ca95ac6e94e1893c88ef2a544fb5f6295da72c2",
          "0x20e9e2dc88aea45883e13db206222e4c21d4e8eb954202f2b90c211cac96c9c8",
          "0x0a69dec0cd8a399fff11902a34afe9a1331f51ad13a7ee5a71efd7eb8594dae5",
          "0x0867c910850d2f230f7e5a03b3cf0dc03264d5b6f2661105b675c5ff41575c89",
          "0x145603f8fb5a0cf56bf71b9e6ffff83127c2d0bb368de23c69fc7a94c844c404",
          "0x2b8bb76dceafdd4a12be1fc9437b9d406ffe2144b7be46d9a56a410d17da75c4",
          "0x089bc5ce0fd41d90b1aa659de78346e05eac7d054f1fa5fa7db91c07fb3fa7d6",
          "0x27bad78b8cfde47a264cb63481b5a0388f1339cb21f2cc32905d82feb4e93f93",
          "0x07043ee703d2b1b6ab8641fcffaecd107bcbcc034abcfd46fe967d8417fd3720",
          "0x04f5ccdf4036bb78889335f68633fe091e0da370d2f07e6f854f67049e54c0cc",
          "0x15b1ffe12147ee71e3401b3335e78681c534bcc58fa9f80a8130509dc0820256",
          "0x109b0548eef07fbb9230e92b4cfb7441873a44edbd265fc152d65018783cd573",
          "0x0f07c58aa725aeb731b6af087e7c5ccec5a3796ad74c872a7426fbeb7fece87d",
          "0x1d1342ddce6e4469f70a948ce109108d3b1e75b3733ce7c9a237a4c5e5274514",
          "0x0635be9e7e8443d3b2886d154344d243daa9578c82a38e252885c4f3bb138b10",
          "0x1bd4922ac758c0f4c50bb3035b7ed4b5618ad0b714ab468b5eab988cfd8c2959",
          "0x2e1a0e6f84c93342b4d529f88184554976e21ec6180c580e4a58634a7b74759d",
          "0x2f1589be5a127698a4783ba48722e4c9a9088c7c9edd9aadf9152b9dd839f2b5",
          "0x273dbaf645f1185466bfc99b676c6187f8415b9fa2e1dd6fc6435f0a3ef35526",
          "0x1c11b76df042385ceb6d0fe269cfa150695919e047b4807bd6e9a3cd4b4e0a22",
          "0x16a0988d4234ecb090f09db6bde79af35394c9b3ccfc6a0bb444dfc6c7867359",
          "0x215d025730ada1788e2024cce27f2a53ce804a93a2fc60452a0cf948fb03a8b3",
          "0x2cdfdb0847de8099ed8a941822b15ef9e91fcf64325af2202de42eac92bbdf21",
          "0x0946dbe9998dec541da39a9d8ea544a7e449e26a4f9aa87c28c7e2f118961342",
          "0x0f958982b43f8fdc2c3785c4ac3e631d5c89fb94e0c724a7a65c1c3218b67e40",
          "0x185021b192274b1b61952ad219cab61acc3b36fd36188a1b8c12e56d998c5e84",
          "0x24d56b4d52b47f9bc6dcb7ad353eec927c0e7d4212a2e6de0eac44a210260b35",
          "0x1098d58fe7b53523eee81510b083fdadca004b549468cbd201b0a31c8b7e1d17",
          "0x24a99bc48481068390bc48330c113b7921ccff028ad504583976e7e30efc3c88",
          "0x12a7fd0a7a6ed9c0eaca3465ae557cf318705146f72f7b4e4ab24934dbb4c673",
          "0x0d42adee447d6aea66365bf01e5b607c52848089a845d1fcffae9f47e0716b16",
          "0x00d5d109de2579f4e5ca2763a37d1310930dddef69c2023b167ffea54b0c4aaa",
          "0x2efe7e744a2f0e450693507731d9c0492a077d194a02210022acc59e7ea469d4",
          "0x1dc37644bbecdc24f85b713fd19af55b6fcad311b77b5fe3030a96d5334bb833",
          "0x243115568da36482d004008176a75427fda366c9d07bcf56c7b0f4821c263764",
          "0x2ac9106e5d82d4e200b257b0b222cb30957327beae9834fc428046a0f5926e71",
          "0x16b852944570287d6e02c35a6300392635820ce4883fd0938260f85555c6c0b5",
          "0x29dfa400161b661f5264b4158460d4776f3e862b7b8235119430f7678a2a2a74",
          "0x25908a5cfb1c210f3afcd6e8d63173a6d79dce7535aedc57aaee994326c386b3",
          "0x1480f56b3a68ef41e5ea44dff254aadddbf19d50f0e990965fcc89bdc3bf3546",
          "0x2c1490f9335e14dbfaeac6675595f6b10807bcfa3e49a76efc9032f5f53af5b8",
          "0x1833f0ce5dc529d3576a7fb481d8f70fa6e2170d31c1031a255cd800fcb262b1",
          "0x26d36461a1c9f3a3653590e8273554f81fd51cc430f25bee2cccf55e2e762733",
          "0x29027f0fb381318f8eac14af24f76e1707dc6bed2710362256f16dbda69a90ae",
          "0x0a4cde8f3d42ed48fb3daa7589036f4994176cdf07a2ecc3dafb54f9d45d9b03",
          "0x1fbec12feffe0889cc4a31fcae7d819cec482785e190dda2536e2c4011da8704",
          "0x1b26f238c7bb8636782bc0ee48a931a309274684014ce72714005d98b8d8c666",
          "0x08ff4df0c027e88807b8b6e55e6bf7e643fa60c66d74a33dc844ec1c34598ee9",
          "0x2207c1318e959e4a002ad5015d381b29915de22629a612a1b6da389ab86fbc24",
          "0x09fcb07e82193539b71d0a052d3977996a09f84216bcc1e46f11ac84d5d75ef5",
          "0x1969f5c20e80f10e71ff42fe5af7bec47ee7533153678dd2ef33f1e91fbf98cf",
          "0x07b65d6a874f5706282479ce323f36bf23bdfbc34769e11ac34ef2494f2bff85",
          "0x09e9ac4c51b61ceada2c861e276a1c0665f1b069142f144f80c46649a65bc425",
          "0x08b74eb90b0e5b3013347515fbcfe94d8feacfd5aefb9546e1e5adf59ab4acf7",
          "0x19351714ce3d2e3e93ec9015c02e0fa056f68ecf8d1c7faba519dea116e0217a",
          "0x03c4a15bc97488139ce1cb928f474505ad5bc7893a53b3cf1c9ba21d51b00410",
          "0x0d8b7773df335b6a9cf298b08721d640290a0b17d5060f0222f263c7417d25cc",
          "0x1e14c212fb7679676af50c3711b1917d6599f620652b8bdfd244251667aed9ce",
          "0x2186cc6cdc5271291a9b111b98bde50c62a28043d90aef654171bb70e429fade",
          "0x0768dbd4b9074b435467927d1187378c4b174685aeeca35788de665f2812a195",
          "0x063f5a888b7bcd3f8ae406ba40e11207be013618ad5f811cc317fc1e558c79da",
          "0x17807cdc2e72f05b3371fce98fdee5f3553eb4ce92e9398d702f938cf9ee741f",
          "0x25f3dd0be3bdf8e632afdcbd431be7ae6601549304475ca580d13741e2a7fd92",
          "0x2274a45e2d69064bce67e2eb664db45aef4f1d9dcccd157bdceef7aae145f6d5",
          "0x087ee7936deb77a97b8d7473f53436cf3fb1ce85df07ab68a028b46dea841701",
          "0x0aaec0f75e53087db937a974edeb32eabeb633ece1180f1f8437abc9099df1be",
          "0x10cdf01e8c61263b446c3f7a10cc29fd01ed91fad9891f9c6fcb7b5ce438ba95",
          "0x176627a92072fa2bb64dd5dff9cc4a0d5bedcf3f22c91fe991cc6568a4fb54ce",
          "0x0eab0e158e2f672c68a7a0a48328e21179a417eb0c65b1b617644e1c52c4b425",
          "0x2edf1ea1cd97d1a91fe7901e64c0f2d12f7965741da5a7c7fabee25eac3b47ee",
          "0x1fc07137863b1d337bb5dac18ad91237739680a69eed5da0bf35062f4d4cacc1",
          "0x037bdff68025bddcbed554ceac3df66a9eb298966d79308ae414d34227aaf862",
          "0x177f68957ba07da671b9dd919f2433dfe5f363b74a3c16169481c57c5b5c07a3",
          "0x06d47b9921e2502c2abb0138d3b1028b02b85f8f42362cf43671b60a69e9e60a",
          "0x131d58cb8a41a753e767e1e97cef60d0003e49c8cd1f0f5101c861b177715da5",
          "0x236ca76235d9e69472c9985f842e626f33b3fd4fd5f543810a0c5d2143ed4c9c",
          "0x2fe7f85a579916545907f2a02202b83696b64d1f61e813730cebc06d068537f2",
          "0x04952326bd26efed64637d4fc0f7a4bb528e3a341260125588e75aaa88f62d71",
          "0x00c2dfb577b78dad18837bb70c8e2990f32325bb418f4f66263a2b63f3f98384",
          "0x122c682293b4892d51255991f9cfaf96e25140bd6b37337ea7dfad5e1242328a",
          "0x11ddc540d4a110e482a2455112ba67ffb3ca3ee54711498db1a372b9cc23d145",
          "0x2f6bd71f6b2f3af3d468820c80aaad72ee48a337f1fe3d7ce01bb89242106a1b",
          "0x0d6a16d136ee77c35f216f1aa0ca9e09bdc259e715848ce047be056a4a09f787",
          "0x2e7c6013d1be62a78b4c0015465fb0b293a07d4605dca6422109096164b22b2c",
          "0x0d6bbf18b7eb684adec412713570d3bfb36fd0f569fb36474f694b11b2948ba5",
          "0x12403cf8877ae510b7314b7c75ab5b0fb7fcde2e6ab48121288dc04d5b51e594",
          "0x151b3acf4ce3297d86e823a72067c71717382150c080ca3f8012bb0ba2fed47b",
          "0x2a1396702063c62e07c512b9d4d181d71d88b5681a7e47fd114cfb682faf4f98",
          "0x25cc49f3508fca1873a6f85b6550b6e1041d90ce535c638d2b523a61dd7869c6",
          "0x1fd18327a0482c394723b152c90544729cf4040bcced94e8a37e1c9e307683e1",
          "0x0b27566ce02bd4cd2273fd531336c0ebfe65a5b0da123cb31bbc89533e518b3b",
          "0x1a9e153ce82bf2a6fa0d71d1889c24b5f111d262c82cf3450f9ca80608ec15ff",
          "0x07ca794d5ac4f40f0fec4d69e3a3cd1f472c7446e4e27fc1fa4cdcdc8605acc7",
          "0x2fdaf44c707d8289da9373536a6f61b66494fa9e9e782e0e410405efbaf504ad",
          "0x154d7c7e94ee06a436fdf59b501b763be8dc7f12aeec0752b79179267d643a74",
          "0x2c753b7779a3909fa0cb0695a9f33a673532bf5cf394f40bb8db5ec5fb7a64ee",
          "0x144ef40df7a262ff41795d09590112d63feae75c3533c0ab4bb9ae43d61201a8",
          "0x22c68d6cd4bb18163791274a28ba33b0d138e148d6d80b469d6e95197d164883",
          "0x27ca38cbe8b2ec8a927b6fa011e982323e56da932c24d73095177fe7f8aa979b",
          "0x036994c16973ea012441dbae792fb3d06b139addd7ccc0c0f353be33d8873ea0",
          "0x242d7d1bb8ed3658035034b55e28b43138c56c7fa9c0586978056aa77decfd3a",
          "0x194576547027c4224e9cf6de762a5169ca5c18ac5db90108bd76021bb9b0cef2",
          "0x0e823aa11624ee571f23da021d4d7990563fc9898a7d0ce684e535fec79fcdd8",
          "0x082858a4db283919b56c0bc08b89386724b90868a4ba170bb1ccf5e112205c4c",
          "0x0217822675afac3da4a9137e0b172532884aa670f142da689569db24f5b0d650",
          "0x274c614c2e392cee896b7850aa7b6fe952b7681959fbfd7913b43af0f5858bb6",
          "0x27d35572895d61ef77994592fc75251f440e5d120133252049385ee1be25aae3",
          "0x2b391acc9c8e452b35f31c91bc7de27e00d3e625413d27f6d60c39d00c74bf7a",
          "0x1b6320cc8acd98c92ca849a5b3ae52f2de368474dce727a0069e97cc0a546b5c",
          "0x2286075e6a96f1a55fba6f84b3ca4974e87016864aed62735ff0d428c0ac91f4",
          "0x18aada171822e8e1dc3da76917fed163a523bbf82123dc98f4c097e17e11deaa",
          "0x0fc3fab45d405fa715ee3ac4a279c7003885e52023e6e36e5d71f05cf5f3035a",
          "0x1ce99509af24e048925eaad26d294cd555cd12e1d65881777ecda694a5e52a32",
          "0x2e26c17c921163b5bb3aad23ffadd47dd0dc4449b94c90ea3eb4e4fef138f727",
          "0x15116a7c92e6d9d46fb7fb51adee5a862aa2fa762c690991804aea7df5cfd3f5",
          "0x18a26a0800fcf288aa7e98f047317210e6656c87be903bf19a92e7c2a499c396",
          "0x22d7a40e7e4c1e76dbfbcce1601c22469b7fbfdd055a3f953cfcfeeb47a85c7b",
          "0x0ae771488eb4bf107cda3042dda3495899ec5fc437921508fd29d5bf21807afe",
          "0x17104e0440a812a33f825fe57da99dde13c1bd3e10de8ec967a5deee234cd701",
          "0x2680e4afc93fbbeb972d842f18fa3a35e1ce822ce02a629c3696e2cdb2894a5e",
          "0x0d64fda93aba5c384eb39bfc144bea57b13d11b27d89323d2ae2748fd54f16d9",
          "0x0aeacc635139009646db8941410c819e087abc601709b1f923f04ea67b5f58f3",
          "0x0a8a2ed2b2158fe6443bc3b11754c14521db193335616c785a073f69cf15bf38",
          "0x07b133a201739ee204c81df78b20a13e00fd8c0a386942794c29187aab6273bc",
          "0x118fbc76b7f861e02e9ae5ba516960c91142ad7c4af11563e1adff97f863ceb5",
          "0x2754b4ff473681f3069edfabe21dc75f4123a0ccad5597d42779a8120f54f022",
          "0x190360a036668714837675f7e59fdf15fa57634f4db0c2c24a80d26951c1ddc2",
          "0x222922f3670b5f65cf34b2b2665b40a187f3c303c76bed52017073a0a18dbf53",
          "0x109e9fc20acfcecf3d47c04afdfba926f30e1172a5d506d1241818aee9cc7c55",
          "0x16213b42dc9dd4c9ef91500adf2ef8708851787374dceee4d45a6645a3a69b30",
          "0x24023ea68a2a2b008acbc5d4a15fcd0942b67ce952b0e1a03ad175066f755920",
          "0x247404c48faa06e6c72b1d050b905fa3ebd774596b4cfe6bb4d57ac38070859e",
          "0x1d868231e2df133dc0212c6248179cea17cb0f71c4cd827f5353806230d8916b",
          "0x0c314749559c134886fc12ba1326e4ffdc33028d8eacd341f510f1dea2be37ae",
          "0x0cc1c33b5320c911b47eee03c4d96ea2b25bcd26e3711d28cb152cbc5b87d2ce",
          "0x05f4c3605ea09d4b737b29fee87e1c2ba74d332bc19e6d3e8ba947f0eb3999ac",
          "0x05bd7ce441a3a72786312e63866bb986adbcb847b06476f98c6b7f8b8f042457",
          "0x13fc4c0e950281ef4e96eca60355152f7c0b335e0f36bc1cdde5f3952dedc132",
          "0x153c2f89d6681e7f94df511b9f193e2876884faee1bd3aec26bb93493a064f03",
          "0x16fcfd6ddd242be8cd4982678cbabaf4010be47978764ee4d14e952dc4a3a118",
          "0x155435d02b33ce45b9c3b6f3f1090930fc0a9fa99788927e504721ea0668cf7c",
          "0x0669fa7d440e3a06db6fb80c876a36245bb693bb7960646421621fc2c391c5c1",
          "0x2b57df93a096e78d7f14eb117a9a5c5ef69d96cf45bc807e55d89bf980e8ac76",
          "0x1e8a7d19a676b3263f85a8482d95d0f3e76be0b6e5c9ac107a12fb9e655c8713",
          "0x2a6de0bded2bbe2b5866801f880e47e6bfa69005a0c185897c72efb56bd98a87",
          "0x099ed3a2ae3f0f6d0a67a1f79b55a135bd066cc32e5942a3fa2572de1348f840",
          "0x1e7d7ce084654213565d6ee21bf1f27b3d8027a2faa810517efbdfdca997fbf7",
          "0x2e703dfbdc86f5586edfa0221c81bb6899143210bbd8c66847764aa4f63c65b9",
          "0x0505b0c3df9f92959a41fb36c72d85bb826d5672798fe7482572b5f41f37194d",
          "0x26d1fc920ab60d7fc4e826056f7d19c78275087ff9116e356fde302840ffd3ac",
          "0x2b3439c16b1af27bd7a4c8d9ddc6934e7b9f5e10aae7cce40ce6a937506d510a",
          "0x1e45d86bc184f0e086020deae34e53ab0ee7123b3a1190475c6e25e06f832154",
          "0x23f3e2f49ca1c95434b0342156172e65dbc6c9f8321cc75e9f15a66c3bcb09c0",
          "0x1d8c2e51db59d6e96ee69f68480d1f8e48c03bc876cd7915d888b5b0a11a21a3",
          "0x1e1dc3546a86032cdf8b8bf7f94a44730b662f8a56ad862ea1247ba2ab0f3d2b",
          "0x1147e82c00df45e182d416b8338ffae299178da5f92d8f9f9153c695e7859447",
          "0x0be94456b9a03c6cbfab9d8a34b411e91d20cb11f5624faeb3f78f38247e90b9",
          "0x0c4bd9a3aaa923f649b9cd1cbd7879574b266ff2f7c0c063b5c44d6b48cca3f7",
          "0x06198c1fe412e25887115b54ff87eb4f1e2871d4cf377969ca151fed5d7b4dee",
          "0x1ee90aae68a6bda42c34a797d4d31f79679ceb41b587f619d620e1f5108b839d",
          "0x11aa5360b586c21447711b49721e9f4fddc6b6c98b57b84772d6fc6b8be017ca",
          "0x1a41a67390f922f10cdbaaa0ce5eaef61d66b6730825eb98a24d25987e87be58",
          "0x24a2997c832fba549618926afbcad00ce920788393df128f8a5416d26231615c",
          "0x067036caf8b57daa59ad4514773898e1b22f8e88d454bc1f8ef0c82cc93a2772",
          "0x2f18e853f9b7b7c4b1b4c3f0d1a2570b035fd2b4231a584139adb7a11221bc33",
          "0x1b3874144923943beb66ca8b798d0bb8f2be7f8dd9dedac6d91fc5b9e53186a1",
          "0x0ef5849ff458a11dc413a2d8abea9888c62241c3c285afe3a1b14cf71574c3fe",
          "0x196a36a231753ffd0c094642e27d80ba201a549af584ffa9a70a8026817ca668",
          "0x2e02fc222dd56fe6568a345add3c1d577898a361847e58b67576f12e3034a8c6",
          "0x2383bbeafd391d96aaf0ba7481467867c67ad39366ed8c43b42520c6292452c1",
          "0x20de2cd5ce733ea00a7f167f686ae67192637321cc9f0f4aa7214790676a3f75",
          "0x1f1bce33439afb8dbab1354b46a5b9ceb1980b83514095d65e513b79351a9907",
          "0x057b8de9d8ed593b5d214302ce88ee08f1812ef53cec6e05baec160c054d6747",
          "0x26777acbd88e932b2552f7813e62f368ab8b1d626b685502253a10c8050a4a55",
          "0x01589c939e2e3efeb8cb6c103476879101fec7a530ca18fe4bd2f096ff44af40",
          "0x2a36b79d87c963b1f47590ecc4cd69142346a54ae48bc3f573adf719b4e09719",
          "0x0eed87708b5b00a42af3e6de58d4cddaf22278be0ee6344f2a775132fe107a0d",
          "0x2bf84fed63a11695b639727e18111ac2083d936ce64bd51a32dfa9f1b0e71325",
          "0x164a6098075941c6467319c2372463c3ec7adba6f6db9a58ad59a678f8f18a39",
          "0x205075ea3558a17b0c51ae3a107d898609e3cd5d82f8df8c3f74b1b73b08973e",
          "0x1f1e3c76fc69fd8acfa3a9bfd0af695c10c2bcdce6d8f4d1f7b76d50419b4376",
          "0x0069982a9b25bd75814397b6d3c8a90781e1733be57f7573f2fe44dd35618c54",
          "0x2f17582941481b5489211befd4bc0dca43d4432ce11153a0fe735e55474a2393",
          "0x164531eab380bf81f6313f32f5c255a9badbd4edb7767f990c46b0fdbe9fb297",
          "0x031f46a8b4455ff121bc184a1c3551d4507a17c888931f3e99d356a9a06ef8ac",
          "0x11334dbaa6f7f4140d1493bd188c77628dcc782c5ff82f1ebf41ca094815741a",
          "0x0218b1d38a6fd11d6566a52fe136e2c82de229698e5414b36be8997f060e8913",
          "0x2effca369cf34f74248e37ae3bc74299187e16a75f2ebe40467060500eb93c31",
          "0x07e54138f828c24b98b3511392861ae9c5876550ff0ee776663c3997a8f1a116",
          "0x297e1fb7da5497d3dbd0798a146d2fab9ac5b0e7906d8588238187b795001fb1",
          "0x149016a717fd85cc7df7f039ca6b1b8b06a5bdbda365a33bb0ae228900e53b31",
          "0x0f9e7a22124bf50d94db9231d63685122f92db5268ad2148ba534dc853bfc54f",
          "0x1a3519a62fa692b3716d11b88e9d62aaa0e43bcf03c7ea81970b1d802a867b88",
          "0x2bb67c5d6c48cf458a293d69b2d1d44fa7c2c6088e7b7f9adece3f873dedfb95",
          "0x1fa713dde3903e41e68f09ac2f34c9b1237a445d5195c5e361c5bca31edfa972",
          "0x2019aa92adf7b5e795f0e539682e4b39b4e32bb6520c711102aebdd0c1516843",
          "0x2253b9233d047afa018c40c49fe9ff1f999432a9c7df06621b2504a46f120cda",
          "0x1cea08c49328f5f053c6b47cbbc9559224be1d81354911a18926a98e047bdae1",
          "0x123ad23966a42c729713094fc352e466e2646af9adaac20fd8e58f308d2736e1",
          "0x1ef59a7e266477a644527ebecf0bbbcf92ce5f80d2280daf826619b7ebdf79a5",
          "0x19ec1d74d7f3672f9bc66be9ac40f5be702b7bac80b4e33eceb592f86d5de3a1",
          "0x242646c43d7f28cf38c9acaf8c63b1b33ff07c778c2ae68c55d4893a927a3a45",
          "0x0e2c8a604553db3b81980fe40d801cacccfbcbd79992430fcb50b04a42cbe9b3",
          "0x2e77da327c869b63fadf3824d718983f2cd1f7f8ae64c88f5e8a500a34056aee",
          "0x191ca3be9eacc6be4808bc1668d814499742a1167792e33d70d35b5fd0ac2736",
          "0x2a26e10b714c8c92c42331368736018850b48a0e5de7936b2cf25eee46631964",
          "0x05aa6b2e25b7ce4c170427081a01190f2364872d01e51e969b14d984930c10f0",
          "0x07acb3904e2ccd87ac5d9d7b6b7b7bbcde3850493371e1b10bcef4cf32ff2085",
          "0x05aa9ca5f20dfc104c85eb2bcd80dfe7bfe69d42d1ba4400bcf0d8ad53a18c09",
          "0x0411a0b6eb09fffbe966876683e86ab965280186985f72fac6da310e80175dd9",
          "0x1e165682a562b6dd29cef850b2759ebf862caf71e348b42027553ab1e7f0cd1e",
          "0x2b65e92a1f91e38b2e7f192ebf0bc60cd224ec7c1c67b10d1e5f634fdf526b74",
          "0x2208ea7d1fc63767b1d3dd1e7fcfd4b13cbfaacb0f9f531b36b0bc74d364811f",
          "0x1ac718a287105fdd6dcbdd6e3a9f833791e7c345891b6ab4760e6e2bb62059b4",
          "0x098090f723dea7b927edc36a8eecf84630c92d0138f90dc555f6a48971f50e6b",
          "0x1dbe00faa3343aff72d37b302260143bfb5d4e5bfa4a0b3d0a62223ed66b4d6e",
          "0x0642c365181ca2ec3e423d6ce74e145068a43f88ce053575a2ebcaf718860998",
          "0x245611d0d8047a24db3d78131bdedc67e345efbe3ea7f6c7a4fcbd3c642246eb",
          "0x091ffe3d519525ba080e1fab546709b2dc62a1793e3811ec5161c800b487f54e",
          "0x2a617ed588722d3acf4900b3dc5015724b7c8cef458cf9db494d786a26b69e4e",
          "0x1302868a9ab3b6a36cced0f80f53f1a13ca436e2d7c0f9ada90040affba0a8cc",
          "0x1d903daf4300755be0acaaf9ebb4414795bc3fb377e5903f89ee9b3efac052ab",
          "0x0f671792ec6b8bbd0936abbc039d2a868f523a0050dc0122f5d9669b26347770",
          "0x1045a4241667a8cd38078067970b02dce9c35054a36fa51cd892d5d2133cf271",
          "0x28d738f79c07b35d2df772d562d54346dd7a41bd07096c36c2204320a6760b2b",
          "0x2d245b5c1c1a732f8283446ede7e846f35be9d49cb4f3f3bb4e5e1fcd1789d51",
          "0x25a499ca1907638351edbc836c1498ba7c8f2e14bf99f0bc2b8b86bb89b4eea1",
          "0x1be3f4d7663b949402307b82b828a15f9423f9be115ca9ac4584d4ac75296bdd",
          "0x1b67eb51facef5814a30cf5794a95d4ad1151469ad4d851d0c3366ed6b99320a",
          "0x06ad69201f948e4749ef9095707fdc6591022c78cb6fa047f825a41dd3e495c2",
          "0x0a4b8288548d5fb3dde7cf4bbd1a0881e5e61d99b1d52d0f82e8371509654119",
          "0x0eb4a9342e89d9cf0f482c41ce66e40ff7c7d8f9ad1de8d1d8d48a98b0054c93",
          "0x1a645a223471e2cf776be1bfdb7060185e5a58a6b651a12a8969ad5a0dfad97e",
          "0x0302c4499d41e259ff761ddb305a366f3e7c2b01c465777bceae1a67e6b412c1",
          "0x2c17e0b7f901b93630c9da99baef3c5c2f5a644dcea6444357a121bc2aa4274c",
          "0x0b0e36da8335e243dc7fd59cc2365974d0e0ffa247c54ef9617a80f76d4195cc",
          "0x129e733c1dda2ede8d396d85fd6bb8b6e61399f2311c09331c7ef2f9beab22bb",
          "0x2cdea7eb18f6146b67c437f37c13f856eed01d5e464e8870447c5c8b4befc4ff",
          "0x2ad4f0216033018e7d2a550c2e082432614f407fb60097d4505ccfcb31d67745",
          "0x2aac4f54256835bad96eec256641a10fc44d0d63fd5860fd475ce818276691f6",
          "0x17e25132c09ead8dfded691b9081b581f1f76c4a86f2fd9c9c29d2433f4d228b",
          "0x2ed95e493ac979a091bb6d28e81672ec5e1f1e39f163e5f4b9948de5b4be3296",
          "0x161ce63d596de69443d7f542fff36cd3c110c33cfbb445c9cf3b70d9081e4f0a",
          "0x193efc77ea76010547c5bcc600a11f1d5a80bdd7796a6b3d9a0daf66a0b8a4bb",
          "0x1449a38a938cee3b56f505f1ba2325b186e2ca22a8435f241cfa443c6000f7e1",
          "0x2060ecf9aa31db3120201827fcdf6b5ee7f1bb93d550187ca2dbbd4a4205a7d2",
          "0x048dbcdfe2fb6c50968e825a958357646779546c93340748ef2e05794b48ab1e",
          "0x0302fbe9b13a3eed91a823b0b4d3e3621413408497e6c3c2fa49d9c8aa36f408",
          "0x03e81925a3fd5f25081532f2986507e0ed91276cbaf4ce0860817ac7bb838e9b",
          "0x1c549879138d434cf3143517dd9bf2a322224d76ba5b3e4de34b7ec490407440",
          "0x08120c7ec356e16945d94e55e835ee7e2e91e410315dcf3475f82d270d16d0ef",
          "0x130646400633005168c1e14ee27ab8d238d8ba7514c903aaa591dcde7bfc1863",
          "0x23e9b4dd3d1f30c37cfdfb3a83d45e524f54aba1c067ac1ef1ace082ab43479c",
          "0x285b38aaba20c38b0459f4a48843122b6473162956247894711ec767994fc3be",
          "0x2559fdf58d3c2200c83ed1fb4f1eed568c2248ca08e5794806d1841f3a08184c",
          "0x0e33c73626ab1ed741e47ac52be4e9f7f7913b5d81d7da1aafe203a49ecb983b",
          "0x051d4123632497aa324257ae52a51e2fc1f9ba8901a925dc44c0dc6779ff5496",
          "0x1fbabed28208178778241052b236f0bc7ae9893d247ca9cd05672e9aff613148",
          "0x1c2f74139538bd253c3dd45a2ffb96173550a51cdbfe2a76827237fb85beec7d",
          "0x157767e2a7fdf25c184755b2f47369f2ce924e5adaee5a3738d4f942bb0bf956",
          "0x0fdf1e7c86898044ddb397feb48e5ede9e3d24fba5420dba8d1ea6d10dbf47f7",
          "0x0769e84ed17e6c1eac40b5e00ccd2d820428101b2c84b588ee40a443ac9e08b0",
          "0x2f2a0f50ded1e6ab34f60f8c56904a516dafc8153721b44f1b3561890c02e85c",
          "0x0b1dc04fe75dcb36de0bfe15ca2d5ad5bf2538aed1333df56e1b2d861928e2c4",
          "0x17aed8d117c277ed0d1d888b35ec4bd3dc0b823b2af037d3623ea103a2078b24",
          "0x153140aa66586cee231a8f3fd8605976e6d32ddf431ff33ee05b9f429c0c9481",
          "0x2ae922e11ef4d41b7b84d52ab835f5bc8027bce9de25c1ce5b0bb88b6a17d1aa",
          "0x0f818243cc3faecb7c73dfc21c2968be63b7e9390bac077747bbbe167a055b55",
          "0x1f62838a30bad6eed4ede2ab52866db5155137cce327a27f4b66e2204075000e",
          "0x2fd97957b9460d3414008cae825bb610f018c5b53309ffd26f39ecf1e7f795b5",
          "0x2692d11e64695e0d210374b482a47267cc00df2d1b90557227cd49fc37ec2b51",
          "0x0fcaa78988a35202687ff0dda691b035b4e9540a5308c96e25823d8787a5a040",
          "0x1a742b2cce21c83d7943fe6b492a9b88faff3990e48866670f52a1db33d691cc",
          "0x073a59e2c9c1aeb2a2bb89b1fb9b64fc42a1bfeff1d85b6e7a163b8c3bfa8203",
          "0x04c604d77b356b485d215a9fdf7e5ec3f29648fc90a186c97e512140cfc5d966",
          "0x1d380aad6383bd9f5c4b9fb4b127e0755d1198ea3a969efe5e3bcf12d167882a",
          "0x0cb07cbf2019493088e17d16ce9d14fc4204f670d6b8e2b1b501d1f1b3fd7951",
          "0x166eb6ad5855dfd3c45e27df9154853d4b0874112c4489ff7aa0050e41fbba1b",
          "0x0372a3beb9db36031b7f0c72baf1e53e9c7220780b247aed82ee2079efadeedc",
          "0x05bd655204d55cc6b6390bc1650301957a676f7d3d6017c6496ad031fd5f7b34",
          "0x144179199dba135cc5f9e91b76880f342a4e74b8ee661c27d5b651f45656021b",
          "0x0e6fe8c96ce98f3cc97c11993b5087b55f3de70bed632730f92299b3c32ba1ca",
          "0x07a2eb5886375517d399bfabe4c7ce5c03ede836c44ac2b51bb3e35aa9576d4e",
          "0x0764ec896ba7a374f5fd5a1cbed8a2be62bae0d572639e17bffad24590c3b89f",
          "0x07ba9ec6781cb474fa4d622908f09a01767a0785c3a14ac5ba29328c4da5f4f2",
          "0x0c325b498965e3770243012dafa0dd4fb036a4013f2f67f350f3fc9e74049160",
          "0x219dd3ca3c98d1613393838c73c88a6c6502ca23b3c85b5b8959a29691e34271",
          "0x0eb2b45fd518f54e1b0d4825026fffdd76489f6260380af40ddab5ffc1c5b33e",
          "0x2305b8b5abffdc552cd96956ebfa456a36b35d200bd3e43ce165eb38711a67ea",
          "0x1a7cb11ea9463f6390abb707987615cebe594cf232fb5e8914407a43ae57b982",
          "0x1e67ce0524d1079208a94dc25483d9e6b7428d40c36305bbe0893e194a25b325",
          "0x00ffc539a853778970432d8631bc0fdb0cf6020b4724b49ef031190dc4bb1120",
          "0x29945c9ca4c39d45540c035c10678a3f2f51cadcbf19b332f75ce1f46b5978ad",
          "0x19cb401323dbd3fd8be1da954c0291d6712487c687dd9664a4b167dc01804452",
          "0x285fd86adb21908cc4441249fd005cb1add0b2abf706caff421927506619dc48",
          "0x2faabfd09b63a81c1cf4dbfc64323d8c127ae552d00339b1dc4c59b1cc7ab4ee",
          "0x2fc7539c406bce26fbe61517b9b8efd3617110c8cd4b2bb3b4a2b339e9857d4c",
          "0x1296cd089d4750e55c1c01d768b5e8f21d2bc1fad76b842940f293ec0bc2ac95",
          "0x21a0c3daaf57fdcf2e88ebd4d1d1a44eaa465a40cf60b07cc26549b577a1f228",
          "0x1acf97f4cacc97d888e4e3b5ad02dd9a8ee511475e21e982fa1ce50467511ab7",
          "0x0b3556b9eef69e8447d1869d1286e0d15482112d23d0ebd7f8bbd61c435df612",
          "0x0b82cf5e2db8b88b32b37978b1176f2a64da2bea71894005f4acb1ce6a684b70",
          "0x2c8ad1acc7636f65a12bf83ce68ac92abde9f451eca15051413f36bb565ae3e7",
          "0x2fdcc46499cfb1102f554080793658228c92ae49ed7d814700ad1e13eb5bef89",
          "0x2c8d7b9323fe30ec21eb7b8e0b88248fbdc70f047b5b9166e3dd8a60bd2a8d0c",
          "0x0d1ebf973c9d26a64362620e65b0ca9f59c9e971fc97506371af9489de93e918",
          "0x1bdd929216a105b1351c6047b43c53d79866a0b653d0f4670233e9f59cd630db",
          "0x162aba246750dcd856c975a9a473a7c921b625699202934b0a1d29ffd038fe97",
          "0x2e681db0e74c3b6cc499a9afbe2229c8afde2932e4b15228679b540ff45e2eaa",
          "0x2fcc235134792fb4a81da0c1ffd8084cb8cd8099293c3a129504808d3ee39bd1",
          "0x1eb6661adbbb0a1774c6cf1637fa1e5e24399f6690a55416def3241ceece74a0",
          "0x174045c72f6848838b2a08a7a011756097b0f3ed254cffab2926ce159e9f5627",
          "0x02a0575f09f3282fa07e9b5cf5538993fc74c4ee8621c95fbb2ca2e5f2dc3a11",
          "0x282f62aeb167ef5963da6c6faa8671123225ad91b227b886b6b981aefdaca0c6",
          "0x1b9abbb81bcff5f1704632def6d989e50cfdbee1d249803238eac244351d7eb9",
          "0x18f8a4669faf9cff11dd19f3d73c37748fb4626d18339c077a06e5c5c810badc",
          "0x21af0de4ddfc449368db59be9e9241185c49c8496ee86d1175bdb7a431086a84",
          "0x0b9a1ec9fd21cb95dc93c0ac1911135b3a68d372ce6da9d455d80a780b15f8b7",
          "0x1b413f709358008f44c3e60877d810a081d90844f367e3dd0a7bb9cc118dc502",
          "0x24b4efb5028575888feb5b8b59d40e3498fffcea1f350826359bffb7fd4f31d2",
          "0x2b11edef3505a9dad6000607ffcbdd02788c7b5802339be9cd74d2ba57620117",
          "0x202279706096cd42f906239c40c6713e8bd89efd9f63741299dff53745dee8de",
          "0x207ed9f7ff57bb17d278f833b61cf678f52c8e321cc6bce3af0804a7c159205e",
          "0x05041c088d4e637431b2a49baa3772a9b0443f3161fe46515ae8d3ac0b0e551d",
          "0x001b7c7bc15682259ad0881dccbce0a64a0259c59ea3c5e012f99534fc02374a",
          "0x1ec19711623ebc49ef4d857325aa9dd7efb5fa3cd7ad50f3f44ccca99128c84e",
          "0x06cb1be75179c19f889920ea93186dff923e2c214c50a145518837a2b01ca900",
          "0x2712a82039769317c21b225a4e0ba45df63cafb4821303664d5b331d22218d83",
          "0x1d7d0968738734d0710ae851377e340dbb101428d7200b731adf3b1c220f3b02",
          "0x180502bae2da039d85f537212bade3edb56fb3b6a5567fab1e4061b86fa3e66d",
          "0x1c3f1a329f00f6f7115a5fabbb73a67bdd74caceac0e5a4ccf25ae0373e9213a",
          "0x0b888038bf1e8afa2e444b9f47cebf28f42854d1a91608e39dbcda872bde960c",
          "0x2a036e70e2987d85453ed7a3d9a68d574adf56eae1214dc774baa10658962c12",
          "0x03f11abd551e44d9b6a0f4440f47006e98cd9001459c9672e6f96a92e5023d3c",
          "0x1f0fa04bcd63b7a2bfdc870efbb36966f543e235c9dd5b371c5ea5c26aa7b9ce",
          "0x0154e2bbd796692b8942dc37abd9534c486ba70bc77be21e74c4e15381e1cb4c",
          "0x0a0525b3f96a7507890e7f65e7b593886d18cb1474f5db86501a4db1fba04b0a",
          "0x04a473932e524fc0e604d5ee9cf3ba9ef8d5b463a1379fcd7d6af14dbdeb54dc",
          "0x21150d11c7232f615628e7392f6a0c9348c70115a1a07b88736d04aeb85e0f8d",
          "0x0c71b12a8e8a7d8fd2b4ea9b587f1c7227be1c4e9740db36cf7c7c5e8f313087",
          "0x2d94cdbe04f7f77c5af2d36c37bbb81729d951abfbd791fee0aa3a32321ac661",
          "0x14e45c5e2b09d6d631cc60c59fb5c24b0a57041aac64b4a82db0b63600f5581a",
          "0x0abc5c5c8489780283c139c36dddfa39f88ee0601636ed3d6e4cc14bb3b1dff5",
          "0x0b937ba15135dbef736446fb4923206c8403a42a800c26e6284a93bb233d5c39",
          "0x13869afcef8309bfd43752610031bd0d155f0f8d11bfe9a7154452e2bf084057",
          "0x06d42cef5ae2ec34e497c596139ef1d504a0cda240f1762335f02dcd58c38395",
          "0x1554308cc7124ccbdc04ffb1bb97fe1e8277b386f65ccf2c8b5614e343031a31",
          "0x1e4fbc4c3e4f57e90ad50bc6e7a10b468fcf9a0a87a290c4873897e49791391c",
          "0x08d2ca5bcf00e9769dfc868d1c86f288e40a31ca8396852f3977369af24d70b7",
          "0x1f5bbebe4a188434ac69933fb8df5050ba89070879978fa4b7787bfae7f83b56",
          "0x11a2dcf45d740445dd1e82ef88829813555acf76a219024ca7002501240a0e43",
          "0x2a8a12e68b1fcba10e0a6d1a86c14a10d26e3c7416f36d62ce6217cf967e1c67",
          "0x0452848d3c0c00fe60d721380650c849ced2cf79d3044820812223e146647f35",
          "0x2a47a54f59ff22745597acf600754759113ca7dbaf11d9c08f507c46a9aac9be",
          "0x185bf57472562cca45f87ac1b1ae8122aec58cedb831281c51f3799f07e72b8d",
          "0x0ecef6489e709ad5c587636b3bdd9c7b6e85742175ff86ebdfc53ab588d6d8d6",
          "0x1608b3e2624ffc2c0091e47e90e5ac3c9962713c6a13683fd5531723cbb3889a",
          "0x0d3f60746bca57e5c968372ec0e987510a647f2e7d34415ba37989dafa94c60a",
          "0x098ecf0484e127aa679523cad148ea227237a8d9ff9dd8d8f39fb58162c3bd61",
          "0x302f10e11c13f3767223bc501a5f9dd130fe517b627f0248f789fb7b30ac105d",
          "0x0924717fe7babfe9541b3386fa40455a0177c69731baf22c0982cf76278899e2",
          "0x17382965ba7be709d54d70ca3e13feca23b22b9e6e5a918a9f008f47cdbfa885",
          "0x20d30010d977f9d912be79737775178aa841d972128aaa95eb7b27e160c2d2b1",
          "0x0594bdb78b3b69993449609386a251fa14ac536c37ed01608489ac1c721c0706",
          "0x2ceec6c13c11bbd47664844320ccfdeee402e0af2ec8068796c7c3753330aff6",
          "0x279fada83f830dfd97b7288e670459dc078c76cf0637a8983c0617f27b4b3472",
          "0x029d593a3112c3bf57ec8ab687d8398fc276fcf1d462a6822892738533fb450e",
          "0x07175181f0554da6ffea4a860c03124b8d50c3ae5b59a167e5847ba33d19c050",
          "0x1280cb7bde9bac1c3d7f557f27a5acead6e4a77be5dc3e8221087e4a6ce23ead",
          "0x1a994958d44c343f59489056b8cd725491ff551c0f449697b546c8dcfcb90bfc",
          "0x1f004034e8810c1f1de507b7eed842983412ab8473e2b00fc75593eb4e3f5509",
          "0x0405fcc7b759b8ca30e9273814efb350c1e52542d338f24c47fd99a94207800a",
          "0x0b872545cb5ccc73d220bbbe01fe39940e7a8929b084602541230807dafb3c8b",
          "0x2819facca2cd6cc16a6aea3191f833c2d3729d477c73835ea553be5873ce2730",
          "0x22e725f6cecf165754ce1a52ffbaea774d8e485d66cba799723253b26b68c53f",
          "0x01d122e4654861c4b3f76c3bc49529a8c573c7b0d4d3e79c48e3a4bfbd62cd1c",
          "0x1ed4f564d147f3faa38336a0985022d537d34521b511c9360bdcd1b29f89a2f2",
          "0x2fad9912c4caea5d440517f0e5688695a4d16b0e77b3dc3fd87f869c83e5b9dc",
          "0x2b5a8561f0dc586d6e3bb83ed5ec3248ed0c09f9b30352471f2b0b80321deae1",
          "0x186f4d63b014de8c9ea7ab01a79abe5b9be3808e6ca8344132f60f5595a33d57",
          "0x1ae5e940fc5d1295d32457a840581c3b8bbda0115b66f7f7ca429824faee4d16",
          "0x14afe0880ad92f816292a452cd011384632d64ea1839979d3d67d405af32778c",
          "0x1ac869e754be8b071a3ee9c64af49096439b98f44b15a8c6f4f5ae8b75a3849d",
          "0x2dc29a1a317499b43a5a4ba1b36cac1508f795bcc4431bfb0ea7028ef2fd32a9",
          "0x2ee8d03afe43c2b88599f0a35b90926ae6510637e2733ac0f6946d908de51312",
          "0x266d80fb5c10b2655e141777097040473cd5a4deda9225b8525c94836dd51eb9",
          "0x2e4d66f6559483f76f1f55682d1edb56c8c3e14dafb6beb3a02390544e52c22d",
          "0x10123aed5142580dc67408e337d4c773789d93e479e4fb44bd73218cf3db7500",
          "0x19526f25b7ebe2c461395e66f866ffb80b2992d53883100f0dbfc67f132a5a91",
          "0x2e77d96a8736e6c38fb67b935a55832b511a4ad8d86621f9bb313222dd37d656",
          "0x09f2c6c969d48ec291576bbcd917fd622c2b98ec21bbfa2df5d57324ffbb4b18",
          "0x0dd360058171b02326c9e4c4618c8e194999d6c4480081fa738878c3e1b11e57",
          "0x198a52b8282cad7eba3a3800b59a794a2c70949ed966c86ba29d9bcc37f29365",
          "0x17eb8c8e8003d6b93783e67bd14d12a9455684cdea4ec58d76a83a07b428dc47",
          "0x1fb9c160b09797e9d4eecc79c50e2658ec10d0f38ecefc1e3e8786b95fdf9626",
          "0x0202c3b6495a8af89ddc6e3fbf4d66d73e6dd13f8aab893174c0cafd78c8a510",
          "0x114ba7f12c0e1a3b12c2b5291bd8141bd50dfc7000465084a701f47b15763083",
          "0x019ad3e86ad82a3765aa64ea022d1117e1c230c02a6ac90037895728f82b3347",
          "0x254ff8ec9eca4d3fb26c72cd63a7d4e989bb1b9eba0d8bfcf7713dabf7f64e01",
          "0x0be8c9b5aee37efa93ee79b5ffc00e8b772742c601bf8f230252925ad2c9a702",
          "0x0c71775341a98ac909ba1f26ace40de8a56330931336abe715d2c1eb7d931ba2",
          "0x0b833ec8305c2cb5002b59beb9e58216a27ab69bbc7188e4302131e20fee9dee",
          "0x174aee31c36b81a6212b9d446065af8800a60cca5eaa1b16fec85c2e2ff974e1",
          "0x17831dd406c7785a5364d3939277da9eb5b6dff1e56fa35ff18506c64b2a8b95",
          "0x121e1c1bdb7e4a3574bfd1c3a4cb3994ac4936ff54b07caa0a7ca53cc09dc445",
          "0x0fb2ca5d37066fd7292478917498f8788bee33d3ed4904525a4145bce35fff1b",
          "0x1c131cf8a1d5440337fa13e595cf6d42c3016049ffac09957e69d0b4501e7ff4",
          "0x070ee4b2f7a90add1355f9cdbc3a557f84aacc648634b0ff48f83de4f76a5856",
          "0x0ac05c9b13d1f28281053b12af198776f3c9135d48f95d67c9314b2c48ee0dda",
          "0x0c95a176bf9b37e0eef92426ccfadd296954c0bca794929225cfdc4278961574",
          "0x16635a13512870b72fa81e4648421a2210c0b29bfa1a3cc9f41470a91884445f",
          "0x0cdc33eb19f21017be8a4cf0b37b6b12f801ea5c4cdb77a34cf176ad85bfa6ed",
          "0x0e876459770109bd315fd932ea7c69c96cf314e3403d0f93fdb3afd64a150472",
          "0x1f26a00bfd677bfe57b879c71cbc54ca913a4791d4b04e30437670966d840037",
          "0x229a17692c8cf3377225426ce0cba5d61ed5f7dbb5a31dd603eadfa165bccf8d",
          "0x21ae714094395df65267acb6549d580219c449bf86c33eb4f793e0747a6445fa",
          "0x2afbdd235c79565be2f6e2cdb1d527bd569adffece0cb39fe08bc9d0ec2ea2d6",
          "0x0a95c11af3ef7a0c585ebd2068bdfab2a1329821a17baf65a6a0746b38a4ac56",
          "0x2ed822401a485a621ee0b04f6f7b50adf796d225e3eaa587bcbf87c4ec0a19a9",
          "0x10f52269c0c47e3d8a4c878ba77b098d1a7e913fcd58f8a1bcd4afb520ae01b5",
          "0x0bab4900dc219d1a737b11c61bde5da6af375d36401c121e8ffe8535dab67482",
          "0x0f0f8530f0310cb2f6c999ee2dc694329a957946b2c761c8505ececcb2ff2237",
          "0x2015cb8f32acceab144d968136e87d67cc251752a9364b7759888eb1800a254a",
          "0x0660194d882e378a167b870ce7095e5ad119f66ff97465dcc929cb02aeb602d6",
          "0x0312bad9275ac67f2bb34610bfdf3c6989e89ef18bfeb3a5af5a3deadabde0e8",
          "0x05cbc68e5b05a1fc3e784569ef325011f839dad380e8e07742dc0af514804938",
          "0x23e6688ad84690b2fcc1d166fa6721105d36966ce9a384a0f659ab02a7bbe01d",
          "0x26201713078d367d68a33ce6ebb82ab55b6c116e534c85043fe458cf4d1f9120",
          "0x2ad17744e079b70e3175ef0cc86ebd7238cccd281148038498c47c733baef3f0",
          "0x00227b2456b2df3801ed64047464250e81b3bc1d20f3fb79fef34d38faa39773",
          "0x1936c25ab78e54a947a7452dd65c04739f52df324cb481eb9a13067364a0fdd0",
          "0x2aa9d353b8afaebffabba8ed09220a8121ef8cd61ad2c20cca4fe8d5d65772da",
          "0x2c37de8445ceb0e6e16551a08251fd477a57c36d493708f8f1503346e224ec73",
          "0x0b6016b413068fd8119603ac0ae0afdf94284916ab9582732584857312fc6228",
          "0x1c2da4c3fcb0215aef82e75f67b62db57f7e261792fb69195382b8ab565b2814",
          "0x0d9019e067b8a2dd481299ac904a14cb516ac0ddaa177839581770a27616041e",
          "0x0add8f2e12999625d665e7ec804c259862b99766997a2754498f1c10c708f516",
          "0x1b04c94fba0160faf1a69ae28901f6e58f265137c4e6eaff003dc34cc06ae9a2",
          "0x19b58c38a368d1bfb49de8aab145368123817e15d06bf1d887ca21feee481b82",
          "0x268512a6191579be4c51cc8bb8b9dcacd4663f69e60f295ed750430f6f7fd7d1",
          "0x13d268b42c3385b68c54f2bcb9f72457d7ed9138fedfc85181a048972d34e1b4",
          "0x2cb0a99448e388e04f5de4c9cba52f97b9c4b7c7486df3236c8f92e16200941f",
          "0x1f0101328d89d8c934d72ca36c83de0f0c9eee06ca36c551d8fbeea255cd18ce",
          "0x14262fa1b33f7ae3d7666719900f64a1387103ed4b3e1d995fdced66760720bc",
          "0x01364121b3d6d64c4ccdb10584b4bc6b0f747bbb66f30d764d0e60a796d30a5e",
          "0x2ffda5ed3ea18847ecd8fbbb951e83628462e15c24637a6a5fc443cc6445032b",
          "0x1b6a9f9c7c09354bb8f206f9fe4a9ca8e95c6e41b2df2945d2efeded3199efc3",
          "0x2954182782b8a9c2aaae675e5d8c81a38dc9d2ea6462f5e86d081770bebfd2aa",
          "0x0cad57ec1b88059bda6d41d957f17178beb8a932a29b6162675a6fee7dae1574",
          "0x29d6f606caf5aad785e9677fbaa1f8715b130e908aa7a5d6d88e08b3b8716492",
          "0x303a687f559ed6e770c9a84115ae726643fa16f4a9ec5c240f8981699f2f8c7b",
          "0x2318a5a800de467ac7406848d22ba7e2f2ade1fe67df255cd62a27cdad188086",
          "0x228ea9efaf3b18701d3aebf00c7432d13a6760e73767cba67dbfeac461d0a8a8",
          "0x2ed4c42bf04aeb7873c2fa14d564658533553d0cc8357cfd2c4dcf543b229be4",
          "0x1dafc53a1dee87dc061e12435c932ae1f4d4f6cce57d8e4f030eb7c0ed347b86",
          "0x181f880921711f6128e2dfab54440c2087ad7d0235beca496dc61aeae235db3a",
          "0x143fbacc8b948ff561d61cff210e8af82a0a500852d84ae29d8410e4d2dc7e1c",
          "0x06c4e0679e8b4d1b8249e09bae2238b91616a42094c69be83939570a4751e093",
          "0x14f7cda89bbbcd7cdd778ff878c8df66e2997ced3fed3091fa0b259c743347cd",
          "0x21b40bdb3db178afb97e6c8f509a3a54e4970c702a3c96e2a680a3bd9cd1159e",
          "0x02233afa3456f472cdfe3f610d0612f0d74ad9842d0ad08b826916d3a3b43bac",
          "0x195838cd762c2a0ac237c6bb111d274bf80900ff6b4956680bde41adfc90110d",
          "0x0982b8802216422f46f29c0985967102048b43b53e3c8d1e558b2ce81627f0d2",
          "0x011cbc741c1bf48f7080f491c26d116766a8bc51d9cfb6cd08163e569e5f546d",
          "0x04c26770bfd30be7f086c9c707f29e38a22ab6541fdd5d9491d613d3fc36d64a",
          "0x21da2bd83ee80170d4cb123e322f86c4aa2f2ebf85cb97bb19e8d7340ccfa556",
          "0x1380aa59b03b58c68d377f62ee0b3bdc06c1b2df0c68d503f8b0a95c17239ba3",
          "0x21309cec6120b32041475ba9bacb7aa507578fc7d428bb010fc06f0ea36d0762",
          "0x08792ccf88cf6e450d137ed7b5496295f3f9cd6376454346fae4717f7980e554",
          "0x0aef0f9086c9e942432200e8b59555695a4f531e319fd0d57f1881a55e3a037e",
          "0x0e0b748d5856936b3fd8f2eb1eb4c2cd2b8b8be4d6318a82cad3e0bac505766f",
          "0x172fad32593c374ceef1a42abbd708565d3591e8032c517e4595f3064155ae8e",
          "0x26f5f9ce4d72145d3e72c42c974ffdfc89a48c511bd760b3d9db03b9b105c4b8",
          "0x10e053336934904ff6d7b672a3bd2ca58728e5149a9582a72c1c309efcf7a407",
          "0x1f01a98934ddde51f300d542d1fad8fff4117471cab015d4146b05f1deb04116",
          "0x087cd7a95fdf5fb9d7f0431a0466625cdb42dc6237fffe77f5ba14c6dfa1b393",
          "0x1f9ae8ef71dbcd0d48a124bd265d37cc0c1018ca0b45e7b43796b045f65a7a55",
          "0x1571a2b0a25158c0c5d297a397715b00bd1c5435d2686c31618d4128c538f0c8",
          "0x2322fdf2761e45f7cf265e4d6272519626de08bbf5e71af17069df29497a5838",
          "0x2ca8980f9fdcdb1b35022e02f6be62f19355ca4b9eac9b2fdcc37df2ed0264f9",
          "0x1a8881c334f39420d4672c5050f45d9281424eb61545782a6c17040dc7d38048",
          "0x1f319a0dc0f9b7429e3ee9bed57a96a0f2f67cb5fcd92b1c9cdc97a15f7761bf",
          "0x2419336f26dc5d498f279af95b4d7d1211137c608eed29b5c9510695e1a467c6",
          "0x1f514d22f672cbb16363befa56678778209bd257ca117b5141b29e06e4bd5798",
          "0x28034a6c901cec4c56675311def10fbcd8088f2f68f795d3b35519bb1fbf1a1d",
          "0x26c2b92118cd2704063241fb919806a0fef9814c87b071d5a11efc2cb1103cf2",
          "0x03d539ea2ddcb358763861791cc434d1eefe731ad3262eda857c56a06d9cf8df",
          "0x2206f49436409e8be8f542926d9e299121b43210e71dd7970fb4283337d241c7",
          "0x0df25598607771039fef577a6f6dbb610ceeaf204eaac7a09b96ad22de683467",
          "0x283a898de5a21465cca3213af584b7f56413a9e84b524431436d0b136695664e",
          "0x26ab264e89611039dc9cfd4b216df44709b54f2418df66545c30cb93814e446a",
          "0x2210d7f2ef43e229c5631d4e701ef89ffdf1aca64351791e0fe7eed428493c8e",
          "0x07da0affb47d64b7edc682dabe5c6db224743b5a385d04a2474d52ffe8abfd09",
          "0x02ad8280ae5cf82936069f72e49010f8d1643cdc299f12ac096fd44c501ff9af",
          "0x267b89f84f4845e3924565fcf1a54e8a3257fe8aeef515f86cc1c0056f46f6aa",
          "0x2d46f5c35e5a81cd902f418b4b93f25abf802d32d52da054a5edeee276148caa",
          "0x20ae8e71570f8ae5e655eb42a4f274650226af1fe160a96b177854d736f2bd2a",
          "0x020b9b29a5644790a5a31aa0a724fb578f3650590ddd164ce5af593f43c798f4",
          "0x1390c1d95991972b3b8efa1a367383ab97f4714396635e8791395937010ef0a2",
          "0x04973b4363f1f55da12d4eab985012d32bd80bc0adb90216aed9574da9e97c58",
          "0x25f7a653fc5aadc4af0fe534953bc88307a20e941d7c686bc53bbe324d184cd3",
          "0x124d7810821f47782fe6bf64a7c5eacf03d559776a25e2f69de28362be180bc9",
          "0x2f6f04909dc360d1add503953c11648f726eb0f612f703ac1e378603d33309a8",
          "0x13c2cf1b21b786238faa93bfbff5c0921899ef1ab29548828a375e4bc00a1b52",
          "0x084c200f10eff59bf43cf3cc3a506de500ed68e59bce5cddf1137ec7d61a4ea4",
          "0x053b5ad5902dfb5ca36d76b2f980906b14ebdc4721546a1f5f1e9741644f2913",
          "0x23bd4498b4c0c9f248822f15b5c88bc7a78d528d3bd3e3d3b27af6033afe1262",
          "0x2b5ff61b0e1fe18cd84e352c417ab5b836683f28df1c16e28c08bc4fd269a99e",
          "0x28f774b7936bc5095e77eb655005ab8767aad076c098b8fbba8521f18a2485b4",
          "0x0c7f6d2ead683772565984ac819dc2c8326cc4d3b18f6339125621262128c845",
          "0x1e03532e35111565173f76b67ee9c713953757037b272b369b14bb5d22ab6433",
          "0x1cdae1682f2c10e440de32eb51726d9db76d07b6429675bfad7e778cc0bee076",
          "0x24de40666f59de97deeff6d34c873b7c2498f022b856c551fb4ba6fe033e4e1a",
          "0x0fdd0166d15c0f4266ed7296dba4b639040ceaa6910683ee44d37b08679f4825",
          "0x0318ee2254c3888ce4534d9090448b7a862afbdffbd4470dab55c9fa24f50a85",
          "0x07a8d19a1979c8fa3401bfe964ed5d3f3eef19d7e4d0ba007f3854b4904c5f37",
          "0x2846f15a121456f0f74b5072112a90ecc56a48d98a7a07f30eb553424a00b27a",
          "0x1295ad2de68e05b113031de854959d9858facf448ca101405407aafc1fe50496",
          "0x2745210ecc2533017a43305fcd13078d69443d0dda35be2ea50fc485ff8f1c88",
          "0x0dc27f0b35fec0e0ff8cbe131c7ee42a228d889cb8254c4900cb56ea784919b2",
          "0x09780925cdb1429cc17c1e70b0b43755e2e70602994e975d34c3fc31cac19839",
          "0x2ef89ecae1006a20f739aa4da6987bb866d6993fa89e4a2fbccbb9ce28ed58ad",
          "0x0f6feab3215156ac3f878ce67c5953dbc4e5ab3d131ee958275326ff94d29a54",
          "0x2049c1bcb035cb59a2350bcecc2a62f4fdb658108f059bc38c14098571a87d22",
          "0x09c5298f6696836b2a6544c9ca1c0f6448e0e6e4e0d4a8c3aa7e635aed20da45",
          "0x1d48ec8d786be28f71bd71994da04f787dc4b7792fe258255af742b348e4ea64",
          "0x0766ba3f360f9cb8d27593cee1d890f57350c235096d9d05633992d477ef2567",
          "0x18893956ce600734714ccfebc44f67036f51c652822bc0c23797d73a93d47493",
          "0x003ac5e6a3c0373c58379bf38c87165d716aca05e14ce4729ec91496dc74a1de",
          "0x171f4b3d04a6eaf7db0b86db0ba5be7d4451b4ea0a1333bfaa31be8f50da12aa",
          "0x181955a3fed4ff19d90d947c2f157f050db34c847f59f5f63ac6c03b55383aa0",
          "0x15e503ae66cd37b3a58ac65549aa1de59228f5e5aadea7035169b9801e58a800",
          "0x0feeb8aec6c963774b27f86a55b4594d54b4b30955e358490ea169738f9e6169",
          "0x0dd9531f7a34f1a001d4ebc74cb4ea4772b95519325d2989fc933035c68ad37d",
          "0x219fb59ac221747972bce66f78ca33c9bae38305e11ab3481aebdb9ddb4b2cb8",
          "0x1fd60dc0c476def3b624c219b3055373d73213dd925e940bf55ced88231ce09f",
          "0x1f8d07ef3e16cbeba789241956211cfa595452801f08c876c2525dc504c520b9",
          "0x0515741548eba397d14e6269b32566615d09447155bab001ac6ee205698f16ec",
          "0x2530b37d2dd1b6166039f29fb1d78e90e9034cb6e9b653fe7428d768f8e9b2d5",
          "0x1602e869d50b280951eccb3ce71715628980d648390e89aff50e55a1bbcad4b5",
          "0x233887217af672bbacd873f1285a3612796b0cbf7890463ede54882fc774cc7e",
          "0x1849b3aa9e7053c8e95252858980abe8f1642ec66804753f02ff63f0ff21d648",
          "0x1a0049780885e0827447af9ba9eb9e658ffd62acbac998f6c1a80dde5aedc1a3",
          "0x1ca9cbfa808ca9c85559425af31c0aec3e5934b6ab51a2ea2549fbc2e7562913",
          "0x28a2a0f0622c2a8e4f16f2e0365b72b481312d8d5087e2e58ae89b34b8cc93a1",
          "0x21d1beed10bff96ca9f615bded99674a7331a52fb3566953e6ddf9eca280153e",
          "0x187114f2bbba9a993297bd740c2735ef01b85abbdb5b47c41ce6ecf2fc7edbe3",
          "0x11d0a386775c6e670a360a6fd957c403b434ba13f72cedc39d1408bfa73fc06c",
          "0x0ff4ef2f46abef24ca15d8b389e02cd3944d1296131b6d2dce954dd11d724f65",
          "0x20338e47b520d281448f3f8bf008aa743f74c5b63f98a630a00108464bb28925",
          "0x256fa0fef5853dc10aefa865c5653169397d545f07584eae65e1b3e50fb6a616",
          "0x144ba3619d5fc9d84f0632df296e8dea5017329573661b69880c38ca45ae3189",
          "0x298498c8df31dd315380b3651fe9c7ed5aaf4a4950a66134bc8b6029472a3564",
          "0x18caf9e264a32dbca23da51a3514fba92fb62f78ecc2d844557355ec8a43b0c1",
          "0x194c812828f1cdbf0c4f0b0486afb4c5d96ccc218b3b90d04bc5f1c8665ff641",
          "0x23f93e1c44119ba856a10380c2333191b3105f502a61eabdd8b1abc803c04ae2",
          "0x25d2cc988e47ce70fa99cf18105000d3046717d839af547edc3de931969ac006",
          "0x1d1083600023cccdc7daeebeb19783aacc6e94226d00c7ca44dafd755614a80e",
          "0x1943a9ef811abfe657fff92504f2a8914f09dfdd5b979911047bee4b698004cf",
          "0x01f96db1392a3ae5cbfee4c1863f0bddfd95a652993c8f17ce18869c261bc6c7",
          "0x12d4814ebb315331d4fba9dfc2ef909cd77b1e7126c9e6258a3c9821d663d778",
          "0x27a2ad69b9eb5697b85b431eba85dbb19843f3c7518121aa49515a65ee552e30",
          "0x066f7f2981ecc4c4415da62eabd3230424abfed3567121f656e8191a78c5ddf0",
          "0x16e298f60b265f06f8ec9227e54e8bbcf2b4823921deb44f063c92430fc40a12",
          "0x1c10ab39cb04ce02ba72d996049ad688961f60f8d9821d1716c5a6a2fe0a9734",
          "0x2cd7c8a78dd99aedc18c8d47452b4d5b2e9c5b2128eb373b820ca8beec970a73",
          "0x23391ac9f29c1a99ed6fbd9bbfbe72b488569bf9a207addbd4e30a3a8b97311f",
          "0x3041c5599a51eda33a6398eb31232519797b00726702a98a319c7ccba9fed2f2",
          "0x04e64908d79f35ed77fa8196f07a948c848512b534d9bf4f30ef093c797403ae",
          "0x19251e907d7a903bfa7bed87eb04bd921dc19062e4ec3abc9e82b7fa4e25be6f",
          "0x1b39681c2c125cae8d38cc5ef6fac252f4f82374fd5b9059614ecc134f2b29d5",
          "0x217a54dd68dcd53e336cea49d89925fd128fee65bdca131659d324ae636696b0",
          "0x2c054bf6f91776020de3fb9705ba29e0df17d7e1afe61e11eda8caf78762af3c",
          "0x1f88611d6c0287ce53543d87ed8182ba475f6e223989eda35d1ab746275fa4e9",
          "0x204d5a9829d570e203bde491b862a96979d71e480ebffbb13c4cb3af566371cf",
          "0x0eac95c688afaa773ace4856252788170baba69a6181071d1d1a4e0dd320b4b5",
          "0x2245a0967d777ac5160082563d5815b44ed0ff9e4305c65c503e0ffebae5dd2f",
          "0x1b732905466ad921ab2430cbdf772a816d1ced4dea6818dc3cedfc67ffe5ffbe",
          "0x08caf1a4cd826d19e1c27f970cad05b2d49931bae369b82c30011041879f2894",
          "0x27d8134423cd987b249f4bedc7773fb7b7314e8c83d9727f3a21d0f162c561cd",
          "0x09a2ea37b3d739dcd70862ce62a8837dd267c22a29eb050ef246edd84f48f9fa",
          "0x1adcfb436b238f7461757a9665d2dccfea1c7352c59e5aeaa8ed24b8530bdfb6",
          "0x2a2354db535feba0800ad6659761f29aab31c142716e16779583c17d3cbcd700",
          "0x01031b876fc704c3296bb38110b87476f88f5721a1132ba71ba0dc4168719a6d",
          "0x0b85e9fb664cc3b4ee539936f885885ae543c606fda007aed20257c8e4ee3597",
          "0x18067bd085c60da630ab24cdf419afda09778912d5c76ebfd9df7ecff6207186",
          "0x03771dbe5c3340fd289917d6fac9a154b6d55d63557af13d9bea711aafc5e1db",
          "0x03a120381b15967cde1a33939fca7830caa1af1fbad6d6cbd4623592101f1f77",
          "0x040324fbad7390bd98c3553232cea681d4b18be857931218fbbd1d394d67f781",
          "0x294a9378accf723c26266df89bff1a2bdb710f198de168890dfd73acf786cd98",
          "0x203d8640466332ce0c493396731a23b85f77cdd95880c457dd9cd46e99bf0f25",
          "0x0d339481cf52ab1f652ec8967a89776e92b6aa12056794c9dc856fc27ec91ef8",
          "0x158be4217747076a28aa6f617c7ecc6045c8ce5c484aada197994b618b37cba0",
          "0x2daa17b35ac2ea21eda36bb06db40a7fa81fe60cda556d73121dbf17c8a05ebd",
          "0x1a2f7903bd643c61cc5eb68455202f6613c9c03bc3c59a8cd7f8d10b0c779210",
          "0x1ca7835f4f1c5f35aa1e0054afb114769a82474b2f9f771227f022fa762ba56a",
          "0x043ab3c95b64cefa7f97e1e8abf9db25d64c2213bf44b01b0005fee067804beb",
          "0x0eed1694086cdd6dd84002c69365120cc2318283226eb7dbd9c1154e5be774a2",
          "0x031b726aa5dda456ffac29cd38b64926be57a1b6c1fc593a50e7e9cd384f7ef3",
          "0x2652cfbf90110f7727750d68eeab7a49385886953f75832be375c37ea9ad6750",
          "0x24a58d087af381a6f27b0655de795b6a7be734f05a4f4edef0572279a28a3bd8",
          "0x1b04d3e92a338f6beeb8091382d93141b3bb3d033294413a398da24464272a42",
          "0x290b9ee02a3a29eda94ce08a6752191c3c296cc2c044edbbe091172360b24c1f",
          "0x2a012d2f441545c914d25d0cd28fa8104cda2a080845c79cc7d0f39146b0b358",
          "0x01d4e5bc180cedcb8ef0a59d25498a542e324cf0f7128f707c433eac1eded47f",
          "0x054659f012ec8b757b1d2a175a9fa643e963238c342264ae9fc39a69d75462a8",
          "0x19fc0305e1e5b2afcb86a742152ba895ab024ac59c7b57e535224ffb807dc720",
          "0x21d1fd0c2affce674ab016661a216f0615b5bb1f3fc3985e9d74dd71ea86ad66",
          "0x26956d93f01776d23bc7f1e3464992581adddb48176bcbb03efa853ab09c3b17",
          "0x2403120e5a687895bcbe57b5b11fba0d963eb0c863d8aab74112f512ed8ad9e2",
          "0x26684fa9b9548b08ac79e7a14bc28f8d47650312f0629a40bbccdb590a298cf3",
          "0x216969c221bdc3daa1c2adb9be456ca19fcb948de9725fc597ac626968715c18",
          "0x06d4e54362d5dc7cd489ef466713c1b8a703876062ed0366a475ae9ac0776c0d",
          "0x10c21ebf642d38aaf3de15ac4a0de3b71ab9788b5904a78326ef099a1eb953fa",
          "0x0a4b8e91b02da94aa621acff16bbdd44f079d29b2034a9e1dd8be270e7e3a803",
          "0x2b1a5b52b5f1c739f8e167a8561b7c5a567fd449b61e4aaa2965f3177badf7bf",
          "0x1e858a1edb097f168f10b9130e51d5a4f3b55da7fad6896298f14bb7af4e6356",
          "0x28362c3ff6abe4fb017450c7dd344bd4e08100afe5a09cb01877265967aafcd3",
          "0x204e017d42e6b32cff2091368e344201440854761a0cd463766041d7e38dcd44",
          "0x182307aa6e06bf1b20cbe534913a0b561e310316e23540f35f1bc9ee437e92aa",
          "0x1ee400aed2b9f1ed67a8116438ccb7bdb8d179868c1fd6a6dd9497744ef9ba9d",
          "0x288590acd331f4499efc2e7e8aa2656e64cbf0a68c7d928c2220db643db9d410",
          "0x008634f649b3d25022a2125f5f300d2cce2cbe122df4f1c51296e6b65fff1795",
          "0x03c462cfcb45169d9cead1d0715c8cecffec77ea449a20882aeafa4aee274e6a",
          "0x18fd54d4986a2e7804cbcb77e6812c06e7b8e28ca51ae323e56d9094782a30cd",
          "0x01b9efe04a809a43c624c726e9294bdcd3bd1e97cbded742e2173d3fe9e429fe",
          "0x109ca591b9350c71a7f2886c6e55628b38206223a57c07b2a4490771c921e2ea",
          "0x0f98134e9077529768e4ec3dce4b62ca6baf8199d78c7e35f451912a80fb1bfa",
          "0x2205834ab1c8a66de1bc766adee18eaf689a52beae8659ad4d0b437bec229526",
          "0x292a6caba071b9fd8fb5f0e46dde4d711bb4a118ad0c67e77a7637544bc6c21d",
          "0x0f218ac63a89d96ea37d62ea0387c145df2f14957bcf5c7b5b2cb9317a871740",
          "0x21393e5f2e1121136a25f071465cb85b02b2fe124a8e4ea83181891a710b0a50",
          "0x06e22d6946484dad3f4ad0da41be11da2aa5451fc7f4cf6cc5898278a6747bb9",
          "0x1ec8117c5590074a29a019140efd1c627b715fc464f1d7ac9d47f0979a4c59c7",
          "0x0e6f5d2ef82945dfb392e447138bc94c32bddb72483055a0563444a0e4f6dd70",
          "0x169abfcb3ee96d7e02f9711eadc0a9e24a47a2f9fb1121cf8c6dacd91a5b32ca",
          "0x2d1dcd8258d2c559535ec62861788dea60dd42d7fee0cccd20a6ae4214d21990",
          "0x1f8a46cec465bba964496d25caf9a351be7d09a628ff97eac4fceed7bfed5c45",
          "0x0ddae5753015e7c1f3b07dae4be7747398c9b98667aa13f80f768a2204620b28",
          "0x1d961204697279203f4721dd0858244f2cc64c5cbf1a4bf1077a042ebf11af81",
          "0x2611bbf19addb97f4b761abca43999a4b98d758bc74ed3719bf65b172635abbd",
          "0x2c93c5c5b057f52c0b3d54338659f05d1566d028c1816bfbfcf9003593b98190",
          "0x2a926fd3e066a9fb75f76fd02aa9996999a090450d11ee1a87a1e0e65cd287f8",
          "0x211dcee0fee3f8571fd96f2b5c55de1139807fa69fbe79216563f6c5709f72e4",
          "0x2b7ddc28b2bc2d2718e9d6b4c790d55834b77906de2d4ce8b301ac35d33bd761",
          "0x17ba5159321a180ddefe96bc9d0f9ab7f44bf2e55174b6a09029b9e3fd83e0dc",
          "0x25e12b63262139695e50a1e96b6480353a6dd6a1bb980c20f91fd59e518a030e",
          "0x095eca3482e28057b54118da6c45a3f0f5ae53d67becc4fb0ca2e96e241016b0",
          "0x1112aeb9622bd2e00306dfa76088ba87e8d9cfeb83d756b40acb4454e77e3ab4",
          "0x1b69507de83452ce3977a83e01648114afc0f41974a6ba962f77da7ee03b2353",
          "0x18c36a227f30ba8be835022cda0891d51b2049dcecb5261c0244336342681283",
          "0x032dff6502adbf3eae1edb0aa2a142c2387216dd501acaa18a3565112c3cef30",
          "0x067e9b2df10e463ff4e65fa21d18b8e7b5c55d217941207850d984c264ea64b9",
          "0x186a8c1ddfd9fb6731243a6c190d74c258076254fc4d851bb67c15c855da68c9",
          "0x25f12e0904af730ec68920122e8d7e83e6db7e0d3818d82ab3f5179652acf1a4",
          "0x292a053be9013f374156454727329ca30c50781b7f68371eb082974914cc2f8a",
          "0x12867bb541ea17c532cde157ebe2ff6f0a3d3e83b956e619951cc99af22e3d7b",
          "0x09dd2a75726a265e98ab42ca0d013e7ba2e15b26100516e0eab737fb70049b56",
          "0x137cfd0054dbae6b635b4e4f9e6175226e5c95c45e5b2541334f94dfd93b220f",
          "0x0d14636d7b7afd1186f0b9d5c8f8ef551beac7bb2d36b25436f04bf7dcb60de7",
          "0x1dbc81002d8a5cae1fd910532f08a4323c35781c2b901bd722babe0a5f6dc613",
          "0x241057b0d9977eaa50e04ba893702ba182cdb3388cc632907f4c2081834d8da5",
          "0x07ca75c9d51c65bfc2ca99c9c773bca2bad7b498370b5d50e275a88cb6b06339",
          "0x15fab6f34ae8d22bdedd760610dd463d881cef8ce82fe4a0c0f860502f6d3cc5",
          "0x0cf846e67ab815b7bfb255008733f8b45d83938e6eb0dbd19e6d537eaa581e00"
        ],
        [
          "0x1512df0135b6692589f071140a60749cf775c642b300da2fb4ad5c6e23ad4e5f",
          "0x2b109ae037ed30361cf6544b2f4ce58f356589896d6a8849482ed3f9b66e1198",
          "0x02585bece06eff553d485478a19eb149e2111ae4e1ecb1d61fc10cfe1c077f34",
          "0x01ff896f4c0662f4b2ad926741b481d03b813a8cc343b9c2d2bc4819c70b2f3c",
          "0x1b0caf02f434fa3d4cd4fbb13d3116ac8b7386a5afd6c67076ecbc3704aa45dc",
          "0x0fcb7c9f13c85517a7805894ac82b57c06f2f153a6f51f60f8e508684dfe5bcd",
          "0x2dc2bdf7f43812e39cef210e42e92b4968ad8bf554541182354504d32cbf9954",
          "0x05add9df20c1898da46bbf74594438beb07c9a65635c90f45c0a08febad13664",
          "0x21cada6641664daa997fd55ace8b88191cdc4194fbdbb6ca5895447c8a58859f",
          "0x19623504589a60f058b04489b153324d16ed66667a04df572b103590b848bf04",
          "0x1776442d850a436a005e02c6475b72fd2d5f84452890c444162848ee1d57dec2",
          "0x06c1691fd6d2ee98396610f3c868d70874f24eff853938d87face89234a09a98",
          "0x22c3aba15f3a170a1bd11761cc21794a7afb348a45d85e30bc5227881493f45b",
          "0x1f77b18f06e1458877c2b18cae4e92c196c0be0f779b9e63b06c48e90b0274fa",
          "0x226c3dfe7a6a67319c1dadda1b4ef04e45f6b80a78ddb0bd67e363e63b85c546",
          "0x056efbe3aade68e6886ab92e98a3d28a68ca89d2fb75706f6946a0081f01f621",
          "0x296406451f201c0d09587b7f4e00a7d0e1940260d48313de807fc2df0f755d7f",
          "0x2000e0b6012b20f09df8eed25b095bf22e75e2a9c87e478287700b593356f84b",
          "0x227f3766b6642d44c6d836a17c30cecff654b544ae8636818db8e27db124ad31",
          "0x2404641b2f5dad9722542bf151d497e9199807249b886c975f26385dfb254a74",
          "0x037493ac64d1deb34b9b83490f35170c4212d2c30926d4e4efee57baa652ba7f",
          "0x18ea07488f02c6925f4b01d01b809c9a6325ecc7d9c790922b68ce5e7941595d",
          "0x11952bfcba06442b3c1ebd959f1d4c51f982f21f994e105c2578fc4afff91c91",
          "0x12be2a32f27a4e203517ab2028e65b949f896c5becfe57e24c0af04fac720544",
          "0x23e8097f69bbe45f02faec5e26dc523a02153b9ef9e8bb9c5f179dfe3036c358",
          "0x0763fc4b7da94badbd97ba933613c3534ef21536ae7085e123c8d3e23235136e",
          "0x27a4fbd1c43e0ac15eac974e0ce2e25344c46c3232ee713141938cb019b3f907",
          "0x2dee4ada593d756654dec12b86bfb041ad785a56707611fc4845f4d849e7f86d",
          "0x0b5151d0ddf61b2291772eb93a4e3e211f52124338cc70f3d1ed95b0e9da3355",
          "0x2116e26c7086e70c806605a1671397d7c073bd016d370ab3cce7c695a7eef96b",
          "0x0941849147ab2cd8d189c4f8b17b5a9731e55f2d143f0a76d00023a38e4efe5e",
          "0x2ba07a6f84d2d2dc2f1b17e2352deabdb5d1e3b92e424cd6597c77d9fe672e91",
          "0x1aafef7a2d2f0516b4ef8cee33b4e8fa3a1776fd2955a878ef5d227d215a8071",
          "0x19434cc86e2f53e5db3cebfd2db52b402fa26e29c13bc13f315786d10ea01dad",
          "0x075519c0bd7a6e6fe4bfbdf61addde94db8427580193e2ac8517349805b6623b",
          "0x12165d475cf1c4baf662bc6cd8744f9aa4914a1d9e53477b211e853eefbde02f",
          "0x0baf434f56cb6bbd08a0a58713b949b54c441ede53eeb0c4f9a6a4047bdae7c2",
          "0x2e295b06bbef75a6d76dd10edba1eb93b287261bc8456ed91c2bbd0998444ead",
          "0x146567927180cac0a771d5830f1431d14cd2445f5da16cf934442e7365847e4f",
          "0x231d26e7d3ed945791a52013f46d02f5f4e46c17c3047acafeabe4ad02cbc44c",
          "0x01a2f5ce4406246fbd42a57e6d5ae3b2219261e364cfc1f2a392948fafae1e76",
          "0x00661cc8a39d60be9b3c8bcd81d91fa8ebf9aebf9829c253385cf9f0e3e76b39",
          "0x1f565da70f04f96f26b3b36265f977dda09b43bcc8988930dbb2079fb291fcb3",
          "0x12fd46d935d45a5c8489ae0cb02c2fc0214b40d2d0f3ce442a28d764a9fb0821",
          "0x2924153dcf47a15be1fa67f8ddf00ec5c816868c8e91b029f4afbd45fc52ed0f",
          "0x1d4e61f8c6455809e19b563d168b4bbb87a92674346f9fd628ea5d20eba0ff4c",
          "0x2c4e7acecaca8e2ea9fd849be562d4d5d955864d152ff339f2b2c7cccb4ec3eb",
          "0x080300849f022b572d62fa787583b6c9b1ea7520f3cc4250abfa8b4b600ac986",
          "0x193a37fbfd3671dbfe759399d018df64cde45f75b17733294e87596a304878ce",
          "0x25e2563688957cf61178a5f0073ab7dd28c6bcd12ebbb9a3f0656ea0ebb87c98",
          "0x1e0d91980c59a652465ce702e4e8de73f9eb4217eae2514566a39db44a09d516",
          "0x1391b258dafec594799dfa817544e8a907fa794af4a411f89bf5752f36561fb9",
          "0x12c30d5f593d4b0b80fc8c967c2a50c44828a4175195e47a97cbead60d026925",
          "0x209ac8a2abb70eb33f20d5ee2b44ef71f2fb317a4cbf004c89e55a9e37aa9ade",
          "0x0bc7ad09a98b59dd1677ab30302fdf0c90e54506b5084c5c89691a364d268ea9",
          "0x1a7462cd2353a35701592a1c54fd363747d3022cd8548ab8c838c8c163401a64",
          "0x0e251dc6fdd76bdbebebf70808d052504204fab54c4ef63159d064d68ec5f36d",
          "0x2aaa85771e835599b13e6c43c0228167fcccb380aaf7c8e89b4610e586f8f9fc",
          "0x2c429c35219ac033ca9ff5436fffc49c3ba01a4eb270259f6e9a3f1c3fb61414",
          "0x011a5a9e38934a5912bbee49d509564c994be9d2e3eb615468b22a72fc324daa",
          "0x22a724029f009c75b8a4358aa7636d13eaebd37cc79587497be8ffd58b4b6c0e",
          "0x229236c15bb19327d244457a311d69f07027cd95fc152a84b6e003b841c337bf",
          "0x304e4b8a0950a39ab2943c3b68eb6f16850a8cee4582fe4a8828296356811696",
          "0x0834178a75d083a131ead09424b3e3e969de53bb2d20f94010883f837c99f9e4",
          "0x105cc405ecb40ae3f79cf5b9bd76a7f97a03f9a076f8a1a22c10f4492063049f",
          "0x2a37b4b65f08c8addb53e8f024c07e47b2885a065a352a46a361549e1f8fa288",
          "0x1078c0ee085dd1bd24fe71fae426d7d6b9697d94e17a7258757927a864cfc9ba",
          "0x1be49bbab70ef67a5d4e1706624a22860cda286dec7c3a2c99c0b5f235ed7e2d",
          "0x068ca82d18b3e7dbbc769a29559b1d87edd0822384d2d4ce9b0efe2c63316f3f",
          "0x2d8989373a556639e33f298fb049824969a1a284b60053edb972a059136ad71d",
          "0x0d3e416c0ae12aff59d8dd5cd5dc509addd3f6390db216742c517f2df71581df",
          "0x14b2a67181fbd9c813c7babc9d1f7a7f1febf9f512c12abd0df3466a29b49bbd",
          "0x22cfe9304894cf79a84cbb1b6e0b577d683b024f0d5a855d0c86a1bcb432bd8d",
          "0x1adfe9a64e8029331ebd2fa3def2961f5c955f5956d61b34c02d0b062bdd2a8f",
          "0x2751b2da7db871ba5fdb40e0bcda7cab5b157b5555168220cf3b7969d613cf76",
          "0x057f90a4c08130418250b790236f23f3209e88ffe2bdc6a240a812f3b571aba1",
          "0x0ad74ef09771099c040c2c546719783c39ebafd5ec2a55fc8399b04ab922839e",
          "0x0b00c2fa7613b52e25e4a6cf633a33355badea435cbbfef67523e3b3b1b73ef3",
          "0x2795381be694e0991a369e8e6ce75e7df18d38c43af1bc588cdc65ed8e877b84",
          "0x09177d18cbff59ce67ee76d3d10d7df12fa0bb1dea660c3ceb006a6a3021de2b",
          "0x1bc77e5718826efce52a86b8610d9480074647bf4b3b9fa3707b681c1a855a43",
          "0x2f2d128b42d32102d05761240817ecbbcaa03d2fa45c5cb2f82c1a0c048cebb1",
          "0x215bfd258ebc79352a7a4faabacb30840f7eb357edd21699d5b3261b5762880b",
          "0x0e6b332b4ae5b95d518e6aebb7a07fb4fc09235d37a4133a51be17fbe9f8274b",
          "0x272936773fc1a38aa82f7d3172a2477b601e1015ac0198dc2880a21bbac65420",
          "0x26bc4d42a17a0ffc93798bfbf2e2b561c15a7460e1afd9c23af7ac2a6de03427",
          "0x2d093621fd40ab76ef16fdf49a7923d2d12c0228f8edb9b86959684611367ffd",
          "0x0275ba0e2a2a4c3b1f5d718b5b8cb8dcc4bbfba1b7064b6b38330d950cba0e84",
          "0x1ed6384ca9de788c235c7fbf0c31a59b861a52bff2847af2ab22592487879daa",
          "0x2c337c808bfe0d2cab544bd9af01f08f916d94b7ce0729a08cc4efb9eeef98ec",
          "0x2d3e0934a4371484c958df1e97e7f0f3984b5667539fd10c3e8e71246adad09a",
          "0x054e425aa02adacfeb729cae9df1907e4161302289467c9327ed08e35755cc13",
          "0x024957fa9d48f942073ef90a54cb0632c89a433ecb236d18f57dac5aff85ef96",
          "0x194b561a91334bd0dd4eaecfb94f03ebab927fe5787f1723c2535944b2fe6971",
          "0x1f5f3bb77a487905e3d39b2656b91e0a8223226a3cc0c7a473cfc4a52c74ac03",
          "0x1b3a3afed7a0821a684fc0d0f9ad9dfa3b557c6542bf7bbc5cf01bd3369cba06",
          "0x2b96619ddc3b2a292fceb07e2aa80c86ad636ea7d6d4babe8d2947e069390736",
          "0x0ba31e2d1e807374a710cdbf81f05af4faadce88ead0a1658b0b481406613177",
          "0x25d7d5bdcb74b92b74a604d6fab3b2f3a228ad23360e4def3919146e8c44fa52",
          "0x1ca9f911f0b08d1a6205925cde7aa5fd38b061095621152e8abd01654380fadb",
          "0x1a90d4e090aaabf652053435e3cdea5dea64527e5c841ea9358825e2191b48b7",
          "0x0caaf3b76909b0b1e1c7f4ec493f27501f5e6f08369e8a36eac406f29c7854e4",
          "0x1c8f94286e329069d1e80b45787cb308ce214b04999b3b99531d103fd2577cd9",
          "0x1acd43271d4b04976db5ec42700e83fb151359f9f260a5b9770873e3cb98a900",
          "0x046cbdd4dfe88c67791bb0c5ac749b5cdf44a3a87e85fc7bbc19b7839647a704",
          "0x2b4b03cfb4487c1a19d7c05ca15133be29c9d3f3051e4b01fa4dc573eeebc2af",
          "0x1a9a01f0040a3bea6124946a77e67fd3aa4fc6ff21ff5fb49c852ac59b65e5c7",
          "0x09eb5e077a7d0110673a617e59369830acdfee50de5823ae0688e60714292b6f",
          "0x0d006ce7c187ec6472562d212dfc29f615c5d119057ce0c721620af6e4666fa4",
          "0x054bc8d659b31001a2a529f45640a998dcaaf2ecf1ff8fd3f206fe34fa84722e",
          "0x1ca1ff244c5106ea88045116081c201c6323698c6b68738166af8e7f3f8dd9bb",
          "0x04f254de8093f3fb3330dd7423d9d9e17357ccb34a3c18e94019627610cab1db",
          "0x18fa6af934100cda0123fee0b5636b693692d91cc832f87c76c04bb20950153d",
          "0x0bc175cd6a0ad546d33298d27d2ce18ffc6995f153f6bf05c59c09a4eeeab142",
          "0x2e2b792abb6b6310e2cd5b188fdccf53028d6ca70604e36568b15f3408eea618",
          "0x1216fc0f6e7ac8f0ea59bf7840fc720b37848e6dcb0c77f253e2cd6833aa3af6",
          "0x15381275074173542cd250ba7cda6d1be6c12c44af2a00a11fcf0787421d8a02",
          "0x25aa562c4dfb0a38dd92e020b4d6f9b2769341f381de9c27af0eda1453183bcf",
          "0x19ac9e3549ff20909488ab728a6e88d10a0f634f771742a517e00bc2cc7cbe3c",
          "0x13c02339462d082f13ecc8ded6b2bcb26a8005a9ab55ef69a91f847e760bf302",
          "0x1fef0dcd8f5858f240c8986003e577a276a3526c6b45f75403e814a0bc620a1d",
          "0x031d9be212424a643c6c9bf144d81a06e6fc9d68637a093889cf3c7fee5e3ea6",
          "0x1a6cca07ef30d34314047214f1a8729728b8dfe8c0e55bea3564928b07de42f1",
          "0x2d3b9eda96cf186f8e0b5e1446543281931b260a3ff043c66cf232f4909c12a6",
          "0x07da58325965bec24b4d12d606fb4563a23a130e98eee7f7766a4a3558b5d6af",
          "0x2655571c23f7f1cd1be67bb24d4c4e7cc674b884b9c58ea8165d2934930d6ffc",
          "0x2e5ba95e4a2ce5c433f15ab0a026b1abc2b2cba256c61706b6997feb577a42d2",
          "0x3000c7959df31ee4bfd1118c7ae22906da8d802d9c47855050117926342bca87",
          "0x10e13d0881d27b08cf5b64ceef72c428ef1084679b539b058c81a17006abe053",
          "0x2be2a93b372be664eebf809dd873c74122acb3cf5abaa6c215871601b888f489",
          "0x21310218217a726cc850c0a7dc919d29ffa8b61ff606390b2eb0eca95d4465ac",
          "0x14d907f470707542205bfd78df274bdf24d8978959b44dbe9df7a7e52114a7e5",
          "0x05acfa1e857d8001ce311fd3b5d9eb3a1c92fc6e5dac2466c0af0b277816a3de",
          "0x123ffe61d17cbd6623ed486af0eb8e76d04de3a77a483c662b0b5cb98cd449da",
          "0x26368aa29474645edda1e155a5cf0df1eec95f4e895650810aa77f4ba7027af7",
          "0x21050e2060dceeb56367512af3fa11f3d2e6be9b72731255b05be5fee793f880",
          "0x22ee0d90c7d715326a0383c7abf6824b9d936af296756129574bc79af2fef0a4",
          "0x0e457467bae8c132f687fc06235fa92a0bb2c3fde1ebbbee6ef83729f25f3c2c",
          "0x1dfb9cb0002a56e38b73913636fa56e26a3b4de751939d5eb09a3432a3e29638",
          "0x06c5f60480c00ca60c016f34a8ae166b6934319b81ab4b27beb44a133839dc16",
          "0x01284904157c07148e61e56297ff04fdad394a6990d4e47a614a00999e4b8e78",
          "0x13d10300ac391c78f9c215dbc5d2d461b62cfa5a3ac70a69bd470be5d82cf32d",
          "0x063d65844b8805daa8fd771b07c278404c728b665eb17202297266c422a96188",
          "0x15e3bf17c52830ed3255cd5c1149f3618641d6e7fedf468c305d08220dbc8a38",
          "0x12bf5dd5c3caad12e0875e57e19b10752d9651e3a5dda05c0f66e5bf8faa3df0",
          "0x243c3b797e831a55046ae8916158fe53648e21e939400f9f5eb67d6c0cc094c7",
          "0x001e28fa9b34c2c6155b8421edd4de58c99d1e5e81e92345f62319ab96df03e5",
          "0x2ad1dba5506ee064064963527bdecd823cce0494a86ea452d9b4033623f386bc",
          "0x23137879a024cbc1b4810ee54c7f9b85046734145f334a7cc1e4a57c740c8d82",
          "0x074f6fa62972968e22189384563d6752e30235da2275481bc6c3b056937c773c",
          "0x22b10a5253716d165a670736ee243de0627619378edbf751b46bda0b12dcccf5",
          "0x0c190040f1e4eaa11b4fc7046995989680849177ece7bfef7b446513f9ebe112",
          "0x301875852c9ad256211b7f9f31ced8e2256188d32c3072c519d7069b0d10db76",
          "0x1c0f67d05ebfd650d22dead7a11130322bc1272efae98b85c815db6b318dda42",
          "0x286e9a17364f36946a3d2c7ba0612fef3fac60b0daeb6e973aabebce587a78f9",
          "0x2b729468126eaa101f4233baaa099d02db14fe35c48580eb3165c61ddbceb52f",
          "0x1f30f71406a5da98e929062cb48e0a34e473e832fc0ce811c28f09a31d5416fa",
          "0x259546f8419fa15978ab360084fe0a13229fc11dc698db8bb81c822e2c832173",
          "0x06e36124121afaca19887a7ca428e12c0ec8faaaf5d733ecc6960bd7aa5d7deb",
          "0x10f1ce0bf57c0778bf4de60a1e2bac8892de6b7b6ef2f8de911f731494260be2",
          "0x177fc951f639fcc274b4ee28f3f7ff560d6ca0d9f930f53d3abb55e6d75ad103",
          "0x1f34032aa46cc08d68555bbc2469a66a2efba23c56ec3dddc5836e2e919cd610",
          "0x269cd0b774f8625f5de7519be61857cc9ebe06d10610dc91d9f4cc57111eab41",
          "0x074f437828140fcfb1ae00b38c29a5080f0d0feeb99d4688ff8871f6349f3c66",
          "0x0396f2fce8cd5ab3d2601d37f80fd9775aa5e9f56b406f015d9b095fe1905945",
          "0x2e03afbff73fb05f32f50239907f48aae1aba810a6312480cce343ec663f210f",
          "0x2ae899455a6a7c49997c82bbe36066ef1d6c22d8426af54d2c74970b33ad2a90",
          "0x2bfedee3eaf7340a10fc0971ef0003dc87cb997cd687ef9f7f88b30c3def2690",
          "0x2b50b39a43cf9f1d9feaf04a1f100311e78932a68051e792c23a99ff95139a00",
          "0x24d16eb1fc9ee39362dc66338ea0d275147f8a7ab4b62ceb26dc3e2b16c3bbbe",
          "0x1539d4f6178da10200463590c6efb1ca7305bbba935e5a7dec940e236dba2f71",
          "0x09e85ddcb02bfe0709021dc9b9f4efba2ca7a04075a78c1bfd29dddbc7be7528",
          "0x01fe7f77ba2c018282073ab4d222959351f7cc16cac7e1c6794611eed06a3813",
          "0x1d3220cf7ceba197899e792fd2b5165807a83782df55438cc8fcee6ae75659f9",
          "0x1364bb46fe7c79bc9156a13a8c86b77d3425391f7ed124a035b94133404517d8",
          "0x0b70eea0fa95971c52b4c91fd9cf6ffb5de97e63e364028f0c0b1904b075b06e",
          "0x2a9ab96b4de33f8ccfdccd8e86510e8cc731fe673eb289d15a374eb0d055d217",
          "0x2ec7ab4d439e22d1d97eff2501e94577691d28698440e7b41190a8b8e0c98525",
          "0x1c1b59ff9212224422968e7616ceae71573b05c99e4bcb26213126fe4dbb5de4",
          "0x1fdfaa4da540e50d2bcd1a2a0975350f969e3492584085f7dd3fff9d8814cd49",
          "0x0cc8ef6a3dc250d7a4c94bb890be797b91f08869a99391caf70e2effdf7f0866",
          "0x09e595faec8506700a42a5a41190cb6b9f79fae9b601cc6567569e8ee9e24813",
          "0x06047cdc0ff8bd94c6ab60e3ffea21912f0101a60bf6c2e96371be54e63d7346",
          "0x2e40288a4a681e1ff5318fbfb796e8b7f0b2facfa5c9e691a1c4924fffba4950",
          "0x12616992bf6faf5144c8ce58355ec2b6e20a7d25c7dfb13460b0722681596807",
          "0x0a78425d56372af995d8930d48cd645a6e6b45485b4c06fc38e052818b5b3caf",
          "0x0fe9c60a64dce8b45b53462ca6e68be325d8174d067471295a983cebb1c9a0fa",
          "0x2e7aa9cee7624f71fa4902971d07cd303319bf41007bdc4ea0fea40ef97cba1d",
          "0x104690cf04a0666f4921a4ef9f808fb9a3bee6192df0e6cdb15b6f302f476c8d",
          "0x2e63c4212a402284deddf9ef260bcfe7a395002e22c9a6155930533b29959471",
          "0x23de0c9527d4ede516b956c9200315866378510615815351bc58d3b5d6ad7826",
          "0x25439ed1737440d79e4be009403949ec9d32a0ba6ccd7fc5158ec97c9d32c447",
          "0x14e35080e8da90b17e72b6fbfffe126b09ddf0c0cbd0b226df54958e680afe90",
          "0x2e0e87ca0a2090d9ae1824cec8a389e001b3c0aff73e81bd25847ff0a45d1fa6",
          "0x1319e0f608a12fa01b7740a8e14066b880f0b650831d8f424b6af3fb361c6deb",
          "0x262b82f1d1d07bb18b9920597c3925a41c0a61436b71d24ee7723c7fb8875af9",
          "0x27773d7ae7ed008296a572adb64f4fb5c229735b259c03d4c439ec2ae468b77f",
          "0x05a65188ac6d6467e028dbe4b941bac5a81240e80837a519152d6542a5f4074c",
          "0x00a2a8b07719ecfb2c94e90f8e045b18ec455f67325324c45119c0329195efce",
          "0x12cc316a669ced0290bec967576e8e2a9e9b6081bb09bfda6456dcd3fd8025a2",
          "0x25a05ba9a3f7dcc29a43df45efc404bed408749b7d2165038d702b303ebf1037",
          "0x06bd45d9b13af28e309348d1c06cf153b061e0db126ec59a8af095a310c284d8",
          "0x2f55fdda2dc8faf2cf83086758c7bc77a1a382934e7168c30a1e9daad2b96fbb",
          "0x1a468a18b185dc342ac6b8ebe53ef265c69191759e553eebbe674ee9763b1900",
          "0x031b0f9b6ffcb451f2617ee915cd6dafe17ac99689417b1d92698607ee005142",
          "0x28f95d6eb7547e7abe25d2484193bbfaa36c6576b19c36fbe06b4455ecd20f37",
          "0x04f70c340b166e834080afc44ae444ea1ef56aa8d084b2301e62f08e0777420b",
          "0x0fd721d14305b2fd9b20975775f54e6c4e8069e2c71fd663a9c9cd0d13086165",
          "0x0e79eb513eabd8ca3fc610965050510879c0d2c755b7e59da7726d0d54943783",
          "0x2e3636a0f8c3014fd963ff1cfefcc844a1763bfb2de23352ea55aa5dd7bb8f5d",
          "0x0edeaf35f44f339dafb57e3080c99c74c107f61e3e0de9b8b4c234a321a75589",
          "0x20e4391350654d0463b6ea16cc68d2c411bf8c97daf1dafc4ae6106ebb347643",
          "0x1aa0b9abab5c77259b24ba6df035bf864c7e6d573480ab4b2d85926e95b0b9d6",
          "0x2b582ae7e00f3c6dd5163f3e44f8ae1f8eaa9324e6347ae9fca7c2a3af2b95af",
          "0x1107e912d26d0c4253496352f14b263a30a09b20adb31dbd4fcbfac0e4ca93b5",
          "0x131dec28abb0eba0e9821ffce7980bcca06046c12f01413ad00a19b8457f804c",
          "0x300ed80f4915fcb5dc8d420adacdc6b5417c8ce35d907d95376756d23236bb66",
          "0x188e211e215ded9c861d3a21f43f1578977938a5335be74325e0669e7edb551d",
          "0x17d321855d1ca0303dc7b0b2807c43de1880bb66fd6b3abfe5cc2c3a8e6a227c",
          "0x1528e096fbd27e0e0900460be22a69b7f82ca1aa08a6def3f35256914b050210",
          "0x271672fbb529a7df27dd20e888bf331f5ddef5c07ff4e720604754739fd56381",
          "0x2d7d508df128fa96da79116c1491d6d4d4d87a8aedf97b24de2f32e86855f5d1",
          "0x02c12ae06490344d658455338a0ba557e2a1dadbd8c9915ac402f2378994b3ee",
          "0x1ef7f571d7daac5ada2f5b94de137402be8a81f9c9fdef9428ff3f46bed81b70",
          "0x186213e6d9a5ecc85192d790388eafed5535dc3634d8359e730685a1d7eb8666",
          "0x0370eb6d2e98282ce7eabd8dfadbc46b74beea0f05abaaf67af1698ab3d025e5",
          "0x104ffffbff2258b1d4a2c661d2d0cbf7896e05398ef373088bc86327b37bc103",
          "0x206d39d5af5e1e50b477e46c62534200bc043ca985cee17f0bfd3e68bc897ae4",
          "0x01aaa20931d5de5931734e80546c966b8baf8ad6c279558de1696b2e8b2907df",
          "0x1f4aa1784a2403f3c0b312e20fffc29f77e4d01e712d43a35b9f542d649488f9",
          "0x2701a0b09e785acd9711e5e6ff6232bc6497ea97a6ceb82d3947508bbb5202e6",
          "0x07e99ad5f3317c1ace19b4a7cb94b50900319f645b2b956a34056355d3b30047",
          "0x2250455670deae50875f75ae9779a6008c9fcfe530b417de4d423aa02ca98f59",
          "0x260d62893e254abd10f0e4f8be37b5221d15292ff00a8684f5e28b5f2495979e",
          "0x15abbcd2e0c442449275eca5e4911d157cb6dc045a595417834bf39c558f9f26",
          "0x09751f79321823f4bfb93804919c64e5cac1907d031085ff8daa9efda95e419a",
          "0x08b3d82cfbec8cc13f75f77c3a61848aa0cbc0dce4cef8d72ce3a59407b2e25a",
          "0x1976bc0dbbd83a1a26f9e14aa431e24a728af4e8f5cdfd7d29943dfc29a7b2c5",
          "0x04f59d201dbb263dd04d2c2fa396b12ba08a48989dc2464b3bd5976534eb38e9",
          "0x2bb23243e841c564e7add2d7b528d9af03fe75880e9ab76eb4d46a020ca6e30d",
          "0x2f66b96144ef6c5cae5bfd2511dd2456a1d6e3548569abec7d7a49e1e0474983",
          "0x29b569f2f67f1c0363f604936cd59c3299453d8233e796a25075c41fa7e19d43",
          "0x1aab6103104bd50f3a65eb42bbf901792e79eb39d44756caef259268a06d274e",
          "0x100955f3e56bd17a4eaff6f79b697742d0655371859bc704dcea5ecfc885ea23",
          "0x271b363c4f44f4faafa02db2752dcc192f4edf5c39c17ad5a7b8f479052711ea",
          "0x1021eaa8fa200bb0d3d7ef502c5d7eedf2a6ca36e63a37b5cedd98a318a7fb76",
          "0x13c6a203321170c046d7d44e25f21c4708f58404df6c2b578462f4ac181c5e1a",
          "0x066691a02754dbd02ada281da41893feebe687083f4ec299600c84657ef2bc9f",
          "0x16379af37c274e663b7e3c04ad065ee30999c30a05fbddf1a43037a8dbd4f199",
          "0x2e01cf9813252a5171624a4963d572e1b6e65a2b93a9c990f6a53ba7d5775696",
          "0x05a4ec77a21ca15f804aed87b98dc3d5fc92aed79c3724b3e9cfcf5c8d35bf77",
          "0x0032f3bab069abd4a66aa9845e84a3ea1d390a3c2b094197a5591c6b0c29b4b2",
          "0x056416328cf6d47d3d291cd7259481443215b7d2904c7c5631bb4b72e83de7d9",
          "0x16c0689d4828c935eafdaafac08e4d909da7bc8776c76c5dcc6b4bd49c7217fd",
          "0x1d8d23ed1dd6a53d2c18f91537564eb706ec1139ba2240b733ad3acb847f7992",
          "0x1aa1a21e3784b97843ec620ca8961e8c62d5e12b8e3effbab2a4eed9b8a58de4",
          "0x0bb54439d4c6f812a70581ab7c1da56d98a08916048d6b48f9540b451b7e66dc",
          "0x24421b73eeaf63134b46c29646c2b24dd7acb860a188b08a6ed1d00cb90b3c3e",
          "0x3045c2012f7445890f79f1567060c3c935965acd0ea551a671f1b625e684d7d4",
          "0x08ec863991a053feedaa5281098afc031b75551065d6d01f6deb04c63102c9bd",
          "0x250cb2ab9d5579a24a57faaa87f7c828c94952cfb248cc46d92ee60b8c4c95af",
          "0x0f25b63b5eebc3198122c606b0a5b2de15e6f5fd2cd0f493f96265369642f93d",
          "0x2ef6abc5ab02c8431de8f7a64ba3699c79e1df0c8f2d9d5e8d65b792dbc36d0d",
          "0x1e84897766aa9de056bb5d97c6797bde93c3b0592512340206635332b5c22b11",
          "0x08923f05b050e6e0fec0efef4dea500ff3aec3054d4b2b0a1fbaeb356384d70e",
          "0x11687ac05e24f50db06335e1875db73d8f379db3a5c1c3b9f57b725b1fd8437a",
          "0x2755837b80549adaba47e0980907591229f5a6971ee0f33ac930f5be13b154a6",
          "0x09f80c8230bc5a78138f9952ba6b64ce623e12da019460363a49f5e5efc076c5",
          "0x104009746d61c0bb6643e64ddfeaa2d4f30872a92416552a1dfb4b75d4092d4b",
          "0x196e821f653863b14b72b19a068aac434a6013598bf73b28eeb36c41e76fc54a",
          "0x2c8a8a85e2618452a8d0a9ea592bc495a50672522536ec7663869f758ac720c7",
          "0x07bd4de2aec5a7acfa66678754ef95eea840dc97fd1679e653d5fa32b8ad6195",
          "0x2464a17f4353a76d911cc8349f5dd02cbf2b2c58a1b7dea25f000eb9adca396f",
          "0x26831294e338f44440adcf5dd1ca4d1412a5cc41c93a2037985eecf4c2fbe4a5",
          "0x16d69ee3ae6b20ddd62dd1a13d279d4d7da74b207bc57a15ac9ac92cae2ecfab",
          "0x16b55a792f1b19dcce6b9f4c9b61be0e0457a9980e6050da2500a409415f207b",
          "0x0d49e31e27e1c71c16d524b2a8adb0a64843aea5da2fa4e686f183be95d4170a",
          "0x1affb8fd8b243d62d5d4a7b07b624f9a0452793d1d1a11ead3bb8284eb65f97a",
          "0x27da7ba10cb86c06758c55e7e8ac76dc9aba2e863c2deb8fae7525e42c96cebb",
          "0x27e1be0db1fdd736d218443f56d06987443704d18c42a96f3fdcb7c4536fba09",
          "0x2fb1dd1f7461d75fa3c1e25df670c1442b001b9275e670d73c81eb61fe028322",
          "0x0f5f0cc9a3d4d3066c99194feb229f0e31831dcf080bff42ff1d14974f82ffe6",
          "0x2bcd23585401b0f7fe33fe366ce92e3acd8818a23550f3753decb1ec24405ffe",
          "0x005c552a02e2a39af0e21c8944b9c4f56e15b438cf346516ba2147356904f01d",
          "0x0362a8a2865a2b2fe902831c8044c54b0ca94b95fcb79b65f14753c58222b4ac",
          "0x029bb183a6a291b93f0989746105e33cc669907250fd7064868fd313810faa29",
          "0x0608f62214871578ed58a12dcc4d1c152af970e6e5045f7913cf4c40ca6df18c",
          "0x1f8a4cf532f5e835704ed7ca83effb517579006ca22ecd7422511c0391b5c4ee",
          "0x213882bb31291dbc346cae58fbfdcf03978152e15b344892a94c44e2f0b1b338",
          "0x297125f6728b65f189fab61c3896016beb0a972dd34764910f059508d7e8622c",
          "0x0f76029cc3ff0861e048a601eb52a11cf1bfc69f2dd6ee1516a46e4865b7c7ae",
          "0x05a506ed7382db51851c224d5213c7ce6a22b19c7ff7a7fccc6237af1142bb17",
          "0x157ddb6fb6d427b97ba69e8798f3950d6888e44c60dfec0a98b7262a977744a1",
          "0x277aa399e55c3e5cb49c4bd8789f6551351da540cae037eba37543b045e91eaf",
          "0x1499091ae8dc567f8d050a0835eaecf4b995b5341d29c548da08391e6f1453a5",
          "0x200bdae3ef70a75a12979041cde33a178ec02b110abd379c2d26cbea9167b6f8",
          "0x2e6835de44957130dd724a0ac6335b7c35e8afad6acbba6aab16f455939dc77a",
          "0x09e302222c01cdb2c45e5c3a920edd82da3cba855e15ff634893209bbfe55d3a",
          "0x0a5b412cccce0a371617dada267bc783ca19cec068f155d6954d279f3959cd99",
          "0x2ffb034bf2ba629ead6f8a6022e2339779e68ef2c8bf39efda1a0332e63debc4",
          "0x1f3ab3fbf5fd24859380ab59a8f72cc52dc1ab2479a10f33d7c5b7121c58176b",
          "0x08303d8ea6c4af050a906aebae492e32010ece609b5b2c6eb137ef5dc2769b28",
          "0x19f0945d9f71950f6c2b298ad3c646e4fb9e99939dc170c735f407148c792532",
          "0x1a621a5b24758bb036344639e427c03f33d25af7f7711c3ed99995d983c4c3a4",
          "0x218a7b745f35f497b4428e61c3b79563752ea6f8c876361d327329579339928b",
          "0x16ecebebe58dff59a7b0ba40693aa431b899ca7769b445a7387db118088963fb",
          "0x1daee46cfcbbd63435fa6f8791b36a4fc659f5236e896a4d447ab3da68280fac",
          "0x260875ca1e98e895c635db3bed500d393940b5654d369c61156db2927de5ed18",
          "0x1cbf71e0ebebc2d151966acc2be11116788815614bec66f68735914c3b8ade35",
          "0x03b2a320eaddf48ea570e643f89ef2272bbebdb1caef32aadadb22a918a8a99f",
          "0x072f534bf07ba555426152c37e210cc1d36d8b7cc42e1dd64a83081357189f6f",
          "0x17fe62a93a9efb1236012e2ca1064b1b93d867b0daa30dd334ee5ca08d304b07",
          "0x2ed3b5db7ad2fc083734fb61471629463d4696ddd8c8dcdb1d2fdd460ab4cd1d",
          "0x26e83b9a8a7c7bd6929f22021fea78088037c25c7209425ba83e998115335c19",
          "0x1758fde5e2d8b8886ae2134943407d8beceba4be517a01e51a51a9c11c1510ab",
          "0x233e22ff85bffcb57cf35077fc6c81963590f67e3484a67d846bc1cff2cbe1d5",
          "0x2bdd734a2d8a75f5e1cda7114a8c418bf5064398045dc7a9a8f31669282ce92e",
          "0x21c2e28d54733906bd138386d7f05b1cc42f6604df893509a629c351f57b95d9",
          "0x03ec3db419b789b9a13811dfa2c51840d3a01961e5f884148ab3f6afbecca3f9",
          "0x04452cebb0cd94f7163266aab365b3666d2a329d634ec53db009dfbe331062fa",
          "0x2374e7cd3492dde40a21a4111b32313df5a4d1d483ff38c4b0cd49214b12ee2a",
          "0x18aace16399c7fd6e9d2197c5d7879598d2b72bd508e05d6f8bceb7f3fc668a3",
          "0x041d469f85bfadec96c07f7756a6735f417bd7a882e46ba06ba075731f56b563",
          "0x10b3c1cea302fb6b1aeefe7a701890cee0358bb45dfcd6db64f90df964cb92e5",
          "0x086dff039d2271895d0a8cdf944d75ba54284897d14b2eaa009400a8d77a4beb",
          "0x072e72d8677f6a51f4c2386e2e830d6648c4533a72851fdba34a5083f00802ef",
          "0x13dedd574590f362b835c05151d6d7c1a721062c50f14453fbfce12812dec477",
          "0x0f7b730b9f5abc35b874b224ebf120d469bcb883d4b4e757e8eb52bc26958084",
          "0x23f2dfd0242e0dd9ddf76b575563e69868e13c2cf3982c52777e6c5339472083",
          "0x264032c844dabcb025545315588b4509e27717b8e964f60404d2a98e8c4408ed",
          "0x2a505c683ed009b84ea09e705b1c9256187a48ee96064d3f094d15a931c09d65",
          "0x12195fb5314e5dca6dbb5301a0bab3741522aacd9262c5503deca09ed3b5bfa5",
          "0x2b96748cbb6147ef4860f0d7d93c21e42a84da2a5d24c07f2e6990175e362138",
          "0x168dc4dfaf6fecd4884881fd5f0feb2799adb041c6e16707f9f8701ca3535bde",
          "0x293fdf5e9741851b6efdd21641894eabaae4e7bd4b4b91d727a80ce850585439",
          "0x108d4122ffa4a9bed486d89bf9ce7188e53e0161b2337bc5bfbd81c668144e60",
          "0x1d34ef90f1f5eb9be9a718c2f5893fe4dd422203a306f961707b4a179e8a8096",
          "0x2d6db62f91949f12dd7df0846c7d73de9d13f571edd32a1a3b1e57efc7967049",
          "0x18ba73783f66e8f96616221f4959a5a6df06ceb5bd3d362fac4b106111ee2d52",
          "0x0a17603d2299bbf990ee1a95b5acc089aed11646ffe696ee065bc2ea650cf6e9",
          "0x0fc9ee6b510c00bf2cfaa5e6122b6e68ca866fce11dfadf427fb770d8c25d2fc",
          "0x28222e08995c93e38c8389bd32f39dbcc203d0efc4011447c543d051656122cc",
          "0x07d27a8bba7349dd716d1cf2a9595740dd41313b93989de7e5e9faab97ce9b46",
          "0x14498b47c4b8f2663e422f7171b4a3c073d3aa17895b331bccd09f1892788a8c",
          "0x0bd8e776f3ba7553933619f60711184e85c1c6b596b72abbcbd0d1ef0f067fcd",
          "0x20fadf38540e1e46da22ae56b75324b4983031b9c8f5198d32c50d5f25b03a01",
          "0x269997eeaebbe58b6ea9f9e7fd79d185bac71585073928a74ea6f594dd2ea05c",
          "0x287d91c8eb0d2d0882fc5764dab5404c8a8fff1685e7ddf656debc7b3b6190d5",
          "0x0878d3344a7d147ffb4c047b7d6dfa85a864deaa4c16a6753c1e72454c2c630a",
          "0x2e3c4acca0611112c29b18e0f9b59357f7c5dcab7a8d5f9abe92d7b2b2aa67ea",
          "0x1e288d37cca3d0ba558ade49cc5220ef629ef5436799594edcad6055c5bc6943",
          "0x1a1d7f65598460c079f75ba724389d5118d1420f958be0348fed76ec4f705786",
          "0x0f1a6c587f154cb9e0922c5c4d8d277e66679ac37eab5b27ddff668615ccad88",
          "0x2d782792e3cfa8411cf6233e5be30dec0df22d36c9d207da85ddbca5ec747197",
          "0x1bf4dc59b31c01ca9dd2d9a70520ac09d1b863b4e76471da01544f06d78a9be0",
          "0x29abe14d44a7721ffeb528360662842162b170818106e544ef147291047c3fc5",
          "0x02f4b020edf60204c8dc75abcfb07605173cbc68c4d935d0f7e654f104696fa8",
          "0x1c692a1214bb6ae2c5b3482b96ec4678c2f7956a82819e3a9c853df4606b9a9e",
          "0x25cb9034345fd345c79824069a5b9a05b77b94fbdc24eb5782d55622db5afd20",
          "0x15ba65b32365befa2f7cb0c5210eb901aa409689c9c74bfdd2538d78025a632c",
          "0x301a02d45faba3c161f8250a2e7e280d56090f4cec023448ae1199fcbc58aa88",
          "0x2e95c6f2a67a136f5124345e3a43ef22edcfa806abd731c91a4c3003fa20f355",
          "0x0a1dc1da90f177ad3abccb3513e1bb7440d8e695f2cf080fbb83e61ed285e871",
          "0x26feb10533a8b990dcce9ec02e87b7cd30753750d1156a52207b82ce63a92c51",
          "0x190eaf914232f96cdd1de4bbde137a2b8aa7ba817d6d4b1dce5dd3f03a841d4b",
          "0x1d441c3fc47fe77a1883e06966c8980e5846878e97071ee0e99e560efff58b23",
          "0x27028a819695508e70882dd56a022e912e386db46dbe0d8064e11c8ae74a2122",
          "0x0a26bbfd50a68ff9f1622e344e20bf890c2a198b6a58bd822c722f7e42ee2c53",
          "0x2551e3511c114035df498e07d8354c042df31b0bd3ee502c8c20ab8bca826fd7",
          "0x17c6203deb0a803272043d5ba927b5984c078c00a29002e6553a625efcf0b0ac",
          "0x0dea4d4c52bdec214ee4e0b88bcef03e062ee2dddab6d050b1450c0b95a51c7e",
          "0x05e660b1552d34ff3f62dbc5b1ab67e8e1156df506c39c0ab1d6dab1f6f9a62c",
          "0x0b9870c2d17bcb2bb8b2259ecb2e54ee162362cf9b18243c886421a90a646c30",
          "0x0d83ef93bf551550434dc0763cfeb5c0ab614d47cb0cb3c79180ce551849993a",
          "0x2bd44845898d89a005f5c1bbbf5f5b8e985d48e916285a64e676a811d5733ba0",
          "0x255721e12fbc82235e64a106731c12910920c71bfeb39be6bc82291d322e7f34",
          "0x11b41910ed33ae016c7d059a373657f56ab1ed3afa884f6aeaac3e8657b52d6f",
          "0x1634afe1bbae1766b7ff7b11b011ef9f88ff0dfd8834fcb085968a35870c96cd",
          "0x17e992284359e923536eed41bd61e308285399a12b6c1df22f6570bd00e5a237",
          "0x19808c7e543688ca243719dfc2da130147127b0d441d88dff53443d3d7db9d90",
          "0x2aa19c14548a4fcee170c0196d363e8865064bfc982225d5946c7ebff7945979",
          "0x2e6a2b023ac766e7485bd83cbaba016a130c00a731134bf66692cd5d7460616d",
          "0x04e13213097cb24a2a8b3819019a0b676bcbc81d2ff49af4da8c7cb0ce8d5125",
          "0x0436db88b4f66de384baea73c505b871c79c2352600f5859b30e218f07326ad8",
          "0x00c97e95688ee07ffa790567816e31d6ab7bb0e6e8f9d3e9cd09a9b1b16a9094",
          "0x2f04c8c72c8a00180ae6d0c29f2dfabd83d0d660ebeb5e7af3c6024d3e577747",
          "0x15070cdd99b9b5cdc0694685bdb06489c56f2c99961e1ae996608516cfd08791",
          "0x134e38e18c1f42b857ba214be75ce4b5d33155ba10f9834e95f3a96e25e2f70e",
          "0x1711629053d5021bafa111ac20ac85161cdec854fc170a064be745471ab5deee",
          "0x0d072e1c8ff17213b27848557a426701aad8bf3501c6a55ef01dd4b21acf017e",
          "0x0d6cba818cc9b0f4e2323a073869c4d4b4e5dd95fd04610ffe27a99687fa98a0",
          "0x1bb7ec720107065b5d75fc4539b3b91af0d95eec0b51ce06f6ae3b40f10a54de",
          "0x0f4b198af2aae4c1f15035affbdd30647ad04861de3e653a767efa5036bc59a5",
          "0x26bd5d4e6a15ed6e2ad4caf87762a8e2533158c689ed2e6b14f537f7f8af4891",
          "0x1db762c3e18bc6c00dae8124eb13921357a9cdb2a7d8d5af899ce5c8a304ef4b",
          "0x2421f2e7882947e068b590493df453dd22a3ac41f9a81e048fd5c80119ff62d8",
          "0x0bd9d71697d6c92e376850493ba687283e8483b529a57bd6b8f3240947310cdc",
          "0x264e510e5a7eb58fe37c891194e7228737e2c0ac2fd9e7ec416e84bb44835025",
          "0x1a28efe15e5ba6bc2ee602ea858829d54b1ab7154cf94bb948171ff092f084a5",
          "0x14a206642fa9a6cbe78d6994d4472aec2d66e9bdcfeca4cfc133855662a0ae15",
          "0x29195f6f5eb29605ebb51348adb72b86e184d5af2a55979e85d8c37d5fa377c3",
          "0x2becbd1aa2fc1d6a0cb87a7432ba18070d4d8d87c7c5085cc57a36872cdcf496",
          "0x2eb311c7d96af1bbbeedc811dcd0cf3b0f3a0b932daab80580ef19f2eca4dc7e",
          "0x06b13b0ec69efec0dda80dde05a22982e450da4b719eadc02e8e6f0ae8a9c8be",
          "0x2951569586c452e57a16deffed6643b907327ab830fa43c7616c6bbd7b337fa5",
          "0x0f80913d6a98d68e7d203149083421598790bd17fb71aba3be68235da31fae9a",
          "0x0f6c6ebc152c7142355f365056108ca2752a939343f52d4cfaa1ad0f9ea80627",
          "0x2651a3545d55a179b95c1d5ec9f4790094ccefe991b43482d3accc1a5e6bc41b",
          "0x19ffed697be990bd22c33a3152f1b61d924a88f25a682a604814ab0f83fdda64",
          "0x0514f51112b2131ff7446bdc8e6035f8a15633041e31caccdae57a2cf2e6e30f",
          "0x27b250eedea12787b0e74c67fd29ee3d6f3103204b0ec153bde1b310ad8ab960",
          "0x034e3b092aeeecf9fcbe012250071b7d86f50ddfc68b5bf59e57c5f93c71e1c9",
          "0x1453aabd4ab309ce11df060b36906f221e34ec457f3e1186e1ea3369be4b923a",
          "0x11680b19c0f622c3aece37013d9d9c6b094dcb5e74c08e22f170fda744ee17c6",
          "0x25121ba4a0ade9a8b4ddabdc337b09645ee6c42c3fbb6c30ba0fb457bca33d99",
          "0x3010c1d25cce64f6dd36355891cfa681dc6e2eed6daeb368f6678ccb41b08350",
          "0x1d50c97e2fc85017040cc192d199ce96cacfa54189b6d66af5d759fcb6bda79e",
          "0x15cdcbb1c5317192281df60267008a9ce8db866fef3ecdcccc3cfad29e7ab2aa",
          "0x0bae86292d004b61dea91dab5addecd8452e4dc0f664cc600d2cb6963b7df87c",
          "0x0966e0ae7b6e52fd18185266c449aca139d76048361592d38632a20c8d0246f7",
          "0x1cae92fe86f9a7ef83ba0419a261dc83aa12a12656250bf6cdb92909a8510867",
          "0x00a2cb83a054988cee1a7a847c228c8006686ea62a6f13dd9535dba248fcbd47",
          "0x1417d0b749fda05bc8a36f41f3f714025f2e4acf02f6f6160714bb4d86d8a7c4",
          "0x052c5a70723442134e3532806e57d283a142046d2a83291da792cfa54b234782",
          "0x22a8c9d3df25905c7bf99c0697e139882609c08276a171c88dc02e85db49aecd",
          "0x1c388261e076a0643d5479187cb6ed2431b5e1f531f91cdb5127baf89c83c73c",
          "0x0ab262c3215d90263f02d9cf1a2350d9d5ab0114a1ac7826460f34635a55c7b1",
          "0x21aa865cd024cd02104da176215444188f992aec9b53b65b9cff6390b28ac2cc",
          "0x0b048e05aefa0fb2c192ec55690d16ea6a969d2475762b9d21fdff8ada4a0bce",
          "0x1cfb664fac48b01372f86f107860398c013c2361dc5671b98f13855c15732ae6",
          "0x1c63978d82984a8f5b105d597d65a437c8298fb4074ee140622e9cbdf39cb479",
          "0x068727ddec782a2d0c02028fca3757fa85e61f33afcf5cd35986732216509c77",
          "0x0d890582cc215340d3476b50bd8d22261dbcb63ee7c6ce19a411e809b731a563",
          "0x184cd8e67d3346b0b1ed513225df4f8811f22b25219ac6cadc08bd27444c59f5",
          "0x11aedcd490fc770af451bb54a698ddbd4a3ce266715ea85b990f01027910000f",
          "0x296da6e5e32c20aedc69a743f6a45e4bb8d5f6604897b1cc751bc426ace0de83",
          "0x0ba576970da392c54477158abd25968b60387158cacf5f08288954e11133f8bb",
          "0x197e9d5129d713e382ae5ce666cd1276f88ddaae7dd50dbfab07019bc425f6df",
          "0x298529230c8efca126f2e5f127eb577c1f8dfde4f6132e61b26933726cd7162e",
          "0x097ec32e1e10cb019fa5ba87a78e31b4f56387df2dcf210639c9d9623efb5041",
          "0x0a696ad199a61dffa5210f5a67ef797951b25960efdd13ae477852993d9743fb",
          "0x20e69110246861565203f2b3fefffe68667893cd881bbd0adbb07306bddf4ed6",
          "0x27890f322bfd0fabc9682bf60620d1fc0434475394ec120d77088043513a10b0",
          "0x19df61b7b8dbe8152c57a8d9524609ad5fc58b95d9dcbc6aae0fe50e5a3f0671",
          "0x1f159a0092e8e13753d9a47082ccfd4e9ce23388fa7f48d0341e184beed4df69",
          "0x03ef8afb36ddbabdcefa9b43d1e5557e89159576e54c7b1a177fea5a093bbfcb",
          "0x1ccdffa3a8f918cd338b85146b057f87f8616a32159842f55744cced8fb463b0",
          "0x10c6ce580770b491e04cf22221cece5ec710f9dc7048a98063fbca9b0e9ee3a1",
          "0x155154344c44bbae48882ab681e1e402f7265858a6a499924f961e4241d7ea1c",
          "0x168f28d28a2797945e7b4e7b585dcab192b1fc073f6b0e62afa8cc9161748c0a",
          "0x25d99c080a836ecf0aa7e1299a757cf7c5d0a96b5812547969b3f09073d33a6d",
          "0x0955ad1ab1074db1280c78753ea4343ad05eee42d0bafbf3212c656c305ec55f",
          "0x08d466d64b8949e4bd175392e4219922973eafcbfbd965cb2455ed3f2186f33c",
          "0x1349923426749433b7e0014e827b3540c03c3a7323e7a25a4f8abfc14d492b68",
          "0x15792bbe2a6f84147f008f84b591b583e6465cb6238ef540189f5e69412dd9c9",
          "0x061a685b4ed05b65843a41c24b236a2a7b72ffd0602030b63b783c1e23923096",
          "0x25d7f0dc3e0a9e71090c72b48b051b8d8fbeda393d95bd8e9cfbeaa19efeb642",
          "0x2301c0c319cfd5520bc7f972b6646661135b2ac6cd82b0e8fbf7c814a9f38af8",
          "0x2d6992f2df7b56bc9fa14e65d0070763dfa5c6d70bf2fd88e428ad1df73fb523",
          "0x01e6621a98c65ef7ebeb275f696d11110d83ca8031014576baa10ecfd8411024",
          "0x0690e58eda24665799a2a1566986f05b3c342340a2855ae746a9aa6d7d0be2e8",
          "0x282924ad2ab431d50d479c2d43940b471352850f32fc7b75647a537189e981e7",
          "0x03983afede48f8107d3c43d8ef20050071e693e14f75835e7ce3aafcf2099d72",
          "0x2d3e2cf3dd17405faa9cabdac559cab5c4b88c053ccf888161a702d9d08314d7",
          "0x0a4118cb11e35af09c80a762b665cfd915fb9cc105a6439859e8d09c6aae3b32",
          "0x1f4f2acbf7868a099c0cf30ecfcf254210c0a9b6dd952090027f65aed87c2701",
          "0x127456c9cf4b04c64ea3280f18b4ab9e1b9640762704c9343c5c93ca26dbfe2f",
          "0x22f606187ade91dcd38f9cc7ffbcd51753713d431c32f26bb50f1a068d92b70e",
          "0x231cc62f25f6169d570976385132724cd5aafda34f955f2fb5578c8eb6fad2e9",
          "0x0fc97d0e65f7aeab397cafc36966abdea922157d67dccdead1b2315d1f008cb2",
          "0x2a07cc4343ea1b38982820bc9f3d8df014bd2be58b9f9d556aa1b75511cc8b7a",
          "0x205612cbc125d00b4a26d5a2c748cb7b67f7f74e5c1a3af99d2b53b21f904527",
          "0x113b94fa0bb37a7ce20e747694e19c4e197af3feb03e27e55ce1b6da8c7f8151",
          "0x135f57c88890b109164b1f19934b0e3077001aa3c399b46cbe4b3d45584aecb6",
          "0x12fec523a77be075ac0c47862f2b18cc5e5f5caa1dbef3d907c92625252e2702",
          "0x24f864be35ef6057de078a85d1e96a6b6d65f5f76042fe46c8a028016c99163e",
          "0x0032a288d270185bc167bbc21bf43bd695578cfc4dac4f59ad26adff03b41df3",
          "0x012a7a229b6de329cf40d61de15118d6050b9b235d6074565c93938cf9b5e564",
          "0x058b63645e3963bebdb6eb639106c4e16c0fdef2be8263e23b8603fe2004241a",
          "0x19a5af0c2b00b1da07b9d4b535bbbbddf052fdd09033541683fc54fa7cecdfcd",
          "0x0a2512fff94ebd00571d056704d5cd4a3d8b024c36eb2f29a03d0a6a69d472fa",
          "0x17775fe72d1785abe11b76379bdb3541c88dfd6bbeca37d2c1e6acf28a00e5a5",
          "0x144777351320b13697917dbba1c252315ff85fcb9e5c10f642c41f906c8c2cb4",
          "0x0cce87088d369ea25cf20315db73239b31df897915b70b38009d083111edefb6",
          "0x1c83604318f78c187a80c78b8e2ef66b48882a091380583f3c14a5797c3ebfbd",
          "0x195b1051102ed693e26286faef407469f0c233ea68fb74be5b8b801df4fe3972",
          "0x2454f53ba4ff1c09b2a650cdfcc32735105c03116b254c20bd8a196285cf6ee3",
          "0x02d0fe154a855bd683d4676c3607774c505ae33b0656425e2dd21a61045c4aa9",
          "0x1a9c1aa65d05e90763237b686a59f2d738ac1eebf433993e27376bcdc6da398f",
          "0x0380c6ffec35d91b268052e8575072da510b5fa976400221113df0adc2283e0a",
          "0x2f4835b7c8938e6e3d5a8d853cda5e24c879a5e0e7a79b63a8af8e3c02359769",
          "0x1278111dbbaa46ab94479485683e473efdf45be249083c3f65762dadedb5dab7",
          "0x2f6d0e205916919cd7c5381ab9263e9bfd975aa7cfa45ce9eb4b6799ff903538",
          "0x0987b79561d0d24c5fcd6c6bf1189b13f13aa0aafefb98a6c11305e7068f9a15",
          "0x20a1f94ea39d9674beb0e237b74d92706b8f1beff58f420feb1a0629938ea44a",
          "0x046624944f67281a6082d30e31a2d78225dea00bfa55ff2ebd6b4b6a4bbcfa0d",
          "0x0ec86df4e2404b4d4c5c1c7f2b7cf4ffcae2baaec96f1c93b5718c46e32f4b5e",
          "0x17a988b62f34331bc23c5c66fe5555dc2af680f9175c4e95269ff265641a7c28",
          "0x2f933a4009c38406c103874cde91ec02d622067c7cac56890403c74408a1efc3",
          "0x29c60a6ee7e22c0b8d8a51cf87215d4e3dd52c23c8c513a8c85c21205adaf4e2",
          "0x1e2e3cdd712c6ac039aeb3d4dca4e92de5124a1a92893a8f1b8b6dd17dd020d5",
          "0x1cc0cf1b5a677bb56afa928d7084c9e31d4f54691a9b90a2f48220fb26fb534e",
          "0x03f5f53cb34ca5b6476f61d4b4cc01e1d123b90dff98e0447c801007e6404865",
          "0x264f523407a076b04f72e26834ce8bd45b8c90dc4a915fa551f3ae56d50db503",
          "0x1790319745f7932afc826f8c296f92b2c0f7f6b3cfdb4bfdc763d0a1f28f370b",
          "0x03099a72a9c353b329a1bc4baabb784501c9037ba736c49806f1da48291041b5",
          "0x1604aaa41bce072f44b6adbcc0757542e4caabcaf109eaf7af718ebacb090fe5",
          "0x10eeb59a16fa139267e3c45cef01b53ce7dca8f8808ccc248fdb5728a799db67",
          "0x12eab8cffcc06cef8d112bbe5dfba7e75534f64c4461d162fcb3ba06715947e5",
          "0x0c58e04653d88bba71e9f539b5030b937dad2405d225a30b5a75da8ae19c23b0",
          "0x1b157f2ed740cdbf798af092aae5833bf52e391b113985ca6a30eed588cba4f9",
          "0x0d0837d097cee0020345d038d3656de14ee4c2833bb9cd0da1aff2399da436e6",
          "0x0a4225a5d367e0ce78a1255c9a69aa626ed22248763d190ed9dd0f3d35934154",
          "0x1f6a2819a67e201a2576f0affcb09496ed7feca0b85058411d09a6e756ffe8e4",
          "0x1c674a9b9fdb49fc966e064ba3da32c1ac2d4b6a1b4d06b96f75e31605c38cb3",
          "0x20844cd477a2921e8ecb26eec231d8c6d9b846dba93db5eff2200acce3dc5312",
          "0x0a8fa6b656ac797be797f42e294b3ac4d9ea7d3d52125b9fd77f8d44cb729864",
          "0x265947fe0877c73e0c65af54f643b0f3844a4b74de709fdf77156f4c338c8007",
          "0x1f04e4663f2f9937cf07d3c2fe5f06e85414b960dc77a19e8d6e38c5bced7d48",
          "0x06d020f03d9dd918c985f1e7d5cd39fad63f6459055f85e1b8d65c257ad64046",
          "0x0f4fb8263bc813190c44c383d548741b244d213df4344c3dcbce797969873951",
          "0x0e3b1e6adfa05450afba7cfbe8e8a08bbff6bbec099c68d5755f096075c21025",
          "0x22fb7c00042e5e4ba4b512efb900224bc6bcd53cb1224f3cccd425331fd6f831",
          "0x19375dd909e5ec26e7274bfb8b402c5d58ca19317505bd446ae80dda553ac71d",
          "0x11d0952461edb9d24c6bb08afd369692173a72dec287f6b19353c3bb540dd34e",
          "0x1da0872acf3b35eda099ccc9e9a5ff2477889bfa122b5bc54b4be05e898702a8",
          "0x1a74a3b2de9a16c14c026b9c511152cc11740b9b9d99b6bef9f44cbf757b7376",
          "0x221b345ba4b49dcbaad49fe51917d928c533cdebb44b095080064a93e6ceecc3",
          "0x0de529ef32404116fc0dd6041c8a9d3f7980963143c3e275f29ec6386c9c2bdb",
          "0x1df03417e70bc8a58129a73f2bfed475f59cf6940ba48757c860e4d5afe912bc",
          "0x01a6a6c5e41dd7ca162312935ffa4caa6e1681769b10291fa65fbc362c57f7c4",
          "0x26be4ab855efa2c395a0bad51338e24283883973d0dfeb2d8584bb3941f7b92d",
          "0x01f1c7d227986e5a9a329bac19a23fc7df52609360d366e0afce5913a809f932",
          "0x075852ae085011a3420eef6fc4d51c8810d40f57ce4c54569e0349bdde64f25f",
          "0x2e69ca1551e48a93009319aef40fccd78b8ab0eb3e6a75aa3a7cdc2ea9510e18",
          "0x21d1d8183e5430aeb1be773620504ba994c1df4ed550a87505fd6889bbc70940",
          "0x11866d8bbb8cf8fe585de19d816f444097b0d5eb88071c2785ac3a757ea5a973",
          "0x18eb3fd0f6793a01b4e4a35050555a79fd43c7d9b305f42e9b676ed7855086fe",
          "0x2874e162935850eb2b1e7a99847dbe48b39726bf75a18a99892b2bb6dbb141ae",
          "0x043164e5c0d618af751f9458ad6107cc2c18b4e24968614daa909f3a664fc898",
          "0x1c7fad75476d7966314daa926e188ac033bc3c0e9d754db747659d9845285f15",
          "0x001cafa60986645969073ad8c0e29d8d46c4911b3336bd15a3895e10d0a39378",
          "0x059b39a84beaab3bd16e649114d507aca8b49740ddbc4c7e709af251f7e5c002",
          "0x2ef7ed14755d43e71ea6eba6d478e4197c5368cc9d7ff7c427e3c97adceafaa5",
          "0x07e262f43947c3e4380bed5989b35368f6ee10185e911e2991845730df2acd78",
          "0x0f54ef80d9664876e7b9e9cf8ce300b9fd82929274f8ef4ba503096752083517",
          "0x17b19a0cd7597c0b95a9d1b1f3aa38fede0565e34ebaee7c9957696f92a3fae3",
          "0x23724db078fd410f494e5381886a2848618ffd4a8c088fd51133b0be784417db",
          "0x087f6029159cf77cf228c9cf137d25fa4d842a084fea42fcdb2d0a16dc4cb3a9",
          "0x2c91b436e22203f5cdf3b1c2188626007312b7e80ffc2c70264ff06560f3f52d",
          "0x08b9793cf23fb5b0eebd2647d2bc7d4cc901d7074715b445b14fb64a55e43bce",
          "0x214143f8421174ad70d3431efe9d40bed361820633e27b91cf0505a8950b3bed",
          "0x1d5b88560517176724a85325f6279ebd9130a2ffa28cd00b07286fe3a982214d",
          "0x14c9577c063d4dfaabc8eed7c32b99a187028d866e2b991974e6e63b0f838fa4",
          "0x046273375bf435bedde590cb2bac88efee89adae8c6e27b01f7792493074bb34",
          "0x1fd89f063226990387b017ebe985f55d4f6b1e5ba5a2bfd6f2273d2d6bb6a81b",
          "0x0502081f3b1250555aef587cb5b4b307d730c1bcd151adecaa53302fc2ee7bfd",
          "0x10baa6c318c7e6a3a3628756ad42eca66a92be51f475eb386f96c026772e1cb5",
          "0x01dfe4501e8b2ef4184e1a4d0f0c9cc76a8949766636308b02c66ac9823edc65",
          "0x1a72d320faeaf05e0cf44db930bdbd8eed25a09bc14754665e7fb5f28ea3fcbd",
          "0x266b33340a8bf66136e7999ba473455bd90f8aa53f455343339ed5b5320b0691",
          "0x02448e52e069c6b44402d59573822c3b5703090216d607de4bfb678e1357b958",
          "0x2aa25e459065532b65ab2780b63cf6f03d872ea7596647bf9517ac628b79a226",
          "0x00b1d54e7898b63a3adafee6e3a36b2aab81e39bf3a15a9b1f479b7499b2efd7",
          "0x246f7f7d8e5ee80022d45348a5aedba8612c3cf4623a6260ddc931952512c4cf",
          "0x027907ad369fc4b8372c78e6ab39d4a3faa44551f00b83d24a9e33e01df07ba0",
          "0x2b67bd277bdc4c08c7908bb15ad397256efc62e0325327f8190c7ad9b09ea5e8",
          "0x08a5e948d1db145e20bf0abfd419e70708b2017e8f8b1170459c2c767a7ee354",
          "0x0491c93811381bbf080cddda20357bbd01755d50eb869ac50ebfb775b49599fd",
          "0x0bbe5810c339505f191659c51feeac4d6dd8bc8396f30c1e4b3d89884035946c",
          "0x03b065bd291e288a177f161e35c3652c57ef70e46e1742ef750ce63d22b24810",
          "0x11f25b85db841ff7648ff0e35ac0b6c463c714fb2bc5f288970608ab353a6aed",
          "0x2f14f75123210cf69d38f2f32b833cae0aa310e763486126d0d36c29e68014ae",
          "0x267179f1f050aa24d1777e348a99dace45aadbf16420d828e91f7d8ba5d6b6ab",
          "0x02d760a9ccd958f723e082c804dfc2906860767cc3aba88b35d47d95551a1283",
          "0x042540133fc254876967d2739f1014934695761da4647d330b180728d9db97c1",
          "0x00d4fcd586135326975e12057cde193244cad1504c4e147115610c3affb06557",
          "0x27a2352f8c5f88f643d6dea7251b027cd3aa04364fae60e3e714f684d05a8966",
          "0x1c7e955c7dea3de14499e1b00c64512b1d0df603c5492f1d75747161c2112ecf",
          "0x050e7bcbfd9fa9c1c4d29415b03c0d00a51c2bccef5b1c441d8301fdc7335956",
          "0x1abb6a8eadef0940704d611503c9f295715c3c4ebe023abc608a8ff3704413cb",
          "0x0656203914995f78f4a1d5f2546387ef7e8b51497f5796521999bf0e0d1e80a4",
          "0x1a2a69c7673f072aeb2ecc5e750c81bd0af565c71cbd0d3367efa7779eadecb5",
          "0x1599622b5b0b75fc66ccd9ef20ec559bbf3f51a4a4ace856d8f687f6845c8926",
          "0x0eb54dfc23710746af102dc417a3645f5b1b87d888bf8db5c8cfb4b45eb03a22",
          "0x19e1a6f91e97deb1adf0d25cbaab09a1f72006ee92a36eb59f32cf304d889864",
          "0x201081529413a6f1f49f3d52dcddfc74acf146c6b32f85beb35149479c891d4a",
          "0x20c393584e2857f57c23efeb7820186a50440c935bd34a4a17f2a5bbff287f1b",
          "0x179cf0461c98a99f70c433f74f60fba50e7c2fc9bfdbe500a0a512f6be936934",
          "0x138cb76d3780d42942bfe0043d625bdd4d6e91c83be4cec3da085bf250c18d81",
          "0x0e70444af01939c62a8ca5ff3ddce46e29b1e45ac6aab7d37297decf2063fdce",
          "0x142b10f58204bef4cb15113136fee579513c126a168488c376c21adb62827961",
          "0x124c8c607612b5fbd2af84ac37bee103eee11a4eb711e11fae7700ebc6387fb0",
          "0x143fde70dd6bde8b26a0859cda512daf557c452fa5f76b542426b9fbc94f7446",
          "0x24694de53a139a6435ecf716b4139ebd01cb403a2d386d58ec733736cc21692c",
          "0x168618466211f05e88a1b771ac8959fce3a6352cb647d47346014bc486f9c0f2",
          "0x1b9be7105266245e707a46e2ba3de8322d4a8e7bdca43448ab05a7275e74e43e",
          "0x0fc2c8e1f54e166049d5ff37f6b5fad79ae76d7f069f98f8fcf8f367c0fb3b88",
          "0x0c6f5833230640ce8e70af4dca674821cee720690bd349e645f0d8f59684ac48",
          "0x24560e4af49ff08a2226a7f095e44890519c9b9976aefa3514c0b065a052e340",
          "0x0d61f061762684231c5f469ee0ac33f41d314add6a79d553c642dcee363ea047",
          "0x1adfa57f4ec443e497de3046f64d189a7cdbe086d98c94cb1d003a59265d40de",
          "0x09fc22885ab01975ba9aa4c8692a04d75e50971f7dcb7738629505532272651a",
          "0x1c01bf8f85c8bcc035cce929aeae20e5bc95e1d36160e286f5a373032cbb49f8",
          "0x2dfbcc48d7241a6674803aa64253bcb3210db37af2e9c036c47978c9842ae7a9",
          "0x27b945d4398db7c68d13576a8928aac99aca88a180b31be985b85fa89d0abd49",
          "0x277572bf0b290106380c4bf58959da217f9e689940d9db0fdbe79c1a154a7f89",
          "0x0831d1b88af8561c0eee6964bd720c377d04361f9af65ced7f0329e7deb715a1",
          "0x119459ca339e5c8a1b36593a8a091bbe9de7c8619ff83a8d32a566c2b15336a4",
          "0x27e8489bc8ced6a9f209bfe83f6e664fd2553ae84632a8dde85774f86a714f94",
          "0x10fb6c8fab6b135d7a50c54f8b1fb574eb0542c05b9bd84aaf4ae89328d6f53d",
          "0x1dad3864816666ca3a5d1fcb0dff07bf12d352f08aadd1d4a14b9fa9b2ac057a",
          "0x2439afd2542a9c564b85fa68fec6f9fd48d54c398cdfe14eecb7ed7d9e09642f",
          "0x2bea4058794d8bd725705e650875da2153b829dc245970082770a03546636a4d",
          "0x292712ecd08d349bc03fe610ec2a0e7d9b8383e3df3c13af7e57365b48d985dc",
          "0x241c1f77219d178d4d61f50838a69b6d7029ca1b36d3eb348a0b1a0b64c43530",
          "0x21919178d0ca9874c90f875407e6de742fd647a7679689972cf02c2863db6e00",
          "0x303d796d52867e994221af51b2120ff3822cd8a0637c9096efe2e9aa3d2c7b53",
          "0x1f0f30243212eb4bec6bf9e8b794989abaddaf1357f7d81b79f227314e9aa843",
          "0x0c12581aed963a169ff1c33716c8bafc6be9a8b6db13a25889218223f850de7a",
          "0x11459ddfc0f592b264269706501c04ce7bd998547979253ecdcbccaa3f54007c",
          "0x0f2b37146a0a04ac53e7b630871db252a1dd84331a8d39ea02961f938b5efa1a",
          "0x21efcae659790676b5d9114b81d60490eb551d6b21f65f362f08208eafbe4d3d",
          "0x1e1b56c6f76e3cc26284b04a42b5a02c5b9db9b842272100245dbbe7c876184d",
          "0x1087be4d0c47bcf20a815f60ce803d5fb9216f1d0b474a781c85e8ed1478eca6",
          "0x20c7a2c101e34270fc18b4f05d2b2f5a5a1298a2592dbf3f9b698e4a791d9311",
          "0x2d4886f200b99c57f4f09c0c362fd3535ae906a11cf011e261faf48734a3b07e",
          "0x2de6da1551b5f1d178de4dd889d03aeee464024fc2936097215c05ee14924f5c",
          "0x00d90348bd745e5cd779a6a6b5c4b625e1b86559d71c55a13b4a92aba2187aa4",
          "0x141c3084044d2bcfe9594da6bf8175b950ab36b4433a7e61b815b6101a5bb703",
          "0x067c3241799e3c89402d1048ba30030283b507553a06ca6b37a3872000412e28",
          "0x148f39fd35a56bc7d20ba1c8922e4ad5c215660dad8d446b0f597edc42a1fe07",
          "0x1dd1fd608be4764ee1dce05067899de53fffc6b00fbe475a2e0222a63c68c54f",
          "0x15bb0f86dd0a37802b115a81d4e3f68f9a1d3fe589e5848bbbc5f5a5d77beef4",
          "0x2642fdf5df1faf7aa6a2f37b33a665f163a7df70c86adaad87dfab06493ec72b",
          "0x25c726bb20a1ba08c73808e00f829bd3fd95381e78c88bb1d3f347dc7dc543aa",
          "0x1ca5808c3d68b51afc586ed44f44189a4f4d0e56cb496cd10f5de368966b867b",
          "0x1cdaaea17a2d78385a56e99849637edd7e75d8556bfd8f241a11fd903af4fa87",
          "0x255b06d48523f97d2d30bdcae93ce9803256a0723ec161b987cef062877948af",
          "0x1cb3ff20f743a845c435fd3e2d10e9312f61da413743c4a79e67ab6c32dbafc6",
          "0x047a32238532a7a734ddabb15024b8a154455fc2481d31c3548d1e725488651e",
          "0x0995b210131910f01df8976ae742e95e0a5ab490a4abeb30fce348e54dcc4e78",
          "0x1bf16ee530c9c94a408f2ffd49ace7dde635099bcfddc1ee41def1d86adadc98",
          "0x13107a5ea2a3406acdb6563a5e3f0809a1c6b7ea9a04928533266275fa6f521f",
          "0x2d562cc0650028df6e30c07bdbec07f73eebe766a192d130a6c737fc9ce3db39",
          "0x2efd12b5e4fa102fbd60bedc120b1dc022f8c43a2fce8642893698df53c23529",
          "0x110098c916b523211e18b985f8fcc7e8a804bcbc762bfeb6c25c810ced552162",
          "0x20a9d5216caac17db5ab45fcb6b45dfecd60a708291f5c86ab84da22ca596ad3",
          "0x048c825409094d056259dd3ca7e15a08594be82f488d66f91b43af660dcf38b6",
          "0x1984479ffca6b64a3b950372747c1b926ac36a7dd4f70e47e188bf7b410ded20",
          "0x209cec7ee37d47a8a56f8484b94f5db20535b552c11d5fdacc80305fd825c8f8",
          "0x2da9a692b08915b7b61930f011f76b09beb7edcfd6a19c48cde742e99cd49308",
          "0x302f50ece4afa17d552370a4e12c25a3b0151a43e3982ef5e71a38c74c36ef59",
          "0x1b46e081e756c42c783153f73a64054ff4985073b9a732153ab69c929470283e",
          "0x15103e3988d0baf626bf9de54d75b0301a2d3927c65d70b72391b062df7cb4f4",
          "0x1564e70062ed6c3b3ff272dea80ff3dc57ca1de688b1de481e7c0726376aeed2",
          "0x1e545f388b9e05a46dee5160c8706da80cf807c6c10260c85ce04ac3d41efc5e",
          "0x088cd407f0657fc8b6e8acf3ee2b0473e50e72bf58f54ea91eca40df80173dc6",
          "0x08b8e42fa1c4104467d67c7a3e384a3c0043e1c1d537d06beed997e0b52abcc5",
          "0x14f1b3f9e72031ba74e2e032804da7868d37bdec65c7b4c33133dce2b1990846",
          "0x1619c0ecca142ed142f88a2fe0b0381220b10d3ff5c20fb67a66badabeef018a",
          "0x10f620a862c7ec986c3ee7e92ee431caa4e8d3182bef22175d29542796c99925",
          "0x2f2f73f3953af6ecea86f5ef29075fc4e01bdc083c03fe6ef89842cb81f57936",
          "0x124ae93fdb1b32754036196428519c8350e699c10ae783b8efec04f6d0e4d40f",
          "0x23bba8fd9c1d888cc9f3268fc54eefdf5e18d60b41f5794117c800ea9564f579",
          "0x1da248f4d90e0056b683e2a892876fdd8efe474fb511f46955ad3145341e0d33",
          "0x2fd8234511e54966d00f3ea4a65dfcf0a6aa07d09323f994339b43bcd98ee670",
          "0x1cf83450d23c5fd64ea5ed6003ed6503737dfe249efbff2d05f6cc285b4adbbf",
          "0x0730028703b63880fa47aa0b948a2a956590f9d2de022298c0350636586dd7b0",
          "0x2aee39a51669c14763094fb8c42d649064985ff1e175d8828f4e0252e908110d",
          "0x236a48fec7f4871e2a0fc6305b4ed35169b942f9e8029734dc9a5f450b0a40bc",
          "0x26917d74db7165800ebb0bb05afd8cdc79b470c1d54a5eb1dedad874a4a77acb",
          "0x217279c9d9ad568bfde19952276e8a757021985b2c6c1967dcd8c3a4198a38aa",
          "0x1f84a26602f83970a38afdfa335e740e24b8fb974dd9d8b0319c7cf6d3491e12",
          "0x1429fc9a53a6937f151562283326d9f9954a2ad824285e563b67d2838e5dc265",
          "0x253264e5b4725993807f799d6b066d3850232ecd10dbbc01e9a0d52f81bbb7a3",
          "0x1f193de050e1e6fc55939e38c86903ea03252b489120d0a74ee2aa203b587f23",
          "0x0b179e9fcf3598400ce988278421f7a5eb6d5adc36917fa51649537396bdf99a",
          "0x0dd3cfd2e74ac6443f1089c4c0884a890801c608c1a53b503eba6153819f9016",
          "0x11e4f43e73c18df506683d89a511b493fafbc4fee14c34a8343eb03d1c1978ce",
          "0x07e9613f5cf6551a97ecdcc24d8810e378c9b542bb59d79461a4c25493571eec",
          "0x08f250aabaf2b7bb58a09c6cd958e13c0b86c806c33e60f4cdf06789cd0241c3",
          "0x1076a7855f3b7d1ecd5bdc7c0860391c57ae1ead3508ea994c31530e29c5a242",
          "0x1b57606bfd71ab8e3b2ea9cd32a78569d00e8a836b8a2f94e165149005a2204b",
          "0x16a0fec8e2bd755596396f1d1cfb79210796b85bd3bded82bcc2b8e6d4a61c5f",
          "0x2fa939b78fd3589160bb09b35aedddeb43c10dd40c2ac6471598c4ad136889ac",
          "0x2fec4aa75563f7b8ce369ac2d239486a7e2e593c4cbf7474fc20e5154227d91e",
          "0x0e1158e63c9b7df32d7c3f32a97e8e415343f54c62977e28f6be301418d8c3de",
          "0x0e11893c32e63b42a74bed81dd71e6348a9bcb55bf5835335580be1eaab2fee4",
          "0x0fc0701b9435b305b610c7fe0c667b33de7bbd330ca940d71d5ccdb7332452d0",
          "0x0fee4aa70a97580a7395d67a37f55330b908470fb803fd004d434ae664765fc4",
          "0x146742f4531fa49c48480406498c6541600d2a303dd8dac971b7b920714ee131",
          "0x26f145dc528340cb9335cbb6fb1e70d0c871849e7475e7f9c0890b907f9f6bd7",
          "0x0e307a3d20bd16381e2cb9d0b802046f3d33026535f1b2b7c03ab075b681cfb9",
          "0x037518e3a0fd47c9a1e33a918c30fe9fdce4dd04dc0e938162d2c3a541394e5c",
          "0x0520c4f6bdc375ba8ef5e4f4d55ee73949386a813c60718db08ca3e8aae680b7",
          "0x1a5ee091b74dcc7c3962590d3042486bb4399107600c5f6664b145b7eb8c9a2f",
          "0x1986256424084fb797529cfab403b2cbf0b6626d4930abce17b1a64dae036314",
          "0x03867c71d3cfa8039ab6407ab46053ab4b7405276f483dc98319047b951a156e",
          "0x06d563050f5097774e456405b8c40d1f65b8a0a9de14e2b052039700bdba23fb",
          "0x10767e56882be4809328a58d747c6d3ff85de6513d50d09c2e337d22eb11c20b",
          "0x1017176674f93d48207e239674d99ee39b6cd893ebfb903a2a41f28ff0b56332",
          "0x0ee7e6ce359254247932f4e03d3113c2ea26e51a83313e4c1649cce22366b3cf",
          "0x26ff82c65be4374fccd75b3238534dfa544cb04228b8b17fde68bf54a791d63d",
          "0x07e88a6fce601c48d5cd2ec5945e24080fb840c5ac75084146d4ba1a6a6fd617",
          "0x129b8c69e8518bd16636ab0f1a3d7e39ada28a5de79ea5fba1b6a7d13550b85d",
          "0x0d794f086bc4e45eea6337cd1e65391049d5c3d3fee8947032c40069aeeff68a",
          "0x2622b4fa8fb07226532b779e904eea44f6f909488cf516056bd81dafcfd60a07",
          "0x25630c8d104693e7a5fe41ae65db35fd3f4c63f8f51ef9d0948ea2595f158a26",
          "0x29023fc4f33c9028cdfa300500337f668de2a543847a619b6a6dcf7c64711b5a",
          "0x2c05672e9a763ea209baa0f7c31ec56ebabb34c45b24b7097c841bb3cbdab46d",
          "0x1f501c00c1ba8aaed173524be2f2b217d6b6ba00ac262ee58ff6220167ba201f",
          "0x19ba085b36795a55dbf040e54c356e70321b81fae29be0d71d777d49c4f4bb8d",
          "0x19b51d2fe788314270e14d1bc248c090da8605a40f7559216fb86482fe69022d",
          "0x135565fdd6d3e651191d7ed1ab010433782f9b07a41dbe14629bab713c229635",
          "0x22461ed7ba44596bf3a7402dcaed5c247b09835c534a81ab365148e148fd1327",
          "0x0e09c39935650773975a411bc093718dac77e8d7877666a85ac3da15805cdf8a",
          "0x084ab85314402a0b68cd3021e1ae6790b27686c6b0ff2e4948aae4ee6cb5077e",
          "0x143b5de83814814bc1553bc7ec9bc4756bbddb9d31843a9dafbc2936fc8cbf69",
          "0x2a9b9ce26f0b8721be06da85ee1474727580b0237cdb08135baeee610a460522",
          "0x0aab3ea72f43d0064b776a4746ea6e2b189b7e06fe8d49ebf452ca4627a387d7",
          "0x1656ffa30c037ac4573b8a0726888d99228ad832454abefca598c2318a3ec653",
          "0x014a2aa2a598b2e2370d14210dab5c5eb758b0c9178ceb7ff3fa681da5c9bcdd",
          "0x153c93de24e01c07ccd75236e4ec929b6efa0da96c687b5dc125f681850567eb",
          "0x141707bdc7698398e59f4ad04ec44fab8b7f4f7b20096f78020e948778a90f55",
          "0x021381259d9cd18a837dc34fb95017a3f32785bd91cc918589dae4212af7b979",
          "0x1d5d10c13222b1716d7a1def6b384d727948b0fdeb19e723b2bfa1292d97547f",
          "0x136ff9edb9c0568cd585b259aaa562ce3e24b30a6c4660acc0b5290d30a0da80",
          "0x2f3ab4418bb0cb7b859675b9ffce8c488f16cdd8cea44c14de0432e6e2881464",
          "0x2f03727d0894a74dc97e60cbfe74c7c7311b05d020ca878718dbf561db8bea39",
          "0x04ddf88beb916a6628e60a7da981781dfb0a5e1076285b24357f229128fe25ad",
          "0x0818519ea2b71fbec6c6bfff87c978af4427e7bcc576dfa5c15bc4fc9fed263b",
          "0x1154d1aa344585c4ecf9ee9390c84668dce99231c0f427e8629ac905234e9eb5",
          "0x0304298c6b5e2144ae9a508cd4c9f4c8160c37afa477b3829afd49d6a49fcb00",
          "0x13650a58dca9fdae806e76454c94a2198bed24df36d694a7a533147548ad0234",
          "0x07ccf19c8b8714b18d280a4c0ca0e8cc68e217516d1c54db6ff73582bf4d3263",
          "0x1b28476e34df146b4f9d530b6f59cd03abe281be29b3246a50feded647083d32",
          "0x1c58347a64fd5be62d478ca9d8fe383abeb3fa30d876bd5025ecf0701257b73f",
          "0x1cc9002d4119596aff974310da5bc62721915092504126a6ff3b684383f9eaae",
          "0x13d99de748b4fed4476bb2d6e9a4ec72b8b0488487d65822895a5267b35a5772",
          "0x21a780abb2efafce61f4d67da7b8bdfac494839e8c384f090605a94e7b396da8",
          "0x0d9dc88bf3861f705b9aaf1f82df9d53870a0d3f8de4fd8b8c965cdaf6571886",
          "0x078f3af2d13ebf855e840a8c858a3f2f14316ae520ab12fe61381c0d2d4a0469",
          "0x062f5b577804a423ff3a473952caf7f052f22c8b438f00c32ac888d00c99713b",
          "0x25a8c33d7adb7ddd6a19dd8307a935d9148f2e962475f241ed67051bec38bc7b",
          "0x0431652b03c94333a0ed76c36f1968d509ac73b8910df407b0343b9dd03fb56c",
          "0x22123ad39910862a3a25397329e3dc149b50289f9095e7224a81d5f2d39987c0",
          "0x2b43334743fc38c1bdcc7cc7d36ce441ab3be01674de449b15349a75cb937b3f",
          "0x2d0a0bc92e109c5fd70afbdb871bcec178a69fd1e244195e2ddaeaef5ca10dd0",
          "0x299db5f9e49f4aceb760a4aac36abc37af72e509ad6d21f6af1a267d2fefc6b3",
          "0x0c813f6de081bf25808656d58811a88b8ebd5fda5b1365a54f793ac2bd4dc0f8",
          "0x0e32673a68ba96aa959b25e655b9422d9871c6d5b615d14da978d104132fa938",
          "0x1a9e9dc3dec2e712da952fb4ce7f64e991cc590a0a3fcf2463dcef92b5edc389",
          "0x159ae72e80b1b65f43b5074ddc6642379e09c46769d7028b9d68e979abf59442",
          "0x2479b211ad9e81f8180fa2d44d0675f8de36046df216e254dda9c043b34d076b",
          "0x062f8b312f39bb2e5f11a786ea6bb051e5373763329dd904c5199ea19e3547dd",
          "0x22963c036561dcec8e1dcfed6ce50a7270acb2e415fb343cddcfccb77906da55",
          "0x04440fb323547f46c673d0de5a4fb198cfc8b94b64e0c776442fb1f189ad23b4",
          "0x2bd6e08f96c7801d3ec73c04ec706e3a56e10e90904c29a5a09654d56cc39f88",
          "0x0531d0d6dca62ed2cb479cc2490208473ce78e2d63a2c1d6deb6a15f7eef493b",
          "0x1611c38d07cbce2b51577b64073338f50af6af8a7d4e99928942b6a687340edc",
          "0x148604fd234d2f542477c7a0c73a59fd9a19c5527e9feb4165e4f711d04d84af",
          "0x0ffb01eb4752741b05b51b6331c2b1a03bcafad4adbf57fb621f8ffe3eec8e02",
          "0x14af647ed36be4e16593f8a81335300459721d7dc9ebaeb1c9de2450bc7d2199",
          "0x011e2a2bf16b4b70d91546fe3e9741518f14e2b6ee75d59640fd62f0606d6c98",
          "0x1fc2fdde6c5ac257f4052f0120335407e533730d927809879de0d023726fe4f4",
          "0x049e892045b8d924d757eecef66602987c317ba55b7909b5fbaa4adf56a9a075",
          "0x018b84c59e8b5bdc9e4c55ae91457be4a66332b5869a9bf4928124e170eaa6c1",
          "0x263c7be5644463e12efe717157993fd58751cd755ad31a3a75b7f52420208b1d",
          "0x0cb27cd239ea5d6f988acfb4b7de9a95b0eaab0ad0cec96c9bba0e6a2e459af7",
          "0x03634831e8b0e73bb4578749a7875f57643914df478aec0c457f62e8d1550027",
          "0x221ca9a31e8a11788017591eb067b1f87bc35b362e1047386378d85c24d26a4b",
          "0x08d5dccfd2d2164c0086fbdab916a75527156b82ab4536120ab6548dc99adefa",
          "0x1ea22f826469f0434f9dfe6749427fd15781564361adeea254850458ad482560",
          "0x16259979de9e13b79aaac6ab8a02ec0ef26b0b1690e682ecaa548867fd161a27",
          "0x25616133ee91e772b020d4c4c5953c05a8cea208b0162c82b57f9d07a5b6bcdd",
          "0x109451ff7ee8fbfd9563b8c2e7df834f72422cdd68f9372759c3a31b514d8704",
          "0x29e9eb61d0ce33c89954b0530ba55771f3b650a9ca00d0b52b6120da4bd97885",
          "0x176b236b779aa963de6e283bc06f4d40b2119fdf226bbcc4d56f9337ee940df8",
          "0x16a033d6c26609b062f9c369b06ebe1edac366e8534a33b62d0ec919855520c3",
          "0x27cd66a32dd969ba9fdb038201742c8062507ecad62e8947658f466f2acbbbc2",
          "0x0f90038779e72e988033ffcb1fecab087f302ef61751a6a84946c997e634375d",
          "0x205f70b96d6e7fed7449ff0f70be698cb5b805c7573d7708e2c68e4bdde851fc",
          "0x1ba89c27c091cf85f997ba0e3dfbb84ba95d463d1a589826f993bf60d8670061",
          "0x182ea2d905630567136f83ae671ac63158db9efaae71b5bd3ee0a3de9a9f9eec",
          "0x06509a885fe116b967ad2cc9999d442106b2f0967bbfff02c849c5272a100481",
          "0x02283f7d31bc75e8ec3c8f1db4cd383c04c02dafe42a6cc83205c0c1653aa855",
          "0x17faf24d23b240bc3a43066d218db8a1d8928714641e72b41b74febff037d4ec",
          "0x0a03a9fc7aa508da326142e62c7d4818f593dfc50e14b8b834ab893431a2a620",
          "0x071cdad090dd06cea45044f25a6adb52971594f3e161f62f4129e0b72a7a9407",
          "0x11f176589b8244f55560096a18423ec43451d6e99de165a29775f1e056bae3b4",
          "0x259f50c13a176f8513da7744fc31afecae0e9a4102a6bbf893178bee26a53d08",
          "0x268070c17f66e82a1219f144e97ac1a9f6f926d8d606bbe66c2bc7c051ea538a",
          "0x2feb1ea6480d6caaad0a25a3b660d0163b701931b7f73751d5e86a48f0aef56c",
          "0x267a8004c0a4a65b4ac33b8658b1b683579ed784647b378772b4b66cc4c189f9",
          "0x25d67a760f2a17a9435e5ba4d7486bce7a0010f771e909dc38cb40117e401308",
          "0x1e14c2d3209d43e73f72524efda3960e16c8d16dac6dfbae73c7e75189f20d11",
          "0x1c12410d09b3364340ac571b40bc1d74a9b42ab1001f9eb89cdc83a32656b448",
          "0x2797b79c67a48c4e5210e93402f7f739d1e4f443664e6981df1b4232a9916f55",
          "0x2f6fee780ac5a58cdafb653ff250ac96e02c6713fdc53ee530111131afd2dca3",
          "0x0096d875d77642579ca91708c5bccef61acd69fc941ce2e126c3ac394ca5b1a3",
          "0x09c918b1f1284e123af4a4279598dae5c44e5c201475ab083daaa270e43599a0",
          "0x14c0b0619695bf075a237947bc425adf17c35be75d444e54288a3cdc85b8ed19",
          "0x26d8f29cc41aac3e0e39e354547c53b30627ec26e4fba33bd8d60979be27cb74",
          "0x09d9f04394b4b2f5ba5c2e4f83e4f0f63e4c1791ef011148cb2196901dec70cf",
          "0x1704c408583e92deb63655c36b90cba6a9a2c403261fa2201b4fe6ba10dcdcb0",
          "0x030702b64d0a76cb0c9e651eb579263718b35cfe62e136472e08616938ff0ec7",
          "0x19decf83dece35005309897a3eb81d5e25cbce4eb5e2fefec5cf68d90383297f",
          "0x038c625f54e4d2ec49c3811c37063a1d108c0d5376cf97944ca1074964f7ea95",
          "0x0cd726d0859a55c8063056d8356ad29b410b1e1dd1ed0e282ae484d6b94c33ea",
          "0x0e9a0db14a18282d439947ef7412fe1e6aeefcc96b4ac50e7f430d980b47fbd2",
          "0x1d3b00e67012591f3fe5bddc1eb36574de7a0357a1be28359c1518d07d5cf985",
          "0x09745ec5d24cf1837696f5a867c3c6129a0d44c037d96612e99b82eef3dbd87c",
          "0x2dd5e2ea41588db7b01cc611528850114adfc8513b37b17fb2a46f2b09bf6b1b",
          "0x0b3dad731b91ed4c2aeeb10410c51a6e925360cbcab20c3ddecf83dbaa7e4c97",
          "0x049998b294f8aebbbf2fbbec695e4d2d56a9904ee051c84b0ee1fec9798cfb42"
        ],
        [
          "0x1373c771cdf15121a224f330d84b6688ef9fe0038a3bc26a28e3196578a0000d",
          "0x29f9fbda3c999836017f76e121af3aca5ce78bb48fa867a6a95e5b9db387533a",
          "0x1c7eb5116a20075c169b786d9dc86a24ee7a2525b565bbc262209a8cda490528",
          "0x21a549eb554f0f859f61d68f1b6bbe9aa3449a6238546bbdf2a1c308c9cc52e6",
          "0x0b53fff701347d1b9df98b46175800e0d3250ac6d4a1afa71a349ed195873508",
          "0x02129ac4742415c020db2473999b34dfdbabba3cad4713718f95e6346e1583b7",
          "0x01d28f305e8b0ec88da37c8251b0c8d230b68bea9401a15f5124d64c5454bc29",
          "0x1ed301e02e3fc930999fce6d3744c23596700c03720705939d61cee451faff93",
          "0x2edb1832966e34eaeee0903858afedb13dbba9f7c802c83ee628530d0e26ae1b",
          "0x123daaddc930c65fc67bc77ca8bf4123fe81fbd0501e8f89ac31a698756d87d9",
          "0x2bcc36362c90210acf67d5fe21d53104e9d5478d057141d3b17259fed8e4a8fc",
          "0x1fa928cab5938207e898e61d99c7d616269144f7900815b17095f7ff76e3c9d5",
          "0x29c2f1cfa72a0fb8f53a631e84cfdf5cc18fb426c254f5a905fd3e831fc7c837",
          "0x17a732ad13f1b6a1aff42664c390b9017c418210273c7d048bf300aa7be9c65e",
          "0x0c18c6e773ea7eb43b98cac66722de9d135484c6cfa084c2a512ea1977a60268",
          "0x1954c5c238d8a30c9f1ba4fb963e091acacbc3ed7b498dcf6600f530b6545e49",
          "0x2591ab77813f34d8a0e0b7b0caacd6ef179dd314597cfde78b74869d74dad600",
          "0x179db9fb8aab4619e67a6a8667c7b4b32f40ed848d8e33b756c9a794b5932fec",
          "0x305d014214b4107c11fd83870458738e04fb8dc4e747077c0e462f51d1c59575",
          "0x298723d70694578fe291635898762bcebca9ac4563b12b90e1fef4f76f9b7bbf",
          "0x02b336e9b38b504c412a683309ae8024d0802a45d06e649a5e53719aab29a913",
          "0x08687e699b527b1341f9ab7f17113d9e0eca0443251ef35f0a905704f155d339",
          "0x0a5ff9f7d45b3ca9b79b18d79db4307ee7c4ac4ddea9a8da1a36ab3be057c9bd",
          "0x20e44747601319223535f4566cdc86ca54324c5657265353add7dbf4f2504656",
          "0x0254dc31e3afd304e85c9ef8fabc1a1cd1a4c7b9bc860ce9ce436c33a202a96d",
          "0x11cd6492dc520c57dc3e55e33f8a387cbc1eda3a1490b6a4bcebd94e0742cbf0",
          "0x2f98b10265a30475bb0348d4a787cfb6603119a1a4fe15c36dc986cb4f8c7cf1",
          "0x153d814e4e55ad782bccef998c974250c073465ef7077550246f69c58ba989fa",
          "0x04db11a9ea014aed2ed08e46c06306e87131744d65d289e59964f930d13b9ed6",
          "0x0e9a9a6dee9339f5de7135ca3222fd2230c3f3f3e01eedd3633e606aa0b1a1dd",
          "0x0e6d8e464bfcdb8f9ee60fb1f2f33079911e7a073856faee78398811cb976757",
          "0x0237fe2151186437a1cf1901106ae25aac16e9846f9d41fd68796d7a28ed728a",
          "0x1e3d3d1eea8b7615a9897ef86229776cbda1d848aa5a680935825e73f1f5aa84",
          "0x09724144c7a4aec0ddcbba9f9a9e9ec9bcdf688ca3f5870f1ee6e174179fb440",
          "0x11139987e1147467d927db25eec88f0c1e0232e3486cd9a014be3fc8cf066129",
          "0x1524e5becef72c2697e34c8055ec81974af04912d7ca1df83e65a080ea96269d",
          "0x064d1299b11b1a6bb50b3e5ac7592a054fd72380afa4c092ce28ec8c31e80c99",
          "0x12d9fbd27be24eb620b7743cfc5296567cb4804091a1803dd977788a9f588e4c",
          "0x088d226e69e1b273eba31d4da8576085cc0fd0daae1546bef30079f84b651bc3",
          "0x15126de187213ebb40dce5da1ab3adc58a3139920c19497c3f47119baa50670f",
          "0x1169c1fe739bc528eac16a5263d22dee4a66a9961f01eef51684ef792126859d",
          "0x2a7006c683094f6f84d122ad5774ad2f0c9fa80b6c963e2fa3a1ead3d74f3aaa",
          "0x2607c22ca9aefe8cdea30fff05b05c4fec7ed8e9302d0f950cd9405ae94bb258",
          "0x24530b086f441e3834f36c2b11ebc0a809dbdfdd8317a384465931c1c58c2638",
          "0x06354e02d8c4de97a811481e390c26e5c93fc29a2a1a84824ace50467c9aa652",
          "0x1f6fbab3e2ea2791c94f5ff43ca128943640692151b295dcf42cac0d8ab0757b",
          "0x1747ca45b7282ef09928f7649f5cc8337537e2834e6c8905c1ae69008df70bfd",
          "0x03efd4b9b4d41974e36884e3b1055a705ab4ec3fb1c8e76f82e035991200a633",
          "0x2d9cd189d47b0b1b32c9a2412db6a59b1b475dc91ebd2d685c96b349c220b4b6",
          "0x01c9982650aacd1a449ed04605bd65fd75ce393d424c9751814fd03541b4756b",
          "0x243ffeaa82f3c038481e84b728b459eb221359851ae226c1c6d6a7ba1b1ffdb4",
          "0x0650daafd003bed0bed22bada31bea709491a83b55caff300339885481dc65e8",
          "0x16d20c619674228b767fc625aac650baae2d0cd15c1f9d0164547082b3099df9",
          "0x05ee8d5d661d39f15be923fa2944ef2b29da3f4831eb1e4f2f1c1230cf5d149b",
          "0x23ebc8fc40feec52402e18f881eacebfe441de256273ffe551eee0ed7e4dad73",
          "0x292bb59e7a6c70116ad7b7e11951c3b8b6b1b130f35bc6c428a9533c003a70e8",
          "0x133d42d9f83d054db43e4354d1bd7ec3a89b8cf94703fdc12950d9f3c21a63ea",
          "0x1fd6bed0d347a88e46fcb42f3397aeb0cf07a8e71467e6110b94c90f9323745e",
          "0x023b091a0c1f0822c8156747a907c8a79b8c1fcab4a3420622511c867f79d776",
          "0x075fc73bcb6ea2c158e721a9aa6c3f1c4d139b5cf1b752c87d96f44420512eef",
          "0x017e3bcba0b2d22d27cdabbcb360c8020e56c01c079cb550e3f169fb2a9a451b",
          "0x194299f0fb7951a80ace994a3ea3123e6e0cb72d5c46fee296ea6f8e73ad1882",
          "0x06f0e522924a4cf25d9011d477a2746c77e8cc77150b87b42c8c118f1473b514",
          "0x0cc91c18c5fee1b579da0900f04e5a6c36d65f0fc977993203d4b311cbf5d0ef",
          "0x1abd94c2a5b28e661310e3315b67adbf563fdb06926b6dc4e4d93d04165ed309",
          "0x24142c9001a7bfff363f3f67f4a2bd128efb72e846e3ba10344ffae655e56f2e",
          "0x1931b9d4523cb3f78bfbcf6b1dde68c46012aa747dcd7a3af382ed781252e478",
          "0x2ce3bd1161a012a572836e97ea8f0694f93c952d11fd11a8e8f9a49dff9df85e",
          "0x15a09fa373041c239e8149657c98b4f3aa30d192c87c03cce47a2b2453d5a48c",
          "0x0b1dc38f74a71b7d909e5ce7fe5601768738417a5786898da316f528998af665",
          "0x13ea22f9316bb5694d69024fee2cb95ee643c545496df0bd1c25490e34d0f1f6",
          "0x1ffe58bd14b12b9fafdc365e7081a395a9614e022f7f4d7bc7dfc974b0aad71d",
          "0x11bab1f186cda03c01e85dfedd40bc5d406e24ca58b305a6257b7c772bce2447",
          "0x14007eb2d1440b7b8e0936c79672051ae6f5ca9fd4055b417f00c9632abe30ec",
          "0x1037f0193d40f682ed9623a772de679f0431873e8e0b5004a1f242ac963fee72",
          "0x20b18be760e87d7c6149b810fe496abf77a0f840ee57ebcfe1cf77236338fabd",
          "0x1de835e6623f426711276dde7a2a1c20a61b910bf6fdcd33b34368cf96e95a2d",
          "0x211c38050b07c4a747c5dc44939ce1f76b0820c4b5f07a47e8b10b05e7a99d4f",
          "0x0372fc2cd832015e119c2a12d3622fd7212a4887e4bd1275c205fae2e17f452e",
          "0x01438dee77b0825cbef6b0f412e9a7277d4e5dc161ce9816f020ae4d1410d0be",
          "0x07f2ece16c12c9757aaa60953dedd709c513f6f8337e22968a65cd50b0d99211",
          "0x0c57a69d09575d8e1f525e012d73729bc89649b5bc4260d73e4324848452510f",
          "0x1c8d0a9db77f14f835309f2d3c6821b9921a366468a0d15efb308f57ce658513",
          "0x169da093e7a5b39bf088277072d4fd58d80215b69ca262cc2d12a5eb30c00b8e",
          "0x2f3034ab20af0fd83ac60b0236696866f8250bf2d765b10d6da2e3ef1e2d787b",
          "0x0e31b4fa627dd0e5f2dacaf105865a77781543620f3eb28ff7dc102656583073",
          "0x2a9007126f67e1631d29512f433a6a0bcb8c95a36be164be5fa86be9feb8a594",
          "0x080af40215b6078be84fb47acd79b59eccefe8a92b6a6033e772c22183bdc0d7",
          "0x0de8a234d208861ebb05ab3812e5c4fdd39e7ada9047c926efb88e1cbf2ebb52",
          "0x22aaf24c0f1e3f941606a527376ddff91cc6b0adc062efe641f96e3005af3659",
          "0x1f4f5b7709cf584bf0704861e94234cd8909851e3b212c64a0b3051ffaa2eb66",
          "0x1296d46427eb2e38816a5e817133565d4f6ded4eb72b5d0ab559bd57667aa2f1",
          "0x03fa86767c1fa2d7b4eb45b4a255b1298c55d045c69627f5d8adeb9683a129be",
          "0x08022805abe02bad75306d226478e49d25facfbcaff649364352d4a88d928f38",
          "0x1d58b33a2a9638ba180cd36029308a2e8be7ed273441d5d280456b2d3b8d8a0a",
          "0x1f8cae7359c800f307a625b66ff2154c6c4364e85ca8e01911a634aa4ad657a7",
          "0x039ca66f2fd7f80c17171a4ed8c82ae3c3bf0462d1451a9f5a58748958717bf2",
          "0x074f7e13e74f2b7b316a3839956f4bf2541eaf2497653b6db1a9335da6c882dc",
          "0x1f63cf1148c0efa656d5af850cd02a0d879ad7886cfcafe1ec55fe6bf4ad5cb0",
          "0x1d9bf6ebc0464b9cb47583494a27b45763d7a62296ecca17efbea97356a73e23",
          "0x076492874603b021892e5c2a03c706979be557fd4ee2e040792da16e28bc8ac6",
          "0x07012338c5c626e267f76d428388940b900e0085c785166d27b7ec8960825238",
          "0x09c29059e2013d0ce2cce0b24e3946765a95f040526c3c9224d2801a1bd4ff81",
          "0x1f2de0350981ab374c9ba7ea1a69d81b287c2c9fad9095205ab21582ba0ea641",
          "0x0c52bab86e259a3bd8c061197028873b801b4c56ea8036ff95a67f434f3b7425",
          "0x2f262e06178670c4ff861f670c7b51ef9e629213a6422032dfcb26760426a3e5",
          "0x2af6aa2335400114453435e97010dbe70786a691a5d972ea211af12d4ce384c2",
          "0x18cad65567f0322fd6f0626cb5caf567a46faa122d30c37380b54b6b5d01ab3e",
          "0x145667e19067dddbd4269db6ca76d0c0d7e57f1945eea251f8acad86e849858e",
          "0x2ebaa7e10194cd2957a13d1a358fc93ce54d8bd3dbed06e215b2bf2623b21847",
          "0x28b85b95982ebc76c4762654f932db031ffd5376a1299b45ba805c4b4e0754d0",
          "0x17cb0c473841ed2eb1f1a1ddf021b74f73f34172e065b24c9684dd3cffc340a5",
          "0x24f46ecb8583ca97c5b018736d227fde7c39d1978ca63c97e39ea06588db07b0",
          "0x274b5c409ea9809bf7f04a7cb5ee4d322d1a95a86c1d0961b15d4a24a7185dec",
          "0x2cba8960d543fd9846377348ea55b7d042b3348524d76101836646627ded4477",
          "0x27f02e416dd70b44907f97d7ecb945cebbab1d4dc73c8a18c00cfb1fb2469988",
          "0x2ab21865691229fa440b6528ad7c39c41693b1b939ec09dbeedf26f37724a151",
          "0x2910da916e438c04837ce799b81b0e9792c1ead008d92fcf9ca867b165f5e275",
          "0x0f03ce98366111de12ccbe5a1121c9f8309519a7e52300e397d9d90368207afa",
          "0x236b0371e7ce97213d8aeb6683f02f44044a1fedaca3d151edd3121a44fa19e1",
          "0x2c50cab6a867b1e801a36ffbcee521b83afbc580be1897dc4c5b6cd5df3b350f",
          "0x0cbf8c8dccd837d1dbac09151e4ee378f93e8548d923d8a49e6df81b9c3f277c",
          "0x1d18a9fb001245c1a6a17f7cd24ed820b0dbede9ef479830d0ae483346e54be4",
          "0x1476bb1c30603f7f94493d2e016bee63283b2a7efd999d59090c434c88837ed3",
          "0x24d565fb578dd252f56a7a0d5d8d4d1c5d727d5234ac4bd9a9600455ccb5ad58",
          "0x0c68e7e9567deab8e8b95051a7788443438e0f5fbe0d7de436fa3cfad596369e",
          "0x1ce5b25a539d3e1c0c5dcd1ebd0f4ee716840d44c3ae109a669eacddc4a35611",
          "0x2d3210e66407f6c343eef28fbb7bae59f626db73bec5d9ff06ba9d43ba84e208",
          "0x118ab3427747ef1a45a609cdf7e7102afae6d411392de254d3b72f1d450ad2f9",
          "0x0b45c70d2856c7e5b3fd6f8f0fde1a7fcb14a2acce4fdddfe50b39fb97423b5d",
          "0x2ce7c2bad5608153c5d1e40ee17cc33ef1783d9b1cf0153e4a2918894faa46b3",
          "0x0854bd46fef6c2e6480b3b0998215f55f4e090a3e99e03a5a64742f98dce5af8",
          "0x15c77e7600df711f58f2f0fa88b7d435770104a196076b74e6f5d7a96c8e693d",
          "0x2a0a3ee38edfda0761bb9b3017924d09309478b167a6099e54d2f5a221724ed8",
          "0x0e8c14fd43b9ace2b7e98e1ac65659cd37f8de94198aee42f5be6659765a4ad9",
          "0x163276e836c4ee6ab9466613c61fc6924faed9cfdc0a458bc95b59ff381e21e4",
          "0x23d1584a5cb0b74c00071c687cddacb4a632b104de4159c0e00c5352d078ccfd",
          "0x15685bc903a1c4c031ce016c093860a2ae2aefabfa47d1f290eb5a628522f5a0",
          "0x1b33f50e90e90b5dcacb1a158641d63311972457efd9485834b83f0fa04260a5",
          "0x28380c55cd667894c638647e6aa14b857d3f31c0315ab315d6a9457304f21dc1",
          "0x29d108541f3b451943eacf723acc6886aab18c8e4485808f4b1e55a73cda6246",
          "0x1d4c2cba59d5551bc3fe976ae5ac09e5b728d305bbda193afc259c99932f95f0",
          "0x16a8d69970561003650337aabe5e4e5ddfa4b71c1b9db8cc7b82780359c70d33",
          "0x289e50c1f0b0bddedc98b7e8a35be62f14f56dd5d7345bfa6ad0d2e43bf92e43",
          "0x0a41765a5352ecbe0b327ca7827a9fc6495e7b6c142dffca003f58383c6dff65",
          "0x24c0d42378a0c8a613c0402ede6de9bd3527ef2b82ceea6006e7f71bf77666d4",
          "0x277cae5057d5b5ace72c47e60cc4b8e113ed706b5d91ea4fb9b13fd19fa4d47b",
          "0x0a303567cbf94968090438a23e2fd2ccb8a7f71622bffdc1c1684e8958c3765d",
          "0x1f7ed8c267a29a69d9450dc74afaf768a884e42c37e0e6fb4d4385cb027ab949",
          "0x086c4b8301656b6acb8a735019556a278a60313040f236e815fd22e8473bbc65",
          "0x27b63fbc29594760dbffef8d30fef49afefddf1504bd487fd6282d9e3d6e3337",
          "0x00b9c0a45621716f9849af8a3c9075b7ab839c282881ede8b0e5a9e723766d70",
          "0x1b5ba2fbced922c3796d57b4962fd253f5ab6e2b91355d2c0a8d226040652395",
          "0x2e1ad57ebdf932603f51bb1ddab204dc026e13dc4986791f54c4030cac6f1938",
          "0x2f865e1df1169a35771f617046485f8fb17afde3b2b97d1eafafbd1862ac6e16",
          "0x0062ace5be380c5e4361b209b80befdcad052146b869d50dd58085ea65d9d141",
          "0x2dbcbb1b4ea08e3769844bed522b92ee01fecd5b3f2379c24b45d59842536337",
          "0x1ce3d90034dfda11e9bf7d92b65f810483c48b26cca092747b4ceaf07c7ba847",
          "0x086583a59497474b0d1eb0c3cec4f1df596aef3db638fee1895d3f5a5845252c",
          "0x2b984d5c91b7b320f7f297bddd68789ef6ca88cfed3957d2c5e8a6fc0e78d76c",
          "0x08edeaf9ddcd25a730751b32cd43c630da831101eb310399356e4b52df11fc28",
          "0x28df39cc7f96672569cf86ee373623da9f1c58ff1fd66d930cc234a7e959c41f",
          "0x15af6a84c6b142eacc58137fb371799bf3aff1780455c32d8d3598cfb91b24df",
          "0x19cf0dca22781a9bd56173491ebebd18ec8446d6717563bd3a80cc52a1be6961",
          "0x04e0e0b52923bff8b67b1210f23a11277337996ce50180eba97775618b003558",
          "0x15ab0a5fda2b5191cc2bd0485a30c2e75b540bc397c3436d2e64b6a2da9ac49e",
          "0x018e83f7a6bbf457fde7b8ba4fc53ad4810ee071941969f87b62b6c6ea8f55ef",
          "0x171b0539cf1d6e8519789fbeb31292b6be60c3f93e2b45309ab559a854e63355",
          "0x2ea76a14e0d177f355f681c822de2b37142ae6e93712492265d2992473da1021",
          "0x144292627b643b5180c710eba6d74a076cda5d3ff836576e983da9b7d93564b3",
          "0x07ad2bf37ce1ef4a8fac5b44305f1a5d2127d8c6ff173ec42f0e421ea53f7c1c",
          "0x055514dc9b01480ae57ba24fd5dd12f229bb5597edcffca145156af3324b0d84",
          "0x0b05a45bb9377e1597507fde0dbbfa2d642f6c358e233ecb8ed7e575ec6a34a5",
          "0x198b369f024a0561af9ad7a0cf7ac107042b42f9301bafe2e1b4c2ad9e46fa86",
          "0x253f82b21addaa86724677bad4a4c464ac5ec75c78755fbec6f46d9ef73c2f04",
          "0x0ef256e9d5e9e3da1f56d7d2115fdf10ed7674e3cecbcc9cdbcb46c7cfbc7429",
          "0x2d8926570b080260164e6b66afafbad3d925a464e995d7a1d02f90c7264f7b38",
          "0x19ce4c36c51210787f71cbb080cc340f2fb732cc191618d525400b2fdc516896",
          "0x059df907c9fe5249d484183f2e89f102e1f9978585c88b57b9a87e8d8cdfc6cb",
          "0x2afc27a41832e0bd3bd8e947284d9acd1ac7050295b388b6b5cc3179a842f803",
          "0x06e960a5b2385417429dfa89cd14d7787c0778e4c5421dba2eba694b0854a21b",
          "0x1e8b790ca2d081624486acfd613245efd710e7a7a908a233ec5afe1148476098",
          "0x2f68d78df4e08b23c96fa9597ab7ba5a1785329a370053300d792a0421cf3ae9",
          "0x0a2e82f0c2f9e345689b2f2da2108d018cce3084ee85dc83d57937facf3e56c3",
          "0x108b2af65d8a2b8ef81434d73646cff6c25fe8ebb88bb768dc435caa19143111",
          "0x0c2f90eb77fb2855d39b745a85d3c960c3d0c1ee740d8777971c936ddce26601",
          "0x03daddc5903de3d5302c7a07d4c546039fa84c3da6cf4eac9c2b9cbc94db005c",
          "0x010f4d48188805d3126738d24976ef4c80596b3c6380effb23cb3b3eac954134",
          "0x06701317708659ce74515f62f9128ea9a1cff2796e18eb9eafe9c2ec4f9e4280",
          "0x2dd0349f0f0ef52d77602037a211e5c565e0091e01072ef08630056d907fc6d9",
          "0x1b15957d8c8774076df16d49d788b11a5ad4690cbd8022437f402a6b25eb5436",
          "0x02a92a1f50c4658b687f2b6c8afb5323c9b8e3dd17fdcd5c40e17db738a27592",
          "0x0d4cb316f072fc8e2463a4a42d168d6dc04e0b137fa4b57216d1f2ba5e64ad56",
          "0x1cf0f9bf90e207f3a0aa5fc108538c641c40e0952c6f66e6024fadbd2248e16c",
          "0x0b81c03e6806a49a8a5edfc3db4bf78fd4beb80674d0c88dddeef543d3600ae8",
          "0x1dbd32d049764d6ab6f677b89c408f9f4d3f29b5a18148cc8d5740e48ecc9d35",
          "0x16d52bbf838448b0e44c2bf05229c3f741b966790438a2997be9cc660103ad90",
          "0x2c8ef880d5788e5359b97d1be554305e0cf5bd55c293991281bfe5401b9e35de",
          "0x1f007ef167c9b99e948007dd8060857192b9dc992127c235aec46a2b323f2f11",
          "0x0cd33683ec08207c56a80210d9929731d2035264394841b2b6f65c61519cd842",
          "0x0af1b0f70f93bb8f5377db6517c4482ac93ddfaf6051e68fe739f161b4380fd9",
          "0x24d03d522118e544c04d49d38affea789e49d2eb2fddd171613e69f4eb07bb40",
          "0x2f1f0e4bf9adcd2a4f1aee5cef4c2d3f27c9b4824796953025027a37942428eb",
          "0x248a412f287cd3b3448930a1039ab32281958f99a2eec0c2f1a52a65b3e589b6",
          "0x21e374b45da55c1d3d89c6d2173e11469992b81beb2d3d4cd4d16038dcbab231",
          "0x1c2f85c42f6a331092ca033b4ae06ab667cd8abef24b5458eb10e53346694a65",
          "0x29eb555ddd4c74ab9031084127bfc25036f177be8ed62d32ed35973d3de94e76",
          "0x07d30101df711f25364a955a7002fe48f47ec0a7c0acd54ba0cb551c912ec6e3",
          "0x2afaedc7a657941c9e77e728f202d568e4ad1230f91d369a961b4dcd4e15a36f",
          "0x2daf426a65d37cc81125c3d1cca527cb29e9451be0a5acb7e4fc81b2afae5a83",
          "0x0c774e81279520eeca70f8a7b3d7799bdee8371a9fcf902d43533e649c7bf48d",
          "0x0308212a0a56cac99561515c83f01dc3684be8a37a25197b467acdd367ee030b",
          "0x20fa9447e92e4f68025e1bec51f115fb653235aba484fa0dab9cac4aa744d295",
          "0x2f4f647ef450cdc4b3954ad14c7cb1c3e08d140549bc36c82f739293ce8b6245",
          "0x25a6d02422b9e00b1ca5e1156b87b4cdda56cbbb341f82b4a63ecd41afc79bd8",
          "0x0565834c7cf03c8e542f1c3288006ba9f35c56c95470bb86b9668d0063d095cc",
          "0x24a6f88d5d7090b24a151c68aede9f347fedffaa584aa431b2d0e90da3cd4fbd",
          "0x014b0d44ddf5cea576cb82d399c8e4a53e78225b646d25c97b504e63dba4ccea",
          "0x251d320b7603c1c86b6102493219cb1f737e4ff9b84cef7050e37456e8f03acf",
          "0x238c2bec6cfad388d477c55c0ddeab2d3268155f3363bcdefd3cd8ae5f63766b",
          "0x1337d778bf0f0bc001ad9dbf9999379cc08de0ed567568448ca3c0c3555da9da",
          "0x269ae35f7eb384ad1965b82f8c9e8b4f65d3cecfd767ed4408a025ac7ba97448",
          "0x2b01d8797cfb9616e3471921b610dc78c64ae9ab2fe48701baee5e7853ea1891",
          "0x1acc5f89dfc24a03458156ff7b156b22f4270746900d71368b1e8afe9a684cd2",
          "0x0a66d6f919f7dce7144ec8f66cece8dbedc62327e0407abdc7bd71060f8d5b78",
          "0x17978e79a55cc077d4bc92b38ee5d357ab4a6c62146b2a84acd9af50954e8ca8",
          "0x11cbbbe66bb4d957813408009843b2c96cd7b02fd4b449db1895c833a64ad04f",
          "0x0bc7843529e13dbe304210922ae9515a2f8148eaf5e83bd0686112dc646fc93a",
          "0x23d644fab01d806361de665c8bc6e972d9658d29a35e96208bf53f8fb4ca770c",
          "0x048371c6200b923b1a0ad3f008310dbc350e1e3c470d24d3ad23eb41e3d93b3c",
          "0x21207b1d47a4bac52ba3ae9078c265e5cd3b11a126547f2144e501c18a656f66",
          "0x1ab86eda61a6bc9606e65f455c3c48d4136b03d8cdce695e750c257104564704",
          "0x0471b41c6418b6afadf0c9517369b01f62ba78d561941c4beaa1de9827676444",
          "0x1f67ab3d71646c039ce09ee72320b2ad755ffbd7187eb43d5ae0850c923ce6fc",
          "0x1d78da55a4c0c3fd78ef34b4316eddd7f36d5d8db6551bcdbc836ba7197daff9",
          "0x14b37257c1f8852aed448036afe59b3a12159b89afa5e2ecb35063aa91c3b791",
          "0x00b904b1e068cb7712bb63b1721dbf5adf5b6717e6b0deaefff1f2a988b3a5a1",
          "0x2fc100ecb79693aea91c6118b70209fb445c5feae4f6d1c5886018a0efe4a8d0",
          "0x0a9d77bc8f430233b59f6737b9c0197aece2939a3b63c5ac24cad31bcc70074b",
          "0x1f4bdc685882ae1149affc74fa1e4ca614cd9499d75027a6ca7200000a539b9c",
          "0x0dd11b1befe293110cc4f6b5c0de6fae3a67edac4e84b238facb8a445fb73fd3",
          "0x21012864a44b6479d44bdb1e2e97764067df69e076d1e1c310de929bcc1ebbb5",
          "0x142cea93e5949c06c37dac88b664ed36a8bfe1abccb4b3145d0087410a5cf8fe",
          "0x25d074e31dd093d43fa3a3a6b5c044177d43ce7739acb9e5818ae8339e9335e3",
          "0x152368e8dd72e9bd3f00fa47ad0197096599bb5ba3f63401ae9b3689f5afb943",
          "0x224450a6f24dd8427d8d6f9dd985630313eca57d57479ec98ed3eebe3a23e50d",
          "0x08ee8bed1a5338113308a32cf4b8f0a42b9c122cb8ea937cdc1e31878554c81b",
          "0x068471f745758670cada7f230140e09acb0acfc237cf7f31e063553bab156dd5",
          "0x17dceed9a861ada2970318ff8b9dc13074a1113f3076ed7ddee67845662d5594",
          "0x21c951b2849f51336da12e1930cbb2cd407c5ca0bdf9cf6e2ee88a8e6cf36e1c",
          "0x0aeb15bdd33d09c780eb1ab6848dcbc1a18a5c6a1f250cee87cf506d46c36e36",
          "0x037e66e0bf7b7c7f7b00bb5c067215562220044c94bf788c40b4806fe86a08eb",
          "0x2705d297db4ab693a65d4cc73ed80ceac3a6e10d57123701a52769095647bb00",
          "0x0df821b1a387e78f8e2388cae0294e88d0c2dff811425a940a60e0285a71b3c3",
          "0x2959ffca94642766a46cd8340db08ec9ada915d23540688ad1f25e34a9ae3afe",
          "0x0e86b8655306bbde01748175b56e66ca36410f758e1bc02473e4255d88120a43",
          "0x08f94dc12076e1bd3900705e880245a6149ed38f87baffda0a6f4b14264b5fcf",
          "0x2968e4762ea9e6ee5013d96babb250d95f300fd80d86d22cc095de9514590506",
          "0x1556c2665a0e74cc056fd454a85a3fbecb57a23a879dc1cc95b98d9bc497018e",
          "0x0ce86a48c05d429be480b9cbcc220f3a29c6ec865bed10a07835c6fe6bee34e1",
          "0x21e6b5e9a5a5c57156dfb8cf5a8785d2117599c247af6feb577bb44e7524534e",
          "0x0444c6559f15a5d6f3781bc392e88e8ac582e487d60de12cdbc357c9623e4ac4",
          "0x17cdb083db2171c7621198f51b7d189117ab80e4aaab817656342e1b0b3dc1f4",
          "0x0c4fcd32fbbbcfb27be41a9492ec55425969c9142f365351c7d23478fd68b3f4",
          "0x037a47a18dea6fc765e6ce6ce7bd59e3d1103ab69cbf9206d1c2ff4ec0389576",
          "0x2c14bab17a78ba001537e37a630357abe06ecbdbd2af7424ce1225d4a4414b5a",
          "0x10bd8cfbacd505ffd57a2bfaa757ad3e45f63ef37e67dd541ef07e957984e7f9",
          "0x0f2a0b6a66486b55fd8273a453ef622f4c1d4e3d975c34d538cbd8440a3ce9c8",
          "0x297b4eb48434dc5342e4c9a262c200331480a02109163863805bb70fc7a92614",
          "0x22cd3cc552b8310954b62b62d4f7a91864e6b6cf79f55f244d384804946a77b4",
          "0x05cf496eadc8ea0ccb36502f443c99b347bf7023f2d7fbce512e1c58045fbb2a",
          "0x1e0ae8b082d3726190a6878f4b8889e0b6297d27de3f183aa9a9f2cb2abb90d4",
          "0x2b282ffef89e1c3a90c359bc7c80133b9f634215c30c1db82a095012793c7c1b",
          "0x13bae7e838c638a41a9961ab81520f408c9921070d9a02a7fe5bfd1da1dadc4c",
          "0x0cdc320eead70bf0db57965b29f9cca28826f6c44d824f7f122e430aa4e746cd",
          "0x1b94ed891e3a73e1bcd6b7a9fa336b485a5a83e52d5db08b704afd8d48136657",
          "0x2e8d765a70fd39533f1c456db12b420cac0d7b086bf19596c60cd6406b076c67",
          "0x2f69220fd9209bb41b0ef942bfeb31137088ff9a338ed283de9ec3a8850e96be",
          "0x1506e9fdec14a9dc03eb159d011f0baba652db364b0020f3485da40ef8079ebf",
          "0x2e43093a060a595dc13213ae7211c041b29d39401dbbd4e7fcb0341914492a08",
          "0x17426eb02415f1d682735382450efc76a05c6a0218671ec4fa3ef2d03980db21",
          "0x22a8a8f47529433cb471acbbceda9b6dd4e9e57121745b86577da8d106171e3d",
          "0x10d066af04e7708e512a382310bd9a10cbad751a721c660ed0f807f1693d6826",
          "0x1322cabd21b8f9826da84816f3599f20a3324bf47b44abeca3d8e6a26bf64c8f",
          "0x0e9033298b7fba81069ad708a401ccaca713c122a7907b9d2eec39ec1e5834d3",
          "0x277a069d3fc5701249012a0fc2d96d70c58b8f0bb45a1d3932051d4541c9be8b",
          "0x2b6a4d2b44646516e0511d03595b94f5f31b538c8445562a5f787cb7916238de",
          "0x1e9b7e897f636c286ac7592181135b3061cf02de5eb4c3344f2b3246f17459d9",
          "0x089d5576bf0677940ec8531e33761650a38edae669b73ee5f704c018310458bd",
          "0x11d91cb6a7c91f3a3778a457bfbcba977b28eb08b850e47260dbb3d205ada63e",
          "0x079ebc334aa377cdaf2bb057017b776ad150adeb27ad95031c1e6d6e4585b9a1",
          "0x0eeceb66fbafe2552212467fbd7ee2c535244642c87c54efaed43be19344eefa",
          "0x1189bb18157591e582637275139eff1ff180217439babf0369a7d6afda53af00",
          "0x0a104e1bc5aef5ba3362773b15d152a34bb66fcad5169061e4c74f42f8082ed4",
          "0x12aeabc55f0a0a7394844072432e9f1095a79e2a7b8765c0e7f93721f5eb8feb",
          "0x2d5fa7e448eba0f3f75b82d155d2bfb467c11361536d61cfac1e9eaebf9f9960",
          "0x11bc382ad6f3998ae12761764e273e8e57de5244008964ddc1ce7d887b3ea15d",
          "0x2f9de52e1164d578244301dc0f52c09dcfb7b12499ad768a4c91af37f1fe999f",
          "0x24a160dd3b3f19071f231118426515e7f75fd3fd4d98479d855e88cc40f2a146",
          "0x2562dab01972dcd2307417f8356cb096e5a52b39898d7700c9082fe661ab5aa7",
          "0x0c71fc8544d8bfe1eb57eb8b19344825f2800e7728874c0d4aeee09d37fc8018",
          "0x1c38cee709ea57a5433ef05d4f3d8fe85d27595ab5f3bd5b1e818a76b17edc8b",
          "0x1602213816c60cc200e8b2aee509da4de8952ca6f775f6951aa176a6cc78d10a",
          "0x09a046c67b9802554d315821da1c3d1338311acaa29182226455685b3a6a1a04",
          "0x0a2ac73a3b40f2e8d93b888e15ad9695a07d56f02d172fafdc326e99ed94475f",
          "0x26497f1cb3ed83f61c32795f5460e2320a0b056117fe2d4868bfcb691acc9d23",
          "0x1b1a886b957b5b7af3608333c34da124c68e137697ee082e21d6e9f534adda3e",
          "0x1a1cec97b3e63763610f3fee9e5f884313d66f3fda193985ffffa26388a8b536",
          "0x24eb5865c2393f7e9d6da7a0460f9fe0a1112c41137007f71ffc53e90fd2cd5e",
          "0x05ad739f4ae7385d18ae961990fdb8ed3e808de0108cae743d7995a23239bfed",
          "0x20ea4df643c31b3aec0c8c2cb444ffec0f2351841827a82103a36fef81c2b5a3",
          "0x07e426d7cfb8d0ed8f150d76e11c42bd7d0d0be868f7cc80740d14d6b6d985e3",
          "0x0c284170139a3d32feb893e2e393be22fc5712b4b134e117c9cbf91c06c7a156",
          "0x198e892e0b6e96942779fc23ac86ed3eaf5c68c79f8f881338ddfb381bcab3ec",
          "0x04f7274b4c460cc0d5d78d6391700ab706b188d6a4cbcbdcc6ca631c617a4146",
          "0x257a207c9af017f50c24c8286e99a006f5a9a066997fea4d63cbc4479d153cfe",
          "0x2f9195e87792cede31f827dd408160697c174a84a9cdd07cd69b4443a45f0c81",
          "0x02c32457f1c8a48108f1c16491e8da1e74ae1fb598642acebb76d0210d0af7df",
          "0x0d16062ea9a5b5184ae022c568e887e2fd31c2d2f1320acd915b84df1cd77c3d",
          "0x273821b59fc23f585f423e16c5d9571e78b428e446adaae789c159866c15a9aa",
          "0x28d58138ca8e1e1f410146ec8401796f7cabf49d41e59f4b8ae942dc6fe0ac32",
          "0x0cbbab4a22963ed50150ae37e8ae9cc139355f83de4f38f01179735633ae3f85",
          "0x2f29b839fb5759272d1519a17df03310eb9afab12540693b781c9397c0da489c",
          "0x212505f1db73adadfdea6353b38b8574fd52de8ab3cbe3310f5262a9496a575e",
          "0x0511717ed104198d0b67387b576b020b6b645d94f205f7005ebb04161ea0959c",
          "0x2cd17a3fdff1b2ee153b65554fc06a4edab7cb2d870c1cdac0e9651c21593d80",
          "0x2421eced65e40f5bd7b7ce147ab0845888853ce9d9e90242ef0ecbe4df94f4a9",
          "0x2b7bb1c13a605e06226271b1567d8070576b71fbcfbe0e8a0ce6ed9a60be4b60",
          "0x20de93b09b10f6f40d2960f3ae7f703d4aff7d4e2a309481635693fc1e7b57cb",
          "0x15f39da6947d0700036090111b9463cd322712f5fc0db38a8098abd4d3fded43",
          "0x055a10c5b2e1c3d3ac97853d37acc7ac3201c3f69ba770c90736e59910299486",
          "0x0f86f85857f2f3bfa5fa407678359c5e4bd7f68e4f8e4af22314df5ea170cb05",
          "0x2d57680dee104eb6887c77345eca7a8c131022a4471f88c54d4db9bf7a18f475",
          "0x01d25e7170e6b92b2bbcefed98f7ccf94c20b97a546408d962e48f6adfdeed55",
          "0x11dde898034df5d0a50a1067fe3a5b6e9d546b4268043f5998befca980271e07",
          "0x0d96e451da1d5351d3848643cd82ac82a91d297dba610e196992d08045efc565",
          "0x1ec50e2f05af8bd16955612b7dd0a22ae046db692a340f0b814b472cebefc7f9",
          "0x12e7a565e645e185f7c9e00f06ade71736d990052e72c97540d79391224c82a5",
          "0x277d5ebf33d14750cec8a5df484fcdb392db7981559aa350e2ba70b3565632ae",
          "0x227a8c5c6b1f1a259d5fceb57d7dc834257317a8c1b94209c3fb86fd94846a89",
          "0x2bcc414a720c85a42f6ed14bf7d1e2ca7d3aa5f7d61c4ff5d1bd1eedcec09f7f",
          "0x1f7864a729e70f77cc1b5cd86c193cbaa9410070863d5da37742d665e2de3188",
          "0x2add533a1c14b4ad2a4ecd780397391ac9d9ac8068584c3ae69f56a9e4d72ebe",
          "0x16198d9581405334a13e109b04d9d1f5638a7df278300e56059508f6ef65460d",
          "0x0a060a2599eb696b43d275c43eab0b3b04b461cc4c436cfe8b1748d65d143379",
          "0x302e7b6c0abbf4f44b1d799791ae0cc857007b28a3748798965cb4b281822b3a",
          "0x2b8971547ff17281a93943ddecb489f6c091e96ce505b7ba30c148e036b30963",
          "0x21f67c406780578d1e13c001eb36a4dc2b5624dc3f12b3e4a6a02570b3e84cd8",
          "0x0caeb5041b8532a723d9c68a990c083909ab94da865e673120f48846ac77bfb6",
          "0x0d576a5ddac69399f06fd5e247417ddb73fb47b533400bc79a35e18f0a51ad86",
          "0x06dcc4d20da7204e7e8acb7404b6b719cd1536af3616e994887b033125614d53",
          "0x0d0ae80d2c03d27ef6d6ac6edd57faafb88adb18cb43cb3a34052c92a8a0d6b5",
          "0x02217b24cd9e573c8fcba46d3046d830ccfdbe8f69e43eee315664c465fb6b5a",
          "0x1b037d4657b2b3c4136ff83f2de746a1f314dca33ee2b92a806636e8509694cd",
          "0x2be7d85266892fa4d49762ce64ef84575fa3bb6212df994ba9fbd4e2c3591f45",
          "0x2c2ec68b3fdbe4b10ca34ad1f1c9ee5296e4e418132bfd82fcbaf437210dd417",
          "0x0356ae0ee778d427d6a84545bf241a684fd562dea92cd30b0b75bd9a7880fcf6",
          "0x0ea67bcd02a935ed5631194f06968434fc9822df791ff6f6ad6c402a0beaf184",
          "0x188bba4674c2e1a2b8d1f1db4c2b3de7ac2f572e984804acd579f3c22e0e4ce8",
          "0x0d821e605046e0b7efc627e1f2dd84177a66e62974bb7bd3ca79e142f70742ef",
          "0x19bbb44064dac933d1074ebeab991790c637a4a34c33d1c9ca0ecc9559808659",
          "0x0b3f351b3bccd96bbca3453bab6d10bf252380a1e3b3ac2867b214d063b02d4d",
          "0x1f657838a4ddf2b0639961c92619eeaf6560243c0115152587fa3b633bc7b14c",
          "0x173966b03236c921b1b6e4e4e77fba43903f2b68bf83ffd2b00b2974cc4f4c24",
          "0x255adfccf4dacfd943393fd90822fb3e92292b150ae2205f9ee3b6837c687c94",
          "0x2ad9b647fa2c5d97d6411a5684ef18312cedf6f69fdef8f68afe434442487a2a",
          "0x26c815af9baeadf098c8be65a9b66936d88a90f47c878e46d55aa41fb23a00f8",
          "0x215300316d98fb3bc220cd379cbcf4b54133e613ba42fa8b48984667efae1053",
          "0x051ac2e037a8cb84449738040cb5d92bec1ebf64e1a65138c7f2d862aafbbbea",
          "0x1b0cfa4c9f7b4aec9c6a709a106d177fad8ffc6ac364914aabf33627d1de6a32",
          "0x0084f5b80cd3806bfd40f7d188bde0f5526dec4a77bca0449f1101f00aad4a4d",
          "0x2fd6803e516e8737c45bf2f40736831ebed2b6e7e7e643e0d4c67b5e51099d17",
          "0x0b17f732c6d938ac7e85bccf9a8dd401272d7d6d623a8e59ec3ea67e2aaa526c",
          "0x01b3fb88f6cab80f3af974dd496c9fa5f905da9a079017bc5299080e1d5d4f64",
          "0x2319f57279981d0a12b06f2f7541826affc4e51a44e1990fb3015ddf9a183715",
          "0x2f4dc289b5e7f23a370b0f61053bd82fe4cbfc7d1d11d13f289efba3a3c54121",
          "0x1b679b734eabbe6f8c42ad18dab54de081c89d68c708a81f8fe61438904c2ab6",
          "0x0a3453c08842ef3080b3af74ee8e799bfa236790cfda0023b588eca466f19216",
          "0x11c89d2f5498a788416d0042cefa0d5442dbe55f21226095045168139344f0a2",
          "0x0b3f2c98ca3061f627213760506fe76ffdd88ee755643788837c18dbffb68ce1",
          "0x2575c71fb8acabc5cb513bf66dbd4a4946f4e21a7b2f1a4062972a08425a03b4",
          "0x1dec0944dfddc9cffbb55c1902f845725cb92e09545749de3f1a118d41801560",
          "0x2532b96a8b50828cc619ddce80a2e9930dd8dec6588f52ed5c3e1980ee030642",
          "0x00eb3e072e9fc2bea9aea03cf45eb481c4e6bd67091f59ffa1f4602fc399f21b",
          "0x28a6e7466dab1f493bfca1991bfb886c2ef920770accabec486b96422698612c",
          "0x18b72ad6c372bb8b3b52ceb5c65e9d78c04814e3713baa81323f2a1956957b8f",
          "0x2fa98e48794fdd4cdba8e11d0cde18ce5b2cc9d0db7f65aa1b6c8609918b2c63",
          "0x022d6d05abbab403b1327edce33024fc9183aa514f69d1672d49ddbfc9e063f7",
          "0x22ce0a2387a223228a0a86b942f135a59d6bbee9f1b96d3fb3a151023a67fb73",
          "0x0a559e751dfe1415e40d0227d7b3dd1f188d99d935596d3dec2c033de5a22d2f",
          "0x13202360f125ca22c281a18e21a7ac10b196153236f86c5968b31ab50c282056",
          "0x1e85baa376985015ba63c3a38e7817ab0a39cd28e237233f4c1be35632fc72d4",
          "0x2450b198b045e4f0cd540b0b74de5ca56d85da5fe59816af30806dd2e036c5cc",
          "0x1bf04795a7979533886f7fb47d5a0b7edd2edcc1091255aacb96efaac6712b6e",
          "0x0f126ed9490b69935be97110c476118d00c8b07c586ba04cf81ae699607e62ef",
          "0x087ed4752046c22599473251c53f69b817b08a90f431417d9bce87ce4fd2bc0a",
          "0x0015185030c12d8cca42f20872de699989901e25569863a4b5b3fa2682dbf9cc",
          "0x1b424b9546d87ee6ca28fb8197a2186b6e001556b08e19002298e05f1664dc84",
          "0x214ba23a67a222ae9e33b4615a31e7b09fa911e18880bc379dfd20ed1177eb2e",
          "0x186e0edc096c6253b179102a7c9ee1496ddb6060c993fa9e83616a7daa6c2243",
          "0x151bc9534ec5f36cbacdd7bdf6176a60c9bb7b6cfb26859c7bcc0d1f7bc4dd0f",
          "0x28192f62ad97323e6cadfcbb9a99f5bada68adddbac3a4ddc18e69b95239b166",
          "0x0825b1232e6831678f691e7e1eb27888439e12e7baff84db3d18b7bd45172b18",
          "0x099e93500b62b10127609071e75f4c54cad78732b48596d16b44eae459a59fc7",
          "0x0dd5cd3a64731f803da7873057eb0a49a2ac15bd7057485b43d47340a202abba",
          "0x1d4cf162651067f82fc2124f6d674daef03adc3da75822bed2b0d8b690b6a34a",
          "0x23a86b440d5efbb0a26a76a9993b6ec01c33b46924c3f601ed79a87f9c464068",
          "0x2c983302ac40a26cbb323eca868e9a757e2a66053bb081bca55f55635168884e",
          "0x06e98d3bafbdb42dbd2ea2fcb9698273980bd1c808f1f7de799632a90ff09b36",
          "0x0f2ebb91192276ca7521084cff7a025fe53e14eb884989381d79c06f9fa9084a",
          "0x0b67885ad9dfdac5f5369f6e3181bcc79081981eb6177db27e5d6f6d851d5021",
          "0x1c32e21095beb791e1bc785043bb33cd94784b6231ff8f85a9edff92f91be4b8",
          "0x121818dfa76d98589c3274fe2d702da83ad88ced9df449626506be1eeef83264",
          "0x2832ac9bb20b57ecc969ba4ff5c713c40622fa6b4ebed066c655be21da02410a",
          "0x0917180fbd7a19816e8fc3a45fd43b435bac6b2de19f516b37641a6b1c423434",
          "0x1bd85f4c4b11ae715f45a17ba21ddbdc7d1c3ba680fb978a1b2ac325bed411a7",
          "0x0d0f2a86fb0d48dea88049d2bcb667030a29d721e4c1776d42d783bbcfd22af1",
          "0x0460af88f6d11afb5d191e488712fd79cb96116844491b4277ac0b5ef19b4432",
          "0x0bc1783c36accadd4fba3d634e9f72c5e9025f7784bd3efb8dc72096e2c56032",
          "0x0eefb878f6eb1589d7a687e94813d9d8423fa50db34de8d5ebaac1302e6f45d6",
          "0x01ac403196501f0054fa8d4b566cffdb7f81f429538db9b408a3dc20b92c11d5",
          "0x1d5bdde7d64a63bacc2585b8a14082d8d35f3ba8c1e857df1f729c52e6a7e5dc",
          "0x0799dfaff2e7d630414a7ddb0fdeea103e1bc3ceaf3ccce077c8733869e52b75",
          "0x0fe0f816efd74a7eba5c8dd5e7a8943889962492f14353e1afc78efac50ed96e",
          "0x072561c67ad2fc0793821b50518d4b5d8ac33af26da6d2ce77cebf80292bd27e",
          "0x2891352ac60ffb09e9c88660b8449def9986f9463f5a81c615a7cb9f4be0724b",
          "0x206e9efcc46cae2cfc7e866cada0a4c72c29f235f044d56c8244a92e882f464b",
          "0x2e7c4493e77005f49407f2d5cb46cdd6d04f22a061ac8fcae04d2d93d7c8dfd2",
          "0x0b9e944d5bacd889beef5909a139f5e7b7f23a1ce7a1e55a6c4b9c382a511524",
          "0x2635b8471126523448d0b1bce5d8f54ff5bc988a0a6fe53dca721304f8f622cb",
          "0x10df73bfddab994cdc079216cb585ea8530c13da58d6381ae0c517f2ddc88e02",
          "0x2da54f7a7bfd78f40c98e6ecadb665f2644b0a9539b27765df23eba241fffd7a",
          "0x19ce35c6a104ee3975d4a94908f5b1e0444d7709bda7c5fc59a527cb2c166509",
          "0x1a47dbbde2d5004a1be0ed7c21f57a388a1c86f8b4666d4d118ee99abc115a3d",
          "0x2f037e73c7888cef9d7046e58d9988837be8faca34c58bc50f021e8734c5399f",
          "0x27ab727198d9b7a62e0d99b2d1112710102464c3f5fa8deff2762af8a8699e7c",
          "0x301176359be9b665abc8dda6783d3bd7730c4b4936a1bd83cc5574c694080668",
          "0x030e87204cce403ee4e92e0507e8e99cae309599dce18929a9430100fc5c0869",
          "0x218e8653761694cf49a1f3e275ece28866a6e9963c3ee6eea46c2b193688d3b1",
          "0x2b219687a4549eb17e29db9fccb5796a11ddb6fb271b5a547946f0de32698a36",
          "0x221e784939d29eb5442fd1612b30a58b9e555a398bae96d6a2d6d9a616ece0ab",
          "0x080fbdb9bc4b4e8a83b2ad89383b25526e330678c057f7c34993f27eed2e14c4",
          "0x1601e657a22b8a280d4452d527beccfdb9d8c3edfcb7bd0372d0df43e93e9123",
          "0x0652d1d878dad9d7f854e48066531fffd4773e8a5c61301f581651b50e359751",
          "0x10db881688e3db58bb608ec993d36ec8531ad3ab580e65d537f4f37e4da26027",
          "0x1d8a06b51927f0379250e7359f9dab93aa9ccfaf764dd70acccec7177a4c7037",
          "0x19cbc2ea50b7bfbf009f709d159aa9ef2a2c0f68a5cbad1f5e1c99ea2ca2623f",
          "0x1a5279e38883b53f313f86ae7ebb07d7bb0cd658be590aa3ac3b413415fe3e8e",
          "0x1af136d53cdf676c284100705d04a976645234f4397140fd85a2d88a484eab0b",
          "0x0db8af764eef50bb1ddccfe0583ff730088f3e9c2c555278a3c9a7376a893232",
          "0x1613c14bc86f95e25e05f8ec72c8ff6aa207bdbaa33f912808ac693f137d5d51",
          "0x0fc47ef92f10f79d336550ab3e0a7545c74d2d3e2b9f97bcc43e4783d1d98cf9",
          "0x0f2cbf40b344707cce101e7797d137a9e8b011797c66fe6fb0474d2b711241db",
          "0x2efd5777f8ca22678839ac60c1a308703094a9d2be4413c817c751dcf56d8e1c",
          "0x2ab4e3413795ad9a695b04695db31b6b0ad0bed91bfc33739265bbdc2805b180",
          "0x2e3b6d8584e42666829c0e195571c50d7fa7bfacec12bad7afa242744e00c039",
          "0x1833f151de5bd86ca68d264d5de5d353b8128a96e3813ed2cd00e322dc91c8d6",
          "0x0ea82c252d8d55499ad63c61c47419c8e8e423257732f9f686f6b106d7daf0ea",
          "0x09857874422693705a7c9806340c6da0777f4571e92174d5f82c07b91f2c85be",
          "0x2772ac7928af0a79931f88a87e634dd61facccf610cb947724e7a2110d501449",
          "0x2e62239b790530756ca329c63e6f4338e2631ef4e2cc67e8046fe2e886f6769a",
          "0x0265bef6b92cd962298621e2609c90162dd587f88139bc60d74bf363c6712628",
          "0x24484c0c291379917d2fd8b48439fb3d70b05b155e8bcf330a56b5027cfdbc30",
          "0x2b2d449a3ab55ab7ee77d37759db58adbc91d0d50936538cfb0173360a2bd8cf",
          "0x23663d1956fcf1a723085825cc67cac82d3ebbfd0134f861ab5529e2a4c7de57",
          "0x28fcaec0fb6cf43a573261d10ed32c1dbb4b9975643fade00532c1bd1ea0e411",
          "0x0145c6e2418185a9ebc72cd8dd0f53dc537851eb5a42eddc04caa52cb3ae8abd",
          "0x167376a042099efae1cd8988e02c66e8cfda378faa64e85626bfe4636f3c580a",
          "0x0cb735de0e612a615759528eb278b1b34107c4a8df58ea674ee7fb719d0dab99",
          "0x2d67bac6616cc0464d4fe907e5f68f0eced070b8811be72905bf7758f3ebe884",
          "0x00dbd2a2f8d7fbf3ac403b1115523112b7f010a0adf6ca584d7ae03f947d216b",
          "0x11a992d7e8205757ae36bbabb544e843b010fddc7bd5abaa82dfddcab3f85c7a",
          "0x230d34341246fb715b784797e9dd8bb7307a4c46e2f4470d2c319340fdbe0025",
          "0x09feeffc218aafa614e8fb7dc4ec786ed25150ec1d3507b3a7170b9266ff6941",
          "0x1208ff94f1223bd249daa4e3a0266e079731f7c3f998b7fa707dd9fe53833f82",
          "0x260ca3cc820f873963cd26df1b8ffec4cf349fabe16e81f2f973663466802da9",
          "0x12655e2c98ad35ec444a134e55cf68dcde68f14a7b734b3834725308609bc854",
          "0x290097f2c047a3dd6600b706377d0e1c46145f3a9e9e0ba6d7ccdaf7b7e05ef9",
          "0x02c62e5bd65381e0972414ce0090a96c22b0555bf7ef8b2aeae1b984808d4f81",
          "0x233c642308dbf783701420788b19153dcf088a63e8da765c5182649424926fbb",
          "0x2b7328e368ed4b7a62fedb9cbf50104557b6c3d9be5d0c2745bcc76476f8ce50",
          "0x1738ea94cd4331c7b609f42f27c4dd57d8db78b70a95da0c2394c4ef18992855",
          "0x2e902d182a1fe1f3d40da28c358c7e89076d2ddadef80e31b9895eed02ca21b8",
          "0x1683ff7e84a5a4f1dacb206fc44fc92179e666450c5a65f54354bbe8676f585d",
          "0x132958454e01c1fd2bc43e02424e1296b54b55d3dd3ed1e1cbcf382790d6254f",
          "0x0deb48b7df7379266b123e0b6d83a1fe031807f1ee37f7673738438aea64eb00",
          "0x2c683489b3065e4ae5d7106e18f4553762d58ccde006ee96bd691f140b15f386",
          "0x1d7c17b521e158ad420c9d69237f4ba6e8152541d878e24876415572734ccf32",
          "0x064dee7f04cf564333fbdc610ab8bf68106329eeeac1b1a59614726561db5bef",
          "0x21e94e5d9adad9dffcc186e0310ac54ff38b0a29d3849fe384777d0048abd660",
          "0x16ee0a0b45170d89c5d91557ead0b253c39a842db804196bfa07044ae6e2b4dc",
          "0x0a7009f825b6fa180455fde8a901d42a28250e9948807e24a62805388cee836b",
          "0x08d5a34853ddfb099fb0fe1df7460ce4a8e4952a148da641d0e15f71efd2cf68",
          "0x0fb198531bcad7bc91489abaf1345a3ebc5f5ded5b21c1d17237cccf9b1a4812",
          "0x0a91f50c72a422f3f0c06cfb1401dcade6cb99c285b0705542fdaad40e0b5124",
          "0x2db33b34e5d9a988af35501af4e137c4717481b673292246d98e7728a13bc924",
          "0x1b745ff9c6e53c275d378f0a69d6c0d55d598549cefbc7669bb63a3d4100ed4f",
          "0x114554e3afc96df3b663c62243045e27f6a24a5c26b875e7344014b2a9858327",
          "0x1aef968db4765b450f098d4e1a6210b7165c53ef336b3d96f55fbac58a542bdc",
          "0x24bdf5ec4ebb16db47837189172e8a55b36038c50bf1f38cf79055279225be52",
          "0x2ae7c4a1655975ac7052d101d1346efa10fca5b0f13babddd62dfefa980ff78f",
          "0x165cd429a3966d1bceda614b06d459e7a0e0cfbe46d63f25521c9af74028a8f0",
          "0x1bb3d4b2f67440a5fbe410756945b7bddca2ff1ded3fe2108d125679097b077e",
          "0x18695f0185440a5f35ad74a5451da6337eda049d50b9a5d7bb284d52f9033d2b",
          "0x02eb1bdb4eaa3fddaa625344ea650afc460306e0e3d4bc618f81e9ed73b43a0d",
          "0x1de874e713e5c68d2f56d518f8eaa275229fd8fc8a7e112d7d1a24e604d3ef83",
          "0x1e5a6feb4dcefc2b68a5b2c3d0664daabb1f0735ff2a2d2b68430f4d39b109f8",
          "0x27a4284ee0c6f73ddad02f9d499be90fedd32ebd7af86f44ac50e354f743c782",
          "0x0099d8e9546fd891bbab547a0ec1dc838cf62126788d85b2759774d9de75e777",
          "0x3043a7ea89d1e4fe14f1f91b584d00c3ba79831ed8d8649b5bafcf75a00cf759",
          "0x0e7aae04dabfa34859024d075a3014e78c9096363690f53eb0e99b7d628897ef",
          "0x10fe0a11c4030def725ce7684fd8724e06d6cf0d295db09b4199eb3b6a9f06b8",
          "0x168cdf6baf5e970e1e6bd7809931d487654b42e9ed5d8d92a48f1dae8d2b4c23",
          "0x0d241d33c552c85556e62a7afe49e5a7128fe8aa210772bbae5957cb60a239c5",
          "0x1e25c0e00db77c69b87d5bcb95cba934b776ec23392d8cceb6c392afe5961f3f",
          "0x22b0e52f766a702afc38c2c60161e352d8803f920431acf9410f7fd11e9d7d32",
          "0x12ec9b91f395f1665567318bd3fced7a752ca01ee0a088138c40549a31164fb6",
          "0x299c8fdca8918c24daf876812258a75527f1b5d1741abd71a82eac0e1fbf20d0",
          "0x0f428bf91d4d31184f35d770a5475debf4353ce7dca9bc22763b69943344f235",
          "0x1be0549a5470c9429f0e1b6f9482f3c4e752e89c203c25b624817f523a79e9e9",
          "0x0fdcc3ce028e96b21f91bc87ad052d78e44ca6c96179ead64378cd356dd2acc6",
          "0x136a6a9843fe104838dc085992c0eb8e309fd3d169af68af8058dd8b605eaa13",
          "0x0584441581ce63a4ed2174db35365bcb01b93b2ec02fed5b6ced7314a127e66b",
          "0x1bf9ab90b1f5cf6ca9f0195bd4336e68135a5ae26b6b3511cc906156b621cc13",
          "0x2b0bf6b3cc9cf023ba13dc6501f00a742d44d26b66e9bd7bdd96abfbb33cc7b8",
          "0x19d18619bb73548590c00c7d02ec94b52bb8bbf1aa5c2ee06e1f8e875991397f",
          "0x14909f8c8920f79d4686a14a1aa6e03a71b84d3d9169fb7673317aa6b28433fa",
          "0x2397f311f598d249e6ccdb9af6ae5beb6f097f5a350886cdaf0691d0a8abd8f6",
          "0x0ac2f7a3c2e4a6fd58f9e502f9dfcfc904608763d69b94ea50288dd7b63b3842",
          "0x0abe36a7048a34d9110a463cff2fa23b5aa0966a3c58d3086ecafa112f5001d1",
          "0x245ae4790107afc9b9bd1f14c20f10d8a745f077eb15a960e5d7af379a18dbdc",
          "0x14ae110b2829126250e1d694f08436ee0c56d230b489d08d32bc3503e73bf4e0",
          "0x20a0576ebdef08dbe219160fdd1a7e75d838770c780a628b1cc720f027f61c6c",
          "0x23a05ca5b721e48da57d373df376c5252f66e9f963c697d7d8e4ecdb55ef833a",
          "0x2813d89a8a9061c300348cefa9447f1a96343f329f65c4e165b5b1387c4c64c7",
          "0x2bf7ee542e32e28081fabedd92f4b18191bbae48a436273dc04916ae09a64553",
          "0x25c148fb26cfe4c3d977b17da068fd67ea89cc51079fb5d0cd3654a9188b1385",
          "0x1d3dd23e6048866f0855741903765842756a627897cf47d91f9f2b1ec8ab2bbd",
          "0x0af7996cfa4b51163b4ea8ff49ed2ebf8a5e56a44687a8de351efc172c9bdf50",
          "0x0370dfbd98a73e24952f0208eb7e5bfa83ac7761d8c0b4b53ec669c693698730",
          "0x13aacdbfe05a0647fc158a1306803cbd1ebf8d995d5b27bc5c3a92d0438240f8",
          "0x050fb4ff23f5677d7f42b0c8184c224bb69d4f30579a6b8e9da5d22a4f7bfb26",
          "0x0cb2f5cee85cc6e0f9becb391b7edd42cafff7c34382aa9e19de473a2c67e393",
          "0x0a146430a98a85f906d31e8ca7b2757570996dbcf40a7aa8b6750667b96a2ef2",
          "0x231efb23ddd7cc3485b8bca812898aefc8095078e547151662abba0cce1f627d",
          "0x2ebcc008ed0ecd551829656c73b6ba8d8b0eef871aefb94a21a3ebac83561350",
          "0x1d2902e8b627c0443bea9f8aea5601b21dc0a41dffd98a1516761d400f7b379e",
          "0x277358dbe09c3bb9570889293f795c41d9c2c90425bdf1a2a566f9e4ee46819a",
          "0x1fbf692e87da200bc4ffd4898893cefb65a43fca504f6f675193f8d63c6039bb",
          "0x0f3b881fb65b30fb2f849620e74a0dbf593af33bb80a15eb7fb88a09d97e0faa",
          "0x0a116fa32c97610866b3a93be3919080219be6057a4b75bca3a7bd7bef88baea",
          "0x30384a31b80c532ecca12d2c61ce4eb98098a754079a69b0e44faa0a3beff23e",
          "0x1403e729814addbcf809e49a5465ed6ba6e4f0354a986cd27e9d03aa6a9fd181",
          "0x11794627e6125ac465ff2ed71d959c31860aa2d8eac3fa411b68152bc381cd24",
          "0x070354e3713899b38ad74a7f5e3154ecaaa27314b47f85773b6e066fd4e63dba",
          "0x2d1e01fe7b49660ecefd093b5ab269ae2030fd7827d6430c2bcc53d2800631b0",
          "0x11a01533e3713e1f38f94c3906843323c0c88bfab803e135042ba1b8bceeda3c",
          "0x058e4bcb4f7463bc6d02d6c40d7e858b0e0aacfc3a88dc320187d8c5a015d159",
          "0x1b2ad38762c6918201e093d2bc393f9fc50fd5f45ed943a8f11b269783335e74",
          "0x05ab9d393a4bb7eee00723e8de668b2404a162a0e17577a6e55b8025b1814b0a",
          "0x04058adeb5ade9a9c9e3d869edb70322278b09ce1219ba45685bf8f6d69ced77",
          "0x21a1c7c62cb8ece8d3bd434f87936c3a1842432f2f1a6c66101b1ac8d11c9a19",
          "0x2028efb9d44e5af38c0c1ed35f9cb843f38184ee0fb9f1c42121210542b00100",
          "0x24b0792d69eb31364cdc8b74c109223c1c2d244404c64a41d516076ab0240ca0",
          "0x2179ff52ea2032efd95ac4e7a37a9c0ce5034d3cad366105341e16ec7483da19",
          "0x29cbadb37f773c6dc580cc0c2ebf2926d598a19fa41f881e12cf4a5edfafa13d",
          "0x2b892f09ea9f60fd7204852f6bb995e20c3510648bdc400b97dfb7cc4d7fbdf2",
          "0x13badbd0953e09615a4e13d4b340f4e1bf2a03a2df5e6b8faf69d8697990c95b",
          "0x2b8fedf8c3662b0a10576cedbd720ced69f862124feb62eec83c7150d9936411",
          "0x02b3d62d6efea0a22e2d968f919a8bea56791a37b9f21d03f95185d9926c72e0",
          "0x07037bac8b6690794dd0907f7e315baa525edc729833c89c660406df21bfb652",
          "0x2cf9ea47493cb7867b86942e353487cd4f4cb3cd33e310e9fd4bc3c3e6b5242d",
          "0x303f5a8faaf2a6aead780f2a13937d75fdb4605d8f5a65522426442906edac25",
          "0x091b628bdfd4d49333c2a9ed84aba3ec2eab336a8d91a605b9dee9af0af44f26",
          "0x01f468f6ef5c35d3c95592e27b1de7a213878a653685abfb0d2972fb0f7f9e32",
          "0x1f5923725d991b36de8557d299cfe27d8b076c640cc4cfffce57e9c7477b89a0",
          "0x0dd5d7b1d0d52266c387c7e111fab8eac4404b207bc5e216ab64b7e10414a6bd",
          "0x26ea3dc5cbd01be1c06cec04ef328a7d266afe33f76bbb26da8457e966351444",
          "0x067231875a3d536b4511d0a0b21b7d24958a4bf1cd1eec4c597c25e3a00acb36",
          "0x0724bd4d523a70054c995241b67f4aea4e669458add9a6779d89cf3d3bdd9da8",
          "0x1cc9dbf8aad45d67178c5b91a0aa44701628b24120990fe6e29026a0b21e9ba9",
          "0x2b5841453a6653fd30c05d2581dbfbfac5ba89bda78842208e24a03c46fd32a1",
          "0x25a1bd92c9ca10226bcf7fbd9b1d8e2b227bc2dd4e3d46e133ae268154674f8b",
          "0x01c352fbd922724897ab79a60e47e5bbf3c4b714a907c63f4efcc5bd5cc6e827",
          "0x05e44830ec170a4a5dfd9de846e7e422ae9cb98c6f499bb67681fcf60f7e82b5",
          "0x077c2736ac2d0a070a1a1c6e45ea9cc526201d668ee404096b69dc85086ea9c2",
          "0x0303f34f6aa229a5228fec959544f831ee71a1137dedb6a4b76443011eec3149",
          "0x273011559d239160d463a2b9890096ba4558eff7b6637291082c5eaa9ffb153e",
          "0x0c4dc5efe016498ea823fad5e12d2e003f2cb4ecaaa7f0e02919626e58afa7d6",
          "0x1cb990d809fcea3daa8d03b3bcdf147a692ff7a0d8f0c114f6a080daa5a3ac12",
          "0x1a0a3d386c26c3d467f50ba733e6d7901a59b7453a4a34056e92e771b6dd4f6c",
          "0x20d81618c0e6ae5ec303cfde54346271041634cb3cf22219f999a54bc5033b7e",
          "0x0a39ba8f57c793fe65b66907cc656a97ff523817cfceccbc2c2de5bbb8dec0cb",
          "0x0de056fb319526dfec15d502173483ea35e6057e64949fb6e7690d3c25923f6e",
          "0x03f82ac12d5be639974794fb3c2322bf6e61a262c7b470ac5e97d20a4a4d8aec",
          "0x0835ac61001ea7950d80e32fcc20bc0c7197d12abb0b5ed99392101390de2a46",
          "0x120efd9c0663e0ef3b6c596414f018a73cb553266fbcb1564452df9016bb4975",
          "0x05afc3602e02391bd4e2c5ebdda280085ec2c1f356a3a5cd2fd2372be6f3f259",
          "0x0f885829358024fc29d041eb29a43130ec403922c4479c55ab3b346536ac159f",
          "0x09752c21e2a9c7d6d5b89634288e119a0c6406abe9e77b4ad1b8f36c9ecc8f1c",
          "0x1d6bb32d414b8f98583849694ad7ab5785d88ec70bde4bcd750287016afceeb1",
          "0x07d455cd69ad00e93b09ac44915f64a7d5ea3c4c1b3d176bb51859639f924b54",
          "0x118886890f7d3dde9af1204a9590e10750c9a6035e66b98bbad1fb625181abab",
          "0x245e7b3643a7766566395efde6e47601aafe307378fd000da08facc33dbb043d",
          "0x2ceb6176073a98a6613b40f768654dad8d119ae64edd6cc84e4b34370f9409da",
          "0x1b4e4d410613ae837b7f6a7f5206a03e9eca6692fa970287a53317990ce81148",
          "0x080057b8e664ad580ea5f385105766fc0e3a2226520cf523604973da274d10d8",
          "0x1131ec38d8960567a7fa9bd96dfa7fd5083e14f2843012ab36e946d4b901b0ab",
          "0x1d278e62c58f3c17e14769fe3dbd6c6b9faff11def7d003066d8e6b0fe7fb1a4",
          "0x0710431fa88e036f180f0e4d46e8ed78a7e6361a239abd787b6ce2f54615ccb1",
          "0x301e86b0693c07df60f8ac15ac6b1caa76f13ef5175535d8f97600b8cfe3b5e6",
          "0x25870378c0b7068041b92a7f44b485605448458c4d2e7a87a26cda94ca4099ed",
          "0x1176218d48c39ce7b6cf46e760d348871266005cb0074b9886eb2c4bef5be09b",
          "0x1e1efc3b03fefb1c972891409432c02fb0f4e9b6f6e32b3fc10942387a9a8125",
          "0x0192ce4fb97eec768607210a2a8fb1cb29828d4bd840236f14327e186d3946ce",
          "0x09d944903456cc43a43e9827368755b938a31d42a47cc6d910ca0b04ee10fd8f",
          "0x18e4179357588f230ab88e6fa610d882442a89519ca71bf10d8ba64fb2aabf34",
          "0x25d0f7bff22a9e99775d8f388a74d4ffd70f9df71d977a07d934379fee629378",
          "0x056ce0d47418e2c1ed7ea63d7b06dcb7e7068abf79478e2b53f402d584f8014c",
          "0x20dd7949307bc2ce53323022fcb6765379c953e8551f878c4b71205387a17b41",
          "0x04b97cd5a47874928e8e3ad6de644226493ca3a87a19b182eae89812db3aa060",
          "0x09374a10aa6cb0b2cadaa21e9f10459f79376f8ad0fd07830045b6f1e9452600",
          "0x2114b5f038cd400d24959916f83d0cc8273f7f7a51955bdba59df3ee5ea4c95b",
          "0x2751d812405f13d21c4d5937d20a981db7cd5933822124189615611ff4ba2d91",
          "0x0cd90a882276ea2b8a7273eda155a6fd9d63dd094b965024411281ae2babbf77",
          "0x0283bdacc14757e28398e67d6e7921529951edaf0c9872194456195e9781581e",
          "0x16f179d4dc4f2101cea8d127a6dc09e4f25ecfe4f79fa3e02851fc06108fd498",
          "0x286f91d1b79d9e681d6c540bd14af83299cfe5254d9a1b3aa634e5456afb700d",
          "0x15ccdfad34d292269d6734c173e241df98e2fd75e86e61c61369c6f59ab47bf1",
          "0x0ac6b90c6b7a47a1eda9d4a6d466b2adfe078dc41c9c6edd0a390303a9df210b",
          "0x25497ca515dafc37c125efdce7ee66072c8d4c152a2a30f81e195fdbec764982",
          "0x280948cfe3eca19e1cd0fbbaa5fd23a38e6728547e648fe80ba947c475827e2b",
          "0x0cdb1b6412b6db97dc592bc966c6e1a67fda70232ead9a157f27f6014885473d",
          "0x0c438d5abef5042a0a63ba4318d78911fec5373fba72bec6fd2f52bcb386682d",
          "0x219ec582c9278e78e48798023c5340d522a0f7e639858de4ca01199c4452060b",
          "0x03a092730cc3b1eea8a5a761259dd2bea4f586eb09a7beeb17c29a625bba8173",
          "0x10ebbfc35233d7cd631b6204cdc89ba4fd932ae0581a856a395a8a52662339a3",
          "0x22ce0890d9ef4f2b0ef4e69827dfb68f3a6ea6c30a24a675d51b9e199b6d7c30",
          "0x18948f58035bb10956bdf6d4667c2e16ce18442a19b8c281d49b2e26534fd8ae",
          "0x2619ceedcb834ba4008853aeb6a8d6144e281b7ae3678f1d52d352f04a9f0df1",
          "0x0244c74d793f1a16f197a2fb001bdd31e986f094a83e09d58f2bc5aed2c8beb9",
          "0x16ebedd4b23d468b9f36cbdb35e00187debb15668c180c8ab339ee5b59c87cbe",
          "0x2bc41c9eed9f63523245f4b412216715d29becf51d660c86bdaf38809677bad0",
          "0x009edbf534745f8c735ac87a602d806b99dc68012eb7d6c2c1d4c38a0673ea23",
          "0x18dacc8d13202bf232616f3a175bc021189a25a296efc9977880782b31407989",
          "0x0b2600a07263e83ac076bb1c4b07f48f2c2a3cf6bf7be4af77262d3917354ee9",
          "0x27f6d20fce0e747cfe43774331a19cfe4c234e99d180332893f70584a17f116b",
          "0x1050ba20c8f4d797a1aeec9de46fc7f794cb691a9b16868a2deffeed1bb3f62a",
          "0x07ddd2115a1e35311b052494b9c05ed47ff8fe2d418178ec600487ac8e65da20",
          "0x152a65b5478e0f92ec3fc360143e6a1cb83d6e99668168febed37160adda8a2c",
          "0x21de44ebe484523c17a9ce162f42fcdbaa71ed4437f8cdeb885e3d4a205c370c",
          "0x1be37644a1d3a397b6b549810568ec7636a1be4d7a64ae23f7cdf07ec93a0111",
          "0x18e7b112693223260a25dd17c71e431be5ed4a8ab737f3775ef61489298f8759",
          "0x0023f7f710bc05777402a21bec4372e3b648473f3747f1eb28a78c7e03a3dbd5",
          "0x2470de23677a016a0004c6ef292064ceec79cd12cb1fa49992a3b9bcd0a25de5",
          "0x1d1fbf8b2e41000803ef6a50be409987c6f52d8b53b617c4055bd24e7d27bfec",
          "0x027f5fe1f4bedb064473be4b6eac1ecfd656ad2086abc311b67f3ac8b8c9f367",
          "0x2d53af0119dfa77c28dd102b2828fee80af9ae651db1014c3f39fa5b9b8ff852",
          "0x12f19947c2645f4481c89113f4514641f4afb74a8c43e0366036e80549a71fd8",
          "0x2f0073674bf4fd79d249638ec64786a9445fb590f1088ebe4a4f01fe5f4c2513",
          "0x28ed45b47e0c45c29abf03b265d9fb7500037a95654eed4b6cf4a185d1c9aeba",
          "0x292142dc76706392f3006b8f5b45a451f3c37ecbad9f69b2711211178683be5b",
          "0x17eaa9eef3dc9a7059bf6ce3a51cea4a45ff03b7cc605cb8b05c3edf2b9d67fd",
          "0x1a167d224f703b83f20a9ae1dc90be77516a977e6f2ed07da85b06910a65be56",
          "0x084eebe766b141d7a2ecfcff08750b04bd6fea80535b2a0e30ae8933d98026ca",
          "0x2ec0f402c6cb9709e6e3817e2b364285e18cabe290bf8b8387e9d1fe8dedca2d",
          "0x1657e26c61a0eb6f8bca74c5bbf34a947772ffd6c2c0f9b62836a1e8ff6f4780",
          "0x1f8827beb7dac86958edddea38b28f99e77180f3c3b959979378c47776616ab5",
          "0x217a07d6592fc0001fc240be44f71c017f387006131b83f237fa4c9668ed4fd3",
          "0x0596d9d6c84f745470fc9997c5a1ce9d4e3904e17f16f139e1fc6f0bf27ada4b",
          "0x0bd2f1e61a7ed47726482de76ae4b0d7b41738eb06c9e98ff0277fea16c2b0fb",
          "0x14e4f14b2a7bbf9dd8c3a1b5260c3844519c3bd5d139b7344678f74a36f4e4aa",
          "0x0980b0b3d80710a167df147f9d475a28dcaf918a6aa3c967a5bb55d97a8f6dac",
          "0x25a6def1f1a79e8d6356671df1ca3350df855069fa1b5e7e86f27bafdee60ac1",
          "0x2cb242a29724740e63d8488ad7dad6c5d37e9e5d0915582e7a71c53e536b64e6",
          "0x06b32dc0408b1782c052bba587c379ceb352fb29579b21c6180cd3fb39ab7afa",
          "0x09f20a1375f56e6bee5326ac7563709bff6e90182ac092f12145ca088fdf3f47",
          "0x3040281c47d3b6edb8314182a595a1f3e6764e662cc0ec878b638826dd3db7f8",
          "0x0072eda160683c3ba9ca0dcbb27f008505e83a85eb5ac753b7a67a23d245518d",
          "0x1d0c406bd40bb8fe800ca737d501e19f158fa205d9f63a30b487e615f4721400",
          "0x2e1b6f701dfbe38462061a91d5f641abcc7406a5f463822b717de79344c8a9db",
          "0x2918d3fd3323723a1ce75dc1b1f82948d298da146366cf0167ad082f5afb2aab",
          "0x04a8ede82ea0c561443858fe08d2c905dcd445f51b11afd41f4676673d74af0a",
          "0x262f76f5afbfdc84c240e686362f25cd1f3497d195c79a40cc997225a4349280",
          "0x0e983bd202a424f24a83f8173737dabf2c711ecc05204e1d26b4f77f1f107526",
          "0x1a8c8a3b13837a4a657c26d0f804ca7ef83aac7e7516184b4c22eb7afefa5169",
          "0x05a16f27f460719f8b75c49c1cdaf348739ab5a216a783039bc055ec6f0aef15",
          "0x109a4e202a5d6ee943b2138dc5e3c868188b02ba57ab158a46e033590deb1d02",
          "0x114be636e12060d317a7f08c44b856144e883dc8a07af1f62caf300d23412dde",
          "0x1fecefae8607aeb2f109239e061d1839dfca12634a4b001bea1d1190e4ec8029",
          "0x1cfb5006b6281147b05dcb8a08aa54a7fcfe9b121f12bd36e989d2f47cf809cd",
          "0x2c2e31ca27197590bb0d46682ac10d2009edb57e0a88b4790d731cb34e926d82",
          "0x18f2a0b00b5449f4bb8265d9bc2b03a31a1ce6abae5eafd9eec2f3745be561ba",
          "0x0431b6c629cebdce444b0af77df0808506106f7657209a9c96c73f6b44da6b02",
          "0x0cf33fc2fde1e171be151ee344595705eec9d0930341489adc6433fdb9941f93",
          "0x0a0743877b28a2a675966e6ad6e2caf32f78fbe830bcb0187aba4c21fe7d9275",
          "0x195b9d285a58deae30758a177e20a4cf66350cf4becd8126bb5b89e672d39fca",
          "0x2c3eac5d52faf5b46fca54b5e7c16cd9503bf62ff1e3f7caf95149021544476f",
          "0x10008396ed7e26097d6384716ddf29931bfa8cf88d0f15406b7d3e30146bcc2c",
          "0x09d6120d8cefd8db99a2906268fc116f5d31339c11908252ec08fd39aee66c7b",
          "0x29f60fdfbe0d77c1641825b499e2452f5fca3dfb427be07a32201bcb38019187",
          "0x2a77d988433dadddfa317cf1a86c2503fe0194fc1595e7f8427c0b83f90b4180",
          "0x0c9650f149c994670cbb966f3903e52a637e956b5792fb69a0d7376e732e8113",
          "0x0cbfa17b2347e6821f788e9a44255c13f5032598d1e215a822e3e7ed9b757cba",
          "0x167c4c995f5a20357496678fc1ac33e08431127aef92a9a00644c61effadd079",
          "0x17b09378da9ad8fa77b5d10db6cc7b522df95666fb204aff23c0b9a9eba37951",
          "0x15444b346a2eee40220d5abbda30324fd422b12bd062507887a1749c9dbeabd1",
          "0x03d08a26f86c97f31c4cd9a01a7f68fec8c208d42ecaa7ed2cff73b74dc18656",
          "0x1c539c92417e0e11b263d99a0fad8fc61fd1c065e70399aff512d8777d7cf1b4",
          "0x19b9209e1055f404647d2f0bd4817e798972967e1f7688877f4e857400ff8526",
          "0x014e73253e3b5d2c90f199959ebf071b189326f39d1772986de1ba79db72f0a1",
          "0x0f76aa8a09cd042559e21edf64495557e806592a1d72dfe8ca3d583a04febd06",
          "0x07e97e1977f873a0581eda757955c93274a87454a65e6dfef9440bbe12f01489",
          "0x2fd534af9df31109c948d5a5d9336b8d7bc51895c34bfcdeac48f8b56dacb362",
          "0x1b7971c644b7fd517033b8df2325df82fa22a3b79a9ee0033237bb43fdf87723",
          "0x0c830969ca91ef87be109af46d0ad62c93e80b1ca9307d72709508cb1fea64a2",
          "0x1fdb86f3412ebb18754a1f9cf4df3096cb11ba89e798962295cca254c565f2e8",
          "0x2c9a5c82481cadcdea6bfbda30343d9815221e29ae617a30f950d29834ad2654",
          "0x23b19abc1dbe34a9793537f1f39a3d81944d1b8cfc4f26b0639ca4faecd98d2b",
          "0x0cd6922f3304a4d038833c697b0774147972516bdc8f96567b29a64769715483",
          "0x183212f2e427fc1080c237bfae4203ef12472a06c827f93dba5d5af24ec336a6",
          "0x04417a0dd6d3d8cd6d2ef81cc8333322d70f264f5100874a4c1603d1d6f839d0",
          "0x1ee7fd86ae6bfe916fbd87cf0a72a4be433d4d3f5b3b96707eda0c47a422c3a2",
          "0x0e386dddd870f8041dfe619d4dd8eef851a6391cf49eeef6f1f1443eea173d10",
          "0x0b31a49e957ac3bc7ff0f65ee6fdbb4cf4b145dd8a234f0d7e6c0639bea00747",
          "0x17bedf9f13ab9ce8a6e28190479939cd27863b892ffcdae05478a0859c7eedc1",
          "0x1c28fb33d99dd1b3ae37f884f3552546a4f5afae562f4862fe1e92e702409e15",
          "0x15c6d0a394166967cbc39280505eb9528cdab0ea52f1595c5e7871815ffd02cc",
          "0x236303150f9e76503ccf1be5c90c3a485f90f7c1ffaebb1c4fcbaa82a0519bcd",
          "0x1fbbe0747bd2bbc3ccbb752ced9897731942f79d9a761d3aba4a169681e30fe0",
          "0x147146fa6f464f7e58a1304441d2b7f64333e21779cd71f880962a50ea6385ba",
          "0x217e02c928941516f5a9a78eba51468d93bfb278d1c79061e666df4a32092c03",
          "0x246013b423cc893a16b68c228b01b9380b47b0afbe4dbeb1b4340f5801ba4c1c",
          "0x2b5225496c1e6facd5b74f12705ca0d4a7b77c30c1c8311c3c81837167ab45ef",
          "0x0a950f572749b6fad6d6c324f40568d7219e75a884f9bbf941b20ee81b42c022",
          "0x1a71888e664d2ba9bba5aa22fbc380f29810d0927d286af59110769f07f9976e",
          "0x15c5c720ef6fa5b02936376c298394bbedce59824d6ca9fc260f5edc8ea5fabc",
          "0x1c84983cab32fb96ccd0276d25fcb5a978edee693520c0b1ca097792cbd1742f",
          "0x10759b7a744e81322f8368fffa6845102867e21ca6893d97b463094ec72a1e24",
          "0x1ab43f1acf28763767e587542a3f399f0998b4d20f532d1f5b3935ef2ca3fc6a",
          "0x1d32f2e0c56427580de962f147633899ae7237f4ccfcdd52e0d9b7b037ce20cf",
          "0x2147506e00fbe0f6458115126df9eeb1ae4c331a4a381915cc195bec94888d65",
          "0x04e95ed8d8a554695f2a8441c175f22c61ab041aa4d27e4821062b02f7a29ab1",
          "0x2cc181f94de5719fe2cef2222777dd98aada9d4cbcd076a2cecb3ea78f8bfeae",
          "0x1615f6d5826caaa678c4e5c01cef49b442448157d2c651e3b1c99d32b2c51c0b",
          "0x054b0e2491d3ebd17f7fee0b0dce67b82346d224aaaa477d5d98fde2bf5df5d3",
          "0x21052fe17f3f83390ad8aaaece48b7924e54b8070b6304f4b4e8ab9f89493713",
          "0x1b1d8d905c713958dd315b0c84a65d479f6fb8d8698630e7f096342be4f129be",
          "0x08765df92141cc7b51bd0873fb5259a8acd5a9b5082889ae550bf3ff1e8cfc39",
          "0x1dd1e2c068b653203542fea3746329eca954b9e28fdcbd895870b32f34811054",
          "0x050582affdfc4e5c3ce73d746680b830a843939561216767e4ee6342502e2a18",
          "0x151572a6d1f57de2fa9e4aaa545ffb842bb184ad3e0b0bde29271b55732ea2d3",
          "0x18d0aa380c379a8e7000532a66d561410e8d118d2eafb6c0d6d3faf2dc8e85be",
          "0x2424a586bb57c0883ee4ca4ec731969c7422502c8a219cb95ced3a1209b05fdd",
          "0x0174d6643ccb632a14b11162fc35700604c59399d3a007f5f891504bcf7d77cd",
          "0x182104c94166052fdc748d49799011387915b299e04a80e33e612740706e7a6a",
          "0x0b70c1185230e22dcb948428cedde9d7dc9c967ebd45af4d9cd62da07bd522f5",
          "0x1db44b6e0142bae1070f734522bc1d40b99cfc51e62ff6dad389fde5dc68eca0",
          "0x23779598119faf923336a2e9fe15a7a32d4600a8b1f7bbc73cddf10fca81aab2",
          "0x0d310d08d48c04dc78bda687d48a00598bb963f09b18df3b8b8d31629b7b8a82",
          "0x2a8bf4e2d52476ec48829a99fa53b47cb1045bc3fccebeb252218186161c7b3c",
          "0x13cbb0f381a6e6609c3fe4077dce0da32138966e7ba2812896001837585b2eac",
          "0x2ae412652e44172733e1939fd32eb7804647d29768a74b335036b24553571b40",
          "0x03f426a5c7707a7da1a8348f9e6c0e6d5b2d507bbe98a006f715bf2f28c14333",
          "0x092fd1fd3d9c5bfccbd1581b4a16ec0a80915ed2f56a3d4099b239a9b4449cd0",
          "0x00b1e816dfb839a8b31ddce51963f3521131a5aca1cfcb3d20492f9fa4ff2b8a",
          "0x0cdaa3a637ae81ec5fc6b4f592b5e04f7fd8f1f67b915d7fcb95c9c5bf3d7c73",
          "0x11fed5b9e736562938a571aad6c1bf987895bd25d53efb5e93a89589d638d0fb",
          "0x0d06b9038f5d041a9edd114b3d6346ad5e11d8817dfa3e74034fb82fcfbc8632",
          "0x22f79b3d9df4256fc835f23d5e16c8f963eb0f80d76b90c47af463b7ee49af2f",
          "0x2bb2ecd74be3c847c7df14a1c83937f8b24a3ba2744959a2f3733dd4cb777e6b",
          "0x10bd1d611707ebe4a82d2ca962e0054bb2b7631de85e3468faf005adedc2b931",
          "0x2f4035fdb1622d23d1b9cb82da64f9f7071d09732cf17a53ce842eaa42f365c4",
          "0x0fa7d8c17fa7018ad14f089eb8564bc9a7c157700bbd07c3a64ba258b8e7920d",
          "0x0b8ca93688bfb7c1ae365aeb344630c19d0f1e74b666dec2b00436f496bcc5d6",
          "0x10d685614a99a405413e3559d826175205a03fffd9b037ced90bef0af0db1a72",
          "0x068e162c6a02caee021d6f4461fb4e1ca1d6092a85d90044c3eb14e07c4e4a83",
          "0x2f6d6a0c4ee21296496f69a965cb8fe239b91ea81767cb82064a8aa5e27bcc56",
          "0x0c6a439aed8ec86b5ba5f2a4a045faf2fe48bb442d9f7521bef498d057c2137c",
          "0x1e6b0d4b88e393a9d915c013b4fda5a7c3b589872c06dfdda207e1d6641aae2d",
          "0x1b2116f8a7de6981e99425446c1b720cb44955dd4bd46fcc6c522360e1c6bd8b",
          "0x05013f00c86773de39c01ba3cceea5c0cdb0d882f199569fab37c440e25a8e56",
          "0x083d430c489ec684c164dfdbfc5a0556dd90abbb11a8ba1037b92e7c3ce42cd3",
          "0x1b0dfa5c2f0fa739b03b0bff40616c9b5ab246c29694473d6e23ba5c5dd98286",
          "0x0553fdcea1498f28a9c4a586d47b0297b237e59c2c0e7034459f79cba4b29045",
          "0x164c272c42e1f907ba9fc7af62e5a9dc836e9e7124eacc6dbc5cfeee3b74e5e1",
          "0x2eeee949382b74229a3a5f86420c596b8224220ee9c1d093cf965c2003c773db",
          "0x1aa7b899db428b649fa1e4672581909f15a091c301c527ec4a54c3c093ed6003",
          "0x2844667092565157f2a88a0558450adcc388e6148d2417cac3dff95ebd707303",
          "0x247c0d8658c6a57ec482adc5e9ee6bb67948d96c781ad98311e279b81f67ef35",
          "0x21621a3b3c6489991b000d1efcdc69b0a540d09680497d61e96284e668c9abad",
          "0x2daeaab1259ff6596d09ee4b567cda64ab0fb88a31783266e5d14048118e62f9",
          "0x1906cafe7df4f4a8359a4818a4ed5b6769cada0a2e046e2d6138bf8f84409f4d",
          "0x00c2adb51600bba92fc53dc2165f80f7053a1350be50f6268dbe18b10eba2b31",
          "0x26b285169225658f8ccc3040cd85c3ce1f447e47eeb7be8e3b6df38df3d44bcb",
          "0x1c2b7e2db564eef0909dc7753604a4cc5d45d643355e3c60321d24a80ed6ccad",
          "0x2dda3e9fc09d2c2e6d52a76bda84df106ed236ff956f127a804fc7025bfcddf8",
          "0x11919b8f4797e0ee89f05e0428f57833d8b5e74104814a6ab664de8a45887ef6",
          "0x127bb2c1e855294058203de7a73f055c6f42601a2475b1d75f9395993ada7b1f",
          "0x2c59318cf432b8e499a99a0863c914e8c7836a23b31bc758028182f83283f61b",
          "0x13b24677e68adfb873ed0f23b0025bb5747a5fc744353025d2128d447017ac7e",
          "0x2628fe26b4d2bc5f8e90679f798cd9de5a47bd2f0486514b6db4c70cf3c247c3",
          "0x237cd160a1d6ae30ef20c93476c9ce0d6066c0e7a5abd261faaa4bccceafeabb",
          "0x1e1ad584ab675d5b5a4aed3ca5b804d62c29733574cb9c9ada2577d876b99c24",
          "0x0fbed731a82174de7be9e047985673580ab6cc4194893884c9f51ea11ffe8f58",
          "0x0b441c8f1423a29a71b1dcb16fdad0316d5334a298fd4480125e6085dcff1078",
          "0x214e573a6c57ff7da396c0aa15efaa21fc0930c59984cf9c8c74dade3af961f5",
          "0x1b6e4364576e33a3cf54bf21c10a91c48f7eddbd9106b505964ae8e0b48a5dbe",
          "0x2cb60dc30aafc3a99f1f439eb34c38e8a7ab265de46f45003cf2600f3a4619a5",
          "0x081c0b5c56711e541bdeac150b0644a7cee255102a4622dd990f3410d16853c6",
          "0x1920f847ae83969af5be395a459838984a0db77310b2c8c533eb602908321444",
          "0x1bd14cb5b0950d3b4783c53d2c733a2ae6e914ec6015517039128b154746aef7",
          "0x2ca16700e67134be0eef329f561fb057867ab0c66a7fa1dad6cd60eb3c0d32fa",
          "0x23a4bd6bef7f4d21c26192475547245663fbdd3a251afca27636ed1dede95365",
          "0x0090204cbe550a36f11c9d12b2a56a6ae7399cffcbc1682d7649cdfa12b5b3a2",
          "0x1ae99456d0e8b238516a52067559e599207da285d037bed5c748f39a6f94a04b",
          "0x2c18b3a0fc4bf35beb9a40064a69c7d976eff45bae2c1691005cb835ac07f44f",
          "0x2dca944b91011ea9f224fe5e0612ec2021e2e311dfad8d8d52376b60dd2963af",
          "0x2ea90ce7f34c864596617fec562b4cd9fa0acb71161655957ad4615ebdf4645a",
          "0x07d2a16fad795f38267999a70ebdd9b2b24de85aad12cabe10855c2bd71bda2f",
          "0x2364415fc864df4c341a8e4267a1f3e832ea5143a4e2686e0d8440c044ff862c",
          "0x2f5c88b96aed854cc0049a9ba476a6ba61789e5692cf2d7d8d9a7cc7b9d0cbb1",
          "0x29902aaebf3e38f0ef39c37deb5e4fb0f32fcf23b74511a62146b3f79c25f6ef",
          "0x0e190e057ebcf02ce0360f76fd5b279a4fe2ba80646ed69cc7d568411e81cb51",
          "0x23097b82c0c75e53cb8084869e51400bff9e1f0d75b5252e988abe3562702f7f",
          "0x30180e17530b860901b1fdcaf23b2efbc13ebd49574e69aa6df159d4a9dc8553",
          "0x11ba605959afb5de92d0a0cf68945b5e660a59e6c9dd2ee4838a9e52dd37a09e",
          "0x19f8beeb3629ca17720e83269c010278231a330319beabe793e9af41518a34ca",
          "0x278f39897cc83610330db265f6f959ec983fa13838ba88f76aad034c2f90151b",
          "0x2349cabda83ae2bf55842e72b804b36435a49e0b2f8501f00856605e24dec382",
          "0x07279b75f7a7c121005c3b62b7d19dacab6e1543f12bd3665c31818c5f2c7aa1",
          "0x006a49cec0500c059bf61970d3a03c4eca079f3bea76bdb652c9c13eb3a57f26",
          "0x00877dc29b504019644485576670f38ca53149695b5aacc5c4d50108e2683109",
          "0x29494a499fd7cc4e34730c48b22a629b24d74a728300696f523befad8a329f77",
          "0x062086a3a24f3dd07219b38975c451b48409e3433eca86c0832070c82f6dbaa0",
          "0x2b00d39eee2b4106a70ea6184d95dc19991a0fc21c472717740c3276a9a9051c",
          "0x25c788dedee36b381925503dc1bfc81f09876364b764989f86b9a9642c92eceb",
          "0x0a339d7c3399eb0090f9ca887196f55e5927dde8682c37fc9e85005d0ca14e5d",
          "0x010fddd4d628eecc6bb55ec4ed563c9c9fbd76ef45c591c221e08b66f44c9575",
          "0x08cad7f09fcd6d0a763b153a6ba13d09e4fb910e98a745707095c42ac32f7cd5",
          "0x2ba8cf3a07138c08643263e2d4edcf9a4a47328bfda137edd4115ba0b3274d78",
          "0x280c5aadb92f1863c0ab20ca14b01b00201b21dfb71c1ed32959b212dde8e8af",
          "0x243c43be625885bfba5754beffdb8c4e2718bd1ae38bac39b66883a20324547d",
          "0x1fb8a7db96d88075b7ab36e71669568b1a88c0bcc572ab1c780303c569e4108a",
          "0x0f7adf6a27eb979d0a147b417255058e3dd399f254e1d1571e5a6025d85d593f",
          "0x2a9c20bfb0234dd219ac5933e7616040ff98d6f099b53ce9dbb76b7a21c655e9",
          "0x2db11a75d864992a6df56cbb1eb569da36927f43362e983de12b7661aa91f465",
          "0x29cd63ef57ff897ac5b7df3ba8ed72d43a24ff18a03caa4d99f1e53190cd239a",
          "0x14d0521932e873b6db85e6a3aab001469a168e978eeb4c1a9386190dd74ede71",
          "0x026a3e834054cb4736723d1d15a241869f8f23475d377e69e4a3731689cded16",
          "0x08bd8277459e8e0a8359ee5323541bcc1465b27b9685fcf0d77e4aa73f4a5ea2",
          "0x19f6a1b5a8022bd124d262a77499621114c87b1bdc8e8ac715f0d906b5f571f0",
          "0x1f99477db5031b0ba723b1c0c6d156fe88eaf78de09241f1f59e0834f91c0817",
          "0x07a87edad5067f361df3b764ef37fc31175e017d9635a6628cef9158f63d44b3",
          "0x264fe161c98a2c04514b92f20b75c21223b2c22655e8fe2f76e4ce8d2563910d",
          "0x25bcba83915954bfc6a3fe5bccf6ec56688ec209cf1f976a48454dc6ded0799c",
          "0x2742a82c41ae2ff68e524803a43e387e425e943a2847fd729227cd01b707dcff",
          "0x0a4bca229eb9cea967db5f8650f3a9213a7eaba0664529ec48cb4816a32f3e40",
          "0x162dbbf72f31e2af5a8c62975d6add0dd747a86817bed09d690d2095ac1f302a",
          "0x1d90d3a9705c5a9a1e06c777c9158d78603ad4f9b10cef41aad2b8008d86bfc5",
          "0x2e97da108e41920c71507d3ffc4198f4e403fc080e3193b63471e816d3aa655c",
          "0x2bea7cfcff46cb79828d1bd5bc4d18a375765bd6927928bcffbea2aeee454519",
          "0x2e5e54e0fc642d8a0a21df48310fe89d3ecb81bd2d564b2b12d37ea41ce66374",
          "0x2df4a44be5efc0c61c496a8cb723e9fafd7dca85ef9c5ba52c71a78ff2a59d9a",
          "0x1dda9c60833b52676cc9476ecbcb34ee7f5b759fc0f8229f1d645e38073fe051",
          "0x2f91eee054fa514321dc0aca21ff25af7381ca3f4ef09a2fa27355c4fbd886cb",
          "0x094327a79722ee116aaf8196c4844e442e7f36444ea9c816948410ff111e3503",
          "0x0e0de329ebc013684671aa68f0f5c56a65a3c7e31b34af28d42e7db606b2ec4b",
          "0x0bfc1bdaea3997e63db63e94d43074ea379d5d5f9616edd9f19c1787e4875937",
          "0x2d74256d470e8f893f5a6a127237c24502c9e10567b892f7714983d142d007b4",
          "0x108523062a51a8b428eec2a66284bebd07dc1eee904f4347083fd1120649d616",
          "0x0c5a805d2ec7e6b3201e4954184dddc7a93d39fc221fd8674b33b68d65ca9e48",
          "0x172a06215673e0c0432c98acce1c426cfed640850197e72fe848b33efbc8808a",
          "0x0f65d03fccc7537eb1f4fd6c5cd05fb04b40396e99328a9e9f344c5dbd2a2e9b",
          "0x20c30ad3d6b572577a8733996093d5b939fb80f2e7caa53f0cc967c334dcd6fc",
          "0x0373febde10260fefc6ce9670914a9cec5c205a75d23def62e22fbf31a61dea3",
          "0x2334bac29b92db769c06308b787943375ba7e4560fdb741aa6569de8d16417db",
          "0x0a3e20c8a61c8bfaecbd65e43b13a59382b021358cdbf7a99805d65822f437ba",
          "0x00ea78ba65528ac7035e06fbd9be63a50e0caf8d0628f33c7b229d0931aa6f05",
          "0x0d1682fa0a924b9b3511188fbc8f21dfc6f9ef8eea1891607f22b1f9167204d8",
          "0x2844a8efb853b2db634a3cf36ce7cfdc331e7f32b0035d6705dec154b824b4cf",
          "0x2a2a574661f939e6c6a49f90107a2b54a0002022f963c20c1bf8753c826badbf",
          "0x11cf62ee06e4ab926c482f35525a5dd300a259bead4cd8fb9496ca06aac9065a",
          "0x29045c7fa9c73fc5b1e13499d171a16f376bc8b812f2654908b5ecd2b8261769",
          "0x057e44377642d4f3c7c1625dec2f3f4d22e915c7e90552879af016f7a1665f21",
          "0x258c4640ac1da995bd0525fa9162d7cb3a5d9b267d044a8c3c3c4310e68971fd",
          "0x095ee6ff5568fa535092d74c16311e477b7c62bab5fd585b7d4f1bf65ab4cc6c",
          "0x0806951088d6f83631a371948626f66625800d5b61eeea63d0d53f1c46ae4e21",
          "0x2e8cac5fe2f70b026d84f39f1bc80f3ebff2093625a1d44d8c9498a3172ee2fc",
          "0x112aae3d8032ae80dfe027a70961c04d17c99609a38c2a6e6a609ebd312a114a",
          "0x07f1bd289aaee1f4c2832bcd88746343d2128b9826f18ff47a02c604e04b256f",
          "0x020fb251f294ad1fc3d553cf9dc532cf2105d28b419cb3379be54f68384d3656",
          "0x0a76309ef4f35a0d942d2adb40042103117f8a92f8fa22713e5c8f4630a33aff",
          "0x02e338a6e276394e620855137d23d86e73b6a9c44713543e6ef0ca373032b662",
          "0x11277c021f4bb0566112a62d02989f306be3d6a61a55d6c2bf32b9b2d6eb488e",
          "0x0e416f597798c242813d07f02fa3f5afd3cd23eee8bec05ccf32280d2eaf0e85",
          "0x1246e80a1e90daf8f50c8e70a1973229c1c0476a262df79136087b3b252325a7",
          "0x02e7f56ac53002afeddd2ecf49250b5234d40ed25924ce04da52fb13d8197db4",
          "0x0b383f460b713d1af2c2721ef86ddb9ee97b4d51281993edb77472acee552822",
          "0x014c46b4a3f25b85a2d1085cfda812c8ae5586600b476acf5e6b6145ab449c52",
          "0x0ba3a95d3c28b392f3957569179db635593a9fe5eaaaa6410259cae7a66ab635",
          "0x02bbd2ad310bbb5d2546328872c54b64e25ab05e3477e04ce1f03021ef31b90b",
          "0x1cf0637ff2abd72a4c5d8b24af9998fc29d5f2fa62ab47914df14e897467d0a3",
          "0x263acdf45d079d43b1436625d9c3229e58d82daf3a40bf89e2672ff6785ba580",
          "0x2811eb97a600f13912348f4e9af47d30dbe08050ea0837010e174ec3f3acdb84",
          "0x15e681960836851b15c8e9896e91d65ffb1bc247794c5900e68ae82f1cf732ad",
          "0x1a1bf5d7b73d6cb3ddb0fcd106550674cf8b492a86440f90994543471d554405",
          "0x09137e8736492afc6d714d854ec1bd8c0fe63d4029ae840e6ca05fb3a8b36243",
          "0x10075a0236e3c6938e8acf35759f8c19c8630260bd8e58716edea970ec02ba58",
          "0x126344b41cb4cfdd9d78f912e02ee47059c09159f97c42943c5d2b735b6769cf",
          "0x0472a9ac7f6600881089a175f3287ffdc01fee5780a38e1e088b06f047024c4f",
          "0x0e52b1a8dc66014a14af480b80c8b3fd99592633eeed6cf9506e4f6ca9bbb8c6",
          "0x190e307e6626ac796ed7c96932800d3f155ca89d84c0392bb48a60b009867540",
          "0x19017529213e1cb331a1d076be3254c8ee5d9ea4005e9395706ea0f918491384",
          "0x1889decfad56cb14a6e2928091550a4504fbabcd71a9f4e3895367adccfec767",
          "0x14b3798bb27713b3f92fb086492367335424c56e0e7bd9ac39b5585fb18d0067",
          "0x217faa0b7866c660a700fdaf3ef0438acf44fc73cb7eabc5fc190b64ca97056d",
          "0x2bf465cb5271fe563121bb90877a821d529fc815fcee372474ec02cf398f9bb8",
          "0x06a83b6f33415934cc47c952b7911c5740d8d56de6a34837dcf8292ba823811d",
          "0x26bc4b7152ec95967de18162da0400a2b369c91088835659da957d1ce2b49e7a",
          "0x0d9bc3639ab1e9a50234c10d7041ea2220bbe7c94163188fab1f79e656d13b18",
          "0x13152f0714ede97bbaef3a29d44fb441aee818dac04f11e4e5c6a4dc31c8cb3c",
          "0x1afc129a674ba4ac7552dfead9ae8d2d584dc7e4a2ff2cce5d3b6f1350e08d27",
          "0x28498b045dd1b9b56e558065e0d7100675fa16284ac0ced1048e07c280a1745d",
          "0x13f8baf6efc94294c82829f59da2ac86191b031bbe2b2fe332cd302cd5d946c5",
          "0x2b0314eecfcf61ad7d4c6d8c7b95ec7fc99ecf8a648c21e23fc5f1946432f790",
          "0x2bd02329f573d05bd14eb5971f8e6df9438e8ab78b2d37a68ddb1a845d4cddad",
          "0x2f121eea462e2dbe253184030c4c1a59fd50fab1ac5c49ebf621f32347dbc0ca",
          "0x0b11ca165736db53fffd72e0d939b16fd5bde07a03678dbb6fe1302dff3abe2f",
          "0x244d9d9b9bdbf0a622193df5b53e533ae146aeffbb95815c14dd44340e192b9c",
          "0x02dff8347e64c0966cd327c431d42bbfa8e43ed65d58d452d2486f2affb4fcfa",
          "0x22362991babed59c5de9d9fd96a339ac988181b256bf1aec52a3d0cb8952f717",
          "0x0b5ddca04cf6621a6f22b94b90395a58fa8f1cf296fe5beb4049c7565f4f2a50",
          "0x03b3edc6b3744cf0578b2ec40d13a99debdb6e71973e0a40d265b99a54d6310e",
          "0x2ddfd9a5dd6daa9051779120cb17ff9046ede5daa24b5c33368fb84b55bee38d",
          "0x2e928f258564f11bd72156b627f0374bf8a557c49f88598ac940227ca2f59833",
          "0x0f970b4e284e95a97909459a34a03b90dc9703b24f9cf05fb5250c1a24861071",
          "0x027a802eaf2f9dafe4845f9b30907fdb39fdd9c44c5d181610f55882b7b381dd",
          "0x04ac7bc03182be8029a8440ef875a248a480985e693fd4eaeb92637c73e89e31",
          "0x075f3191afbd21d51497a26c524665de743157121f093c120d93e180582eaf8c",
          "0x0bd3be9213121f779c2b2b0a024be82b518e1bbc134a65f440c4476a9eaf585d",
          "0x0c9bce95f2d5967d3b58f93d7e03c93170917ea53b5f8b27dc70a1faab474cdd",
          "0x1e3b04dee6ae6635722e354655f6032d1a5ca2e6d7afa0c77b0be192f4f0c6f2",
          "0x0c1fc33b93195f2aac03fe6eef3e4110784c7c48322e30ee51cbd78f6ce9d93b",
          "0x2ab604267dae12494550e1ef273708dd11c17666770ff0cc7c077c935bf2af8a",
          "0x1c69985ff78559519a0052ea05e608e35cace62db7eccbbcec55af3db9156468",
          "0x16334fcd421256398cdeee08a9345a527decb71a01eb43524f8d3ddb0db24d48",
          "0x07ef8dd7665152f85d00939cfbabcfe37e2b1ef8a77a84568aefe01f1e9b5ea9",
          "0x0dcc426dc88bdec8c2848f2d88a200571b8a012cd0870fc6ea0b981494f58278"
        ],
        [
          "0x304c29aeb6f1873847879576d30f1f6e8a3ce41082c15c7632df920d6db5164d",
          "0x2b7380d8b25bca649b3f8bbd0a86ae417109069be27066f46fdd1c7c87d4c40c",
          "0x04c77200e5494b1cb8a3d334f69ae5bafa7e8775ba1924e563efe591eff302f7",
          "0x06c0b8966df93080c3ac1576486e61ab0d027637aac41bb35e482bfa10e34fc5",
          "0x24c73f425903904f40dbff590225f251ce1980a5a5ce2d07ae436e1d090778d7",
          "0x23df6f6f4448273c745ce53d5d7abb5d26c46724a58d68844d3c3ee45e9b924b",
          "0x1dc1b1ac389280188e937566071b84bf8189b955d0579b6de5ea8a5136bc2ee9",
          "0x27f71c5ca774ce20028b8140f144472043917cd4919cff64d848a745bd569180",
          "0x22b2ee53b302ba2e836b98783e15eb6de9d15a72cc7caa374e61b51dd0d2e2c7",
          "0x254d85065f87271e86d7b411d6acc280f9ed257c098c9fdb04a2ca4df7c7d766",
          "0x28620793f378bfe881e098bd2ec62beb46899f37a54abd053cfb0b3bb8d5e754",
          "0x2c19f26d0836635b04f38fa30ee5c648fa0ea1b202eb0846821acd3c699cf061",
          "0x0f9ed87e9a1ba7ee7c28bfd7ac38ff3ba10849fb04d3322898ba9fe0104fb445",
          "0x0d1deff42263b7cae8a123a1641b7258015476161ab881e1dc20e165b3f04579",
          "0x05b275e07a9e23f477a9f0e2294227286528ddda6dc74484d76e6aaa714db5a4",
          "0x1bc255052aed9dce37765bc5a95de779273a96f4bf4013542588b09783ea7fa0",
          "0x0ec2286cba99984d38c3dfb80cc08aebf79a4af8ecb98ffc53ec4abef79ea6e8",
          "0x1b05bef71fc396f1be97c82c082d2f7a4d8b32ecf30c19875409050e3ad35886",
          "0x16e93c7eed0dc0006958d1824d0dc740b5cfb8c986fffcf1b61d100f29eb69a8",
          "0x1ac49ebc00e374fc647c65981dd93adb8998d6128b917a6235aa5623ea461282",
          "0x0727bebb845f6d4744d3ddf12c2aaf6f2c2a58e04571ff17adfd905cd57c60f3",
          "0x1d5659be4fa9e713d3e428c29d34f9ffa9ae0f2aca3474543a20d6254b2f0199",
          "0x1316e470b54f0dcd5311b6a930347bffdb833901e02448a9419f127f8642fd77",
          "0x1f7182906e184bd88594ca2589ff849eb2daa30caf8cbf5213ed3fa4747e4581",
          "0x1319714ecdc7e6bab2b7cf57d8b088094a003f2d4f88edb0d0bd8441b4cef318",
          "0x088c106fdaeb323a76f94a0912add1b66be216084a42e14bec597248e017d88e",
          "0x0fb8ab5bdc6168d1ad8769225641d0b5eb4ff8fb5c609c661da8ee83ea2a0488",
          "0x2ddedde404858c4f097c6c8ddb66a00381635c4f155014d3012ad1daf790345e",
          "0x12d92b7c7a88c9869f79fc61e4ea1c1c881bb1320c0b7787c6437e230b58eda6",
          "0x21cad521c1abec464be99a77f0c0f792a5aaefa104bb7c036b6c8a405050aa4d",
          "0x11047fba7de2a553c3ec55251768314400708e617c9bdff33a49663ca2deb319",
          "0x2904529f4fc0291449c3af18fc9f54722ad2c751620d8f6e0e1f2a1382cac5a7",
          "0x121fe62c53f68475aa2ccbe28d58aa74a2abebb2658422cd6f145c2662cc96a0",
          "0x0ddb1e4ea7a6f367056eedacf793b94a5d37dfa020e655e90711306dc7142d19",
          "0x268b44875f19ff58a15dd84f4bb64ea8bacc7dfc04d1ad861910fb9942a371ed",
          "0x09c17828425de5e93c9eeb82d325f770935de8c24584591b744808316590319b",
          "0x230144d2945f1475376bde7ebb437cd7358d501b9c954f67e06c0a6e90ab3c44",
          "0x05851a8847cdfbc802889ade3444a577263d93718b2038a05b05bbe890a98891",
          "0x29b5ad2c6282954ce356aa7c31085eb91b6cc49ec6bf139422c39fa54eff00b4",
          "0x265fa1838ae2f6d591b8f33deb78d3d7c9ca14014170ff650618b601443be916",
          "0x1e87cb86588c69bf4f9eded33f03d497c15d61b0e48dd04594df336d8793a23b",
          "0x24594f115063f9a063ccb1a580e8e9f042526c8ccf6e4bf2a6a273afea167f06",
          "0x1d052b0dd5715c889194fe17e83763ca6f7bc79a204c4c40073bc8a516f934c8",
          "0x1e7bb691e67410a24507dd9a5cc323c0f86f97b842bc13ece75d88c800e76049",
          "0x2b7558d08ab870d30b18663ef9c710f97ce4c49454d34c4bf714be8865b80c76",
          "0x14fea23fd7fadd53c9faf43e1e30c1e426668d0080e706389f5d44f8d0cdb448",
          "0x0d8f85ff6b797e9a28f4aba6019337412d7a778c3b7d7ffe06d4e20864491add",
          "0x15d72cb12a8e6d3c9c800f96fdad51cf24527768c9d1334c608084d5a0728cc4",
          "0x25f75e361c26495bd9e51468aea168f9f097874e562d727f030a8cf5d8c5855a",
          "0x28623a688686721ccfceda6c9d786832e02654859b8150e21cf036fcc154192c",
          "0x0031e707664a432be639934c2b2daa575750cc41f840459d85a6d6d7d8abbbed",
          "0x0fd555d5513b8c6945f97bb6f3a5d3b1ff2ac2d81a7612f12eedefd222bee1a6",
          "0x2a1fe11753b7a8d0977038be1276a355857ab20cbe4484b08b150a46c8e392d5",
          "0x22e7970da1008db5772bcfba19eab45385538e2545fc20d950a60f840d9702a5",
          "0x1541fec85090b07d8856402ea224e1bb2d8a8a9d1192b9a13dec81b8f69682b2",
          "0x17c37be74622c608e70301092edc69ebd19d17be9a0d44bc78944a309f221cd5",
          "0x26032c97bbbb5c920e1208592a4f5246b11d4d78d63aa195ce386285bd0db4dc",
          "0x2e62d73cc8ace5bc12f5e5aa236ccb730830fda62d6dd935c6a3c420fd9c40eb",
          "0x2f026a82b15872385978b49c6b6b487659e4f5cc394de6e6ee4aba26a104e229",
          "0x25d29761cc1e49b6614ac429444e19c070b6a24ba90e7ac726672c7cfc363270",
          "0x1ba97b48605e1754e7e17d1af7ee496e7750fbe6165caba1529c89cc67f27911",
          "0x275e5aed25464202f1b713852b4730275b1ce92153d025063e0a15fa077b51c0",
          "0x2b363e45da3ff37132430409c8008ec685b22ebfe8438df6d3ed4a787a762e65",
          "0x10ada3d922f994d88afcc40cd9ddf995ae2119961df6b1daebadb62262f43f2a",
          "0x0a39ed164286e39b01282d6519cd022111dbd0ff83ef1556269a63a010083341",
          "0x1c37d6085793a30c47d92caf677c0ce0caccd2982bcff18078a46b1148cf6310",
          "0x2552caee804699d4d6ca75bef4a58f7408f97ea307b448a5c40d311298562263",
          "0x072529903f5a556c8c51e143c97853540a956bd3b9502b1a43fdfdbbc66a5b2c",
          "0x1a9611de6b18894ad967a44f129f48af82eff2bd0fe40b0bbee63ae07bc8ab76",
          "0x0a014cbedf93be2a924b9aa3253e8f832845a8562d459ac932bc831e042524ce",
          "0x08642d914725572bbfe7eb7f7b45d917b2d1debd3c44d3636cbd6617c129b24d",
          "0x09f8138cf03fdd6bd110149c68dce4ded8d45206e8016fc7d3ce6e2b66f743ac",
          "0x1afaae2609ce7d15c7ae47509767687a58ddc2115367151d6f38d2ee3373016f",
          "0x1e273929c27ca3f6fe04fbb488fbbc1d945431fa69207100dbccdbe2610fc984",
          "0x0345fe0b8fd130b8e3a3b2379acb34ef73feed141b806c074621a4e051c149a9",
          "0x17a3a98a7b70a445a3aef301635e8e5e8b277eea1773061eb9c5364f1f76773b",
          "0x0b124c9ab4def719e49619aea6d374bb2bdd842d5b8b84eb55665334c1439170",
          "0x20acb7a69cfcecd60733426ae5a7472db9b886e2f11369aa9f0f9270440cc1ce",
          "0x137ac68a78893aa457ce3af79f84a52ed31df7407c5feb5ab4b4d9aab3d479c8",
          "0x2822e5e8243c20edee38cb142be3e7d7e005d274fc346522f531c1ce0b0560e4",
          "0x19c53be6b70cb5c79e3e420968b4548b3ee55dcde0ed28075945b2ae8f2331ee",
          "0x270a91c925ede45c008bdbcb162d9d532717577a01ee948e0a9913ecd2ef9d2b",
          "0x29ca3e6811d8037a309296a3fadcd7371e87abe21eacb37c8f4ac7c98f1d48a6",
          "0x2fbe832874e6a044a4e5ee1b63fd7da24910ed685e1dd12444b80c95f959b91b",
          "0x2b10b943bc42b1306ae3c0c962fac147f158d9e2adfed079f4a8b7cb836e998d",
          "0x06927353ce97f1a2c75b57aa42d742974a60dcbb13586f9999e52d42b7bca433",
          "0x08819fee01c9b7f8f1d987fc3f2cc70de7854ace6de0728ba7a0e7a5d721917f",
          "0x05504a16782e9c95d1870166d6ec853dcd2859d0d4cafa6d320709069e221340",
          "0x0a6c9c3c69e558408931240885e4edf91e5448230aa020a59721e94ee19c4b10",
          "0x1638a245b63546e931ee796d3ad7f8fdb1f7373169833aa6ddd4ca0d3499693d",
          "0x12b5ab3d45071d84539be772c9f468c8cd6efef151a3f5b2b52b86c47c9480da",
          "0x2f9d04c7aaf854180b7c9943a86ab766f1c61f8265bffb8477263b59999a4ee4",
          "0x11709a242657e17727f2429c6736ed1bf6c756dbba899aa4eae5ecb6c845562d",
          "0x029668f5f5c4a3246bc3a86f22132fc0cfc625666f99e640dea0e1da7a9b5670",
          "0x2b613d4804feabde47da71f26e13d61428f2781b9ce1fde088902decf515f322",
          "0x25f3892eb57862f0087557ea0e93867d2bcc0220f7da2bc073ca276d750ad83a",
          "0x2103f7a5214f40e2ff64474583cce0914d2e9a4efc022f07ce5cbd791f543271",
          "0x14a8711072a8aeb4e3c72bf7685120f2325b64f906e2c1ee31f6afad6c815138",
          "0x2d8200110c740dd51bd22f4267cab97934e5adb86daf1c2f0405c2781bda7ebf",
          "0x05b299e405131bb5631072396c5b57cb87f50d070f196533bc3f0506c8ff218b",
          "0x2595e4e223f843dd01b550c5532cfdc51931fdc340a11cad1019fde0843cec87",
          "0x1ba92bc78f26df3148da920c7b4084f015ee164662a5abb3c94acf36f78a957e",
          "0x092caefded5f804924ccf1e63543d61dfd570007a1052abb764983233cc63e4b",
          "0x1c0dfade3ec3d45119238c75c700b826a422ee02f45431ec110449f1f75675b7",
          "0x1da05eac4674e99b9546876461369aca20e289e67d052cce10fbf418b0a0442b",
          "0x05086928cbd0d49403bf4ad6f4c626cbd48c1d9c7a22957306f0bddce9da919b",
          "0x1d32f71e4dd99385a2929a02b92912085173b482548e1bc06efb3ad96fa31170",
          "0x18fe8945c081f1a9937e20359578cbdb19343ad0ac50435f26dc8193cdeadbf6",
          "0x0c27a1469d7c1bb60c6923587a81bfa0517587a3b0d3356826a45c3ac8afd4d4",
          "0x1a0bcdb274bad54e1c3eca1e4e14eaed3bdafb0846b4fdb41c0cbc6efa4900c7",
          "0x18c15a3bfe80e4883601664288df62171afead7dcaeec0fbd959b3e7c6a8f768",
          "0x23af2addfcecd8cf403bee8c4dca81fb7c978faf147c990f260f115b2d3bc8f5",
          "0x186efb35a6b23d406efc6237e175dae02de9c44e5dc2897d5633cfff571c939b",
          "0x0ab171e95c605c6d5361ffd31e76ff8e4eb82ff2da56d659c66902e9d392879d",
          "0x1226226d5541e6086fb775843787ca537dba5a9684ba87ec0de592cfd20e88b0",
          "0x246c77e6d2858a34a3ca29d3597611adf328a4a2211f74d5fd04dceca9830c8e",
          "0x0d7495cdf807ac3d6184c18dd9e858b250fbb37c11a29e6291c12540d5e2bda6",
          "0x230853ec47ed72d1ffff83abef03b5ff7678f2e104b9296d8d29430140e89702",
          "0x141d86088c6316ce0dc3a560961a50f0769cb7de216689077cf65c6245ee76a9",
          "0x1fd4fda571ea5db50bf9a375b7e83ee18dbedc37914b06646014a50092a81e26",
          "0x0597cc1432a973d83896fabe991e7c2a537045f9a8ac612ac766a37bcaf9c9da",
          "0x16dc93239b74eab89823aafd91397dea7a5c2fea07e12e562afe2a94e7f33cba",
          "0x15d73eeee6d48102a0818cfe70ab0f2add92ebb7c8d847922aaef02054280414",
          "0x227c8330e2d7a7de907eebe9e82f7264c16de97fb23f4bc0d563a7874bcbf578",
          "0x1b952fa7b0d9dc8e9f3c52a957468f492a2aad45cb2d4a5037a474a6b3231afe",
          "0x2dfe192bbde5da75c175ac3265857bce905aa7ecc585ad20f4997f67a5042e44",
          "0x18ce1b58bd3f2bc554b746e90f188a6705f842be29f85b6a672309909fec2156",
          "0x146d5f383b2efb9962e773afa4b086c164b0aa5306e537745f15680a85f6a1b4",
          "0x05130082aea77203ab1e2819d4704f0e9d723d06c4579b1bcff7b9e70cf1cb26",
          "0x0122d2c1c48550ade6c88d3498d7ba8395d44776319f12648c14cacbada6cc30",
          "0x02be0dfc2a9ec2844a58563f8f0115944e9a39a8fbccfc3d79830f4a494a429c",
          "0x02362b83ecd5ac86a908533a876ca1738c844425822fd0f5e0646c965e94cd99",
          "0x27343a0ca83b7cbf4cd78fec7c2bfbd6452859fb0f7b5c14f62391a8fbb813f7",
          "0x25f66e4c31aad3d3e8f8940302a771de770c855cb7fce3fb170162449950059c",
          "0x1728135861261e3f1995b078af0a0f1236eb457fc6201c5aceb8c93f87217b63",
          "0x153b4d75654c5fe604fa2fc96bbb6a0ef1240c8281f8c0b6432bf1a529f50eba",
          "0x1ef294fe797568f55253c2f93c4a32ab6937a1332bb1c412b8cc15e74b3b8ef8",
          "0x2a5f302c49a8c8fd6e4dce1e265bc6ec0eef34cc46136f9cca664273ac3d8eaa",
          "0x23215a1413633606a8c8f22ba642bcaa8fb559f7cd322cb08aae796735bd5270",
          "0x1329f0d6fa9d80e536ed120858dae6e51376624c7daae3ba79795a5525a6c484",
          "0x2664e9a98faf74e1416aa645b64589ddecb3bc2c85f9a89688af7db70ec60285",
          "0x305d940fdda525f49e235ae6d25f9d4471e396e7bc3a133aeece1e56eeaa7382",
          "0x1271af6fd004b867484dea1dd43cbb5d58d731dac6de8dbfbb3026c17331ea9a",
          "0x231fd9e11aa688e3312731a6a027ecc1331516d00d7e30788c63521aa9326251",
          "0x0e19fcb863828bab9d152e0504ce09fa61faa3e0a23c02480ef6f866655d575e",
          "0x13030654176b06afcb611203a2369a442e863b3c0d1c88b89cd4c7fdf4f9ef06",
          "0x1fcd60b9a522c7405763bcc95462d77c0a36b4e952c461bb2eebf1e842854559",
          "0x1bc1cc4f122eca17b951451c773472f0a3f6a57c185319ce1d2de0d19ba1f21a",
          "0x02c0318563dbf99ae636bc012bf310175cabb7663f2a6764cfc3d67d186a21f7",
          "0x1cbb1a2a490b61176f9045b4b0b60ec03f12b15b30555a3932aa3c1ffea6b3b7",
          "0x006796f10e9ba669dff948e86fd462dc5cd95ba8079b02c2b2b4ad1e62fa37de",
          "0x07e6a8fe4a4397ba709215c5ab272f3c541465cbd8e43653dce2f59cdef8dee5",
          "0x284e093c985657bebe96bd671120c92995bdbd2c991cdd4909309cc3722b5ed3",
          "0x0d2071dadfd269cea8740cc0299323cb6e1a64bf123dfe1af98a1787a6ca3c04",
          "0x1945b6f5b9cf94b95d9341fbb6b8b4b7b461b96386c1e9cf3c7c4e3b2f083550",
          "0x1576a69840a50e47e5ab4f21ab39d53190038594ec599700415e12c4692b4678",
          "0x1d9f7484194e9043958d6ee7c8a552c0d25f9587e66cd899d2cf029179641675",
          "0x1506003f39bbe412e1a0a4f2a57db29e29af2ab61006382f6a1d4ebb8c39437b",
          "0x2245f77edf9eb3e22d647853698be8a2783facf92b14b8392e7368a459da62d5",
          "0x1897e74c6f1bf3139060eb8049b95328fff4e9db9260eada1e55346dbbdece3b",
          "0x209ff86085273e680ced957d0e4e165c78bd9670a24969e83ae8b0db12638c3a",
          "0x0622ee9d23b0c61b05845b23853e40d88d73593ab851e8be3b338ca7ce8cf5af",
          "0x2ae0659e9e749a47e3e0d244862ccf5fd6fd6e1af0b28894b4ec72940774bd9b",
          "0x02c31714e2c67c045454653f1bdfa47db03928439d44e321232023ff4d2fa0fa",
          "0x1c4a827874bb4a455d790cd7a86672634038bafb12d3b8954cf3a3faa87ffae1",
          "0x134da7e19243eeb08e0f7e68eaba7641e98ec35f8ab77f134dd10a8adc8499af",
          "0x15f65369e51155ed42a0d50c3479d7b880cff87e81765a97ce8ad28b9de6725f",
          "0x1081dcae10fd7fec12a3328a60678c2d760133860cf30f5e45a0fff5ba95fb14",
          "0x28206b5cd44cdb7bf177a2e3d60ae385e3ab2c7c8ef9daa9b3dae35fbb992678",
          "0x05d9355306abea7a1494b4875f06fa9f81f4fb0b85524aa61b03aa053baf43aa",
          "0x0869ae8683287423383a2317ce58fcf88433bb546675d6971ca292a0f00aaf33",
          "0x0b07d8566ac61df9c2fabe8d4062d8fe46bddd15d08734a4eedeb91dc9873891",
          "0x025dd57a9bee5a30ef1291f0aca75d55f20d11f8e0f2e69704013830f26c22b5",
          "0x1c9e2eee7d79b79e19a01f617f37eb8fdfbe0420f3c5fec58491ff136b459f2d",
          "0x1a053731cddfbf2d58d723ba5d50f874125755c8b2c236b11a2fae3eb15d154d",
          "0x109dd67f06c490940396df6410636f6535ea7f2b8eb9baf8e3be3ae1da12b374",
          "0x1b8e939a3cfb76056a4793e85b1b42fd38059856c1a434ae7ec90be0407f80ff",
          "0x1bb4549873191701fc74397465ac489ac5adf990710f9ae59fc7685c489f2e31",
          "0x0d971a30765153417cb648298e392f4f61defca06a05b4e423b97e45c8ce15e9",
          "0x2c58f7231642e86db82dc34a11ace0e87c24f9a1bb8e9cd926e073f74a96a3e5",
          "0x1797d37d7ee35e50dac62ab43434d3c103c7442b00891dd3f8bf0dad7d7f44a4",
          "0x147b1cf0b44efb08f03bc4924877bf51ef5f7a4cf15e1adc57253a33f006c607",
          "0x097667a035e3b304702995a8e51a212813913fb94c8db886c6c4fadd5261b744",
          "0x01d653ae96dc57c1bfec7cc425b328e4f4a7e017621b6f528188d2fbc5ac8460",
          "0x1b39cd9f113388364c77f755bf1fa42b706870d61dbdc416838f26459f4a2630",
          "0x25cbdefd82649ce519688b4e4f853341c11e14eca83b70c6bd27efda86352931",
          "0x042289f519c5c7e22728b74ca92afa8ce890cedc07a70547fdb8fb7e467c8466",
          "0x1cf966e94f1d7c69613fe1871f2704d239e1804179dc7ed1301dadb0e10ee728",
          "0x2804d255b571b9ab3f54011b69fefc0772db77f529cefe27eb0acf1e4373511c",
          "0x2b274b23b66d9d561d057bdb7ad38a96341b953943a4bb361ac57f816b44ab98",
          "0x1637057ba7c5dfba78dd8e38a2e3a8a4141ddc2dfb41598923f66b5ef886cb71",
          "0x1e55cde5864bea5d60d7c1ed34e6036c007d76d91d0929e81e1929f6305322b6",
          "0x1690e994aa14899d93ff21ab98ffcae9692d7e3f00ca258684268c06b7c80632",
          "0x27df430f854092fea91a08eb7e40570382563b16c78c12b8e839e7e7e3d723f3",
          "0x262c27865c6ccb2920d7a8d7ef181136cd5f7788cae7ab9be23c7498d23d9e0f",
          "0x14d8d4ec65500428ebac44b267b322e41d5cbdcabc277ecdc3cee7838b0877a1",
          "0x1d2766558195a3ae3031bbfd302439b08cc85d608bbe36e6d8c9aeea2ea0b66d",
          "0x11c2be8af313169515f4a855d0d71e80eb6167bb88d3533b70f818eb0c945cc8",
          "0x20c9692f4a3fadfd0ae3d2f7a78ea300a4417696e321503b0b6aeaebae7e4549",
          "0x28cd4e2e7c1f3ec3343e44f6cb1786c25dff23decb785302820d0dbeed3302bc",
          "0x11f34dd9733bd3d0822c7635dc976b2cc2f6707eaf4178561ddc5d4f563a27e4",
          "0x02d6c790965582a05f8e3abfd1e069e414a1df5d86a52db0fb57de9201d9b964",
          "0x305025e1c03aaa1a9b43123fb9f35399c6edcf30dff7398320a78bda920b1ba9",
          "0x1f9a91691a4a3aa765c7303f4b7ab8ccacd4d834f5c8e680687053eac7b86323",
          "0x03f134e018dad8b80ccb8dd780c808d3fbb1eb2222c364a0a3129048259d29dc",
          "0x2d9cdc3b3ca2467c237dee666f37b7e2dc58dbc59e0be477248961efd6782b20",
          "0x0f437d8f3cc4dc487e8971b038a11324b7a984c85cbf698d2823b2c3b71f485b",
          "0x12413aa63de038cc0427b1acbd24ee2ce6cd19b37149c6ca761504fc1e39904f",
          "0x1e42cc0b2b4bf580173dfac63ba6210d195e078880467cdad8774980a186756f",
          "0x08d62b4ece35499b60d1beca4f23a9c3d39bd6798dd9818f95a9f02e70757ac5",
          "0x2924988422b3cf13ee98c513f4fe249c3c3fb944805288b50864c26c2e398875",
          "0x0a797e9016f8f52786057f1b2a3cf50fe20f1fcd98346a958e4bc1c50ee8b685",
          "0x063d8222baf254dad1667f6bdb24c860ea17a33121763908e8ab1e9c3ea48fa8",
          "0x1815d8e9cdcb9c3b7d19759c898b078a33dfa3a38f3c22f1ff4550363603cbb6",
          "0x100541e3ea8bf5921eb66951943b5fb44530076330d19c6ccc49d5fedef81589",
          "0x13ed4a0f7d5a26c05266535f8eeb1eca63e346fd7ef20db88edd1d1b05ac1fec",
          "0x217fb49a601d07a6e772122074f7bae116fe2061315966ee39e7b3cb4f51e2db",
          "0x1eb9080e0f7bb6f01b3b05f9c60c62e0bfa768276e9e59eeaeb63bbf06f5e127",
          "0x0211d02e9d453de842c6e2744d5ce6557a3faa6467cb923755d543abfd302094",
          "0x0cbd5f7cb609c7e5adcdbb25f6f0cb74da626a4254afa409b9d2c1961b4dd4b5",
          "0x13ec6d0550258fa91057b0dc06d8f00a47d40c05aa124dcd1124c59f4e22635a",
          "0x1258ca1e77cf9d67a8ba02d1f665bb405b388553a5cd9d6c43037d0824ac4bd2",
          "0x28c5a7824391b529e9adb062d3983826ee1e7bbbdcf2050aa24045b2d5acf8ef",
          "0x19cf73a54ab1f2e4421cf88acba44776de1741a0b317cb5e1e2012df57287bae",
          "0x3011455d11c4a1433e6a9f6ea9ac559527d7a17a0191686971b7836a3170731a",
          "0x17b7373ac5c3f3e20d71b349aff449c73d41f34f1d008140ed5829cb265548e7",
          "0x204a96353538fe08da8072b3fd97d64b245e064d9bc901f0c0a18efbaae0995c",
          "0x285a72987d0f0f228cc694d10def85d22ba358e744825522182daafb14f4c258",
          "0x2474bb9f91f6f5401fabbce0f102f974cdd061a5e57a782d5b239cf7f8925a96",
          "0x1b45841eab52a5105aaa42cf7f6d8acec5c06ea8a8b0ee13ed691477054cf5a4",
          "0x0a3a4b8bc77d458c8eb26352e92b685e00602a68dd4a9f13cac10e88ce972ce9",
          "0x2cab4c359d890a1dec1881d24dfdbff978218003735a10392cbf6049d5cd382b",
          "0x0d0fd0694da677f99a809f785ee1ef067751322c28613929a8fb7249d3e6787d",
          "0x29e4e09d975b50201c40a8bb9750d31f30ca3601e110d17bb21c5ff860727a50",
          "0x115efe78f8b2a72e8a213c24b1f5c6efe80f63470439e678af721a0f04221370",
          "0x29b3ccdf150428583feaa28461cf1ff1a4e49aa92f90c6f720ee2fa89b589031",
          "0x2eb754990f68975867e35e9589436414b88a25440bdc0886623f1a568f516077",
          "0x0989335bcfd41020ca856ccf61af50321eb1d21ce04d1581db0c62043fa209b6",
          "0x208a9857b859c3f620169057519050719043b2d42c669ffd4b681a1e52159150",
          "0x0e7f8469184f41a9eec6990459221b111b01c5dc0fad09a985e31576e0000410",
          "0x25dafa7bc6be0a1f9fd21cbd71a64e56bfa46fc7f27b2a7b135904a0f7672e6c",
          "0x03da2dc2049d07c4d185a16a29800f785bcf6228cc891f1ce30156fb3175ca1a",
          "0x047b5ff19a973402f4621e51ff3146513505687f720e2ec080b6e44c46881d3a",
          "0x299c01d6095a1d660d4e001a6821f800e50efa1366c25656d144cec3b0294c65",
          "0x1662d7fa007ea31e89e692ebf522794e2d106cd844f8f0dd5d0b5f59759e44d6",
          "0x00fe4cd065090dfef40d074039bd06228c925c77bced4b25c6eb2985ea6da5e6",
          "0x282e49e314c31b6d337f417e9da54ac7b686fa6cfc1fae8b58273353be658678",
          "0x0e6cd752537a9180b86fcbb5ba8571814c7780b2e486697b18a8dc3a159d9fbf",
          "0x0cc70cf2866f123a2cdf2cb9e8a238813b0112de364fde0552d38062320bda5e",
          "0x1aca51b94c7479850d3f67d07a710f55ed784d4cbbef6f045422b80b438e5d07",
          "0x2670a1cc090bfb1db16c528c1ad51478b58db66adb1ebbbcbfe69f5ae47ca844",
          "0x144b566d3667faf0eae3ea9c8c0e4be553a7917bb6f8c45938036611327559b2",
          "0x27b0264ff594fece22cd26e6092542ed28851a75d1f15310a4091bdbfed36fcd",
          "0x1f608a88e8d2dc5bb6cc91be2f474eac4c3a659e0bdd373f9c6dfde4d6a0add7",
          "0x122d0509d2508c60e8a2a6a83f770f27d24aa528a40427db069093fe8e78a064",
          "0x015ea3777f61dd2f8d4860b202d3f4eddad0f6a5ac5089705be0ed60135fd988",
          "0x0f0f1c69e52b1e410d49a46939eedbd48129808923ef9f05de025f993741a4b5",
          "0x16dbd963fa198fc9a3c230caab4580b34d25c6223d611351c9657702e5168545",
          "0x01d85653beac61609f08d4a988b85c581a5b574c269821e66b2815b31521285c",
          "0x09ff09f0cc9a53c87802865299520b8639f59b6a5caf06cb80cc80fe960950f3",
          "0x0650ae88754b4ed48d3520aa7771f4ff9ee40280b85d9e767d3e53ced36ae0d3",
          "0x091741b2a425d5a56b2f914bcfca7699e385c734bba606d394261b6367b10263",
          "0x2ef48108bbc4c7b67f1d00e045eb30906ede0032a9838e68067580f22c15a386",
          "0x11bda846a5e5868bfff65e9331e0bec764a72dba5549ac66179a4524fbd6e3ab",
          "0x2b6b3bc942da684a5812478dcee5f2bc0138395cbbd0a05ac6b04b6e9df0826e",
          "0x0e117fc5897aa6d7ce2025a574c8e4f1651fd95ff1e63c32df1fad41f2830473",
          "0x0d285c64565bc502acdaea74795a0a64a46a148b904ef986a7aeb3a9e6dc56d2",
          "0x098141a57c9c6b72eaa0bcdc98f203359137fba1bde27afa94181d755823c723",
          "0x1d113cfff2cdf12cf8353701521ff920e8d10489f477d57536b59c600812a023",
          "0x13bf98387944aed3e268d0ad15b281a82b280fd924b8d4eb43a05b23e0f36ebd",
          "0x1c84249a8cecd1361a4b66b6d1911635ade640f4981ace2cdc4bb85ae7199173",
          "0x1888f869addf2a91230bea0393ec80b7cfb4a4cbe7a2a049f74401e7479fe4aa",
          "0x257341d8632255d76f29cd7b33d890b0c54b0e97b8cd6897886b6e389a8d2305",
          "0x1df9bbfb49acc99c43203403c99923a6fd9c8bf7f9aa6cbb91bd1a91aa4d7e92",
          "0x2a288ce4b8fed1b94cbd37adc8b6f814a3254feb0d0bc687213c1077648819d4",
          "0x23dba7c996de6b3c227c23a70785079fd4232a17f19d0311d561395d993a4bae",
          "0x199231edf22878bf880df305412ffd8a3ce6a555b1e7e81c7c3c72aa02b358cc",
          "0x2cc3d9d1107e7a5fa6aa9497994316294c7d31898d80ecc3b782573d81932873",
          "0x1847e8e68d4c183f3094888dea15007a6bc6b35daf79decc9f0ce88b88dc3c65",
          "0x1ea791dbd9aaa3d2ad56e590aa7344514e45684ea3201dc9bba200a046c3b896",
          "0x0a38e9e4712de317a533e3c929d6ce749307e8849137e3ebfa2a4d0bf6c080cf",
          "0x02de42647c0232f7870c412596bacebda08bf27fe124e16f1585cfa9d1f61bdb",
          "0x208c7a7f4dbd4c02d11bb6840a3fd96ab78ff9623cd0a39e3df3accc03fb5dcb",
          "0x0ddd22d2c7a22798707187615a91f9130a66d2c0d7d7a015fdc35a68deb8e388",
          "0x2a90b2d586a6c041362cf2667d131fe7c426075013c33923b0c62e3ffa7360cb",
          "0x298ab2e353df6ba628421948a02952b2afda68c463bfa36050a7c1418a026643",
          "0x08da6d2ca619829672809813a61cc5315f02460d8b1757dc014f947b729e5803",
          "0x065c9c7619f718cded1a784f0373fffea114170310b3105e2628eed621a2561c",
          "0x25ceb8bfda01132364f07044c33afc4d14755edd1bd6502528c367497c2e1db3",
          "0x02facc79173aa070593579d64b0f35841f65cda3b47c4ae4e675113a9eaba231",
          "0x092f157ad123e65d991404a2704a91b23bcebfde142a1e20d88e13e8fdc599df",
          "0x2e47ea8e1bb77292c06ec09029c1d1245949fe39de87f4101338417dd3f72bf3",
          "0x1e39369419393b8ffa389a34392449d953a992d7afb0ba34af8f2159f1396536",
          "0x0ace46ad0dfcc316211a507be4e87127b2180a16b2444fa8917459961c030590",
          "0x2e25fe7c19d848ac780af912aa4299cd59a55cf679625fffe9c14d4fb994eedf",
          "0x01d8d31d97fb5ebe90c25ab3fb433f8a82ba9fbb4443af83c7549d2b7688c17e",
          "0x029561c80c9527ae48a5f605db61e69b0892e43741f27e38715ebe14554776c2",
          "0x19104cc8e39a77156a55aeacb90058a42b001e74298de81f2d18cc617760db08",
          "0x1cb2e1388605bdd6583aa13a6eaeb2fc9ecde1337ade0e56f3e2e3e3f81e25f8",
          "0x164b7c0e87b3e37cd027652e2fef38b0897675ad34baac7a777a78a5928660fa",
          "0x03a2c5c52f34b9d603addb63238347c204e9bb1e65fed2b2d8cd09428ccb0601",
          "0x143107befa4803b1a04269d030233f68d927676832011c7512bbfe2b22c35785",
          "0x0606ce26a1a3b7d8bcfadf00f30d4ff0dfcbfeb1437ea0fb35f918510b1c37c8",
          "0x24cf1337b43c827ea97633e387c7948df90a3c42a8f7f27a1efa5e079036f982",
          "0x1c26028b3ff7ab73dd2cc99df0ac3caae4a9f81be4091ac7fae5767e4436da87",
          "0x1e0e4d243dd982c611637d510f43ff32874ea6680c88246a053121fa0e302a8f",
          "0x00404f39181657306e1eae8acd510212389713698606b3c8c656b26cd4f2bb73",
          "0x1138aa24e42bc883993d4c5f6eb785a8c59cb7bb1200186b5193afbe1c2ae478",
          "0x23b126fcde502df569a036f9d65e651805ca040b0e017355c6aa990e1f48e8a6",
          "0x02e761239a389a531493fa699dccb3d86125533a4608688ad2f159278dcac908",
          "0x18e087059de0eaadb5e3c5c4b9279cd76dc3f6d8a0d060558b19c3cfded6a6d2",
          "0x27364f27770f58b6dba3d3f1666e504aa45e867b30aee59144a53cb281528965",
          "0x0fe00ce1679e3aa5f4d6b7b80e8e2022bc2f8045eb43a4f8fe9f04cd4eaee94e",
          "0x1afede9489f5ab94671d20d1ab49a5ae0aeea4fa29d38ee212e0a9cafaf5de05",
          "0x2fdb0d7e75731eda93fc931e8d8f59762e0cbe15bcf6e0a3ee1da0e899546a50",
          "0x0b74792ad4e5624f94cdaf5228d8f7b7641e759a25ef4e30e802e3076ad09007",
          "0x0407950b2453c974580b9ba314aebd49d89052a1d8eb2a606fadb4052f2d9ddd",
          "0x29b8d1ec888f27ddb52f8e366cb07a3829a821bfd57296df667b49699e249593",
          "0x25d0c20a9006bbabd4f5160fa9eabc648c7e41552a0762b5d350cc151d6c4020",
          "0x2f3540ade2e57f26ce36acdbbb4198cf0a17fcf04c6c926bc3283a11a661df51",
          "0x14695ff8da20904e07fef545ab104fdf0dcbaf5b69a3b83485048a0057e58312",
          "0x16c7f28531a7dc674e8f240e35d75b08c6673995a46ba746bc718f42912ff69a",
          "0x2e2c2616f6bc0201be908941c83c38dd7cf79c47805ff93bd640ebc552c4ca0a",
          "0x063bca2d89100a11021bec39f11590ec08488206e016257061ccfbc613357060",
          "0x0f8c50aba399310f30c201d7be6990a7b5061d52e1dec5dfb59f69ec93d7af9f",
          "0x10b6435421a2edb44d8045a51332b050f137e26b37d4298dcc33213225bf1452",
          "0x0da21a08e5f73a231b94e20dc513f2681bb15ad12f33bae3d5f71a4c0ecc97fc",
          "0x238fad1f6960d619947d509d97efddb3e2ef3e30f18a26642e282864a7ddb426",
          "0x0eb8c17eed2e330329401b5ba5966bbace115ccc893423b26f224fba2af1179f",
          "0x197f1200a29e7fcf3537b187554dce9edd225cbbd8031120c57fda9a2a2d6cd7",
          "0x007e59ef9a273220fb6709ec8d1b831069b32169caa98e7f32affa732b55b827",
          "0x08798f412ce2aecaa57a737829556e5c05bea822ce81f856f9cc095c6ba65747",
          "0x2c43f8adcc2b39e262c252c3309e5ffbd6ed736bc0ed1e45973aaf52f7e0063f",
          "0x08c1d017bcf1edd53e4dddc010f9b9979f7a0d0dc3fed34dbbd8b0efc49d196c",
          "0x21ed2f1797b5183a2719257ff3eb1d3bfa896e6119929dfde80fa34197627222",
          "0x286886b6067d627947891e65b36f8d4b7c81c5c716ad95ff44e911b0341eb0c4",
          "0x1c0ae38a58b0cd3e5df96c8e5fae5f9b19b7ac5dcb839edc4213a5fa96c95f60",
          "0x0543f286b8254edc3f5323bf6ca470ab50eaff46a75e096ea9a215508aa4f7cc",
          "0x25bcdafb4d5b6dd773d7b3cfcba40f8cc8db7675bc541d187c21537fc2c0a340",
          "0x28a81071826eb4f16615964306aa7b1addd0336e6158b30dec2773dc4fe7a662",
          "0x0b2ae92d96d1937e5d1b42c830388254dd27e60d512fe8c417b85fca8c9b03a6",
          "0x11aeb340ffe89088b98a4fee7204585d7db8423fddb1b41064b785aad0a2878a",
          "0x14157e2dab04208eee16daa67f355bdb04f7014036d3c7586cbdcc6c1430b82d",
          "0x154035799252f5d335eb15af6bef9e12d6f37e33b43d4c099e89e518a4187c42",
          "0x145ee4885281330b255068756690f8af3c52ffe3a03c6f53c101a841a7ecaf83",
          "0x08c60b040006eac8f019307afdeb00aa9314bb8306b8fa60f8c1434c00d2ca8b",
          "0x1e0aabe003e834900958a13b47914ac4cf8f89509c001c7f8ffefa499f31800f",
          "0x12a0d132f615b78b0777aa9136e679b8dd334137027ffe5ebb281214ebbe4a83",
          "0x03a7748c591ab7a91d8f25859e06e77c66cc0088f2bab04e919508933e84d98b",
          "0x2815a7d428f1abfa2ddd7b67c2e916e3cc8b2d6950739f514684e8115f0ef0fc",
          "0x2a4e69d67391052f8e2d9f09cf09b0f25261bfc0b0aa208b1532e2eb2573253b",
          "0x28f42bb5e8069754d72b97f2c08ba8acea2ef1c21b3aad642c5cb04dcb4cee6d",
          "0x20fb72c032f2cdb3caae7ff84a3892097053ad8c2ee097fce6b247450ecc3987",
          "0x1369c95af38ec514dda67ed9ea6eb0e18e0e1137f70e869528e37bed1876859d",
          "0x1c021f2449f25dc718673ea93e652012b14958fd9b0268c30fef793429b73e2a",
          "0x0ae3815ea26af43c33567e41f83e305d0179a059f89a228e824db1684c54964e",
          "0x05bd2be31565865033475b0e553be2f47c0f7b1216f739365469174f67f8f982",
          "0x2368da2866a5dd17d187564fbc2a4ffe8682afe7140a9d957046c2bda1a0f669",
          "0x213784bff6ef1d44d08cb7c33602666a4002aeae491dd58196b0bc9d731e3bfa",
          "0x1dc824be3362a184ee8ed97489333ad2c5ec8ac80fc29cb1a3fe93724eb5985d",
          "0x255b2a1c202a2851250ab9d1f41427e8031b637aee29ff6a41d2f16e235e5d2d",
          "0x0c7af6613e1ec2e006780fef74b37a1039dfe29c76f6374c811ca923962f1de2",
          "0x015536861d874742904cbc356a66f3033a43306e67c3379b3c397b8d73979713",
          "0x2549c7bfad45cb19310828ccbd3b5b80325893f3f537bf6900b37d96cc10262b",
          "0x17853e6a2be92b752149605e938c59ed5b98a51b5e298dbf0a3f42e785ec611c",
          "0x22fb9187e826fbc34056155b64241d195a021c199bce96140c45a066b755ed04",
          "0x0e01dbb02d04ded9921511ee0b41d422a47df1acfa85cce84341b3a1a415173e",
          "0x13ee7aef873f8a2b2d7612cd2ceb88694d9dadad37917e8d323cbf7ff85dbf13",
          "0x06728405a1d96e7e9121047c6e9e4fa91965cd569b8a55c98acaa8c7990586e0",
          "0x1b8d4c1d90f139199df8da04f6d098b38e8f08ff0815c7c50ec70f0f221d6b86",
          "0x1bf50f97a290f53dd99387bc9c3ffdfe2f878bb0ff7b1e4731dc38f8806d469b",
          "0x0708564cc6c399de0e3b96dcc06ef877f839229aaaea1526527b8abb7e8a1c72",
          "0x061cf4c2260afe2472093e2b18d5b7a63e023a0dd2332fc11cb9c77925369e14",
          "0x0c1012dd2f4168a4ee6c8db5c7b51c8f38934e9ec835d0fd12bac1afd23bffa9",
          "0x010d2c7b272f6b1d02160bd78a9fbf556fca6cd21c7bc86e23abd7497786ad20",
          "0x19a7dec681440da95b1866760bb8a48a17b491f71a61bd48cb7ecd9f0cf2a2c3",
          "0x2fea37daf7c788558782a2d4636bc8b12a021d680655e16d44194e88a2846e1d",
          "0x093181302b44dfbc064feb7ef479d1788c5b9c6e76f00247bcc1f4f28d87364e",
          "0x0d562f7dcc8b1a57b47e7316c2832470447d46b1a05d15fb87d3550d52e310b4",
          "0x031d768025b65139dea57c8234259faafe28a1a4add5f4de09fef5b0c53a800a",
          "0x0c8c252ec1046f288ec63ba23dcac68b914795281ee2dfce5c3128afc6799391",
          "0x249923ae3dad26470f071c56d93ea8a4c45d9ecbc335c18355e0c8961a8f37b5",
          "0x18feddafc99611ece003ae06d7ed3ca7d69a7ccd5adce377b9eddae5df20a67a",
          "0x01d64afdfde99be84d37faeb3740ab4844d5db1798346e3e220e85424e4e0318",
          "0x0fb8de6ca433e586c7b5e1cb0a380769e6bcecf78ae4d9e1c09879fd9e28247b",
          "0x0d5b17c9447052c898a2f4bb21ed827eb9d36eac34e49bbbe1830bda935f038b",
          "0x0f2b7d51ec7ea6577b2e733f03525ef1e8fec6bd4f25c1f579f7f655ba9327d3",
          "0x2b23d5be39199976493c64732ab655589e05532a79a5197d24e046c281c0dd1e",
          "0x191eb6a33f3e80fbd227fbdc436fb8b1e3aa37b03617a7c87587a2cb068fb2a2",
          "0x0bd19b84791c746fd5b810f68f10ce1f514ece00a0e7749537c10844ffca11ea",
          "0x25a91a2714a79060f77b2503f0d3070fbdbbd187d34d6097ae283bcbf4d65c0b",
          "0x2e507aff9f00820e21752e75690c619b8a03b1e2699ec7bc0bd550fac9f6313b",
          "0x0b0b051cf9526c4019612dd0fd2afe774a8b1e828db2e42fadaed6d26d51ea17",
          "0x156b4cc0466b953f9f389eff9a1c7e261e902ac034bd9d285559e9c58eb5129f",
          "0x02f8887dc7c16c111475131c409f22cdab1440eea684fb76148fac7f33aea4e9",
          "0x1f3a7c2e46bd4fc1786dd949ded2e2d33ee5fbd53130f87235230209818346b3",
          "0x1102546f1c65fb38431152174613608dfd17564aeae1764f1570f72bbf479950",
          "0x00cb2b67c1f4aeebf54e927ef903fc6aa0e6acf0d4b1427040e981a102d15f84",
          "0x16f7924c29a61d1790d23da54fa4dcaaf1e264e46d6882c85d4fbd86f2b97c2f",
          "0x1a8977e7f9f883320104bccaba7b6920d4fb2b3e15d5134184c8c06ffa9cbb5c",
          "0x0038dde93666a06ff6df51857a40218b6c34f368e7bcc52d4504b85a9eea9994",
          "0x09af8b7ec74f96740f8eda9f69ea72c08f5e2311e78c0633bff78876646d6ec1",
          "0x0f06e7643fa6fd0b016904bb1234855dae0604472aa1f9e7b12b0ef594780f5a",
          "0x10ffb0f0d659b17cab58b2e7491212a734d45b41ddab889beb65518cc2b2a3a3",
          "0x08393e0581bef9db272b5512d3d6ac16289a6d51a7e8fee8f0ca854b7e7968c9",
          "0x0cd919f11e3940afd0fe3b7d687ed7117b40100f89a60ba1fc7cf743962cf97d",
          "0x176cd2d5dd5039afe4f9c9af84f1920de7c83f1d663a3dccefaac3c0acefa46d",
          "0x1ccf20b79ddc78dc632e41c11e537e599b418d4cb9ab88a74101a27a668cd46a",
          "0x1f8cb61ed38061411c750acb4c313d2fd167fbadc588a14fe6a30dac6719a12a",
          "0x2de3744ef2d7114fd6bb58fb03d0969bbe92fbf4db49b636a2a48764183b679b",
          "0x152f8c47e86343d9780324c37b0844681b1a6c5b76dc7aa3a57e957edc0aafde",
          "0x099e633a5f55fcb80e3494c20e6c607ff11cdf92f45acd6134011ef96e23d4e0",
          "0x18f88c7dd5dc507f63264610d668b8da3b1c704358336718bc68ea22d5f731c3",
          "0x29e39b42c32c642ef36100451218da7b33d7cbe7bc5882561a3a4c2f30b90c2f",
          "0x0dabe6781251df0230a700efbfdf25b0776b5b55e2816be9b614c3433ea26c5b",
          "0x09a1fb48c7575cb215e981afaf6fa4e0f05949fafaf7ec3f1ebc1a6b2e0d61fd",
          "0x0954ad0d0b6b9c663b1936b4301194a9cbe677f9a38ed0b544122334bc509f12",
          "0x20d340bda271bee29f093f2a5e2f257580f7d773afe3fd6006fb5d9c9461d337",
          "0x04e175a9a568c9a3473226fbf67f3c8dbdf71891833feb516ed8f1dc952d143d",
          "0x16efc53ea0c960e6bbb67a4930b7714a504dbacea7850303d662a56189688c9c",
          "0x163642b36df9c9b99d6a5350222139406ff558c486445a57a8c200065a3f85f3",
          "0x16885f2d67dd2eaa6b6e6e4a1cb778fe5b38d249d1d668156c033e36f8f35bce",
          "0x2154d6f24acd0cda11326e279ee9f9e84ddb4ca4bc11efd7136ac5d54573a933",
          "0x162cf98c08205fb5f4a0e9cb76c65445b300800021db1ef3b2d7919f9c202fa0",
          "0x0a6fb67c2c0f3320e22b4124b4feb76ce1330f85dab89c4477acd78214f472b4",
          "0x26021cf74a02b192f0c4ee77938e4f452985f021c469b6e84f7df3dbd86535d4",
          "0x2c8b9704c6b41769c9059238f51fb3827a9fb146ba424e318ab359358bae0d77",
          "0x28fb6c843b7e89259c13e51589804ca40a10f5b97fc4185449b1a61a6321518d",
          "0x1e234c17405876154e1af71c2ce4033078099705cfcb718866b347d80ded098b",
          "0x22836e37162efc88789ad4a5615f8e32e16a05fb2778006490a2fafb3743a7b5",
          "0x28a70d2aff679df7246dba5fc5d8e401c7261129e8a1965c5c5ed57f2ee5a7a4",
          "0x20a5a416c4101fb1ccacb4f101ec93c08b8ad9f4bcc0cd34c518d6bc136d4d62",
          "0x084057a3a39dc92da1f3da1a1bee29679f343096287d1044dee2fe29cc88b068",
          "0x0edf44da29ee4186c3ebadd1148e1011b508aa94a544915f9746f75c57df777e",
          "0x1f75f3cb325a537b11c16002c927ff5d8c75189c632bfe66793252d242220d4b",
          "0x020acb68f015bd689779de6a6c70189e40f929ac4843d1df1d78e6cf25f6753f",
          "0x156c068f32e0d7caaa30e86ea973f7ecc4bc2d53049970c956b0aeda3af888d7",
          "0x0eb5c66c8630a1c3b1b67a287dc32eb874d7b8944f7e2e4b6d5f81ba9a86351e",
          "0x086432ca6c103cbe76449ff27acdc0c72ef5535b3df5eb728e1d4caacd3867b3",
          "0x2591a12a1bb2e85526f2b0110b0fda970337bff3c42b0d0e0921fcf12e13e91e",
          "0x04ddc8e152142c57c766b50c4c8baeeab6813467c1cbd43ae57c95b0f4b74cb2",
          "0x16bef300d87c6582954f0b2e5fb74bb04b7852b2d09af537dbb87f4c037d114f",
          "0x22bb40ac95127ed05da2e9c37f14eda92586b50485efb61bb57e7b058a5cc5dd",
          "0x2152a25e328616ecc63f9f625be4ad4ee37a296e5a584926f1c1e6a99d335fa7",
          "0x1bc5d41bad17b44fc5aa6950aa643ede01d373b0aedc703c26a27dfa6337d04c",
          "0x19993e2352fe907ecef8bd33e642d549f9784545e8aed512af7eea0a5703ea4f",
          "0x0a8e009ab829fad34ecb98660ba055ed46d9e19a5457fad0e571346d83207276",
          "0x0e5abaa3b20ebedddbde163027514ad22ea8b6452d1e0fdfe5d6c92ca18bcde0",
          "0x2dec3c17312746988f783b14f92fd900fb3bea137b9da241e2d6858dc7b691e4",
          "0x1a05b78180f3bf45994f7844bbb59f02538dd3a06a1f462b3a8586d45273ffce",
          "0x16d22b879334448785405b6e74e823fd23ce82e68db2b392bfbe3ca740c141b5",
          "0x0890771aced399845ecc5b9cec64a6fc925f28e39e48ea0cb473f2ad38b670f0",
          "0x2530f400e734ed8b165b590db1658060cb45178fc4a3b6a96bdf62437c4215a1",
          "0x15e0290d7ecc55b275f623a63521d3979777442a14f18914d1fa8361bbaec66a",
          "0x2047fb78d48665b96c4885e5561fd89c6ca44218f4aad4adf202f32a3e3435fe",
          "0x150507a482c9b02e9c8884b33b154f4d856228655e7b64d0470eeb92f070517b",
          "0x26098db852bfdb0733c07727ee94598b5b75f96170f2cea41b51088d4fceb8bb",
          "0x1969394fb4a65784c3ca4b1fd9d241648e6aa58bf45dadb5848b9b55aeb49dd1",
          "0x2ccd5ba044e09902e540bc58af998861195b8d1b96bde96f059ce2158b8f4d27",
          "0x0e241a1e88c1676b2cd2b48ff54a473d3b5e8c95da39c24e84375e74f7640eb9",
          "0x0d64f55b84a0a5249d7452cbbcd2657bc2cede899380169ef36acf73c6fb42aa",
          "0x276cf981b3c8485a7f6e8a85a0c37bfe9485eaffd46796829cd170df1d25f5de",
          "0x125ab705a0f35a6c9e70e37cf82cbfd1b74a47ce4dd8c636520ef527cfd4996d",
          "0x2edf2bcb182b6c165d77946a219a542afc9383e9976271b19e585cdba3b4c034",
          "0x03044593e5115c8bf4b42bcc7374eda1f336b1d00cf30d0c6e0d8b8a02e70b17",
          "0x2c9288d07b86474cbf24db27b74421dd413b90870cfc013f00ecc0da9d880086",
          "0x08096ddb7dac5cabdd02794e0653def787bdcbbea73661915b20b233b13b4938",
          "0x2ca0c65eddea643c6cdd2b617752f71c5b36314afb56e2d7733c54ed7dfdd8c6",
          "0x00720ef11b7868de6172541965560951e30f9eacaf95da183e793ac4405c7aee",
          "0x15775168211ae2c9505cdd3ce6188782d031648cf812d9eba2b24ceca36277c0",
          "0x0dbd7358505479eca3fe7ce7b3c75615018996d00992cd43bd2736bd8ee0fa6b",
          "0x151a6143a0bd9763292a6aeaf7c0992ab65ddab5d35f2e713287fbd672b9f6e9",
          "0x119830a7f1e16e539fd97602ddc967e4119d9a48d6e84281ad0e72139c0a54e5",
          "0x166d4955f6c7422f53e750084462bb82ce565161c78a71f68c06abfc80c5f578",
          "0x2bf7f7791ad848e6c8804113cb78a0a6dc5f1a947341006ddbfe84dbf96ecbc3",
          "0x09b2550da955c2746eb3a0014c116e67b061402072acf2cdddc84af76da21cc5",
          "0x03ae24e58f82a3e97fac8b390c64434722325b338c6de16ab07ea83da7115b89",
          "0x22ea98db27502e4142824a333d94e297e0134757f316dbad2371cc2f0ad18d21",
          "0x2d42020b8f02617d9afd0693dd8cd09000c02a94aaa14b35d8ecd808edfc1596",
          "0x0d948c0328d6ade9ecff1391cc926da7311bb4b311cd893a9fe917640b26e7c1",
          "0x1ea1c2c8c2824809bde63dcc62f6b06a149fd2b9bdada635a4c35ede26a79e82",
          "0x2e90887277a6e6e8d963799798c9993b41e1d65845c17840bc1669c3432c64b0",
          "0x0c850a86697d9a609d26f02a99e116c164f3d8395d3bd699f8321f7628077165",
          "0x16d89099db9c32d90e67a74308b85c8867d1cdf0ba3c97c7a3c050322f912329",
          "0x122b8bb74a1b8b229c491ad31632da8e0b90c66f52be1cffba1f50bd740148af",
          "0x2cbbb2da62a9525283fda5fc5782e4e11c0f4ef559c7157b83c599fa51c11bd6",
          "0x1644c2d0af390c7835bf9a1fec01ae087bddf1a21a3d988a75c9c5da6006acd8",
          "0x147cd2bae2e9b717963ca623cf2f2b7fcb95672d056c1d73d2af372d8dcd6cf3",
          "0x0baa4d0ce6331d92b98beb9c28f6afafa0b9c2ca2c194b9f70a6d3b628e3ea25",
          "0x046f9a4aafb654f4a6b9103d20814e485b0a00819f200f8b2fc4844eeeb9b871",
          "0x2e6e482813494b77a2d153f8ce9ac84f614871e2d6d6410a7e9e9a786210e9dc",
          "0x219aefe0530bf083338865d59e42657596ca68ce12067fbc845c4b906ae6d8f0",
          "0x2b93eeb5f5defaa2cdcf165c91dc4b2c679f0a8275e124d9a45e4ef49ba78419",
          "0x2f5270ac7581f2186ff3bcc58c6fcbe53c3a8912a5e2b51d073b0e3e2a5e0489",
          "0x10cdbf5f96b3ff7196f8a6caa0e8745493277fa659bcc448efde72b71e8323c3",
          "0x2fd3890b8256cb06009edc1ca614e5b89896414190c4ac912ddd2fb0a54547ed",
          "0x0e0158a776bae6cfec58654426a8e0874d2a0b51580088682628d85b8f628ed9",
          "0x11d039e75730946e1b43ff6b1a36ca08cc68efc163a44afbbbd181aea1e3f760",
          "0x071e4c48fc462575c67463be4de4c67c178e690f7da3a02555f124f722f28c09",
          "0x221d11a98eebbf2aee536ea32d02ac18d539ad54ee9172e46a232a010017b2a2",
          "0x00ba4e4f69c3496368a277ca36f6b2d8e740295843219e90cf7cba25187357f1",
          "0x300c4c6484de03cb35ff858bb199f7a84a414f0f728de84742a88773642d0aa5",
          "0x1c508d314cce78c25d37c299edbab30ed7524e1902b335bb4c9386f596ef3f72",
          "0x2383eaa5db4f7ad7418a38459523b2b795a4f151505bd796916c5e05c0b7b721",
          "0x095007c9bace943994fd0a9f9f2bf09f8e576893256aea86969d1bd210f2249a",
          "0x2ebea4c9470c5979655c311724df6a0e451cdb84cb2efb05830374b4fee99a71",
          "0x24b7e73f62f97c13ee370552f0fbe6ef0b5a6e647f42d95f3c66e31e0b0e0226",
          "0x0803599f8035ea689063376c1ab9acff62203f5e0c1ba15ecb8efc30fc1cbdba",
          "0x2ab4c0a9e9115cc1303530733bea83654fb3d8a8ad4adbbca1b37ad21f8d9b35",
          "0x10f10b0d5b7a21918f84263cd64adc10e54f8767ada0a7fb59d7191c31d68f4c",
          "0x238ee32e5ca6f2911047e0797f4fd2571dcdcd775a81bf945787dff83c1fcb6a",
          "0x1ced6ad5ba466f3efddeb749c7d093d5a5a24348c9bedb513de6047627ca2d29",
          "0x28429555e34e7b9d39b0f9b8d68b09c89cbc0bd61dd301aa951da42b77ab72f2",
          "0x1b3a4e3db4dd67a5df83035ba6e55aff71f517d7e6692238091ffd1da89a1655",
          "0x13cc2082bc604551ef4fd01a81a52261f7979dbea0eb84296f2f6416d57d460d",
          "0x263b9e3cd8dc5a4413ce8e8c573a8116de4af9642bdaaa35ac342ac8705ce5fe",
          "0x1ab39521acbdc88aabad582fa222d6adf5633cb16fa853e6f4ee0414dd8143ce",
          "0x0fc133010270202b550a0322e569a9653a21f034a8b305a61819c26a9cb538b9",
          "0x291875d007b5cdd415acbc76c69b6122c86abe51c18eea30136bf66571588216",
          "0x2e2f9329346d920a98386f2c0a367740e032468696fcd5ac6e2cc6622ed81d6b",
          "0x0f093b428c6244578cd070ca16e69b36b0b8e2a585dabe4af899efa7c5f7ab34",
          "0x085bc13b698239310b05501cd59a78e9d1f3aad161541bd43080d9fc867d81c6",
          "0x136222a91f1c9487f3ff320b9e3baa52ef2327895f414c4d4b2b8ccbfef82d0e",
          "0x2e9341e5aac4da39b3363dee93af0482244b47679de4eecb5a54655e11841305",
          "0x28988bb98a34d5195384445d76cfbe9a7cda979693d25caf6819739888cfda7b",
          "0x13b4e0317e3f9cc2f3f49f7dc14c971372518f2b053de35762225ed265cd5b36",
          "0x19eb35c7021e14e946225fac7aae09481548d0eabf89304a3f62ce915768a7e9",
          "0x1d37d1e1ec0d7f119bd33a5116e19b07ccb42a6bf7b129bf2aa1dcaf069094fe",
          "0x1652a1124b3a6fc2029e43dc24de0a2e306968b12092787e3d578ed1d851db17",
          "0x2d82e3d62258db1a035e60aecf90cfc35c2a68abccee846d6f30dc7be13136c7",
          "0x1717bf8ac6146ab14ed32dc7a340f8bc0165bdeee55222d4fc0d1b9b8e87313f",
          "0x2fea8ca2751b165005fc5799cb9c928d3f5719fd377ac3d5ab988cfe7fcd0b96",
          "0x13122020261638533ce1db1818eaeeed3a3e5461925dfaf4d1ad253d00c0ed96",
          "0x08e63b96916fc88aab33140f6ed477424caf1b792acd7ea43c32848088b35b61",
          "0x1faad0336f78a518e2209d7e85823be53ead506dfb0eb4910664121f4db6d7d7",
          "0x09e63f2c7fa18fdb6fa1c263ad5f6cb0c39e75741a94bf9f32c5984347369172",
          "0x0d5812bcd3b13051f2a5811608cb30968de4f9c36dd7c4f6d38fcaa9aebde1fb",
          "0x1cef48b1d61226b8988148159e826f942e93972ce36051f55d0dc019f9ebd106",
          "0x213d3f4a801784d43909b5479cd159cbd628baf8b075cdb2cbef556dc12061e1",
          "0x1377884a51544da78a20bca27c033d666c05179f6f0c3b57a144a4d7c154fe8a",
          "0x2c2028206c6a58ea6b3fb8bd732935d210439f6cfeb683b7fa0b5f2d9041f86c",
          "0x291c29c826514d2807fe656bc2eadb0a5f264411b1381b0d85ee215e4806a4fd",
          "0x2c7f267d39069e4902597c9e3348b84a950f91dc7eee91a8061785de0c231723",
          "0x1bdffff475973387eb8cdbdcb9adc7ba1c9f63000a333d6b5a77c5b9d0efce6d",
          "0x108504de6c323d7bd6c6a54b3c7b2cbe67e2f863a483afcf8cec4d66849e2822",
          "0x143830758702da287919107b796f3e2c4208537704b355ef6d7d4af3b16519c6",
          "0x20cba0f444c54b7d446e9546034760bbcb21e94f64d6b4c9aab41356da39fe34",
          "0x0d05f1101da898ca8034234c57c1b8d90a84068cf4242d3a4dc3ec6a71b56a91",
          "0x0d58c99e7396f36791b921ef6b65b06f87c391b66e774bf40da42af79368e78e",
          "0x2f0d35b918fbae52212674d2c086ac35ffef289d3bfd783e761838f119866214",
          "0x2cf4868270ba3c288f4de29e985d0117ef8f2032235b5039cbfacfaf95b9f6ef",
          "0x014cded55649259b92ac128bd6e1b1bdb71152644c4d818c1d9a3a0e3a46eb2a",
          "0x0f16f496633341d1709e144de29846f7fb1a40e41bb3909f41e791b749795d49",
          "0x02076608271804137e0c9f68c1b0aeb571e4d34da3954e07e60670e31cf4d691",
          "0x21415fd472789e80cbc15fbc4a5e3fc96567d552453049f3ba8a0a4158d8b293",
          "0x28d80c9d6979564568b87745409fd0c33e38efe056510874727cacf65e7f4068",
          "0x07fc32882a7484c03cdd3a0e24abfe7587ef02c1cc52b11c55ae3b626f8b0701",
          "0x2d8dd2efa9868ba55ade797226fa74ab88dcd0cd6bd94ae685f00d42383e5f8d",
          "0x1a986dc0a9c125037fa3b30ba0bb49959d21ceb20ac5d336b09597c422537ae0",
          "0x21f392183eed36e011b851311afc2caac6fe76cce1eb6ca42b9813702bf015c3",
          "0x14d56f1ce4a77333e61e10d44964474bec74349d22c209bd4c1e3c0a3df5022a",
          "0x2326ed65301ef1c24feb4e9603860caacd9c6f80683303caeb0ad7f26cab0970",
          "0x2a3d9fcab4c508b0725e9fb8520ed06b6d29b522e5e8af4e4626ba281ee85718",
          "0x29cdcfde40f6fd4b84b8e3678b51ed546be8a3a0d0025bf892357a9a2375bcfe",
          "0x1ef82bdad09b9fc4f7d84b1d355f0931b096ca3d0db7cec8e33daff2b4093a86",
          "0x0bcfe28aeb735a664a360120b09176863374c387d6c0fffea5870bc0ea877cd2",
          "0x07f3e3ebb0d7fb60bd576ad9e7cb241aa310cca0d5d45014964197f7594bff2a",
          "0x2ac56c23ad3b8667fb05469317023035cb87ba64ac066fa035c73837ac8df1ef",
          "0x1e2e9f7e3702fa82feddb16036b94442ef1611ca1a2f1ca2f47336f16db80f9f",
          "0x245d55eaed831cbeafe45ad8ceb4fcbdbfc9d0ef8ee6ff03e31068d0832398de",
          "0x1ea295decfda9c0a400df14483ab3dae5bf43987ed926a02df2e7cef2bb64ea4",
          "0x05bbf568249f3ccae4c98e2549dbde639882927b39e4f39bb7d05f37f6af0d0e",
          "0x1c1291aab9893e46d2762beebb1bfb97465d00f30da6cf33e860785874cad7d9",
          "0x17634d1ccd51f9433152634c359773fcfc9f93f80fbe65baa59637703646f7ea",
          "0x14fc8f7234f6912c40f82a1bdbce93fa1af8d24fcf7abeb0c2d4f5a98ed71c24",
          "0x27efdff5ad6678d5fc5bd1da7143b076598b90db77772a8e9cf5c5295e0af7b2",
          "0x046644c4e7022580e83eee330c7228469b7ec8afd154a47564f0ccab9ba89872",
          "0x2c00d457f72e3452c86c1ae3645e645d0fee2d34f5d502ad1b3ab4d0ee3bd431",
          "0x03d24d7d5f668e0c76330b300b3eb77767ad982a878f643ca935a00742a21ae5",
          "0x03de941df807fb1cbde0f88b9ec89b64c11252edddce5123d2443fdabdfec534",
          "0x13968ee75a666efbede2dcdc1cdd9a5e15543cbfdd3d045486ecabad362df82e",
          "0x2a49f11f36030eb28dbb1c123c00bc12491a461126edf2371d4787dbfab690d9",
          "0x0fa680c08661ce0671847eb582b5ebb305c69b6166a2d3d32dadd35b73c87fff",
          "0x06d5a0ba4f63840b7dbeee170772dbc060c4e7da78580f7f02dff8dbcabe2adf",
          "0x1f624813ff4e4ea551b18a754fb0a852be6ade91807e86ca6def238cc0f23f20",
          "0x104988ebd6577839a2b07a037ab4d20e2b00daeb6451e21ea61028b2b6acb296",
          "0x04e71dcb7afa2e832487ac7f13b79eec44d7781897e9075b9198dda984d7f7eb",
          "0x236f6b011d7b96496fa7baab4c5dbe743276bc974c0d2d17a81ff079a483ff20",
          "0x1587663e2b5d740eaef59e36292d85686b5854082cf903e4de4beb5340e015d5",
          "0x11d45895b6239ba0bf7d68ed7790502aad8e13c8b45d313e323e27432e2cbcfc",
          "0x253c79369fb2bb163ad88c751e81d0ed903e0fe6f15e12c0fcfa9a06eec12476",
          "0x18913458b59d37dacd0dc16811a34f844b7253e8bf4d7dbecebf97b0549c2b01",
          "0x08d5bca196a8ceb1ddb165927affce0e3e57e42b22a130392bc52214749297d7",
          "0x0df1eb022b44f3c8f358a7424021402033eb56d439bafca09201a463712f6bb3",
          "0x1ec99a4a3dbab58148f9cc3024da287f4083d70a91966a5c76b46b0a27bd651c",
          "0x1cef3c619c6c700bd295937063395501cf4e208182209f6718d57da33a23e66b",
          "0x28006478a2117dd3500711cf843ee17b97026884681a5bed0621c157f78a13b2",
          "0x1f8db17184e9aa39e5ac0306e471408a83154340ac6f9c585ed910d0d897ad61",
          "0x0b4dd727de06a0a5946961b6f5fc0bcef0263f7e2e5829ddb6e49008cbc1b16b",
          "0x217209fa8996d860daa1f9c210eca2580eb3f1cec5aabbb56bd901b3d9fc871b",
          "0x0f68b53bbb8bb4798d191608f9542849c18697dd7402db0b5f30317d2178befe",
          "0x0eef36b6a205fbbe8be6815a1983e6cd146e42295eca46dbb316f976bf0596e6",
          "0x0ea89f549e8977b2ca99be52e9fef5713a73e5a06663918c83d22bcdb017f15a",
          "0x2bb5f1827e14485da2183c2c00d624ddbc01deffbc3235878f07a04a47bed1bd",
          "0x2f630711a84b9a470356b3cfc2ea0b9e09be16dfc9a75086b4b5978b69e8de4e",
          "0x2d1a64e0411d666c0ef9f06b3eb1f0c442913ca621a54307961896f61fe74646",
          "0x15eb85dc380a0cb81f1511dccfaff8a5079ed3100907772ef076f64bb4fb1f8c",
          "0x2935deb4412873991b6220aedc3e923c05eb87d8fddafdcbe1da6ae476075aed",
          "0x212a58a5f2ac5530a2515434437538885218522ac412496ce5f85a9fefa2d074",
          "0x0dcb873fe2bf8ffd64fa76001023572997bde0937993bc9822928476e735561e",
          "0x0e39308c1281899d7150092d1f116e41b981232c9d096111d827592e32c5ea5c",
          "0x0a5679d09418466a7300e8a0a964f4d3bb922958885147b5decb1438b101cf84",
          "0x038a8f326cc8a51dd41092f40ea3aac4ad722a8744101f4068139c5d9115ebe2",
          "0x1dc0fb391c19c979337f1983b07d90ad225179d1c6bf4fd85601fcef1c1854ae",
          "0x1ffeb0fdeeb9c720e7be5842a019527689b3b8f5e3d63a3de2505a964223a292",
          "0x2cd6511bbe7dc9d2a8cc050225b73d69f7c2075a623fd6ff4bd024c2a69ad268",
          "0x21d4706590b1854d962bec4cfa56951ae8441cbeb1e4175f5d3b61b8db79f68a",
          "0x12da59528ab92ae9f0268eb1bda47594920e4f5a4526278478dd9a0107bdffaf",
          "0x07aed9e16edd41aace93c2078ba1333457676697ceb8d77b5833121aea63f06a",
          "0x13e9c52761d0fd356778f2c9ca94f6ac1c714324435e0105d419e112d3f42c7e",
          "0x288cb3c2e45d353233d2680366d4913c125e7f2cc6bbfd65069538d89f4dc477",
          "0x016af712074445c8af7578cd68e6e32e0f88cd9e99b3f46c63b84c8392468eed",
          "0x1c1d9b10584a446463b905d7194c780666b9aa00a781ecf1003a6a0c81685f7d",
          "0x0a7c876f83ab4efd0d042493681e993a66420f23b0dc6337fd8e1ff0bedeef7d",
          "0x1bb8435cd2e6fc9c768446b13a53fdecee056f79ed8d0d1d36e3a784cdbcf255",
          "0x2d90be1ae182c3f440b85fd6da69e21de9eb2929e54b7512216ddce08a7095be",
          "0x0c9de3a0dbd2d14270f8a16c486495ae5ad2d44c0322f0d990ac4a4e024bf575",
          "0x1e397c182116d4e00a53581aa108e5bf880f8fe0736e98124aca92873840399e",
          "0x20a611d4fb392c94d85684590ea0aaa38e4800d027650f823bdda0e8083ba202",
          "0x1ea1b882a97d732991805ae46935233eeb424f9363f9e5fe864d30237484ebf4",
          "0x13f67ee6e8ffc6ff26648bc6e3106b834a3354ed989d351f4f08f2796910d1b9",
          "0x035d6e11fd71458caa1c0a7f76828e3360ad2af2e88a7aa8e5e5fb2a6110a56d",
          "0x1254beb4738a5e8e50f45fc7ad73c512165e0c20c0c764b1747dd24da4b5186f",
          "0x1e0b231f595958977dd7571e0e6988ddacc14ac1fbe98ac784f8684a101f417d",
          "0x1d787be18d93eeebcacf4eb98f2226645cc1aa4354e6af4cebeace6b44001963",
          "0x1b629ce1b52348a9865abe18e6c537f88b2455e0f0de338cf51dff14e09993bb",
          "0x102b0b82afcecad50b6cd976bd3acabfd34ef4f57c78f5fe7b57127d166504bb",
          "0x2c4f4e1436d85e914162bd51bb9d13bfcaf9f9d30ef53bd75d8f659820124eb0",
          "0x0e5d628e75b9cdc3a9898c4722023bcd26c2307dcdcb74d097f4fe00bad021d5",
          "0x1898efdbbbb625982db0dd512e8540ff986925bb78ea970cb5d044c53dedd4b3",
          "0x2a586ae0193dc050c68a6340d6387b5944d21cb79566610ca15cc0afbbebd619",
          "0x2c8df3a839ff2b2e1071ff973963e163cbde5994da3700d24c0942a1fb8f3e81",
          "0x2c40e73f41f7ada9ce46fed754b987d77c7b9c9be1c866cf0e50491785f9aa86",
          "0x10a44419a271043be49ccf50d187302f300027363f20187925db8bdd0aa9cc5d",
          "0x28250cdc61eeed8b98fcf0f9a839b0cb299f4a80f88534298660902932b1e8c7",
          "0x1b01b6d43822237fa886bb86fa5d0adaecde3b834324e93a02571202d39c16c1",
          "0x2b780386f9f3da9b23f88dc7fa2615e3429288d9c5de4803d42ce69ecfb64661",
          "0x24984ac7b0d3a403500f0a88a73ed082f8762c1686f379d5241b64c6d1ca26c8",
          "0x2954829e72a69347f4a05b5e4bb3a3e6e5badc6f7b963fedf95c52ed5ecc488d",
          "0x083607f9e053a5c77ab95343c1a4620357262891d282195bcc4ded3dd788cecb",
          "0x27cdc8f0618dd378a7ca6b89fcc86ceee70a7cc73d29367d3d4539291b73775e",
          "0x1c452a7426b31ef9c186906b2528de2b6f8b264c7083d07195fee3240f0cf082",
          "0x2a70b8f7a4f98c94dfe478396c24c0c73445153ca6a63f4135a61a7a7149209c",
          "0x1ddaf2c29060384a64f142964f68c38ea9b2ddf14c9aef92b701a00f4d78c967",
          "0x18d763f5955669c75685d78bbcfd9923b1e28a6fe22d19e53182bae2e387a4b1",
          "0x15487b28b3f0687448c73f432cfca0db556501a9985db9782ad1f16011aa5584",
          "0x1cd157f6023cd720180e59db9dcdd1d6d6aceff9b6db1ac72284c0a54157bbb8",
          "0x02f2368f8d046b18934dd27f29bbff29c909bb480ee0fdcb7705273766a189bf",
          "0x09d13a02ee4793785933ced2ab70bb0334e7a6fe653e8d4ed9783fdbf9a5f1be",
          "0x0d66c61f8b505a8efd06a8659d1f83910a781182a4383b9c734f51200dc4d62a",
          "0x2d32aea4cc326f82206b91c986181f18ed3c3171a53177243f2dfc7471976b72",
          "0x0afde5f85a042ebe32889c6a3e00fb40c40d9a1325f2f418916b1a46e3e4411e",
          "0x29a3c3d0caabdccb6c7d358593bcff8dc2e0518a9e41ffad251b50d9b397cee2",
          "0x0322c3386bfcbea88f4c322edb06aa6d5924122d858df34efe6373c44b7cbd61",
          "0x1438c5871add7ac0d3a49acd828a005222ce8c8df43059edcfe399d90e281363",
          "0x168bfa7bf400f5bc0cc14388dd1780550980e4134701a2f21fe0eceeba59c712",
          "0x1dc073a172aa9728c523545245f9160cef1a76e4cf74b6eac7d113fdf911963c",
          "0x26c80f81e2f12a302e630e9e4d3fc4aa14a7ef41508e4b35a0b58f3a63809290",
          "0x2dbf4afaf4c5ddfb04cb3ae7aaaa6bc6244c57790a6939ec0febe2c17bce532b",
          "0x00905bbfbd61ac42226f3d9a1fbfd2e90eb04dc665e023ea2395e2b1cf79d436",
          "0x1c1daa03e2b5bce3607ff15e37bed1dcbb5e189b073b6c20c27ba16ee2aba814",
          "0x1a2f8e8d55339623c11340ae1b135454635c71cbd8d20b6a536a39ff736a5243",
          "0x18535c592e62581176a3464783cf099f6b90e5cbc6d80f12398708d7941ef453",
          "0x0029f6bc49dc5991c8c89c9236e0535ffd6ec13e23042bd27843a51f9fd2b369",
          "0x0f99bda8902bc2630a41884a5c477fe8ce7697fe86a28119d5a17bedb9ad85aa",
          "0x2936f41a19816dabc413275d943ef09f3f961b49e15ef9d671d119aa39e2b4db",
          "0x2b3e5c1fa1bca2cfe43fefffaefadee5d8bce97f52484ace59b10654909a3c2b",
          "0x2cf54da2864c28dc6817000aa815f4d585821780bb27fd6762ac6f8c2ce50398",
          "0x0318d4abded11ff442e3295eae5f62b9ab53c783b0509643843123b802d2549d",
          "0x0ad5edae189c9098ae537345a1d3145b442a7776370ec6fdb6cc33cea6789c6c",
          "0x0c02ec64e912a52f98bc967f67d74ea53374a195e6b8df2da1c0abf95fed1c96",
          "0x10b354fb05e07b72d7d655444cc964130e3ee7b63744981e3c5a65279ae805f6",
          "0x18135a3547443addb809e56d299d6ab71600ca6a67d73fb903c46ea1f88a78a0",
          "0x169b2d1c9533fde28f5b61725eb1db2df523c8a7f326816a48a06b492f7d0971",
          "0x0706cc6846991bfa50aa52747c63ab1bb357c7ceaa4b38a0b6bdfdc48cc745d2",
          "0x0f23a2df079a3a7f3909ffe89f2a2e5d48e08c81f56aba869b8a073b134c2766",
          "0x1bb2ed4cd681047a7d449a435b1412a1a54576d1a299d8307c9325d0d9576658",
          "0x28d41a2ac7b3c71974ee058c7223a0a7ce0bb5a1e485dbd2686bc1300b47e21e",
          "0x25ab50f20dd391b3bad83fff0ee9692258536da228190b723073d55310c4bd1f",
          "0x27b24b346de16f4f286a056a24239895adde11187ed5c7d11e7c535ba5ca6300",
          "0x0ff16afdd9da02815b98fb92c5763b49b0ebfb16bced629b8ff2d6371090c495",
          "0x08a1329feb54f08092d18db2291e91c4e17c7c09913fed4c0130fc8e7f75c9b4",
          "0x0cd6bd732307ec5314a14259d354bf7d277f05badb1cd07253866472d7e90769",
          "0x101bda1f28311c2977cd3b452df6aa429424b87cf47c92366cd45d9926a0abc8",
          "0x02c39319445999f80e7b80b5a38639a0cebcd5b0766f64230227f6809280ef6e",
          "0x23e7afffd0c6fe2ec95a394af2cb724aeb088250214c099343289bdf465d46f2",
          "0x2176e7a545a244ce4bc1a7c2bdca95312da62fbdd2bbf8dae347c611670ea7da",
          "0x1c6067731c77d01d3fa867e8dfec2b88acbc17e7ceadd706c58aae38254ea2e2",
          "0x1588b2582131d05ee20beca1ce405c949fc16292219447d2b73c628fac00cc58",
          "0x232f65838476e01be1287b72f8897938f0783eda92b9f4c1ebe8202eb29dc889",
          "0x022b6f2c624b637e843e74a76c325b05ffc2ae4614384e0f3a0cc18565624676",
          "0x1202e2c0a73b8a2b43469495dd9531dcc8072d16e63adc02923c50b141a184ee",
          "0x014e203ca64dc05735b33078ad83b969421b96aa9e8347ce2e522eb38886db24",
          "0x040923212b1b7e37c937793aecc233f202d6b7578fc6f52774b165ed6784e471",
          "0x0fbfc45be7c5f3901abdef853d2e6216b71835c365f0f97df2f341f0f049e92a",
          "0x27310155192b1726750c5bff7117c4ebec2099c98b0de8c553f58defc30ba318",
          "0x19c2594328dca95959c2af80bfb179d25adef59eaa4a74f15ed3f19340a08cc2",
          "0x104796be743633ccc53f728144bacbebf5a09b5bc0717ba33fa69def3f31cd72",
          "0x1c97f91df1d79a0e5b7803b2a59f15ab176a207d1ce3f686f2e322314bafcfe7",
          "0x0a24aaf916ce0d22fe01afdc5f96cb1c40b49c48c99669354fe2c280a33f8cb4",
          "0x17dc7a5303ea797184fb650273faac447284beb23e29339d3ec9d91d3f8c76b2",
          "0x2e1b387ef959f82a150f807dfe5a3480faef6e7f79d15ec65f924d0aed280a56",
          "0x1153c4ce1088b51359d71725823d163ce69541317610e049beba015f256c1fba",
          "0x0d8b8924cba44d571ef53912455227a5bffa46057018fb68314dceeebd088515",
          "0x151e868f5e19e96f6d2367228d388afd8c080794d0d5c77c763beeccac9fc0b3",
          "0x2fa3eb12a770e7837a8e690b715f5a811f4102f3f14bd30a308a13986a92d7d2",
          "0x28318e53a9949641761ea87af6c8159a0fb94915083d1a1308be8bb05dede389",
          "0x2bc3819053ad9a6656006fdea87efa94e4faa379e89c4c1d38aa12d0a141e9b7",
          "0x1c124776d2bb735283d4aad14ad82bfa8e821ec542aaf7065b47657757ac31d5",
          "0x2a000712e4a9bf5b395edda3092db0040d44a0346178aa0128997459874c4bc5",
          "0x1e0800b41ec9c392c2efbe25f5de7ceedadcefd12d437d874dc46af997ae0087",
          "0x2ab3b50a1e176957dc1f08dd47185f0ed0d9aaddec45c5cab796dd2d991e9e18",
          "0x2190a0c5576267156ec9081961338a471a0422d56035b8bf3a8afe7870a3196c",
          "0x03cb7bb7d3a38a7ff1abf8c9282298a5551c55d28e1bdb6c4e7377caa034961e",
          "0x13432d180a4b815ff8c3f3afb4250c99e89c9518417ce5e147440df80d93e730",
          "0x1596f4d7e5a9b9f5b7f5e1a4b6d068b6aac9092877b820ebe95a15c59830fa9c",
          "0x2b757032499016fc85df940d7ea78a6b6c8a1bef0417c976554640b914dc9b75",
          "0x2b1528bf87a89c542779e1d6671a269331a2b9a64b56501a652bef0dc5bd5099",
          "0x2fd143194441382b4daf486d159def58f1c9869aa0a3fd03abd5d9c923dbc601",
          "0x084e5bd84e9f5a3f8ac1a0be4269e1cab3bea75a651eb476b23af0a9436e9e10",
          "0x26c737750217a4e394e063815275f3e99bf87a6339e437655ce91f99a3f894e7",
          "0x0011d44a14a217454b7cb9b013a7ed9ee78d380846903dab930a9f39c072a54e",
          "0x2cff02f46b0ec806c47b7c834e0c3378172ca0f7719b62de17f598ef8f047731",
          "0x18d2159e3a040d8af39903894bc9ec51d49aaa6d5776db31f1cd4dfa616268d8",
          "0x18f0110ae1d067eef4dd057722e96be6616b6c5edaf101db529b049a4e6126e7",
          "0x2870e7ca2635b5c3f898656bcd8dd853991704e07ad301612f4d7bb174bed2f0",
          "0x2674f59ed1fde5bb303cd010aac8a91458bea65a29db9a163ba3ab313cbd6c76",
          "0x03e34b2f33b176b37d8e88dd3501772a8961f02a5bdb29814588a44988157da9",
          "0x17944c0c7d9146518157f9200092bc82bf2c5672dc8584823659b07a0cef37ef",
          "0x1267aaa77cd7199c10f7c2bc5581a42f3c7b08371e3aaa60bb423ad2e2729830",
          "0x0efac3cc0daa23f1e378d1dcbdb2edd6a5d84954dd00553fac96416259123831",
          "0x2872ef46fc5700461f9af029c3611400a0a80497b58520afb43794da71326a97",
          "0x1abf3fb66b933fe5c436b2e90dc1dbc6ac2ffa74cf60bbd15d183134f069b42e",
          "0x093da890a6a4163a094fb0c3140683ba9868fccf8e42bef0a51e7bd577bda0f7",
          "0x2520ca8de344289083f5d01264ff76a5ae776e69d65d671442f52a680242a44e",
          "0x08f3791175eb454942ba5e3fd7f00463eb88900ee9c053d105f9c838d29b1035",
          "0x04389b9fcf9b26a0d52a7a86b11f50e4cd49cc758ff9c1c9352481c2b7cf55b5",
          "0x08bfac675d4d1623f5486662b8e9a72fdb4973064d5cc6572a36f8691574cfa9",
          "0x2a8e53108a5e6fa2b0bfd2e01a859323491aee5cca45981d7168f1ad1dd42a5d",
          "0x1ea97e496fa619c52c19d5b33076ce84d51ed947970643b0a6df301102252a9b",
          "0x2921097b063365942c0d6a534e2a92aa408908b6897945ee787bce67e4574ced",
          "0x2113f871b713c7ab1ed7af63982cf46095821e2aaef61368eee133aea6245f27",
          "0x0421c9fb1ea7d058c01c2537e22d1c717e40c0396c643be3e7c029c055616374",
          "0x181c57d9013554eebd5b3e9a9c4a89a7fd55e772eb2fd4b2f47e5f015b52b7d5",
          "0x210fbc7fae49a8711b72744a25878d1ecf3a88401dbdc87e7620ef080e9b1b55",
          "0x0038a73037d04b19c3cdbf74c32cdbff1759dab57fdd42954a3afd9807537c8c",
          "0x1c4faea527a5a146170cc3a85289479fb22e5bb5ad2c1900999faa9080bbbee9",
          "0x20bc74457f7b36956f2759ad6a18b00ec602a039c00ca7929304afe1aa00678b",
          "0x18dbed8b1ebd14fcf2858ff2c139d26fe901ce4e8b50f28c16ba6a56cbd6c3df",
          "0x290e5f918ce5182793fee062e0ac82599a6039cedb0327c69cc35c484a60b52f",
          "0x1270f1c49bf05b5711299838acb2d77e4d5209d650de540d000fe0b636957250",
          "0x244bf00718449105a612fd99f81f8293bdfd43758a8375aac6447d67afa07d4b",
          "0x253c1267e1697769dc5b914a341b02ead358261047fda749eddcc3e6496ab62e",
          "0x1f6205923f15d6674f8fa3f5dcbf9b6ae3005471afbcd8571a0b02535246ff74",
          "0x197d7d842654c8e9582900b5b72a9bbd5b43155c039140646b08fed032afc7bb",
          "0x0dc5162814338dfbdc374e6db2f4b541c598de3a6832361f44003a8a88b13f46",
          "0x118c03871e753f7528b2c0834123ca8f43ca7ab37eb1fda534bbb334e94c52bf",
          "0x212a8c29677a919cfac2b9daada92346ae588bee142654fa836347239d23144e",
          "0x12bbf40d2464fac9e64dd04d65399fa6ef74f8528cf6a3aec23555a82af23856",
          "0x1e1debb4f76f3d7ac15633e36bff09da18df1f9ea883af3bcb5ab4d84b4a798d",
          "0x00ce98db1da5431b8dcd8adee704963f8e89a35b3f020e696d79068ae3cfb02d",
          "0x21944627e60ca87a770eaddd5486c15ca5e487f4dd1ae6ec2104de83c3216e86",
          "0x223ca483774a7c5d4f1ce388320e1d5f53ff95dc5ce53442aeed94bc2625d392",
          "0x2501b50c7e7f729c7f4d896501e294dc91c266bd2a6dec0cbb09af8a13fc37a8",
          "0x2e438c6ef07f9bccb0218649a91da9373870a45ac4524c6cbf073319a2194fff",
          "0x20eb17b53e680c2b60d9f3d55b9dcc8b5db59e04b62afcb968cf6147e35a91c7",
          "0x256118253984eb71f26d781504b84d8288398293cc419aef59e8613c9fafcd42",
          "0x20bc1706e7de27b979166c50f3b4b713aa07a5b868f5fcc9da4faf7a066feb44",
          "0x28ba38a4827aa8ddf9349dc4640fa8017b0cacdb456a901065aa6cd3617e17fc",
          "0x0561f8d6997b836522d4f18603799cdc60381f5f65fcfa7bce7620b8fe8c7462",
          "0x0914871465b2f0f3c83c416535a525082f8e6558b54de301e5f4edf52bb6aa8e",
          "0x160e0b49d6bb20368b2a48a20c55da0d2659a94ab59f174de5dd4c13505b04d3",
          "0x0971ac2fe1f38483d27137f792f6bc0ef51108d2a87877edb01205a23a18463d",
          "0x0db36e959b2089b379088932fa5251e65d4ee1f415ad497f5677e69d620c3f3e",
          "0x260e6baea06a53e7947e163f0fe833e512802f7862e8708f575fb6baa7ed6ccc",
          "0x0103e7c9849aae12c3642ba73872141c0bfb65be896a6ce0f45ac9ac8d746ff6",
          "0x19853a0ef0c493811c3168e292855f690100b73069bb50dd32dde06c96a4bbb3",
          "0x0e2823849ec0077c2e8cb25046f6a38780e943ca3affd973c883809e227fcd9f",
          "0x15669e10f37a3d252b28f8c05f66420a4bc6e9baf7a6dd7032838972bf7cd9e8",
          "0x1da3b467c133912c54fd24e00f2916a91d533ee46e68fff074d1a1467179bb9f",
          "0x28c8aaa806b13f8e240e947d48be89c609ec24b42ef9b1b25916669eb613f715",
          "0x1287309126dcf2034cb33aa0d01b7e5e1b020a8a08ace1bae33530d5db8cf15c",
          "0x273d73d56fc498d1be414428870a92f0082658d381013de76cc13c80a2cd8de2",
          "0x0f73e29149d0fa5e27ffa53e4851187a653f2c5b310ede6b9598e4cbbd35a5a8",
          "0x11508faa2ff4f86a4ecdfec774e9d3f904e04d0fb9ca25b99be310c23dc74bf3",
          "0x08ada36165c3a78cf93ce4de9c7e13bd9fedf22b0222e5e70907c176588e4966",
          "0x1a649f2a76121b00a1fd7d4945e391fcdaf3bf69443b861fcf15d923a45658f1",
          "0x0c7fb8dcc2a5da940996877b67908497fe074a98aa8d6008041bdb1f4dc6d6fe",
          "0x0a6a254a2574b86867bfa9e5055ec61826368c028e52693242f63a83153abd3c",
          "0x00286876e2f3e95927a7dcd76f37e4c937b4c5e274bf123801f0569bfa6fe34b",
          "0x2095c2d2a9f23395d77f1a86179c512dc1301d549996a3250080f52b9704c8d2",
          "0x2ac90aff52b956782ca8598cbb2b22a3285596b5891a1f60e141012bf2812ef5",
          "0x114e912fde21fbc12348be91e0598b057430bdafb0b4eb9cf93e67f7235749a6",
          "0x301fdf0c1ff5be9807b51a91614541bc0696cec7fb16a503029cfb4704d9696e",
          "0x09a579c36f8bb8fe12c0de65c24ef587ca40796c850053c022fb015fc6bb072b",
          "0x1c6f93d553f9e4f96a575325aed9682a53dca61b88507723b6d2adf2cd683388",
          "0x000ed419728fa31c55c5946db446b7fa783f8af594158ec60ad8c1f66893c17f",
          "0x19411996cb83bdd95e61aff2e6d4a57be99120783e41fdc495f358c98226890a",
          "0x2a1eea5321ffc604f87d055b650ee63503584495923a451b32fc241ac114f2e3",
          "0x21d5fe87e3905b6c19c384d4902bff4e573ed1df960100fe2f630f5ac7249636",
          "0x222da21f4b7c807ebe8f93b67bf507df715f53c3b2ba7754604bf93aed23a7ce",
          "0x11bcb33294e5f8e82bfab58152eaa2b91ef6352a9d0ba55bac003dc735172629",
          "0x15f62b8e5ac177e7c52faca91dbf24e6a90edbda53ea0c54d6ae7c38247b24b0",
          "0x1e329eaeb402ecf26259a1257fa85cdf1078dbd858394c06dbd1e47b988cf257",
          "0x1fca943281035ed71d898d161ebc246f9cf04135c3255cb87cafc6e11e0e715c",
          "0x21127d56f6dfebd40f026d758a4bb8591d3e1d48c12e28753cc71431a1db1ecd",
          "0x06a69dfdeb9e80796a63b4a698266093e1ba7534ebb7e2b0f3ab58751d0cbf60",
          "0x2c0a57a5cb496459e547d4366e34a9f89adab821f418b9a6c70aa1c61512ce66",
          "0x261858f737fcd0820151966863a110343b6065926b133870912c595d0fa803e8",
          "0x074962d54f26a02909f99bc37c93ef70043e7cc51e773a5e873d3860c57fe9e2",
          "0x297eb20bfffbb3c3dcdcfb56f0b0e221ef28fcf4faf052a5284c04bf776a0873",
          "0x1b8c711b0a6109a9fbaae034c0df650c32dd80cfc5981816dba5a2d3ba884246",
          "0x1872c0cfacf2bf6e42d11d52d28c306fccd53c2575a9a2534b83dd27186213a6",
          "0x09e802063ab8c0b001265ccf9e5bcd9a83de0f56fdebd385ccbf5cbb5da8566b",
          "0x2d0177d9e97ae16ea923bc29c3b34f43b9743bb04e0af385fe4010eb92b3faef",
          "0x20f64ef9f3b9143a4dca77cdb2c11a72f8e3bef8cad37a6e07d156d982d36ad9",
          "0x14085e315fd11bd4311613b563658e194a8de5dce828d0b401974da62a8f5953",
          "0x1eae390777228c03ebd563fc4cc11ee0ded718d0ada8ed327d4cc09a3307ede9",
          "0x06472d3a9addadb7ca55ad8d286d7ef0630ce84fa631832009f2dcdadc315da6",
          "0x00fcdfdb353d3a99bf2c213d9a687d0321844e2371a5ca48bd41f7b25e96b6a7",
          "0x224c451f7674579be04568957daef86aebfab8746b8d8d68cbb5d4e2c53019e5",
          "0x0e378f20b71ccdffb0b20149df41e2832c57bbf385e953f2c8f55fd541291a1b",
          "0x005edeb6a4ca7a6cbff5c5d92694bb46698d2d476ecc1787904863f49914e49f",
          "0x115bdd6b5c9385955a8a20d244c4062b08eeb78eb692ead7893482b00beffee8",
          "0x0f6a5a9c39e7623c4583d9b7215dd4e3cc97e5a8e240ace0e8c5fa8343060ef5",
          "0x2aebe737741ada0dcf9980e84f021506d5f52f7a4082f0e97d37940123ad0bf8",
          "0x1b1ce923fec61ff8da2ac4ac5d3c2792c9a1adf90395d8c761aa96735a38a266",
          "0x1c221671ca78f00f58d5d5439c0d11bff3b9f74b62e40770a798dae970a5db24",
          "0x15770a93016e8761589b6d6e5bc57dca84cb91156222639139acc6f25668ceb1",
          "0x0c530d9fb0d84a2b04d4fd5d2345c5c587e860361f808e5d5e60d7f6175b31b0",
          "0x09c928ddd310f013a0176e314d2d76e9487c5631082dc4c832b183b143630782",
          "0x075919a774265ef6248bae80704929456314b2a274a44d8be22c1a1747ece847",
          "0x1cc025b3a59fbd993318dbd65f22b4418faf8a597fbe9d9c46262f5b99fe104c",
          "0x10244f0e95bf93e832fe52e49e1c05830f10fba9136227bc7bee9ca10ab72667",
          "0x27fc48c5fd8fece4851eb5fab288d4fd41b3eb0cce56827dacc7a3509e4fa4c7",
          "0x219404cf8c7feef751db9e5d2c4db1ec96ee66701e78422f57b736faf2593398",
          "0x02c1636d612ee048e2df1f38dc67920abd00676a977af875ae66ea5d5277a134",
          "0x131e408587a1b372dcb79c84d4a9327e4d1a93e225e682f5a8c1e6ad0f79b0c8",
          "0x164064b05249b6cc87d1edafb21c8e2bf177f979d46b68b2bfc6d2f9bc636a39",
          "0x1a32d386114cf8ea9dc720717df855af4106533ab7e427da3d6f8091ea695905",
          "0x26139768d3bed1dfcd575cbd5c61fc57dd2cd45b8f725c25dbd87819129f23ad",
          "0x1d24e974d3c14d9a37f65a36ce2a2a593f321cdec81a40a58d65f12da202c3d6",
          "0x2569aff88e4d3f209061cb023efa93c26a627daee66d1b67b99740682a057fd7",
          "0x10b621d20c61e70b3292085937120b9b28c488875ecef4bb56ecb134e427d5aa",
          "0x2b4419af0353be507f3d3121275f9ce9a1a3c84003f47343972248b5c0d2f1c2",
          "0x187369785670fba473da72eac6a6b825fd4581b5bd52c78420cb246865845bf5",
          "0x2103a328f4a2673a0c329b136fb7f008d1a1f005ed5e4ca26db74d4d7f49fbcb",
          "0x0799c7bf30075758b400e34108557143c4d713194e2dfc6d8a50089b1cb462d8",
          "0x20aec56c0e5b894caaf4e537d708ca7f8fa1e8a1de6009a7a2fea43a70519234",
          "0x2b839e4cbfc3bf9594e893e041989439863027056db91887c2dc09373f80cc1c",
          "0x095c1c06a5393a5995870dda2e65b90a20433dcd97882587aac02cf8fd0442c1",
          "0x08f2cf7886ffa7811e14cf8b4f5ee8ca28196b83478ded3719c2cec9a2b4de7e",
          "0x1ea2763d97a919bc44c3fb92e61437fe4093253c47bbfb2a9e55b252cf7f9f27",
          "0x0c8e9f9166ac72edd6d7cb80e80227cccae1d2d2056d6a856a90455f56fd7067",
          "0x057bb346af28bfd4bc2341d64e65b1a5734034adb3e1099cf9fcca79cda9c803",
          "0x070f630af25efa8e4d8c5e35861344889bebc7ddb790014113c1c2a221e161ff",
          "0x11d35bb72abd9000474d448fe22416c8ebfa152c08e6a0ffcfa2217fb86e9c14",
          "0x2e486100284930c2e91c1d00add9c6c98c3114739b13f3b3f811717372c25a26",
          "0x08c39ff6e608dceb35123f2d64d68b23c4a81681e5b7d0b8b8407e9aa1c50ad6",
          "0x270aaab5852da02e7c1e6c8167739b1d719f2da3806118fe66b08b510aa1eb9e",
          "0x08b07ed9445f3d4f9d5205530d7b6490440653070c6f4c3e38968e82b93ba584",
          "0x0666b480472adb317f5b138a92a4d295127befcfb83b7660681d41b96c408ddc",
          "0x2e06985058af9e113eb22379cc55b67a15e193613385bbc4775a68c6c526b6d9",
          "0x052319c919c1954c4d38a7c77741949a839b3f188619f74093e3180d144c725b",
          "0x2f8c80a8c321dd74d85f2dab2cb172a0824b990ca63765d6e17b483734c4a4cb",
          "0x229b17fefeb71703a7abe80495ff7ddb6140153f77e751fff2900afbe19114bf",
          "0x0f9985aec263c3be8667e4c93dc0d8812f874cef6dc321827d66fd92681ae9ce",
          "0x0af15c566b682c10cc83c3bbaae3ce621d1bc3e0b45108126cc0df99c6225c78",
          "0x03177754c13726a540502787f03dea917c9c0960fb205478714c9515d6a10e87",
          "0x22c84885da685ac6b74e3914bfe2668fa08262ef24f1adb4c55ddda0cdb580c8",
          "0x113bb87961b449ccf5595cf68329cb19309e8d065d013fdb009ab0e90645186d",
          "0x2abf19247afd7fcf68fe30989a9a370b99a1f12df9b2fae30b6cd3383f8d6914",
          "0x2fd4fecf4e46d2fe72647bd708f4bd4809ff961d89dcfd2ae91f812e0a3b9fa8",
          "0x17a17efbbc358c53fb41930002768de9e1398f39df32a8b06e23033114c7f9ad",
          "0x02288e2ab2b87a12d55a319b351d9874c32ed44cc16d93a6a63e0852f0f64697",
          "0x03ac39f86700b6611f1192263d9442e900d1100f26031bcb8a8e6255ed1a9f4d",
          "0x00d5322a34db3009785366c0060c47d29a618fe0b2cae945def9a35f3ddad1f5",
          "0x09d9a76e376e194d053554a267346b7e034a6d13447834db68d1c102367b92cd",
          "0x2a1e0bfc7f387787b93cb39bbd51cd9f023ae0e738abc43de81cbbf122c13e5e",
          "0x2c9ba1265abe8a7b57f69f8b3632bb13ae772ba1cc98ca033d5369664c40f5a1",
          "0x0e82b784df5473936515686de5cf8ea1a86455a68b3b55abda5857bd5527e3ee",
          "0x03ec77e964b4dc113afbfa1dd2eeadbb676f73e27899f033c6faca223802485b",
          "0x0a6f9edcca76c77a5d699a217dd7b62d0d704485236ed912ce6b8de2293c1e23",
          "0x1b628084d0fb8fe76d6353bf9482b59af97bf748a6e8046e8eeca9a8a9fb0ca2",
          "0x2480fbb04baf093bcc1c9162f78214bfe14c3649500d798e87477ff71ea99159",
          "0x2c92c181e91624bcb26fa27b6c0046054e80aebcf342de822df775333e2b1b33",
          "0x22cfbcf84ac83392239762dcdb03e8477b261be19ef57e2322c043c08935d271",
          "0x09aa0d0fd0027d58acacaf20e551e76434bd8216eb1ea6b317d1a6d23a53b1e0",
          "0x144d8e55408c898646f2e0ddb6ec192b5e4169bb312591d2c758b97207409ac1",
          "0x0f1a39ddc785cb0881420f42eb4e6b5ecc10c81f490be17f815f9d7f34e5e54c",
          "0x1e873af18a55663a04c84470498b245b46ef6bd781fbb2e4bfd4333ba143ab46",
          "0x24a4779886a1ca1aa57204e1fb50e033e31c7f99b8084d285b0b9a933cb0b3c7",
          "0x0e73aedc9a4578255f1d0f8527708f9d31131205e1d6140ef9757e8e07d593b8",
          "0x106f27e82457b91e9fa33358ed95a1fbaf86aae5d4ef9954a04dd4635ddc4fce",
          "0x1a952947fcb77c0ab07ecf32ebf40d96d40ec7fe87b24eb92b4c9eb16f2fcf7d",
          "0x197b9ed1a8ca8487b72d1e8cce502da9d2ba78c3f22cf7c05d8314722fff72e1",
          "0x1608554bb309772cbc9a0aab914c4e2c400d72f9f2e5dad466dfa1dfbe05d5c8",
          "0x0848283bd8201837976d43341d43578f9b22609ac2e457e02664d34830671e36",
          "0x14beb77cfe2854019e05160b921f96119e94d616e93a0607936b450a3e033b64",
          "0x034a1494914e7698185d58864582bfe82fc0b7de6ad63f931718abf8238d2805",
          "0x1c319df3b2680bd8c716696b5d2cf503e0eea5b11d5dde8e95217f4aab6abd0f",
          "0x12c29c95fdebf01463121a20eb33a06425e914aa9ec61bf665bc01ca2258e1c7",
          "0x1bcdffb410b009efda67f405fa33fd128fa7cff3730b3860df29b2bd561e1ac0",
          "0x2e8a9b80ccd2b4387f0ec24caa0ddafb7b0fee1cace342ceb18e91223eea76e0",
          "0x23149eb655b8640b7fe76b1c0d3b486c2749e647a8d20f29b5f92b2fc64d7aa5",
          "0x2a650695e37bfea8acc998914335ff376dcd297583262384e27fb805a2223f85",
          "0x290a2e64f4e1f17bf39d5d4519a152801ffc2d2035d48bba0eb1a8f8238e869a",
          "0x179786019d36917e8bafa6829471c581d532bf10be7da1e8917a5f70a7724e13",
          "0x22bc68c0855eedfaef551448da3b639271008d0633aa9e783fae52404e7ddcb4",
          "0x1340d5b6ce060075459a84ff7f47920cd5318f9d127f9e524dd1f7ac1d082b8c",
          "0x0942c9ad7de555dd976278aebbf1d22f1beaea0e5ca2bb5b0e6e679f2c7b6b22",
          "0x0e65bbcb5ebf23a40d6e25703ae029a31722b64a0d210496dc17c9014f9df451",
          "0x0112a919bd0ceb8455775ee49e2165b5291b9e4e400a75e977ca6566e6a0bd69",
          "0x1b91c4d8a544369b0daeeade27a0c2966b741a2d46131d3105741f31df20ea11",
          "0x02dd85797e168d21fa7e5b96622766ec0c02246bf9ee328a915ff2e2c8d9742a",
          "0x16224724314147d479ae0cbd26a381d4584a8acfd3185d4439b527619d3ae4c4",
          "0x2fe84e5971bfd3a919fad04214acbc50d07f3015d97c28405dde92827c0253f3",
          "0x2cb6734e19b3e02c46a803d5616730ad6343d3d923fe9ab98492921dbe14c3c8",
          "0x1a857e17f2ec1b4c210adfb6ab70c7b3dd0ce6ff603b7741dd2a7eed474453d2",
          "0x14ce63a350d29e5dc70f9ea2e1dd0912f8d734d32833723aafedabf41beb5b92",
          "0x0131d2e152c7fc3e65a89f4a22e737335ed4f68c82c5dceb438b519c352132bb",
          "0x1e410af2e0c4f2d213cb346414d9169cbf481e9ba4d4431e2359119d796710f6",
          "0x2c93c1454d0cc86eb41df1224d9869700ede7836475611eb1f06a0360702d1e4",
          "0x0bd5835813addfdd7fe52f4c8a3b10b157ca63073ee2782f74f43506ab58fc52",
          "0x20944de1bfc17ba91e7a4e57eaccb12a864f0f03f4979bb4a31a84425cc4c0e6",
          "0x21787b54ce543e9a71d11be03e1ee3ac9ccdd6221f43ae0d261624adc2bd982e",
          "0x225e74a0bc023c80bb25adf111d52ab833ea4e46967281064061ede0f3d70e3a",
          "0x19f618947300b561dc3d46a3cd62a9d25f7e9b33f301387d81ab1209feb0a541",
          "0x233a46287d519ac568adf99bb8694707775b999a6d0a3abca8d6ca64e0184841",
          "0x18d0dbaaa98db673b472c8ad11b490fac76f62089e10dec1e25386e3d04dcff3",
          "0x177aa6be86454adb4e45f649672423189eaedf3443933ca5d8cf2da4bc086fe5",
          "0x01a02810ac6a7679e40266f2ba978c62785fb467b84fb15da6b03c428ea1984d",
          "0x1ae6c70a5ebf251f5f7e4a1242096a326ef1d5514c38433f0128fdc668357505",
          "0x02214ef17acba28a71587476ce775f6ee0d3bd3fa5edade9895bb5e8e5d03558",
          "0x176948698048b89edde8c41a02d4198ff463d76881a3789b4b0dbe8837bdd612",
          "0x2fa8ea7b2bb13415e41758f04b784973ff08f48be3d5dcff9069f489ded8428f",
          "0x0144cc7c6ad28fa2e47eb0275a1a4beffea9738cfa8f8e73cc8916349d1e22c6",
          "0x14f9aab5c16fb02c9ac8c143a41d7ec1f4968f48ee8df78ffe4f87b79a1f3c5d",
          "0x21e7fe0f38fcad374f525a7e5aec05b47a33eee997097d7b674cafc4a06cddc8",
          "0x28b0a91e448abe0905876f7c4b7cf7e0d582c3901610d72fa2fd3445339f89bb",
          "0x1a16874dc677554af43683ff0af81aea7c37d0c8a7d48026698640f69447f44c",
          "0x2422891d43ab71f8730f1c1447320e50f935213f5036da1d2ca308b84a594ee7",
          "0x1da66525137ce8f72bac9da36ae4f666c3cb7a3b29dba9d82f7b286b44c32fce",
          "0x00c4731825357ab15f49be8be8fb61ba4aa49bbc66b9ea889de7433e88c6d549",
          "0x3000028c4011daebe4e6f64edb1fd3333638af69d40f0e95f484165868c9bbb7",
          "0x29bedc93abb3b62569dafc8b8987f295de2527006fa7d1ed0fd2f1481fd6687a",
          "0x0cbe74380509c8ac7668895899fc2fb6b7fbf752aa483e1d9dccc25060b960ff",
          "0x22b694bc68df2bc4689a4800531bb1c9d8a536287cf1e991a03c0264d009fc25",
          "0x2ad8e28c2e4bf73c873ee8463eab2f3baaded932a543d50bb9182f246f394dde",
          "0x0bbd04b434a55d4c5cdab684fa2b8484f8a1b83a5709985668e2d4e0c739c802",
          "0x2bd154a6074a15b651b61dc15a93640a887bd9e11704263464ecb9fec3f0439e",
          "0x2d5af17ab25857bdd7604420bd00f1f97232db937789672d2ca927a082046b92",
          "0x02f8e794e1b2e961d3b2cc77ceb684ca45338be65dd98f4ccd12e77d34708ea2",
          "0x24ea4fbe7f9b9e66c41cc0cb1bb5e2ce337611e360925dd3cc94953432a233ce",
          "0x0a37dd5bcc98bdfe4fc6d0fd0ec4520c6f449af5a8bbe4f813b5ed5dd544168f",
          "0x086a59235fe20dbbe10cc603f69a78b796647cb0af35bc7206c541a48876721a",
          "0x2bd74d6c3dc977dc2309a0a7b0c7cdad09d54bb466b2bf0caf198218dfceaf00",
          "0x1faf44bd04babf5ab2e71528fdbccd5fd91db2c2001da3f5e76162313608ecac",
          "0x26ea7fff86fe56b7712b59e70e502ab9ce09bd8bea98022363816b726f374145",
          "0x1db2370b5f14be48485e1bff9033853c99d8073cb18bc9ec0b078c2cd90528ff",
          "0x24f5bf757d1a7c28fd53de7c8cabec5cb62e44c373a2a32f378da5aaa07d19eb",
          "0x0bcbaced9ef9e0b03d3b87eb09c40501052c4bcd5fc32e4b2bf7b75e21148ade",
          "0x1ab76daebbedc5f1db440788616187c9fed43b1cb2668e53de5151761b39277b",
          "0x249dcd5ba6d7d23473c2a169c76eb581185399f9216aacaddd2463e0519fe6d6",
          "0x0c5da17200b90a0b125b039ed922b6954d34b979354423743e6016b5bc5d8023",
          "0x2df908878c9402fdd0a3014351b0928f1c559790a0d416ad25a2616c1a073cd0",
          "0x21ce2e33089951b01af45df3816c80e2048686f1e8014c257c95e2ef3e2753f1",
          "0x1bbecb607950c54f74a627369a9f94548867778604dd8de406483e21f61ee1a5",
          "0x23c175479965b3b4a9719cfe6be6a610c0c77670e586c2ab0cf083501e69f101",
          "0x2f370d158d15b736562d6d0457c44706e671be9aaa524bc6b3bfc34280996100",
          "0x0ef11cbff50df1e1d36be0c8f35588bbbe406bbea31a3bb6e69b7f7c4f4ea1a7",
          "0x1f2ff117675d97535c24d19a58baafab0390f3d4114a965c43350c17ce095aef",
          "0x14712d01c897590d2eeaab6e98e18e5ac1958692a04c1b5124ee06ae8628cfa2",
          "0x268e361752c72a4ad949b2ad1ef9e6f2e806375946b8b9e6336038d4f849c2cd",
          "0x11de1fb7c05eb638a4abdb4b4382618529b99978acc73f4e8563c2831cde12b9",
          "0x0d2a72343a90dbb53290239581b2ff31206a02b9cd98bac6667fd247ad909544",
          "0x0fc693f9f8f5cb6a1b8be6689dbc03f5031f5df4a30782d8091f738dc7e1e9df",
          "0x0e41e2a997fa4d0f8b752ecc0dc63b3a121be81ea0e242154dfe67ec049f5704",
          "0x087b2ca8d78931f6fde0837ce4fa58944596f3c9cf2adab8eae30b44944e1788",
          "0x125d93accf769d4d3514b21d4c663b1539e227e9cbc45964420361d8d220215d",
          "0x1f91ac718648cd1fdaf2bf6f11aeeff7bd8206cee5769d8817bb970339e88eb9",
          "0x29914ab6cec465fd92f8f2c869e1ce9d4dbb3f883b29685063f339588112659c",
          "0x02da4a10486ef6d0effeb26f869bef99f6d50d8feaa1ea1c8bde95989429e5d5",
          "0x082557d3f50fa517de2710e0498a683930db5b9fb269e8ab6a42771d5ae7dc33",
          "0x1d20832e960f550d7061872f6cd96796f9cf61faf4f807df0c3734a5e839232c",
          "0x1b57a822d34e4ad06cec4e19dff3246bf846bc3408036dab02bc2b12ca38e044",
          "0x0bc798c8dcf79ca9a7c76cb0e8bb7c2366719fe74092e61e6f40e8c4087fc0b5",
          "0x1a975b179649b114e3c4559a1b14125e35e3630bf1f8383faf9af282c936700c",
          "0x0caae9f4b66b45e4732e97851913a594540730f26529801539c4d44896075fd4",
          "0x08e3da8124c621e070e8a41f0ff1f1cf75e2211087955392d85a1723bd2dc41f",
          "0x260e3155148f892b7f96b2d74e6c79b9e2c1a3cd9cd0784ae507875e4a267881",
          "0x2e3ed8d27ee71bb41e5bc98fb466dd4ff9d0f8a668861b773af825d260ae3943",
          "0x21d0fb7ce364e0ac781b1e11d89abfea006392cabd20f0740d156be1e45e7eec",
          "0x0301a1aacc4f86684e3ed7a0eb023b92cc75af6f8214910f840c627c3da3cd71",
          "0x11ee53beb1e8ee4ec10689f4fe40ebd93cd1c9fe06d812e96a583368435ec2b6",
          "0x01d42d2dd9d2372530c30f4d6122732d1cef8dea9e2ebfb3b2679e9f0dcd04c9",
          "0x0861e448b92ffe738e18ae67a143876d55a58c162f74d8e556714d1f7e628792",
          "0x193793bfe5c7b90c6d61475e89cf0d41447128f280d8c6c5dd4be1fc9072ef2b",
          "0x0126b05ee124c85aa2b1c1273c21c3cefe7ded39b305c5e039a35f9024cc1256",
          "0x0569dcc226c2e215ae697b8c6001011cbae7ce535f45a803dc60fde9da50c83a",
          "0x0fe6172dd5afe8ff0e7e33f6499916fd4c5ff2fab969637ae32d8e4cfd3fefd4",
          "0x074ff2c5f008060e89d30965591260679cd3f0f5aed33162ac9ac99da10bab53",
          "0x086e65444d5366d82133d8cad0a61c20066b89be1c870dcabfe453648d2b6b06",
          "0x0b9bcbd52b7b899a651a02c326e064ac6a97be7457bbce896e465d73e93afb9a",
          "0x0269e035c429c4bdaedc393d2a87978a1c2f8ca0b25b085ea44ce5878ec506bb",
          "0x09e1b7724583b0e16a79ba7670636f87ea134a19e20dc3ec70c01c7b94664dad",
          "0x264ca5651ae7b84f43d8841cfb296bcb5f19fa5a06a2c4d2184b54c3d6370936",
          "0x24e4ad8c2f38fffdfb503a4dd50575c5a12426a5346359e3a5654af0188f0aa2",
          "0x0adfcacef6ab262f8fc9d2f614c0fe4a3273c82a9e7335e5e0e0800d81e87875",
          "0x187addb97c4a6437145866cf270df4a57ba705970fe1e0619a0f016933065d2c",
          "0x0710702df841d4ef5e0cadab7197a9ef19d7524808bba56df845a2e8f141bcaa",
          "0x2e0664aabc74b5c54d9d047bf5470e45ebc784026159273f1d2f5e4759c00651",
          "0x271cb7aae9142ad71842a770cc65df19d7d102d9235454d7c600a735a1fa4da7",
          "0x2ff475f9d52241c2261b9f520d2322f52268d289a028e974742d409fd8bb3b06",
          "0x2d3bb2cf8530e698b771ede66578a0149e561b366d502a6e79c23b33c500c2a4",
          "0x05c80b5a16b6a59e1e36303a59ba782cd71407f83273f37c19ea54a961e0cad9",
          "0x17077cca69eed28f21eeaf0f0048692cd310e6ba87b65b7594de5902a829d7af",
          "0x2edbe4d8286962d91cf1a93175f925b174cf53d855928f2f10cf46e7baf1f994",
          "0x2f95757a62d1a5289c6a087e5c829e54d5bc2e03082ad8621641d82f5758259a",
          "0x0c2ca1a4f1682da3f56490d1f154194ebe40ab4419951cbcd508c86005cccfac",
          "0x151b559773edbfd4a49a453c1732212955dc9d5ff614e80e75ac63d065dd0ccc",
          "0x3043ae0869eb8d13b810178b96eb37caa27a8470777bddab85002384b6e1aa11",
          "0x01a843dff9621487d353b70ce04d9ded438f76c5013f4780798063a4df6db7b1",
          "0x0eef8241527784cbff33f551f6e2e53d16b744589f50508cdaa0842e05eca01d",
          "0x1ae85b4527017d45d805a25b139e3f424d3745841cecada4658d97b38cefc4c3",
          "0x0ed437f0f11932bf16b0cd77f4983af1511e57078427feed328780828b8d842c",
          "0x17de9a117161bae7f824314ddb7a49d59e2443cd620e0e7af082e7246a725e9c",
          "0x12858cea51eeec2e4fba5072a9049318de40ea9a4179fa74c7bfc1e15706801f",
          "0x08cf404091f4ee5fdc068ff51a27e79a18f8ae93adda23b412de37eed164fbd5",
          "0x07638f755834b05e6dbaf1b992ababe1b575897e776ead3471a4fe68d9e70f7a",
          "0x246105558f45479e8cd5497d9240a6dd98d96e8111ed4e6fe8ae481cc221394b",
          "0x2994e4de23f47371c68cd1f602e71295a36a365b970704c70b22f8a816850b5f",
          "0x22c8d3bfbdf3637a9631e9d1b08506d60fee6945b0038eba8f2da85f10fef0c7",
          "0x281c2faf2a2c449bb40a4bc4738ea64efec118d34bdfb38652fc86e55297a33e",
          "0x18c045cddaab43389344b4efe95254dce7d25f7d392b05256c2b949e47caa3fd",
          "0x00f89a7f1ac9fb37b2753c758ad0265c94effe7e7838c5f03696fbe1ea19cd62",
          "0x17aaaa6bc71b2d1aa0d884b00934f1283c599011e96efd46d4d602d95d869f8a",
          "0x2913457175241255d94f002ec50a51838616f2758d69723a91bf0adc46fad0eb",
          "0x12eba34c52c9376522f8008a66608ab4f08401aab85d16364791fdf91ba661fc",
          "0x135e9379693f4edbe9fc86844938a52518e89db9fe13e457591328728f15dc08",
          "0x2f6bb4e91820b1e1367f83134ed632830307065adf75aeee1666d3a59beaa76a",
          "0x13543a98e58b1b6df98247f452e000fe071ab3fcdb0b3e6b1a919ae352352818",
          "0x2fd81f7d844b99ac61e8f093dc65fe0cf45dc2a5cdebe96f00b0f43bd0b7d9ce",
          "0x2d5552222ced4e20cc80371a0210411e95180cc4b310eb66209c2a46681a7f07",
          "0x23c153388be12196bc1c97d88d9a18dedae099bcb0f1ffa576985379022a1b21",
          "0x07f0d269eb34dd69addd5def5902b9a7a96dcd173bfe460828ed398efb3a3afa",
          "0x0d511691b6ef7b32d6b64bb70e219826d105c0e3dfb905a8b88164b8e33f2ddc",
          "0x287dc3609774096d2b9d98c6f2530946900d9dcd05f003de1d2f8b3cb8e7d1ae",
          "0x11531b14ddb49b066f1129808f043e3c9d3f32089e3aebcfe29ce49d93d0d759",
          "0x270c07fb85871f3017c468b3f4701c42c562bb79a2cb74a1b63f857090933181",
          "0x091cfd790d49049722d482129211f0aec3a10af3d1cbaff1acc674f598cfbd2a",
          "0x2e1f9b5465ea5e84c8cb259ba5cef63c7f78b04477beaf3b612774add6325cba",
          "0x064d5ae70d4b8574ff3077e835fee488017cc317ca8af262163fcf9f134868d8",
          "0x18dd9456a767449c657c3d5663eea71e54e5eb5b381d4e0158c71ca0e3a8fb29",
          "0x0150f8b58e0635bca8e54452f3e31ff5979c2122e2ed6315c75e2e1efbf4d953",
          "0x19c1f822135fbb5932baeb862261d37f58613c1ac6ecc6d1a985a546a52e6142",
          "0x2ceb2ab2576b2b66de64c9a8c564869f79100a783d4aea41e74f436547cfd630",
          "0x289ef304a10023e4f2d4e47caf25766079103e5b7059fadcc41a475937ea47b7",
          "0x106455ac17ff5b1625135663f28627d919ebae910c697c940e967e917b66e3a9",
          "0x27e194161a1d0de454c9f47a47d86289a1324f3069e346a0a14a291ed1f50f78",
          "0x03ea3ace131a580c737ead77275aaab1fbbf35f957ba5ffa40e3190117ffbf19",
          "0x108e136f6c0a7016aa3c91140178668f8be92aea8bf22a58a60401bf037f38a6",
          "0x1384b56f69cae939300958285cead5cfeb1971f42bb735852d21f3f3ff2e6bd6",
          "0x17afc5bcc3ae14f0ddaaa0ad7f068785c2a88672ae2669ca68d553f4b5611da7",
          "0x2af2b4d6e48590cb6ab37260cd0628c305e9571a104aafc5a30086ed36eb739e",
          "0x04965fc8bb9707daaed207994c88d236a33cc0999c7e116512fc36c3f3c48516",
          "0x1aa274f939ae925bdac809179e60547ba9176d0cc4d3b66ec61ea59146278704",
          "0x02cbcff5d0b52769ee0fecfcef4cdd995e66417094e84c9479856780fb1d940e",
          "0x2513f2ad59b991b9015b8748901a37026d2e511ecaf12a716643810327bc2349",
          "0x23fe312e7bb6a30fed6cd00fa0d98a215e903b45603eec14ff921352d6944da6",
          "0x0ce352c15bb81b39fe0e7263846b9c0bad0f9adb2935c112a4ca4f58c10b4606",
          "0x1784a8e161be8cc852574a40c64862adf5ad640468f451ba11de3fdac35ecadd",
          "0x148af66b8d3a06d4da4bfd09121cab2045cfa1a96e89ee1e23dc61445366f1cc",
          "0x0d28295b17753024395c50f80bec66890afbc458866858474f5765cfbe75af54",
          "0x09bc568aadf25c9a88404da27c73732817b6aa6c9bfbd4ce851e89aefd1499de",
          "0x0b0ff5b9694dee9cec669862d49825b8934f73deae404c9e5a601652af8fd4f4",
          "0x0e7fcee5bc529956fb4d31e98da1376276cae79503906dd5b3f987bf423ec0d6",
          "0x057903969900117c287b29cac4b315297d137b29ef2883e39f17edc318529a4a",
          "0x1dcd75635c831cf3cf5beaedd5450ed63ffb17dc35db44ebfa02078fc55c36df",
          "0x0f235e7fc34780e8005c242cc8428764be6e488c8eb8604bdbbd7e0644361701",
          "0x01d84ffec4654dde04de9b0a09385d509cc2b2021624a59d274fd0e063b3899d",
          "0x0802cf3684ec2646c535c018305bc1377b437590aad654951519c539c30d54de"
        ],
        [
          "0x148d9e4542066b125da6d69ff3fb676ebd27e6a38a1ff4281bd639c97af6ffd5",
          "0x0b60a28805324295fcaf51bb88d9692372cbf4eef1cba8b85cbc059346691a88",
          "0x2d38f812ad1d7ac79c32fdd57a56edb861885f20fa4bc6d0d942c2f41e8e4a7d",
          "0x25738acd1163580033367fd8f1ee199d7eb3c37891e06bc20e6b476a0357588b",
          "0x247f6967fca42689ae8e20b5a7a198d63086549b78c1620a51f5d36824ccf43d",
          "0x2e22813077a668b2b75249b8d515a3dcd93502006694245bb087ff0732708b93",
          "0x1523ea89be61be47e1c36b0e024068c28c48da74bf7069ab2d77389c83d474f4",
          "0x146695ce138230e087b53ef1bf81601f2591dd344a7cb509f138939369e0d1c3",
          "0x12d05d9571fa4b4171886d9c2cd44c7d7fc5a4125195e7d28c3c47cb5cb5b7c5",
          "0x242721147084d4613543788977111f3fde6c89326a556e35bccd2a2e73cac68b",
          "0x0fd921ba8395a5dde833e6dba4173385007b38d1af5e3841a345c9a480c9d292",
          "0x0f0bbdc7a39e5146929f2e1ca9fb4a63550cea8f12109c1d82e601975d581f5d",
          "0x000d65008588b2ee1a4dee0313b6d4396952d901385f2e1afe6a0a0def765dc2",
          "0x0aea567be31e1c42ce33f589d903363a482f21c1c3d8fe50fa6df018a2dc7c25",
          "0x02fa334757b03dec6be1df758ebe0353317b35316ecfc72934d069f182346bbd",
          "0x0017322782b3733e379c8909ae7da94655c46dd2b6b061b9253d787a1eaa9b8f",
          "0x156816f48e3ef988ffe04cc77ac4c89af8fef8482604e7f93b75c1fb1164d60e",
          "0x2c8ff977a27352b5d7d9ec103fc8f0c727b84a778f41adf777c38e01800afdac",
          "0x2cc225cb5ee4ba2b7053f98af7b3b488569016ecf6f4943d64ba843092c59229",
          "0x0d34d7a8b8f49abfa48c73b10f293aca19e09743a8345e9e1af9f2d63fead969",
          "0x2a0355ab04bedea61feae083561067edf1476b20725cf5e032db806d33edc204",
          "0x2dcaeb4653a0ccad1c0872f76b103bf4fa38f6d63119e1437c798203d29768c5",
          "0x22d2e63907fc0b6564850122c8e924a972de827d7491e92dd84397b2ebca7770",
          "0x1593a5b503df48305ffc360c4f49ceb02536c73d76b4f2f774f9da3d5b8dce03",
          "0x22d45f1203cc11e52b9155749a7c0a0a821da4b063cddc820580280e21026ebe",
          "0x28f01a0adb5f8f85236e1a129ffafb2cdf86aeb4056eb5ff5a06951d64c3d4b2",
          "0x1ba602ae9d3c4cbfadd0ae2ccf8fcce759f83cff29bf12b53d6050a7585e6aaa",
          "0x27bca061d815778ed8719c5f4f54063213c5005a46ed7aed0c979d2ad1557c33",
          "0x25593be458b75a5369a4bd6a86b70ae79876e95ab93705d244101d5df3e45700",
          "0x15608030e8bb2a8cec5f6e69489064cd21f9b3617034c9751c53056cc113c04b",
          "0x14ab657ef52773269b4002b7a2cc6d01ea66ec8eb51a97e0bde8ef9f593eaac1",
          "0x1af18589ae90058d0db1569f4d4ecf74154386cbb6fe90564311b4340b1a11da",
          "0x1f60106f88fadb4d8f97ce9ecc24d0910a4575c5a710002504b48faa28fb91cc",
          "0x0066027b365d51255f99caab82d5009ae066db65ba103962f7c65f2f2daea562",
          "0x181301fa387e521e8951a3bf77c5942c5bbc4a8fcc6c395c34b4f491a9068ab3",
          "0x2dc04cb3a80a5239a13299eea70ba026593f40ccf49cb8ebd73da29a76413e3b",
          "0x2ba55e1d5cc09043027597e4fc546a18922baf85d6ab0ec6eff1cf13922b5592",
          "0x2d5b0f0163ae47693ce731568cd67c54b82f249f2a429e585f65400f0c7adde4",
          "0x0374ac4769fa6fd0b8166fd62a112357902308a127645453d72f5249ca5c9368",
          "0x0e767d617dbbe410968708f585dba04e995a8347ef23ea101fea088508403aac",
          "0x1fb38ef3ce50f158451e37bf5480ba70a91f8fcee93274ab021dfed70f2e2822",
          "0x14e239aa73b943e39c9b48abb205ccaa4ff59d68f9d325b717791666177db65b",
          "0x2712d94019540f5f0d61c11c2c16d3dfab0257385896be59c31ff97a37c6555b",
          "0x0e6f524392452ebad40973a980e08f69abdeb214e5eb7830f7284c1d13e36036",
          "0x29470b692ab4a550523b448684e197e6be9bc885b9d3110c281575c1bbc67ca2",
          "0x23910827d0d4a41ee8b13a711ae19b5ac604401a221417172c3018a49de959fb",
          "0x0bf5862f89a9d3687f2fb246980570d96ed258e8414aca7e0c9df7cee833dd85",
          "0x00270d4863fd01f27b0558468bca95648bc8db3ca55aaa5feb27c286aeadb27b",
          "0x2dfabec7671e1e932b07f164ab49e69e63f173513f2d4a015ce8de3e168c1bc8",
          "0x0bab26acbc48f8648d736366adaa29fde492480002f5020c6220fb187dae8891",
          "0x2bcdf080431544a4ed25c9db868837a2d17876fd7b3001bfcc22bcb686483bb1",
          "0x2064a7ebb7e6ade9cbcc596200eec97ca5e2f9beb2a26acc673b93a218f16ac7",
          "0x0451e58617ec882799b2b33aad34bcaab6a871538c20782009b5da2a377b91aa",
          "0x2582f9576b56b22907c4bbfa7e4155b4e28ae03876964cd40adb0e255b6c1a14",
          "0x1af73515b661bd03915b5c3b5d8cec060b490d742c4f48d43ed907ac65ea6c89",
          "0x0eeb619b01645cb31f1f5145d2d1aca045e69f9a89742cf85faa65a8f30781c4",
          "0x1b4ee6b9a81fbf0c201d0898a6948a0995ebcd080e0cea83ada3d8ed6182ab17",
          "0x05abe05399288af84efeb848ec61d53dd0f07439982e04e3a5a304166ac1730d",
          "0x2cc02c9ccd63f23dce9ec2b3587322da4a4cebf9cc9246c700db6612aa769674",
          "0x0da64f9355bcc3ccf87a9696b344e5683cad3f876a5b9e5f715a0d70a973001f",
          "0x2d0b3f3a901f88ad88c2012c2b32f4eb9f02bbdaedf4cd1e37b84f4016feab7b",
          "0x1d566523ed67e71b5ff0cc5cd17a325d3092bd66a52773a537896e3c6df86c76",
          "0x037d35446e19eed662a2b628126b2850f7daa087974e21fad3d339d7e2dcc33e",
          "0x22b59547c33c37e6c300a3556f87dbba667bda84e1b8ef87430a522a576de9f0",
          "0x196f8d6f851f5bbcea6a1614656b38a30e5bcbff261cef19f6e34066acbdb74b",
          "0x0576d6d6dc692d9ed7232005e63f954d2da11c77e6e919b2b9dcebaeda11b507",
          "0x09dcfd5fff0be2df5a5265856c22ac231cedd81a1312304f5896f0909cc3e6a5",
          "0x26f792286cdde888e454c1ddf03592d6d62f4be4843823526509829fcb496163",
          "0x299921dbb6a9201f8aca7e69d8190238d5e4a82dda743aed85ca235cab80c163",
          "0x2863a223856bdd42e35069d206a5088d217b5ffba6fba0939ca22858cd770dea",
          "0x0ffa5609d1b9aa848721d2e1e2ad6da05d43a241e8e0a7f59508ffa9b1ede432",
          "0x11d925274d8fae7d518dfecea58a9a57d88642062969e67e457e962e3ed4a144",
          "0x21c219204226bc43f0db2448349213a9e563e94d3fff28b2e692688d0f5b2b12",
          "0x2c04ae9f250ba0194bf59eca9404e3af6dcd64dd38e370a038f3fd1e397f5104",
          "0x223cca831dc760db7b954d41810614ba6e2c62be31e94884d4c7e5ffa67da5c6",
          "0x244b3894104e51a151a671ca11fcb342d1ac225f43abee839469743457133d81",
          "0x24f71d5a0ac04a387b758c69782449df7b9ccedb6163a7eedb21ef401452f450",
          "0x2efb360d9ca0e15f52aa4033f4c423e0fa5c175cdd05e4aebcc278a7b8296b97",
          "0x29ffd7ef3d018c95e8039c2e990e4cfe66ff093810ad4508c30e28e8bb970620",
          "0x267ff75a53212383ecccac4e8a3bf2fc9e982baf37ec44478601cfaa6f417233",
          "0x2fbfc4b2ce6c2b08cbb3e3749fb22ff3d68d3bb7d335ce0e42ec6dc27090c385",
          "0x262f93de20005c4de2f4a5d8d055c8d5f568991b0a862047e5ad94c8868ba3ca",
          "0x0f080be27a791fcd1755754f931d9b87f5ad8c1963a02aa7cafdd1e8d31b94e3",
          "0x21a735213a8c784976e65ca3bec4acc4224527493cd1626d2346133ab8875ff0",
          "0x160a92fb6a607d5ee7949fcd5537c8431c449d79aa51bb955845d2cbe684bbfc",
          "0x0079159f6364543eb643f0424461f00135739813840ac74de81df7c9e10c8f72",
          "0x2286247c58eaa4509baaf85b947e699501d3b5f901acc8475a7d9d7941606cd5",
          "0x1110425198ba06c42efbdb6e95840d01c00b5d08850f0cd46435cdba1bdccea6",
          "0x0ec5a15571950cec3c3193aca015791604b7dae185d7b9d8992e020185ffd909",
          "0x220f98335597493c2e7f4fe3bdc0cd229d0c81b2d0b6f9e565ccf65eba2877e3",
          "0x1c2fa2d176f4d7070fe45cfe6a8d4bbd0ce685aa196e4ba2372a5195e7ab644a",
          "0x298c1fe3f63531aa98b6aad02e438a8f278bcad4ed97f3c82a091faea910e50b",
          "0x2e814b2f088d90012bee74ceef10c7013033af128356dda488e3feab3bf25253",
          "0x212609944ec047925f31c13d7ca9fd43a4e54a33fb09a6ec9463cb63d2570e69",
          "0x157bbb9d0546f86e4a8b5e450036ab0a84d6109d5506c85f239267f4ba584b56",
          "0x138efcdb344b5b40faa9c0a415664bffd77240b5a9cba56b499da2e3cea6b3dc",
          "0x0ca50e08d27bea508f20273021f6e839cf124a54361def3c9b2a64595e58fe4f",
          "0x0d34d2d5975a2da9f0dd72e846d797ab312022399e1fe70980f983f1587ef7c4",
          "0x00dd1be4f3fb034d4669a81922fa014c3c1c5c575f39bd809877db2b9fff9744",
          "0x25540fcc162307e3906abae7ba258e4fa84ff4dd4ff19742a0969d08018b21bf",
          "0x24f57936979ae2a3b9752d37c017574493524a254a5bbc10213b7fa6b15ad35b",
          "0x02d9bd62647a45334db73631da9d97a27e8c627e911b83f1962dc3417dc6ce29",
          "0x1499c2994ad838770ee3a9af64362a10de6c4c5f32d5ab5bbae55ca0b29fbfba",
          "0x15a6459a08eed36bd3e23157dd59512bbc84847e37e8a4e3f7d7fdbc7be20970",
          "0x148d65a6a75fbefb33965be2df0989fe031f47478922d2546f1ee126de7f35fc",
          "0x16d2f4865c76d38379fb5ad2efb21e777e01744b4e209c095d332e41edb45748",
          "0x0c86c69e94a003cc454e2990a7ad8167c3bbd4732e646f9f91e961114bc65c37",
          "0x00b12227a310f8622c9acfe2bb3228aa05cee6105c4268c266dd4176ce7f8e21",
          "0x2daf91d225f915884e6cfdab42acb62d276341987bc3a2541819ec7774d90e8d",
          "0x0bc4e8d555614bac1b8cc99bae7f008cb7c82b5cd1a3c481a553caf8ac373f6e",
          "0x2375f37d0030b894a1a8298dd2dd59e2b7e73667f31b156e86d9b38617500fad",
          "0x1e8e3c2bd0d4852e261a3c0fa93d83fb9c21d44b49578330dcb9718cbd54b285",
          "0x1e80ecca29b345ed88be8e53ca042d6c62afd2a4624cbacb3bd07c85839332b4",
          "0x2e1f5ee70338c50c456f43077216125fef314c6653c9ba72c75da5b53cfeda99",
          "0x0e9ba31ae136fb0199f9d9e0d8580f5560449f2a8b6a9d0f223ec52c4120431e",
          "0x24de52f156b2208d81bf109c790f409baa941ab7978af86fbc0f891a5e904f75",
          "0x05bdc7205a26bf12700656425ebac48d1150e02fe9b4acb07a41609d7168f04d",
          "0x027f8106542d99a1f903582ad757076e18afce563367b63d5d0973d80993a3d8",
          "0x07caf2bc3785db7ad681bb6c05ddf24525c19d1519a981b44045a5f78cba52b6",
          "0x0230b844661066c234483c7fdf632449922453ffb8ef379757509addd81cd773",
          "0x1c513a7ff8bdf940ef0d01e76fd4ec19086170e88c64294f737ef20b661982ac",
          "0x0e0e97979ae864b55f27371e6c6e619ab7b887ce3d861fedd84ae111bea40e0c",
          "0x062d46adc59134784cdaf0c4dfb6c9d7358f315f0948765c8fcbc97ec3f38eb2",
          "0x2642cee234081127b28b4edb038497a79a2a313a1b749fd2eb67e37794283645",
          "0x2400b3982c92f7fc2181889a7087c0dc946db2b2e8d86d3450bc254f6518db37",
          "0x24da88b4f2c2dc7055f4a55f78322392d808c076f2de6cb6a03881f2354e9106",
          "0x1a3951cd6925316481484ac39b31b83627a5484c259c818ee23a2700c6ceac9f",
          "0x2ceca27fb996cdba6d6ee1e105fa5df8ba6b67b865931c017515fb42908de010",
          "0x16081d04bd65bc19e41adef6fd8da7814d2bb0cfdfb2ecce5df82a8bea879e6e",
          "0x04eed4b89c0ede1bd58851a931e4de791e4c69cf2b1116f8a36b2bc559000e46",
          "0x1d60021b4137b2077b31173787004201f20b0701411c48ab9e14418fe26ef4bb",
          "0x1636c29d85687fec3aa4125bb66e5d5f1556557a4860c1df85127790f09a61a1",
          "0x25c716e5ea5ce2c6a2b671a863d5acb3b2dd4963879f4c163da6a06fb265cc42",
          "0x1dece00284bc698ea2af97de3d426cf90110bb49be71a393c1ce70ea971db460",
          "0x292a18569aed3c28685001d40cb42dd8153fa99001cbd52729ca6f8e2c466eee",
          "0x26edaa0ab7f7eeac8776bff120b4483ce9a6bce85d099931ec9322ba1fbf3881",
          "0x05d23fd0743e0e37089588392c6df0b04d5aef2e5268ab19c2e9e9b3a3af4921",
          "0x300bbec302c9b8b7e4baa06990571fef5dad26af618d0779b69977a244c589f5",
          "0x269f2d9ce098eee89e694d53d3b2d9861490cf184ea09baf640f00a39ac72a3d",
          "0x1122a37fa0c37863431182bb8277bd0e849b2178a816d31c7604fc5219d1aa62",
          "0x14e2dbbeb30a3a577a0b2299ce9af0539d08eae0748a721880aacaafe1864538",
          "0x2f926c6773a8c411b87dc5198c309903d9f492af6f0a43a5af2028e549f6c801",
          "0x1169f110cff49700bb5fee9e524a49e35889c4689e384b927984e9957c587fe3",
          "0x003fec863f40327b066e68054c87d20cefa1eb13140520d43a679b9e4a147a61",
          "0x2e87640ceb4012a9ada31482c79a08f64bab2e2c010cb036bbac1e4a87c801bd",
          "0x03e07a8e8e86a863b1471947bd2e9629149b55502a6acdabf609edafa0bc9d98",
          "0x23397da20fe1dd05ff21ca3d213fc0ce7ce46c469537c1a2aaf52294d2fd6dae",
          "0x179733a75ce11afe8a4842f8509e49301f7428d63ca83973b8d8156fd82ab69a",
          "0x10c1e8a0ee811326b883ca8e10f3adb124428ffcc5c7dc79e83c7907b2a1eae9",
          "0x24df93681b43879a4bb61b5c6280f4d5e1360287945b978e59b183f0233387ab",
          "0x22140f342fecef8e27e3458443baa7dfcba7ac35cbd4a1a09ad87c7f63d7bb5c",
          "0x08baf85894900ec08322259d5175b370fd4ad33d5f599d609c95e2d15c26fbde",
          "0x24de9488081b84914effbe7d56004598675363e34b41fe0e9b78107930312e17",
          "0x1f25291093856f64a271dbd8614931b97c31f8ec8da7121b0bb82caa71f453c7",
          "0x11eabe4c7efe3aec592a5cec6b3f6dd1095f9d384ea0ce040262eac0f053c919",
          "0x0b77db0420ec1e32b9ba0e9904a28921f236ded48f3f49aa2d761a631c25038b",
          "0x1689e35a0fde7b1d3a6e6d149380ffc6b7d9772807a553ab7c5073eb2e3ede1a",
          "0x162236b343c2c2f7f48b36f3e7a7ec97c07cccf22e3254dccc4b3a30f33c69b3",
          "0x248c951c9505d2cf2136f6b24c2b749c7751a01ab1cd83934be12fcbb8d05c86",
          "0x09487042f01494c2af046b94105b70b1b8e5ed1ac5f158408309a66a77a6abab",
          "0x0a9a97076c5d53411c3e8fff6bb537029080b671324819fb8af33d96d432ace7",
          "0x0c43d5fc0020292fd2ecd06842cfa8373eb9bef8a9d984348b43fa9614b32e23",
          "0x146d10ae53aaaf595cb8e8eb29ade3e56c92da9b55a3bc24becf2a2f5fab0393",
          "0x1bacba42d80c66b3b062cb5dda6a6230492d8685862447c638cc9b4ec374337c",
          "0x16ec168db0372a9144f511c5e860b07113a671b323952a86e8fd40722c7fc879",
          "0x0113e5457aaddfe1a393d7625ad05bec40e9d44a7e185ea3af2b58ae695ab77b",
          "0x18ba814a2a7fdd1206db6a30f7b98f3c45cab593362befdcb0d2a896ac78a7f7",
          "0x106843bbc36e4064856eb6688d8f3a90a43ffa7f73bfe63072169bf520248328",
          "0x00ce790f54ac2d34a26ca17cdd642a31b1d4005c09752c6bc5b433064cee6322",
          "0x2b4e47ca6f897e337d6d52c1ff33a52487c689bab5fd35620d83c567b57a600a",
          "0x27219b83ad2459b2df9f73df5cd1d2f8be66512d95c4f3d81ba876740519db2d",
          "0x22cc096806612553e5047eb6e0ec8d01759b9df23c96f53b6fbcaa8a3616ba8f",
          "0x273e0a2a56e4243f2133bd90e54692647184a8805fdd2ceb541a220253a78b2f",
          "0x0d449aeb41e8cc9b2f32856f89dbf1409d5605fc557c43c7cf573571d5aeea14",
          "0x1b07cfc60e61c162dc9f12de253b7f952a9246bd2c7c445ca35b8572e5d719a2",
          "0x0e4eeb512c3cac847535897aed4fb9ed34bffd87c012a117f2a3daa810dfb1e6",
          "0x27021e720da0286b61c23b748cc7c358fb6882d8100787fbce685f06e11046cc",
          "0x2eac1fa2d1212624bc5e0090e25ac0e0160f2d7390c790a2de7740775830e542",
          "0x0cc0645876817f8152ccd9010a6f262a516af0ca289330a340db6474ae66d261",
          "0x2ccf92d23a6abeee6e7924bf0d4a9e7040b715e662179a182fd11bb26fff58c4",
          "0x1b769ddc3111a9d38df31f4809f314d749b8be9fa642d2aaa36961dcde0be23c",
          "0x2dc09a5638b6194c6d6cb79c56ef205b0be1e7c83fcaef98b1cd1365295c7d2d",
          "0x07efca9ad6268754a03efb676e593a8c75a3ab84ad9046850654a5488312fd4e",
          "0x1bb73b4e345b0741548da2aa698783a8c87e923ab1b1008e72d737fbe7f6d9f2",
          "0x0635173b7551fd4fe8306abd764a169bcce6f3719dd606cd0bc1f2b117fc36fe",
          "0x189dd3b20d3f8f53f0f5a2ad97f300f99ebb84090a438f7738f2a126ea8a450a",
          "0x265e8dd1fa619461952ccd1d3a96f2aa94906d9df07365c28dd3e93a244f6eea",
          "0x143a058fe3987aaf1ca1bf2c376b4979310ef54c29a3e668c124e5af437902c2",
          "0x186ec8f1c3ba70ad834c11cea7962750d76c7be8691e679bd195a65dfe698ec0",
          "0x2818eb031998c554c9570842180458d149316f14e29fe162600507b1e50952af",
          "0x08cf9b17dd2cabc22de68072b0f3bbde4beac5cb58b575219c70f93fe1ec5de5",
          "0x0a298a9f044a1590bfb4a6835027c9481a406c765ed5c841878a5c14b1c4f4ed",
          "0x2f4050e4b3b15017c6c19d417790e22fa6d29269d33b54d801c4af98cf662ce9",
          "0x1f1e5035f72cba3a0226a0447fcd28c6bb211da5fde9229458c8f7d3974a06a9",
          "0x25763fbc942135da85faf354f47b3ae9fc27606ad701bfe7de3ee704d8160f9d",
          "0x0eb6142bda2a5f26b49f6dedabdcb7a97f20931fc14256aa85e6a3b0599c8383",
          "0x1f8e3d89b5c97325a7063c703014144af195ec37cb8b09d544786eb6721e8ef4",
          "0x1a027583e2da7adffb3534095700dc6f7d6ff2a7a19b06d7d69d7eb63da4158c",
          "0x2823d3822190171f5924b4ffe5383050cb301fbacd745c2e074f89152a53470c",
          "0x17fce7a205f42f17c80a146aa3528e74a3cfc444a1289cf535407fef6cfa1e8d",
          "0x211b7a11f1d36c9c10a9b3e78ee5329ae87e7effbcce5968260b64ca4dcd06ed",
          "0x1861368bb98ea3229075f4ac8ceac511120ec3fce84eae632b03138a44b4bd5f",
          "0x111b4df9aad81b42dad504cf07cd2956cc4848e7ede8ce10075538f78cb7f758",
          "0x12df6e0847db8d01b389639603c878d91a19f446117f9a4aefca9038cc9d147d",
          "0x2d5e474114c7c6020bd7adb6e15337c4e72f6ef15324106e7585ca3f8c116c4f",
          "0x226e655808a4062f8bb47c131ce125bacfe68e7840f4ba6476841041c2808981",
          "0x1f01a9d98aad3d9a65a5373ed6d2b672030dc1ca9b46149bbf9f084a7d24f4e4",
          "0x2f3578cba83aac8a83f34aaf5c651b0571199e3a4de39ec0579e5ee33993fe03",
          "0x18391d423c454019402cf0ec7b36cc133247eb98b9bb439c9c189beaebfdd5ac",
          "0x26fcf6ca811edf267bd800e0b00f6b49e60e5a13ca944810a36632595d788181",
          "0x140f9b585984d931fe856bdf451805fca64adfe34d55ba4f4140480bd7a97acf",
          "0x11e878e17f1f867ade93e914e58024464385abf6403fd4a622e41fb1dc22e3dc",
          "0x1f997c6de664e9ceb042c55bd22c9232b858e40ff4efeb4082c76fbd62ddd8e2",
          "0x2773284b6eb1c47f14de71f232989ca9bd6a70aae1867ee095299f6419cee52a",
          "0x1066b87300af439cab83660521ee9d03b06a17c9a00b5b7a8d56bfc401fa5bdd",
          "0x2f1309644679307e98d620766a2861cee589e6d55dd970c8c43de7ad84d7d110",
          "0x2f1043b7f9e4b6ec39aa0764007e50320617d97a87be9dfb8f00b4cc27c5baeb",
          "0x1b3ac550bfdc6fcf4ef9839b66b3223badb9ecc76ae39fe95c9a47c2a1102cab",
          "0x070be30e43784dcf7d99e4334102a69c40c7981eeed360d5b9968e7cf19cfeb1",
          "0x0e5529c5fd64e3920f611507fae99f8c877e9257fc367bf54dd073f091a3c651",
          "0x11d88f7b5649a4b0e1f788c89ef190ed917dbe39ca64cc58cde8633aa479b95e",
          "0x2f6cbff18a86d8b40f8973b1ce30bddacd2f248a1f47f1f66d3201fd46d93d17",
          "0x176823962788cb748e12ed59426bad8ee881381024993d5703c2c1079c0b7856",
          "0x077c3ac1150cda4394aae4e3951f8d0aebdb6fe9e8b336d899ed763745875ad7",
          "0x2355c7225b6025168045ab1f9cf7d6754e83365563e45a211aa997d1b85e8f33",
          "0x186f0b6b6d6040a7e140bf72b74a71b23c6ddc1e8496e2f733757ae000e90027",
          "0x14740840516b80d234f76a02dc3127f9a5ffab1b3f2346aa9c9b910058435ed2",
          "0x2203433be06680bf2ef05084f45cafb6d8e94158c6598ab1634f3ba66dd16e4a",
          "0x217d3e984355aa1f6df652f101bbdc281c69b7c75164a13fd29776b80b2a9314",
          "0x1777f06ba3ebc47efa43959fa089bbe8bace64f9a4406937600c273dbe21e4d1",
          "0x1fd8a54df4e6ed46ab5d2997b9fab040e8b4870f5754364850c508a9e573e767",
          "0x11d54b8c949efcb99816328db7aeee0a412c7d074a986a0603eaaf5acfe32a1d",
          "0x2cc41e52d8f986ee77c59b1de2690ae4e478eff25d4f103b15cc05ca7ab7446d",
          "0x047c5febf774c62215aa7e6cc3439898f576041f19ab3c8500b07d5c19a76fa2",
          "0x2e9870ed58dfa57d100819116368bbfba81c69a4903a85179cf7a4c2a8f31445",
          "0x1fadd3bd3a5c6158a4ff3f0aea374f9635f5211730c79b39d039f9ce17ac8945",
          "0x2a5c810d6c43ab2d29ff1c5aa46e4d982c1b6527b6a2e83ec55cd0cc4d45d1c8",
          "0x11fafe98343013c2fd3b4364e1e5922db5be5c0f7afdd7b8645d07b4c91d410d",
          "0x1d1a82a8b25d503eb4ae65d6bf5113049342c0c10e2f3cb8da9536c95b1211cb",
          "0x12ff18aee2ba37f448e89dcb5071355637d5d15545cf9cf8e60baaf2cb832793",
          "0x11737e654c3374ae5f4eb5c74f203d1da2aa812bb60b0c5cacb5f01c0b0f63e5",
          "0x1af3faf8b2da944010c5e3b35355ab593d59faae404165a07ce92ee11356d2b1",
          "0x05ca179ad0da359d92252ff3324e884af25b0edf9bd1700e012f45b683bc2df0",
          "0x1d6a598851b1ecbb9d3ac470d95ecbd588a3b32303a4cd8a7680ef5df2b95f5d",
          "0x0161720dcea14aad7e0710a67151921bb9d5c40bac136674f862c1c43899d954",
          "0x23385cd49db575f73550759f679df48cbd1ed1d69932700179df6fd61870e497",
          "0x1339217149da74d50b25a43cc8027420e272fc136725702f81da8835d0b9f410",
          "0x2651659ad69b37a47aec09be71481bce3cab23dc04c316118d407005501b0c0a",
          "0x02873755e5d79969854cccaa36cd8466aaa2e0594e3ba37b8f51bb3a6c9b87d0",
          "0x0bf86eca4c048d59ff3ffd610c81a7f99875ce0ff1e193415fbc2bcc4355418e",
          "0x127237aa090a414f2676bc5b26776a420d7da6ef914a89dfb2ea434b6db42c54",
          "0x0aaf012593fc014cab8879be8b63e24ea829b780fe9cd91b68892705102dae09",
          "0x2349511bcf3e14b5acbc973e40063d20c1a42fbe9e5dee99964dfd50869d0286",
          "0x0a13877e82fd54bf79457e703a3c5780eab1970a9b374df6988129c32e2efb81",
          "0x2f13444c0246613e4a8f06c54b773a553b6ef94af65d3437c04e3f6856ee6e7e",
          "0x149f9f85afa120aaa5db38e1394f536cc1530ffb639e292afb3136fb051171e4",
          "0x09af1ec78d4eaa552f14fa6e7ed41842a411c8bd2b49c9721dcd6de80e1649b9",
          "0x1598306c66b69a223a169259386217b9c543bb63b226c2837c835070fa6ee724",
          "0x052d00ac603ae26edfd7d8945afee2021a7f8cd3719982f463be765d26be97ca",
          "0x2d0b5bfcddbe9aeb4286aca9d10f9a783176bf8b9dde55008e232b9e8f45b541",
          "0x22e76d617bc69278c3976145fbec8a11ded70e6bb9b14739d59d7745fbe80133",
          "0x10e0725e62e660dc5a675e2da60c8f1ce756c162a10b53cda098bb147dafc138",
          "0x152e5879db732ef026d2748d6b17c21005a23125ecc01ace4b2ad46744b6918f",
          "0x2c0564cd2043a507901b5054db2e6eda28c94536013ce66ea5767ae453c09d51",
          "0x0a61fdb8748245fbbf026fe3cd6a42b873819c83905c42a5d7a01b3ce30a6233",
          "0x0d86b389e663dafebc5eeb72014ee4ffd205841fbbe43dcb55a0701b42c21e70",
          "0x2b0ea06ea29b5ebf5946ff05dfa56da1db9f91187ae6789a51283286b7242b5b",
          "0x2c9d3d65591a9ed07618ddf4f10770596a3fcf25ddf472126c8cb0b3f8975675",
          "0x05eaea9663cd319d7b6390fd37a5b916d0adcbdea0ef60de5bea3db63e973374",
          "0x1ceb088dc8e476eee2220df5e89c9943d28f9af36adb2dbad1741f19d064109c",
          "0x1f88c713fa7f9eae2ba80f2acbee56aac81a2454add66b1e70bee1e533bde95f",
          "0x05fc10c9b3aba423786210a189a8cbf0639448d239088926ab96346cc543f75d",
          "0x097f99277a3d8fd2d954de6c2d58e33f65208a53bc36d1383c2d17797b49b520",
          "0x295508a069661a782227ba2a74c212d4728fb8e8695f1b4826f87408ac4d087a",
          "0x0760bd5d3082701fd9e7d17d530a457d41a7be55ce6b608ae2363c3c45db4576",
          "0x0f6c413f51067fb324da04b213fa890fb953332e863df3b06fbfe3d5de732673",
          "0x1b0a842b23f5f0059a02f26579d95260931b64385be42555370270cb462eb55e",
          "0x0898e5f4d62bb5913fe5fd2e3b75440887d1156f415aee18cd67fc9d728134e2",
          "0x10f8852656055f6352276424a54ec899fc6e6d87a4299ed0ccb90011cacb1198",
          "0x15b12eadb1003ae6382b3d338854a5002c15c03d9bb02842e03fbb75da769cc1",
          "0x0058d7f1ccddf26fdfa6ee0afd3409ec103b91f4992518300ac2a7bbf82583fa",
          "0x24acf431e67a9d7f1bed441756b03a777a99fa7280b11def1061cdeb2878bb8b",
          "0x1a8e72e3b76468c434bba4f191e90170a642ce7ebbd289087d187c305f13a4cf",
          "0x155a981f161c8c3c756fe204ff2a25ce0f5346957d69fadc6855c6107e02a8d4",
          "0x1c747b94dba58c3970414851318a6fdf4c86a5f65e4d91e8d4772f567b49a883",
          "0x259f9119fafcff3c0a98d828daa5d1ac21288c6ebc8e16f4e8a85dfcff442f95",
          "0x1c5cd1b340400e37a37de09bb20753d4979322e23fdac9c7aff9f8209eea135d",
          "0x28972ec819ac03e65b0b00c52ebeac03b5ef78281fe543bb3f4e762e7904c6f6",
          "0x277e2dda293014c5c76662826dd3d76cc7c662d28b2905bbb1ef3a3f5081dcaa",
          "0x076e05aee9f8c749d1a98b3402f4a2c87be2840659a5182e15ca87f31809c84e",
          "0x26b2291c31dcdcc2eb55f004c1eab496490d025f12265be835f783a9613adf14",
          "0x1ecac53aeeb7e2ca436a200daaf1e975be8ac687a8102be23a7f291d9244841f",
          "0x11766003bdff5ecf352014501776d0a2eee1f7a8898409b21abf35a7092f4610",
          "0x0becad60e8eab107933f92495ec6e5070b26149eae6bb1005197556225239f94",
          "0x08cfbc5e1f5efff8fb1736bf118cfdf0fbd81cbe87ea61931dcf0cc70b1c488a",
          "0x15f63076b20a19f545ea7f9d386c63efae619defd90cfd8347e3e7eeda6b2d6a",
          "0x0a989c86ca97f9467240d9239a51aeba8c7772a4b68b37f97f4fba26958bbe1a",
          "0x0b6667027c41530cfc1cf7c6b60bf74fd15a1186ffc0b77f0976d5e1d4501a95",
          "0x0a87dd205830beedd3f8bf92235ce278e2c8529eb9f1a44530ce1b2626c49c01",
          "0x24a833d8f5db7cf49e889fe23c518510a895801f7f287538538ba3b0828f8101",
          "0x2a0116295e2074c23e1bd817842586d115cfa7103dd98245e6d364ca9d5642c5",
          "0x182724024bd1b487a7a886604e4312f25df11bb2963ea152649cedb6ffcf43d8",
          "0x2ec4fd171e0927dc9331540e1f6639e1541eb4e0cb74c66cded95ba05e718b8c",
          "0x2bec29f75e13ae7002213bbd81ba9848501d613894596e9fa35d734ffe9ad50d",
          "0x0ca8fe863fb236c10ae74ec094a89ff974b5d9cc498546f76c0bf1a510a8f984",
          "0x157e6adc39e984ff60e904ffd85d4b06c0f7c95d8b224eabb0e1090c080a3204",
          "0x1337e6b950018ae96f46214425210907e7578aeaa0f62fe3afb9877ee3101782",
          "0x267f0ac325930461def6afc4f54b6d09e163e84c00a41407938d2d263fd649bb",
          "0x1c049001366a3521dbfdfce92c324ad021d035767911574fbd4b4e9000ae9a4e",
          "0x167db26d1f93d91141c48b1a7ecf78ab3f714481594f3eb1dab4a4b78329706f",
          "0x159fa23e2aa81b787d70facf416079b68de6b8d7c0e234421fc450c2f1917256",
          "0x29adaf20cf59c0820209a749c61a36b84eb168287f7ac640a37df4a569c3defa",
          "0x03c390694ba7ab4800b93121bb53a36d654dcea8ff9bda64c95770fa545dad59",
          "0x091f94292f6b5252572bb419ec455d5435eab1473eebd72d8b20ae3fde0146c2",
          "0x29d64d0356b6cd07cabc18eb5de28728c246663c60133dd989e89af97f5dc212",
          "0x304897aa5036b3a80774e409994f5d1e71a7836f577839d3b92d938590888697",
          "0x125e0dd8f249486f133b8bcb9179c5525929cac3ab09bbaefd97a751bcb87e83",
          "0x2fef69cb9e21aa57adc0749d32310ebbc3921d75f8b5c79978a5e83d66888e6e",
          "0x1e3af408be8cfe4bbe03849a711fcad85b4f27977733524f2bd35b7166438687",
          "0x04e655df6114648220f3a2a056805a636307b809779e9397953dbfd8b9477b54",
          "0x2a43229e666093be6184e292b4a87d605cd3860037fa2aef07486d4f856dca8c",
          "0x156f9aec7359e5427d5f97a165cab447d27089dce49f1401e96c37e159490cd1",
          "0x212458241e29a83d0d11c64fdb0d2c5e7036f441e5394a625f52c1100f8daea5",
          "0x1dd909f5a32a657a89eaf948a11f8eea874eeccf49632b310314d77ed72c6257",
          "0x19d8a81f4867c40cd292344df8d2dd64b07fead4054107414a45bb504bbe60e0",
          "0x1f285a438fc7ca62edbdbfa5f9ae627fd1a6b68d4bbbd7ab867c34db73c628d2",
          "0x06edd2c97cb8ef5db711360743458dde6d45de0fb41c646a72afe0e02033a9dd",
          "0x2f3771f984d334c7298973e9b2cfaa1ad5989cf379bc41f78b964073955b978f",
          "0x2abbc43b9224188495cd9ec8479f39d763b8d560df4e9dea1cd7b1618fcec9be",
          "0x25178f08389153aa236e1da3c3bba5e408d52ba913c3718128a596fc40755a54",
          "0x1b28045d36ce94ca72ad5539c54d6a9a872e66fe6206a251a61df5afd50e3e93",
          "0x11c1664633f12fd93a35d8553fb8e1ebf3ebab73614642da48f742483c0d8148",
          "0x19307c6980c6adb7fe1d4539c10d6157310af45ceaa4618c0d4a67f71a4a8c31",
          "0x14fae46d00733e5f7e8ebfb360853311f021e2a252705453cac23dfcd72b72ef",
          "0x0e3d1455e479d3b99bcb1f8b662a43c885a9911b238e08fc4fa6bd1090369492",
          "0x0f3e285e855de079c2f3c562b5074d095b57268b0ab1aa07c4f7650254087d7f",
          "0x24ad5850b4f923abd687dbc4afe75ba26039f7d4b33cc43bb55f600be5fd2ebd",
          "0x0a22143eb18217e19455e023bd571d1e757ccc89850504f580e433cb40afdda7",
          "0x0b968c0b278f32e9ee1b4adff37aba3d15d5943a77ac7783353397b72c70d533",
          "0x276990e5dc0db030b8d88a5828a4b343177dcd554fce8a36692f74ff38f64c68",
          "0x1f180aceaa766f24b92552242448a01326580a9c2dbe2ae3ffbb530f23ba1717",
          "0x2dddf4a14757b28de03cfe210be338cfe3b63f8a02d7fb0155ac9c6e3e2b6bd0",
          "0x1481841108e80996b079e3e977578443ce0ea8899d558dd92c5cf20279795ddc",
          "0x2a3a6a173401ca83d33b0997eaa2805bf7869cc7deba404f395ee14e06daa3e2",
          "0x11d7372db5b796363296c6b99040d883ad66f54862b4965f5da0ee0227bbc456",
          "0x033e757e99e3f1ca826c9a648a73de374a11c2838024cf736dd31c5b5f7c0825",
          "0x0e1bae5e746ded510eaa1145574a8468c3a7e2691a7b324a9b9efb36a9cdd4ad",
          "0x21818b1fbab0cba1ef20245ed99451ca1dcca899222c147b431553016a09dc41",
          "0x1a2604c6579eb3b1e803427249ecf1742a9bd72a6ad9ac3845191f8c536f7d91",
          "0x2f41b5d5d349e955e15f50ba0cc3d3e854e9065f8d62461332ccd746bcb57865",
          "0x0394fff2c025027635cf4a7cb7588a6ef587ed994314e9f813b7ab99f8d4c32a",
          "0x0a9d0ebdd8cdc392ba446d6dcd5c9380dff2975f275e30f636dc9641b2a2362a",
          "0x255498cbe7c9e89580548f0d92255fe9a1775569c380abd18d22004807b68874",
          "0x29dfb1a35fe5c7f25490b6e2e303d711887051c092a8e642c07dc130ad3901b2",
          "0x25a5995a98ef0f5402b25b2031698447ff89a9b630094d71aaedf8b5fc4ccdfd",
          "0x038ff605feedf7a740e890862fd593fb712aa19b4721d0d97b0a85ea77f2b621",
          "0x1aa20d730f53b035813f1504a853ec87f89bb56b05fb7b34f21deb1aad4c18c1",
          "0x1124f2b33e05c415a7d9881d948b9e15f5891c816a0495e8e62e89089a29673f",
          "0x051d3aef244ed3af1880d68658b4fa452aa3f8ab79eb4d1de2a1b827fb5ea359",
          "0x18c3911d3e25dbd901a7377327c5622522a29f56fcb2d395c4c9ac1e05409d3a",
          "0x09e0a4773ed5abf26e474c8050e9578c5398abfc42d2ae66a72c3957622de157",
          "0x2de436c8a217f32be5d1451bfbff7e3f6b3ad46a2da58f8439908d285c9afe55",
          "0x269ad28cb1fac223861da664acdf330c1732e75ce9d1a80071d8f623e668758f",
          "0x18d5c9f0a8c3c1c62a31a12d945ac562e7f28e951145d700751b59f5c4e046dd",
          "0x1eec169ea79a149b6a4c5b3ace894f421779dc9e9bb366e8ecdef2eb3c53fd39",
          "0x0982ce518d3d2e3749dabe6b57758fef9eb663a996dbbd91aec0ed84eaa75ede",
          "0x272007ee9d7ec7efb6c80f25a2110f94d20ac436f7c50c1e2b7f6bdcc76909f3",
          "0x1072d3d540d1b00dfc923dcae102f2b6ce363e5054b3dfe2bece4f96cd15d647",
          "0x28bb8d7194d4123767738d6b4d73a05a94c8e93c7e08f808c3a4bdf564420120",
          "0x04baa18db3db501d39e42c49f1cce30dd5619e1ebd14266857e38a753c63dde6",
          "0x130c77637bdf1a336d9b4c83104ed1e7b81808142a0bf1b2771b530eed99f03f",
          "0x02c0ce56da12cff29effbc3dc9b05bd07d7ad42764ff28350c7c48ce48ad4af9",
          "0x23eac7695fea23aa2f2ec9e1ea7b62caf5e71ed61066009bf93a6ef3f74056a4",
          "0x1c79be403821f680faf8289807244a6b3c04d0716134d089add44dbb97da7172",
          "0x05a48abc281f771ec36dca6268f591ebbade05b23fb81e7961c8cdff5d5c8255",
          "0x022aefc1e9a4d06cc764e9498634bda97bf11eedd5850100a6dbc858619d26bc",
          "0x100fb400e2aaeca68ccbdd4cb0528dd3b8da8207d6bce2d41b4aecc1f0720581",
          "0x04f0b1d5fbf7c9467e826c385424b91faff7e5f6b59e37651dc4bca500327cc5",
          "0x06e33a10b9bafa04f20f3e596c0c1d986836b7c16a56ca48669d5a0514270160",
          "0x081bf056335b1c44c461c4d6fc1f9e032a18b9d2f7f2400724db06385bdf0774",
          "0x06ca03a97a5618ac671d4d2c18501e5e8588bd793b2c3b54dc154d1f40bf6271",
          "0x114bdbd88798dad58dcbdb9a1fbdc123ed1b56490a015b7c2943eb5aad9ed1dd",
          "0x21bd28fd49cb1151be1afac1cbed0b705b76058784ab92fcb3a2258291780489",
          "0x25516e358045290d7bcce1b4636ca33095142d4b01f22ef7d94e28cf81e9e29d",
          "0x21dee602b25e5a67889ef243ac9c891b73ebc717c7d8161995d74bf4e5bec07d",
          "0x205992101ef7c5c3493aebf5fb8eb7acd01319524ddb56fb75dc159a013e9c88",
          "0x0667cf69b46dcfae72f7fe6b5d81e6d1191ef029280803eec032f5ffaeb12019",
          "0x2b7a9027fa05243ffbaa486daacaef850c4d033b84b3641db98fde01315e5be6",
          "0x2c7aed13aa9064e06c4dd9299479fd2fbf56f73edfde4a117cb8db54dc76e134",
          "0x19f76d0c1f5b1efc61c645180c5441b569a90ad7110f51271046c642f78ee4a6",
          "0x04749d2cc3d3c5612d7586ef1214de38f848d8b3d9afa266e153eda3920e72c2",
          "0x2858e042dbd512d9ec147fcd5cc0ff21570bb5e8da3b20f7f69acbd28785610d",
          "0x17a5cf2508f786d73497fbb01f1a02dd8beded89a2a3c2170ba1f3b2eb31c964",
          "0x08c7b3263cfdabea784d21a2d888b7b10d6c95a282a10169c85f22a22bb78e66",
          "0x1604f8490be24e6adbc37db5d23f82bd706546d4e78c08e39c1580b7c04d46fe",
          "0x04d2e4db13adad49bbf930ad243167c77297abe1bd73b5d148529efd75ebee00",
          "0x249361888bdec58dac53f9c01752c5f6ed7bd97fc27b3fd41e0cb90b9b2937c6",
          "0x001ff257f8b90fc3cc3f483b9623ca26519e4e04ae6dd38ef24275258a7f1494",
          "0x27e9c91e30b6b5e3c3097ea19fe5341727a2bd8dcbaff38d057313169e3fbec1",
          "0x022154015dff9dfa94f7a8339f4ff118a8f8176dfab2c88468b2cac7e3914cfd",
          "0x03a08472944a4c84ee7fe76ac61ba12ad1b5ecea7d14d4dedc8b2f7a878e2afa",
          "0x227066b89350a8b139e5bf8b14660caba369b0828b4caba58600f80cace84ab7",
          "0x188541fa12da77e21d041035190e0af32728193188f77229d79a08cde35e11fa",
          "0x25dd5c1efd162352f25ab776985b0fffc05deb7094bb6d2879d925cba328cfbf",
          "0x129f292e9cfc7cdb1b2ae2c7c30c3bb491349cef4f7d65812d66095ae9ea2aa6",
          "0x206a809eda7d396d034e89813719a58caae380eb9f221f445b67cd5a7514dd44",
          "0x2e7f566a18c5c428b55b4b7d4bdaec63f721b59c4a307a7a740458dcd9d05d9a",
          "0x1c0df0b100e4e728a9e7aa34f6b0db0da6b8fc99c3d377f1560aa156b7f2626a",
          "0x0b875a366710c0691872b26d9a98a498e929acc2e677868c4ccff663395cfb72",
          "0x214168e91d3b6a94d48476b1b424f16240bfc8fff6742494cc897103ba7d2459",
          "0x01bab48ade466bf636813634624daf73b6c5d6614340542895795c49716351e9",
          "0x0c8425e1b2470ca424397cfa66665fb861a3af4ed66db9045fbb6a7f761479d6",
          "0x0870e13994fe31f94b82cb4923e820a13c37d711d56dcc718f4b15a03d627d72",
          "0x14ebbcfca7be17a5efc356904a319f4969b4d4136f1026f57400cd7db424d778",
          "0x22dd5ea69a5036fd0d4f63153af386feb23bcbd02112d0b7574a6315b4dd5fd1",
          "0x1e72a099e89eb37443e42de1ff7def1549480852600cf4552fb17466abd89ec5",
          "0x018fe65ff0f8901603ceaea4a7462fbceb80df62602a9c132264c5aa49de0cfb",
          "0x1b649fe60a17792252a77ec365ef832fd3722505ee40b08999c728d5c6db2a62",
          "0x18a42f27632071b87526d95dcb7de26362aa28abea426c73cf679450bca959ea",
          "0x22ab7ea700db2b287b301d010124c1d2af58f76434b8bc47c59aa88620add840",
          "0x26dada935deef8551a9bdd474985592e2a6e9ea3522c07afc4bf39577211011e",
          "0x0c6f417f88a5fe08839f2e8b9007e2360e1d618e1b46a4979cba59d29b719644",
          "0x24788ff3b08c4d0fb0b51b9b4358fc0cbd31ca31ba05515855a33a282e2de1e0",
          "0x1db3fcae24ab59721eff9aca5d5d41ee9d7831a79a45ad3ed385b1322a7b2785",
          "0x1f45fd57e811d4e574516575d86501ce6be9246f5891ddef62b7ccf835bfdca1",
          "0x11acec0b13d058dc6c7239eba9034aa33702da17de75d6306f282a1b2bd16892",
          "0x21acdb05d55ae1f4aad873ec5adb6b6078170063a70cd2e6319ea0cef833cf29",
          "0x110d9b94d49799b659e142699e767d9564ce45179b522648fa8a83b45f8d76d3",
          "0x18db2b58b40741f2e007f70118e3a1a1bc2150e04fa34e421db5068de19e3f24",
          "0x014768c6934126d0ebfbdef341b57ed229076d70348eecdad8647b1d0df7191e",
          "0x1704d2d2e1876a075b167a65f6cc26d8837f7e2d3f7628aa26d3f7696962c237",
          "0x2cb8147670f73e2ff79ad1912c835d3d3f2b2381f60eb37444a6c0c173b537e7",
          "0x0908b9e220885b417b58db1da0ca974c2d657b50ae1c3c5e114112a925a7159d",
          "0x0f0d85b4586161eb7e1353fbeb7ab3e31b5b62e720379efe3f6549079ac3e60e",
          "0x2103faf663c3549c9bd073de214585c1aedbd5023e4a5ae61996f5e22b0a4a65",
          "0x127ca0c64d361063a6c7da37c6c3c2080181b6dea5fb63469156f2fa486e7ffa",
          "0x0c3e9dd099f9ca600ede039ada789f28795ef7fc650e845402fc15f99d48c00b",
          "0x0ea05b5d4d88b9b5fe35406f17ca1bb4a855e0a6ee7d60b31e36a2a21f411fce",
          "0x0963c4be071c32fd06a52124c0d87aefe595c1db2b2e6c2c9cef53456bba30b4",
          "0x0aff89c1e81410468fa51e7776f23a077f27446bd98cc72189f641b6456eccea",
          "0x15e753027d63337a330c260000082ea07548a724dcafa255e67b7745574624a2",
          "0x1f7acb7ff46a7c623381155c6829374bb77587abd1f9fa6b879df3240954ad75",
          "0x0c62a3de0bb681107c4dc6d9e623d0562cb6784f2403693fdd64622203b16864",
          "0x16ce582016cf2e1838db97dcbece873f49f8c60722d756c551af3ad3b1a933bc",
          "0x29cd5e2fd2b684e47c078fd56f852b1ddbb07ebcf995be991e9c2259539fa032",
          "0x12e8ff93cd5c3d7e0455d9eb0e7e9ff940575c41c35d1e5e441e530ea888a908",
          "0x0f3c400867219d40e6abf2ef22a90901811ec95c61906c730cbe777761ce12f8",
          "0x2a61f96bc53c2328ddc85e45096c9532c012f4713b8b8c8b1fe1227f8fd760c0",
          "0x1ca94ab706e569a4fc1bd36c9b63457d5d7235b356be56bdfaef24f99378b467",
          "0x2bd4a2387e6ec124155de47009789e1b945ada3adac5e35107398bd569524090",
          "0x00454150ba34548a851b191fb1a9f3587464de17acfdb0ddeb715a2e64373174",
          "0x1f22b39bedd115a950f7d784c7031ca0ec3d1a6a67375d7b6ede480c5ca145ff",
          "0x079a66156cfb99cc17c6d39fc9c2219bb89247b6caf93658d59c6fd0a1d1bb06",
          "0x17ee6df0822371834c222f954f03b016b8d5ad4db1be66f3f946d5d028e65176",
          "0x24cde14169b4a758c3a126ab3f8f18077fbdfee0f03fa7bccf999919dd417804",
          "0x20ad08d3558c9efe03c8895ad4dc88bf8ab5ed4867e1acde6533ea2f86d9fa7e",
          "0x1d0e87e604d01091898d6e85d2ab9af9bae03ab511a34cd9a620f088fdf8f1e0",
          "0x0310a319952f3f6e25015abcce49fa8110ba383c048413c899ac4d202c36b804",
          "0x1570b11e64614fd49047279c454078eaa9cfb883a9434a064f763421b26b2709",
          "0x07a6850ab997ba45837a422c1c0466e6cdaf76fac2199f13f63986b2a19cf2d7",
          "0x02c25344043642c634a4c011d981aaa7e5f179ce9ea4e921e8d52d0e57169ce2",
          "0x09f74e8a85c293ee8a2e71f6d23495bcd9de56c2e0034169034eee85596f5a7a",
          "0x079336363220c753590ab21e164aba518966a7480c4b2890f45272368ab2a97c",
          "0x1ff046afacd14fba346ce72edf23e540d10842ad7ee3c733467779518a9a70d9",
          "0x11d64cc17c095e49c45eb1ca2bad482a820326003d49c8cf9e9c02ecb7acb4b7",
          "0x2ed20c0b8e33f57ded5581cf937a4055f680b7d72d65c554c014568087d5772d",
          "0x259cbd244ea8c9840becd72df29e96fd89b6c39c7be72b16be9f0e43b73eef6e",
          "0x1e7d2f21917295fc375854225e63ad503e27e8d6c9225db35c2ba375cf4f8fc6",
          "0x257e31a7b6add90c617b93325bad37127f0732dfac4d0ad93331fa7999212a5a",
          "0x1dad54fad4273e93971deff7dc3fe74abef1cf6c302a64403fc7683966975019",
          "0x296a02967a5513e1827e29c77285be64682ab142d13c6d2b7eb58c0920dfd0d8",
          "0x3012ff61f630a0352b741e63d628ddbed474ae6993acdc0f9e314e8eca590f9d",
          "0x0fcb8fa2167ebb6b4f422131a8ed841306b3a0840f258d68edb477e8e1ebfa2a",
          "0x0135767e5d3112e0777607c1c5b91b1148ba641dcea07e1c2355c260285ba1cc",
          "0x091943098fd0c94aafeabf4dbc494b6385e39969c06c0a6854de0c7e688c4d77",
          "0x13010607d24e7a178c43d9bd68212157776321d95438d572a3b6ef77141e11b8",
          "0x16799d69231b9802789adf9d22468442767461b49d594e9a950dd8d5ca49e7d3",
          "0x1eb07b70401fe93b81df97a1f4599947a6a812e34498bf2abbeb1d256a28edc7",
          "0x005cdd9a797bcf1def23e8ca120b900a7626b357ef869644f28afe0c053f3eef",
          "0x24b20d885cd9a6318269aaea97b2469c2b60f7ea371c6a9c223eeedaecba49e4",
          "0x2986b0ba3a3e232129e3c444e9482584fd83d6d6a7d9bf43120a4c56ee5db03b",
          "0x1a188537b78ce9f663d64b5755da53cf88ecaee852442767fc16025ff7a66780",
          "0x08619134749841915bf5f92cc2045ebfb124506b9b25255be814a3b28fbe118d",
          "0x0135cf6c3cd0c694581fc2e477d6538a7b233f89d226373622781b029340f0c6",
          "0x04f9a5254dff765ca0403efaa2acd9096b7f59fbc20039138660b892c808068a",
          "0x29bcdd6c672f0a1870708d37e85130225c5fc826e9e62146313fbe1ee2c74d1f",
          "0x0c1d777f8eed911d4cc0e50c3f430ce9a1d5d7176800bedc36f92b7e4a685fe0",
          "0x1ffe8a9ffbc76d46c2ea2abc0e1fb3831f18c81144bce602811de39623d4a493",
          "0x216cd3e66ee82b1da658549f4df13ec3f38ce9341673c49859ff0e831827a7e1",
          "0x06b806883bf69388b148afd73b4880ff63bc57e089ef256e4a56befe78abdbb3",
          "0x1868f65214ce859946a2a86eb0925a650cc4d47a95b988a3bd98a5406faaec8b",
          "0x201b2cb3fb0002584beff69faa8a28968ce73207f731336a3d56860bc8d33d3d",
          "0x0f1c998ffd657d5af5f3d1500f9821453743face03ae2ffd055bedf624b76699",
          "0x1d8d584fd393d2a8c5fa9fb2840012a4e5cfd1fca97f83bf6cca4688b3931f4f",
          "0x1d4c5ec792d0f9e121c17ff5754eff980a2477f142fbb815901b6c597f5f5101",
          "0x058283d9a82cbfd8f01675373aa63d9279e9bb463c225ae7895a8c51a794bf15",
          "0x2797be48c99c19a141e57cee32b7845f553923b08474796cbe0eb9e79b05f8e1",
          "0x2b54896116cc45dfaa47204d5156075d1dec98cfca7447af4e93457ec1d9ec6f",
          "0x1b2fad2ed7baee3fb3d2197d6a9edca30ece42925f13481e0f780172119fb13d",
          "0x06b54e3fdd785e099f791c94fabfc62c3cf75963c21a75a60e65da896ea37dc8",
          "0x2f3c8963365a4058a8be7a91e6e451dcb1d7933aa8484a5aa7359683ccfa87e8",
          "0x2fd9929dc895930eb098661ed0d152f2868bfea13e8992d08a69253b9e9afc7d",
          "0x25d1ebe8e9ec0fc6d182b906d747498cb9fa55a298f8f9f6c9b4cc2eb326adc9",
          "0x0b6e6536ba3020bbe259f45ab1c38b2f5d36865b84ac8241720d28cdfbc34122",
          "0x23b8b4db22e8ff993e12d9b81757d1e7edc6c39dd4de47ef6caca147e9fad713",
          "0x1c232bf61cb7d3de8b761fda9304c24420b059fd01d42c74693192ad77634d69",
          "0x06d0184a21f4593daf868d9560e4647b5283892526f6a7f9c5ee2663c666d567",
          "0x1d96ecadc34f0ef9f5a9c10651d6ffe3fafa6d6c7107d8a92ede406c229def93",
          "0x25d6954f6b8e584c65d70a0d9fc5b575b5fe34e7ca66d8273928ed4b8fd19303",
          "0x011560d05817b7116aebc0b0e3cda650e68c0f528f62593af13587d683bf3e37",
          "0x0a47bc556a1bdf639aee0eafe6cf7e7b901679b1b14a47dbffa1b19afdf877ac",
          "0x287af493d2f91efd9e12f3bc7c7c4e0e04dfe89fa9e68242fc418daee7337bea",
          "0x114980324eef85f90c3877ae83a48005abbab0c3c0f7df46b3244d84019ba5ab",
          "0x2f2f074c9bc276d9fa172a81e954b616cafaca11090da4c330f3759c68eac2a5",
          "0x13d19a59728afdda4583a9e180ccb9b095f5b5729e866851982711903adcfe13",
          "0x260f038a5bf94790b22f2796e77d65d4b53140ab18c617af7da59bb1ebad8f46",
          "0x0270944854b771115be9dae3bae6007838e81311ff77e334755c37c2f8abccb1",
          "0x29fba9080e2201a4d09f179919d8f8e29b22b7aff11a3c3a1ba8bfd36880732e",
          "0x0735d5519e7f9cfafa9e943ff54f904badd3c07812a71155579d361803b0d300",
          "0x123d88ba78d5d633ad4f4e78ec2806d642ad8d24aa9ba8d6ea4393d38c5a794e",
          "0x2f2c3689a6ce7d1c36aa42906dd8b694be752a4d5643cc8635501a987e638daa",
          "0x0a9f37c901456b2a30e8d56d65afaf7cbe90b3a69b47112f6a909ee1c896c0bc",
          "0x0696d1a52cd965c61b8333cfef9f147da7cbdaed71be5fcc0a4eed3acffbd03d",
          "0x2df64206d9cb7e763d94c72e85da26e6147ca02236f670a3bb97d0705cdbf1ff",
          "0x0f924eeec090b123ae678a47aa3d4cbb2fbc33d2ea10affccbd55bd58021cc70",
          "0x13768e9d6ba854c557124e7ecf2e7b9a6a3bc1e25751c5db50b681b83f5e4e6b",
          "0x05257f1213538d118ae84b89e2adde7e4003e042836fda32a65aa63c96a702a7",
          "0x2eddb854c4de05814827157e9d7600e053c686346537776592c91a9c51efaefd",
          "0x0c5b286e46a70f81261a1799c036cff3a138dd31af847eea379bfdce8cffddcc",
          "0x28ceb1311ae3f2112c59eff2f1de36f027fe748e398e61e2dfb5f41605195b76",
          "0x02baa3c428d4f39e1dd51172840cecafc93869a5d4d2c451ef261b91d833eb18",
          "0x12fddfcba4edc48ffa0af927e5d29d678cad43b1e5889e496512423c51c75194",
          "0x1ffe4a425765acbb4dd8f671f11c3abed1e43cc8729c8d7258a787366e6935bd",
          "0x0518e1167639d7726de814e573f8d6e644de240190eb22da07ac2a6dd1a49fc5",
          "0x1088088ca3b2ec5ef3406d8b19498409253423a0cbaa579b78cfe22b8d2ffdd8",
          "0x0141132e639be390f54fb46daf1bc33a698da31b6e21241ac25ba91b4a7a2344",
          "0x2d30e4075796050c0f400440059b3b08141a3c096955c00720f37e3349b10037",
          "0x06c0f8d2050410d797974e3a22b48d7b4aa0f4c12db7c71a319adec4361941b3",
          "0x027714059b3ca2531e3a65e024d3bd46869e854b68884a6b16869109a965333a",
          "0x1143e960033b2837e35911b225966fb3559f869868a7587684cd7210ecace9d0",
          "0x24561022b33523412fb78512e39617226ec874021939d3d0e9b7a401794632b5",
          "0x225a3a239054ef061e664b56d65efd62ddbe5cfef9f55bd402a3278b94c9bc1f",
          "0x04be165a533d19b49a0151e7183868a5120a2e6422b500441050b41c486305b2",
          "0x17258571aa87c63d477d10e64d069fdf231a6e47d4a31ddda4d6e5f1933f93df",
          "0x2a9a6b89343fc416e297dbba6f6bc3d284db180cdde66ce94b0baea5ff716b9e",
          "0x14e059588f8f8af22297dd77bbb0112f57e56c3b7d3ea47471334d34e2181b6c",
          "0x08c09cf67bf4d0fd0c211298fe47ed233e6ab52ebcba1b524f66dad01366ef43",
          "0x1916ed4b8a5f979154a9199566a8b361cc1007551ad9db45515f8a6c0e1b2705",
          "0x11ac7a860d793f97870e952b32464cb5f501e215e6691aa5d4b79c1c4cfccf33",
          "0x2770c5a5b83ef407cb79fc9e556a310bd6aa3f081e6b45d98a7683f60c3227b6",
          "0x1d412d15cdfdf748f3a97dad82987660dd39a4ea932fcbc51a082233c156d69b",
          "0x303def2eaf1677b5c7b9cfb679829804d6734dabcd7ad3a774bbfb9a8337bc45",
          "0x241d6d50be49fb796fccd362aaf45b350bcfd74573d144c73e7ab42e3047011e",
          "0x114727a81cd91073352f7f803cf621820de779cd7c6c2b9ab87cb5b382737d44",
          "0x0d8184eeeeaff3b2fca1a4cdab39e4951e3a57327ddee51637dc6d24464842f9",
          "0x296998f1627009acc7913af056bc34280345ec6a9c27c73804ee142fe0b2b99d",
          "0x145b273c11c576c7578a4b02281d9b15153775884bb6e788405c4879c0edc2d2",
          "0x0973e6f51a9cf4fbeca74165562d7a656db8f642c4105a2841b1b93489b1e73a",
          "0x12e81b001e1e905f9dcea512b51ff63d55488d57cd25ff3add4025cf3a9f67f9",
          "0x272e7880a179f5771dbe70ae7d7d51ca28914120ea1dc3ab8429565cd6a7cbcc",
          "0x155b4d3a78b1d705f6ce624bf465d82325fef70167cd7784af872872b348a025",
          "0x09203e60c31daf6007a9ef20cb2e34eca9d1c9d93e99021e0a383598bfe77392",
          "0x11ad480fa72db3bc1695c9bd672d2e09a54e72ac9e8ca9f45ff8a1c73f0f75f2",
          "0x05fe4ee300c48b0cefd03b8707154264cd513c0c883b463944dfed3040c55dcd",
          "0x182a229d10429db9ff0a5258729e706fe9282c6b7ca60473ea234ca13a31bfe6",
          "0x1ef4d2b668a1e1ce444d213f1ad4d23de6ccbbf6cf5a93d31687e53e967f9dd4",
          "0x1cf2d3bf240e01691cc6fbbf23bf48d21eb9b889c6294cc18d1fb79c9b9a53e9",
          "0x00c110171a8f0642ac0edb07f83ae2c79d991a3438366f98c32c2d12f2f94a49",
          "0x0d82a68b0570ac8cb4b70fbf2a60bf17962ff2886284edfe5aab8ffd84314bfc",
          "0x0a31c585939669e5697c6b166767edac74e6359d364e1263134910927648ad38",
          "0x137c5b065b8d3a7161c63bbacd60dec9eb2e17c63dc696a5d157b648554b1c58",
          "0x090658991cce09af9bf77bf1fc0506346e5a03e3096921e8d436469fd75bb6fa",
          "0x09b309f6388a7f65393bbe50ebd6110854a91c674ea05189451cf6afd48fdba3",
          "0x0cd217f30eee2598caa7389d2efa182a4756fadecf67b83915aea4b0c36cebb5",
          "0x2b9a50d2973f4eccfe26616eeea8f7f2a9fc1f09e8d2853869194402179baa7c",
          "0x1d444efa271e105a83b3105d469ca1eaee6a27534b9a62cc210b19946f08e1ae",
          "0x16e21e081525d3dbc0f34577fd1436837c912d3924ed75557718992d14dfcf4c",
          "0x157b7cfd75560a0bead677843c52591d17554d8ef8a015be23e34adc390451d8",
          "0x1bc4666ac3f4cd1f5dd72bcfd1dccfd8c60fe3722a35f65682091586dd285284",
          "0x22b10f5c2194d9054221ec2a9cc6a1bfc1f4441871831d5f24d3da686d4d5e9e",
          "0x051e548469d19290a23fad84daedd2b5495591f22c3dc6bf467f1eaf12a09f50",
          "0x166e64fa7d0939c9127aa58b7aaf2bea61dfbb3138bcdf3dd9cc986e9ca4f0c3",
          "0x2e7f8d47107c0f31031de15f840ffc7b43b8f64815dd7c10357e852963f14c84",
          "0x15598a6b2c7ab91c1ba768585f11d64d4c9a3f609ace9039df753b4cf9016931",
          "0x083008079d5900cf73ac9f0501ceb27c3e92250eccb88d10d0e01c593202e8c7",
          "0x028e30096654da16fd90ad2c20080fadb0bbad109a3ed189d4238eafd2dfc3c4",
          "0x14eb993565894d0556189adc509b5945f1275f7078bec96997c3630b743e93dc",
          "0x203011c30db2185e3fef5336058ff6d9a5d05c557c3de1b627bb4aad651db9bb",
          "0x0637901ac6475b826f073e1386498979efba98d4b5daf92d2a9abb63b5aeaa74",
          "0x203cb3fdf3cc234a72ed4c8699327ab6cac0e8b7479b284c08c7097d1629ec07",
          "0x1a1a408f899c84145b135ca0a7a43f35eb3cb77cd512430c325ce44a11ddedda",
          "0x0900c26da8557e0760b971e35af5866c7cc494ac2fbf20d862130449ec41f9ba",
          "0x303a4550897edb795c6a63b60ea33cc5eef82fd0449b6a2119ab74d55e49c241",
          "0x1722e5a843482b59b079aecb995c43d6b8275e1413ec08a55f218b800fb3075b",
          "0x20a8aa1a0c2fb4cd10a82d702c2c30104f00de5ad99103a724deb52e9d801d61",
          "0x2f980d7eddab02c06b6fb20398e7a7acf6132af1a605d0cae0182294952f5236",
          "0x181489870649491f84912c75dffdd55cd0dc00b08724ea1fe43147e1996d8fb2",
          "0x1dd0b954ad2e65acc5ca46615391ae78b6dd2539576a9de4417555356f9794bd",
          "0x194f79cea624f2bca51d368706521a62dc473947209aa5c50083837c16eec6a5",
          "0x2ae9c244e4b0bce42b1b55053a4fc96ee7affda23267920a88e87f16229fd132",
          "0x1ae6a6a8c9bef477d15a21176aeb422be24e5d0f0cbd8c9cb37f4b9144510e38",
          "0x24e0e6a00b175e22407de66815bddd096b42dd73fb551eb810f84e01be304c0a",
          "0x2f16ab5671089f7de0bbd1e1478e45b9fa6284ff4444cefc8b43469187b83e5e",
          "0x19dcac9dcf078b6a68523d3bcc3412980e5519ce6db8d12b6dab3907bbd7e0ec",
          "0x20b0bb1f290136ae88bdbc15b3c864624b07ed3dff579055c1680b0a185f6b06",
          "0x08e893d8af978a0fba2a42f6bff7f2fe3a74d3765eadff49a82056d014dbe346",
          "0x0eac99d7af74de1ad1ffaa9b5f43eca35d6083495536c0acbe98cbaf2d7bec2a",
          "0x19e9e6d56923733923a15cd7f8a4350352ea308d6160473d5937e9c4b50b7cfe",
          "0x18e41764dbb5d20f85831a89fdc14094ed0343216f602661fa5a54dbebc049c7",
          "0x266dfc6e9d31040cfdd1088840fc0b65172976f58e0640ea6f5eadb28eabcaab",
          "0x09f1ac1f5d80d143d9cd087273a957f13c9ee26f5b76cf30d3fb73c392f91cf9",
          "0x1495384c593ec4da248a17aa457bdbe8cf95020159ff46eb973a6b558a6d46dd",
          "0x0a11a63e5191eba16f6ccb4e92bd6389c929ad153c53a130c933a41f46b6b4c8",
          "0x231a22a2e0f6ab20466445129d96a40feec1b299509949588c0f58a766d9b3f6",
          "0x003a3eb1110d75b9668d0d8a48da076e7dcd2ed0fcdeb9cc3538c11773047ba5",
          "0x28b52bf6dd8d0c5413ae7bda5f1e6b5d3e4548a4505d08e36f77b72629d97790",
          "0x1ba18831433cb15405ee724bb4281bba541299cfadd485c6b17f74fce436cf57",
          "0x1d295967084284a212b841ea2ebf7ff29ddcfae8dbeebd9df58b5f862e7fd808",
          "0x0e863567d788dac1dd5f3244564aed928c7923bab8962452bc7885724a93472e",
          "0x0c214a5053ea609e5608e9a6d54343a32cd02d324f6053e338b34dc0701ab5c8",
          "0x16ffb0d9b5f3fbd6bdf1d50383723cdd72f3530d3e7ded29883b900083c608fe",
          "0x20e05835550e6a362606f50251d8ac0706e2fbe57e46b4977e52e1adf3489e2e",
          "0x1891a8d1b078650521b08c416216caa086e0e98365aa1d5ba41d4ae076807ade",
          "0x01bd1319ea81a8f89e2da3f46fc7479c5efea1e4237bd5754f56f719b23c107f",
          "0x1c4efc3b2c0f2669cba549600ac023f7815a95d24f9476589f734ad7b94fa8ed",
          "0x2438e3bf4fc727a743f4c4409548240e6e852939f03e85e352c31ca386c432fc",
          "0x28a8d250a0a2aa2acf48d79e043e252eee15f1d1e6a84d58bec3dfaf37f0b855",
          "0x2a29e7d381d8d8083043970efb8aa561868393850a0f34a0a7ebcd3d7e36bdcc",
          "0x0f9e579ed04df85ea802b488588769c3c0e5376c42a968e8bd0b02dc23472493",
          "0x02a81dc03f49acba49709e9e780c56aaa9ddeb245fe6026d784c47cdd89a15be",
          "0x207116aee1e7b7022a90ac821435e9f7ecb94f9fb942f7b6ff7c6342a02417bc",
          "0x11b431f3210818658cbac818f63655dc6c31f00640c487031a7a6699b54a7242",
          "0x197a50af9dec2014518b3e2fc26013a44f706466d4596f06243f255ba3818325",
          "0x0a6fd02bcdbfcb0200dd89f9b86669bfe8627ce67454b2404d4966f1726f47ad",
          "0x05fac5cfd5e2f5690704f33b440e6f739fb4ff4445c5bd3a69789db652fae459",
          "0x27842cf8a4ebd7009ce2d7ec348ff783830acc87479ad4e401efd5e7339d25f6",
          "0x2278683aef662a07d427d0a36ee6b52ce9628e9914cc53bca5ba4ac2493663ab",
          "0x294cfee66c7b8de505e0c76e2225619066ea5ebe39af92dba7ab74b8780853a5",
          "0x00c6b60a8e2ba1b774f52c1f598d14cfcd9aebdc8d72d4c87db9c6eaeec4df37",
          "0x2f5611fd9b8a9cb052d3b6ef2b2ec32d48218862daa4e54d63219fccb9e0ac4e",
          "0x261bb66ac988ca3a7e2dff027944f8fcb3decb9d985b05bbcb0fc6062080caca",
          "0x0b5e36bdb5742eda03a1d1e3044465a751fa29be2804ee69b38c2f29438624d7",
          "0x1408760c6504e35db02d76d0b6a1755719c757419a494baa596e5ae0a4b31219",
          "0x2f898e5947f14b0655f04bce35dfe8b08aa41303f602747748353959b95d7dbb",
          "0x2d5fad29cbf4c420e6192ff7eaff97862de5523acd6a81ae61197e85e0f220bb",
          "0x24203764364f1ebcc8f52daf648af6b02de9e46293ef2f52b8956269f5a30458",
          "0x1a8627a7fa552c1cd073aa53fd7cc34fb7120513e2a756ff7335b6ab23d47e32",
          "0x19edcfd6befb3fb5dfec768b5c4aed2b27dd9311c4bd49edae8498386de5b3e6",
          "0x1eccece3733c2a81a006975b9e433e6931da70c649fef647f368a67682e1a5a8",
          "0x13a728b0bfb2b322c8af665a8478913f2f1693b39077eea89eb81de4125ae1e6",
          "0x1773b5b09655e9bddacb50af4f33f5e75c7eaa8f4bfa4680c4be11c71cc2abae",
          "0x1d91107ecdd5de37205bfe827e7800c8466f6572bf611a77d4d502242af5b230",
          "0x109e58922b02d172c8363f88c5b9225cc0122fb980e0d210b84d74a5abb01a5f",
          "0x00a0d1b2d14d861fb04c07e85f40ac8a4af481ca602bd224bacb442290ff74b2",
          "0x03ad94a5e38fbfb5bbedd2d3617e6fbcff4f5b0bf89329e01e8cb9538f91c26a",
          "0x235269a08752712471e2d8b204cecbf633f8a1b087b8d50d4386bfdee47fd0c7",
          "0x063d22c46f6125a208206f6991a7e553ecddeb4334f770f69715b9c31defee47",
          "0x244852bd0f883825948fba58c795389f82a0c6cabd905f6f6596d60b8a72e7d7",
          "0x20c9c3fad08a30d64daca24d77cc93e07fa9531a9458b64e7c36e2b8d5de7a55",
          "0x28f02c4b53c5fbb9b84f9be7f2d1151a3fea40829596152ec7a9591d7b77f53b",
          "0x063282e45c9b2fa5c6ac5fccb64f3a941204d8a7d0dbfb6e2f2063ba79dbc93f",
          "0x1322957803e814ff656281a896a1b454f83ee7591d04ae45c55894efda0d4679",
          "0x26f91c6326c5dba2e2332e65e25adcfa80ec44deddb1cebf62f5c3b90fce07ed",
          "0x1b006a8a282f5fa8fa8268174058fc457bb3e2270dbfabf1a77ab10ff193e1d7",
          "0x044b4701a897f684f973ef35f913c8714b23a0bc6892398d2999d5b897ddcf33",
          "0x290fa6dc0e09ec4d9c78594891374807f42e9aeddc710dae63c9e9a824f1cf32",
          "0x281b64631470b98572a677637e538166edecf6a4846ec4b66857aa8cea9d612d",
          "0x1bce47add587e607ed688687c0179da17c54ca73f9b4f6091f816eea1727536f",
          "0x15c8eed354694a3012b822620bc91f1d68c7bac0e6685f0a15c48ef58941a196",
          "0x186ea82f0981f8ca347f0a9eec056daba176a44465cbd85e7b8eb7bd0580ff85",
          "0x3014777dfb63a11a3d9b734e7a47a4d3b6ac4fe406e195f3ba32a015817fe8ac",
          "0x20ba24356eff7ae0b9ceff1562a4a41585aa9ca0d45915204e433f0728b15997",
          "0x2e6161643b1b31dc3829448622dfa6ac7cd79321ee432399877dc4edb25edb32",
          "0x024b512c632070bfce3efa8bd2f34bc100f0de647d0f5510269ff2c01c7f29ba",
          "0x0a9aeec22efd017571affa68427722a1fdea69288086f9c693ad2a42e773b59d",
          "0x15c908e364ab93c1611361ad84f06fa11c53c2311ffd1f4694d63b2b982c5772",
          "0x2562b5739170c5fa1e1cfde87d7a56c2795a1df9c0d6e500fa6b3759eca84986",
          "0x04135965e6fd02788d00f9ae2183f19e0936288807f48df45ad3ff1a70f69e3f",
          "0x1fb4eee3328ba9d3c79f1af71a38952c405f3de71458cf48856da83e06a96f8c",
          "0x18a5e35384d4e479459ad405c05532553c24fed90b8393f3a30b8c38bb2ab3ca",
          "0x0fff7f73e42a52ebbf30b6e73fd4d45c21133e4ce228f534ff6e3410b5b39f17",
          "0x159a3daa666c332a12c6c56e7b56e626d8eea9f2a36ea6aace95834ce6cc5314",
          "0x1424875221f68cbd4f0de4472ba76bde5e4c790a7aff782b4eb121419d61f567",
          "0x18b3209202c6757549296b01095c5cc390d7ae27b5231dd8414e699abb18613f",
          "0x0ebaec9cab92b182f65ab68cfab4cf7e1a80a36714bcae30798f61187a6a9300",
          "0x115552feff175b6e3289516c75c721e15922ceee83425938783434d12dfaf147",
          "0x22d004875985eeb33417b4ffbccc689588b00f5fb99c76cf605a0a2428a82185",
          "0x0f396a65933c65ad9b540ace1416bc4787aa4b6ca3f7f2366a4ecd95ef12ce3b",
          "0x00edd7d28e36173f0c3b28207ddc0b55fa12e4f54da25e7619871ca8d8439d42",
          "0x0d7d9009c3d6797090e6e1059933e21362d2cf037e251fbfc2b6e18611875baa",
          "0x2e368c153fa35a3d9ca68c21a7ca58a90ba28ab252a18efce5a2d59951d7e480",
          "0x0cd6774ae72e071a0beedbeae7a449ec52362f76e5b0e0a4419eed187a31bfea",
          "0x13c25853d9680d2e8dc8c684ef48b202e7a227592f76010a20d593ed672029ee",
          "0x17a717d1e3f5854fb59b7f09e6f8d513e32ddb8946467f7080beb8ca10fba076",
          "0x08691117ebf4e67180021fbd6df623ca48c067e9e890e1739a9672a2eba49ec1",
          "0x19cad12c44534134c3feba2082a29dafeb550920f13f376ccfb659e835ce8ab1",
          "0x0b7c75d010ff98ec7b5ad1e3a17a1e092c353c544f8e7f707f5e816519fd6fcb",
          "0x2055156145c4411db547bef92efbfd4b8a1bb5fe2e13193e0d9c07f39e5875c7",
          "0x164afaeb4166726964fe5a079a1b332517980c47a33a04ce22f56c33d03411f8",
          "0x2936c50982fbdb0f56cce6d4f575a31665fa813d72252464c2776a70ecbc2c6e",
          "0x04de9f4b9d4424cde860ad5534daa8397b1b83835d83f00372fac4e376e6e907",
          "0x0c6553007546816e86c7d90552a6ec216f9a34987be622be17ae4eef454d5a5e",
          "0x1a7041d055f98dbe2d87333de8a3d0b4f6348f4eb2968aec9cbc7dc3342587e9",
          "0x1467cef176cb717eeada2b84230336a70ea45e0f4af5c55a44aeae23ca563a48",
          "0x250aadc3ae989f3e82f4ab1af04ea5ad3d92a98151d06046b6354f98b046110d",
          "0x0553972aee593ebfaa45c932bcb153e62fa638167b46555f9a8a74a361f78afd",
          "0x04e5656b267f8ce0b1a315f9493873eea35c1193f2febdbfecdde494b6945838",
          "0x19401e900ace225941f6c581824e338ff98d33f2f0b43f3b74dfbc0951eca86b",
          "0x087253b2116e8fcb45f8eca1b3cefd921105e9cefb33e3cc0bf7da006383b80b",
          "0x135bd80682f771572bf574f3f714f34105afb21e87d72c40a2f46ecd8518ca77",
          "0x11c234977200db6c688fc254053ad3016390a025d0ca0975d1337bc077db38cf",
          "0x16a5b75b970e48a5ec3eedd2dfb08d2b6c95b732dadff1e1c81e81a3dc9b24b8",
          "0x027edd6afb362a9da2f60335207d7296d0359d339d418602a8c27069d167d23c",
          "0x0c7a718e63c1faf872af76187c5c3f8ffc855d4095f5c55dbaa00533515b238c",
          "0x184d77c3d6d7236db32d9a3e48c95fd448a5a0c1fd3e5ad15faff8baf1039019",
          "0x2031859dbe2a3689a9975b41196fdf2eff1a587a9247361e78b7b029763d63e4",
          "0x305690c19d76dba5dffaecece28218096a32980cde7a9f4205b1989fea80dc6d",
          "0x2de2fb494197d9c1f1451641efc2473b85300d05c0d27e7ed1816de14c94a9ba",
          "0x257e7ecb38903e44f1a558b49fd0022c3bdd932598472c8a12602b7a020e4c35",
          "0x032507176faa049c0dcc74a8ffc7b327ac29743679f21ff553170afdd2f04bfc",
          "0x26720296b4837059257a06bdc3b09d26928102cde57e23e91d1540cfefc4fe9c",
          "0x1af78e5e918963050a415db24ab45cdfd81539caf74fbef4b800473a6235a0eb",
          "0x2fc7b7164ff4096593f45cc674765db55d536cd4e86711085fc05bb2a7cffe0d",
          "0x1a4ab0f4515b49bd3aa4adb03fffb4514d9aec224f6768315bbb2365fe99dccd",
          "0x1de216e2fada4c24d7fc78f587496c24a8eeb7aa83fcb9cc737919d9eb3d85ed",
          "0x1aa330dc4e25a8d0c910bfc87a7ad051e48c82e62586179b18c2ce956c8b335a",
          "0x03d5fb1caad9fb50491a73974c8dcb282e868a605494dd7a1ff9b2df16b0cd6f",
          "0x045e130424d8e0d943c1188f9521a6f799334f57dbe62cb05ee469438e35b4ba",
          "0x1fafb6e25f7e91a4f20039c29e947f863c090fa29dc5664d9f8a69261327e4b5",
          "0x287a56018cd08f5d6293e1652db8cbf40249cdc759a84dd7cacf4979cf4df559",
          "0x23b3508c33e9cd373874da82d6c15c250aac99d33de516f0351d7c421545057a",
          "0x1b3745b04ec0f843b9fd872d6dee97c8ccfe952a3617716231198d8bd837f44e",
          "0x2dd389f08b6fe3ad079bc9d1daed7b1698011d74a913502bc7c7a7e1d739fdee",
          "0x0a8cddb9be00c6e178f3ec831482b8d7dbd7e91b5c8f1da27f1386068e58fb14",
          "0x2e89a90cc4ade3e2150cad862b6cbc4ad40b8fe6779a8e61efc4827f5e43aa55",
          "0x2703815217d57fb62633da64e4777229bbb663fcca7628ea35101a5a6ef991c9",
          "0x2d1d570be0820e8d90f6eec8bba76821e90ef209d705604d6e43832dc8760295",
          "0x02d9053b8863ba6cd46acffa0891c0720bd9b78fa1662bc0f842a1e05de62400",
          "0x17f4b26ff311b1b4d54e74ffa45ad283565b677ef40e2e4e19a635d638d8d344",
          "0x2e68020ca82963085aefcd925073a6427050e04906e7930c133f1889d123026e",
          "0x2574c30da10c274e658dea82f3d5afb58da1a834cd25b7ffa5c59665300b1eb9",
          "0x15c361a25585226a86655101e0f0f3136c7b777521ac2409e56e666ca449763d",
          "0x0b54e1c8bfe294a08328395dc6cd3a353108221161cd70fbdf118c3954cab9c9",
          "0x1805115f1d5b60191ec5a8733ccc5b1b5b4a32d81c70f23982df2a2599528916",
          "0x2934d73dbfda4666b331a0cc2f38f7e83ed8093cf29d111ef74a7a8d7072c5e8",
          "0x00488ec3a6563536696134d8a0a51a872cfc4aedc458c44eb6a7235af9263c95",
          "0x1319d9b4fb3bd01426ffcb26f256b4f8634e0f18f9597dac37a0f5f9a00cbb47",
          "0x0ab5e82e345e304b1a8a0f657fdf3fe03efb006b2e53fc8e776506796c33581c",
          "0x03fd68ff74722b09cac4d58b377e0818671d9ff52a211e449ab162c3d0cf875b",
          "0x1e7c552e5a8f3605609c3667bc1f8153099f46ec8edff78bddcff7e42372d009",
          "0x069952e9cb26d8ddd8ef84484f4fff8495601489ddf9cfbc86731ca15bc2b42b",
          "0x069de4322f390fb4b3c4116596f9a8f51b00f2ecc9ed53b8ce87037a5d8cb36c",
          "0x122e535351d03790b9a1411ebcd5958a16baf61b01c106f5f158461dba427258",
          "0x22ff22f011f8c226ece797d1e36b1201449338fbd523fc46ba52fa48b3227b64",
          "0x1161d30490f1a507df1a75be86a5df94d448a224111f3c313ac3fd273165388c",
          "0x2ae2fa2fc3962f22ff6bbd4376b6477b2ace3fa963586637d700ae936d92be09",
          "0x2a9dc09bbf2c43f2dc75ab6f9bfed365703a43b9c358101f7ebcca2082653b20",
          "0x2f402e60aed9c5fe85b9face12c2a770483ace81132fcdc9fbbc7eff4874c30b",
          "0x14f352e9dca46d65efe8bec37b89a573f65f0aa8e0c753bcd10d24fd045fd0f5",
          "0x13c70c3bf42ce34c36893390500b82fb1486a30d3921b4ecb1fa47c085f20fd9",
          "0x118619bb14a53a21a1ecef9113b10e7c6b7a36d3b38f7e6ce5abaa97fe96bf52",
          "0x236a45b272320cea6a74280f2a954e3b157174b892d5f3b2ac4b6e5c4dbaf38c",
          "0x20fd78a9f662d3be07c07b99e4d4cb804974b3fae1ade638d8800e83490b31a1",
          "0x04992af8b903034facca4002586466136a675222093ac348a7784c8bfbcdd9a0",
          "0x2354b2ec8c7e8e6d1a93f7307342c7b66dd6cc9313e5db3d06c380feb249193c",
          "0x1ac8c9558885dfa7d7df490e11b102854df3de5b14c5fbfff2f7aa3f31fd2e28",
          "0x06367597ab7a2e533d99a4447726388c35981b997632e555afdb491746d83d2b",
          "0x1436363c86ce4a176a882bb26c4b75f5ad8da469935a7fb3be81827d0b5ed494",
          "0x251e61d00ab4ef232c33d55a73388eeddd65e3133bc4fb3edc709797e9529b18",
          "0x273656870c7b8b89d38a63a9485663adff3c46ac7d43e61606e26f5191cce0b9",
          "0x2ec2b54c9aa440e0fa017bc29135eb124aea0970864b8f1d794dfb16f8b8cb16",
          "0x134c654f5a38eccb1070a5a78831bc005ba6ac7d7a3b76e555580eb1233f949d",
          "0x29bc8e34b1a10f97997502440979b118c5cf2af2abd97241db406947505080f2",
          "0x0cf3112832c45c48c1dcb5ed866a51365b5bb7949c0cfd9aadf67d125d4f3ab2",
          "0x078dce521d3bbaaae5c79c768ffdccd8b04e111d8b46c1f2ffa6d2e602ef31fe",
          "0x162418eba2b1930a1a9a5b9fe0ade663448188e25b28ac81410ff08c22c70f57",
          "0x0bd3b4988cad29012c9dfddc9d2d75812634ee0a07456435f1a0f73c02ea08cc",
          "0x11e33b5988d6b2e5672d58c5921f7b1cd7290635675b9d3e0cd07e81acb2f58b",
          "0x072bf81a1308cf51759f27217c968746b32324bc9d429270c10e1671a6f3a759",
          "0x055853a33d1150e0e106160fe1d7fc65ba18fae5cbe59e8fb6bc8cc7bd663216",
          "0x2083fc1ad350d82f1d43ddd5c7fa475268c2927e0f02e6be71e5090f82137169",
          "0x26ca79a855958e45e1a89bb4546f838b67d98dc4c8c92bec26a0efd674ca6211",
          "0x09c669aa0e831572be5a542e8498090ef693900bb4d79a588aadd5cdcbe62696",
          "0x0261cb90ab796a6235a92da9adebbc39dcabcd01874af5d63d90d66037ba3b57",
          "0x07c14d288cefc862399a1156e7fa72defcfbc0466e0768abce1e35366450404a",
          "0x2ddcd6dacdcbbfaef37cb2d4c5060f0ef36f1110807fd81c43089cd45a26da1d",
          "0x162d3c3fce8f30204c522782c0cae66f911e432c8b4476166b35b5f530d3e8c8",
          "0x090fbafe1f865f43fe3a21609b7d8459fe348d60a4c471dc62a0afc555cc2648",
          "0x1dbe8e50c293846305c51baa3473e29dace57e6e1af48fbb23d81556eab5733b",
          "0x19ffef9bd58ca547ac02f4b953cb941def36fd834c1f5ec5a59418b2d22df911",
          "0x0e29b047951b6805c19b7a21ac7d24129ca8f8e2b385731b2194c1905f21e401",
          "0x198d3baaca379db6105675052a55a31c1fd44a8773a9d7c789bce06e07719d32",
          "0x0ee8deaf28778a46bf818104276bbdd9bb48926ce699bd185c649a8b4a7ec16c",
          "0x0303d98318c186c8579d1803984fde3284744ab161f14bc457ba045f3c1329af",
          "0x265d7fa88c0af3c2ddfac0db3d464c31df095cda96dc391473f833acf4f64807",
          "0x0edac8d8183fb0ea31af3b383ef9f921a3c293e8bdbf95598f950a202a677cb9",
          "0x29fa89d16190d1634704cc096f030dc8cc7c5c9f86d13d95976b6f178ffd2154",
          "0x234c3e31f412fc1fb7c9a5b70ebe31f33b5987c73555fc0e4ee7e75280d84264",
          "0x2e053dc186786e4471d0ac6f5e19b33f638dc8f6439077e2cf368d14d4fbae61",
          "0x1d616ac50587ff0c730b1a099a8daa6e05c32dbb5dc36649d9ec0c1feef2b533",
          "0x037771eacdc853125cb0bc917610c0c3d3b065560600b4aef883bd173adc47a0",
          "0x031c46216616ae3241851e82decd045f40a89607c578c6248098b30c546e1e76",
          "0x00482d1d2987d7bfc6d256af3072b41696038a557c9867a8ad267027ec3a5bee",
          "0x2115d7cd1cf9a84f43fb6426aebb8976578ff3e5646f89f240a48acd16f0fe1b",
          "0x26da8474f5bfdb9c88e0d72f32227af2c5f4b6340c8ffc96b0423b1172c7f79d",
          "0x0636db5afdd335e31958a70e694e17245df7fc8d148d1cbe19ff880e7dc0af6f",
          "0x07096b395701facb3492ac24564c468026e587deab49ef63c528f418f7e471fc",
          "0x148bc6df9f364b928d68180aa6a2667a29adff966cef3e340c3680803333bc31",
          "0x24dcfecbe203abc67313c8324c6339a22a9a1f72fe944591c8fe003ff2a19620",
          "0x20db93b902460ab611256f28dfed3e7003b3d3fba36d7bef993f381f3f2230d8",
          "0x044e39201aa990c4e32c94409c1b1410fcfe511f2f5abc94216b0d9eeaa47a1d",
          "0x2aaf90c30ce60e19085a54153f4675921b8e65e712bb4b0a040d4c11ea6653bd",
          "0x23fa0908d7d89f3673ea140ed664f7d1eeca765fb236ca8a78ef2bad304a9cf6",
          "0x1f19c141089be7fd73fd0bcbc3e672f924e9d97fe2eda429fe25f5f1f8c1d477",
          "0x2fa5b884aa9746b07e87209d1023582478603a994f1ffec3c1d662fe09632dfe",
          "0x272bd4357d44e2e2c152f694efbbc238125f0f534fc7a8ce7803a7e77a43b6ff",
          "0x1270fa5808c0ca1433423b90060c34ade01f3a9c81b76d4d2b3cf7158338639d",
          "0x1b47f9d3f2eb0fcd707a1d29c7f0fc40481fb6bd2e192571358ad06e42995218",
          "0x1661bc3ed40445c9b8f5a6b74ca52c81e3072117a6b9ddeae562f6f51bf9b8b6",
          "0x0038c8f5bba73df7d9aad4f06775a656a8eb780c0b8783fca440631d87d486e0",
          "0x03797c94554c71421be0ea2108bd5dc2d6172f9c0b51e818cdf0c998e7658b5f",
          "0x26f801cbead2c26bc2ee66c9c561d6648f9dcfba02d573316998070d434920a1",
          "0x1bd9eb0781aedb96c9799f709a0caba80db0cfc155c437d27ded8641de18e61a",
          "0x1485c83f748186c1b8e237eaeee6f23e093c2509838436c084c6ef0b88303feb",
          "0x195ed64dd0a8134694858f96fa14afb40218dac40a3304762325b8efe03a9485",
          "0x2ee31061ca7160cfcff414af67dabc5ad156a9de263256b791270a6acf9f0969",
          "0x15d0f0fb824860bdae5f0189bb09ce4b3bc002a7f86e93bf85678d5c9bd517b2",
          "0x0bfb2fdc19db2d9d7eaf8f2549ac9aeb8e9dcd83c91e67a047d0fa7fd36f385c",
          "0x179cd6248b5c0af277b392c623b744f865a8b1fe851df27c5fc2a47a0aa1fa0f",
          "0x19f1469f9c81707666f6db900e8d90123b715e74ac0224adc357ccdea8737fa2",
          "0x21339a2203afcc5f2cb1fd56d2ee9179637ce45abd2dfdc9a7c561cd7fafb68b",
          "0x0e65726da6be88d5f916154d202ad3dbe3fff5d65ebdc29c7c97ea82d9987e47",
          "0x02564e8b0fbf65f1436a9e716a5ec7e079eed2d6db71b7d94a2f2434e0068682",
          "0x2a236647dce4e45c60809cf6d1603baa4362953ef852b8f785ee5e959011ea49",
          "0x0174acce9e73a9ad5ecaaedfdce776d4d1c6b7761fb1599ccf97032a59c5f3f1",
          "0x10cf2a80803b6802cf2a63a37e127b556b70d65bbb61657f6821ca45a06f240f",
          "0x16167f9d1b3ab094f67d0cbbf40a315fe39b45e4540768f3fa35dd6d55baf7fc",
          "0x137b1b07cb60ff07b21aa151724f9bc6a50e4a17a68f2aea512fc1e93968c897",
          "0x00d590eb7aaf8e30dced18ca317ffbd048a9b0fc80d37c54a8bdb7724d8dd645",
          "0x2d0a63690237ad3469abd472e450c11fe51ee1440d3bb309b2295cb954efd3dc",
          "0x22d55e04ba0d855f42039d18a1dc14dd16305ae516c689d5141a9ce5720b8f7e",
          "0x01cc71169f322b9595897b864438208b66a71902b73f9518826158d7145dda58",
          "0x21f949a16acb35194d9e53fdfc5ac01f3491775170254c2cb4b91772f46636db",
          "0x14cf5351c14c087a59cf5fa5303c5752c33d446b5cff317e4570df7d685aaaf2",
          "0x10f13bf1727ad7e9069fd6701506f958fdf59fd2d08b0fc5048c9486b43eb64c",
          "0x0632085e771f74df8fcf5ebd07f95373f832cb41ec980897da8a860c05e9b0c4",
          "0x16fd673aa4b499823fb173d9efece6e6b604ae03bd5a8c677d7aebfbd73bf592",
          "0x110da915aca9c87a2c4614b1ef6d6f03d8227d6c3e2d63bda028de1a580a438a",
          "0x1e6f125f3f81a4545935e520f5ebdaf6f99a0c03b485f582fe23a53ac66c1b8d",
          "0x12c069a83b55b665aa90952fbfa8347ec157c11539f49640d4bd2358da589b37",
          "0x2b784e2f52c3b9522dd48baf6c3fe282e2682ecc50fb16755ff8a265ef6b882e",
          "0x1494861baead0058801d47ef56842723c6b96d04d382e47c45473eedebabe484",
          "0x09dc71751daa5a14501bb2c3cb8b22953f3a3c3c88cbb77b1931181741dc7095",
          "0x21d3e12c5de6525d5dab5a15000888e8ce36f40be3b49f03b24cffa70c739311",
          "0x1b0e70929f5772f72eae56c8a272d3195689ec4688d96570b46e19fbb66872c8",
          "0x140fe4a3946bdeaff52c0cd3eff628dc40e30af8fa8534c67a6d07c958f33df1",
          "0x0c7349dd6d791d4871433b501fc3c593352fd6995dba4fa687f501ec8986f0dd",
          "0x04b0a35cf626c40f82a1f07b916076c0d3598b4414f73c9f6c97442024441a3e",
          "0x1db02b68964ee9cd52a2936cc783cc12f88d98b60e858cb36366519fa012b388",
          "0x10e2e956993e23f93c073c7ca4db0bfc7ae8e558f676b89b1ee66086203c0596",
          "0x1f45de365f1d93cf840280890e369ef6e4c5a98b9a7f8339ecfdf604d5e6f82e",
          "0x1cbb85bda895dc172232f7d59845c6fc171016b82c91d91f433261fed4ea9c7f",
          "0x03d3f3bb86ef161295f9134bfe58441dd72b6461b5fbe2d5787902e3e5ab1de7",
          "0x0fff02814d47b34516dd84ed17a200c44ad72f4080f8057da77060d11471e9ee",
          "0x2e9416d3161e4f7b023ba61c8f6635617855e308d6233b4e85e941f7a5e6c9f8",
          "0x05c70ee3eeb80db84501c1544c24161ffd5513bca5cf2b5c740011e3793d8ce7",
          "0x0666d733d249dbde4fed105b2ea2d6d4b991983e2b4f58ad54910923d0965dc3",
          "0x27f945bb22dc180a99a596449e83b32dbd10e78bf4367531ec11e4da936f39f6",
          "0x12e27af14b7ece9b8bcf7bc1c9241d0d85f9fa47c83153836e199eba8961544f",
          "0x0a8d6c9fd80c799bee076177a1f9d7beba446ab13b7c79956f07d994677946fc",
          "0x08a0d3646c476269077062dc3c447553d61a4648f306d20e56fae32d109886f0",
          "0x073faad575449ac35cdfc514717251bf168ececf0329752db7403c5463ecd84f",
          "0x22ee22f436078de048d593f4afbabf56f4a3fd4e07e8a6645fc68541f0e5fdf0",
          "0x01b50235ad3b1a6f6ac75de3a9f75f4f39866e6012439c9c0179ab032c4266a5",
          "0x2ecf4f3c84f75ea7b10ec11a6b2596166ce9b5a28a526f80cd02d665226a3feb",
          "0x27ec7f3ec5624cd3319ab85f7df1380283a59b36ebf18ac38bed751ab1a04bc7",
          "0x0e576250e1560c77cab672af14ebf856402468d2e9b0ac03f3cf29709e13d931",
          "0x2251f276fde77c998d42b5dad05aa25fe98a908200b440bcb7babecbb77e7ff1",
          "0x028dccf77c467c7818192d4787e3848bb057c49be099f60291a2f1e48de1834c",
          "0x1b2dbe9236f5a27ed5c9e3b70e099432d324f380f39158e119069f95921133bd",
          "0x0869920b8f5026cc43cff18be390f74c35586cd2b6943b29ef7b17beed277832",
          "0x16f4fcb1833619bee667206a2c91cbd91055b10783059b0be52e1b656d67600c",
          "0x2a50cd6e6942fca74acd134045c28838838723fdf651da02bf3b3d7741390824",
          "0x2dae4ce829a70182dbdc41a8eda89651110b2c99c60565ae336df2bd2afbdb6d",
          "0x2dbfd9447d4214f9aacb9f5d2924d545d07310230c1469afa03b283b8c7ed93a",
          "0x10e7bad952c8a632ade1d077490bf80b125c1a05ae4ef7912e69f152d6406de2",
          "0x28d4ab3097fe8d0377f4a2678261166b5bb24c51f04d768082eceeb3c6b1fb43",
          "0x0772b1c14cb95aa6b39de1d4c24ecb7f08d26343b14ad85821ba29bf5983b263",
          "0x1856fa356fe94847f57602f5fd41da9d4ca404f858e29e7237568a8f1f52ca05",
          "0x2457b8229dbdb49c207e5a1208b102b0f86c9f2a76b4a4a23c0d423304bfe9d4",
          "0x045fbfe6b2c8759a8234e16f0f4c37f53312596fa90b2b7bd27f0b55dc5aef77",
          "0x17f4e29758239596e70478aaa8b63ff126a74055ac5b80c775c0f924d80f2c63",
          "0x146cda97d41fea38bc63c955144a65223d4f5652c51bee160dadbbc681252717",
          "0x15cccb291e3b75673baa8d2c4846ee56da33ddb497661760c4bf19d52503ec2e",
          "0x0db560c5e93ecd131b7b26a4b777c28234c9d15588cc5e5f2004880f5ed76d98",
          "0x277091f4d68c4dbc1b8b93570cc249973e892f48db3c356a965816a23b286841",
          "0x230c0878b8e670672f23598b7717cef1b722a448d9d14e04b81ef722e72bb505",
          "0x1d7aae3cd8dd3f91e27cab6f15ba2974fdbf72782825f99405a50c13a004446a",
          "0x2c87e4b81173ce8fd99c9bdf2f0c4bd39e3245d84cbd89d79d8e9fa7de963589",
          "0x2b3137b3a764d5f3604232cc17dd2e8ab96d46a7df9e68419b4e7c18ebfd5a8e",
          "0x1d92d102f4f430d0e18948b9701b544e5413d0b5bb1e056ee2672165bf52459d",
          "0x0bff74ca04e6568b8feb6a03494311339d7490a75d073368242784ea71f0520f",
          "0x104fb3aa7fc80f7cd356a96401b415aab91c4077426fb088f2aa972822f9786f",
          "0x21d5c5327f9c0ac66eb7da87ba7a63a24e47d8e03eb49817ab9f1070d864f603",
          "0x2f29beb28120d9bdc4e147946cf7cc260bbbbe5ea6421d7d3bad99af9f3b16e4",
          "0x1661d9d3ab98e7204b2355e05768d6cf4367f30f1446d8cb57576c71d8f83cb3",
          "0x2b406f2b9f13585e0e5e44db5210add697cbd3f0b523249a21ed63494097bcf3",
          "0x09d507b50072650b0ffc5c36a63a35968063747bd70a655c9f0e07b58ae4a881",
          "0x17e38db767cff7dfafc813e9b6773e75d9f1257e8bfec1ea9e8329e80a87a7d1",
          "0x21b5c11292bac2662798e6098d0ad0f29f8e6d826adf5ee133c21504ce0ab2c8",
          "0x035e47386120af666c32d7c4fc87052b30ef18cfc2b061937e935b0903134fdc",
          "0x04f981d3a984ca2d85f9581d7a74f859b61c3e0136d6c450d17768ca1987ca96",
          "0x0c2a23457f590b126af6a4c54d1ada810121f4cb4975d8956d844cffe0a5ba5c",
          "0x1b5ca14cd976dbd10e76b12b7bfbc28a54ac8afdb669639dd4c5f69f91e8a9d3",
          "0x183f68d1a9dd706109a8936faad813a89cf3d8473ccdc77b3ce29333b7aa7aa9",
          "0x06a5f95d98b5573df52a7cf20b0e3336680db5eb7833194e82a92ebcc6ab03e8",
          "0x21403b255d1256c0c736ceec52f224c6b763f8b6d7230b295b4a14e9081ef6b8",
          "0x2f0d6e5992b021e6c4806e078494d985335a44bd043c27ec8fb96210c733a6c2",
          "0x2766137fedd6013d86d9c93d3d8e05f9f7434aa2db80d444371ffeca8d5461b1",
          "0x07292a1dc8afc94852dde4bb513ea938096efe1ccc0b60f53baf031e64ce7aeb",
          "0x0f64f4a028e3419e451380c4fdbdce5b03ff40359207f5bb119c2953433d52d3",
          "0x1c2b3c6072f344c7aecbdb388daa18463eab5cb5943d2c57afefab51824b37ea",
          "0x12cdca57b94c8aa6c214703d5c456dfc88159401e7f66d1481b00f36dd8386da",
          "0x23f505ce933fa0a7486664fb00e5ca54b685208dfb4999dd346e4f26a697b807",
          "0x1a84bb82ded6255c6ede37585e4e28fe787d20844df3094fd03c82c6f2cc0b97",
          "0x10a6655befac54448cd2e0e7e52a56c178d3fe670b11c58b16109fb759f4efd2",
          "0x1a26556d515195ac28f883768f3ea67904ec23f742ce544fba2f854313bbe14f",
          "0x23a8eef087916f1ed3df07f7a60d9ce2c2a196d4e9c4231d0e9bc16cd0e3885f",
          "0x109e59cbba700e22ee2fa0b85105e52833c7c70bc6d1e918813aa2421a188e3f",
          "0x1639528dab1dd1f0e9945b63b79246d3e872c0b1bf637a3b680d98689d997759",
          "0x2313e8d331cf2e342e132d2a75ece0e712afad8b0bb32185d91b02493c876796",
          "0x03e96a03762ad8273fb05818ab28cfad626ab2c3b01465f8c973b4275f2585f6",
          "0x0e318637b7f15366c44526d3ae3c0d33bda12c294a4876988c28d09a7f7608b7",
          "0x12a1f1dc357dea2da4cd6a6325cd2542289736117d947b3bf02d32045085354f",
          "0x117374b586f4692b1682f8d026e9ec7332a43f7b0929bbd51543e21b3303de68",
          "0x2bafd7bfc204d9e55b8a53b5641e476ee5fc5113d631736b7bfaa349e618dc24",
          "0x08d075c84ba48cf35979ba012c379abd58827f1bb562155b19bca5a09ed0be24",
          "0x2b0785443a2d5deee66eeea2b3f8ab317dd37a2358d185dbebadd5a336676243",
          "0x0af228650aa58e291b19b511225c1f0dc11c5c982d9b9ae57a3e0ead52667acf",
          "0x0b4e7e3454f2b9217698632fd31d95a50126394453c89b6945250f8d36ece0a3",
          "0x0e5f276c143fee910138e17115becf458758ce9bb812d986c7a89b297581ac79",
          "0x241341f84a8e31629592e3c2a5a33f5a8f853f610df38842b80967f54eb3d30a",
          "0x20606300d8b0643f6c0cb4b4afdb6d3503efedb23d693b1c3705cbe46c27fc62",
          "0x0bac99db56310e7df296760866502bef6fecd4c90c17ee5dc13a704d17159622",
          "0x2171b3c348a2df153f26768e206114b0c4968c3c99e8fb9e7d5d069606398f83",
          "0x05fe9945cea71eb802226fe6ca38357eb73e86a76fab2f66d88976c822419fc0",
          "0x043abc2f359716a41d6c5661950fa31ad11ced0eff1ade02d43af23dde903bed",
          "0x2a1d4d9bd164d4b3dbccc77591b690fc7fa7b07e09fa5b2709887062e44a93c3",
          "0x2f14b4a9eff419296a645716b4022cb6fc3a8f3c97cf077fa60140cdc43bd4a5",
          "0x0865168248c7b18aa9b38c76774d180949daea2d647fce0f839df5d749d8548b",
          "0x26123a0ea393450f6fea67f7c11acd63848efd02d07380e364cccae9a6548d4e",
          "0x22c637ff2907aba15ccfd3f77be12ed68fc32f8be96698ed7673e881b712d43a",
          "0x117fdef07c59ef9c9a770756027104730ee9e6b4398745393804a176268b8a22",
          "0x070153c96b148cc400f9553965366f632ac923fa2dddf69d3b6bbe503ce96296",
          "0x1e84c7981ee7a8fd3f7f2050c364e921fb310a075a3ae817c00a77f873bc9011",
          "0x0661ff0cde6e581660f5fc3a181b00353bd0baca8016d6f75fca269508ab8d41",
          "0x15beda5d1eb94bee696ef86d0283ddfe69387fbf0c0ed75f851eb55c9c97202a",
          "0x1442078783c42616f54d9327f5d43d659713e2c3960eda452dcb89ec3e503359",
          "0x0260670536ce7e64cd31c97b23d5b96c494f93fb3b1c0a9d1ab7de4dddae8796",
          "0x203890235f209fd4c8b66e308a8702e964c52c2f0218ebabe1db114e6a710817",
          "0x00de457d3fc9a6188d5e936679da8606a114ce54513fd11dea8497d55dd0844d",
          "0x0825f2c42df2ca6927ef679536bdd0d813af3070a5916b259eace7f21438ee4c",
          "0x2fd5b16f89dfebeb30841632b9890f6a5681caa6622d5cc4fe9d3ec8c7a54306",
          "0x102fdc4167bfb4a2ae4ed738864e5b5c1f3bfbb46f5c0ca926a791bfbe991c93",
          "0x0fdbaee0a9aa49649be987495cf7392f4857a04aad29ff25649e0123a513cd8c",
          "0x0959f84709aa0b385b7d892592d1b6e177bd8a8398ffc6bf07a39b7c0c48a30a",
          "0x298668206446e92e47d41144e2f4c5d00eefc03da20a0a2a303e5750ccc6efb9",
          "0x1a798081d88ab9e0bdac032702b4486087383d5ff75c0d68d1f8b9b98e9452f4",
          "0x23e94711594e7e4c671df90f260ecf63770a76352cdf5f471ddc31e8e0064a24",
          "0x2dede69a440649fe17322b8bccf4c1ce84b7e051bb82e99b81407ebedbac7028",
          "0x034762b44e47bbafd5ae3d7f8173d2aa0c1da17291370bc2f84659b4c80f483b",
          "0x1ea442b0545ba6243d92ea9759a23d73285dd99873e8c3657e6a006a3ce7cc25",
          "0x2f53038432ee14c75222813f3380f02ea496d77cb9bdcdad3d3c85ecf9e93a7f",
          "0x19d7dff298825937fb7c4c17d23d53119ae96ed3e397b1df7180fd304461b50b",
          "0x1e71ffe6e516b57b4822f537f03642b23201e42e5b0cc2239733067ad89023c2",
          "0x1dc46d43c2a715d565df9e9485f3dfe928bd53f8795c8b03a1862773a7cf67cf",
          "0x2f5469db95cb8cd752a683e4d2870809c1abeb2f84160ff21648151f7b3f0188",
          "0x2739dcc2e48fb6db002a2f0d724f52cd1700374816e592104575ed422fa2c6c8",
          "0x2fc5655adacfbf8103fc58c8cb5e10dd30e933ecfba2263b087a61f3868a4a4f",
          "0x10ff844496fd5a92965630f5a5d51f67e5b6e36a64b2b51c28bf4c7cab403abd",
          "0x09b32ad8c1e10c31e9264eeceefd619e8129d9c305303e8ed4dc0cdb522a6ef3",
          "0x29db150d367a5323c352474bb55f235720943dfd6cf968c34b73fac9fbd77822",
          "0x205e44b540bd357aa8311f36c792e9dd500a3a49de4e367eb885bbf68862b56b",
          "0x1d6b67db7f8b7200a82ffbb2bd26b18dbd96a53bd83c5b4264edb905d843feed",
          "0x253677541389370bd4233f8067a78a69d6e9e596f59e282697837cc1415d989f",
          "0x190842923eb80f2b220cf15e3f8245e4a3786ef2584fe60bc3e45ca34ea43802",
          "0x0f25ded631f016f91448fe7aa2d0d13dd40f99722c508085e3148774891e7563",
          "0x1163738098b1c787b6ecda0692f277db4daf7872effe8a9ec5230d8d988b7bb4",
          "0x11600f0ed3eb711dc6d3d9a0d96f4ba3ca2399bf9249786ef73900c9b34e11b4",
          "0x1c8dbf5547d551e31a77a502b1e0589341a2fb95daed81c5028fef4e8cc16acf",
          "0x2e4a5c1a55787bdc046bee70f4989f8f935de58efa4890d813855631dabc9484",
          "0x1d6035c010bbac3bcc45493acef7cdf406e2e876eeb32a8851f6209c385a78c2",
          "0x1d6b6fb9c2f187b1ec8373a18d077d3563dc1e4829c73dbc656340ae0c61b2ca",
          "0x28480ca625ee02475417fbf4fc651359b034df55b56dc62eceb9a79bdbcedb96",
          "0x0c004ed9c509fd77f0f9841f39f4fe11ad199277daf0c4359f002bc78d974f14",
          "0x219b95798d9b2ed2d230732cbaf4ca57b7d04074319d71a739fca9b4c083bdde",
          "0x144f1472c3c7a639ddae611b2eb5be22ee6df25a859a05292ca8307f8618c3f3",
          "0x2a688177e96545cb91f9cfbb44a7a14b24376781097e9561314cceec16c78b7b",
          "0x24c898e032f33d7e0748a544160206258c97865be5489896c9790acce9251e19",
          "0x10abe1e0df0aab96d5d73704068b921ecc1dcff78d605a13727ce9dd8b0eaee8",
          "0x2e80ae39eca1770dca35a77a48a991b6dedbf54924618756df064d4b33f2b658",
          "0x15e39e8f8a4c7f890d0cc707e28a696ad69df5b48fa37b74049b50791a22c272",
          "0x2d5e7a36fe68b184552bbc452beb476a96c7a85fd2196aa9572208a2c02a5632",
          "0x1439f040b4c907c5082d330ab439de47b4b99f1179ba46ac20112506a82bc14a",
          "0x2ec996b247a0a8c1682d1d0900f049d70ed0b01e169e75ec27d769a160e06c43",
          "0x0124171096fcb5aaa5d1e793c53867134ff1a49c6a90f2521601c4e07bc3495c",
          "0x253ea269e4499bcb0a140b90cf71cdf924843d35eb286dc03059647f7611a1f5",
          "0x083c4fab3c20577223fac6f35f8ed59bfe36a4702da514914829bc1ad979217b",
          "0x2284f546077f31542f71656a454d08bd85e080db4eccc44490f88dd89d191c41",
          "0x2cfe51e414d5d94c3e2a46358c6b1fb5ead77ac14cf7a6f53b460a7058a8393c",
          "0x1a85fece3b27ab5241e2a72032ed6e7122414bbee90fb40721011aeb30e944f7",
          "0x10829aa85b64078a84d4b8b2173e0cacc3cf1f5e3b8f1e1488c1b416bbdcb8e6",
          "0x0475de7d88dde94421892d8c48683402431ccac412efcd56fed01bcdda39c5d4",
          "0x02e8264478fa612941193367da01857f791b377e2083b3613a5b243cf38e65f9",
          "0x13496a43dd1cf974965170a2d81bb480d7161d58b5170f5f134ebe721029ef0b",
          "0x259a81e924ed46c5441edc5a5a75e6c207f73c343e6850d7aef9839bf9869832",
          "0x02d2ded3e58eb843eb39a3344829143f506dcf9e74ade3b97f2f0dc5d977914e",
          "0x065fe7a3cefd7dc775bd96d31e758619ddc371df362370eac98599764bccbc71",
          "0x09ce956b584caea51c5b57a33d13773b71ff03c31fae9bc149a97e281554cf81",
          "0x1c135b8055f27736b4c89ca09ccb72a37294e06194bacc54deaea9449ac17c58"
        ],
        [
          "0x11e27da7b7ef964948a332974d07cceea778bc33aedbcd09de222fa22ad0b101",
          "0x1f60381b83b44a8fe65a0f4142faaafc5fbf55f79133c5740c53f036a3065b65",
          "0x0fc1e1ac8ad3524ebdbfa45dcc51576548234d0292adfe1cd70a706a1b6dadd8",
          "0x0a40798ead3a12b78bcd8f10bb15cb0c426bbd2282a81dcdc070084ce78b8d76",
          "0x2dc09d3357051155987ea95594436b6cbf393b0135f51e2f675ea5f462f4a9c5",
          "0x104b9241d534264532eda181de1a154dd175ee150f349033e46ddc54181da088",
          "0x127a6208d98f6cd387b802fa44cab2037b3b91f0622f17084f1b8d8ac9d12698",
          "0x2d075ceebab54341dc02fb1f50d938ce1dfdcde659955a930ec18f8625f86d4d",
          "0x044fd5c2101a20be2ad923bebe15a477f40c6039a3dd0d7443fe72758042010c",
          "0x2b302c8511fbd3702b815564c5399acb8a8f2a8eb77f96c7f0849628e09f9bc8",
          "0x07cbe339db90599455d1eded1e8a870bd302c92a79b1d0f4ee87222cce99e22b",
          "0x1326749312c6e8bd4ef24c97c809f78ae548394c94c3df2f28ffa8105debe211",
          "0x054021406b8d1f8c7080e7c245304e4b7a797cd236dad92d929b223f269780e0",
          "0x05c0e033b589f8ddb23a9d559eaeecf98691a8d018f1279bf406d08f2787cc42",
          "0x2508a8cdd450f969b61c749d566c9459a16ead4330e35d5415b12eca38584bb1",
          "0x264dccc02e574ca7e736da25072bd8fbe9909621fd4f4169b2bae8d368ff12d2",
          "0x2a938c2540d63615763ec3ba10c1a26001b9f4bf1418d1092a6b02dda5195db3",
          "0x254f370b85f58a7e4ab27a6203f3a161c1b070faa3185baf2852a75a865a400c",
          "0x04801896f1268e5abf83712c7414c8953d6223e51c44cb2dcab0b29c14952ac8",
          "0x1f7188e4d4f7549437f48fdab22e874e71d0a1f18c30106e3dd2721f99da561f",
          "0x2b9273701ae02d7b231ce443af1d80bf21d65aea616353336059f755edeb68a0",
          "0x1597224cb8e905ced829620aacdcfac76e509a0f7bc186fb7060196db93742c6",
          "0x1d8c5a65288346907cfd57a752372196841e6323e96b39da7fd17a82c5e12716",
          "0x1b75dce950731f508251b86a7e1a5139920d2bec18798d439f581570c1dc6630",
          "0x2773a01869bf9ad359d5ad8209b337119ff8deddfac6e4ed2c8fd0158ee8f2ab",
          "0x1a5d47883f24462610cbe7ad0e9b1b8ae5930bd3b9d4c1ee01984f6226515b7c",
          "0x19827732059461e2073cd90a09ad54149b1ca5909b96281a47b2d9c398506cfd",
          "0x297c8bf54b03a6f7ff272465fb881c918551bbe984751f3e9f2b30ea37b1a4f6",
          "0x01f3da36b1ff5283b078b69f5f3a7d4bab15a3087c5ae8a6dc307eba7722e40e",
          "0x167ced6e39dd3bd6d655eddd2abe6c68ff247d86f9a6a6bcbd41c98d37b4f132",
          "0x085d19b0e16f0ac29f32da541445e8a8a6db9a7bf45e741f9f113e7526b8208f",
          "0x04f365f710e9acd5c1653cc6fd8e93cae2a0d363f1697f3ef829f7435525ea4d",
          "0x128d4f03d03d7097d3a22cdaef6b11f329caf0facbc1a67ba91ff493be9ca715",
          "0x280210dd41268b133c9fae770b799affd3e66805c6167415aca36eaa02db1021",
          "0x204ee7c7d4ea06f7ca65faad631e703e0e3dbb59c45b51dcee73b0ca64d45cc2",
          "0x3042aff09c1765b4fd7365a6dca0f1172666fdc0e549822b03f7388eac33d786",
          "0x23b78077e751602be7779045861cce3ad318670bb82f33c2939f66d41554c7fc",
          "0x0f351e14bd3a41ad7703cf9a906bad791a627996b935121e6cdc3bf71292cec7",
          "0x0e67b0135f71d48596749f9fa8585c3789441022d45b5b4611a507bd401d0ee4",
          "0x06e84634966d462bbd68c14ce6ee1662769e43314e0eb85e3d5909f518da9df3",
          "0x1761112f15f357cf96422bb46796f57c2c7d6da40169b8f5794841e8561fc02b",
          "0x24387ac57313799c7756999bfac495b8fe377a7385526c8acafe14e5afe039c7",
          "0x1f3c817cbf94302a06e3526fea7b3218a287a31299f0dd162b66d358cdcf2370",
          "0x0b13cf25c272dae339f1a6f30d43d40f74bc0b938ed73bf16a95ecc3c4996fc9",
          "0x2c731e62db4cc41c56cd465c4a5e8d5719cb50ae7737044fe4ea859665997f02",
          "0x0961bfea8f9f2a708f3adfc127fdb17ebeb4a5632a8264f17a494c0f0601156b",
          "0x1eefb99fe9dac9a91963f112dd357ed51f599b9254e5be2c75fd01a58ef7139a",
          "0x02ff9863fa2a6cae3de116b1d6aa56a8afbd93c70417b8a0593855a1ff574123",
          "0x29655fc030f0a0f6dd2b00caba527938fd0fdf41de89b42eaa16ee598fd031f1",
          "0x2d9fe744f2beadb989869fc205e9487697f56721beb1ca230b59b82eab27b050",
          "0x04b4c3f4f1c21d6f389848280e6e006c0552451cedbf5ab96defbf0c2cb9ef92",
          "0x13a8f3f3d0e87d53b9e959662a069638fbdf077024564bc2a5676f0247e8428e",
          "0x1875c2e8f43d9660e1a556388fd81741eda7e486cf6243c2fe1752f919859b7f",
          "0x0db7a917f7efc1d2167724af4ea32b1f6a6cc23c1db5abfad9020dbaf5ba5371",
          "0x01c56db7a81fc78b94b267dce45a4dba48a4288b99eabd50b1adcf132dd4a7c3",
          "0x1c9cb5a5d0274d9dc31ca07743d1d7b4d416801d964039851f05678e4be82853",
          "0x02f786dbf83bdbec66ab656694d5348988b8252b4f5a3f4a452a075f60dfe92a",
          "0x18b9789a7a68183ad384ecf038429f75814593c0fea1fd25f1001c3bec4488c4",
          "0x28eb1c34f770ab912b55482a946bdaaa29df2b4c947c29ceb7c8a19e38881d61",
          "0x26e9c9daab62a9f1d6a4c694bb0c6fec274787a8322343c03f95dfe65ee78e81",
          "0x0111977858879145675ba7f1d70f301294feddb0a802cfa944a75907a4c2ed15",
          "0x164f34b7c356b9fda1a7d8415fabb683bac61ee70c23573fa72a9d756ba52cf3",
          "0x163219ca5322b3774e75b1e6f75657e0bbeb76a9e323b7c788a7dd6638b2b3a5",
          "0x0441594f59c65d1a8576b8fbbab4058dc39002a1bc4357084194ce632b9611b2",
          "0x04cb005b4d43931c9c4abc50b639a8e6e20b3ca5afb60b06140cb24b7e4a691e",
          "0x25eb50203caac17c399c83c674cfceb4e73f227228647f9d220e95d3434a04d2",
          "0x0a605f7fe9e36bb7504523525169c6689cd6d2fd076d7dc11277ee1069316776",
          "0x0ab2fe209b9dfc7c9007248cb7ca36b4c14d991ab3b8d04a163eb0e836a46c58",
          "0x0e1459cb5c0add6f90f949965603320b313454e6747af5f399566f5d23461326",
          "0x045ae1dc4a86d1ec80dc442edce9682a616d26e76013675abb04cca45fce07aa",
          "0x1834f47c13698cbb916059cbcc88975fe15dd0e9c3319865e08147e4d397a970",
          "0x2039a1c7335a7e4c7a694b5c5b4e1b44f620960d88933ed5237422ed53189f5c",
          "0x2a10316f1e66acf32e2adcdc292a350a00d8d5e87ec5dbb66949e3f03350bb3f",
          "0x1360b91415459da5840edf14826aea05281f973dc18133cee5cbe2761176824a",
          "0x1505e255267d336a081db6f08a897bf2ba40dacd4ec1d61a990cfaa40f6a5f6b",
          "0x0350e3020ea30d1e779d9813a0b650977adb1842691e8a364c12b8e458f77d33",
          "0x0eebbd4c2b0c9b32b82d96d64b0d221a8dbd06413b607ba69f4b9d42cc12cafb",
          "0x15b2d4b361df49e3444a2404f7003ee043147cac3d1428711f1226b374d87f8c",
          "0x29c8338c5cfe98df7fd49f9316b4950814dde9d66535ef624e892c35d380b18e",
          "0x1d7a2627f55aece0cc81b775580ccde95fd10f112f8ea71a7f8dce7e9ac798e6",
          "0x0cd634c27ab406058abda156af456572de2f5492005587aee69c7e5d345d75ed",
          "0x1303fd48e2656565e7a16ca8e8523131493035a9721d354fc44d7bc59b727adc",
          "0x052f5a4386ea22f5ff06ffea6179e58617bc908a3dc6b1e7462819c9c9e906ab",
          "0x077e3bc5ed1c34ba3702fc0a42c45ba5c714a6b0c10ba2b4d8c2a7aa75959293",
          "0x08d88160882fc8afca6044904e7a984f85c99efcfe147bacb0b7f1046f953d65",
          "0x1ce3b22dff95f834c7e5b6326029c6bcb4d5ae4b19ef69c40419d1aad796a189",
          "0x0d4fd994dbcc15262df5f3c0c9adfec2683e3effbf506e5309dbd8c2b988ab8e",
          "0x2ba6be5cd79aff7462511ef5a38a4f8c78c74fd049e6b8657cd044e82abd94b3",
          "0x09767a2d9dfa39e67c95400400da96a192da6fe5c0f02cdf1b9c39dc8e96864a",
          "0x010521c723f47dc5fefc35bfe0ce7e33d2e045b2a018e1093662ec84f104c05e",
          "0x144f09b80346ccfbc0865fa64d220d6dbb7b3e8bbf0363e62fd8ccb457bde1ed",
          "0x1fc0b9932f74b4db56d09315cc6a8e86205276ca3e3b124963dae83db5ed6baa",
          "0x0776d2d972a004c04a8be7b5f2fcebb02e1a3b1b787036e3514bb8f972c8361e",
          "0x221d6e560e54eb27665128f37e1c312528be49af3aeecc9d7c56755f076758d6",
          "0x164189cdfd9833b71c1f8372e999ba27bbd20de62f965ad406d8aee67b88e1fc",
          "0x1e3e736ecf9745b4abf71a4d863d8b6d03523eaf82d9274526393e103b08a3cb",
          "0x1ff3d30b3286b988f501ec920b1622d2a0ba2cfa9dfc589c53f639d379c10051",
          "0x0a50d9824fcc95a9d22bc08a592b1a6d396cd361940abc3f873a725230083a7e",
          "0x2db50a1e16be63bb63d42de51689d990d2e4721b93a07edfba28f208965740ed",
          "0x1282594ff20212e8a581a228fb4405f2ee7d34445566fc9dea011d89b202bb92",
          "0x0ade27c077951cd335ff789b7b4d63ff5d0bceaecc46dccefe0680c0ec6ef09b",
          "0x27374adf1b38ac62d078fa4e713692be324ca24f2ee43e24eb62adce2f3e67e3",
          "0x2eff75fa36e8716c9b6ac0acb78da92970cf7aca6a0ec3b37d86e97538242e11",
          "0x1a28225582a1edd464784b11ec7eff190fae33a61a783b845327642e82fae68e",
          "0x0e1113e81de1bcf204e51a8cc3f200047f3d8d85704c44f5f5ac6ee862c9f439",
          "0x210575d20f3c2816b807074e72a672a50738ed0c4fa09b6f966223903a479f5c",
          "0x21e897f749c84ac2faffa9e264ac61b983f03bf9f337bdba4dc48c5971a14351",
          "0x1a5687dcbbac62972aed85c50e70cbeb50193d831c0790ee7bbcde7d9738a66a",
          "0x04105499d5cfeaf115fe0a40d742844e806b107296b306c4d556d2f244e49577",
          "0x1af9497a7280e1414956e80f4f072e2f26b50a06876967cdd57aece720c6be48",
          "0x2a0e2d3eec6259b7ce7e0eb1667e8ed0c16cdbfa2247b8bc7e308ee32e2c6031",
          "0x2d7c986d3d3d3be8c70105e48492160ef85389f1e31dbc8814b0cd3e84ac5ed1",
          "0x251d1231e763979238b7df4a8c0f5019271de5e4389e84c09e5a596d4e1e22bb",
          "0x263b8dc03ac7d253f5cb7b8bd922a290675babed6364ae12cfa1fab8c56c37ec",
          "0x07c59c31f979dba930b94c897ce7016c9ddfc527a696786b7e5e1c1938a2c28f",
          "0x009f47f021fa65de6b54e751dd5a4bf917bd7574e071c7bb31bf1a4e63af2150",
          "0x1c160043dcff2330ce441d49f2804832969f2731383e524c8e7a9813f741ddee",
          "0x0c5b6896687f066b9cb23f21b32c269092cd6c711dbe66bfde09858735cb837c",
          "0x23acbd7f928bbe5b72a7ec442e6684c8f0d50cf823f02804c7850933b9b70cf0",
          "0x0e8ae8a1d1141dc07829413847ca857105e5189a65df9ac40ead4cafc21d7ddf",
          "0x2eca0989f9ab916d07ab296a0224fda36a0bc7a5abd571f3368054da7795e302",
          "0x2c76ceb7d040b4e58fe06b7b0fe83ea88b7b4cf376296771ec15d12237cd8f24",
          "0x0c53afd1b381167d73d14ab7db8ea41b9335cec4194b105aab7e0060ee1e3044",
          "0x0c36629562a7dc67e58cc15bfdce2392b3a1673602e970f174cd6c6b14555322",
          "0x052d66b614253ade8f74000275db8525f88cb7a71b14df9d8aa4ecf26f4c9bd1",
          "0x0de6ba1409046058d8320fd0ebf9fc5275f837ee5dec27963db414509f608f9c",
          "0x109ae0524afc2b1187e88c2fa3a16f6388568b7f8bdbc4b399fc00a257bc1b4a",
          "0x0b13e5f2c901b454ca49bec29ffcb5da3e13fe237ce86ededc17da40b9045053",
          "0x0c9a986af2ad58483b553e95c68bbb3b45829ef6e4e7a4ab85f1728209ec059b",
          "0x0093a4e1fc46b86a210890e741a14ffe41249eb0b0008264ea6dc319a0735cca",
          "0x01bea7e52a3aca2937549923dfb7e35fcdf8f5c81227637b3015ed1ba712657a",
          "0x11e88dc0b5900bd29542fbc23832e749bc9aab6347f0bf97cd3a36c6308fd596",
          "0x138741f5ecbf395997f21f212e76366491f0f58ec195200f1033855ceba4302d",
          "0x2447012a946927a4240b4713db8d27e130e419df4fbb4d68a1e0f1b95dd366d1",
          "0x0276193a782f6de5b903945371e5341b9e5dcace04b9768e67be9830a2f674d9",
          "0x0df9bd68c4fc32c8c064f6c47d517b13888677c985d3ef1f1c49fb880ded7bca",
          "0x29091c18613963c6cba4f4c0def50fce1cab647a8901957ee2a55305c2b0f8c1",
          "0x0b78f8ecc6577966fed47ee607e25f21b41fd67a5416de3641283f2fe825c959",
          "0x2e8f059c9b78f62411b017f87e900fd70c8036be1769c5344eea4159c62b6b3a",
          "0x03e34c2876a83413029cb7018f657b52ac287ba351f2521738ad7d309d1b6732",
          "0x13a1f660a87557cecf01b505c1a47fcdd6b52c5f05a1ec4262db308ce86f6b2c",
          "0x010e9a5996f8e3390b6b786102cad914520a8e93e7ed551b48f3245687f14d35",
          "0x0bdbee9846a8d67cd9d54f0433279044d85076041b07c3e224b38d208ff48c4d",
          "0x2381dfdd9bc337d5d6fb861e16ca28d117d586d16d5eeeb7419a661c782c1f8a",
          "0x0b856bd8fdd6ebb7f0f1ded0ef19204691e1c3781f8a9c4f58511f1fa484fcc6",
          "0x16ec15959be8357513caa8a3fef0b2fc10b1696b81519b0a2cfc18c913178b70",
          "0x1943d70c0ec13c9142659121156a773f4146d548cdfd42e40a215b1659486e31",
          "0x29e5268ac796d26efbc2cb4f98e2c2a01effacb1501b8582ccaf1e311af2edb2",
          "0x0fd72d28e75be53d626937f75af22f744ea1b7dcffff94c866f3da8a8978e4fe",
          "0x19ce9f98a369869ec45bfecb1f112a5f7062fcd6c75dafce902ac70ccc0ce370",
          "0x08a4d149a8a27a2170bc9ce670438eea64d211d3a97c702c1b01dbd3bd5e91ff",
          "0x19150be38fa5e5fe4de7ebf98d59fc9af1abaa13f5a068cb716002f3a6983910",
          "0x23c45261101440def1c0c23ee7aaf5d8b15ee7bf31ff7374ab808374d8daf697",
          "0x204a9542c690fe338feab653e9a46aacebaf2df53e4e905e896414cb5a0cb126",
          "0x128efd4c6254cd03c21b21913ce52665facd0e9c46f465c51a458124723adf10",
          "0x305becd1cba07fb742c9528e4b9276d871b1815afaaf6218cb0e758aae5ece7f",
          "0x0bb14b69696ffb4a46fb91301af32682fee9a391a5372ad19f3a4e320bfac6a0",
          "0x2f981d8eec9950e39c6fed8079fe44a2f256e7e686a60cb754bf183fc3aede0a",
          "0x2e38c6f6a7489a54ed982c483a2a7951eb3d0b28e48ddf8b57d2969f78369337",
          "0x1bd7086eb7150c0dce1beba39a67cbade72b8b72e1c1bb6f0ddb51c13ee583cd",
          "0x1c8b437f2be3e61671e6b62fb698e8af1872031196a43ffe76d1527b2315b461",
          "0x2b91c7a78289a7c43e1635e8eecd50ba4c9669431f10243a65ccae6031566fc1",
          "0x0bdf989e7dddd8d9451c4561ca77ba707b738f9cdbff5d15c110ee7471370f83",
          "0x0ad1a3217e86645a6cff1a4d86ca1f19afe85a45e74912d616a4d2b430bbd479",
          "0x256ff8d3f524e4ea685780448f2f8c55b5925342f08f944ac78d4acead07aa08",
          "0x209d7ab297f5a31258207d3ceda7b2e121683d20ae561c6d460c11ebfb1b6b01",
          "0x09afce8ac2c2cf3aff6002441b98ea52fc86d3ec411216e3d669b55ce5b8bf52",
          "0x29f82b1ec02e68c25099f0104815897e33ed9c26dcff3b2c89e6a3471222c934",
          "0x03cdf7f8fb015f6861322f7adc221ada280021197bdb71f800ceef89ed021dd2",
          "0x27eb263dbf7ceac824d85f2a75380469227033dd02153365636df044d8cb0b61",
          "0x1628cf084280bc149a9e3ccbfc5bd08722101ae4a043d33b2f98ae76a9d55984",
          "0x2b168bfb1e6c4ced6a44fdd5618617dcb8e9c4dad7b04c4a8955209f1b61ab93",
          "0x057de07094dca307236a6a8ccb3f1720778549057aeb7a7daf8a463ba18c85ff",
          "0x0fb079650d5ee3f78603c60e8b545313be5e7f7d6c1a6103fd79f100ac8ca101",
          "0x18d976ed9d44fb7437320b91d3295c8e336e7b402659149b2cabaeb272fb06bd",
          "0x1edfbbef180142c47c4c7f3ad1e2cc81bd020abfccb432ee327caa22e93ff45f",
          "0x2510fbda0c1b8256290a2ad3b4519c815f0397bb8c85505af672aeb7da1f925a",
          "0x14783ce9bd49860f364d0e46defa666d36138dc406255b9200904fc060cf0424",
          "0x100e00477369c0c6778fe65369744816331bfe377db33e66f63ace31e3b56857",
          "0x1aea93b51726a8d70439ddfb7e2f8774bde996b72f9cb00cc3d7f2ee2e0c45c3",
          "0x0b14c0df6b2222d977213161401229763a551b889694dfd30e80df7e6f76cb49",
          "0x0a643ba72531a192b1ef9c8274ba8eab73fb1a64c3951b672729c60eecac354d",
          "0x0c36a12c83a445a6979b13a16b87a12bcc635ced8c8421ef9a8cb2839f396b02",
          "0x25cb792acf147080d3a3c2e87f729c5ebec1c43898e222fd0e50a951897d5d39",
          "0x1e1064f65448355486dbfa2c2c83579fef6431deac35046fb277b5885b09bf99",
          "0x26440ee4fc4c477d379980c1834a3b2f3b261d7ed7b913e2950676ed20f87854",
          "0x300acf3e9a901b9c681b43a6ea7b482cbfc4495dd5125247d4c9b2ab843aafc0",
          "0x0d27833da8adcc215d9a530696c52693b004de152c6471945ca7a1701c3849cb",
          "0x1c4e8f6024bb796333f853462a295e0cc16a6098572ef58d159a528cf886aae6",
          "0x0db38e1071218ef0ee5d77ac780dceaadf1cf79dc9f24d2f3c9d58412b1a5939",
          "0x0f8a423d040aef0eddd6efc469f4dd9ddd7fe591a4aee3ae3906da7a77f8bc22",
          "0x09da570d55e2f64c94e3b2e7a2e255f059dd362f796a69142966756fad8590c1",
          "0x0d7cd5c265cfb5b01a59e4448c67c7addbc2c09b25f078b23c520d78af40057e",
          "0x2c9c47bc4c332aac15ac68bdb464ae193a745c1351c7d1230b261fa40b95df69",
          "0x1ab135f3c81fc395a7b94e0b9115359101ec75e76adfa14529759393a1789c8a",
          "0x30521d4082f58b8f3a12b7c8e41d1fd968284acf12143d85907ec782d3dfaf9c",
          "0x1b90102210279a42b7f8f26c7bd068dd82b76cd3fa2f330145698a11f5ed996d",
          "0x2e9ac434179029826cdbc624b3208030d4f0b265e4a8e1c70b89513103398096",
          "0x2784c3d71d125586185496e3fc7c369996e700ad9783b23f41fb483cdf8eee37",
          "0x025305428921f6e34da2ab05c3b762268ed1b1bc3f06acdd1dd5e32691e62ba8",
          "0x1d3006e6c5725e17b5828b5b5a23716f9a6d0a4c867fed2cc2543dc0ac99daa9",
          "0x168767323e5097bb2fe6682bf6ac8bb5b8f9af071ff2602564739988a3a6f0bc",
          "0x0a5d80b200e7ee00500f5268dc319e00b797d0ad358989a15d8af551421e1bd7",
          "0x25dbb5423ee2a7d7861f9982f522b0c3aae6dcfd0e90508cb6550f724d7b8282",
          "0x25e1b972aa7576ff000acf7ee101175d1d1ef18264415d4fc9f4c5c3362ab026",
          "0x27a9c670e696ec5287b8b606a5c231ae0fe3cdb764e2ef99ad255231b98500ff",
          "0x260d6606a1db4854bb358fa415ce13ce114316d871a7a2b90d112ca2eb7bdf05",
          "0x2397a374f84a29a5ad3798bbce567eb631730c745a7d389e654208eececb28f9",
          "0x11ee1c616304dccf020f88f6a48fa4072126e64e2796ffba89dd93b3a91f1f2e",
          "0x055ae011520b4ec5b5a77d3b5f377a252ee98781a8c2944d2bf0ae1867ef9215",
          "0x17007f74a2fe2b85581af879d136d587cbe18e9a9c3ba1ac01c50cfa2fb8ed4b",
          "0x214ac964b34b210e03297fecfc88f4d06a85fcf0f15e380f948b15fa1304ec1a",
          "0x1c2146ea153de11fa480b444285fdd1cda53cc2728a796c375c47c2e2d574042",
          "0x0ca0af024d983aea8ff6340dee9ec828dd798762c18f06bda92259b3c158076b",
          "0x012f82ce9da76870a65735548988e6e0af180c6d4b5d98c5ae1ab86c055ca6e8",
          "0x255f614a333b1375e92526e39d3763fa78f13e535f7eca2a2a7b97ca0d44cf6c",
          "0x0d0354ad322f5e1dffa7aaeec44429ffc89e4df6081c049b7ed3d3de082e7b92",
          "0x039f496e8bf76be9faff69cf331a848e9280eda0326d5a191311b5dafc27eba0",
          "0x1b0b0e8dd862523da0903ccbd518edc5a129517fa698941fdb0925ff03cf5794",
          "0x221b67c9b923277387b91fd41c7654d37ceb937ee692fbec3afe6eaacf2eb6b0",
          "0x125249ba3c9ac4c59c1dcdaa6de29ab9ad1480f8b3f020e468608f65bec51157",
          "0x0264e9390b7b2787c4ae35d9e35360d7807e3414b4077b533b85381811d1e730",
          "0x1a8dfa17839af5cdac40ac89c5ff2347e70c17706e32688cf7b18e09d19b752d",
          "0x02ddb274e22f13d1e9c186eb710c2b3cf7bb0378ce46226c1bca058f802e1da5",
          "0x1ed91d70a1e0e229d8566bbcaaf63b0aaa3236dc72dc772ffb5264c340f945ce",
          "0x258d9714748ca3bad62b1fc9bedccae02f8861640906580d683f21131c5205ba",
          "0x28094fb0c9ce3fa37073de7a1261bf0f3e70f6338fd598edaef57849297af20b",
          "0x01b268245960a242d8d60f4830928fd10b2bd9b27d8a731dfdf69475603e4779",
          "0x1ccdc2c48249496818618873ace0bbf4ab3a3f2f6497f939be73330ad18bdd6a",
          "0x10d7b6fd7c71bab6887f51ec5639a447682d7fd6ba710e8fb14f81ed72c71f6b",
          "0x14a136a1e4827d707dacc928f8bd5234cc327c8a3e4ba6000c6db5ee3b125757",
          "0x2991208842feb5c9b11c6180db57f479c3289c9bbf2b6d5e639b14d77cc25858",
          "0x0864276f06cf50500d51cc2d6eedca092f1efd1e35717c91b5181c66eab3485e",
          "0x01da1115c035901d42d512b03bc2962d2f3de504caec08f18437c90363a5cd18",
          "0x0ce4c61522cf118b66edd2dddf683b407fdd1d00213f2debf9963b5a8a297613",
          "0x22822be14736c770dd111018ad3a4818979da22eb522bb3ee4b3ebf4f94c0138",
          "0x02488c2ef3cecdf980e826af298af3b81ced49000d09ef6cceee194c13f3a44f",
          "0x22b3bd43bd130c0e2e989fd0633e352805ea72c21441ddb14fa2a4d7ff5b5ebd",
          "0x0ffea11d900b5c13cd8e4632e92d28e55f4b02b9ae182eb262d9fc054c592acf",
          "0x14acdc065935230efe80adbb43ba56e4815cc53e1ebbfd39004294d9e376721e",
          "0x15fc1e7cb819924b6faea51fc1adec10cd1e3adac0d0a32460a0d4a95a03c6a1",
          "0x0547d1912834376f0035790ee7f36ab73c9c8f41e1c4fbcd7739b4c767622c51",
          "0x135f9f4c16f97545b9cdb5ceba5acb9a4e52ae255e2a69e22b31145737898099",
          "0x08ce4af40d7de598c564f0c38c6620eddc9fed826c4060aa6c28f0edb3345e83",
          "0x21d6a6d971259296ed9b72872104b340cedb9119c4774b5b08ab4bad29c161e7",
          "0x2abc622ac35f50241f3652aa962d4b045c8ce1b4d3a77c51a5cae9995c6eeeb4",
          "0x2545b28d54fdcebe42f8a4562de1061eb216272889536260d5f32decdbc4c82d",
          "0x2854260e63dc45d22afd22d8c9fd8c22e1da68f4173a4028bb885bf7fbb4ade2",
          "0x095d54e568987ae7c379dce46d678537a26d61558a370609f491cfe778e8fb9c",
          "0x2ac03c440c8ae0f753a4f633e704bb41f8c751cc463b91976dc63157057cf8d2",
          "0x0ce597700fa4ef07ccefd26ea346c30618eb42bf9a4b7d791a957736798970be",
          "0x02c13a4027f4153b3680a29b7268e1eaf78ddeef9f8d1ac0866595cd9503b836",
          "0x21a643839be351a4f38fbbb173b5b0eb5ecac4f78b77f6830da680ef5aba11c2",
          "0x053b07c71cd864b2113abd0705fdf242cf3ca016b2ce545cd1877ab44ba35cca",
          "0x1889c70502e3edfb3f20c8b32fbedaad51fc6ad1caa14755c7edde52e1d4ba39",
          "0x16866b664aa3f628ce9e1a79887af71ff1bf20d4df6e707d51e05fec7b8edf61",
          "0x0ab47c201ad315c7220412e1c304b812546d4a3d84d0ff71c7a57018e7dc7834",
          "0x0577bfc93b1ab50ec622257ceedb3d2f4a5486002f7581c9ff3cd22f3a5ddb65",
          "0x07900aa352bf959e718e5284a4485f241a74a0bb7f730166c297e448732d6ccb",
          "0x2635df956b7df3f7de298ce9e18d310907e65c1c96502c693d1be9554bab45f9",
          "0x2e7115f1d6bb75fd5adfc872613922aa172fad9a29483b4872e5fd21c8374306",
          "0x28e330b6e413acf334dbeaf1969d566977dca676b4618ac27a530b6c859e5728",
          "0x27e821c205286813e130ad991acbe2c71de552ceb2cc34ee727666f936b0e82e",
          "0x08222684d80154930f962ddf78b2c56568a59e5d9da21ae8f063adacc9c2c38b",
          "0x0ffb7cc3c05ed4a3084dbd743112c05f254fcf9b593abdb82e25dfc5b4db8fda",
          "0x0d6e11d9b51ef8fa12b034fd87068fdc22f0a4a3f793dc6c9662eb9eb915d279",
          "0x2c5d6dde18d28b08d919f3981e5f27a99f2c10d9af52677d244ccf6480c6960c",
          "0x10582dfc5f5399c4c952550128efee21169a4727ed9e1c140b9a22db6ecbc0f9",
          "0x1c58fda68ba74bd534d519006cae71804c2e6074aba61d95f7d8ac84a3def0bf",
          "0x271044c8d54e1a643dc46ddb909ff4078e9534e8d23a8c2a1916c9c5c2b1d8cc",
          "0x186c5e24015fb0b6a140d7f5ecec132b14b85966768ce1b39c20365cd3f5d335",
          "0x1ef5281243bd23e1a1d3f0eaa8653e2a642556af81664859c816c5f69b1365ad",
          "0x0e9af53215e2364935a0272589b5c3b0c80af154cfa6cf64969885d37cfa68b3",
          "0x0c0a5c9bf118a07540485a024f1cf7c7cf0688827f6c1d6d93f6315c62a02337",
          "0x02752ea3cdf410169a2b9f7d940b9301f855cb888ff55dca8d5fa0f14ccfb4c6",
          "0x1f484d4e14af3b11cd257eb79fc52785fdcd8ff152dc56dc9f822475289e3d66",
          "0x18a42e21ac35ebf3034a6b7e836af6ba99686bc07b1ee828fd18ce264f98af14",
          "0x17bc4fcfe167ed740800167e4d386431ef1bdf24c6128a964c027aaf87922fa8",
          "0x2fc3b7b410acae015c637749d9fe90d89402b6b50c9d844775316c204bb4a3bc",
          "0x23050b3666768fa91186ced8876f0c35998af3ee48ffb141b841a792151e8e18",
          "0x091bb332b35d6e464789951159003f6882fc864a87bf52899711e84d7a696e7b",
          "0x2ee7bf6ceadb5749612d3f3237b181d839b32c66b51c3e0e518d6196e3fb1ad9",
          "0x0e5037b387cddecb84346cb5c04ba1c9a7600253c75f28d14c938916803ca018",
          "0x1556d870d39bb506dbb69cdf14cc083080b8d81b1450048090cadd910ec7397e",
          "0x21994dd012c107a165f93ad7e28bcab73468645266ce123640cfaa8330db37eb",
          "0x2da94256d843094dd9bdbc75b6c88634cdaa76e6d2bb2c7a4b9c23260e28144e",
          "0x0be0a92edc48db09808d50a03956b3e847dda5481fae1dfd077d7821d9b537b1",
          "0x1d332c7d075cc815dd316307189d93e14f0bb9e201638579cef3fa74568b662e",
          "0x15a8d58dd7b443b1e047e330b99eb9007b48e5c1a48a65f04c2ba40e136ba98c",
          "0x15f0ba262ebc5d722d3cfe67bb7d2fc20375faf5cee78716a321ea37907c7942",
          "0x2cfb417b5ebbb0015efa9458687cd92cac12b9d78c640336eae91934fb36f1ea",
          "0x0d331b322888532737741c8cb532728decddd7e7c3c5459d830a8ff4395b9dca",
          "0x188a4855919f14b790002d9bbacc7fc011980e3f5197e53c509b9b04d7023d5e",
          "0x08cee96a66c1ed7e3f978607c188fb906123d343f4bbf02d00920a66d243ea9f",
          "0x20b61c43e264decca5db37abfb717521e78ecf25d029bf4ba611426f1a82d558",
          "0x1b70bea273a40aaa74ced8369d5611aad3452804196ee87a3870450c22c1cd02",
          "0x24c234bd6c73e17254efab015050a01b7ac6dc82a3354d6e136a94f75a1a7796",
          "0x2a21a5594707eef1b1070ca39d553ec74f8fce88f64f5f494e3ca2b807a77047",
          "0x09cdcfd503958b901b3c6dbc1681386b7fd0e338313e3bde4ee4cc6907175f35",
          "0x037213fd6b9adf8b983606125320f73ec38b1e33deff6a0e719ea82fb5d15563",
          "0x2be5b55d83cc6fb32ec758e83ec576f521dcdb1da1374cc2ae0224725d6d5d85",
          "0x1f9b9850a392f6da10fd0088fd06054e43d5e204bae3ab38509dbfa188589300",
          "0x0968a47a748db23b73e1a1039b2ab2533ba91a12ed80e30afe4754c03ca1caa3",
          "0x1a624785eae483bd8ef9d81afed0c8612bfe450a124e267dd83957abf6a3dd15",
          "0x25ac240c7126a642eeb1298bc19876d969d9cb5ed0952cd446eb548962bf1586",
          "0x27151bced14b6f53383bf4553bc9282c17dbbb8cb47c1e847ea89be43ec167f5",
          "0x01ece2bec2de7891272f8f2f11fca0c00caae162e3fdb06e0548a1fd905fdf49",
          "0x27e856df227cff7d93cf1d0c05a10d1849345e99d6956a6659ea11d7d7374c43",
          "0x1ba8591af1c58a45df09034774a836e315884127d62ba02b4e99157b62b8c467",
          "0x2f11fa9402c5853bd308181c6596dce77c95a431928d16b85340980da12e532f",
          "0x19dccdf36783961a18c8e432618fabdd0892cc17cbf38ebfce63a2bf846232ed",
          "0x1350eca5a8cbc2c53b6a9df1a39ac7d72f0183bff9fbfd01757f08768dd52d6d",
          "0x230585af7582b6a4dc662070eb37eb1c3578564f80a86702d5a046fe7b251272",
          "0x052a71b5daed70d11e7bb9ab1a6130cfbe019383dc14f99fe2b53108ef831183",
          "0x07851ddc73a2c6f97b8a08a05bd1de3dc88e04910bea0d837164f2c574c3d337",
          "0x069995287feef5bba996cbc5a831ba001095e26b3e6b5e35f9765fefdf460e8f",
          "0x0a69204150bdc7bc73297aa4bf156b07fa581ba2def6924e2868c7dae84c74ab",
          "0x20fd9fbd1536a33deacdf27678b70436cb81705e267cdc3bcd6926ad26285114",
          "0x2eb1a2eaf15db5d578a921d8e77da62f9e62282bbb029f0cb241b6021364eb40",
          "0x051f55bc0974ccb75e69b79fd695fd54e210ad37034836b401f2f233979d5de5",
          "0x0ea1386d77c0f896d00ada2bf96303b17f1b4318a7dd5d959f3c8ab1c25dc3b9",
          "0x11e2fce0eb7e64e488e0a639a5f1dd20f1db91a1cdbc79f47111e0e0148b4c2f",
          "0x22633874fb5ae4774d1f02a955a7475f8e929ab6749a17cbcb0e12663eb9de8b",
          "0x1ee2613b8ed5faea8c3bb5f38f8e7427528e52b36a5cd114c8d8465bedd6213f",
          "0x1b3ef2535d759add05abf42ddde283129274a71318834b561b07e0b9895acb23",
          "0x24a084eac600612e07a30c5f1651b9843fbefe25e65077f1bbd4ed75e478bc35",
          "0x049c2e0e7e177a16668e8d6a2831d20bf52c915586b52be3a535c386e2e23fb0",
          "0x0769d2b56d0d48053a2dbad1ddd11f7262f80f04bc7a8f61dd2c4a93615b609c",
          "0x1aa20a25e4526401305fb2432c897ce83c4e4daf9d4b6fc5609df0dd8d0c8279",
          "0x20214d534469f0969a8f57b36f6d6bb2125e2ea61b2126143cfc66f7377632ae",
          "0x02c25b9f5db0feefc72ea94da35fc305c712e1162b921c9594b8c9b3b9095345",
          "0x11d06d5cd8414889b209f08264e1f638b56befd0a7ad4d1cb91a87986426f3a2",
          "0x01118c6633adbbfa1f08b73dc28148ef5008128e94946e47df78e52b53a81813",
          "0x10cbd0a971243c100cfc3447d5987790b60420664da96477b29ed58159d3c0bb",
          "0x2d7defa56218b1d02e64b31e0d84fb39d4068e7fef2f8e47c173401d5a01be7c",
          "0x035bfa1a3f16472ad0964a6603d44cb70a930f4538ab235d5cb1d90e75a8a935",
          "0x0a172329742ade46e7f37612e637f8a0262620ccd838892f3fcbce0f6340fff1",
          "0x2c58c487ea60769242d19dd8230a0e10a9b600a055416858160cab8996bd747d",
          "0x10753b36168ef4814cbce8a92176fe0d0429294a7bbf562599e90138972345d7",
          "0x05cab98dfb3270bc9f27c6151315ddb0af0b292642297fd763487949675ab3c3",
          "0x244babd314036a353068b387e78f064b6c3c21a1e4379c64034852528b8cc286",
          "0x189d6ea1975420c15108f928975eea4f635afe80fb1543ff6518c5dd989b4ef4",
          "0x2834b06e2f31e1c2e013b589c306629d588c9677ea3b4729da29e5b931727e11",
          "0x2ea65573cad7061d208bee93d6f72e79dfb7a9b0c58d1c3c43b295b7edbc050b",
          "0x2a8afaf324dca28c3319c642c939fee380fbb0992bd00c0d507bb244e79f3b64",
          "0x2700ca9644562122c6ec1339a9ebd06170fd8350ecd893f4c4b54ca714e8cca5",
          "0x088d20ba63d5235d169351e5ae5382a65d0a0e4542466625c496484e527caffd",
          "0x1e3b2b692746db2e3221d31c2c9d2af6cbae59cdea2df8c9d61d09cab543651c",
          "0x0320140e2c3634e2bbc6eabd67e3150593409e17c8a8ba14d6ba10b48f57be7b",
          "0x25fcceae7afc449cf6fa958d7d01bb57c0cad966b89de9db049e4d99aa35c63c",
          "0x2d08ac7c3d1ef44252da3c40aaa7dc955760672fbbdabcac988f85dd7f61659e",
          "0x07723b7f34c31a1d58c5d67e8f0082a117f77b403f42383783ded75501288e21",
          "0x08f93f11a62858823b57ebe7bb4f2c7fdf0a99ad9ae526bc7565f7fcbed531dc",
          "0x2505c08966f418cbb7cbf186072cda3478ba030cc08a31d4dc8353f14f5fe9ce",
          "0x22730c77baceee5fa6c5607ecbebac0fbcca0a5faa48ab37d4f49e603f33c1e0",
          "0x2866da8f65cef794177ed99ca0e5e28c45e33f059a6fd8db8bbdd83f37b93ba7",
          "0x2cbbd169f4a32d679b818634b4018a00a213aab1df758cc0e5ed696914d2794b",
          "0x152d67da16d24a00a82991886c6e1841bb58f19c064618531f66feee723badfc",
          "0x064ebd9f00d3aa92502f6ddf8fee96e7a247af07493edff59a6473cf2b877b5b",
          "0x17bf7430be0ed0a5924ec6889b870e3a5ae1d005432e965597264457be3a920a",
          "0x02d8cd6c4dabfab46a079273c4b789b7921b68909a69dedfb64974cd1228f26a",
          "0x0616e7fc01785aef16700dd740860e1445464ec05242217c1d7795fcfafed0be",
          "0x18d309277b33ca481301e0ca3d42a88033ea83fe6b9abe2c2e7d93061a31f3c9",
          "0x07524811ca357fc32cf3c5582cad662b040dcc15f0afa3e04550687031984655",
          "0x1ec065e0ec95640ef74fd337db8c6e0fd7a1414162d1db45bbe523b373941339",
          "0x2471756386b3496c2180e68c6ac6bd0842f8cf2024d6e519a37112e9c2b0115d",
          "0x15b16796e573ee84ab8676dac041a3d2b088bce5b17ef437b3dcc5965302bc70",
          "0x218e6f091731868afd5aca4beaf96fcfac98acaaa66d5738014f0139c02ffa42",
          "0x109fba9e59cf55203fe971dcf32608a57e45aad64a7c8dca57db4811dc17c808",
          "0x125a6c051a7816c5166bacb3647bf54f12ec2945ca6a51bc9df19051cef9b19e",
          "0x1b2e6621d9458cd5dcdc30e3eff2ffd34677b2dd8af74f4d742049e157d5ee1a",
          "0x0ee6a1864ab85f0cc60a19372b13b8d1671821a681cddf68dfd82a0e9acc72ca",
          "0x2c5ea8b8d22cf4ce55d4a3811ea4ace1daf2127a92c77bb3bca51e636c5dd5a3",
          "0x04769ebd949f424f925e09d2f1163a6602f26785f701a0f6e46eef91a79b2d81",
          "0x14ca5631f7309cdd27c353606e8ebbd48b911a239d86b45c5589bd5a9d5664f9",
          "0x17085e091ccb55cb01d45c2feba1c8c18ca380cf17615edd10d3fdb91040ecc5",
          "0x2b58062e06097f47843198458a974bc7ba88aaf01bbbfab7235cd990c3ec82ab",
          "0x05f19742b6b9cbf14b622e55b5bf45bc72639533c18c98b2dd811c4dd677ee49",
          "0x2af4cba34b3365d68f5b0775bdcecc6ec1f42972af48d64820eff166e68c4589",
          "0x304ef965cfc0cc4cdea00e9a2b8487dd791652baf6d9810a5efdae392c334ea2",
          "0x0c6b70050e17d95eaae67e03b820be7bcf05e0e99c40c7ede3a4d69434c2ce4f",
          "0x152051567b1ed7d6f4d2864eaf1d3b052ec28037ce709adfcfec0dce364fae76",
          "0x196a7e50cb517e21769d1fdbeaa92abbc040c76404d7144554a4a88b27bd5a56",
          "0x1dba4d6d2eba84339bb2a7a32f9cc9787264acf687504ae4c69a8b1a296b9a0a",
          "0x114fb35839ddb57c3a833d40316eeb28e32221d34ff86ab96507ad755c4d375b",
          "0x152086d1247da80503965412bca5b020f0918e05fae4f40293c5c1356b015832",
          "0x248f8659574c27b349b97c3403dd5f08fcaafc9f606a59693b89d743ae952fef",
          "0x212124ced78bb0cd0b708d1f0dda3a8e4f5b42cb3246e7a64ecef935e5fbce2d",
          "0x09d68a717d8417864da716b3dc29a6aa6e2dfc0b661cc9526b66026a7c9e8b52",
          "0x1009d9033011387d7b59d758418ca3c0742dd6af7eca2e5e6889ac3651b32a01",
          "0x1dced90604d29cc66f5810108713c09579fafab7b3175b12f7540f1a03de6851",
          "0x12d425da9511657071f3700e73d3a357c1db3368aff5148d40d3b315c3cf4d50",
          "0x027bdc068f23f8f9287c8be55469809925dfe5226108913794b4782b07ff59b8",
          "0x07d909196d6cbd2091e7b66d1550e3772b360afa4f9646af879002bd20e674bb",
          "0x2c5408234e473efa7269604e73d12733713a47b552726332dfc58877bafb84f4",
          "0x0991a9a7548e3c5c4f09473aac60815c6e04cbc7138bfc02d43346f46a5bcd21",
          "0x0e6c6e47926d2386b0db74b20f6778c507bf92c3fe5ebc26327ef1bc5a9bd57e",
          "0x01db7d7f599538333bfdc1b9376b38e8cdba27e8c49bd819e08d28e132fff211",
          "0x14e0d2bbb5969c1e0f86805100c284d8f6f6c1c101e8e7239a38e3c7a006267c",
          "0x26ba784e04d92ef59d57a171138b2f2bbbf99cebb2d5bac21cd86c8af5106755",
          "0x07de069ebcd67dd5880d098549ad3e1cbbe74f219b8c53f8bd49166a9725f72c",
          "0x3028949b0dd33e015aa6b460691d837d8fb9b9d5e70877bd83df0300b4a0d843",
          "0x0b5f2ccb84db3c03ee4842f663479d9b0a8cb08d3f1d7ed41069fe30120038f3",
          "0x0f56a30dc396d6c1b178f692530945d187d69c0828141922f2923dfa4d93f821",
          "0x16a873c3f3cd80fd6a45e7826eca59151c03e4ea8c1777b20b4fbb42d7118f98",
          "0x227479dd4a5e86e44de806dfff98d05ee2c5148f5b42a5acd07747ac71c7b474",
          "0x247f177204c1391a4bb0241cf0d084ed79f81fb4049498c003ba1b225514994d",
          "0x1a7a0d3e02ddfd68639b98edcca6409b511a4c508aac4a3ee26decf3ab74118e",
          "0x06109074715f90196189de280af6d0c820c8e3862abd69a5d050932f442235f5",
          "0x112ef9d464e2ed0c3f34862cd955d29628c3116fe54520e76309b77ca91bc2fe",
          "0x052afd3488a875bc44e73c54eae6ac05cad2d7e19b480f50c2858b8ec5a4dbac",
          "0x07fea8911b7c2841f4f7bea4f3b7be7cb5710a624297be767b313447fb2a1f9d",
          "0x253b88bbf4610d15934d7e98f4a1303662f9cf547bb61fa5f1035b11837312e7",
          "0x10ef8f2a1e54a3e08d4b642a5b584207885166843709469691d3383502834a88",
          "0x2de738c01f72522b6982c758e01540c6d792040f3ea15285c7864e3bf92c8e35",
          "0x1869a05c2435f4ede2ca33fad840b07857efde65f8509325e06a06f89b3093f5",
          "0x044a3c589cff1b0095a3bba218c63c451998d5436243ba1e93f726dae82593eb",
          "0x0edf15cc47ab50a92e54014b5643168988e253adae6f0551e239d265d10f1fcd",
          "0x1dde71a388e1a9cb075afd6b6a13354701e041fc3415b5d6b613541d4103f409",
          "0x13101734082cb23f9bd2657ecbc31debdebc886dcb5a15bbd8b120c8a945f82b",
          "0x25a3a7c128ac6ffddffec4d7a17cd3044ad0ab308b974260f083c39ff72937d5",
          "0x0c5a938393016ffa071e3b9f2fe3c58ca3083967a294e62ed8be565724661b4b",
          "0x1b63a0bee07072dfb3a33c63fd00d2da4e682adadc666db1205326008cba6e17",
          "0x26f99a34fc19ea7dffe9c6ab96719b2cef9d38d41a209ebe74b51b2f8b0f60c8",
          "0x1f1884b1cf3fe36cc0e0aae88ac6686375ce66ad770087b66b2d1c401e4983bf",
          "0x0d7f0e2206d6a092c502ca25b440455da98e69d7fd5e4e205c5177a8a4df812a",
          "0x184da09fd45fdba360861f125fb5390f5a476252fe71889582cd7b73da98050a",
          "0x1840781562955cc1a9035f8b1ba651c833b0719fe283333c249c8b263bb01573",
          "0x02d077d027f39896d9d8b1a619ea6063290da1477d06d6a244b48023b6f3cdc8",
          "0x2cba8f305b009310a36116769a2a17ff2230b4915e156c43c2b5d9c977813660",
          "0x1e1c46b068f4807d6832a968be9f79bcaa990b6493844ad724f8a8b37bb7921a",
          "0x21ad357404bb8cd9db5355e5cc479dc1aa1e48fc6c76f62f5d1ae768a0e1a419",
          "0x00e19ce8b72c6453c73a3538e919f48d4eee11f6609b60cf430e14b74ceac5fe",
          "0x0f89d945566a286b7bc63b937036d40fe58fff3b13a6fd1ea7676eb66194d06c",
          "0x15e6a57cbb53220803c4e91e066b483a318bab0be2119a8643ed1cecba61137d",
          "0x1c45c8841fd5d4e675a46c9911545c14e9e468ef83e1e7c6675e91703f0e2327",
          "0x10ea93f02575126c231458b20f4b77480a0f10f53cf4c5b6f1dbbbbfe8d88a01",
          "0x01bbb7784b1f4971b8b74b714d17266e3a45008805ac742477142767ad0c5ff1",
          "0x138941fb4f666acf374fcf0190a41cc86f9429386ad7ca204fdc2ca224c3405a",
          "0x2c8991fb3b6295cd67162631ec3491ef54fba71727c22957740552c825943423",
          "0x0de66b24c1d4e2e56781bc629c1b3989d78dfad628716a843a32c5db418c7501",
          "0x0e8b37c16fb6281255cb27790ac523f5ff5c15be286b1e82d973b4e0104bb2a5",
          "0x0fb41067dfd9ee6e840b88280597d436a0cbd61502e06898cf8b5fed9289c85e",
          "0x0119c19df693f80a7a7b0e64479a9a77ef4b8eb70d6bee07fbc33ef7acf857db",
          "0x2826c0eb3ae0b75c96cfc181797f6133d8434b812058bd1887e71aacbf095795",
          "0x1d138c8733414f701ebcd319a6858178037aab082b804e2143322a87b6477c76",
          "0x22e32c8a1a9e200d7e31d69e4277c3e679494b1d970e0c79217587e4955d7c07",
          "0x2d52b65582b83b5d13f288d67ace22c5c51f8a4f075b8e6d7660a660ad5cf6e7",
          "0x2e2e7048c0a0db8910e0827eadd124a35947cb26064a22e793b4d4ab6ab9021c",
          "0x234f9d96cf483333c13f5224a40dd495370dacb7b6799e3f9361e2ab893041c2",
          "0x0bb3e00222cd3d72f5499a2749dd7e36c8e2d55e255fe81d758a107070ba481c",
          "0x199ae52b7547a3da5f54bd2b9ca9dc0f21d11594eb52a07907759b82eee76612",
          "0x01a3d8048dad09581c18d1ab2e10666d3eccd0769689d612199c26550f3a181b",
          "0x1666ba94ac2cb3a58c5cc86eec751353a14391b0e06fbe263851396decc0fd1b",
          "0x15c3034cd79cae75c00b7976817c5969598916ed56344727b811872af4042e8d",
          "0x086ac6932de61a9ce418b612502851e06d5d70f4dc3b1e1ed8ea2c6df75b8789",
          "0x0f43a70c864e7a81e0576bb27764656141ab43b19925a1b4d3a1768bc722b72d",
          "0x1db3a2b7c6b538ad07068d97508df5ffb34a09ea1f98ed30399af2983fa145f4",
          "0x1b15391ca85237ee8ea48570d759416f1826aab34ea87d3a3cc3547d17e7dfd9",
          "0x0263aaa9f9e83c255e67f9a09901feed268df56151e79df345426341e0f38f33",
          "0x2da84ec38f7707d5d71faeeaede793d990f04e8cdd016cbbf3bd65c129138213",
          "0x13ae9ded4812d1f4d28d379642ba7b79bb2d3eb81dcd223e8910c55e8f77be9e",
          "0x25b181c72550002c2b1304937efdc34a0d45e709511929cea060359fb523bf6a",
          "0x2d141f87778ebaf647f2da27abbe0504d46442838f3ae21aae9074583f6b64ba",
          "0x05cfb5698f68cf5130c14bfd4c87741a0b65e2c197f594831ca414ff53ef5505",
          "0x0fba377e6949b3908154085c8457a2980cc5ea3472ec30e0996cc8dd9da31d9e",
          "0x2ea5bc22fd3e4ee8585ac883e574501215972b203e21d3cac33b4852d9b507b5",
          "0x0db2fe84aa7d137472e72b0ffbc7e76a76f9224fac1d1b3da6ee35a5c724f8db",
          "0x11c804a419c47dc73db1ab2682979afdb042c12ce349a00dfeda1c72f0a4db23",
          "0x1423df99c89efe43c3e80af699fefabb861fe0d8974624dfc1927d2776daf241",
          "0x2e07c1f81bba9f8e1bd8915787ca74c04607e83c308f4da253140de0e3cb4ee0",
          "0x1b945ccb17bc27e10a23926ca5537b49b28b63312b3278cd16db144ab27fa3ca",
          "0x0ae9821243e03b7ea9373b032275d32dd4cbabc93781f36d532b7cc9db7a575d",
          "0x18f2e62f9e91c3e399358234fa6a0c907c3f3541fc0ce8ef1b5ad135d41c4c02",
          "0x17d7aee292dba3de1943cf8334254f9754b17ad7a5a2c57230eef7e06c4049fd",
          "0x0ff75f8ff73a55d486beefd9f5d8bf6f6f9d31b10a0903b24f4a3bf2118f9836",
          "0x2f8219f3c7c148dcb2f38c697bffd3100e34b0ec8dcf6d7436de37e9dfc65a4e",
          "0x16ec1ee6a74f79ddd9d142216659d99b9123f7d789019ecb5cf3a043f7d820e6",
          "0x0fe5612d8e5fe5ff4e224078cbf3907f25078d2604dbf20a6aeaf18b0216b57e",
          "0x080219777df47cea0bc385242c5263eae06b2a7eaaca605b7ddd32fe0b0cfc8d",
          "0x08e90c05a9091040815ec08eb142106a1b2c94eeed5132c637cf9c0c40403e77",
          "0x279d2ce8346731fdee7a49903b7e6ef1362c59970e31aaf01aac51dec7f9f026",
          "0x117e0047acd22b61fbf81e99cc13e2b9f1d8db8fb38378592d44372779bdf165",
          "0x02bc7053dc85295a51d0f8d051189da22f32f222487ec9ec39d5a17652d9411f",
          "0x0790684b4d26b9a83225cf72e60c026432ca5378678eb8c744ddbb6e645fc010",
          "0x08cea9f02523e9dcb87709812e1f78683f373a33895774491c1d6072e3ab079d",
          "0x1a28f5548ebe2c210f3610ce30bff1cd5f0233fe045f0da2d2a7061f63ad35f3",
          "0x1551491aa0e035787242f5bf43519ad561b6601029c56fc863c63474cbc6713d",
          "0x2705e73556fd298b38cfe6b3d042e4e5f4b457e90e7e8b16a3c9b54b49c644f6",
          "0x19edb84862a4a113e372e01c3835b7167bd58d6edcb038078de507dc89472728",
          "0x0938b1c265302b7e4148906fe0e90f9ade375510950d475224a0915dbd2a3429",
          "0x0435d661e18d8bb28bba1a4648b73af64441623162e5b636ba1dfb7a7e887c08",
          "0x2ce71ce2431662911ea33f99ddd42227b1477573b261f9d38957f9c86286b2cc",
          "0x17c75da1521bd3f44b2ed39799b747fb4fd28038a87a50a6efd9bf39060f1df4",
          "0x2fa18e89595e69993eaa57f71aba15a8bb83e9a86c5daf770794567ff4ff187a",
          "0x0a97b5f7307b9b6b4614dbdd9ca06eed80fa8ec636008628740f04673cccd983",
          "0x2fb02323a8db7ba7e3bea78652a3dd50fd90705cb65f2f99115ce510d1ee90da",
          "0x010984915fbcbcb2c7d051c06a00200823c6431435ff387788b87834b46a645f",
          "0x25faefb54ae7e8ac9b3516ed44536847045f98350fe8020edb24fd028cb95e74",
          "0x163e9a85805166386406aec43091656df8a354104960ac7097c85d2107dcff77",
          "0x2e01e39fdd209edd00393dbc792737828f81d0a25706436c45868a40c23fe53d",
          "0x1ee6ca0156eebed43a7f02726338c9259484634883e64cb6c34ff4b459dcfa61",
          "0x25effb4b84c2c0906ebb6571af7a151325c6ad696ac0ab5a7e7a34366a923f44",
          "0x090185086d0cfbdf941af09f6e85e6c9199da41c0b294c049e2143e2d1bf94c4",
          "0x196921a374020f2f7cf6bf76b7fd8dbaae06ceded49ff948268d3728d0baccbd",
          "0x2e30a88a9c1a48deb66bb1fe9232d73aecd2d81976822b2ed437aa9c11080577",
          "0x18fc95efb840dd52f4de54cd023b0b552d57f549acdc4f86c1635685225343cd",
          "0x0bd2326b0caaea6d5141b3be470e865dae99d86dbe6bd7861a22ef6e2d95c08b",
          "0x04de1aa3fb9807b22fe3c503dcb0a58325340ea0b5a50702e62767018655a8c3",
          "0x279d21657b39b694181d5081827940f6e6e1271a084c55f42dfc737a187eb989",
          "0x2594a94215dcc6c73d64510bac3b30414abce18cdbfeb509afe6d70d3dc97a8b",
          "0x095142e3ce6e5fbdba9885833c614bbf459895b6cea10edfbadddb276ddd2920",
          "0x04f7c712281ecc56dbf8bbf95fc1af4690f419b84130342647be3ad1b6773261",
          "0x150c295bb04a6280a5cfaf70de3e998f8a42448b7a8ee56d1fcea8c515fce483",
          "0x040b073aea01b55948462b3c96965e070681ba42d92705beaba7ea9ce5983783",
          "0x285854aae042c3ea616da7b02a6b2ef30975aaa2a90aeb8713f189c4caa36c9e",
          "0x0ab00bbee202a51e42ec8fb9b5cb61f9165ceb652b6956c1205e8dd53bea3b04",
          "0x01152e1913091cde5f38a6bdf0a4eb0ebb501954b721f3859a0aa262cde13f80",
          "0x2df4a938e9488825979442d85dda528501171bd09b780d43d1b2e2532e8a4d15",
          "0x1d10433e676c08dc3ad49d71ac027dc4b2bc6f21a2fb3d37d7e9e95819279a77",
          "0x087e2ac12cd1267a049093f730c2a461aff6a429c231e5ffedb62cc52676df26",
          "0x0f3769737a44340e6fc9fedbb6b760856826f7c3a6ca8b993fb004118718ac38",
          "0x29f6d54a21cc0209800ee613b44585252e7c35d3c0a4f00cf18a8220f36cf76f",
          "0x00106dfd6a05f7c55004c6d0792728985e392d63c6d22e183b76c13cd4ee465e",
          "0x3024b6653dfd68a1ab85ed24f30bfb88690c50b9960daed59b460331f8e36e3e",
          "0x2f179ae3fa16736110c2911a504837d71c7cf5d27a4c83dc447a7ea54e9a89ff",
          "0x057740fb88ed21c6f4ad03ad49ab3386680d3d0fb5decc4dfe65e2c187b397bd",
          "0x157f8573cc1f9773b3852c965bb00bc1189bc83355c7d831f1c881006d3d2286",
          "0x21dae9de84c896fb3e060fe467c7dd0b7471e76e961a3b30d37644d20e8f449c",
          "0x2d76eba37f90108bb9dced3f9da1acad5a29d2a354edd54230afa9b76e4703c8",
          "0x2041ea40d491d2f1062862372715383db89750828052255b1e071f99ba360196",
          "0x25b939e2c40c6e075a42cb8968bbf928e3d6a8af8da4cc79c9bfc72d6821c673",
          "0x2ca8f0a159782d2ab2ff4ecd6edfb287ef6e5a1f20d50cf7a75a8b07605ce461",
          "0x08e18252ecd58de85a74fcf2a5dfd866d780e8b3f592153b7e7c04707d2f1ffb",
          "0x0e742fa26b8408adabaa17ca7dca2bfc14f40e3aba46a2d6e85d3e3ba0c5767e",
          "0x28743cad3d872842ad23dae6978295d26179d81275e52dc30a7af80a3b3fda7f",
          "0x2b78a47772df0f8005e508cc47a3c2a37059fde340d3886c2eafe79aeafbe868",
          "0x16994b815229f66f90e88f89e047b4ecd3f91a57dd9ee5e9a56294c2f350af7b",
          "0x0e0f16cd75041288520edb1897af5ab11b85a545f4d642ffb157f5772129430f",
          "0x1b01e8e91d773dbd4ac756122f8e79aa9f017da3e15d48656d07e98f9a73ef04",
          "0x0d1f2525b6adf5013e9d76170afe6f51176a4497c1588c8be575c04e567d332d",
          "0x0ad15029458859dcffe10f316fdcc134527eab1f97c0a6b0994e2d16e3f45210",
          "0x2eef79034f8cc2ee04f0f188115c01e22b41d429feb2a66bc239361eea4af45c",
          "0x25e42a21e65e99f63f05b36cfc485e97e72de3aa38a8573d343f95ce50c62dad",
          "0x06c62c056404aa31061978613c9ba2a052ef8531eedd3263bcc34c4f166f7c8e",
          "0x17a698b583a769145e307795122804023f82be37618acdc120d41eedee9d4cfd",
          "0x0e1cbcc11d65e21409282179563ab3e273859363b0bee9cff0681ce5a11f520c",
          "0x220b8ec07c64919136db6bffcbacd9bcbc2a560bfe98b02ca9d2a1c1620dd0ad",
          "0x1f7195b3bf189a997c2d4d7f8d107d91c2ad5352b63d111cf142505c2ea35645",
          "0x0946e22a5fe1252cea749730aa63636b7f99680f6299a80249c399c38b566709",
          "0x24785875bdec9ee2dc76560daf9dc2b016472189b7b2a7d7dd99e86329313b5d",
          "0x24d6da0aff8453f029531e9a90cab696c4329fd05d5bc33ce3e949d2d35105ba",
          "0x195e3e21079ca38093bddbb11591cdbadaccecee91d44a9c797380fd2b701512",
          "0x1bff6b43a453e16b2b130323317ccf68c0116cc4e69908fc4feaadebc010209e",
          "0x073f9d5f52694d81ef62884fba9a31432e8c590087630266a86b89f3c0e9c78a",
          "0x2be3fe4dab84c18cce436f93d492a73d3335c21a6fb6f3c325c70f27ab0717e9",
          "0x280f758350e2ce22acc0220828c374113c0a04547216dec766b2669ed6874db5",
          "0x06a4b8aaa363261c2ba63fc31e73c4704152908250ebad77bd7902e381d5f251",
          "0x06118135c6b1997f96d30a6196877ee0a103713b91004027410a76dc5bdfdd5e",
          "0x1a89b2b10aba25ad34445917055b958f121305f7b31489f50eef474494c31c07",
          "0x2e34c3a24b90fa5afcb3b92b40591c3803921db4bb1475fd94984127afe1f4c0",
          "0x29f4cd64b7c9daa88c1e0cbe36c0b53840b9241af6be3fa3528cbd8495d89b76",
          "0x113034f899c9af84654ee734cf5907134128528f8ca2fc627261ade006dc5da4",
          "0x0dd5e41e4d002d17fd303a182c7ce4da1c12c29e5245a94e678960f79a03c221",
          "0x09495239a4fed063a3c2928a42413f02cf9ae08868146f80054e6d5ff531cb67",
          "0x15486ff36b7325528afe532981984b6c06a63a0b6e25b1fb271f63b8ca6e8d82",
          "0x2d8aae1d082a60db6b3b1aa0b244929ce37c13927e8d61fb0e918f01a14e4835",
          "0x0094ebb5501dae50b3d868311700fb837a5c69e9bd0900903601616f693545e0",
          "0x1fdaffacadac41b6154b16c9aa2c8859c42fd8da9083d2ac07cccb26e690c7e2",
          "0x0b7584cee1c78e903017e3a2e83e815830db9118a5b4779b594d764aa5b241c9",
          "0x1412e854da8a4c9e0a11d27ff0c4609bd728f2e0d566a56cc2936f370c40c875",
          "0x03d34dbc2e6f77a1d12aedfa5e11de27cc991c49edfb396ee74e269ef5da2981",
          "0x2aedd5795046dbc6c913783882d4a45463950d108a7e6910532ba1a1f4d317c3",
          "0x0a5dce1ec5c7d1991d275f91ed2fea3793edc4afa7d3b171d6ca2d5ec880e283",
          "0x158e7fc9d1596cf04bac80a49f4a93445b37178a9e5a76be24d6c708cd38959e",
          "0x08d73061d983610d3093e05e80f0494cec6e6a9752f85e7f604b4e65e6fa595e",
          "0x2eb16d92356a9ce2c7372015b5f16ab18974df29cf53f17e1f641d5360d7f209",
          "0x2e9bfb1c072ffa1f1448bcf3cb189e3c8d0454857a93f2db4c1f08f66506d6d4",
          "0x04da3ae9ccf23c44250ee9f32095b2d3758c3223aab85cd4e21791287baa4d08",
          "0x164495749ccd7eae205ca14f4882b6d5a9f84d70a2eb1265e7e3619322726e5d",
          "0x1c81b3933e302e2a23052a1ede80c8edc7a0830fc90d4f967c13e8fa199dba98",
          "0x0de77902a2da45cf6727a6e8790b4b387d26bbe3d3a10f8f1af7d71be82acebb",
          "0x0fbc8f1f39fa56f501d218cc4283d9f4f7c5758bf121ae97978a0546b275a224",
          "0x1b158898ddeaf57075ac5a033d069543ffd9226ec1fc9f5fe8cd17428e9f9c25",
          "0x10a9ba7d8fc36249b71ce38282c550047c0723d4324859b8f33c07233157f7d0",
          "0x1e62b7c53f510e60c1ccb7826515c00d62eb21aee00b0a12bbed33f3f0a41013",
          "0x21e2a30973e601469bd38f69e6bfe5fc6b1f2c546a298dbe4b759eec183997e8",
          "0x1f4256c012bdb73cc6324b6059b196f6607c81eebe0cefce37fbae343a0db862",
          "0x283815406e80c945ab6a80b4b7903592e3325feffff20d60df1eecc01c310936",
          "0x0cb4ce0de05ffede6708a7bb1424540d7811962447dea07bbd6b3e24ffcff3f9",
          "0x23f9dadf82c522df3d0b41e31a7f6ba53230df9046b8a338d3b37127cbad9683",
          "0x211306e19fb65ae10286d8b629d4cc7bf2145ab76ce513d4afcb5d058a5cd059",
          "0x26f18bb09eefa70257d9406c53b1703ed3202ee7ee291ff66b080757c8bcabc1",
          "0x2d69b46423fe79aa1ca07dc9a2406f2424577e3bfafff58ea504c104ec4f7dc7",
          "0x07465ba33026ed23dccf76d5215c11ffc8c750a30b5d9d39cb2ad3196d2c7e32",
          "0x0e4146dee78ceba688773810e5327946ae20f047ac4fab2cc45a390b4d46d64b",
          "0x1624e960b1dc56e5876ea8b2e2115cdb5f60a6889863457fffaeeac02066dd85",
          "0x1fd0e3ae2786ca41e655bf8e0247a719ebfdf38df0ef7f012ee5a5f9358d7ac4",
          "0x2052c36e6b89e1840e6d174c96649a3d2e7b50f2558cbf862a05c36b177696a1",
          "0x12c7be80bf7ff89d69d62f5c25d1cb829f598187578d2fd1158a47f3dc9b187d",
          "0x1e71226367cf0e67f9ee1e5bb9bcec098a0224003bc724f044ada63f0dc88482",
          "0x1b1aefde27d4009da9ca9dd14d8d9c546a7c84e6747a8b1fe2a561d62d4732f9",
          "0x28fb6fbe80d161b9d19d64c68bfd2467db0399459e4e008699bba3b0901f5b4f",
          "0x27034c9a18b55f5259805f96d8a1d9b7716fb1c87571f71f137b02314914ce19",
          "0x2e6ade49ee96d2b99cec94c7ab90989cafd911d9d74f6b969130dc9f6102c8ae",
          "0x1efaca3d5ae87a5f68d4f3114902e480a9416d69332914e0c3ccfaa25e819665",
          "0x1dbfa12bb1e7b0cf39195ab98b2f4fe7b0b523c43f61778b2ad38e17b660b8e0",
          "0x1d21adc595bb3462aa395e9dacc67153a5ac4e2a81c8ba83fe337e64d9981dca",
          "0x183a031f65283a2c57aa61b93f71f8ea2aa7ea9881b0a4c8a7eb62a99c62a4e0",
          "0x05505d703f7fffd323dc5679872d9bbfde81a58ce5a2c4fa004a1fb57005b3f6",
          "0x2fa94b93636e509a5fbbd374f111a54974eae4dfa857bc927d463fd02c665b2d",
          "0x2f1824efee6b90c7288dbcc4174d2eeb29168ad468c9f3433d183d38fdbb60d8",
          "0x2f8b0043c7ab7df1252a365a6536b5ee4586d79bf4edd4ce4d4ea1236a77d294",
          "0x2a066fa811754a4c8df61a3eeee92a7a80420f92541d0dcb06eada3127f4b346",
          "0x2dd483975bf2124fa85dca41749188c4f74da8127ecefbe78dd972b7e9d9e144",
          "0x03875224d3d0b40a164746fa30f7835ed6dcbce9d23dc4a3c41e65e0a70f7a8c",
          "0x29848fee626508de066e7046d93ce678c736cbfe64839b0fe774772c6514c1c6",
          "0x28a7d8aeabfc1efaa515c8550248e34412a27e7fa6cbd78d20b0067c12567a3b",
          "0x19507b15686e20fe2b1f98c9a1e495b36ffc24dc149ad29f233961e6415f92b7",
          "0x0a61b968f505e0704be2f676b267ea44908d929ff8639bdc4144945b0075cb95",
          "0x10975a7f7060b302abc4d5cd2e8d2b5d330d42b31bd5c8a478d7a76859059f5a",
          "0x23d1ef3b42d0c153d621634f43b24232bf75c90f73c5bc30b85fbe18b4c89a2c",
          "0x15b66bd3ea7986c7d2964117894f3c43fe02b8256d2c9c185dcb7f8c63b7aa74",
          "0x09e46a8cefa89c5ca6a5b961fbd945f07255af54c53f732d32619442b8fdf8e4",
          "0x0e72db48726c3049121cbfbd1c083459c0a633cd69538cb633b879e4af6c6bd9",
          "0x16f05309db91b39d38acfc1debd39a91cc444330c3ed445812142016a64d7846",
          "0x06fffdeeb381cbf39795f83c9d69c8b3accb2d87fd6ce4270f5a6606dd0cdfc5",
          "0x1a252b1f347d8d894af61bb2f75c65cf5fca1a2211de1f905cf39fa6d384e77d",
          "0x231561bb687a5aa8aaf7e1c595bf155ad2d93e0922dab327fb9c1f27877210ed",
          "0x00f8d4030eac93ec6da79f6304cda6b04be32f036e80b42addaa351e7007913d",
          "0x2f49ddf565cb5324e9d3dd48bb57022ccb7b479be123e003de3f2cca6cdc80d2",
          "0x1dfee8987696c32de30440637725865531f9d7c3d76fee9811656a435bf0684e",
          "0x058217bdeb3065546892cceae218f7fdf3a43c2383ceef12387fc29d4dc74380",
          "0x05f842392a9a07d4c7d70f1ca1f72b9e3b5cf5633e199ebf54ba2423560d4f55",
          "0x188b0807b79105dcbd5c36ecc676c2fee603aea072b7712f2ebb69b9d1752e4b",
          "0x1103f6ea09cae621ec6f695e07929a36037c52efcbb493f10af13cdb0055548e",
          "0x1a40f8ba3192f0c929248b4aed619c81a22f8a0bf03745d15372be437b0fc08c",
          "0x008823b7625f84a5f5c9a8891cbf3dc7a3477da215200ba420e51821645f9d2f",
          "0x052a494af3ecdef5031d87994f264905d25fc6c6267b6f7de4435bc6161f3f32",
          "0x0fc8cd19ee31da018d0c6c59856e6ba369a5429231113dff4c8e53d50f1577be",
          "0x0bece88708ff447f261035600d99b11389aa0725b446c9e8d54a02e8ff2de3c0",
          "0x2bc2fc2f7c93245f1f5ed0ab6c4cdfb771544f8dfeca02250d9ca1bf6dc2ef92",
          "0x22b16f8325f2a2c69907af42680101e4f86de80d901bb6970310dfa1bf805fd6",
          "0x2782823d5188cf5d414c280cfd8dec816ae7ff36c0fdacd870ae6449f25a6cb6",
          "0x12da3c90acc4189b45b06a1f741598dfb2d9c24f459120debece5c5fe23db5bf",
          "0x2d81a5f9fa4173f58f754643481d08089726bac7bb7078f4111b55106b5adf0b",
          "0x286dbc990140046e1e2637885d4d2904875f0afa51219ab2b758fc32cb600c6f",
          "0x20e7a3674a066766d04226362e73219b54ca6a4258260375e8397f8fc115197d",
          "0x2289f3227f4ceebae0c1dc514de4c642f15314eae937b39a3c3c12476913fcdf",
          "0x213251e30a761990f27fa1970426f9d44a093dd04524016706a1180753aa4616",
          "0x091655612a93f5be3cd31db248c7b627a2df2aafa1ef69f7f27659c13f3019ee",
          "0x1af60faf34b05755f1941195b02e6463bb42df76c12b10f14f8b162506b8d5e9",
          "0x21b41d0effd2b0440c0d3b70123b7731903bfb46db3c7a23acff016eaf107fd8",
          "0x16a0876c96d45b59dde82c8f1e1022c5cad31638c4e38cece5b7a56c408d84b4",
          "0x185329f9e4aa85d49d42a62ab4f641d62c5fdede17015a7d79f3164b690f6407",
          "0x123f208db0c4ef54956335d16ae7152534d2d8ba793d601f15524969639ea3e1",
          "0x1aa5654278de22380da76be7885381c1784c80ef4f4bb032acd13b09739c263a",
          "0x0955b8a1677a5b6310ad8e0492e82d1044a14c78ca87d1e30e0d7f3316ea6ce8",
          "0x0c7fefd4edd4ba7d92756b5173928904d18f9b6fe995a575f0e6a6e88f7c0e58",
          "0x116d188997eec6a1e2af2aec8a5db1ebc5cfa588fbe5490f08ded1503ecafb06",
          "0x258d2eed2c2de759f0b394b6a3ccd2d96e28b10018f3e7f45393ac8ffe947ea6",
          "0x229de8c2965aeac1aa7edb78fbfb5d7fb12e7fd7ffe6b9b3afb5e888349a6c44",
          "0x0b1fb0feafe98d6cf6372170d4c595adda71702c0e9d41c6ca1a03d7518f83ab",
          "0x285a05be9b2dfd8af2d0f28f2e32f5cce6b153d880d8acf6906780ca636c4cbb",
          "0x1d8240e9902394edee2b76099db03d74dff9185434f3a4e4fe8575969ce4f295",
          "0x2160be8233ce1b0b331989349ec4bd9b12486448510831e6414678b312d57f93",
          "0x2929b839d44bd2b3fc5bf2cc815ee7910db996cd5b5dff426c8f18a5adab52fe",
          "0x07d0d43c3f633701e5f0dead5516e94b91f97725e46982d199de03345920ec08",
          "0x0b99c27daff90cc053b37132622fddc5fd52bcebac1270b1cce378a7f02393ef",
          "0x2e952dfcc924c08102cca7e9565eedfece78965083b853ac1f4128c7f3d78691",
          "0x2190b77f963391066d6d26f3d74620ec35e501376b5299cd3f7e9c23b55cca5f",
          "0x05be919c52d2f1dc0d0b0d161f7ba7195510208aaebb5dceb0815f2a91168652",
          "0x0b4e4b3ca8aa834622cbfffb76e6f30f9df997dcbf93df22a7becc8ff9a0672f",
          "0x1620522a88c3b531c45d51e5363f94f9333582e5f6ee1c3cb76408d116144fd4",
          "0x0f442ea26883f8e188715f5841a690cb2b38e479d8ad7074e893ef19e3c7390a",
          "0x1a855bfbe80a7886ad81ddf0e7bedd80c1e0e4d1bb03130e03035d53b59ba710",
          "0x06a93868612233e3d6098de0b8126649036cc14b1ce3c7b19149a17caa20b66d",
          "0x0671424962e923da926612e9c0661665c4a67c524267c45a83dee528130d4c44",
          "0x0b119799f6ee67e2775cd4a71a8c5d455b82426e00ae6cecea32b5f4483b6d45",
          "0x26d468d55dc31cd5ea1416dca0f7ea5190642b77cafa7741f1233213796c165b",
          "0x276fcfe17ef821818010494be0aed24abc1a41eaca531c7f5d2f7129eae80325",
          "0x238d40c836db7215bea1455cc92b6d73f5100568d71a6d1e81abefc18c21e93b",
          "0x064c4fd1c50ef587dfc7dcaccd4ab7ad5c7cdb0230cc8e0e34d76ce399fb49b9",
          "0x03718669f16fe30adc38474a75406af29431ecb57f3db1ba7b66997b07b2a425",
          "0x19f104f90bbc03762d621a274a325c49f5073fc50c47db885e9456662421098f",
          "0x2486c93effa24890bea4ef9ae6cb9b8f65fd7591bd84d535b760229c0ce27ba7",
          "0x29ef7d3ea32d9632269fb022937c78a91d7bcaa063a818c5924b7b92d01ecbf5",
          "0x26d91e7cce1d8deeabc8d7c549cbb1beff0c152cb8819e8684cf20504a0252f7",
          "0x0248d08993b5ebb254ec885af2a38d3e415c4ad154eb53616b9b09c3934ad167",
          "0x20ae46ea2b701d379bca7431dcd231d5a0538a7df6d25dfde9ccd7dd02518db0",
          "0x0a484d6f4b86578d49193e5c0248680b9614950d8e391f527df0f478ec51db0c",
          "0x06717f5b869d2656c2b35c01e28c56972b04bf97eca77613e5b8ca92bcf84f3e",
          "0x03783c713038e54892dd2a76fccf0119a329d633ac533e811e511817c4c4a350",
          "0x0f13bbfec1c7fa9b9412355719d79deb7376afde0da0e70e2cb31f752e4f9d34",
          "0x251adccce5317c9893770f1694a37887cfeb26f1faacf9bfff6caec93a6182a0",
          "0x0f825a06fc69017ca9e572c732e7aa8595be6f6caaa1fdc983b9af1284f63dbf",
          "0x0a3cf2fb30ad2c7358975d96ffb895de8fdcd61f74ebb24d3f1cd6d251eba933",
          "0x0251b2e061b12c56019ec04c54d7446c13bbd7df46d1fd9123d6f91b9bf77a42",
          "0x2951702dfa126f50ba6d0463be4ca34e12ec8de2818075fb043ca471bcc2d379",
          "0x182c9f08809a2953e6465ccd361b57ca28a529bb951a355643b7089eab715698",
          "0x0dea1f640e09dcd69fb450088cdb061df4630db6292f1d6085c11d5ae6b6f850",
          "0x157410ebe0e8a0c81ec70253bc16022ddabcce7070c509e78aa1bb6f49e17c6d",
          "0x117b09b34738397c6163ef647d60969d6f797cfe1f4b4a55b59490aa6ff558ab",
          "0x15737e5a5b31340f4aec578a73d86e4da61cbd4d1a54bb5fb9fac3678a762fe7",
          "0x196b0672513f279f5db200d1264c03c1ec5f0be000255a3d256edc3eb713f115",
          "0x0bbdce038ba792300cdb18e689d2e0678a095e69e10a3a56bb6f2b18c076f698",
          "0x08e4fb5e144e2d867c55ccb2cc02c666060be0ebc3f6faa98b40974a53dcdac6",
          "0x254cc53ae8aedc8323b546a40516f9ad27a2ac1afef9dae8bda7d56a2d6baa68",
          "0x1a2c40f1984dd2338de7281020ad784dfd936ca376a8bf3491ca61cb00287204",
          "0x0b02a14f5ed5fbe30f98b6bbee9ba25f3794994280c633b7dc03a3a9bf532100",
          "0x15228b44db9915e56aef3fd0e965f2bd0581663dcdc77e5b6a9869480744160e",
          "0x24ef8fa23231f34c98b1e19c0e2b2d2532ea1048f0a45c3ec605cca741766317",
          "0x25cd05a9267e21e2d0b57f22fc07ca332738a6e94fde2ec72f766b7bdd4566ac",
          "0x0ceea6b6d86dde8d6313f7d6e5199ed23a6636984c8bae0113adad98acf71272",
          "0x2263c0701b49306df1d77f6f1a14726d2b6ef465bde4b950492ea402f9014657",
          "0x2fb656f4df02841248f98a4630369337e443d1816e16a3c1f084c38f005ee10e",
          "0x0e6f9efeb418fa0b4016757e12e6414760bcd4598e641d894aa245c6f3a96619",
          "0x02496c73995124ae0044151bb698f5765f8272f388d7b512ea9436e2cdbb8314",
          "0x0df3c49bc65b7087becb1940994f1cdcebb16f4f21121a3f662679e361bd695f",
          "0x02343f6b80186e6caea2ad4df26c37628aaff7131761a180f7ae28b9fbb4b312",
          "0x276b8652e6133ec164810dafbaa40ce8fc3a30f78266d8e7c61b2fb0be8546e7",
          "0x2bf09a235c89febe7e56f002df7b004214bf00da1194018467909ead95ea85fd",
          "0x1ef9064c20f83e8c7581b609ac572bdcf4b6e1fb368cabc0dbff08ad95b73e73",
          "0x210b418e297eee3da4e80b3c937e1906f5b0f55dac023e27646bc1dcb8cf8e83",
          "0x2ca9e6ee5998c2ad06753624075de0771a7d019e89a6d6f76aff5993665beebd",
          "0x174ae2a5db32dca4d56226575f1e5c4fb0ffea7ee7764b1f51ddc7f5256c86a0",
          "0x1862319cee8de3ee4d638995f693f324546a5235d22952cdef52040d8bbd9025",
          "0x1221906c99798cdeb66c50f140b8b579e032128cce09179bb263390ecaf9cd49",
          "0x084dd25a4d141a723b29c69cde8e0bbb53d031926fb0d14d09137e3f8a122f1f",
          "0x29341ad04e73a6e69d3ac654d4450a386ed2c7947b01769ed324d6e331381411",
          "0x1aab0dc965161f77eef8d0fb4e72e46bfdf6e3d718eac4e5cea176339993dc08",
          "0x1852c126862b742ffe3e568fe27ace0b675fd5df36155a66099985c700d26984",
          "0x026eabee5c1a5c1b0fbe224177ac7a16e8f0d7b48c4efb62eed96a931202f0c4",
          "0x268b607a75498aa86a1eb65db5fa72a54b41c3e8ed9ca5a707d76113bcdaa492",
          "0x10a5051f064fedc0bfc0ec7b6be56addf94d1077ddbf456a180f3a9bd5029beb",
          "0x2c27938ce4e1e0f98d5e53359bceca5a9c22066cb3dd0f765471dd85ff641214",
          "0x060390a2034599638ed0dbc2903cecdf490f1c20d605f62b7f95bafbd367a3ff",
          "0x2109e7dc4aaf6cb2a13ff62bc3cbd0ebcd3ebdf022638f5e480d010beffec7cb",
          "0x0106959e10ce6819bdaf48cd5c19432d35ac8a167282b44cb0a6703eebe3ed2c",
          "0x276acf8bce26b9321591bc588392605b50df7f766be90c8317a19ee93c8dcb40",
          "0x2625cb1be09ff63c5e0340798d10b774c04321d22340e5ee8d2cc4aea3dc924b",
          "0x175223b56bbc74a46feb991a4fc55f02fad1ac9bafc75c76ca3db3a69ddcff22",
          "0x22cd6e17bd1426b13e742213606f1558d5619bae25fec69be0df6c31ea6b9970",
          "0x033307917f2f058ae6295611e36036aabdb91a0fb9f3a4bad3e6afdf283b1836",
          "0x0c74e27d536a6274a8ab91df7afb9d4ebf944c68157c4135a81993632ba4114b",
          "0x11b2212a08cb877ccb3b4a5639ce7825ef74875fb213f0761369ca5d87a9a809",
          "0x2c8c8d42080e2e9615d4c8dc0f20c3c3005dceb1697d9623ebceeb638ba6eef8",
          "0x0d61124d06cd75baa08d463b9a3a3a1cd1fa3bf6ca508399111e206dc19f7be5",
          "0x18a8cce9e7aa6df3d5eb35406b0cd46b87e4b08f8fdc991e91fb5924a07340c0",
          "0x01453226c75742b840fb71f151e3e5346648b9a07fc10aac31485d7c0f071a80",
          "0x0eb05f52067935d0b5517addb97ad9134f66b921c80fbe68548e0c08cfb8e60d",
          "0x17883a0fafa37d03fbe3da640fdcdf02fea822bcf612d7e82e0217d38db4020a",
          "0x07516cbb3f67dbbc050bd2ec21b18bb9d0ea9971770595a85c4863633b0e19c7",
          "0x1f86ef9471443b26a59da67e1c2a223e457baeeaff2ae9f0090c550c30bfe2d3",
          "0x0b84ec6355cbfb43ab69709d4fed906685f02613d9b48612f38cde33c69e9f03",
          "0x1ac016b40d30d26723c5bdb4e9d2fc71a1b9ef8065cd08ccef66ca98ce789730",
          "0x10b2fa89de4545606176a004568cea6c3381be9612e83815467cc4bfaeb585f1",
          "0x00bf5674a5ea1ce6fd4cb75ce7f26710e510639b34354e53ca2e6631b404d5e8",
          "0x2fe1439993bd33783ba21c5ec1f28dab97147a3e8664866dd04668e04c0137b8",
          "0x2f403be7d38ca7336768a3a9c7f656692853628f4378a74a52df4896fdcc4034",
          "0x0e1c171baa0ba3e825d242d1d70454b833c3e23fe89e7e223d48decd8817db94",
          "0x172fc861c822a0459d27e0783fc603409f835913f73b71d51ff31a62f6e4fb87",
          "0x1bb9e2454a33c3c08cbe31dd75b33d9d6642cd9b0a978c0251f5b91f0823523c",
          "0x29293f8422d4f96e3dc694f4d99846ccd6cd5b4a78662625efc72034308d4c3a",
          "0x29b378f2446a9a31f37d475c830690532994edb64baa43794e13f1d9c6949d13",
          "0x018a82c74bad8aac7b761794760e090acf55a8f95556f2aacfc20fd98c19616e",
          "0x2c1fc04ded87e37d9f1c639ced48dd8c9e46618cf49218637db54755921b1644",
          "0x29ea0e1e015e5caeb3ff1ce6d2772502e7778bcfa3dc0377cad7d5efe674b2be",
          "0x2a1753c6a4c7c43716ce3371f140a65903d228d5939dea928ec37968610f3349",
          "0x02d94aa3bb5498d0d77ef1efc5950519b1029350d4746394aa68e8526c09e1df",
          "0x08f269084ee637620a11780eabd8e8f96c2b04b8db6027ee88a7be850485dbf0",
          "0x03abf553fb5a4b9d5093d3b5f898a111a4261c2419f3e055060dfb45d82e7db2",
          "0x1b9d84d189c5a22bc9be2926623361fc6be7c714d079536427fc7a70bfbcbbb0",
          "0x23afc200414f23e7496b4046294db690a60bcf5cb72c41a61ec7351365c885c1",
          "0x26a5ce6ea63bfd9e6e1a37318938d4dda0dcd5fe9d6c2acf1abdd27ce1453799",
          "0x227fc0412f71fbe4902252237859f0b8a694990316918ad670c3454ef255f9ce",
          "0x0c6b448a7deae48afbfcf34cb758d847568f75d7249dea4da09a90f96c672bec",
          "0x218c92e39e62dfc119c4cb2ded9512dc217a9907a9a8b0edb96a275169f8e9d9",
          "0x106bf92a017c308f0f726df3d0515aa6feec1c18020c380333cf76c25016bba5",
          "0x1f283fea17244f043b7c35ea1e71931649cf7000692546ac543a65b18ca3adaa",
          "0x1fc5f58e5a06e1c70ebf3fd2a2c8dffe7bdf2c2c179b817fc1f41d1a26ee7dae",
          "0x22d0d77f0ae4cd9396cfcd8a27a246303cec70fedd54beef6dd86c91938fd560",
          "0x1ce511212d8688537a5e039957276e9935b3e8d5bd47045c6d5835108eec5f0d",
          "0x1c83ca5df6ac477ae74236c49f9309ddf52a4290f9c7c1d3092c113012d1c3f6",
          "0x2e72da0e1d1d1cacc95f8a913d87a10688af0ad11294b350cee6d128a97442ee",
          "0x0455ee8e7552be76b8e7c2597d97871d6102b49eb2cf1ddb6f681b7e05b0d0fc",
          "0x107863daf4cac318dd06ab14f132159794902e3b8da171b8848d3eda04e6c449",
          "0x0132abaf80e33ac48982da9d5d2fe91191f17f1910fbdc06731717b6bc63a9d8",
          "0x134e4567b290ed94c47b163fa304ac8d14f00f9e26375f6299a846770f4aac21",
          "0x0e6c1008a6d6cf304a1dd9e6194a360c1e9aa6d765a2e5328a1be2b5235164fb",
          "0x2f8dbc0f86cd3308a3d598a9343d638a3c2f56e9736e91f0f77d508bfd3828a2",
          "0x1eeda9a9c6d8a03c3cd9efd1bea7e46840d6c70d7fa82e085bae67347e5da7d1",
          "0x1e2bdca3589d22bc09315622837feb89557205a87714cd8011fb26dba1ae0fc4",
          "0x1feb959112175ba6f2abd9d6051f3aff32a9c4da459fc5f3baa166b7e01204a5",
          "0x1b6a4bf2fb32031b9837654b1fba8aca04b6472a91d05f96320bb5bdd3add66f",
          "0x0bc2076260db797f04ef2fa60c6cf5d014d897d3202be009fc5d8ea60dc18cbc",
          "0x039a5ff324caa9dcd65b8c44bdd1d423b6c02e4050ad8ae931ade6dbb2273cc5",
          "0x1e50c1f7a5bd8a96614ea267e0c22039cb4708670638b16e4c4e6b4ba088ff35",
          "0x24315140db1e03d34a9e890d85fb3786861adf648212141be6f031edd51b8c0a",
          "0x012cb6f35a18d9485c72a073c4f9037dd664d98d011e892bfa06df8bea2bb5dd",
          "0x149a528e7303119ce066de9da4177803d774e3f1b2c6dabe9edffb3951481615",
          "0x00990738ffecc6f8dc0e6b5269bd1dde74c6f6afd47779a119d8c963d5b65d33",
          "0x15b319e4f51ac8931ede6542ff983cb2ed3bf30772e681bade4cbd64659fc741",
          "0x1553343f95b1ff226a6d8532af3e489d305a08e8d5c532787d351a5c30b426f0",
          "0x124d40c154d4454d10e254fce373986e8a2ca1b43dd221b55a8fb8d19c5a2314",
          "0x08632672fa4236aca43f4dfea0508cb6d3895dbfef58c5f80f65ea0f48c17a03",
          "0x18ed4202e081efeb7107021aecb706f76f7466e5e36101fd92674c690bda36a9",
          "0x22b62d63e4daa7c6674dc97f43d7ec63fa9cfe047ead601eba36fd375d840091",
          "0x1f76ba188448c2dc50cfe2ab65caa6462866c5e31bca72d12cd7dc1be7ec16d5",
          "0x259b4968f9e4c3288590bb521b2bef5f3bb1b30a728acd45627eba45d73260dd",
          "0x1a1af2418b1ecd4ebad24c5a54adccd009072a2b7edbac04a0803870fcdf21d1",
          "0x13c488efb576d98b2f58c265a0d76d450c74c0105d225a6b111808cfcf13e8f7",
          "0x2e0278933d94b8434c52a364e5aa39d4c02e268295819bb0a4c999b15fe36beb",
          "0x26fc6a0f560e5781202e95e5866e679ea3aa4a76cd8bd4fe67550bb4e6c1db59",
          "0x2d7ce0354e6a457ed5d3621afb91732d02e5c99248786be8ba0c51da68fe9488",
          "0x2de1db6dab7e00b81838596cce66e8bb0aa26989a69386ce5061560f2693cfd7",
          "0x2e306809073d4a00babe836e6fe48eea8e4fa13b9932c928641fabad4944f587",
          "0x21b9bc5ba7bde0787a20a8aa9ef9a17d56ae2afc1d7bd7a2ada77506d16b66f7",
          "0x037e12238029fbbd0ef48a32577480a4d9f663ae39a0e3b6c6ad0f8c3914c711",
          "0x062340efa1a3061910fec854ff5fa9037ddd749d9ffbd5a6280e9498bb7b9e9c",
          "0x28e2ec6752d07e64574e4e92409b417686f725127f1564d1646c4ff44beb9dec",
          "0x1081db39ef41961aac8cfdafb8c4785a847ca3348a9b6eaf5a95e0ff4f3c4541",
          "0x0ac03c48add6876ea8b8475ce16d306f80aea6229d08b3c986662fbbb7a22370",
          "0x09941366c57343c57df860782d53fe8adc2a75da2d0f174364a055aa7ea07d8e",
          "0x0dc938da60ab9182c7121c8aa04c1d955c1f729b7ea6bbd8c37ba58b74bb4dce",
          "0x07426bd12d4769e174840d4a3a64b40541e85ed86dd21ff5d71be7d7eba930eb",
          "0x2ca34511539337cf05471caa3ac6604ef0705b3d2e4874db17877f6a3a2d666b",
          "0x23db1c118022fca90dfc9a2abf1186aac09c22372b5a6814835458d33c1833a9",
          "0x282b59962607ed3c33a9f9a36899a24920768e679c43b319c781acc020c68558",
          "0x1cec719a4e8fdb8383d544623cfb2ecf5c087ade03a12cc202060ddf23baa05e",
          "0x279d1490e81ceeb73bcce66e0a6dd98443b711ab1317a31ea2c17718c534ea41",
          "0x168da84ebb303fa935e70e85321b10b67607392561e6ffba3364f888d2a715a5",
          "0x164c7be1367b220daa33b5f8f637e9200c43c9223fd71c41fb9830287caf3502",
          "0x1c09e997ba2bd1625852c50e1d6abebb6ec6c61b20d1cc91b015084942162bcf",
          "0x2ec385a2ef59f594167112b1491d5877520634bb30d00dc682d089ee458336c5",
          "0x0cfa9efe4507963806d38e2464287368238b2f90e13ae6e520ec5f1e5da1ae83",
          "0x22f8fee0b3132a953bb0f4d4acc621b5a534403d922f9bf5a22e512cc0c103b9",
          "0x14473dd3650a7bf140743b43c5832193823e2506c60db669d71c63fc7cbb42be",
          "0x16f91395a42f68a912148920e5b9c30b536e84f15ca7b509e115e33a08df45c6",
          "0x0d9f494ee675c250cbdff49cbd786036d899117513b160c0271c8ba6faf30da4",
          "0x0bf36d4c6fff4101d84dd07cf6d0a9c9e5ab346d5f14c9185af3db3e13d697fa",
          "0x23452880a7cb59d393e5980266f1e752c686b57a87f041f75ef1318932577905",
          "0x305f2a14df1590baa4d62da4c168423625e3e721f20c0c21a0fb45ceca2f57f6",
          "0x1947f0175a8a9f3be490f60388486781533ac0bff5b8730a08b435f8a3407acd",
          "0x2de417a960b566abcf86d9abf49ad41144c3b6110deb4f47ea362257345e748b",
          "0x13b887c77592f15dae0d20fa25330e19201d5572df244b98dc2b03bc0683bea3",
          "0x097b35dd0b26e46805e16fd0490ce0560916e49ef1ebca21dabb4abf2c445370",
          "0x237a037ad96a360aed5937d3cce38ed91e58917b143f17233bc2d75456dd4151",
          "0x18cdc0365a8dfabcfb0494270af4822c29a6d9124e8c190a9c0b4826774adb46",
          "0x163428bf966085965901613a1cded9f28d62a74d001e6684bc3f6a47a8b3bf6b",
          "0x1dae0d15fa1822a5e59b940d81b3af27a5bd3f7dd508167ea6065b6d49c332df",
          "0x02add9c74cf22d1e4927fac6754b5cbcc172d4adc75ac1fec05ff8fca0d977dd",
          "0x1edb562e5b4376324a0b647b90690fe3364078dc212de0ad36f5fb26d14f67df",
          "0x301dda97e290a7a01ec100e59b59d78fe4021973af1d9e7d101231ed8fe9a1f7",
          "0x170a115e7fb0e76a4edb05ac080dd24ddb5c27c0c94b3b36ef5e6ec54eb98da1",
          "0x2976381557759f24da99faee2d6c5059bee939a66fb321b9fb2a609e4d47e9f4",
          "0x0858c7c6f9fec77cc7b6c2a5df2dd6312140713f97cc7c8503b4d7c6c81effa6",
          "0x12557c612c0f7718ec112701d8057a1dc301ccc30b2c8475a46bcad3514d39a6",
          "0x1ab063ffdffa216a5bce2900f37d819f2d75e6f00c67ce024ba3f832de64dcb6",
          "0x28493d04672068c6a6e94f79cb1af1d4152b823546363589499c0a141bd2a580",
          "0x023ef9e5d4688380ddf2c16c0d08a831237ee58775797c67d95c6e0d8d8af345",
          "0x1093325100722f8836caf30bee53c0ef14eb18410bf915570b327ffd9464a5c1",
          "0x1705479cf3bdbbaf78d4f103d38eb47413c9335478003810893f35259dde8d55",
          "0x00896c2b79cfdda5eb7f6f9ede3ab477ceee2b38b068174f15a3b37bb8b348e6",
          "0x149f13bc3e4e2b0515b378a2747dfba90f7d5c7731e59e9f36bde3f04eb50cb2",
          "0x2e14222448be50c068ecfebf70944b593540c7295ca0e47f2bb7f63199b8712e",
          "0x1e22c0396024ba3f6db181ac92b229a5187187033b138fb27a1cf7f6d87050d3",
          "0x2c5a1e453406fcda5d58614353f0a29842fb54af88ec4b73f7778563e05e07c6",
          "0x2d08dae6f1fb7e0250a660e71b1cd31853c227b188d87559216af1c465d8abee",
          "0x215533a77776226664118a8081d87e212a1250766139ea38c769f93ca2b4d7b3",
          "0x1cbbbb26f991a721c7bdf835ec9d1ee0c074092fcdbf0079e4df3ac287292edd",
          "0x08f57bdc3c7c95681f005500427ad5399259f69104c22206aec2f99122924e8e",
          "0x1b45938c7b84f0176f33520321500d1297cf97aa6699664fdb8ccd75ed39912e",
          "0x2aeb209044868ca84487b7916e6b4033ee6cbef726e269d0e916ac2cfd3fbade",
          "0x27635bd2ae7e0cacaff0b836596607a792403dba10ac3706c9e11977403a3eb2",
          "0x22e593b7a67935027938149bf16fce07fe9e726055fc0cdd07e7eaa17fe57301",
          "0x1795962bb5100236a183de49169d6b83a427edebd23711b89694da83cbd087c7",
          "0x0077fc8d7cd9adbc283c25321bf37598cdf28827ed35707cf4887fce4707c437",
          "0x0ae5b494d166f6a32442d1d0bd59b65ecb7ad8f6571b77486a45ecd827dd1280",
          "0x2924229b6d648184fe63719ada7041e69272cdfe895455d77f01634a8b892c87",
          "0x051e840903ddabdbf22103674933685142981c0852a6ca6af0c8d15b068716d5",
          "0x0fc508b7e620bb6c47a85971bfcbe28df62619c5309685d0a0a6adf3c8bf2f84",
          "0x19f7621bbd659b27d189bb32010b95fc2bd877392e2b56afb558ac5fc0f0f22c",
          "0x303e98ee35bfcad292680a7956e0b932f7c572c0a131adec5006d8f298b721bb",
          "0x1a78253e57f825b0cbc742d87923b27c51f4a531d1235a8a901d997e31b2ea07",
          "0x15e220939ba64b3a3ab29debf3b0884a4c4385a74d845e20e3449e7fa2f39320",
          "0x160486b6e621dfa0e90123a4e43fd69221ec1b0ec73d196476b504bccd290b94",
          "0x2beeb42404db8ab5e279624bacdb614b21b5ae386f2c2a34a798feca76311006",
          "0x24b407500416ffb0459b1db9740670bdb8be8adbb4fd5af8fe9c4b5ec021f0e1",
          "0x07f5fdae988285c49bcffff23fc1123baeb103bffc97df6839a0c3506b7c042b",
          "0x2ce9b5a08decce4b853e67d28af6eb4c755c7bee8190d7806af042759a399503",
          "0x1daadc911c3ec3b8e5f42cb123017f1fbf16e4aa2e32de94b018128845bfd022",
          "0x1ff80b169617b7ee5aaefbee67aa64bd64dd14ed8edae148f99a16e3f2205651",
          "0x2aff68cd38d188b8ab85c008f300c50882498b5068d3cd3b82b5ae023bfc6ee9",
          "0x114d0b3f54f14de45cc4db5a1feb1c4750ea0247d8f24e8f6f472d92eb7086df",
          "0x12b607578c2d349b69e0f756850dcc21258f85ae8d8caa8a3a021cf8d02abb9c",
          "0x14c692ebcd07fcef55092bbe950589f47dfec7ec4f3a42944b0442690795a054",
          "0x2229dbdfb92ae7eb8344eb56d746d07067637d75ffa439edb3d75a8b08199f20",
          "0x16f4648ac47c197fc572f58351e4b00773ad9a2bcad04ac0f873a556b6ecf6be",
          "0x12d90d55c8d3ec184dd04f5c6aeb639bea70a7e3d013fcb17437eba662122ff6",
          "0x04e2c49756b8b5ac26af9d939411caf87f15626ec4436deebc7dc0749045216f",
          "0x21917d723a33db266b07f81948955c45dd507857e9e5981831d35c56dbd0bb36",
          "0x0d13b46aa1b41168f81b4d236512268c23e7bfc4108948b5e9f3a5f5ee0c2661",
          "0x17bd731275d602d17ca1b8ec47cb12df1a4bcbb9e3b02a26f86a08b2eef1fb70",
          "0x0240ee601a6823ec698a4bc774e6dafc2f3d1cec2c5c89f5bd13629bdc692745",
          "0x2663ff9d0eaa6e910593d11022d3c77b877a3bed8d007f6fc207a8ad75bf252c",
          "0x02c45b53fa72d7a0d7a244ab3ab0b41fc40e9cc38cbbe294e8c84a72c7c3fbe7",
          "0x10bb8a7531ab05d22872880f96834d23a31937623df3fd2953885abddd1222b7",
          "0x2222950c8a1ccc1c2122a353d1482744d42e61254dd653bd25ae69d2ba79b031",
          "0x2c3d3eb720537d2dde7bfb8ef6265d26c9d6d918e37f2e97030fbd6b04457db4",
          "0x0539a696e15198169314296de56dc874312e19e5b3518ef5d50a72cf98a30895",
          "0x25e2a5fe1f155a2eeeaf50d01664f96f7d6772b108ac5c4cbfa5ef5a1fcd5ad1",
          "0x2f5d3e87df6904abd454efca9cc30f154164220c9e3fef27e1812e0870b90fc5",
          "0x0dee20e4731c0e7542e4e543e8be6c2ede71d6eaa821596e4fc9e68e89dc300e",
          "0x061442c13b9d1fb339615cd8afc0bc9e11be741cbfcbd2b3a92194034e9d2e54",
          "0x23a56185e12d6230a0ebaf7cd4a01cd18410d3d2ca991f79af5716fe22993123",
          "0x03344b7b9adb15a3b7c3d64fe1eec35342202ee3c4a36db2d49e81e5174235bc",
          "0x284b751ed61d484ba2b5940a1a1ee1ec536d392b113d06db4995b08ab661e675",
          "0x1701ad26a42de77f4d58a4c8191f9d4730309c5f4bcd0c6dc3a0aab396340820",
          "0x27cadda519a8370108d7aa6e9102f6b29e8fa2386cc0296593f2f63449ff3d4b",
          "0x2626d61cb110bb03b32712d59f0e3b1b2f5b9059eb994807b267e4ad261ed696",
          "0x1cf3330897c54f25f15f5e8b8da57bed0865f3fa841ec48441a9f0457915138e",
          "0x01b5bcce9d699e55a490d3d86e8c92c83a7256a7feb9fd8af6c84d68e148f64e",
          "0x2a175105d15ba3fecf5bcb2746b3c81fc8ca468d1d4aa999fbbaa8d8112026ef",
          "0x20a2382295eca0a61c888cef81115ae0637d7ec792d30eca6a0f298a77f9b26b",
          "0x051549bb9adbce26e4b218b29ca79e221cb691c9ab5b2786239ef8126bad2e51",
          "0x081ca5349e64d60bca080bfc534c8b30b18bea4309cf02f44c71185fe688e079",
          "0x285a400d61a5cbd6ca7baa7c3c9aca5503b17fd702e00420bce7332382c0b82d",
          "0x04e1bf8c955bc3c8708262e3ff148bea268adb662ac2459479e6af2e73440b21",
          "0x0bbe19ac4f5c67e9eec32c9e6b7dd7bc8059c91f501b2f26a92b30bc268b0b4b",
          "0x2724ac58e1ea4df19e6644b8e7b7665d9248d34ffbbf4c4ca8934c608d2e8f6a",
          "0x0446788d95426afea830d1a6ca8d2d085bfb4330cb2514dffd60a9ab70fff709",
          "0x0e1ecf26c286c86abd910c2b37ac40bfc0e65cb2914269a6a6aaec5cdff5758f",
          "0x29a267dc9f3d12d601a849148a2449103f25713083b1611c386d7d0c05ea4ba3",
          "0x1dc34a60e783b5daf42125586ea2a5b49dc2cbeb9d2b90ba881c34ceb99d2d3b",
          "0x2b9fce58534bf4a486c3220f0ff9026f578ca9c435d8321024d10eec82be4e5b",
          "0x2fd9c97f01054fe61ca5e07e3681c1dd9a9d1f8ba630dd24ca5a344c3d666d19",
          "0x004e6a7146c2ac015037f0a82c1bc746bfb469cec9fee37f1b708239f433e647",
          "0x0f5beba2020afde73013b7efe0c1384762db8612dae058d0f849c7383c07943c",
          "0x1c5e1e6ef1be1aaf4b6e0d32d590dc5b249e1b1bbcf7d05d3e60c63e0a18667e",
          "0x095675c6e1e8f6daa8dd42060883a7e9795f1bf881095e98497d33fd5c8cfa79",
          "0x060093cc9e1f54f7bba74af718e19a10f033198c22d21f3ee80271258099dccc",
          "0x2c44a35ca8e24a9f5093ce1cb92c8d0a49c5337cc3601c44e4f12e044ace0dc1",
          "0x03e89623477c5f1365bba16ecb1a8a5a70e3d5c83d50f30715a4074343e68f68",
          "0x1925fd586e678334d1618a7563499f6b4d001cbf3afb202328435f2d49cf734a",
          "0x1a187d62deb639b820168e8b725a76c96e556a6e90304a1aca7f1971057719bb",
          "0x17238dde447d9bc6cab663957ff54c74b47d53bad425dc3bc11482ad4484aa0e",
          "0x2d7a0593a56bd337e7eae8a984181a77465891cb699d069efbbce87113570291",
          "0x278387c4eeee6ace12f06531a312b777895ecb43495bf90a740b5ff258a733af",
          "0x181ae209709983bd903f41b57eeea056849f4a86d3d79e12892a45250e01f478",
          "0x2867934ebe66c335663b038c9622b41cb6bf88402c049e91801d416d73441a68",
          "0x01651870d1a0d7d05a218d811e464fc4767e798061515e43be016c6672b4db55",
          "0x0f17095f8a2b21edd50126d275134f29cfb911a7846d5cf2da795be0c1a70024",
          "0x0f29ea40097b34f39d01cd889e6319731da77302171713e2990e838edcb51ce8",
          "0x034503418f27ccfbdc0ee2529112d5768087367386315b530a2d9a052b608901",
          "0x2da658aeea1db7b2066cc982a3a4a62fc22eea96a956b8c8d4f6b9f169bf34f6",
          "0x099891e8f2205b9edb734fb0bc6c8e14d4cf2eb7850a5496ffb44dacfbee6877",
          "0x22b28527a9e27d65b7d9d425f4b2f4d57bcdc390089d3ab210cf46373565b251",
          "0x24ac41c21e032f1205f48938a1ba892716ae8d4c7230864b86f3b75576d249fa",
          "0x0efde17c56189b5dc8dd3fc9d4796eefc7dd52347c0dd3ad06538c2cbccd8601",
          "0x01f321a1be55e4b41c5d5a9985d450f6c23a2db580cde1fd17df1ea16f393998",
          "0x1284635e8aa17e34bab161fc58a3e85ec269123593797a44622f6bc5b14a028a",
          "0x18403a5edf30cb8680f7eb86264aa0efc6422ea6f34efe55f9783bb6bccaaf5c",
          "0x29ad7c5e7c5ee93c961d4b670c2998047174bbfa7edcfe28b2b4d19f3c95d995",
          "0x2685b8dec7109c008c4eb559aef8b289648738087770d65a8a4f61d933309ce1",
          "0x06d1a1bca7522d697a93b448ac11d95972e2737c9f6da9789408ef4a701c03e0",
          "0x159f8629446b261b17f2bba98679cd215ff18a8e22a0addadcaa084ca728be2c",
          "0x2100c1605b40e1644c527571d1f2a268d17a89c1b0274fde3c1856768e134361",
          "0x14cd583763c5aaa5965a6cd810d3aa708ea1b01e865ad84926b6dd8a0c297f3a",
          "0x2f9afdf2575f844497ccf724cdc060155b29e2f452c95006bfe54d4402068272",
          "0x0b6ce3f06fc23b61e6949086a27891cb2132730d5d976c4d036c7e5aa960ecd2",
          "0x2096a4ace19cc7c0d94c97584f8bd1e1aa0f38a05ba444b158c0a4f33def65fa",
          "0x1742909d20f9f17efb5c6ce8b23f6b85f7db0e01111ad80e910da7387926bec3",
          "0x133c486c3be9d399176c89777872f6f65cc4bfa41a00b11a2b07db79541a4d9d",
          "0x060b5bc9b94f45495d6e3fad5ef7c20c1d304c3d0b5dbfe930c8ae22233fc358",
          "0x16c0f928676951faebb1a97f70dd86bb2439c4fadeb26028d69f33107949dcac",
          "0x0457f42dbda7cb38de3369bad13b68321762477158c3d9b2edc65731d2b0c43e",
          "0x05bc53f4bf388b5f477d5bf8c5de1e7f38ef0f94c775d737dfbcfe40a7fcca47",
          "0x20d057e30e2563d7dbc5d2641226c6f6000bcb549e7dcdb9b7df819ffd10bcdb",
          "0x16f0574e7c13b41c5ececc36f9590719c31f29435a736c33ad9ac1afb9287583",
          "0x1b9629d5678b18eca5f9c5244adbc287bf1b1a89468e549d1765835db5fdce7e",
          "0x27d80f156488fd903d07d2c64460dd644d47db5973d0c736d914e3fa60fdbb1e",
          "0x21197bb3fd8b66d8735019cdd7911cfceaba63b49dcd07910e48c993fe79d950",
          "0x28f5f49728da96532a66a2d377eb299de91cc1d78701d44a0a5a5cc67ddebf9e",
          "0x165bbce0d62d6841124276f53cb28883ac5e7ecc12d12514e2feb2e19b7913f5",
          "0x14937807a2d9d72d2234699c5f3b12f1b72e282b216fae910db56f68cada4bf7",
          "0x07142fc4901f0e214ec4c74f1685c35b0485516b7b827d75ea1b801e78f0445d",
          "0x2714d6a77ac0ac766c4da2cf468c59fcc7be39c93129b9d927c2abd6843bba53",
          "0x1d3110379d97c5ca70da7b048a8bc859587af977b5fbb83eaf0f951b1db2cc69",
          "0x122f9b480060c35e6b1b0bb0212291b0adbe2719c660eab107abd5e632e2b96e",
          "0x02815f76f3eeca94b8f2c42982cf182c937af5efbc802621c4ad9087603e5b5b",
          "0x228acef677466bbce8160bd59c938c5d3400c24a10d1a3cf145519ce1397904b",
          "0x2f6f0800c73e0b58c4e31639c1d98e57aa1d7b38f24198ddab4d3bdad8b1b1d2",
          "0x12dcb00b96e9729e3e440eeab56d23b49592c8d306826ee18efc8f7fb11fcd3d",
          "0x14c934fddb9e93c1b539ff3c72692317d0c365fd7a727f2b0d40e0442ee6cd82",
          "0x1f5b48fbb10cea0ef59ad9b12483ed7be5c601513b0ccce1cda3a80c45a80c62",
          "0x0768ab8aa5cd040e5ee5de5261110d22bbbd30c0b5d9ca3d2b075ab0b0de8f38",
          "0x2b84fe02c304f24fadc1edc0691f5bffb0501f7be8a381d099a67a9b7a870347",
          "0x1827d1191b15dcf51a200bd968f5ca9cd1f96c3fd79edd645406ca0cad18251c",
          "0x016950a06b92b5485ef759d0a43945c48231b0ffde5b2281ef87eca0180bfadd",
          "0x211297da4d70cf7d43f3ccd70a88c15224cf043f6faea68a74d6fe282a831607",
          "0x0a181217d1315fc3fecf5e801814b4060a742f8186893db95f39ff21721e4d85",
          "0x286058ed6304f12c9d7b6053e6d2279d34a0c187f029810854c809486d834444",
          "0x2cd0a562132678f5f840cda24da4d3060639841f53c603b1a7ad459f81ddf9a9",
          "0x21ce26e8e7c83045d9e79428cd905ad489dfbe75cac1fe58540867c86ef30135",
          "0x014addc67a9e923ff890ed279b6a29656b1145ee2a213e3c067578c17758c517",
          "0x0afab4df7911d1154f9b5b9f9d44d08c2ce948d0e92a06e3a466c1293618db80",
          "0x0756ddc46866ba28ae20299eac58c3d58d07c0c68f84fed9cbe306a0b9a00228",
          "0x15ea177d8bc1f254c3d290e72d8ebe6f9e5f672ec4fa5bb53bfeafbd30c41227",
          "0x12d41992accc7258671e1ea6167ebb3dc99fe6275c38f12fb7fcc994e3263025",
          "0x0570a07021e7f0c979ae47d42f9e3e371249eb2a583b7060822d834e689cf8ee",
          "0x21b6e9c4d6dc7798292e4900ac89f5ba6dddc3d27bbb50c45f7ef63f63e6d70a",
          "0x0bd7383dae8fd3f1af1696a4973bac5a34a01c54adc73f1aeffd5f31f01fc1f3",
          "0x11a866fd59e5ba1d90c39c5a4a415ec8303611f3450d52f0487aa7acc82dee9d",
          "0x2e330e0fb2955d8473ad9e1ba6233fdaf44fdd2fa188d4a4aed15c82979b33d0",
          "0x2ec61414765244f6b467c5f24e442c939c04c3811b99def64d52b1a4f17d9dab",
          "0x137a770838d8523704e776827dc372e55a90f20ba2dd51320c0ac783b023967b",
          "0x1d6ae5237bba6b6e32a89f30200200af5dcaf294019868e4e152b332765e0c86",
          "0x1f9037f9189a53ad5773c913e88ae7910fd020299ac394ee2e4d703b62fa69de",
          "0x2c6012259c33281c77d02c61bf2b4b3db3b33146557747746c9db1eabbb7cf7d",
          "0x1217df830ec5644575209a75abdc35fa606b271775f46edb7b7742b573d289eb",
          "0x1d39b721d48d3be9d3d5155c58c545485e71d003f19a9fc0c663fff57f8fcbd3",
          "0x144ef6b529a19c55c07e41d2859d3df72b0f756026d79f32eeb1dae57227c237",
          "0x2d266907d986d7e07303e2eb45b6620d01644cb8c381ea3d1738d7674728efd4",
          "0x1b31b63b9c97363652e64ce04b844efc6a63b122f164fd3d2f87d49d4fb0fe66",
          "0x1a8c452a31afdc62a25380d738c6cf4e5841c5620dab19410228094537ecf537",
          "0x0d9d810fc7da5931c7a4907976b7b77fb68ce7fa860435910ca346aaa8b2aca6",
          "0x15e7308841e82cb44ad00ba4aef9a4241004f8adf496819032375a10fecdc8a5",
          "0x2e17f718ae9f7897e72b481f0c779a84c41bfacedb13e09530a7d16fe355f765",
          "0x127e7ffc6ff8ba194c9422ed54f61b63e58c7ae6729280d1b6e1e881d4d02fa3",
          "0x0c730999ebdac150b6d5e7fa69d47f090863fab10d1949911a00156d328593f2",
          "0x111418254b9d16ef8d649c5a2fc4136ac5762191ef61f1ef46d35ef199f92a27",
          "0x00d0e3232f7be8a95699b9bd11508fe495e026daabb9efc935ee7c4b754bc846",
          "0x25130e977ec4f6beb4ae4dbf64f196f48d60f80bf80c8d5f228118383790c927",
          "0x0cbd22ca70300072163ec1b61ac95a45e959f6a6843d1f7a8fef6b5b290db4ca",
          "0x0c4e5c71b46e2663bc89392eb5775c7769c080551d2228d8103e545548b5812c",
          "0x0763b55731d105220bdbbed3e0f3d8dc921b4aba2d5bf2d5995317a39d43a3d1",
          "0x2e578b9c3527502c2cf248f9d25e724b252b1fea5d30b96840b142b066acf145",
          "0x2d7262bd89e73f64f7850e56ab934537f62cafaf511614bc8869875e33a69381",
          "0x233e5ef397661c73433fac490b72a375f31c6f6774dd69330033873c59a8db85",
          "0x2047881d542bbf974b9e9e9201453c82b5744730ee78d2fc226bf73dc724bfb8",
          "0x1392e09d8e3d6943778f5023ac577ed58573640dfa8cfb2261dee56f020cae02",
          "0x113ce5641e8c08401edbf8e40a58f7f198486c943d988b571265da3b80098b29",
          "0x06fe34aee96332c0dbaa756704f0acca6fd488b7a1a424bc50759ad66df3ecf6",
          "0x210eeda90df0688f37ee7f4db012fa7051daafd3d4e62a8a75aad73ca0c45808",
          "0x28f55311ca526e39e26e38e2065861f3cec1e628de46f4356441c8ecdb716178",
          "0x0fb3a80a4b528a8955142e642194ac4a64f5b345c86e0ccf70250016052d9532",
          "0x1f678a57a75775bbb3ca95f5dec0761bb71ab147df107fa75f43aaf930aea3a5",
          "0x073ee51a98aea4e9ce5ddef9961b599770e580dee5cb29161bf81c0aa74ba6c3",
          "0x1236c1a9259acec50a04f193506918990da1bcc9f23bafc774803adea417e9b6",
          "0x169ab9a5835557f518a17756db5575e9a8273112f54b1f63479d261aad5d780a",
          "0x223dc979f2833569c24130f59936a05daaa49b610c7af1df373c81ad41876f07",
          "0x2a7e07c42b264f8847508f7767fad20b7e85338a7cc7b8db9cf0615a614b2a7c",
          "0x2d374c9ec1482f4d7b0cf45b5f6ae5b09f9b4c5e0d3e428646822ffc583320b2",
          "0x17722a6c97af3611c31e2e9c8a7c1be2cf1b1e67920cc61925228bb6b1719fcc",
          "0x1bec21bd2b79bf0aab824d2c73439bf306979950789c762d3f246ef172665c6c",
          "0x1e4f5c4c15166b2b0d0f2e1243ce5e4d7df0e4086f1b6c13c24760c23b3d2b94",
          "0x1b266d6a03fe6a667e5bbbaed2407aca042fc65ff587a37459242e347da908ab",
          "0x0f82ebb4a3a2d9c061231d072974da7867464d45a092c369337d6f7f38f19d4f",
          "0x035f0f510df053ad98d957cd63f2c511acb8d63f8ee734d9b9cd9d3cda717c55",
          "0x239e2246410f90abaadc256d0ad649458d8a2f3a98b680bdc8648328706e59d0",
          "0x230a64e0e39531bab69e8378bec5ecd45dd04f7b91a264d4b852b17050a2fe7d",
          "0x201d93592e63dd8ed97eda0c1ef8f54ae33556e80ba51ec6c7d4ef5376da2669",
          "0x1bfe78c50d0b855aa69885e63537eecb984c18e2c9ffdf6f76a0d38cd8aa24a0",
          "0x3029708c7f3b5bafc5c0ddcd865d174e1b9ec7126ad730c124274c5627b8bfbe",
          "0x15a0692e27780cc154dcfb7bcca7d8c69d613ed71ac739e88ccad5311d419393",
          "0x158580885b4521fab1f59255bc74ac46dcbc6f67e4c5bbe3c0407f6e79f99663",
          "0x22e542709e136b18fda8d1c59e5df8a9efcf226296ce6b99f0c5a4c6d8c5bf53",
          "0x000984d184c20909b189b56d89e1fe31074b711b106813e31a430f9234845fc8",
          "0x260bb2c2f561af7b4bba3c23af14460e63fef91913779d6ab8780093af2e76c8",
          "0x0026e2ea372b49821ae56bbe19786ebf21c4326c188c47b70f47b2d120765cae",
          "0x0b6c4d9d36fac30339d96876a3040224baf38b59f96fd0aa02aea30ae1a2f4d5",
          "0x2cf5fc3d75ef42b5b3743bfabc21490bab9a8bd9d38286f8d6ec65b3c13753f3",
          "0x0846aa6aa21f18c74000f044143fa266ff1e7be7bdf600be16ce4fdc40ff1e62",
          "0x002f8d0ec8cf06bdb3e4c638733894d5d0a95204d648fbceada053acd9d3ba40",
          "0x1ce8ff9b74b79c4cea0bcdd58063f744db9630f3bf5963f1cbdd959f61126f87",
          "0x017d79111e385452e615c442c6ef083333a8a9e08628bbe1e84f4dee795dc1cd",
          "0x27d064dfb09c51348c9692abe74e7db7d899b06d63af1036ab74953c08b3c55c",
          "0x146874a68df33461692546b88bc079d85961ea462f0c4817e5121d74e2bf2f53",
          "0x052b6352c27d080dcf5d1e50b8770c1bf6cfde559b24e7dfdd17d373e9a94852",
          "0x1e7438946d79cd191bef0f79ab4f9604669367572252eb82cb0f3b19d4691159",
          "0x04709da1736faef43d616d59fe1010c92e91e1410e5dd9ac376efc7386702426",
          "0x28381d4a02a8a55fb06bb696c5e7ec20b36362f885b753b1ddc517db813f62fc",
          "0x160ecf90b4e27a49d3f40b2cbe9f0a6ad7fba8256b9a52fb4cbfff1507a47113",
          "0x030e521d91a1e1f8836f39b27733745fdf96d0867bbfd6ccaabcc94735a4704b",
          "0x2b66af33183aa4e53cfb665216f86b458fd3e909d9a3b03758bad9e44657c43a",
          "0x1e8516b0a2276dcba92d8b88d6fd8f9b04d61ab367a21058ca5bc8a752aabb53",
          "0x2b2172b73311ff4eebdf6b89af516d2ae0b8ab75b8adf8044eb7e20d511826b8",
          "0x064c2e0636845a3b22912c8baa94c39e14e7df6bb6d52cb8914521bab14371e6",
          "0x1bd4f8967e443e8efe5a18601bfed7d2bd47b34c60dff0ac964d6a4eb059b417",
          "0x04efc234a1736354be10620eadb0fafbf030092e0f16f539eda958274d543430",
          "0x2f42fc1f05d90dbce413777f74a353c57e8e6632d30e28aaebde88b878df46db",
          "0x0a3fdc6b2d46b0047731f5994f193b35fd23e6d4d4906d0622be96f29d9b5369",
          "0x0a9a381a6f2be5b71450314f356fcceeff031aa46a27c92ceced2cebb547d960",
          "0x2bf2a0d3ac00be9e5bc060a39053d85f4515d3ecc6ee6d9925c557eb3ffa487a",
          "0x149cea4acc9d345af9baa0b0aa9dbb3a275341487b4809a972d4ca49fd02cfa0",
          "0x2ead343a42b0ea570e1b35af19c93b0c25f50f1503cf4a637dbb9bcb58a0bf21",
          "0x1c12759c6c33c9cbf6ad891adb1cc2ef432de342518651f8b1577394d7527edf",
          "0x1619230feafc8101f6bc79b2c7204eb8a8b083a38c0d4bae74b31fcd353d879b",
          "0x2bdc4bb87fececa61ace09b0abe8b6dd75cfaf7ba591f02eeb5635808ecdb46e",
          "0x1d833c7135d27610e6972fdf005780ae41f0f98e36b6251978b6bf95d7df6a3d",
          "0x1ff7a459526e796396fcca196dd04f81ba3401fec67b6b6d83422e987782009d",
          "0x2440fbb4876cf36a771ae13594f31b06f3ba1748ccb06f3a16a97f94d8d66b28",
          "0x10e5d84b11ab864879fed067da2804f75c9a75273911cded8bb551cff3ebb3e6",
          "0x2e56c1830fe663703064d0f77480bc78b4f1d17939629fea2e9e39284f3f6262",
          "0x0a099027ca6f5c10087a2f4b38caddb366b98cc4dd0ea74f08819e75029f46f5",
          "0x1a97468d8d9b841a57dec26dd4f17af8602de695fc539d284ee78ff852949904",
          "0x0394a6458349a524f4995c77b6b7f9ce6455a2162f1374383187a751a908358d",
          "0x1216cf8f079a098852635296432f576a48c6dcdefaac70bd63c0f86d79de9591",
          "0x21c53a9ee1d8f71099fd185abe9772623343b8ba65e3f969ab665cc58c0a6003",
          "0x0d00e1ec990ebd5225c709906332ec218459d452a34560c000a4141fe92a1275",
          "0x079036df6b30a36b4f6a52cc876b33ec8cc13beed3e49d996bc31130e9942fd9",
          "0x07316c90d57097c21407e647c1290a42d5766d43a8f324733420cabdacc16580",
          "0x2caa85f3b8132001bb0fcf4114d84dba8d6ac61c96a21f3195d74803857085b3",
          "0x1a5b32a122696df0430fce233abfe21fcd11dd0731f969f95f2e9243fdd98df5",
          "0x1d46a76334170cf0b58ba0cdd75b31f83b3ad2bc79f7c8c930a5eacb0ba02e1a",
          "0x0d99bf048437a3cc71ea6998f890a532ab3a12024e230e8536d8a8bef084e956",
          "0x1afc2f4c8ba126e304c61726fec22341f447302a246b922e339cd87bf2def560",
          "0x1c9f11e8631cd4664da9bcf45bdec1d92ba81407e71321c727b14c4c53ff491c",
          "0x199268e3ac14b60c2a29efe18ea87ec108721eb881f6a49e9d6ba1a1dd94d3e0",
          "0x22c335d47bf6718031e83de42d47ab805bdce03e3eacb2ee8a5dd88caf5d5657",
          "0x1160bf99f0f4ec07b8ef2d15be5a3a8d1cfa192e406bbef5ed8dd5fb75db41b9",
          "0x2254cd32fd4087b71387dac3554cfc9de00194f7472fa41de674d8ca01cbf08c",
          "0x1919751c378a82506fe30958a36bd6e75ec673bf25d693d98033602e73d647e5",
          "0x27916b3e4a0c89922381ac94cdf88b3a4e82a539fcf5c899a5120a63cb4f768e",
          "0x268d3ff9e18dc9c373616a6a5a1b81c93ec208dc043414557310c749b77985c8",
          "0x21286d51d350476f7b3a2ae3ec046c13d5c911173de41ac1dc9e59bbba669f2c",
          "0x20fbf8d6843bac844b6cb6324f7054344125db54d5600a06fc9b720f2229941d",
          "0x1a2fb57443a3a3d7030aab81b256c8b9a84da724036a003d435ebcaccc774f44",
          "0x21b13b9a4cb8e9712bbce32f178f59074a35a8cf0771061ca0764b6b190fa139",
          "0x2c7a11815a420038f71fd201baa6412ac292a63dd9f7d3090ba15573bba3c5d6",
          "0x18c9638094626db7e58bffd717b1287c8ace706823253bf6f91ca06a37f7fb35",
          "0x136fb4abc4e094fb4b5bff23de0d41bb4764481de793f828bf3d9f9df1aa1cc7",
          "0x03ec0f79bf7730bda188a011089b92d26afaa5bad67724d8e1932572c65796a8",
          "0x0629f306d8b1a0682c7794c32da95adaea0be483fe4f631c2b9dc250541257d0",
          "0x1f0854ee6861491721684270879df687a12c28a0a7935c0bac0972ea398410d6",
          "0x058928f7c7b8503a2585ac439ae4eda9310d87f95042402ffafe98ef48ea713c",
          "0x2fe5a4fac888cf8dfa9acfcee249f788e86c043441cd3623fb972ee519ace172",
          "0x29e954045cccab9612ff8402ad222c21dd5cd3b34d4156541d5024dc885b8d98",
          "0x251a3962ba0f3e9f8de881d104643c9c39272092312a2a771f11791e63957b20",
          "0x0eb04f89599cba100ee5bbc4704ec638d102c6701083c6afee8d26cdc64b101d",
          "0x2d2057ebb4878c47313300f8a161c6d6b3008c263e738ed1b77f6e2d2368b082",
          "0x0f537c7681eaad752061f5946a10f248f8afe02efaa724d97e763cc8c0971556",
          "0x1e40b9aa000d70d6ee680f23d34ba07ea043561b79e8b6c306fa7878232f1cfb",
          "0x1aa38f4a119fa9c3e3ff99d0ae54aa6cb1180c41d7585ef4e033678fac84b2f7",
          "0x05661c023cc8ffadc425af8edbc5a45a5daf64967bab03b91c6f2383a61949a9",
          "0x023c4d9d809b0d3afc1c27cb6b1dec663e9625fd44f1f1389cd1b29e2db150e0",
          "0x09fac0eb9231850de7965393a8bfd15ddcbbf26596278dc789b3e40703db42b6",
          "0x040b84ab00737103ed5ac312f5d44e27d4749cd191051bf8a6231bb4780e354d",
          "0x2e2eb4b8354572c267ce846c9eb223e3819628b26456d7244899e57d70dff93b",
          "0x198728ec996ad0953cf87bfeb8810be5c588ac10b738ccad7b1f8bad50c97e35",
          "0x2f8a8ee41d90aac2a91c1cc70772ed6f98340052516b3a54bd8df388870c5b24"
        ],
        [
          "0x2fb583762b37592c6c5a95eb1d06694b6c6f9dc4f1ad4862dd8f5e67cb7a3f5c",
          "0x12e9f46cd8231bb03d4028bf7a11d7c0e331dc05c088e6dc3d1d001da58b85a5",
          "0x1275cd70326f52f816a7c53fe62e323efe61a5b8d3747f6dec5837a825873afc",
          "0x06e7d165b57b0299d23e750a75ea2e12c9c7a16954c40a4d10904a61e8773541",
          "0x2f67f23a93ef1e215a4add2ecb41bef4b9d85ef9135065d992800e34fa98108b",
          "0x169eb9952e2a8623ef38de57e15e242df388019489e01b7c84fa839d864dcd1a",
          "0x0f4cd404b4024ca13a513ba3156d4de9cb3aa240c683b3e0eb7253bc98c8b5f6",
          "0x1c486bfae3ab032ff519e8dca6dc41ea060b0ef9083127bd7c2c4e089fd45aca",
          "0x102e745864251ce940c67b1e2f4bc4d27fd3851571ce6813baac665e8cc0c79d",
          "0x1e6a6d620433d22293044ffe36a5f2a729c129cce3eeb0bdafdcd0d52bc3bab5",
          "0x08f3abf97ad8d01cfd8651ff2d576e3d68ecc47aad82b4188d92138bae603b6d",
          "0x283da3f1cf8477d9821ee60378b1c39c72428511a1b9d6683c0302938c248ce6",
          "0x2d99cd8d88e49e0babc84cbd58adbc143a75a26ba16f96466a2e41629734437d",
          "0x171edd6a7456a4c25fef8aa6d8b748ead869369f72a4e502861fd037dda8f779",
          "0x2fab64694369e3a2bd573c0cc383695c02a381e785792a3fabd6e1ca8df2d3a1",
          "0x0c6155944f64f7694fc8ecd2a2b9a2370568c3c898db9531dc18c72474f9afe7",
          "0x1ee0e5cfae030622249210cdcda71437f28f0b1730653c0915efbfc08607c3c7",
          "0x2741e1a7bc6ba2cb162858c4e8454dba0d0e12dcd956d127bed071739ba5ef86",
          "0x301194a663309ab8d80a434822a6f6552585e888d498581845f54be634ebc93a",
          "0x188ad25347ec25e6a8a1b5991b3e96df81f55cbe2c52ba48741c04efd471f296",
          "0x2d1a0a032554c50b22699496dec487b01401f25282f587e1b575fc98c9fbd648",
          "0x2c47fe6533bd34a760084e8d4c488c4ca2b3bd11c22493179ac81a99f8a44a9d",
          "0x2fdb414eb8069b5573db5c11ede045a6009f267a8d908dbd7d90d6a0f028f28e",
          "0x009cebf9eb6d06fb278fe736d6ba09f93e0df2a040dfdda5fe7d9ad0fb94bf62",
          "0x01d55a3800a64ee82703ab1591d18adb00259d168276e1b0fad4718cbfe05966",
          "0x0a2f6b059255eded6daee4743c08fa84dc3c51bae3179040056b3a8df38982ad",
          "0x17cf49c0568384e937f81b41c62c476dbbab87bbd6f4d9228b04429299cc81b5",
          "0x2b28f60b3ee128401dadd3d94dc96f001b9432f70ea1b3b3219d80d369921aa2",
          "0x25f0cfd33257de2cc32415e65ebfec4246d90a181e8145f9387def3c4c5e0d8c",
          "0x117c3c2b702ecc0d12cdf264fc26fb8b4ec60ab3752d20f1d2d7c440cd461273",
          "0x0ac8603ee819274a7bac613b6d26420bca69a1d147072de90aa39d4af80376ce",
          "0x12c3b1dc37d665123fa74a2e68ee329a42f75db42d2b1c055a71c16f04d4455b",
          "0x107b0f5506fdc2e774668e4192b959410a4a8e0c9e82d05c5cbba8be93d73f37",
          "0x1bdb9f5e2cf7aef69b26f0bec8bbd500ba3a56addcb25505c877c662a810899b",
          "0x008224a746a8f72cba619582bd7204b8e21d3ced7370bb7fc77ee51241c1cf72",
          "0x0d2fb5c8797a28a15bd27665dc510ff7afbae95abd32d7886d223d1ae86ec2f5",
          "0x21397b45c024f6cceebbb9d1b0e43644f6ca76d2de9eb0505c862f05d7330586",
          "0x0e207305e6d3028b5c459df6090396fe3eedbae0cf8884e15fa5b4fd9c5eeb4d",
          "0x1cda646c94c324f84dccc02f77a716daa86e7677c57047caa0026724c12789de",
          "0x03392d1c129eecf880dfbdd7d30b4a8d35c5736d71e6e1879fae2362211a7aef",
          "0x2a46775585cc9e5bcea482164e668818ec54fd76d9d2c7d933be090f7a6878b7",
          "0x0756d791c7b670dfbd18ebbafec56fc148365f1df99518b634a491a2203c9e3a",
          "0x1682d281fdddf6f34b42a4bad0b260d597e8238878c1d7a02180a699db4faa7f",
          "0x0ba069dec00122629c2eebbe6f9842040a40d8a12327bc084ef34fd142cba2cb",
          "0x25d190a3c1e234d174ec14da8db903a8df0a76e91217f9193dc891f1965d1ab3",
          "0x2206270cd7f6cb0f4692560ae2de0eff1fad9f86100053a3ea52db32f6de92de",
          "0x13135b4171ad752f3906f7a0227406d8c50dcae587b5a671c63eaec0b42efd89",
          "0x0ff9a3343287ff5db495f642d32a71f193ce25650ee9a3f0b3cd70ccdf11f4cf",
          "0x2c5fbf86b2df75c9f14ee20b314fe4b3d7fd3519593ad8c73ace69cff6406a94",
          "0x1ad6dfaab2cbdb350af0f2bba83c21438a078f09d6f50a765096469075307c81",
          "0x26def3ab54ffe04d216d72bdf3e34345c21f29c715dbc964a70d1565224a62fd",
          "0x1ad802b37c96c6ad360a316cb0883a15c3d6e951f3f81b29f2da517a93297c30",
          "0x16963177b53b5162bf2f9829514ca1ac60196b428a7770a80be012a42eb984e3",
          "0x03206529b723d804ab582c4463e1d39ec579f6415e0c3c100c4ddfcb87a1b6eb",
          "0x1b7080e5b36b8a6782307882edd6ba9c43714a319544360725f10cbe4036d56a",
          "0x1f501df667ce40f2023272b32ec123854fdeca8cfa8d21fa5f8f91f4b3c6e151",
          "0x29dcfd2048ac0b5eb2db20316a6cb805490cfaaa7f7c52cfe325d0ee3f3c8132",
          "0x2b5c0a4f3ac49471deff47662cf40c2053e1ab9bd8c90259fd39958819f1cc26",
          "0x2bd152e7a7045ab64a942d6af902cc2995ceca3d5fa5298f10bde467d20eb383",
          "0x1924180fc608c30d71ca6bc196f6b6b65915d82abb6aaa66df4154088dbef2b6",
          "0x08e7a84a3ec9fea2c569690436e1b89f8e9787427cc2eaf895f86bef37a6a6bc",
          "0x1bb936cd8a92e3acb1d40861ae7ab5d7b0b0e4d1548e136e2751e261632cd5d6",
          "0x2f6fdb04a6ddba0da03ef70a36c8912ce407b81e963f4c4ec4a05e1c1afdbbaa",
          "0x033dd37517c4e06557a334bc4c272abc198853e381599a5f0b0f248d5e94d79a",
          "0x257bd936aa56d71b0d64ba98006d38ba85fd07e2c556443c1101deb930d62754",
          "0x1c1899724669efe1b1d9b17d5626fa7ea52d62b8bc93a52fa69eb4a5a0d669ab",
          "0x136e4007bd769d059096dce1b8d16e8d5ebd9262d646383b80ccecc3f6708e2d",
          "0x1cdefb056618b5286265f7d1cd85cdad945dc9c6d203b97756700a68a7e305e8",
          "0x13bef640af3bd68eddb99e6532e05fa787171ab21061f2d51282505558b0f778",
          "0x222c43b44c581faf924430fe5b1674e15e5f62b174e936299e8fa41aee000c17",
          "0x0cb7489149d78784b55deef16853e3faf1298e78da5c3d199e4f6256eec3bc94",
          "0x1988cf8b0982b7ebb3c5df1be4aa097ca59311816ac1c52df87f604779e5d81a",
          "0x2a86243d5537e0e1bb946ba87afc04141a4f4683b73a8a642f430113b5834d79",
          "0x0810e4767c0f83b08eee45c743a28f6aa0f6c478179dc923a730c00a777c080e",
          "0x111051b6f6e645b111ee16f8d7277c5736544257b993df519a1ec2c56bcdcfd0",
          "0x138e637186a1aea10cd1929f478be75eae3ba9088375a5f1032eb90389fbd16e",
          "0x1c48e87c3a5f6585c7feb9009f959127513965869f67312b5dc4ae1091d97b13",
          "0x1bc91e3923739d8557a49df73d6b18eacd3f1d843d2f9a19d5a544d2cf61bb1d",
          "0x1f55cb86d44e8975bc1483e56fdb8da7c4ae53e1ec31b84bb2da027005d4527d",
          "0x27df4280dc0fe9e40b3c69f81ee35b9d10c3a77ee1aa568cb99de3c25a33c445",
          "0x2f5c9f8726064d9ef2ae70b9c8b9bd8c67bd0b4e01e33da14eeb08c9e84900b1",
          "0x18039fc9add69e1c38faa320bb6a1bf0fdef44feb0935882df019920c87af82d",
          "0x0327903788c3245da6ab00b1dd054ef0a8909c746381d36be32c63540f6aedd8",
          "0x1f9e9d1ae90c18f18b33386e190283cd795b00a5e700d9b450bf30597bfde322",
          "0x1335f2a251d97c1f4fe98c9df2f5e0b49a9915b63ae6ac860715a450ce045c69",
          "0x216fde3c47d44db12ca9b3890b746551e14de61d61eadaa82872b8b02d08c0fd",
          "0x20aea5ea277d5c1799bf056503d16e9c18067cce523655520500a4509558d6dd",
          "0x2c9873fee4f36a764e4633cae58d5975790e8878d02f6687fd5aecf0fea45c72",
          "0x0c59d06a98278118aa314c0a2e1ff138782a1016592643141fc11eac458efa06",
          "0x20ed28a0e5dd6d3528f6ddb4729fad421ad078802f2835228b38c04acdb5cb3d",
          "0x242a84ca0128647dbb3ef3da25cb387d422f571171db50845d58ea6beab90dde",
          "0x29ac14a0b12b581d8b76b71e2197adff56879090d84e5c39952f91f2bf8c397b",
          "0x037dcddb2530ed5cda99b3890c9e7ea0b091a00f50687bda0b6233da0bb9b422",
          "0x25a8987fb6f4c18aa01d2e5429697d61eec4830a301a60c3562b61ae3290ca92",
          "0x1c9bf71f113b61c7bf719d99bb5aebf0cabe8712b304f1e1ef2d17a098c79acf",
          "0x04a0c9f59af433f472f1de92cc39d604d4ce8369e91c4df9feb6d76706d10e21",
          "0x0d300e35270adc9e45f4315f3c3d9d939ae9e6ddd105ed4f7ed3805d29fb0d7c",
          "0x03b3d5fe98cd3d41d656038d84f3f63d5036ce839ab10cac86d931bc6f49c71f",
          "0x0d4ff1e8e5f471c0cb60c4b64e25d46058a64ba30d9fd526b6df528f36a5c585",
          "0x0e69833375985f6c99f32cf9047ed72319a78d1cc452574b160ae501f9106b70",
          "0x218a2da1a71bf2d9495435c13826e81bc4fbc52f7e9e76801d76efa6d1506d5e",
          "0x220b7c5c7df259d28ef5c87818d37b1aedd331c5ed64e2be36963baa6f0e2ede",
          "0x05e6ff3bb2c3c3d36fee30974381c7e9e4257cfcb175226975f80c7826601d7d",
          "0x06ea2130475038482d43b40d701f2e5719f8b5291e32e70e7ecb67c84952c15d",
          "0x0e8ea3e32a39cd2f0524160913424ef01a99b490ecfb7eac844e9bf858b9b014",
          "0x294e5cb86e4debaee0d50db9d21828d54d2996a6d2c9c184172c6e58fab66f16",
          "0x1b76a6dc618f7023b2e9201816b56e04600a1f6007704757a20de7a453137ee6",
          "0x158b87e1fb4ee03a0cf364d7737fea5b505c8f265d85e53cd8b6ed21b8f7e0cc",
          "0x0d6845f8ffa83ae905c90b939bc0217b96a114eae191142b7b39cccf6a05f918",
          "0x01e70b87aa5eec31fcfca56f01de6f0e16abd68e94016a6862f1fd84ac753eb9",
          "0x15afd08d9cd8f119f6b84c1bcf1bd8321bfc269f7ca4ba312f78c18cee06332a",
          "0x0e8a18af50888c0e678a18db035e95f3e514d12add25b3129fcb0a1175bf20d6",
          "0x05a423b76a066ffd86bface24a69eea019d742ac25673cfbce2d6c8d8fa959f9",
          "0x1cd6633fc781769de49bb060222f70e764c0a599cfa63dca546cc770a8c96e01",
          "0x0bdec688fb651a41a8454bab72bceb7b4b9a4e64e15a7759af96c3910f1af1ed",
          "0x16fe2f67cb81df40a13aee06cbca391aa9f363c8b6113970da577f00ecb68632",
          "0x0d9e30316cdadf4ee7861bbf058f9864ba41949a97d80f572f4f321c5c81c266",
          "0x2b7250de2b670143d2795767be62b401b33ca87317d51774332efdc0d561e2ec",
          "0x21191107cd97ce6d82d8f24580d3f312384ff8f7c372a6a6f84bea4619432126",
          "0x2d3d14d019903bbebb3844951f492ae64034eff311f6fad2e7ee224df122abf8",
          "0x0b1761537abfe52313d2984794e0f0cb5a67fab6c7de6064a9b23a9c1682e48f",
          "0x2648c021ea22340d9c15bf3b4de1019ca5bb2b154f528acbec879ba3060c5e71",
          "0x210383b9295acfb0afe0a2779904ff68510979cb8308cd4be1ba74d50f8ebd2e",
          "0x2366beb9fb0aefb2b27919a936a90e5178b6c920a7cdaeb2c24dafdf8eec4f62",
          "0x0ac0babbfeb05aca0bafc86a137345008a4785828aecae6e75726e52b19473f5",
          "0x14f4e3f929fa309ff76b77022f98355881d3a4619826f8f46f3f3307b7ed7cbf",
          "0x26c17a705c1fb16fc93b49912a3b026239aa37147116548af22c50b17c63d2f3",
          "0x1c041b56052757aa8b251c9cf93ac84f163b5029446b6b9d5f73738c71569c1b",
          "0x1db847af55f4dee4b04b07d8c756ded04b10c38423abda88cf955686e19b4d98",
          "0x14a9f6b5276ca64c71eb85421324ea22da9e59418c3f3d168a2e25614aabb250",
          "0x19e965d8014faa21520a879fa7062f8cd83e83d23d34eb96f6155cb698fcc5ae",
          "0x272983b47b987c94aa704a01c88698c287f66cd6a35b0c53b0ae248257328491",
          "0x179082445f7e90050f2751613a18be7c615443a5aabd9ee30dd5ae1aed141d0f",
          "0x2a45d991765d6810e7c6de95b751077ff3acd1a9e2ed841d4e351641b531af77",
          "0x0ce80600ae777b7577dcb0c38e3017ddbbcbce86bedaa78f3ee80fe8f8ed9c46",
          "0x1836efd329ede999eda029ac76933e51d379c2ec9f81106091d4dd81184b4a90",
          "0x23c2f9f5c32b9fc9d8a0f06a1fb94342f8e0f72871532ae622e69cd26983cbd6",
          "0x229a60de9ea7b9a31af0537a15fc0cc8f4e1874b05b029a17aa6069badc70709",
          "0x27c1cacd84763504bb9da995fb9c11dfe1de4f9b4de0070c62458dc06e6f718c",
          "0x226925e3b28e9d3583306111412c7fb3125a6229d56499d4ad4ce275fb945a6d",
          "0x2d4c3ef6b8649fd521c317d440f0de2170c7dc0ce2acfe5547c96265237229a0",
          "0x2e163352d3c6c204a4f39c6347ed2a1546da1c162c17b37fe5122dbe0ca38d81",
          "0x1d50944ab52614ecf794a99ec9d9364ac97acb173f01a5793d55f9adbea4c3a0",
          "0x2b4bd70b5f1f434f70f1f952d02b031723f769ae18207781b37efa7d860b6a33",
          "0x01da84194beae599eabcdd0d9ca29cee05c8d70118af22d79496664ba63d953d",
          "0x0b1469c1486ad837a64a4889c24acd60c7975f59a70181bebde9950fc04b94da",
          "0x191e2dcf4dba410ac50f7e9aa497a5c783bffbdcc2db8471cbcf70b56e501040",
          "0x01668607fdf864d54f4bc62a7a64bcc84e7c9928a5bf8215fdfbf22877673317",
          "0x2f9967228d705426d5012c764e1754e1f43e1cb9dbde29a8da4ba862ae464916",
          "0x0174c15148cd64c6a9c7e25bf7e92c0eed93ba9d9d20dc9d99127b9837f842ae",
          "0x0feae0bccd9061f01578a7a003394df020d098b1b5d4d994e9c7b01d5c2a6e3e",
          "0x0ecd1468fba5b3142d6b6a3698bd27eb2961f2232da5614891eae6fb2f501f83",
          "0x23b8bb2b66cce71b0805586c9d01f82c1f7acd6608ba14377052ab5228b9d2a8",
          "0x296c2942c041735a80687e79b03159ea0bcc9c8288bf61e932b16d9a77418703",
          "0x0dfe7f9c9417c892a1aa425e36eabd1a8307bf14178cc1bff30de270804ac6b4",
          "0x0f9c80c1ed9dbfa5264ec0ca7f2907b45582aa1aadc8f2244eb826f36302075e",
          "0x13c76a9e0ef6a2afe12453d52c5ade079c945de6700ade999d2654f00e0e1db0",
          "0x08d14936c51c9d5bfa8934ea69752560e7f72d33c6db682c6eeaa8d37afe72b3",
          "0x2bbfd29e71032bd6df3626cae78d5d7d950b8251aa9ad387baff0cecc55ae78a",
          "0x20add9dae28c0b6c56acf8dd8fbf8b82aee8b9e464704243077185468c6c7a25",
          "0x1fec96baa86d874146fecb495308b927cbc63ef0acf2481252cfee977d77a051",
          "0x107f942cd1f7db02a84ff410913b07ca14067c08e3cee6883c829f8383db56af",
          "0x20446a5488024632c1ca5a03f3e0d9927db7911b48d0ada345cf442d574f708d",
          "0x16c45c6ee2e09bd860204a12550cfedf1c15cf5ae79210ff56c3a067be982232",
          "0x095afac9e9c0e7bf3a3757afe1a59b1cd2c8a9dd0a4016a768de4e394c5aff4a",
          "0x1789b8d50c4f470a2040a8c97540530eb4a4ba188e058c5cf98eeff2986363cb",
          "0x1ae4a093f1ff056d43eb1f176efac59e64dbb0b30a17bf9cebe739ced02d7eea",
          "0x2078664852923af8ee05ac393bb1b71771aee237ac4bc13feef5eddb824b5212",
          "0x045c263bfd2c80cf563fd1dd093919e61702c4180667ced47109f22293d6f635",
          "0x05bd68adfe9229ea5f91b9b9b7c648930278ff9cd4235a74ddaa2989b8ed1b68",
          "0x2ba6147bf61fac6fe9f89f5d03424bbd3dd25abd1ba8099498cdde87a83508a6",
          "0x06c29c1a964316e5ff468201ecda5c5eab28e5cb0cbec1f83fbf55f911dbf6e6",
          "0x0b3a42e10c5b32a4db4ae5742917bd2a2b6484d58d069988d40f4b2c5d923511",
          "0x1ef05c441e5c449dcde2b0104cc0cf09338c87fc1ef249e47219be01f8900d4c",
          "0x1346b974d355923f8812b1b81cd69ceac02ba2ed4207e078b1bcdd65b99c1c4b",
          "0x0641be843dc5babada2893a000856038b0c480c73bb1222242f5c182b0366566",
          "0x0e0ab9754fa55418576339c74a518da23da4512ef44d918f3ce7adc03877c0e8",
          "0x0524eda9a8cf74c8aed40f27e804a118f479da36331029d8e35fa3067a8a2e60",
          "0x2d9cc26968b956d282d882ad26062692ad57541ae207ce90a36eb408ffcc1c2e",
          "0x208be81442f0eea20014d7c50cfe3f8497c3eef59d23ac75676d86e6df672177",
          "0x0a103c791829e5f91e9143aaaf373c130be8bfc3579f3608b2eef23dda272775",
          "0x24c250eb5eb7b2d00c290f548f258b4206da050fcfec439320698146a687b4d1",
          "0x04af611dc756228bc87c791eabc9412b4dc539e482b11360dde2e8b15c5ceb26",
          "0x2edda4c0c8cdb6ac1f766af30f296c30bad29a7fa345c492c5fd461c83a74ad4",
          "0x24a57cc97ac713d122d20a0f45af32a192d57ee2df010a2abf932d3fedc531a0",
          "0x2b7869256ef8449ef1632686c2e4eebf6c7dc01925e171b6a3053c00c7fd938c",
          "0x1fc2cadc1d42598fa8af9a087df97d11564f96124486f9d36274a5290771637f",
          "0x1721830740eab5d3e824ca501d9dbb279c33cca46d957cf4dffd86c4643852f7",
          "0x065bacc3845e9e1db1666679ba9198965a9604f9d0e17a509d3435461bddaacb",
          "0x14b469025cbe3ae69548004a75ab8cca73e668f3fdbe5b0412149da212b86295",
          "0x1691556195caee6db9f3e92a740b8e3df97ba65b9401d64071720fc3f5b93d11",
          "0x2043760c0846ef1a8307b889640c3495bcd17b855fad23866cdc940a9e9bf202",
          "0x254c39a9337dae077e34effcb2bf6149dab1ff4c47077f565a1164cc16065df2",
          "0x16fff81b84dcb6ee8195fc9a2b43183ef2c93eba69ed01fd66215afd4118bc7b",
          "0x1dd3fdf493e57791e270cf1e45932a03871ae749d8b071b210c113c746ced3e8",
          "0x19f34c30d29e2b2e71d0e7b58975b52e5895100a642e52509f73499470664e6e",
          "0x0e53378ab524fde35bafbf5b073f60337d37cc7bb024e4d770b478cab71efded",
          "0x02657a42fb7fe70f69fbdd34cf77e2cc1d9be5dab5c3df54468402e9823b730c",
          "0x270797e181131ae454fbe035b74c818574db4b0b14617145614bfcd17d866f5d",
          "0x1fe850c6eeabe8cc324105f8780d7802b35263639cc09d7c27e2c3d339fec530",
          "0x113b0fd84f896b1726ed7e324f037d49bcfc61107341ba50e6ce467bd4fb0393",
          "0x0455301c9c3a9576864e5349b9dbaa24bb5a73194929e2022f9f9462dc60fc58",
          "0x1e78afe9e73f4fac3c0603f1a9944fac953e8649a63ab9ca386e14f76cc9803d",
          "0x2a2df8062cd4e4019ebfad326af75f075ad9910112c9e56dcf5c1402af2eb5a7",
          "0x23199d2e3d213c593ea050c5b5ad9f69f1b0cb0a3bc785927509481d9365a79b",
          "0x1112f3f5206cad6ea06f81e7e93f6da2605d12111f7d82dadab721a862820454",
          "0x2a7850975343dd2d9736a41fad96173abdf8ec955a5dbf0fef598a3427b06cd7",
          "0x0e8f0ccb5547386fb377f8eb03ce31a2fd99637c8288acc824bb3c7e11976247",
          "0x2dffa0cb7982a215faa3ae587f3d0a8fdb38bd67fe497d6ec6a9af385a7de5fd",
          "0x038104d875861c16f8696630fff0f564ab6367eebb54aec00444abf7ca01097d",
          "0x2e1c146050524fcd059e554496c7365dca249831f8f3ce19154a3a4f25c0a15e",
          "0x1f1b007113b257163a2338f7dcd31019898bc9de8cd433c6f4d2a0d61b4a895b",
          "0x0245d414c0213d2b34191838ece52483b9b823ad5fc60b0d1b5faa19dc499428",
          "0x27b89b2aeb20498cfc4ea10b7057b853cd060d9f43abda0b62ec0acb50efb0b4",
          "0x1c77ccc651789deb5aac8d3c633ae0d61021f924fd15ea3f64b2190692f0b84a",
          "0x1344ab9603108364a71cd08f29138f17b813a2e507c5a371265094c3ff091733",
          "0x096f47da409be2b87d72a5b4dffe768e464b9f343148561cc8f7f65996473338",
          "0x2a963a2d7dbf1b6648324ca5ca201005707c68f190338602106ff7a1c8180074",
          "0x0a24a1fbf8e9ea5e0ed9b2f6f45190baf98eb130f23e3a59b98800474cce6d7d",
          "0x1efc39326593db3571d1f81f6e239efbbb625848e204043a3eae361b784da8cb",
          "0x02878f199437f80ceb6115a4cc69ad4306cb90caf7d33a57ee2c772fcb0e7c43",
          "0x14e714116af02eac68ca2f2d7fdc5602d14b0e3156bf689dd8af02225f67d6a5",
          "0x1cc4f895a494442a4c6bd0b9be44ea8d5c164ea0aebdce116bf6e22ea9c9dff7",
          "0x1f72d9f57cce69a7a953a9d1ead68e0fee628478d59b37fccf1e710729f9f2b5",
          "0x1504122452ed1fd0021c274b2f90e860d621c530397d4999625732841c24175c",
          "0x0f84c2185df257426cc7160be00166fabf2793f17b4dcf955537842cc39ebec6",
          "0x26211875cfeb1f08402906b6e10083eabf34188c0f1c9e6ee6666fc7499161b3",
          "0x1fdaf9a5b7dcb487eb434eae3a3a1b632045c4f36727a1600da5c67d7162bec6",
          "0x1a82c7c40e0b33bc3be8f836c4b58c1167b9dd3b89a64a40f250fba5e7992603",
          "0x26a830d5593275fd09838a337dceba9d73b6b0bcde5794f3795a2c7d9a005beb",
          "0x1ca1b51031b54d6c209c60095eba463cf27afc1d87db60b8527336586bf5ac37",
          "0x02ed0b2c0fc04e99dd373f11a3fce52800291722a4f60f69de44b0be369b4301",
          "0x138bf926c9f7d99f3b356786eca06d03696c34a2b3e7045ccf4d35036ba8f5e3",
          "0x14c9004d3aa47932ecc43b64f48012296eec6175998b27d4ae9e67ac37e252dd",
          "0x2e8fce1dabe0cdf3fc5eebfad8fa7adc6f8afda97e429172d9b753dde4b98fd5",
          "0x086d86c3c731fe45726bafc5176b5843fd04dd64f58080677db1ac99fd279c34",
          "0x07c522aa9582313c107a3629403f5469f777e86b83ea72d506087187a8e72bd3",
          "0x0f8ae11d8f6f426faf8516e350013be77f4892512580ed34e760da1c298b68e9",
          "0x0ba5aa0e6b3dc7c67804fdb84bc1bbcc1f844e9046a6624a910173cda4154bcd",
          "0x125a057c109e46c86d4a079d3aa4396af8b3e01365556a1b54f39d8ede66fd21",
          "0x28ca6c1010270adc4961aa8335ce83696b24bedb4bb473dfc15e82d305b95d75",
          "0x1d636937861daa12215f031dd31ef5ddb5d298fe8a687f1541c113dc6a6f982e",
          "0x2e755335e4022d7bac084dcce1498520f80ae93da97d2f65715027dc8f06f0dd",
          "0x071f2713b1a7933a0a20f507b9120564af7e399becb3c364dc4d4ff00e82c84b",
          "0x2ffd5da8280e32999e19a1717e10c89afce0c6f81f5d3289e3d5fce62ce0f328",
          "0x1dd14fe6365e941517ddb8fb308e3a93f54003ab4bf5f2acc7a7bc28b5133d77",
          "0x27101129fc7fce62280ca2c588ec157d96e5aee5c2b0dbf2049ed24b2c1305d7",
          "0x21919fe253784f0db396d4f9e4c77352386b9b72489043754ba8a2b1f4ac126a",
          "0x07027958a8f531877d1cebacf828dd8b017a125c9d287595373a5a39e58cf8d4",
          "0x0f4c12b76814adc1cddb3af4d1ce6900934ed214203cff4daa3c327f9ece5456",
          "0x08d988683eaf49158a7c9ae87146068f6e1cf75455a9d82231645f7290d10b36",
          "0x0272e74426d074d9658fd9526b8616907d5673aef4ee33678507f82bceef5868",
          "0x1a4709dfae34cf5ddf7006d7c290bb58c74297c8c4818fdf5f3950b54c924525",
          "0x22002b8b417575047a0ed5d359143aeda19e8810c53499ea4b57de86d441adac",
          "0x24574868ec8a4a702ea0cfa55bde2ea3bfb22821f6d88a66183527b1c7f8f0e9",
          "0x10d966de7e680887412eefd87d811dc46b0240886d6854934338d21121819798",
          "0x2ee7c7e3e8a979087deded02e7255ec067b1c4647cc714b96e1a28258d706966",
          "0x07029f067945ed1f6946894d66e2a8f17513b7caebd40c9adcaf39eceefeba86",
          "0x238f96dce22c10c9aca9a1982ee6eea87b7cebfae5a387782b49a62fea5aabfc",
          "0x0b46866c52482fd492baa3395e0a2c90470b402e538b3d8d0c50722e5621dd1d",
          "0x0d766df2a110efe25a3d9c00709cf5309a71c3eda799419fc3cbb0f69cce2ae6",
          "0x070143b740c54c7108f5f6183ce84371f770750dda04ba765ef83bda3fb2d5ee",
          "0x1700b579f15e50c2ad18cf77dddd549da000a6c8390de97e7ed0d8e68dd77d5c",
          "0x0966a4c76701d09676a086e95d90becfa07bb8034642244cf6aef00a540d2348",
          "0x0dbefe8bef0af25598f5412f84e00a3dd4e87de653075ba0c5da7ed783970bf4",
          "0x166d86374c39d7660096c87278e27024ca839197e65cd2f341e7a588c5387fa0",
          "0x251583bded154eb2396251754588712d0e1b78c29cfd44b45f29a9fd52ceaec4",
          "0x104fa2f361cf696082c5fced47e78a75f39363142e877b3d82c55c686e52627a",
          "0x2e937bf849309765a350ed8791a96d859a2037229bb6a652bc6aded264c7c5b9",
          "0x2b1d9ff7fb70883508c56021f57e3f9ea1dbac6ca74116b17ee926c1ec3190ab",
          "0x05f6384c19be9a2806e892c810917c10224188bf43f041a4e9633f370fabcd9e",
          "0x2ecd3211e05ef27a50e8cebc42ff0b183cfe21dfab238ea9ef76229b3f109303",
          "0x134cc424a26df27d06dfecdce2641a01bd102e7ff1a079a2f7e02cb5c04d0fbe",
          "0x06491bf6df0385099926b322197f0366b2757d7dd62ee3c2a04f9b4c9534051c",
          "0x195fc25a0f0e518936af73aebdfd96d9b38a4353504b0ff8c1418986552920cc",
          "0x21d9052cce28cf6e4e94073f863ce8edf12f02ec3286237f9d223b6239666286",
          "0x0baa8f730ca31f03feecfac34a96c3ac7af148079107bd1d17241917917321bf",
          "0x25581389210f6dfc774d3716e19784984d93837f46e519dc753d36eb2ac7ed3b",
          "0x24e00e2fcb19f6424d723a02dee50396b779a246da53a1a240f1bd889a8970a6",
          "0x083d4854b30ee0679d2db410b207e0e3a675788631c5a356cc87732960134c7a",
          "0x00af54416d73433ca2ed2f161359272770b6e3009381d71298f8223deacfaf11",
          "0x0d86112e0b5ca938fa7edbeca9ec16e9e9eb4589c77706ff386b4f121fff102f",
          "0x222eeb0b16a9b7ed31088917ebe1cd3de2a51f15e1e39229a08bf734fb2cf54f",
          "0x26ab188797afc73322cb02f8e79578e0e296f991bb2bcfebb635d1212116f43a",
          "0x0189a33095624a9fe843ee367eb23224db90c8d79614941f43009202bf3f7692",
          "0x0cb116f05c5b188d660a15100e4e53213f9c91a2c7cc48497468ee009204155d",
          "0x0677167ba65ce31ced812c57211602111fc3a26bbe9226918a7819c94281196b",
          "0x2038709e7cfcc3a1fd50ec84476c90870748ebb30f6431bd136fde99cfde252f",
          "0x11304b471f078464bc2004c224dc05a4c4ec5db0a0d15f324130e12793a7aee9",
          "0x25d8e2ab7f87aad379da3e3eb7f5d35f297eb80c430c765adec7f637c4f592ec",
          "0x0252705f54d55bf29b30237f8d12aad2b21b4a5d3a7aaae982f7cde3da630867",
          "0x1db9ede78af0ebf26dc188f6fa75663eec8f65b6c9a5ed38fbb3421dec7d7e44",
          "0x28915bdfab7235384a0052ed73839f3b6600a7ad6328222a5b5cf6e833a23778",
          "0x0a48fd9b0e00279f51f240b4729c1360740f003e804a09579e28c033c47d5b25",
          "0x004aa895e8c124ea62643e1d47b28162c404aa390fd45c32f9ca00c080fec007",
          "0x2f6ff2c3db97147ad04594d1858994b416f98aa1243bfb9deea65c109df2771c",
          "0x24f4f4faf7ce4f405a99b997acbe94f4f75646fe7d669779737e6aea7a59318b",
          "0x2c6de883618f61bf7f3f7d8d27a607d6a7c4477491b4a505955312a1ead3bc10",
          "0x084e6d4e3821e133fb91ddf17c52a3c3e056dc5211d99c507a5f8eb010f2051e",
          "0x182695778ac2503bd5ab232f7a06bf670a950fab0f52691e66d85d678f7ec4b0",
          "0x160333461efaa2ab9af0c831084d54e7669d8a39c5cdb67b2dcf41d3c4fc5e05",
          "0x2cd141426aef83b60baf24a91964fa03a4a15a956db96b9ff8b1802cf7886907",
          "0x1efcf46de40d031f8433503f35b57e7e05e7333292fc4e87e8cf690167176023",
          "0x13566534c621d806ed162efe86de13e99f5ba0b87b7662bbc7b558abd47fb72d",
          "0x13dd0f3e7ad7091840f0fa46df2804297a60a00afb5cb4cade62ef93010b907d",
          "0x063074d64729807274b9582f5459fa5f13a570aa0c8c1cdf970e0a676cfc6bed",
          "0x2cf0b9463240189f91b0d0081f1fdf117013e3bbf66b2ec20768b6196ca78a40",
          "0x2414bc086989d9c5a4b4389231672e10670faa0fa46393ed3acb8f7592d53cfd",
          "0x035c375210c40378de763a3a1ca80b6f59ee72e60bccdcab9987567607a7a661",
          "0x24649b22485d4164a5849e6fe09e491800bb975c4c18dbe076ec4c8430944105",
          "0x28ff30154191e734bbf8835086d026958770f58c05adf2ab87451b0f5b6a5b90",
          "0x1333e068eec2449ec9f3ec2509033a95eee7d93b3e21bacbf131f353021eaecf",
          "0x1aaf01fef0368da6ec25d420df62bf7fc238eeb68f9c01efe080abd921969992",
          "0x1a8158e9d6efffb3f770430136749c13ac3b57b0ac67b7e790b87e4c9533164d",
          "0x267a4bce46448d250fbc476240bdf28082bb7b3fd4fdf6b4959d202ca5c22cc0",
          "0x19092ce179c682ce654858f33d7db753b9a6864268eeac3e01b9c7499d669382",
          "0x2cbc84334505141c85446a368bdce6f43c4c73002b9c7fa2755bafd3c913cde5",
          "0x0f2290d7acdc26ef20e0ebf6c790b226ec27618780d69b34235db806c2cf7fad",
          "0x08997d8fe98a3b07b245abb1a2ff924e69c94ec512dd8717d26d913976f7009a",
          "0x281257a6930442a04b62b72ed85e06c26510ef3572b9d76a5a47d39cc8ecfd19",
          "0x1bed3ef59d524fd38eb28351acd8928fe6837cee442cd4128e17e4ceabf5c5e1",
          "0x2450c4222f921391c2d880d0549a66879b1f036e6196b0ed04b6f65d7501ae88",
          "0x13cbc816452f1a7859c5a15a87dea7c7074b06f50623b8d535ad31f380862014",
          "0x2a447dab60e9a356de04e09237b0a5e823997072c557c28398dc34349ce6b103",
          "0x0403afb29d58bd7a9985c47f8fc5e230619c306bc3b9e5001e5641781e2a2767",
          "0x01f1b34d74c7ba4b249e9ed1a403edebaedb7cdd68997d769702c61675cf9fed",
          "0x0e5e3c54edadf35d98492c46975dbc8e2ff08c13858abe8fcde5ff740182b642",
          "0x0d63ba660037b09ad891f2a73ee687cd93fe26acd102f90ad5ac7fce6e3cc24e",
          "0x0afb72ecf8fd02e169980cd8f4d692ceeeced7f54406a649da0b542138177506",
          "0x0a18d18293b53b043057c48caee752f777ebcbbed6cac878ae6dd7f823daf887",
          "0x0341875860149b8023899da549912f6ca633d0cd64308178b5af305831025c9b",
          "0x1e74f47f430e1d9fe4edafcf6484293d475dbbd32e4db7afb109344d6b217ca1",
          "0x1393ce303c52c2d727cb4004446b8e2ad22c18f3c6baaf7f0b9807b4dcab60ed",
          "0x2996a98688b3896b12bf84463004b1e6cfd41febfa82a76c39829c00a5909563",
          "0x1101278844bb1ed1532a88c945eea3f1771c0b7177d9e90a89fc14e15735c0f2",
          "0x0ff944e58495c3facf9e8bce3ea7e63b45e0094453d6de3a476f34f0bcb7f076",
          "0x09685892b1647936a2d06ec2904235a2a473236fbae0007813832b3b28747a11",
          "0x2df959566a7f74f07a6d8db0ee48cce33d83d76d83cdfb72f8e601cbda8a619f",
          "0x1371c30df84f6fa17717dcabf21240b1f62b6a0f7ad88ea974b74424576bdb2d",
          "0x063df78a5d2ae65937d865fb6653358f110a1620b462221fc53722e3e5914bf6",
          "0x06943c3b3b93a51f75b9ef027e7e489c4031ff92dfc9e6cc8c144765ed455963",
          "0x258a6301e1d4ed86f430c121b8a7a02ac41a45310d6eccfb1e25c50e144d552a",
          "0x16946c160509bda0e6a28b310d1e3d465496f50f331eba12a3d335e80d02ceff",
          "0x228a377dc063ee95ea9383203e09cdc44ee8ad4ce4a3bd6accfaeeebcdb3afe4",
          "0x29d562c833355a13246eafed9cb816b700e432688f9d0161eb345f93c86d1c30",
          "0x06bc32e8519fba6364af48c63d468794e43eaf044a122f5df7506db732811574",
          "0x05b5f5ee4e1de0165485ed2e889de65244597ce9795bd1302995d6448b7099cc",
          "0x228e0f6ae75902b8c6f351e3afe911852fb72594dac6d84bb2501f6c1fb62b7b",
          "0x1adee1a357f9bd07b9aa5d5de6c1cf13ab85e3c637572c4405180255a6b262cb",
          "0x0fe8e230f7a653e70d7e66b68cdde3b091c90bbe3392ed70c657cc18529c48d0",
          "0x17f2e3b7e2a5e959cac4b2e2abd5b204ed1d1da788ecb601e209e9135b42776e",
          "0x0e5ebb8d9ab7b2ecfd74f5c7d852fb72eea1d29438e5849d60c3be110dccd77f",
          "0x1176ff60b09a930fc378bfa5bfae137d7e914b2c2e5d41718bbe5987ea4204a6",
          "0x1c289e2a8f4efc5bf0272bf45012e7c53b2ea259353ca5fac13452570f0ec30a",
          "0x0897085ca8062df434a4f9526f65def6b90df42244485a72e23b62dbc3ad4b2f",
          "0x08702d77c6eb4854ab9a0dc200a9496022381e1fc33606f8a276cae0a0086edf",
          "0x2d557de044b0ba9934b4e84c14c2790b77dfd73c60964fac43c12834ae160236",
          "0x1b7c71b547295485251a601e795a5be291ec9310d09af4cbf6c6f1d9d97f0759",
          "0x0c2ffa9d08d01f7863acf32741e6f40f5a614d5b5bc9680d4450bcc3ddcfe7e0",
          "0x16b4df7609480dc496c9c80c205cb130dc75a36bc86ed397537fb8621bb55aab",
          "0x278870285022a8e62c007ea1a80dfb983108933916474d70597eb223db38d120",
          "0x12d086f24270995532f5e9a5fe0f454211df6e0d70a4f5648dec1532bced0822",
          "0x14051b5b246c70615818e460072a6335353ed0baafee7ca27dd1ed323a1a460b",
          "0x12b64f3fb3491740234c4b2a9c22b0d3615e6409374dbd51c68480ffed83c578",
          "0x1dba77c37155cfc3a40e60a3cab22a65ed3d0b3b9e14a088da0f78235f378c46",
          "0x2d3cdee7c20e981df78414afbc11ac0ba5538b05d8b3ee64e93ddf79d16af761",
          "0x1e72ec6459044a8545cf04fc975cea4396932411985f63f69cf5abfd079ea339",
          "0x033de42aadf342bf63b8dfa88f1834316ec0a1a2031fe6b990b8939ead902367",
          "0x01033afa420fc311df873cfa662b1aa74c3293b32fafb6dd8b50957b40e4538c",
          "0x03246089fc735a2a10eff81988dddf6bf6cb36ca4c94e5f811d34a138af7695f",
          "0x184378877dc29eac96d70f2c3c23d03b15bb5cc33ef46aa4d7d8bc7436e2e133",
          "0x24a45709cbcffb8665e006e6da138718b961a11e5f833afc14de37273a14fab2",
          "0x15edf9c56babcccfb597723c4e2ecc4e9f27a6622c161e90f6aa189ccc28c479",
          "0x24a5b373a41b6284b58dffc853e57c1e94dd8018bf6155dcf79f539ad38f0588",
          "0x212667816adfb3eaae237f4bc5003837247ff166cf8cba1fdd43244f34aa540f",
          "0x1ef893f637158368e9a96b7893b13693d1a08dac4f4523108b0a99cd60d627e7",
          "0x025d14d1d9d039aac2acd4d2dda3f73a808846aed7159817289db8ff01a512c2",
          "0x09d18709d5cd1e66a30a5af2a40202a06e2c4b6456fbe28c5509fcf8f5010097",
          "0x10e49e4515ab23f11ba99b0a8eb2b9c0c00ffd31e297cc0ebff4b70a19084a03",
          "0x120d8f3de534d39e74a6866a095aa3038cd5a8a6da2c8c3af11c6a57878fbd27",
          "0x1086a1c670c0b38a4615e2b5c9da452435b28cb618a755cb8e4d6cc4a185e0d8",
          "0x143da4f1e56c2995390de6d5c203a81a0f8534ae6fe1b548bc06ed66eeb71b82",
          "0x03f67f0c682e74186fa8a43185ad1058986d7829037c9bc4efd13303df2565b9",
          "0x2ccc820115f173d6df190637f860f7559838d62da484768aa9147e38718fe4f5",
          "0x16c78c003db17ade4964026d9c805f98f6bcc18f5ab084bf6db478324b4cbbf1",
          "0x2ced73fefc2ccaf65b289e9dbc565eb7118f94a1e55b431c176659a4e20300bb",
          "0x080355d267446e657f4fa48445d6bbeb92bd0722224b62354102faf995c8cf0e",
          "0x1d7b035e2e3447110b569a0a285fcc75848e9edb05f260790b1842827caa69c8",
          "0x0def7d6932196574dfaa3bb93e455eb3073af3c6f5b23510af304e44af9d45eb",
          "0x1d7bee97b83a508aafabcfc215e94be6c319c91a06a446efeea5d2eb6433d01f",
          "0x297df20f1168df352ac2f6f2eba37c01f2e1dce8c6c9ab6fdf4bd4f73a8aa61b",
          "0x2704da6a1722356355503d2c68fe1b4cc81c7ec8ec79e60293c6ebe2cd0fbbe6",
          "0x2ee1c93621569042fcb5787986b162c7713c3f46ba980f84c35605f39c6bd09c",
          "0x143dadb2702943f0c1ab5f4dbc544741271b5feacc410778391bbd31df27d57a",
          "0x092b4880d629751c880c52a583e7c897b96f8e4017d03615240b58b099710347",
          "0x2dfbb9e30dfdd6a6109ff6096fa7880bbdca630af585a98dddc26c3c0ba06b1f",
          "0x183f5efabcd0bb3b5bcdc307a3000408ffa227d7ea09d1e46728b8a41dc10b1b",
          "0x188ec11b8e4279fe5d6885cae68b47b0e2f3b1b1491823d56d45b7ee0b819bef",
          "0x03b932f42f057452cf7e63be1d791df135b1203a05a1ee87181b79569dd9caf9",
          "0x0f004e411866bf3827ee877ff26b9030e8234af91cec1abf4b1e63ec376cb4fb",
          "0x07b29a2bf26c3253559ac91866e18bd24231873c628c6c54085020e9d94e4e06",
          "0x0dd493324477dab3fb82ebf9bb5ecb261b16053ffde0780c7a103f5224ed0d9b",
          "0x15a2481d9a02f0f660f26f731800672d4f01386a88b39a481300524ff7d6d77f",
          "0x020fca8de9b1ec1b1306069459134385ec736ce3d47fcfe31c9036de466599d5",
          "0x13f13006cc21c4413d126b903430c7d0f91843fcc8ca9d6f29e088d53e6d56d0",
          "0x1562270321f351d19ff030cdb1061906ecaf1d545a842611dfd2f62b517fadcc",
          "0x2a1bac0d137627714a64d25cff803b56397eb7c49f916f212c325e36e099a21b",
          "0x0a626b8413c43716fb39475aade5a5fa6032be65870a14c7536db969accd9f4f",
          "0x01d8614a7501b8508b972bb3a9865d7ebe10da1f7ef9a4b7caae2e8dbeafde38",
          "0x2c4cd54213bc9c118584922573edd0979687ffe60194ee617a89971095ff1712",
          "0x273b67e44bbe0f36e03fe1bb7d026d3ae18d74280ea660f7eb6adebf13624370",
          "0x2345edc3a494fd086270df8ec3337021bbfedb313e666ed13358d808d7fb96be",
          "0x14e3240d400b2f37c462731eab1abfa3121fff4452adf8b8f1ea2d7dfefe5b96",
          "0x26fed100c2fe18afd4558db5690f1f5c1ae4848e45f7984b975a127b2c3e43fc",
          "0x094f0c0432e3dd61dd59f78f3cae7b2ceacc7ea52e1e429618132d2993561b3f",
          "0x01b69528d1cb065ea1bb8cb4ffcd6f727a43c184998a8c52289713e52f1a4f1a",
          "0x27f41e553f9d587a847aceda9bc374ada23fd5a31068640ce8851f2ac9416b9d",
          "0x1e78dc5799e31ae0047ec4338ccf8b53635cebfeec7de05098ac9a49f51b4e11",
          "0x1408db23a0195163f57ff57339bc69577b96aa7c9f5b2347cffee7c6cacd3895",
          "0x0a45ed2874baa1e55853ca869d88ece0b18f92752a6a622992f2c40a80fa1bda",
          "0x008c69e11628ef5f25cf5aa9a86c58192293eda7b8038b0fcdbe9ec43a387b38",
          "0x04418bddd1b637b566e983af7174840f3116feee63ecf811ba3c183208b73457",
          "0x215cda6478735eb143ffb90674fcf75ba4d60f81f2e13ba3a148ae32f72d4b44",
          "0x035577a54e516696334944d355f8f5f19cdc0006a3d8f19cbf52a315fca92657",
          "0x14007e08f2050a67267adc8999afabf2df408c524b62d66242e07bca846b734f",
          "0x1d34dc16f79b6e30ed5a661cd37c19178e1b9b5ef6814104b0f01b3042fbc1f1",
          "0x210287383f8ea9d022330583037c97c78bc6559b06da998d3486c784518e28f4",
          "0x24f14e85290d69d501a2347570720ffb805edfa3c42574f10c173631dc15a933",
          "0x301162024bb27bbcbe7606f50fe7ff61f9ef6fec6c70faf2485d11859f59249a",
          "0x0112ec7cf1ab77ba88df0bf2b9c9adcd5bbd3904798557b1fb17c9f09aebc0ad",
          "0x00405e5888854684398caa0a447f1077f2294d23c4fe188bd1d9024b5c786c9e",
          "0x2648137d6f48e92e1bccacacbe308447399f63583708346e2ebf987f397c8f19",
          "0x2828ed7039303cd2ab1ac07e24e2ca8df13562f1974b2c9f2b3fae742eadc23a",
          "0x015e6dc583e4e1f4626d8699910170faa3235d54d4fdac2480010cbc4383736f",
          "0x0e0d901f126136db8ae40803538a6e638a67be495a8b0da6523dd152be24514e",
          "0x15f1d6b88717f376031f4c9db9389922c83275af3e65bd06f1639457d8aea6d2",
          "0x2d4a2d4bef42094512da25f1fc445197da4116cbf1a5f19deda71329b3fd3cc2",
          "0x2b75516b90c831875a52efec663b3ac244300a4aea3390cbb79cab04a41c9c37",
          "0x22dfe7ba1a8b83b4ff9e598e4f853568e49212eec0beb566cbd83a580c913510",
          "0x17356d230f9da4d245e95d31939c5468fd6b4fe1d43a5e6a23c325beb7818e85",
          "0x00771aa5a01cb551d674ecc77a4566d30413f3c6f3f98883f2297bb2af901700",
          "0x2038c2bdc57d92fd22826fc76e6d08c2b9f0dfc5284fff92067ca7711869f1f7",
          "0x1bbb2d783129d5647dcd868d4068b4cb291755342f4d189667cab73f58913c54",
          "0x0cfa3cd62a22569bd9f83dac75982f5d9ae73f6d11e945db4f1691e47d690cdd",
          "0x20b8bcafb219c0e8cc74c564c365e7f1aadcebe9d1de307a7d8bfebd9a59448a",
          "0x133f8f49324ce55abe13c52065b9fd5525d19ae1fd95c968400efc2d32a3e559",
          "0x1e393e2816d184bb6fd0624f0fa7d0be2c767ce0cda87aa2235863564b6f0ec5",
          "0x0ea9f996da777929697fd9c0b7078128e70ace44e0f9c5bd2b408096ba6acab2",
          "0x1f998239bb13599db25c562143e127d87f7f7a94d32177ac46cceb87cb9902bb",
          "0x2731954ff3fa93fe61134965d3f2dba0bfaccfc91ea76ca59638d2fa9c4a7a0a",
          "0x18d07a9939fafa512e2db3f523d1cad5de5ee6138dc2d68c8ca06d5abb4ae655",
          "0x21c5122f00f0db5fd84ce1d7c2370e019fa8269fe7631560f30a4c791f228e0f",
          "0x0f94cbde49d7bb747f1b7a83bdbc3fbbacc95c68355767beed02d68f444504cb",
          "0x07786585577d81638c8df6c6fbe94fd632f7ad7e35ceffbe367e9ca3ca33c165",
          "0x13899fa1b41f12f9ba9d85b72ba310e028736f5200293bc15df542c1f3fdf3a2",
          "0x1a3e2b4a3410b810d0d8d8e91bc0abbc5843c90e1f196902924901e4a423dcc1",
          "0x24693cd5298886503438be685277e580caa0c61090ce7de0e7d40e49d12b9190",
          "0x1cb88707d385048828ee4a4ff4651d26b0c6ce4403801b70e65d0364285bd25f",
          "0x2d5d8e36c872f5ba089905e748b00c1738ad5103e56334250db8c34f89f4cb58",
          "0x1df48fd041b0e7762fff784087064fdbbbaf29242a35bdc6a24c764f1201e39d",
          "0x21aea18d65264f486c986b3dcde7abcbc0ce1f82418b6fe9dc420ef728f9a5ae",
          "0x295a978d6b1143de34ded6f81e2af50bbaf9e93a3c4f98f07b69a912978218da",
          "0x04f0f0b54e2f9add517c53f11de865a6ce34df352d0c8b7b0ea8fca0521a3b5f",
          "0x0c4daa6bd8a280695ceb773c23ea936eae30b9aecb7d29732f3d005e8f6be875",
          "0x0275b5f950e56bed013209e34c98959fad51b2bdebacfb151e2993c8691e1f19",
          "0x142e622b8eb094d15647fd69116f59a527d8984710ab8437379206bc95bab064",
          "0x09acc90fba52574235b7ebe94b3afb107a68bb7ed6d60b21714219fc170d55b0",
          "0x26512b4e53591f187109b2b4f36f4131fc0bcd1cc606b6853aa20526b9591dde",
          "0x304cb4d258b30a6798cf5e3fc86e491809ca72e944066160a27ec60c6687faed",
          "0x09f24d8469717a2bbdb34740942cb66804ed67d932b768c87bb6b4ecf354eccf",
          "0x302a604d14a5cea49d0411d6d669797578de3ededd4bee595109a509f2005f78",
          "0x17057a92fd82f27763b98c0137a3daa6aebc82d1ee84dc286521c4b33ad16acd",
          "0x17c98c3e6b14e5c38bfd3d1918e7b32d85d4324f16e43448992ff12bd0063a79",
          "0x2d85baa692bbe01ee8ecfab8e20b80b8c012c96d69f694baeefc253bb98e49e7",
          "0x22a713aed1607d36caaeb46fff411e64c1bb3160db3f3431facc07969dab4d4e",
          "0x2f7ae4d4acfc8497fda4ac0d082cad38196f265c86089235093e1aac53c67e8a",
          "0x1afd52944628c9eef6a4d5cf21a9dcf6fa49b1da1fbd9c97697aa50dcd6cf712",
          "0x198e874eb31875b5796c3081424da73a92708ecd74e80eded5c8ac492a8011fd",
          "0x014ea1b78ec6247114d4615ce0d11e280c33b0a1fbac636f55f043a5ebf04ca7",
          "0x23b4797b3bffb21db4277e4eb13979e6774acf0452deab3d057ed6c0eb5f1712",
          "0x27c85c1c147076cd777f41b99d2e55530d4d43b341121187d010637cbb66ae86",
          "0x1f846837097639fad43c0f406a4029a3ab6d809c1a27c61e48b15c1b71365f1d",
          "0x26b338bfdf150311357f806449ee81b2fd29e3f2f43badfc7848948dd7781af1",
          "0x2ccc6e79733745f9b759c1eb5fa3671dc3d99065e8413d653eb24837a9bdc544",
          "0x1b7fba6bd285b5ee75e195de2bbb189e822ded19a2867c5323c7f6c575c198da",
          "0x184a5c858586996f08ac5cf5b5f67367d91cfcd71b35eba37787e44e7cfc61b1",
          "0x2391576ba9118db12874e5169e93c729f8aaef71d2dedc81d283dd953d59e0ac",
          "0x06fd613bef646afa4f1d57f7128518f83350e5efc0e41f8148d2ebbbd9194058",
          "0x1ecf14479487ad8f8e5e4677f73dbe81f3ce377ec7bed9fbf0c0a0f16b912718",
          "0x06fe9870f03a8f83498e73ecf2e214532b8b114a14cf3b342d7623e9d5192b67",
          "0x04b8da7397a519153f0756f72c9b62670ed5e983c02a4109131e7275d7f2d1b3",
          "0x2b1c40fcbdf7d9db85f818aad7fb333b7249db791d1f65f43f529a77e3118998",
          "0x278fb21e4cad110091702e5c8cdc84425bca088286772f1817308f3109787057",
          "0x177ef03c343328defd5228df7d4e44d4cd23956dfb134448a485b196572925b4",
          "0x0d201654bfcdd40cba52e51bd419c0f95c12101fc1063ebb8d81554c71c16153",
          "0x03b21c4a37026ac5d962119572d8bbabb453343f75c0d55c740aad13968d6e09",
          "0x072a52164e3175f63504fbe7a0e02509d050e5552490e23d7c9c8242fa870ce5",
          "0x030d0c184b743e3401114b1f395b12fb6a962191c77c5bdfef165977cdfacbe8",
          "0x24ba3bf7b9134803ab3dc87fd9e9c27f129764f91c34eb53b557ef3fea87a39a",
          "0x13e05d5c4e1dbad46885dff27afbf021f7e1bbd432d0a9f1a3dffcf3300a7a48",
          "0x113a2fe6e9019e83e0e898410c35326c10cdd01429acbb1fab5faa9cf474de2d",
          "0x078aebc8ff29a02e89514e9a5beb5690b75e598d2af2f9016bbfbdac02f47d17",
          "0x2ddd3bdf04d7d1449c12e60030b971b44c6577ab560f9efe8e867282ef1163e9",
          "0x220faf36a017fefd9df4282a946513585a4f6cfa5bc5f9766861fbfa43ca18ac",
          "0x0eb6a2ea9f6827065fe666ff3d1318280923a634f91efa9e43a223060257881e",
          "0x0be9458e9cfd6cc6489d7f20d1738f3e519b5c22ad15352cb444105ef4b89a8a",
          "0x1925d24635bfac09431b17383636f69f224baed3577628de33d1a282cd18efda",
          "0x0a4098894729d44bb96a4b265cf98090039eff6cf8b170ce3dd6f8e42566dd97",
          "0x19c9d480ef38aa13105b574a419520aa7d092a68ed6e76171065803da50482bd",
          "0x1c0a6c07cbc0d6ab894864dfce9df406b04bb0c3f7d7d4f00b3403551411c07b",
          "0x1d40bd40cdae647cff38b49289ad2cccffc669bd94a6aa724fa2fe232d4e6b02",
          "0x28ef2d4bb34fb4ff673169aa1cdfcbfd7a869974957ff7ec7bef4c731dbdb666",
          "0x1b2d5d6b171b0148947d55f61b069828285670f4b843d29aa7f4493bcc5a8923",
          "0x0ea0a67e504a55e07fc868ed85f3cb24431835409db5e6653cc31fc307d29ebf",
          "0x14a99bbcb8fff06772149dfbed0103dee78b5622afc0d99ccb2bcde06732c042",
          "0x28f711676e8ae8c2443c3f82a8b765edc17cfc6ed254b7d2338f922b6843a8e6",
          "0x145eefa014a02d9cef3bdb305206dfb1dcd4e4b8bb91513eadd1374c38e94195",
          "0x2379d29d5e9c69d6fba8ca261656c9d0370235a378f77cca2850cfb3d5fc2170",
          "0x2d12ce4fb01ed5ee6c444c59583cd1a26d8e745443a6721ab48739d7b2685e1d",
          "0x2dada5fcace74d74dbebe88dafd754b859989b09240b43a46e03dc6fba6c8f45",
          "0x2e23386575e2f0f1f97e4fb08438a13728dfd5030d398192ffaaa1fc6da5d159",
          "0x270d58901f888a0d3331391d74b72d35fe749849add6419cd747d6cd67db2d52",
          "0x29e48b157cb407f9ce069d0f80a4537cd9e87179d9eecab350c78d6990a4e0e6",
          "0x1d15d50631be723e2ce8bf8b559d975af370557abee33b6514ced1bc7dbfbf70",
          "0x19a954aa55569697082d97017cb66cc676d03bed6542a58a2237e7483ae8e3d2",
          "0x1146d8cd42e6e1e47b51d5d80660d7e17ab43467a2a5b5c8c0d271bf92837151",
          "0x0281a3bc2877b82e9a9796befbe8db3536aaff12bbcebd91de6887432f37bb44",
          "0x271904d6f98de7de1c70275d3e362c3985b2e7ebc073ae59058ac2b4e71394eb",
          "0x1b07f0f881d60b7ceddfe4dff878fc7162c92d8c237b5241017fc0a2aef43881",
          "0x2bcd2701a63735e73b0257b73d63ac7cd7792cf96ed0a0fa3ce3bf6220835aeb",
          "0x131f25e8aa9663cff8fcdc4f325434fe144056fadabb01d4effc020148f07566",
          "0x1e03c62451cbbfb82a6a4c851368b9a9cf79366be4c7937ef16e890bca6cd6c6",
          "0x2a8d3017f2b21a818d3c8c932566bd1baaaa7c45600baa0990aa67a49309cb32",
          "0x0174c20e110d106eb038cd9318d46691a685d777b71d8852d45602462ec5e3a4",
          "0x2639df073fa32789d0e9afab0f34422488eae06fd75ef55995e369e1b15dbddf",
          "0x0c170d68f133125763ba7714624b007475fb6787a1b17043926963dad16afd1d",
          "0x2fb299340483a1739b0108e631ac6e8917367253a76b9e7993b1aad9f694ec29",
          "0x2588cfe421a60702216fa0bd567cb266af1042923bc6cb57ed68bb90488f35f3",
          "0x22c8fd4638564b9de90ca35e661965ea6f01f37ff615ef308046fe136ee5f01a",
          "0x017cef09c980a80c4e53d7284b5b2a10dd1cd0ab41260d33cc19dfada88e5447",
          "0x1d9f0a3022c4764f9e5e6404397bbf44be049e5185cac48bc729ac948ab01331",
          "0x1bbf6b14ad3e7666bd58c7e9750f7bb9f6d6f70c4c2abe91e20fc51cc5ec28c5",
          "0x14c8d23e7b15787024794dc33c58dab8c117b51b4588f5ec5cd8c59f9cc30dcb",
          "0x1b91fc8e62a79e98f545cda2608f29a4169641a3f715ead78bf494822555f565",
          "0x0ae904147620bcf04a4b4a9679b2713fdd8cd50296d42ca318548e32b81e3b38",
          "0x166f3e332577ce10c873891b5cc742e7c34bb4d62b5773316688e510f4d82b8b",
          "0x0141e088bfc6e007a2d82cf717954720cb29b97b30c8c8125d5f9b46c2e26621",
          "0x118e0ee4202d127a0577a6eea29bb614d99c1034fe0e2e7465e91e97c837aa29",
          "0x2970b8f31d9b9afb3d3b912d90594a847ba0483dda4b0934df1278ba14bc2ec8",
          "0x2f4a5eaa4b7aff3fcd06c9d68fa2e32e4b4e629aeb93eccb552c9f96fbda3ddd",
          "0x0291d6cc7e8e5152902f5b05c13002bba95cb54657ef393e92bcc23b9bbf7ffc",
          "0x2e221aaf4070c2c0d735b5b0a52099c6594d38936914c9393d8ecd2327088c42",
          "0x103d669fc46b07aaf6cc4489e85724181503000817f8c1fb5d471b2b36179f22",
          "0x10dbe373ed70674013a939b46a07ee4f8c191e3fb639f8d0a781d1ffba82fe90",
          "0x116229ba1cf580ff86ed006b9207036e69cc0f1b55d4088ab34e01a3f25fa531",
          "0x179bb393b9bee8ef918a2ba2239ff1e6bd63d6d48cad4ab6f2d319f2999be4f0",
          "0x257a8dd0150b1254b585122987e3bfcdde7f914d374d2bec0595c46afbc0997a",
          "0x1015f7f8871dbab0d121570b0ba6417980a2d11b292fb2a37ac74c8a6e198dfc",
          "0x160acf3dc98d9d1ffb15eaec2287d5cc743ef3d16fb8bd40946a24633d23825f",
          "0x063c73552b19fe6f68e9df9438a581827ece6c31520117c2353c67cf0714d5b1",
          "0x03e8c80daf887938cd355ec710a9e32f44c47520aaba5dcff9c62c4bc0412a82",
          "0x1ac3f781cd9676c41ea21fd2b7cd3f38cc795eb6ba45a525b291c66b8ce7ba68",
          "0x189d712149326d71b0327f9b7102ca0f93043fdbcf400c18e3bf70106493354a",
          "0x25a912761f8d8bddfcfbc099bc994a355176c54a1831f8eea5572c476592c1ca",
          "0x1158c9758fdbbd6551fd2ccd615dbbe0bede969a6cd0f28040e93b5239eda2e6",
          "0x28e7b56cd29b16133e66383a20edaa6a779b6afb82772344cd2c25979a9a5eee",
          "0x02c3597feaf103aef0cf0da96c7817bfe5713828c613e326c975ca1309927700",
          "0x1c4cb6031554a2f40fcd1b71223a97975dde9f4f5c26ca08678870a139ed93c9",
          "0x2ec728fe7b69cc421f18d96bf7a826ca1b04261f24a98fe9c1e8a0a41b64b58a",
          "0x079e331f65c8a82b875922c8449bbdea3a111a68179e5d2dffff605e1ca47dca",
          "0x026cd813f24807033d7c0244c9f0790fb80da30e5e3c1e45d7c7032f2aaa1831",
          "0x05bd11c2b64de1a736f93ac8ff7e0c166f8c570a6f068dedaf72227e85c11451",
          "0x25e16ec5be688e137b2cccee835428dab939351b3227e8bebfae85f3a1f9c270",
          "0x0b38073981b0af418fe69ea55eda1be5d289b2f0de3bdde47ee6483f033b16cf",
          "0x1b40be531edfae81a33e40638fe85f88067919a14dd1de793e8eb1520db3a2bf",
          "0x1b3437d0f405ab27c185656999c538a67654438f28562b3a00eac395e7133835",
          "0x25abe96ddc21b2c17b6bfb3a8a90a2ac051b3871c87fb9e35383cf6d7223888a",
          "0x25e3fc93bcdffeb428bdf8c12491963e4aca18475844b67fc5676c73fd0eb358",
          "0x03af96b4b972c3371b076821359cfaaeaf9638a072c4f93e08ab119e6c7429a7",
          "0x232a48732df2599b09f1f1631d68129303ff6d40098f8b2600983e5534435c11",
          "0x0cdd518a91b38feda4681d3bc992182ee111e0440e9860cdc71cdb36ae80c1e8",
          "0x1b821898c43b4f3ae2007e994ea83a84d3fa63e7595db2f41312cdfad1cf2499",
          "0x1386203ae413c1942a336b2fa08038f4e92e5952e523bbdf7cf3378113ef0cfe",
          "0x0425657e57a9410eba03665cf1ce8eff3e0de9469b032d468ba15d9208fc20b5",
          "0x27884ade4cb4eec0c91c8177e0971bd5a9b844af188d28ac1980ccb425fe6986",
          "0x0ec81730de0878942af4b3827b8bd9ac4cbb1f3ab7ae97cd1bb135b0b7c78f4c",
          "0x0a93f1c9629ec9071e268148c6503ce1800f4cc3c5389c36e9ede3eebabb7025",
          "0x07e9c58dd7c4767fca5ccbcd7bdd8a4f4bea7858542b298743660654001ec52f",
          "0x0975e07614ccfe3cf39fd0208e97cad49c65a30af3590b24df1016e6a7ad9b39",
          "0x0283f302c98975a418a232d3263d80dd74300113d851de6d7b5ef3c7f9299450",
          "0x2b99993f81272c00553c71827e9e24b3270549e703515a6704393b3894a7d378",
          "0x03cce63cef0bcee4b9d5c753a190c249127a628b4eff5d557f2ec05b5d033c9d",
          "0x2bf4ce1340a1e717fd8df525d46439375eb3642228ada9dbaca5804e6998507a",
          "0x1ae9453dcb8890ce578b221d846612a3396ab24ac8057ed48209efdbf31165cd",
          "0x2764d3e37c82c76382c2c47f4a93dd8e73fdc7cadbec68bd3b03b4dd75c09871",
          "0x150f9419a3b6d46dafe052942e15ed496e5b162648b7ddd3cf55bf1e52f7636f",
          "0x0876dc242c8d2aa183d184cbbc4340d5a9a3a474ea84a99046999d95c7884bcf",
          "0x21ae86ad0b69ae69e4b9be0ceae01667895a9d9381a1c0de6d3864d228e8ec55",
          "0x0ba0ae75f3c762e9efa11794c8121d2b7bc6ebee38f105fec003595992419580",
          "0x10a16abfd6b38360d4f3257f3c51c9fb94ec5f845dd83e0c4ac4f7798f2d9077",
          "0x09dcd9b007d04507c0bc772c0ebf964d496e697461753bd1bb81bbc39583de3c",
          "0x0b1bb2a1096618ee3bae22563f63fcf7e85a817f6345501426c271a2cf1975e4",
          "0x044c7652068fbb0991aed6944540321bd6b09a1f0d6e91a54b8af4dba18471cb",
          "0x214ea955c4b2a5107d885a37734de5c9afcef744c4815593f970bbdac51db55f",
          "0x1684d36dcd86408b68230ca9f98e784957bfb7552a9253eaee876820bee310aa",
          "0x01666ceb9d9cfa4cbed159ae6ac945516b093ce589c59dfd5abeff6c6c2ee06b",
          "0x2151a99ef7bc07707ef7e223864c9e8c50836302f299aad05de35ad74c409daf",
          "0x2f56e15326295bd701a40314e42ccfd5ca4e0814fa54d312e7717e488da05955",
          "0x116ae009a6c4bb4c28c016716364fb7e7be3b21723755e1607b1a262b91a16ae",
          "0x2fdbe71f53d54e5b3bcb850ce61743d675be601d74430d9eb8073f6814205189",
          "0x011a91f3be424b955b2241d753e3d6d5b0c48ff9c68ba868f8a611232ba442f5",
          "0x1c7c9cf7751255070ebdd0e3db7f97e5d95564d33d2b3293caffa0434e6d788f",
          "0x1eb979221c31f6978d43e7568a7cee7709d68b86e56d77ec89587dfaa78261b5",
          "0x263b48e46edff89f2de5dcd258850d200543ee5dde31459b6fb5241a6bcefd76",
          "0x0785b9559c5da0bd57a80150c229bb2d75f51094c8e1a11bfea538e217d2ecf5",
          "0x23cf1ad5ac576585eccf97091be57cf0ea3bbb2d3af9174f8042582424321d9a",
          "0x27d4db4bdb30ea4e07550d9e077ba8a9d5caa1d418c1a76a12dc71ec55881180",
          "0x115f6242fd5412b1208cd4023d8cf87fb62d33a8292b231caf8d825701ab681a",
          "0x089bbc83094f64e293c91ae79a8b7e009d0f679c67dc19c62597b04e1415c424",
          "0x1d4a1b3e7a6d26a8c81d7e9f4bf08af0bf1370dcd0d2101469ed87d469d246ae",
          "0x2868583e9bdeb10538362d7fed8997e9ceb4b43ab8db5b0a4b2f140943ae52a8",
          "0x0b79459ea80e71539e8079cfb3eaae03ce6d0e3c856557c3f71fc983095b434f",
          "0x119119d4ed16eb8d4766c638d0c34acc159a2b8e24e38928c3ba875890ea1985",
          "0x0bfdbe4b4377205377f69c3cd5e93ecd2a9cb3b4ae2c1541d8e74b64e965a7cd",
          "0x0d41174cd6b5c4c0d34b2f4d841f3f9da4f100e20cf6140864efe6eee54c08a1",
          "0x21c5915b86d2211067d19fe9a318234043b80b53312749898b537783cbe4e1c7",
          "0x1038a4a9cfa20caba2d23ef064e7419792e83a31f0cabde4eeab2e49972fd78e",
          "0x017cc0079f9863177147858c89d3d7f31adaebfbe4c9e074ecabd20b7d2243a4",
          "0x294ff7e5e36f7690d60fad36b804e35659e82117ecd44deeeb79e58bb8c874d8",
          "0x1f03f5d810dfa62edd32521abd1d283c2416a28fcaa244d36788eeeb195a9041",
          "0x002113e2715ea893d00d101bb30e6e1702157d10faffe85095427dc9d9caeec5",
          "0x2e92c29b7a243a299d92e78195f30a996a3f534d5791a32a0be28bb7e8960c7e",
          "0x00bb300ac74564449f872674dfd9e17a185432f1f463317cdf9d499c87cf8595",
          "0x250e835ccda0e466dbd59a541e1d03c4fbed637ac6b715c82c32af588e1bb020",
          "0x06b776c5024ab6374c84f5528ca7930439da012d412f9369ee36db33fc435826",
          "0x21df8b318a44cc5f9d54bbefc97a91b787912bdd5cdca95f47eb9cc89abcd1e2",
          "0x1e4e1eaf5d1729d55230bafb1743de4732a18d66a9692849701f9a25e74ca9b9",
          "0x268ceb3749719379b14ea062c63b359449e70ad5816df014cbd102ac647f2228",
          "0x0e252b231c1f0ef18c8d6afbd879eaa7f9e61dea73247ca3af62b3c1e8794fbf",
          "0x0799c14eec20438a0e53b69882c90c6d9239b7367be50f64ce92d9974c2bdaff",
          "0x0fc050000c821a4cf4ee6bf4d91ba46d2cac2305118ebc194684a2dcb7d7383e",
          "0x261a8cec31c1289f2358c73530ed7e01c2eef88cbad4010ec09d036e57d2a9c4",
          "0x0fe536c9c7dda5070a37fd31135f77a67f9f3a986b1c23deb83e85793cf3cf89",
          "0x19ffddaefdb50032b58e08b4f377b1c0eb37f06375ff78e7ab7b605781dde8d7",
          "0x2e204413c53445351004316110f539849ae7971f877fb0841b19ee753ee2083d",
          "0x2aad98682dfe08ad2c9b15f4455a201d4a963ac7dbb189a42d2b3e1c3e03111a",
          "0x2c89f855544594b08ca43a7c32c31c0d90aeaf300132c8b4a4cc66843a181ae9",
          "0x17aa1f236e0e89d6c821337ec90bd7a78b32eb9bafdd9e83ff8c7b1b9784828b",
          "0x290feaaeff298d887d5a5baa47fe2e84070eb78d2079d791acb9067a979ac1a0",
          "0x26103b8738968671897412fb4246da86eac69235c4a1a71aa7a928034915f67d",
          "0x028a70fcea0f277978120db4bd478a6b09d54eaa8a97d369dac79716989b43c7",
          "0x2499d1e4544c6db94e9ded9ba93fd92162686e412099de5baf123211b4138ca0",
          "0x0a1aaa6aaa97e0c7228ffae517b59392211af38efa670aa06207ad7f05bf0af7",
          "0x25b6189ccf6ab3a759641ae79385f3e7de0e375a61c260d84d91b330f83616da",
          "0x1746b0b982fefd9d90e7ce72cdb5f92ce0c6990eb43a27cd53efa1bce881eb60",
          "0x289e95d858d2babe2526517d850587c3609a9f4ad32a646de51e866bba0b42be",
          "0x3048411ae21ced1b31d43d3496c92e66a26d53a24f250e17f328c358d97c220c",
          "0x037ec711790b5b9819ed2f20da092a6befa9bc44cbe6c1c21f33d3efb17688fb",
          "0x2d4029de72bf01e5937bfa34ff4d5ebbeacb010ea816d9fcd6e7af91d9a6714a",
          "0x0466fd8b23836d8e45a1751a1d0d28db003cd20545a88e41318c571c38fd3b12",
          "0x032edf5df6d833b5490840e0140247218d6254c3697d0070fdcfbf6f1168e841",
          "0x24098e733e307a6ee49e38ffd010589a51c1df21282d82788f5bd0cf8928d1e1",
          "0x2d5e2fa5e630042a0731ec84f4a548420dd5674b614b3de83e5ca707ecb32706",
          "0x0e77210dc9f28f0aa0b9330bda698258e429ada3e10f084f5066aadc86d7de01",
          "0x02ebdaa0993f6a702e710f8fc47392d7a0e5186294ba78ccbde291351087b4fb",
          "0x05667655c2f54b241385b86fcfe274d1f245699cd6aa60b6fe515102e6ed9c0e",
          "0x0cf97aeba824e4585cc9e73c62f0334b8ed4cce1276b939501fc2fbf6b2cf2dd",
          "0x1b0d81d58b85a80d5fd10b4c399e0ba9603e0d60c7a63c89c8339dfacb3dd88c",
          "0x165261806d574e0612d935eff3064754aef0f9fc86984b1e31da996961b565ee",
          "0x2543c122ea7e08406b7c5a89f385579c585ce647d98ec4400b6db8ecbe6dafc8",
          "0x18aac1e93332c0695691852880b308f069d8749f94c92372c1367bced171ee01",
          "0x1bf63cffb45ae6f08358df0152ace17058bb3a63b0b1f2567e69d42b44048bab",
          "0x20283d0443c843dfa2cccb285119fb4a12094c90ce6ada0f6def11ec6caa6b96",
          "0x1d954fdd63b3ee13a6ca13dffe9832aa9d9e5f2e1ecd3e407272d87c281250b2",
          "0x031b80ef30eb0f639c33fd4e7d5b778d607ce624ab7c0bbcd9b2921b6dd0b164",
          "0x1bae6f23461f682a6389c607670ca2c975b768ba4922543dfe0c78dcde3ed854",
          "0x0c15d34b4ef0d6dd324f1fa8ef058bf24b57419c1e49396aecc6b2945562780f",
          "0x0c95d91f46eb587506c57bbc2ccf87a0fc5348ac0dad375eb409aa64cf92da96",
          "0x2d1da15ca522aa1868740b9e801a008ddb7884657ae89507fb99457326786ddb",
          "0x0572ccd7fc6fe06be9bf2bfa8b4891a37e728805c609f1e282a0214480e62894",
          "0x2016ba766dc14ebeb269c939f988c0b0e5d7a16f2649e38877f2ff8a525a88a6",
          "0x1d570b5ff85730e9ad8c3261b6ae8574999221574fda8a97f19bad50dc2ec724",
          "0x143223d027cb22f42b20a25860333657c243a05e16f8a0fb07784a3f8b3f83b2",
          "0x0f67ed530f31504bfe3b87325682a5e9b916d75caa7b5b3d5e222c7f86417dcf",
          "0x10138516469478294fef0508151ea8164f146c8e377e90637c4630d0b45de53c",
          "0x286dcbdb9c85e5d6c68066b69720b550f46158374b88e76ba48091661b591e19",
          "0x189017ad0ec6599655fa5f5c041b189d4a5055a83914e5eb1565209d44366f1d",
          "0x123bce9fd40c7f1962d00668560cc3192428bc2296c92fd13a42d75b41b441a4",
          "0x1f9aa5e25387985073ca220da7df2a6cef8b60a089e4afd93e14eeb3d5dcb5e6",
          "0x103f38ddb6e1a669aa42ea1c7b9ab05761f1804a15fe22f26bd34367654326a0",
          "0x12389e0109377aad426be4716375841c2fd4ab598b60b6b2b4e7a2ef8a48ae7a",
          "0x204ef0a4fe68dbf212371431265460d3ad63691245c56ccd4f6990b989537d9a",
          "0x1425c7e1f5f5a42708633437672f8ccff1c17bf74dbefa1e99cd040cd193fb91",
          "0x1d1b25d3cabff58428e2696ecea9975a9484302d17fa12cf33d8416b4fe1d299",
          "0x23908186767f07f13d0adad116284f2f179144750b0f1ffdce62eb4797ec20e6",
          "0x0d754473d7c8757e822a89718cb7d7c5acd1125ca5e0d12718486552a3741974",
          "0x2d59de71c65b8678dd79d9ecd3915197d161b253913299238ef8d3d28cc12d67",
          "0x2b2f638dce6c5dc04bfcbfb40d6d547e52730cdfbca74f0c0bbe5fe25e0a6e44",
          "0x20831f33188daadf77c482c1f3aebbfccb9bc2755940684441276f800693c758",
          "0x1bdea03a87112ac5f71d27b0690eb578be20a7eab02ccf7be94a9b504306bfef",
          "0x07f190626c5ce403670abb23f739112ffb91dc234819180d83de234de743a31d",
          "0x21d03a8acc5002c7565dfd84fe3001d9d7025929c71749de25382bf9383c70ce",
          "0x037f8e1f9f310b909085ced938b600d4dd06a147d5183992d9792ac4458f7936",
          "0x02680cb420ea4ae49c2286e497ad3cbb55360875a2b69e17e1fd096ebac531c5",
          "0x13a3a06d1fb827ff1406192162eb23b3e27e94cfda6aa05a86ab5e325e5df358",
          "0x07060927b3c64111746648d6a8433ff8f373a4534841e5cbffe5bc41b9e688f0",
          "0x1d4143526045c6c418ca7edfbf9850fd260d231b52b2097fd22411041cbeef8e",
          "0x04f6db2530b719a376c6e7d489cd7fbc652e7d2d09064e3e9444978c9be197a3",
          "0x0542efc3df5bcef699f0fa7be5c71cd32d253f20488bf70d734241e434dbf09d",
          "0x2769424bb96a6c21c64a506107d4885fe53603c09ffbb01860658330ab1b57fc",
          "0x123bcdb0cf6e7afb47b866827db72332e93c571506e073c498ad1a92befaeaf0",
          "0x15a1d25ab64db0353b33ad1009a867276097d5a60b4b18dd02bfe855a4952b21",
          "0x0b9cb6fd7e6ffaec8246acd41e43e0712fd76d5cae56a94076cd816354db31be",
          "0x1f38c1ffe5470c8367677c8c65b3f83194cd9c7d2e8080a1c31513a2c23912c7",
          "0x0f32237d2d6ed00b1ca954df37c30c988f89415eed829133f5a73634d05f0c60",
          "0x1905f76e825e1671f867fb5858f25e53a45f8f306a9a1b6dee7033647fc8ad15",
          "0x091c7d54e02067adc0794494efd0ad906e8c338a524c37f825f9003ac312d02c",
          "0x2dba5a21943598041f90860c8e92223d7511c74beb4648caaae4b8de3870f3f8",
          "0x293a350bc3c789dbf7c2e5a015480678a755ebcd68e1cb29e41d1d2942c579d4",
          "0x049d0199b6c0f2b3122d7d74b31aea8fcb701a24f40ba5fe698de631d22f6248",
          "0x2b9325291ca148c86eabc2eb32cae477dde830f028f548b5b5c6e143fb8ab68e",
          "0x096a6ee98c5686bf3d586a0e54961b0a3afd6d52da377122e85a355009f4a560",
          "0x13fcc77ccb4a091ea452a3f4a10fcaddbaa7ab18eb3f88508bd128ad2ea5a818",
          "0x09199f06156eda7c8103343b344bab11f43551bb9507bccd47a292af3d4fba68",
          "0x2fc417c576e3fa9b6b38a82e0328422c2d2dab90879e42fea73033a7562166b0",
          "0x27a81a0c9e5d0c98fcfe679afde0caedce2c5fd66742492e80dce95fcac79ff1",
          "0x0467bf8d537dbe823d6a7d64ca2c7a2417a2d7758fc1a89ff93304fdeb4d079a",
          "0x071d82bca92aefe7636f10c9ce16f7e5b41314128ae5907e1884baa183442469",
          "0x1473e4434eee30b2e7db34daeefb0df47d1f5e939aca25394aa11a686ebcecb0",
          "0x2303403014edd8333b87d5cc4cb08ffa29ee752f6a367c5c9918f8e3b80acd49",
          "0x213f2f341749dcc702fbeb8eb916ae6575445cd9d4e5fd5bf047aba7ec25dc82",
          "0x064369bea4c676d37efe3a65dbd4316e0e1b6b51ac48bf9c01b52c15b24e8a19",
          "0x26189341509951e63ae3b022397098e5fa9353625280131b31dac3a1c1837967",
          "0x28c51ab463012d8ba9f0b7f8eec91ccd7691ef0570217892d57494c6faa6abd3",
          "0x2a3e5a660753c0f733827620cf3d2351e4f171133f749eae0cab25ac5aa4f0cb",
          "0x0bf314d9d75e35486cf9f62f6539584d0f96fcfdfea1617b76a4640999f3d109",
          "0x2d96368456c5fe26d119a5742d014db9e86feb0e2315c2a37bfbf7e02ca01494",
          "0x1ed8f2f743e4af9edd62d9add634474d54113712e5e948f05b82d06e7b59913d",
          "0x008d5a047a23396ab6b1c02d108974b25ae135e4f0de6805627ca074f3c58a89",
          "0x047d8ab6c52350d654f86b8942f10d2c0021bfe9dffa1db254dcc5028aef7100",
          "0x1991c857b30f3ed8a58fe229da5c13fe07d75199998df10921068afed09a6a36",
          "0x022e4866b8af16ceb7fd45737ac352805b1c575456e1535a9e9d9f7a79e0a5b5",
          "0x0a0840cc3720e659f311daccfe6348f287ce1dd473912c34979a48e69b06aa54",
          "0x0e4ff910ee3920c587d0610db1fbe08bfdc2db5381926263b177698810dda57d",
          "0x155d27b044856920bbdb5667d361a536c3f8c5a5d8599e2a7955dffee77c266f",
          "0x0cdc005d55f575c61a43d8a28fdbbef3eec35e56a438ab99680c4d1efae64e7b",
          "0x231e87ba98a67f86d501651f5b74bd53cfe26b9ee09c07a9d8371b6bf7c42be6",
          "0x06b4d87805bfb75f9c37a61e10e5579122d369327c344d516e2ce6c89398b379",
          "0x16e66d16d3f570ad5da3dc1ecb3e18b38eb8d8e05b2e8e7884491a2e1b2e562c",
          "0x0c66a6340c9c20cf66de3d6eeb9d49e8a737c233343df8d847e5a718ed5118ab",
          "0x154a4b19575147b6672bb0a721ce40957fae3e336c82c7fca199ab30e7512274",
          "0x15e4b6a70cdabf2c4de98419da811d062ca8e9dfcbe39bc7542f66f7b60bf63f",
          "0x1161ad8fba20760a13bfd7b7ea1d38257edffa8c52be8f410087c916f504afbe",
          "0x27b83bc79d2ad4da4b5ef4982e91b81074985cf23311a658dbd0ed301e90fc5a",
          "0x1a4115730d7515e8ae8d0000e48f6cefcc893190566d94d39db15517f401d9dd",
          "0x1a9c2b3b97a4108828bd76bc41968d31402b4041aadc416d65c20996ee6ac6ae",
          "0x156aeb50e11c39af946c5312fb0e14db6e919490571e0ed6b555556c31f97d90",
          "0x14d25507db869e282d0759cdf16e81006faf9f10e663883030997ab894149e2a",
          "0x0336977ba5510fb3b812bf39fa1946594a78a99c00101ef101727c2e8e7cd687",
          "0x07f8bb771e58e5761017a9562c6b285b93d6b709aeda186d96616197579f1b68",
          "0x154c478a2566294d2f96d834323009af0dbef15da62def8171c309a05ed1dd6a",
          "0x1b938bf306de7f48325de59877abcbfe2eea089eab0903802c7bf3fb9532627d",
          "0x1aa446890cf65be6ce7f7d603bd42e03b7fec0d201668f760dd609d31b587e20",
          "0x17eb7ee41c38747374a7b1f145787ac75b8d542d33494d65f0ed00ca4ed17edd",
          "0x1d1b95e9e4dcf3df901aafe1bda2cc8237032fd36ed508c61c8b4109f820bb61",
          "0x099d7df97cab5226cc7e3a35ceaa635c22ab0110e93a62516f0370a2967429f0",
          "0x161e53b2f10ee9aaf22596c621480e1de2090503fcc55a8295c23d45baf68f94",
          "0x0b9bb53d660364ce1a5222bdcf2a80a161934e3e92de5057d668dcf49dea99f5",
          "0x1c8457a265c1756de7571b30290dcb48fa0beb2b7d1e44114262515854808326",
          "0x27f9c6fd0b90983010d60a37d80a58abb0f3500d6d16c9bb4d6a52ac91c4a491",
          "0x26880cfa04ecadedfda3a24a956734d4abc8ae2f92644369c8460df5f21647ab",
          "0x2f3b58e9bcbe37e95cdd9990aeb26482c55eb2a9409e28e56cae24dfceb8dde8",
          "0x1117104decc679a66af2e7588d971805b518ac219fac8078cd522ac8980c6980",
          "0x01c745418e4cdd80ea18a339ef590e58362b3823b1fed2d6a8ed942190771cfc",
          "0x0cad8a954ec6676b42e43c86902432a1e17e2cf4af5a3274bc1be6726e1dbe3d",
          "0x1b30bb989db0337d04320fccdc7d66f0bb15b4377fce1a75b4278bfaa61d5f57",
          "0x19a557a172005f84242d40c56be7c37955cf74da223557b0eaddeb5b55c6181f",
          "0x2a1f883c5eadb6964d4847479f52c8250b4ccca0fdb292238b9375dcc218f4c7",
          "0x162a0e44db8faa02dbe1aa52b1680710a8dca6091387695cb22c1ff844928341",
          "0x0ed9944bfe48542efa10c9f20b7dd4c6b15584e126bf2c01c8e04568bc8ae21e",
          "0x1d53c076c105da67f5cfd822fcc9c291dfa2923c4c6d275ddb45d926c9711c2f",
          "0x072ba0a2cdae57b583ba1d72f09c745e50f4e16adedd6488cad8b793e3d2adce",
          "0x26e72dc609c2901873d40a7e739f70af722aa439a0fe417d7568c38e38f47ce1",
          "0x1f3cab65aab5d0cc6458519a14d2b0dfddf4c005a63303d1738f56d4c41602bd",
          "0x1dfb345ab565970e95c89ba297b6355deb2f2302b66179e1dc548983aae02d76",
          "0x0b60e697535215bf10f1cb1208e0e699bd88598199c6d8d652e69b90ad80e6c0",
          "0x081593786e302650396b0a45ff8f62366310a1f53869d0557284481ac4bee258",
          "0x260276a46e6c624781f3a777a9b45b4835a751c6b016e584da35a3c309844351",
          "0x20120b4045167313784d0c2cb4ede07afe7fb0605518f6f50cec1b8a4b68ac73",
          "0x01fc1e2292678af8dc5dc1f2f1f573c3ac4e195c5a9857e40fae92309bc768a9",
          "0x14c0047ad00b7d736a8d817e561e582e901b4481e38316568b1be267e775b93b",
          "0x250b4e6ad1c7ef8ca6c251c27aff101d7be1fc25fbc484477cbbe4e90d456d2f",
          "0x11aefbc0c4a1db81e5b74581f81f7a83ce7bfeefceab74ab4b6ada0d8aca2acc",
          "0x100917e088672481c83ce9e3fcb3db32fb72a83332e5b27af55a48c73a6f9a89",
          "0x037b5eedbf4da97617f53b898370933367620388d38e16a0bda6a7759714bbcf",
          "0x0af98b1a856c51387767bc26146888b2806e66643b446fcc3f91859fb39cddb3",
          "0x00fdd008bcac697e8113e71c1c0e4904f5259f60aa43ed448796c0ed948fbad4",
          "0x1781e1fcf5046e26f19bdaf3416ea604454e254feb0a493905f566b51510b596",
          "0x0e80eef14d5ce06847a51b0e9e4541b3ab94cae7ca2a536da9a264c83918594c",
          "0x037dca03a6b5e150b50564128082e6980a67703fcb783e0e3e12033004fd76bb",
          "0x109c28dcb873b3272d40beb0a3fe8f4fdb1e7a2ec5a79b3c437c19dc4e561f67",
          "0x19493c0f5c372c7ad0c4f096bf4c206602ead23d19773f6766f135a71e017bea",
          "0x1b10be965cb7e46f154e3c08a36656c2e8954b5d507c949f7597b971c03de325",
          "0x2de26e700320ed4cc986550d9e4d6a1656115670f3411f5f503404445b4adb7f",
          "0x11d86ac71de74607859deaff3cf093f8076d28620a88621c09a7aab1209a91a6",
          "0x2c3c3cd13f231389681701241a54f58c9f6af1ebfd6cef4fa30e9fa2fa4e02a2",
          "0x078864be7a5f36c07fa9248e98181040fc5a911815984b8750f944bfa5365032",
          "0x0fd7187cb6096ae0e12e4e276419a03edc0d3246203362d583cd064a6c79fff0",
          "0x15e626596829d802f0adbf2476e9566e1c36348b0225eeae7e38bd0e3eb2dda6",
          "0x0d46ded5521d165c4fb07256a2f7f5e4819f6d88ade910b9ad3fa6c5d7dfab10",
          "0x0795397bde46b5a97a23f72a8b926a329f3cd2bb6200506e7e832abb6453b8a7",
          "0x13008e1519be302934f4200329db951b700e322db1a87dd5798c2b9e1259e9a1",
          "0x1a3f403f644737a46615e047a42acadedfb3d84fccb73999cab627fb6050123e",
          "0x0c921bc32a9fc9eac6065f5dc6346159ef9f6dced9649896b14edbf3aa8264f8",
          "0x0078f97a37d55f50fbd63b87d595dc665fd206ed6c887509ada7f1af0d1e6493",
          "0x1bc6393214162a52026d07fe770e530763c725b7539d9b219cc574943977c6d6",
          "0x121898c012ec88514f155880c36c1755c158939089f8a895b565401de07bc60d",
          "0x0f1bca466bb24ddcc60ce92b9aefe7bff427d1e57e56f654fbdcc362eb1e0d6b",
          "0x0af379ec4d8d65332218f5138dc128d41b1b35a33a5d0efc5dbb6c881444890d",
          "0x04f21086392ddbe22291af900709be87fe4e9d52b1dd659ec563bd848d42dd77",
          "0x035894f580c826c669d912a6966478ecfa19ab1bbe80e5a70c6a1867c02c8d95",
          "0x2ceb915d2e4787cdc8e948a4ea35ae04bb6a02c0720c51ecf9989a94b8979482",
          "0x0633d77da5ed88f9c127c459a30d5f8cc0bd85377a63c4e7541ff735271e66f7",
          "0x22f713759545175f343d00265c3ad9156ae99a35f3045a03446fcd88ff33168f",
          "0x13e3034537e2b8207a22d1753474f2c4bbfb103f2473ec508348ddc50d60297a",
          "0x12236867a7bde21abd297a77018eeafe4b840df67f784d1b6981d7e91d70424b",
          "0x15ad10d6809344fd76a38b99f45fc3d10e98f0b4d1af4eedf461c43e92a6c0e6",
          "0x05e7352d95dc1c7a20313a53e66e69525902a17e1ed43859453142fc49529b84",
          "0x29f6e26d8d6141e1955d9fb3226a74ac71f393b16aafab41e3c787e71fbfe196",
          "0x1ca3c0b4056dbab797c54688838a074cff8de6bd6a75c7b6081f113b1fe37380",
          "0x141d31bd71dc6bc8c4ad59582f59b963c05623de46199438ba7edbe4be2a4660",
          "0x1063538fa44657399e12597ad0c9220fd608178de399e5a98fe8abf3ac410c83",
          "0x0a1aef7064cc9aa31935dda57cdc4ee0f1104d4345bcf2e42ac48aca3fb9158d",
          "0x085280793128e1556cbbfb35c9aa97aa074c4a60d8169427dfda366e42686aac",
          "0x06a3c8dabb9a0040af5671cb1ddbf725b484c68360ef5116e9b7ec05fe0a6966",
          "0x09a5f6596e0891dcc5e27a3b98ccf537acc9a8bb74f8502209b436dc071bb4c9",
          "0x11620412943c57b902af3626ecff608f71e3f958c87cd0014a21f94c9ff355e9",
          "0x052144d7b94eae33de0d6cceb2e26c829b7f722ed2f9b6010606fc6f38b7cc63",
          "0x07ad1ca346d6f4cc17bfe58274c1b355659092c58295e4c0e78111a387aeab1e",
          "0x2963052dd36d3383f358c8024308dae2127213640c785f202a8d83251244d4be",
          "0x0489690a5d56372b457632d77ccc8b80aa24874737e9a05de269e11618ed69fe",
          "0x1c01fff06b37a517d39ec7afda66ee768fd39ec5689b1ecdebf31299c376cc66",
          "0x06b30c158318d9b5c81edee80522afaf72e880fa327ccb07f8d87ddb66f15edf",
          "0x16d571fc71e5e4a9630373d12b85a412268322cd94707eee0d678d2b6266e9ec",
          "0x067dd981da6052087bbe44ed357898be8c108fb7ed6a13481a650901300cd584",
          "0x01144f33bf1bdba903eb0b43449b24687bd995f0dbbcb654e38aeb94a6d93a1b",
          "0x1614036785ba16cc3e158bf70c214fc0584e433fd14009d576a6787970ec0bfd",
          "0x257755228300963581662fa0e767f42d5bc6fd642f040372c53d3a1fee9692df",
          "0x0de8628a2b51d70e30fffd251db4dc618df73081d01df1612182b2f3bc07ba1c",
          "0x2fb3c8b96fe17cc14327e848a61007ac7f0432d3b40f0802f764ce7c16866428",
          "0x1b68037617ea65f863d828f2bbe441228b9d76d9463d83d779e5eea0ddc92297",
          "0x2882c16547cb68f8806b77ad813ee36372353e9bd1c006fd1961020508774411",
          "0x0bbf09ef8393989d28a68d1e0bf9b49b9335d0c3611136494e128e5f7b64d8b5",
          "0x02c70af6d36c07f4e4b654b3f8ad98b2c91af09b7bfb74079977aa87f99b1394",
          "0x03e7edebd18cc3ff82b835ad08bc4c3371b7d55286f7c48c747d930127f62b5a",
          "0x2d024df041954ba23441dd927b30a1ed1028e92d4c351643296742a974139b6f",
          "0x298c0d1fc2f36e8fff334256bc5cd7e9e43b892ca176292b3a64d76227cc49a9",
          "0x18e6416958898ec89885353630496c2c5f572ec50dc2d04ef17869798f9aefea",
          "0x2d53a27c2c07fb96058b88c9789fc3f8e1d361a412bf164b2aa0e66e700b3678",
          "0x055277041cb7a122b1618b05ffb93f723416ea8eeb6813085dd54a99db3eb13d",
          "0x2643e6d5ded06a3b540a3a17e76cbced06eace4c7f8e95e99db09a1cf674fb25",
          "0x04c7d00cd7767e1c0a83375a7b11d43bc2fc2d9ad3ff6366890a261c53c310b2",
          "0x0f89d1e5310d06767b2f0b1266d56be653d83648878ea25d79c4ba05d7192e26",
          "0x2e6a9044a5f48fa9bb75ee3a7599da717dcc8996cec003d26de87e494ed4e97a",
          "0x2c99c1ff6a5a75729540c409b39faed9387759b5731f0401e86c9df9aad08cac",
          "0x13ead7267dc6cd6162931836b07745bf142ebf38fbb16c030a410055aaf41e6c",
          "0x17a87105c96c2026c777aa33a53292ee200cbb9f855d990949a36d55d576f7cd",
          "0x2ead3b6ddaf49661bd4bf3f6cd1f12127b8e26d7baf9366005861d08ababd4ce",
          "0x1947f8c0db2c58260479222a71b692e4eebf33cca2cff82f2ed62f90f51f17aa",
          "0x2bb8110d2109c6a1f2ec56bf72e05a161e94919bbb0d855d5bb351625a409e86",
          "0x017dd76cb0dba4956f8bfb5311a83222e60bf5df2e20316b336693d2871a745e",
          "0x1b6a1fda58c084a90932e269b8e56fb51cb7741de326280e035d9d89925a453c",
          "0x17d9551144697337ab2dc2942cb774bc424408dfc3fe1819b3bb30fcaf404b6a",
          "0x12ab68bb7ba2a36fa645f90fc7220d4f82e8384e231b09ce993938a349e0d5b5",
          "0x0da8dffc7bf3ca3d2adcbd362035aec9296bc74ea67d1e94a2f6f7df6a0d9219",
          "0x1496cb3ec7cda51d85f776d8613b0430e974d7c3a7a6a843e66fa2531da27578",
          "0x2e81957d2f73aab44a59030affc945b26172fce09b4d4351ae53ecdac82dd99e",
          "0x2fbe8d6ba5027296b98f0277b27e287e4c59e9b1f84624e0097db390fa65c090",
          "0x2804d45c96d2d8422c8c1ddad8c1115d92aec2b16930cd70079bd44cf41fd98d",
          "0x2b7ba8b64a1cb2fe67745be523ff46a4c8c0408092faa2333c45d18348211415",
          "0x0f506b1dbb1b5edf2b2d93bfbc297c117df212d6127cb29c6ee60a2f57b9e215",
          "0x2e9b52c7f050b2e79bd377d47bdc1d8246fadf3db799826364c4b7ee2133207e",
          "0x08151faf272100b459ea31b72c3abc2aa0ccd71adda2ec0196895c9b2f9a6c35",
          "0x077dd8a546141be08daca164600e35d10d4d4e9f536163d41c270c7afedb58e7",
          "0x3061e55590411e9f811476d6ee78bdafd88f4fc3d4be60b561eb79e0e17831e0",
          "0x0f5000c26e73824a45300d0420e81d8cff3e8580387e9310d4f46908cde9a92f",
          "0x091d831cf15ead47511b93af75c8305b55610b3116d07a164feeb6aeeb21f7a3",
          "0x1d3a3e735d4999103059079b59588db5fa076b94ea8c70ac7ea6cdba7f7a9553",
          "0x1e89d2b3e30ec664ee929c38842721c074450a0cbb42a4a929654b3756d0bbba",
          "0x1c4bbd5f72f3ba7d1484e517da5c0af72236341b6a8e991fe9e02a19cb24bf71",
          "0x2a7c81f7813b82e3b263fc5739cab23c5eb35d84c7d82123f08625db7b4fb963",
          "0x00d48e4062cf25ed607d179bc3d84e1f49d30e21f7838386ac3b203701ae9884",
          "0x17f43305942f3566265972ba5543d4a8845dac0c80e2cbcb56aab179d2854157",
          "0x08d87717d5eacf3e5bb3fb473776a5cc47d2ef805bda1e77059026c7c6629741",
          "0x19e6e275500bd0e80203aa20c0ff65f7985455cb0096088a5b9b8de314900a47",
          "0x096d0f3b6dfc5e9233dbaaacf69bc70a0aaaa1bf6c0e04e02dec3b5cf8889f86",
          "0x00b9a564349bae4ffcdb0453cb7230aec5a15f18eccdf1910c10dd7ad3aefb08",
          "0x237d449c1548db8987917574ce540b1ccd24eefd90e28107866a175c7c16af00",
          "0x12ed08f7b9d12bc30456bf424f2c05c6bc912990de7318e2257d98a413e47deb",
          "0x29611601abe18d26f5c198268af5f329b25f42b8f07a65849fdbdf90038408e0",
          "0x0e17287eeb77d085fe7a0b10fe16540368e4b1b457425bfca8638ed10f62b201",
          "0x29d15813db66650d5fb633cfe0fc56e242ac3d039d1de205b0a26178c46434e3",
          "0x07fe7f7be1fcb36aae15a33171e9d0d7f2e0e193e789e57bcb8f016e08116182",
          "0x1fa87be196f938da229ceac44ee343da8f2c3f956c8e50095d36b73123b7eb0d",
          "0x24ffdb52f4f443edfc06b8f31a9357253c6a157aa0ed35119437196c2308fd2d",
          "0x2d4bca77457123208fe4508ea4eb49c617032b6bc735fc5399b0c2fd6e0b6f77",
          "0x02311d7f0ce5763f04be120e804d7e894f789db9ebe2f85a62659a94a27d3bf7",
          "0x1b6bef8d51e9451f00d5faf09a78393ba83e58ed224a2e21c0039658bff79995",
          "0x0908d6045d96d1113c4fc30336df3011bcc56ba66eca87ec8d2075a176a76bde",
          "0x0d94f3ee8083301f8e3881008c66651c32f74324d41423ae0859ebc096f76b50",
          "0x01ea89e11b87e6fd00623489d6ddda9bf67efd74a703d3bdf58bc09f68a0112f",
          "0x0d07457dc3eecfc6ee77c7adaaca1f5a369e096def369e66519a88701baab786",
          "0x260461a3f76bb066094d76406587ab6377217fed528222da29be2cc7b90f1d2d",
          "0x1a229e393e2d30c7978250bfef3165f267643eb3c22dd9f1cb1ade57ec1bdc1d",
          "0x14ae23496945484e158822450bee1d59df28a552afc9dbdce748e36553d21786",
          "0x00a287200ab7d925a94553e693ad30d517961d7b5ba293d9d6ba67953438ba72",
          "0x178b818748633614e922de31583f27c417c365818953d40cd44f18042ee1d1d7",
          "0x0084ae8aeef5fb792c36cd573a0b12f0dd0c91d6d4476779e1d99b2925a05432",
          "0x28a6aa60d570f0999b772d7c83cf5583c9b23dff39f63388dda40f6ea4adcef2",
          "0x1afe2a4839132b0cae494f76f6fbb09fc97a2dcffc3cf455f644dfa1e89e019d",
          "0x1f5d00c0c3a24bc115798720b1f9ba6b52feaa44522ad1fec2c1ac9cc2cfa9ad",
          "0x280c20325d10c5c9f9526576d6019dc0248f1058a0afd5da5a0cc65a6debce93",
          "0x0aa34e03af3b028cb67d1f4dec7d789478a3cb73a27f01c75f84bd466ed9b32c",
          "0x2de51efeb36dd7f5bee9b67afe192ad7ef4abf63b4621247be883af708828074",
          "0x143cba615b06223f5562bd0a28a61a33cf8dda134c2b41954e1a566dd30bbf01",
          "0x14351a9d27d670b7aea2b999bb187d7ecb0529f9203aa036142e5277e6815f6e",
          "0x046922904294927e6b58028050139001843032f6967ad8a05a204425711e18ec",
          "0x2e056e1ce369ea903c473abf7988a24d82fe9fe0c87b7c9a605c656dacd3c5aa",
          "0x07245393912f85302ed7b5d3601fcbbfbaa6f35920145ef0c59ce88c1a6a9219",
          "0x2309fe6c306ef736f61dcaf65bf6d9b39d10d2e9fcf68ede37d511fa4bbdee11",
          "0x170e4332da217cb3562e25f5e200a19cf36f84c986296e71de1fb26125b6e78a",
          "0x1e3eacbc11e9c8190274d70bbd5dd0ac64a374595cb77dc08e33ee5e0d82c609",
          "0x0998326b8f93e6da7a460baf6cbfd1d29db3773070becab001c5b4af76cc24e9",
          "0x257d940ed0cd76647e2d3f62a38919b3c62326a494ac9e039f82a22ef1e68891",
          "0x0f4335d10bfc05a979f038de90daf70272bbdc2426e4988646650e164c5627b1",
          "0x1de2a72ae9d2a5632c3e6239e61de783b7b84c8bfbe97df965c739dca7609284",
          "0x12f44b0e8c694e7bbd5699e4fd0ca734a8c9cc3f59ba2eab4a329cf5cb229289",
          "0x0fe2692674fac2fe017fee7d922928dcbd3158ea209d7948a3d769a709d90d45",
          "0x1075abb0e5a208cee18841131ab4c87305f1441aafcb808cfff68477cc4fb2c4",
          "0x1a64cf8c020e712b334dc8164f247def9098553dcad7a440c349fe902439e93c",
          "0x296a51a4ab990c5934922b9f553e053293caf46316e058bc79ad13a37f7c82d3",
          "0x138ef5ca84980e11dc9b54ce02bd516621b65ea78ae0974c1db9a6720c00223c",
          "0x28a75cdad539dc300a2e9518bbfb47cfecce5da01cf1e90210782605181300b8",
          "0x26d2b92339d8d44b3687709aba95c380438360fdf88bfc7a011382bd2a7859e1",
          "0x1df11fbcb77f0ede506504bfb4088e3279a79fe6b84c3a51af512a5fa9e2ae36",
          "0x1c2478fa762abc607fb0a162a2473b9e4c983859e0ccf51dabde5fa7c8d67789",
          "0x2ddfe02cdeb5759332eae4e2b5edd5381205515653b7a766967b829cab80e18f",
          "0x067f9d082c4ae52e53eb02ac1080d31a93537ea24d74a510c89b7da79bc3158e",
          "0x010f56349169a98c01f7e8da62e515e55aebd4d44c4503783012f588a37c7280",
          "0x02b035879b1c570495436d250a2a45bd85510b8a6b951629a4a5bfefaa7117fc",
          "0x1059e4e3320b8c2d66a6b6b1511fa09e619c4b274201ee8741be77fc5b39a6b3",
          "0x07994b9136814469cb0a286067f632b349b5ae24dae78b056ce45d722752eb90",
          "0x269e470e88cbd936f4c35ec5f0042b9d6fc138f3dca5de3a83a99321c8c1e4a7",
          "0x129f3f097b2aa5746ffc84ae17aff9a892a6bc4bc965ab4bd1c65addefc160e0",
          "0x19f39b427cf94a65aa7bf76a405b43c0d0b4a824c8e60ddd645d66f0a91ebbc9",
          "0x1cb82f7ce4871b4ab04f77469d0100857e98d6d950dbe8ef64e35681cf888c32",
          "0x2fcea06bb3c4f9c9158418921b8c4ab1380d155a139894648aecee891241413b",
          "0x0c88d2ed1d6ffc58445502752247df534c2577b18fc83f8419fea33727e56f6e",
          "0x0a1da581a39db4e8dbe4f5f686327e7cafbce078ca7cdfe29ca5d3ae74ab1d26",
          "0x0d56f11d19300b214a6309769c23816d9109b415fe6b1fbb17de6fad7d7e12cb",
          "0x2e5745bd8e65df2e8c490465d8e9357e9afaf55aa182b8a46a4d8b47ca3e6be2",
          "0x1da803c3d0860644231a958b17d2c22ea4ada1347c5748f8ab68a402e77fe8ea",
          "0x146a6d1fc8428ca679fbe8c69616ff6798f59a827d47dafc15af34fe5182f08d",
          "0x12ea0731eff3e53c881aacc0ea77c163e30001ce74a0f5773779059f96360fb0",
          "0x21c455910996187ec677c08373e20c41a30a2d4c06ceaf21b91f0b14a13c9046",
          "0x189890c68e60d975ac6e44d343b29cda1dcba09e0a67e61e2cec8b2fb9f6d8c8",
          "0x2112df96cbf5b91e4f19269e8fc74f24ff3663ed5632a26c9c3b7252b502cfdb",
          "0x05c4b82abfb0c152923d56f0fff0411a3b5d11bf00539445ff183d6b3170fbcd",
          "0x27d88fe28f12c51e94af9b2b3f14099afce73a3736a9fe1cc89b11fd4b84447a",
          "0x17450b33b035a97eb613d289ecf775f4003044d861eb41963a5d78304ebbd905",
          "0x0ee988a9ebc8e608d631fe4324fd78fa77e00e402f5b4b0474723ee47ddc26fe",
          "0x14a89566dc2f0ff0b64dfaf5d8703dc9f74a0f9ee395961832c194e3257e0edf",
          "0x0ce667d93177e3dac9901ec3238fb0f403b7deb370bc069513428be70013464c",
          "0x016aac40ca45f818abfef9c158704a979b32a208b1557647c606de868582184c",
          "0x0745f2cebe4c7eb3a170b3aab5825d5c2bcba8c04d66de1007f587b2a1e535b5",
          "0x3061f188eb54dc71a19c698f1931ee261ec69297f79c420805ae0751496703d9",
          "0x1b71a417d12ce73a3b7a7025a14f8fb51a90fdec9af9b1dcd8067f5830fc17fe",
          "0x2abaad97be28bbf4339b5a4be2e24b57e8d9cc14775f5b717ae8cb227c8c581f",
          "0x15797c5a072cb00cdaa3a97cea969bcd53fb2984c23b7adb237b6065c650dc73",
          "0x29df7edacb34a24b1c52d8142c5338b98dc340c0cf27bcda968891e63b8a7a6b",
          "0x24023ac420b27f83814bd182a843f6ebe5739bb1b9c686f59ce8a1a9478d7044",
          "0x0bab405ed11caa543f9cd6d8863a65dd800dd08e8c9499e5d6a58474800339f5",
          "0x1270d139a0dd8a66bd9d360a9e0111cc440b39ad7b3ab4694b3ce507ba64a922",
          "0x04d722503a7341a690f338977b80ad66d0710aa65c6f27bd49823d7c12c7f8f0",
          "0x07a08300cf55c60191eb9e9eb63b40497980883796856aceb6147e390df57143",
          "0x1436ea3a03399a958710d4a76fa9140b32d5180d16dd837da335df7fbe18dc42",
          "0x03e5972a9ee5473d2bee70683a4054098d41faf8a44c03ea9d09cca460b186af",
          "0x212989d49540fc0bc6b1a2d150e3bd76a621ba2cdb4475ab1b72b0b6391d88a3",
          "0x0eb7f400b0e9a2a4635510a5379b4a03df8d56c54334fc8c713db96bfb3a5d99",
          "0x2338c348fd956af6e191909a22a99009acc53bfd8180926f591ca7f78f8f986a",
          "0x026afcc776011c8bec5e32f56f149a511d064df09cdb28f0965b701558e63838",
          "0x21da486ba0aa4577041578b2716221f15b5bb054ef276cd9a4383e646a3a23fc",
          "0x04accdbb6ca5032fa7396c256fdd8f52bf7412d11f318c2f8293aa1c9832b849",
          "0x2de8a8d4960c10ee9dfe8ab018fea3c87553992f59bcbae36cd42af4b455bc5b",
          "0x215ae1f57e2421bb33c2b4c2e854084cea0b12bcf61a53963057a9eaafa19a7f",
          "0x1a81df3c791bb08768948ae63fdbba1bd42efcb009ffb07aad880b31bb8aa68a",
          "0x141983471c97c0debdcd4f0f085145364900fba8429e1e5583a4e561ddad5bc9",
          "0x0176cb7a66c586ec1f480ceeedf332cd6cd5508d4b55a1a3286289a178864c1d",
          "0x03a27a1378e601187b81dfdd76e3ff8190d170d1ccd7f7cf333cb61f5e6a6afb",
          "0x17e1d8919b6ada78c9d1823afe824714fd0948406311b21a2b94d3a0d1c08a9d",
          "0x161d6423df64e1ab1e9db604809d3ac5fec7676d57d42ef3138d3f0d22116fa2",
          "0x2a5a183c02ec47c022b2f65642a493730eb86d977e599c0d57b1d57e21cbabb6",
          "0x2734cc336702645a5769e176b62627b0ad899e8d3ef24e84357214dea0675e1a",
          "0x19a0bc5a4ed65b51890c60994626f86d7cad3719879e00fd17b4db6f2ef09aab",
          "0x1db6087ea9f42685265847de13ddf18dc446b158f84bfa20a527d62ec9841398",
          "0x1d544bdf3c2f10b4aeeeb8543af54309705f7a275f093edc7690197ba3a5cba1",
          "0x2b1a876127921b75dbf4d7da75a6bedb7414bc5d55c998dbee49f47ce200f3b8",
          "0x276ab335062e36197fe442444f9d9450cb76e171c00c3ebfb7617bf0afbaeea8",
          "0x02fed58d5920b05bc742cb65a1d7e50dd8e6a1baedc27b6de3ad6a4fbbc259b5",
          "0x1f600a529dfad6ff62ef171974ad70e76f3733f0c98e0eb1b10c95f13676095a",
          "0x2ba35eaec2c38f4faaace52bbcc068d30b21149a6088d0467952542e9dd831db",
          "0x16630e42aaabc020163e87c1bf7463c1007dfdce3e1ce9c5c28fe64c1b7df093",
          "0x1585e3c692b27e7e342bfbb4bd4218e7ed01efe13c95daaaca62d2f5455f6506",
          "0x18d7cf9c098f734da2a04f93a309f774820e141f9aa92e8cfca42d8e22c61d9f",
          "0x0646a732a7d52e8abc0441ec9b04d2af6ff7eaa085a22c0cfd82ad0243b6e64d",
          "0x04ffa957845e1e01f2916f2243815f8e5e3c76361f3680e259218c0d28f39f14",
          "0x23d3c890fd6525b7814fd3c325dee2ffa11f67e14cb8bf3de22b29058276d1d0",
          "0x2000315723a56cbd67692146cf429cee40952ebc607b3100f21354be0605c2df",
          "0x0f092bdb3995305ebfe727512ebeec1ea48d29acc977cfd1169588326f50f999",
          "0x1b8059e616227b9a836099e9ee37329fb5a2417e3b5bafed731daaee12b9b1a6",
          "0x1d8e60b25f1fb1d0b97da0f17e094258aeaa40b142c97a863b245f787c75dae3",
          "0x1cd738d6519d3e822a6767a7dbfd23428e361e3725a95bf62d30723a414ed1dc",
          "0x232c85d492596d3243cd72089c50f3a691fd79fbd60b6cbbace1661a26c7a5e9",
          "0x0de60bdb58a4e7c7efbd95b55017d3201b746e78a9a6f4bebeb51c1d6ee4e64a",
          "0x02fc101a02306054035ef59b60e1e3efab2c3f65027f93da20756e8abef12057",
          "0x03f53ebacdef572b73bea99550064782d2919436a0f2b5d9223b2da974e3ca09",
          "0x0e27834cc8fbea3881ce43d9896e6079b8e8c9db4d77192daab89add326aeec8",
          "0x24d40616c713b9099f7c8f3aabbc731ef52e0e96693a746a387d8ce676d6f70e",
          "0x149d27d0cb014e5ce9c41a78a76a8ff7a37501def603b56bf0397edd176e0c68",
          "0x00bcc978ef69a805173a7bf1d1d56518813032502e4a1d772ad91a9a6a7e700c",
          "0x06964a0afbabc86a2f491e86270ead44f49f98622b88f4c44ff86830fcce1640",
          "0x19342122713b66231b0a7cba1993c5d904d4279e978735fa07ce6832da4d6e61",
          "0x26f535c20424267a91005fd224230a4aeebd3ac079a58a78a63520d58716f71e",
          "0x2bc43e9309052167648814454cbd77956f73aa69b201c94fb517845a8c7198b6",
          "0x0d9922a3643b4c9e175b57df597f10b70a46e9eda419564c33675b6afb7febf1",
          "0x11b438fb1df0a4557fe6b1405b6720ad4a1537fe1b42f884b841007f55c61aff",
          "0x1495deafa1bd1f27b7541138eae20773ba01d0d9ec10b771707955e78fdaea33",
          "0x26a73d4a105a86611a01bd22d90e0eb52dd0340ba7476f771190cfe587ab7d93",
          "0x16ddabce6e6ddd32a9f8a3a674851ed8976e0f53c1f7f6c6f5a28ccb00d97317",
          "0x0581eba655a038de496c785d31d65a919404bc25f0922a774bc399a67fe122f7",
          "0x065762a6974eb7ced80ff42b534bc545ed6cde0843d2583ee7022b9ce40fe6f9",
          "0x17bff1a70e36b684a2ed9dbd95530cbe9b38b87d76eaeb63359ffd250b78c5e2",
          "0x18e68289ed3521949172f06e8a59dd9b074dc3c9dbc8203d8fcf3818c70a1a9d",
          "0x02a8d8ee03d5f03a69c0b0d2b1f35792747b3429f00b6e011f4a141345e5724b",
          "0x0300243abed4b18e061fb1110abac6328ff55dc53162388f9dbc753749946b8f",
          "0x0f2ace21877125cf2e78abe96afb79fdb5d572a369f1da4f2dd7b5776f6652af",
          "0x26b7e92b9f4f8776b2b9af31ed850fc81dff18f70b165c8447275f6ea5c1ba87",
          "0x1878b3a4fae1d39825386fae5f199a1b3b5f8f50455ab5002517cbd2eb7b5fa7",
          "0x0062d0d89e967bb6fa4c987c0a83f65bcc795c0ea977b6dd63d625e06ffb0a55",
          "0x0a03b278b25ae2e7d31b31082a0d0cc57c8e7a432f24ce9fdbccd93475f3d135",
          "0x100da120ec2ae772921c7c04b83ed8ee7682d2077cf47740086c980e04e38f6b",
          "0x2342223b205a2b0279d9e5f0ce7f0f9bcd772839a34c52c57d0750be1e51385f",
          "0x2df7f4397bfc42dcac58480f57316877f9aa21ba908f70153dfa19b7e52f36ee",
          "0x23622584c86a8ab59fbaf2569481d964d1e15f8073bafa8c6e92fc2c0b187fb6",
          "0x06bf808cce651f581a1ab25261d66b74f604b70480af6054cc45f81da3290ac4",
          "0x0f53c972702cdee0f9fca0a70505cbaaf6c9605909dde03cfe4c337331fdfd72",
          "0x2988b1a79f8d22697c0d51b537a9b308f979792b1ca47cc408b8bd8ba6f6790e",
          "0x0c41be010c41896092f74093791d90c85c0404f92861f74ba1776de6da0f3e83",
          "0x2f88c192a822a2a0b2f12cb349e15ea2b3f3b1c83ea2bf5461abb010f80bf3ef",
          "0x03a443a4b0709ebd40891c593ed528cb9e9f65eecc40af1f231574b7c9738189",
          "0x28f8211ec19a4dc191f757371edfb788696efc2b0b592d65d8097f38e723f131",
          "0x0abbaa7ef23a5d98710e42a669bfa42305adfc1f8e49e05bb3abdc96c8ca73ec",
          "0x1f04fb54a09ee2df286b6c5e089560b8fa61e062bc90fb7298d5213491211ab0",
          "0x0679c1bbbfd7f4d0f2c2c18d82948d060f3563f28a1a632c99f2c64a461e8267",
          "0x2b44d70ebe9679bf7681b2e1a3249e29b5d800109367a7a48ffff53e969a13d4",
          "0x23f3f9e009138f0998b53f841093307a41ac380348ef662e348de2827ca499e3",
          "0x24811a70ceba527ea6c7faf5762f5813591c865170d2879a08bcad496b23201c",
          "0x01aa535811fbb13fe315f411cee03e20a4a3c48ec6dafa75fed0e12352c34bbb",
          "0x0ae3df3e4e59c999b16606ff38902c761634e2b49d63ea716929a61e8b57306b",
          "0x0ec1accaab8a76e43c4984f380d2fd4a1f8bbbf49a16b889467f7424cb06945e",
          "0x1b16efc5729c815659bcb1becfd1e1948656ffadff07978d138b54349f97b76f",
          "0x11fb1514ae1b038db9750815dab5d7ee929cfb80674acc541bd0679b11ff075d",
          "0x03e8a08bcf09eec1dc2ead9784a919810cec64993eb40cd49399c2ea31ef27fd",
          "0x232dc0617b6035c98f66ffc4a8945d1f878df5e3258e9b542178d6ba1b684e42",
          "0x12b2c5d51a142d7f8a0540228e2ff3cec778e91e4ff701deea235ec7142047f2",
          "0x09d6f2228acdb9d4a06577ac9f8f76f2c858ff531b957f89b822a8d28df70f0b",
          "0x26e61018fe4b3ef6d966954c74c63e1e1587784e276ec198232b65e3d1f3b6d1",
          "0x0bee9635b9ac510099b9c82dd622205c67f1361972265939c0c197f7c48a0e80",
          "0x2efc7456782b90263f57853eb2807e67a88cf15f2cc756b7f4a9570bcc38e379",
          "0x283fb2e8d6b18ec3f4115d0431753eb6facfe99f099ec679abd856917dc22f8e",
          "0x2889b870ee98688faee8863a5484afcb67874b33a9f0c1794b46a9263e181ab4",
          "0x05d7bdbf3df0f01fbaf9c1fbd87f0d8dc354875e451678476aea4b0ee0c016bc",
          "0x1b23124a367801d93b8fbfd222eb27d149ae2ee98c6b9dc30bb29ce3b501f7a7",
          "0x13f573baaed32aa63ef2ee51c9d25a996cc9cdb333bfbdd2b95e2a3a323b9f4d",
          "0x00fd86c6312ae538c580c6fbe67e07539643967f075c81cfc504d4a0b51d4d52",
          "0x11d07e190748d15d00447b4c653b055887677d1d0cb899a4a7090ea07aa0b393",
          "0x1b8fbeb3c715077b0a094d76e35702ffebc4740fecca3faee9608d460c1cdeaf",
          "0x0297423e21180784527bd90be63d021fbe8c4bdb8b204398ee1de6f3d41fcc39",
          "0x069fad4b2eaf9a9fd4891be5f4f128ef4cc11e4597cac7c55e3b2beded8c05a4",
          "0x1b351f30e204c212a5ea86b7de299b1df744d07c8ff7f7f4944514985160c49d",
          "0x03c814bb706f73f933bb03d3bff83fb5b793d838c2de00089d5d582183c954a0",
          "0x263c1482af92672f28e64ca3d4dc5374862e2e60b02c9e2fa95deca9d95b9fc8",
          "0x20d53632d8bd5242d9dc9ad8fabc48c6c60c6f71a235807b1b3bd0d42e187c02",
          "0x1312833846d4d021e6b854478da8d9d63f1e1fe36a08c6a95952ee4d1b82457e",
          "0x23abe598cbc971ff0b6625e441018e1ff84ea07ec5a37db3ad7ff2e18d1efdf4",
          "0x189b134a1aa72c806ba90d70580ee758d968c1a0acbc1d5fd3aa9881e742b784",
          "0x21739396f8193d4ec0154cbb302d7226e7563b803d9b6639a7ca065729d87a6d",
          "0x0d17bda5b0f2b08f2ca4760fbc8fec19c961c0eb8219565a2017c19b8feaddcf",
          "0x2294fd20b62a1854819540e5560302b45403148db6e9890bde0b0a883fe1909b",
          "0x2bcaa1216d5737475c013dbc3d8c54e36be0196dc71ea0981b01609369d204bc",
          "0x0ffc62d59cb8ef71f03d5b7cffbdf3f1e8a8b3906c8fd25b9ba85b756f774e52",
          "0x282b2996448809068c25fb3430dbb5bdb038e9c3810d554d7ab3ca1fb25b08e5",
          "0x231b7767a4cbb0088fcf156fff8c71cbdf02b27e31dfbcf7597af49fcc99d610",
          "0x0d52e9703d4fd0b424639d4b8173bc8ee730bc3db3c959dc1f1e36737babe865",
          "0x0e8d1205f76890e94beb4460955ae97b5bf295671cb1d09c581b80d0c9729755",
          "0x09b5e2bc828abefa93a501bf75c0a67686fd8a0cf106fdcfad65a8f20ba8b363",
          "0x08ee620bb73422c6b3c9506a973ed0f754f9d8106148fd626cd5a04d4386800e",
          "0x14deb68983af2bdb376b873303e07f4672d77798f8fa8a481a22c223eb357d19",
          "0x0dedb230d955cb9b02ba8a586010044e4c6eca8373192b5fffd1252927ce09b1",
          "0x16a6e90080ea1aa4e0d192aa13f701a781142373c0d9a985a4ca5a70e6ca20fa",
          "0x17cfe46ed6441eee1e9acfbfcf669efb386f270d142429b3d1c6a8f3d984cf93",
          "0x09d43cbd543486b31694bb1f856d876cf3f135b86aa0e2f45889966912280f31",
          "0x181457642e691657d5b2414b7a81beb58432ab1c9abb588c7e1b2da1f1e8aa96",
          "0x140504614839fd16f90f1a5a2a49f19c8b2e0a3a0ac67d1fa2a31ced43f3a27b",
          "0x120487061ca7d1fa340f11b2d6c7115eafb971569529424171bb1d3f10fb2afd",
          "0x1678ea1c9a9f63f1ff0d1eb65ff7c7d5c704b2a0dac3b15505fb45224ccce387",
          "0x298964c2828d52a1764b41b5fb460752ae1b8ab108fbc070bd1be15bb6faed73",
          "0x0ce97b6f2777c3a5eb86fec6a0ea65a823cb9bee65253157a0b9733ac6a44c01",
          "0x028e819231b5541e7b5243cff6f044b62e6ec5fb8adedd2b6abf879add5f8fd2",
          "0x1d04a29170773073c3680a0d73ba0759e80630bbb2798f4a6e77c003a145b6d7",
          "0x2ac32e5d907bc921779525bcb9ad4ae1a8c782ff0abeeded32787eb25275adda",
          "0x1f7600e736df837404f0c327205cfb931cea48bb1472ca0b45a974b6b5998b95",
          "0x2921dca5c0dc3bd317e0ca1557e2e72c6dfc4856fff4d705f78a7e1f55f5a3e9",
          "0x14f80bfc521f50b8d79457a4c2e9d7553f3f33c37649ee18a43a480ab2cd5bbf",
          "0x2dae059ac17079b15f6b6d0de647a6ce9af9cc9b5df5659f169be826e0ae745a",
          "0x27ad1fc6da5465b8b9013f0cce96db4af1dd0d18e2799b73cc5416365084a6d9",
          "0x13eab23fd02de014e3055b4ab42881509c6b625e04488e8ee938557c6688261f",
          "0x18cfb5ec775eb1683db7a7327945df44502e441a0082bbf760825fdc05054dc3",
          "0x26cbbfbc719cf0657d98a6fca78d2572adb2301938a1ec19bf734178c2208656",
          "0x0ccfe2f976ce2ba408e431ca319e95bfbeed592741e0bb33da63a03fc8402d3f",
          "0x17387cd668214f736af582dcbf86c00a80dcb77250be031c2e02071391d537d5",
          "0x2d9acf8eaa6d15e6da7ffab14e16353cf737f7e5585ef9e2e43acac6cc879742",
          "0x0393a4c1ee837afaeb10114ced12f96bb9084dd4a4c2750d700e876b6caefbf9",
          "0x0f0407a7118b6910dd909e894966b42440d616da403e0a07b3f86f4ba8011df8",
          "0x2f7735765e2789fd4d05c78350c35c6b84a69a74c7f69e0afa99342f1c6cdc39",
          "0x0dba9178d2ef6af1e01cdc2de7e85578418c26adbf376d063cb6b5b1181f41b4",
          "0x2144ffd569395c83073f882ecfca0d8c9428b32c9469db7760d3778649fe275d",
          "0x2984137c5e2012d8bd79b1d59087915b997a8aaf568df355bcf531f4014377a5",
          "0x0934f3b2191291cf3e631822087c19f835a28cc49b98742783224ce6cee8588f",
          "0x0e0ba5918aa4cbc38c47648a5b28d83c7ac2ff68a4127ece98836b5429ac3078",
          "0x049a3734a8e2a2ff2fa0a01e5a6c3ccfe37d09fed6c8f5dba7ef4c46b5d33b9c",
          "0x29fff8192128faebc6fa8432c1562bc01b7289b3fb5285e29d12a3556cc0ac49",
          "0x2201820de3cfa4aa21637bc742afaa39c3611951330598e61ad3dcd8190818e1",
          "0x094821527657e717dc177127a1b10531a2a9d18f9141a12e8c9f02d1f7ec1a1e",
          "0x10b58daa36c56ef2f2a4dde18698e272112fcc01e68769868e9ef1b5edbb4fc6",
          "0x29dad68ce58824ba5d89b7b3e7ec1fdd95c253a6b6ab2b6c418d53a57e3ee8f5",
          "0x1ef75d0df2fe249e6fcec6cf55699bbd616bbb1dbdb384d6aa21f5c6b5793a6f",
          "0x1754914267b0b09a948685fd7d60692da6c6bc990d3bd86c05d1409132920a37",
          "0x0f593c997ae0a9426b4fe3054b60635374a049bc55af8d13735a0a903919a66e",
          "0x0aa91854cab67a7a1e2982a8e515845a71913530ff5aee98c91eebf79e361825",
          "0x12f2e653a73a9077367b6abde35ea68cba141062ade7d3583b05da2c8f0baad8",
          "0x1692c37f96667fa62c619fe1a0e79abdf86d9bdd7241728228db6009ffdbf437",
          "0x04e833620b139d50e033dfed3b39394574f631371e31c2bb0e9c44ab8a168490",
          "0x14f13dfd3e5881a820ece1fe4844628b14daab9c0fbefe88acd1895c43576619",
          "0x0458b78330d7902b4e84f70c250bfa081c92ba1de2962e19cab628b18608d3d9",
          "0x2c52077e5bada6cef5397019391717264140b8a99b7d2fde520ec89d31192312",
          "0x01de2f57c28133226450019531ae86d160a0e72809f01593c1771e4ecca7a23c",
          "0x0a761fcd234c2bbd661bcd788f5b14a5ee4255190b81fd3153c003d68a3199a7",
          "0x0ebc974e17f713f3ea0d8b12e463fd5af0450149066d6e72322d8d0e1e1b6831",
          "0x1b96e0241b7221a93125215256ab608135b2214e2f04c127a3e451d7f8f7787e",
          "0x1df3623a81acd17b0eb45cee6638d1dd1e84966e38cdead88ca5f9f9096fbccf",
          "0x208f1193b74f48f50021d1c0cd977dbc6a55e2f68ef0ef0000cd21a38ce5bf08",
          "0x246352bb36eb512ff4f36fd8df72042f69cf67f1744521898a117b6efaec7895",
          "0x030e94ff4018a5a9725300f274a619de490177d1404dad9a8299ef29e0b04f1a",
          "0x1f52354035e44ac050ee86ca631c0e45eb5f75b44d6e7f01b0805e28066accca",
          "0x2659250e4f2ecc3d3cc5a1c74355aa01f2b4c3aeac607f7df372c15b85ecbe3e",
          "0x1be2311b78b5c1246fad8a8c346e83e6c0822df59557588b5511b4e821e2bf2c",
          "0x0509b5de4dff732da434372972b466d1154d194e10915b4347dfd0665a72bf9f",
          "0x03247680850a5862c08fbcb0fef6c739df1e88043c3a5e73531f682f93f8e975",
          "0x2d110540eff687a945010e040dc40497a3d1360b99073babd6911541d30be5f3",
          "0x07ba21b3ad4f133f69627b211c12f3244d1ab553ae6d6a1daa888d0040b07779",
          "0x20077db65156a8dfb7c3160a81d62e119b2a861118be3dd509cdcceffda88d10",
          "0x1cfea2b8984b62b28fbd6b8dbe134240e2bc10d6bbbd3c2f73a3088710b09973",
          "0x1549ba97fc538867506f349929a7d1b86213886e8d2abfb60fce0368798fd294",
          "0x246252ab7cf345e982717225f954e74e7303ce0c9b1b24b1dc06fe10fdcee4a2",
          "0x2b750d77da95774f2bee129b314d1c3dd5e302b666c2bea46cf886585d5ab6db",
          "0x236fd4947774395d7f9423527c5ba34cabd6f7a9501ccd33353234922e896e16",
          "0x18a4917affbb7751667f7629ec085af1a902e9b5471a02c89e05678d620bb0d0",
          "0x02ccfb77f9dd97d7e6a8ba9ede42364214c52a02c8a0a420ccd0768dfca171a1",
          "0x18db49b4f99f685906f772938980682572837a1370f023d0fa379fcf1c1ec854",
          "0x2040dc09e877cba004d4061b3701c6a92b03fca41c1dc6ebff525c76a1f9f7eb",
          "0x0bec5c4494c0b5ddbbdbcbc6fa88f438305525b4c08af59860055c1f8b73ecd9",
          "0x2879eec47e729739d1f79e83f7a71e631eccec2c83b43dadd6ee56841f83a1f3",
          "0x01a50c3a018059042e5ce95a789914e5c2800b4f4efe17336c5b2a216410018d",
          "0x1950b98c22b8f3cc855c167c7d9bbdfd4ea37aac98b12b1fb017257c3e7f293f",
          "0x13b7710d9218c0b169ee4a1276715274ce9a6468730d2de7731349ad1ae9df7c",
          "0x1ef80d90805ed282fa4f5e12843ed4abc8f22f5b59f04ee13349209a8bb581ee",
          "0x13abc482d41ef22b6e3d0db9276b75599044438af8940b5c8d58e7dfe80c44c5",
          "0x267d61670e53dd034e795bb20c20912163a58248709d5aba8a95c0dfaf50b02c",
          "0x24441cd1cd8145e42b471f82e4f7f9c28d45ac2c55e4e60d3e66d74e8b56391a",
          "0x0355fe883f75c1a4353c1c0daceef2d3a71a9a74c62053199e431b8fa81cb8d2",
          "0x0551b53fc92ae63c2b2ecbdf40ce937a2095fce0647482e64a0fdf515cf42ea8",
          "0x28b6aaa4aee256071d9988bff1bcc284ed68a7614622392e53465a6ea91258bc",
          "0x2df31d847dbffcb0444258e69876ed3b7463a49454be6ab6250a8446c6a01703",
          "0x1bd22453d36950ff1ba1b49bcc43f9c9d4ba388b780c43f4ad3216b9da8da126",
          "0x213abe279cb897fa749b6e98180a1c8225558acd88667bdfa14070baa65dc812",
          "0x04853a8eae790c34e5751893e34ba932024d9c549c7a7751d536be9cc9af6b94",
          "0x15242fbe31477d9de0c431d25d0c8e35d489dcd4c99fddf72c4f0ad4c492dd4f",
          "0x12f6323f31e14576328957a9f393451ddc868aa57692ca327bc5a169e93aba39",
          "0x1dda2035b7580e63bab28535dc392f24085d59d0bbfbb54991ba3ee9563a1899",
          "0x13251bb73a28dae6bd498501db9e6c58c4f9d458e8695596669b2ce90007629f",
          "0x0231ecedd2828136a0f76ddcddc58f9cb3a77ca05c4c0fb95ddb696040391328",
          "0x2002a71a926fce26a1e77ee49f68846c371b74ca7addd66da7ec5286bb7c54ab",
          "0x2cab6f0f98bf107f345e22dbef16b15ead94407098a933ad0591b3c4500238a5",
          "0x0401a74a17b514f0532e1b9b4aa4421addfec7269f934875b34d4f73cf9e876c",
          "0x27c78bfa3d246da84fcc765ca8b00ecdf6baca2c967796a8e8c8e1c501bf5b43",
          "0x18ed98acd2c8f140ad3d56627d9f0e8b41e84e30dd1c165e4043c1c43e32f663",
          "0x188d51f7de70e218853c44a40e505b38f45caca8c92d5090d474f2d01530db18",
          "0x1930b89b3303134f1f900880fd7c39c7ba00a96a972fc4f43b17e19e3f1f3d4a",
          "0x1fcc8426a4936736199ee6829c5f3bd947cf62dd0a92e7ad4af4cbafb490b0a8",
          "0x2d3847971e336844d626b6c39ed253d6994002bd07ec946b521e06e9993a2d48",
          "0x24217d683b98c9d630a704c3bc4550cbf70ea14dd4dd770aba45b41ff3ac0301",
          "0x28aef269e0a3dee65a1df434d1b2ad4dcaf8e840b1a1d067b353a2986d94d35a",
          "0x238b3d227a012ae13dfcb6f0b06511b9a1d7dddf0093299f0400a887a90e070e",
          "0x197d7a63493f21eb3e99111944cc130269461f7bd88d302f8b357bb7d686817d",
          "0x1bdcac988edb00a3505567ded6f9440a542df09e20aeb013c43972bbfb3ca7b6",
          "0x1169171163bdcc2c0c8bd9e56b1fca66e44bf61f9243343cdb1e131cc034b0b5",
          "0x0ab66abcb7869437b24facecee1c89b18ff8d2d024046bf978b844a1a5dd123b",
          "0x20b9a555a8b39f0cfbc6031a7ccde6c1185abcd06e3f6fa2c6685038b874dab2",
          "0x032e07028d1fef76b7ccb9dc54ff4f41da1031ffa8952c64a5437983e838cce8",
          "0x1573694373095bc3106e92b6b627ae4c7d0ff8e499cb2ea426d044eed818cf08",
          "0x01a602dfd352e43ecb2f69fcbd568b60a140ab52fa9f65b53af13123d511cb04",
          "0x1e2bf4fa574ea907efeb285f6766b4a17db35bcb6186c84a04602d438a6e3216",
          "0x2505c8d417739f21d2162110db6677017bdd46e9e105bd4a3d56147c37327a0c",
          "0x0e654549cd7da15a2808d06d8611796c000286fa77d02f6a0230debefc88c215",
          "0x06fba732c616c7828cec557ffecd6e3ae22aeb52c72a210e007fcdc5c3740079",
          "0x1658321ad9c3d0a3639efbb9e23aff309512599f0df251998bb3b03b7ca5692a",
          "0x2b33052c618387b8b667799bcb8566a6b6fc5e2ce3f9440d025fda9150d4a82b",
          "0x1410b1ae9db218e0ca654de70f05cecc7953ce710aefa4885f0863b8e03470c3",
          "0x1848e80ed144936e3122de3c706cfb707ea3fce31047e632c79638ab01dee1e9",
          "0x27a27ffd5e7cfa1dc5541dbc940085bd3dc590b21473d05384f8c463fb2ba936",
          "0x29b94126f5536a88c763d0301ae366abf2486bd300db3123762df3cb93d1d986",
          "0x2d5b96cdd02c61014a228fabada597a65e1c5757772248009802bba450b6049c",
          "0x0202c5350a6a37c6f159112efa516be970c2f88e16c01aa8462d62ee4e52043e",
          "0x2cac718d86bb68b80cfc3e17cb740609d425aa547aee14f9105b4da9490da8dd",
          "0x283e1a39e8ac0b1913943e8618a19c89c5c74b58d59299b11fd127f02cfc9891",
          "0x11a6bcf0ee6b0b9f6f62dc0c48168cadd576e8d86390f85c4744bd70e3c1e967",
          "0x126821771411186adb55ed7e59e584832bb8c3544ded7227e8d707a5b34d6137",
          "0x1301d280a12befc02f9a13f3a92501da7208279bc03d99e772da490e7ae069c9",
          "0x28e729cd9ca2716cf5e82b0c1547ff3c48958ccc49f806f9dfcd6f8d90b2e422",
          "0x10ff9267c3b191f2fb37450d4e015aa137b25f12294430e936e8d124a1f98d5d",
          "0x2c19b499d3dc4f8545d31cca6a58a6240cb2cd5ce0204239dfceddb2b77d1423",
          "0x2f92727812c862f5ab2543ae88bb5539fca6a97cd331fa4e5e02ef7231017ee2",
          "0x2b9bccea18d03f5de4dcb9a4f10ac80fb44be746fa5bf30724fe04c0d576814b",
          "0x1c85bb1761d97e4a576faf5c53b9bdb479a0fbc37818dda8b2abcb365e0a73f9",
          "0x07dae9e87df37a4014d11878b49e0571628a20ff3e6a102291d211b8fbb1ea8f",
          "0x2b9b3bdfe342987935c9d780df13f061f6ce9a4e6b470cc1bc7c7aaa53075332",
          "0x12adabe287498be9ddfab24ef799bc49be7d58f069cb49bf01c9c4b1505d0586",
          "0x2b206a11a92edb5474ae7ab65b8fe85d4503de3b6f4330767f938e7c67060fc6",
          "0x1f540c4837c4a4a75d8f830935c6d2e4d731f230dda7ba5052a50d572439c019",
          "0x054db8726050afda0e8a0c6b5eaf5f967d80fe0e4b85179c163f36970700d2a7",
          "0x2cea9ad4bafe136cce349fc6eaae2db05071118b4b82f2598a09cdc8db005af6",
          "0x252f699ea739d55642ef8a22b45b58eea8d55900f8ed7f391fb1f077d13f94f7",
          "0x1f061b04b5f927b2108c7b6be795c3c9314965107000b13bb63283f41925ad89",
          "0x08459eea73a94af361d3c656e75f97d27f6f1e42503fce8ecbbaf19a29186835",
          "0x1b3d700fe7f51953e2275604d391f136c1fda986a3d30201ed0fa140208ac812",
          "0x28e56028798196ed5eb0d88ed905d5b0c47e9d6110c75632a5a2ee8a86a4861d",
          "0x09bd90f2333c4c2cbd4bf7eddadd1fe7a91e5b98908afa559781d98a257944c8",
          "0x15bc1a6e6baad5f6b0c2ae3378a252b14299e0af66eccb6b266814278ed1278d",
          "0x19c52f0dccaa44199a7f4fc33bb47d41d6a081cf36317e7fe159e8fe6b1f0a89",
          "0x2547bb5ff20db5e0c592983e54fc962f0f65f478598b2cc5fecd72f169489a9a",
          "0x1ef0bca70036f3bf1d7d3f294c8b0a1057691172793c5be658b8d55f8e5337a5",
          "0x04198d58ecdcfaf0b9c2d6acedef52537d1043136b624a5a1f588a40cdeca52b",
          "0x2c5edf565ed2065d7d04fef7d4f7e1b1722a2d064c00549725e0715947c26f4b",
          "0x2bba33fbd4a8b19d6cc52859259379a3b46a9fa17cc5c4570956503ef34eb8b7",
          "0x2e98fad823aba9aa740aae084860f04081a58de39bbb101eefa119cd6a471fb0",
          "0x2d20c2cd090abd0533aa05e4b25ed9479e9ec4b21eb59c765637083b87a95921",
          "0x10967beee9da2505cdc53be5c9837672e8f3729c6a784b013979d8ab8a3c0a89",
          "0x121fb7ac685ef13f74ff829cd18af140bbed250db5896f0ffceba42d5d803a3f",
          "0x0142e085876884e6572c868998a0ea31776f38ab30e6c6ff74cbbef141dc906e",
          "0x23ca041ffe1231fcca12d630c8db597bd844191895714dd1623eafc2056c1bcb",
          "0x1a30767b5f4f01d00c2b01a44f01b5f136a5258f7a513d6f7d0627f778970d51",
          "0x1ba0ff653ae6bd81573fad7901533cc794806aa616f1a263c06fcdf07039d741",
          "0x094a5945a881842d8067ba77e9e699ccfc74ee8517620e6b090f5627bfd7293f",
          "0x21c84f232883c041a078e1cf608ec1f30a07b8859f6eb8eef7229fc6bca86f03",
          "0x10f83fe52b38a091bfad07decbf295e8610c63112873bb05b7ef08f7043f7bce",
          "0x037233401e03f5907192e47e733f792c15520c7f4975a82877db6dea638fd4db",
          "0x131743f65beda2de7e4bcfaa7a4bdca39d066f9c9d571529e62e7f5ce47512a2",
          "0x2c3e6fb700702366dd46d37f965a454869d6a3f1b8efd90cea90be0dc15deec1",
          "0x0bca2e8dd5719f2490699eac6bfc2b3e7c6591317c76ffb1516d126ce3ec162c",
          "0x09ead2ebea129a56023afa72ff1b77c6e867a72df81839fb76c2523f9452205a",
          "0x19a210d7be3606ebf9aecd9b0c8f3ab0bb04099584bce5a7ae2a35a0f808ce6a",
          "0x1b44df05ea46ec1231818008eccf838e627afb2ce4b7798aaa86f609c2423634",
          "0x0e4d978fa2ed0507dfa47dd154b51006d25578e18d6c9d83f8735e6a0cb7f1c4",
          "0x154e4d1a506fc0c10019f2f89d186f4af8a2d1b6ac3ada831ecb00f3a925ca6a",
          "0x23f27f2464c116f55a5b7482a1cf5e6c7bc99f12e28fbadc6fd4826072eb76e4",
          "0x2df196c92d5355817805c6cc3ca1029440e27db83b17fae40c35fe3518954753",
          "0x2b7a89ad1419e85f4d414f1a372feca6aabdd69f721f684f34fe829b2048c8d0",
          "0x22c29d74824817a0423ab1d70d5c9d5249b16a181034550669e7fa357d9dc33d",
          "0x2d44559bf653c112918fb033c8153bdce449b0f1e769e46bb91e5fac97ef7cf1",
          "0x21d70f181b322f74ab50c432ddf9736a1e3738c4e883625889434da50d884c8f",
          "0x2a437b970ff32645bd5303f9474b5743427333c6663d17f44d918e9f2ca005d4"
        ]
      ],
      M: [
        [
          [
            "0x066f6f85d6f68a85ec10345351a23a3aaf07f38af8c952a7bceca70bd2af7ad5",
            "0x2b9d4b4110c9ae997782e1509b1d0fdb20a7c02bbd8bea7305462b9f8125b1e8"
          ],
          [
            "0x0cc57cdbb08507d62bf67a4493cc262fb6c09d557013fff1f573f431221f8ff9",
            "0x1274e649a32ed355a31a6ed69724e1adade857e86eb5c3a121bcd147943203c8"
          ]
        ],
        [
          [
            "0x109b7f411ba0e4c9b2b70caf5c36a7b194be7c11ad24378bfedb68592ba8118b",
            "0x16ed41e13bb9c0c66ae119424fddbcbc9314dc9fdbdeea55d6c64543dc4903e0",
            "0x2b90bba00fca0589f617e7dcbfe82e0df706ab640ceb247b791a93b74e36736d"
          ],
          [
            "0x2969f27eed31a480b9c36c764379dbca2cc8fdd1415c3dded62940bcde0bd771",
            "0x2e2419f9ec02ec394c9871c832963dc1b89d743c8c7b964029b2311687b1fe23",
            "0x101071f0032379b697315876690f053d148d4e109f5fb065c8aacc55a0f89bfa"
          ],
          [
            "0x143021ec686a3f330d5f9e654638065ce6cd79e28c5b3753326244ee65a1b1a7",
            "0x176cc029695ad02582a70eff08a6fd99d057e12e58e7d7b6b16cdfabc8ee2911",
            "0x19a3fc0a56702bf417ba7fee3802593fa644470307043f7773279cd71d25d5e0"
          ]
        ],
        [
          [
            "0x236d13393ef85cc48a351dd786dd7a1de5e39942296127fd87947223ae5108ad",
            "0x277686494f7644bbc4a9b194e10724eb967f1dc58718e59e3cedc821b2a7ae19",
            "0x023db68784e3f0cc0b85618826a9b3505129c16479973b0a84a4529e66b09c62",
            "0x1d359d245f286c12d50d663bae733f978af08cdbd63017c57b3a75646ff382c1"
          ],
          [
            "0x2a75a171563b807db525be259699ab28fe9bc7fb1f70943ff049bc970e841a0c",
            "0x083abff5e10051f078e2827d092e1ae808b4dd3e15ccc3706f38ce4157b6770e",
            "0x1a5ad71bbbecd8a97dc49cfdbae303ad24d5c4741eab8b7568a9ff8253a1eb6f",
            "0x0d745fd00dd167fb86772133640f02ce945004a7bc2c59e8790f725c5d84f0af"
          ],
          [
            "0x2070679e798782ef592a52ca9cef820d497ad2eecbaa7e42f366b3e521c4ed42",
            "0x2e18c8570d20bf5df800739a53da75d906ece318cd224ab6b3a2be979e2d7eab",
            "0x0fa86f0f27e4d3dd7f3367ce86f684f1f2e4386d3e5b9f38fa283c6aa723b608",
            "0x03f3e6fab791f16628168e4b14dbaeb657035ee3da6b2ca83f0c2491e0b403eb"
          ],
          [
            "0x2f545e578202c9732488540e41f783b68ff0613fd79375f8ba8b3d30958e7677",
            "0x23810bf82877fc19bff7eefeae3faf4bb8104c32ba4cd701596a15623d01476e",
            "0x014fcd5eb0be6d5beeafc4944034cf321c068ef930f10be2207ed58d2a34cdd6",
            "0x00c15fc3a1d5733dd835eae0823e377f8ba4a8b627627cc2bb661c25d20fb52a"
          ]
        ],
        [
          [
            "0x251e7fdf99591080080b0af133b9e4369f22e57ace3cd7f64fc6fdbcf38d7da1",
            "0x25fb50b65acf4fb047cbd3b1c17d97c7fe26ea9ca238d6e348550486e91c7765",
            "0x293d617d7da72102355f39ebf62f91b06deb5325f367a4556ea1e31ed5767833",
            "0x104d0295ab00c85e960111ac25da474366599e575a9b7edf6145f14ba6d3c1c4",
            "0x0aaa35e2c84baf117dea3e336cd96a39792b3813954fe9bf3ed5b90f2f69c977"
          ],
          [
            "0x2a70b9f1d4bbccdbc03e17c1d1dcdb02052903dc6609ea6969f661b2eb74c839",
            "0x281154651c921e746315a9934f1b8a1bba9f92ad8ef4b979115b8e2e991ccd7a",
            "0x28c2be2f8264f95f0b53c732134efa338ccd8fdb9ee2b45fb86a894f7db36c37",
            "0x21888041e6febd546d427c890b1883bb9b626d8cb4dc18dcc4ec8fa75e530a13",
            "0x14ddb5fada0171db80195b9592d8cf2be810930e3ea4574a350d65e2cbff4941"
          ],
          [
            "0x2f69a7198e1fbcc7dea43265306a37ed55b91bff652ad69aa4fa8478970d401d",
            "0x001c1edd62645b73ad931ab80e37bbb267ba312b34140e716d6a3747594d3052",
            "0x15b98ce93e47bc64ce2f2c96c69663c439c40c603049466fa7f9a4b228bfc32b",
            "0x12c7e2adfa524e5958f65be2fbac809fcba8458b28e44d9265051de33163cf9c",
            "0x2efc2b90d688134849018222e7b8922eaf67ce79816ef468531ec2de53bbd167"
          ],
          [
            "0x0c3f050a6bf5af151981e55e3e1a29a13c3ffa4550bd2514f1afd6c5f721f830",
            "0x0dec54e6dbf75205fa75ba7992bd34f08b2efe2ecd424a73eda7784320a1a36e",
            "0x1c482a25a729f5df20225815034b196098364a11f4d988fb7cc75cf32d8136fa",
            "0x2625ce48a7b39a4252732624e4ab94360812ac2fc9a14a5fb8b607ae9fd8514a",
            "0x07f017a7ebd56dd086f7cd4fd710c509ed7ef8e300b9a8bb9fb9f28af710251f"
          ],
          [
            "0x2a20e3a4a0e57d92f97c9d6186c6c3ea7c5e55c20146259be2f78c2ccc2e3595",
            "0x1049f8210566b51faafb1e9a5d63c0ee701673aed820d9c4403b01feb727a549",
            "0x02ecac687ef5b4b568002bd9d1b96b4bef357a69e3e86b5561b9299b82d69c8e",
            "0x2d3a1aea2e6d44466808f88c9ba903d3bdcb6b58ba40441ed4ebcf11bbe1e37b",
            "0x14074bb14c982c81c9ad171e4f35fe49b39c4a7a72dbb6d9c98d803bfed65e64"
          ]
        ],
        [
          [
            "0x124666f80561ed5916f2f070b1bd248c6d53f44d273d956a0c87b917692a4d18",
            "0x11924f02fd19b09255aaa1cf46ea0518e3d7bfeef47421609491011db0bd0b02",
            "0x247fa7f022304a1994ff505456c2201ef9b717369498d3ffce446601ed9df845",
            "0x03fd7b19ef2c861f22f77ff810f54e277bc94eb76c02d79d986be3dcdf051c3f",
            "0x18bd41239c3e71579a677443ecffbd555a81eeeea69352a68b67c8563c0c2a06",
            "0x2d78c3a5d28de9ff35bf0a257635196e5730ca7f40493277078cd75da8b4ebdc"
          ],
          [
            "0x0a514a5c227f4cec95dfa029e8dd124c34895aa46bb27c0911f3780d5015540a",
            "0x192e16d17d956b257b85a652eefdf2ee09589eac5be80915775723d2cb1da06d",
            "0x298ce0c1e3113bb935c7058e7772b533b1aa9db0c0926bdc8917e5605ca3ac10",
            "0x094cb4e83621afd271e41bc71727f0158ebd612239ac9d698b17fe4be05b7fc8",
            "0x03d880395be93c27d649af5fd142e76b33918cb8841d5a28173bd5cf7d328791",
            "0x28eeae6b5866ad68e443bbaf91680db7d7e2b3037e38fef61b42cbccffceca81"
          ],
          [
            "0x278bb49a7b4e44aea46eb0f882cb692801a6e60fdd5b5c23c63cd65ccce4fe0a",
            "0x063edec1bed831f506af8db648d6fdea145345887e8bdcff109035a1d9b674d7",
            "0x1baef1cb5509b526a42061fb53657f99b3232500e855192cbe8c940e068c475f",
            "0x1324564ac7bdf9e22164e9858d7fa8e368b165eaea3daf4eb67ee59c0df2e5d4",
            "0x005761b8c6aecb1a8ca4ea4dfc2c8376064a4a8004ceeda210a55240562ddc13",
            "0x10c9e283159d58cb4cb2e35fde83a3ba1fdc28002ed9963d2a99f186178a148d"
          ],
          [
            "0x0c399e9f67aa40707a203feefb0b958bbdadcec5ca34901d253d026a2419f6a2",
            "0x083f0df3f1a0351d0330ec3ff602ca8cc353b7f6e762c7107184cd7b423449f6",
            "0x1a6764d5943fc4a720b4c0a19fdb8c711984307287a58b9b5f9f5d58212cb263",
            "0x011a63a26feabf87fa66bde66cc25a922c96382d76c6a7ff48f1537beaed683a",
            "0x08ca7b64657c3548f32bef5b63ad24288a41c0b251099ad27f9434307e3e64d4",
            "0x01998270471e9361955446b0cdb8bea915ec0675f1cd648ddcb04303507a4489"
          ],
          [
            "0x1d6b3d5f6ea369c26f825d2362933eaa31ea35ec0a77c1fbd9e01ca1523e4432",
            "0x119ef188bb3dd0d32306976c19941e8664be687e7a69692da27da215a6f06d40",
            "0x2d9e0ab5c06893dfdfd03481381ba86b6e6292df5609d71f2c64b2d9a79f809e",
            "0x25f16631bf77060f7ea34087c025bf135784319ef08cda2e31419ee0a529e658",
            "0x144c7a11da5a7c5dabae3f33fbd03cad86d18bc594c79a497ecb9894edb554f1",
            "0x0f971162627723f3feadacb28b0c104cb8f74de508752fa8d7c0db2af13de8ee"
          ],
          [
            "0x24be510095436206dd0abd0b0cbb95c883ab304aa52598b1a69306ec981a688d",
            "0x211610e2ad4a377426fadf7068b0c1a6c299a164c1c1a603eaed944870d0b9b9",
            "0x15a67d981041b1f6f09f3f9ebefd864e779d3af08157786ac077505e50ec79fc",
            "0x049327fa79d28c12a2c82406947f77f06775b0287468b3136877701dbe7c9598",
            "0x230940dcc5232658ff9c29697a3fd416d170e8c998f1aa85dea0c42d79f951aa",
            "0x1b121c049cd1159e289007e0c9da9995cc4bab4c26fb888ec3972a8a2e656964"
          ]
        ],
        [
          [
            "0x2abd9e16b7b48289aa19cdfec726fa3fa15cc1625102ae511bca45f39d337e9d",
            "0x1b4bc5885d1cfc8eb691875300db5a0c7362ae381898acaf8b63cad04ecb36c6",
            "0x08a72fbb55dde3e93c5818571a424a54953695029eedbcf91eaeb012751c7f83",
            "0x0f95359a1f6845d4921892f83e500bbb1b3d3763d8fc762400af039b0abb83f5",
            "0x16f01751ce985328afde34d81619defb43e6c7b5dadf52d0f82472fbce7770d9",
            "0x1c391626328457fcafa629f3e6d33e2555e8d885e3c07cecc8af1f4d56596417",
            "0x00970f671b9ba35e3e3c642d1e0b8032023ed5bac91c2c1056f03965a42c5297"
          ],
          [
            "0x1fe9feb5c7f7c7a426bff032cd6a3158278b6c6b2cc57a871213fcafd6427989",
            "0x0cc7eabb154aa7955eac47a19f6437a2b8dec0fe9e5686150ff6e88b1a7b4bc4",
            "0x0393efd96399aa0726ef9af79be8b6c715e429906ca0d15076b5a990fea75ace",
            "0x0871233835b752ea030cf8a4f43771296eeb33f697d1b0825db47d39ac9e5955",
            "0x1a02798f047a51baaea34fcfb26ca6afe96a5fad1d2db4270497b6e6504891cb",
            "0x055665d76df3cd0fcb713c234ea79d06a31d6e3e4c3bcc657dba4c664d5a0da0",
            "0x26ee9691a638edc7c91887e302fc55e8e7758286a44845ad88fd7de3bb1052c1"
          ],
          [
            "0x00cdb2db9e4f9d732d217c5e3114821165d49e5a2d41556bcd53d0c4d433224c",
            "0x012f3bb29c972793182123f5c49306e16a3a787c4bcd9c798a131b70856d1cbe",
            "0x0bba9006404c5ede82b527677daf444ed43fd1e0dbdc5528dd2cd1f17ad73481",
            "0x17e4e73bf701f88d219acf1ca6390cc1e17c9f84b1713820837ca070be84a2dc",
            "0x234b8a077ef52b53a343b8da5b20cc358ad60760dd60276d485015f73d53d207",
            "0x2dc3fd77394b7b5ac1cbd1b46e6ded5b835d7217a4c50a487ae9a35a7fd45d9d",
            "0x1668477640fab14c72b1c16ff0192e48cf882f12276bd12f97f82c6ee2e61e48"
          ],
          [
            "0x09664216ca565c1a44fc2b98347ea8b36904b3877f2159dcc999895adeb4d70b",
            "0x111fd8dfce2bd3b7ba0cfa93e20fb685abf76d77305857b8df30914e4849ecef",
            "0x19f53c0a592b3ea93497a511e56f66753598265b1ab6774da48eec04e4d93426",
            "0x19b683c39d3b002fc3523b7bee5a60148b1dbdf18dd1c318e6a541e8cf66a174",
            "0x2547113a818779f13e3448719c7ef100b8036bb3e882dd5e6456c35311c1bd5b",
            "0x00cf148f8045cdbe7bb1013f72ebd4126a3e35cba9a970441ba8d5bc76943b0b",
            "0x3008421eed767a093322a09c3733973a038168cb28cd2e1f709076c00b869599"
          ],
          [
            "0x1463f51d4a4cb1eba16dbc115566aa48fe77b43c244c9988a3c658d2f56493d6",
            "0x16afd8f4c39038b8006a59d292aea84731c0f83832a61b82250ed90118e8fec2",
            "0x2296361f3bf154efbab996921936e9b1dff8352711f958638172055333e07579",
            "0x1c3160ebaeb10f809f69843cf8d5bbaca198d1f8e3439be29beb92d909ec891c",
            "0x094c66bdcff54382cd9213abe43312edb5b4d414c6e09acca24912a7635404c6",
            "0x2e883bd408c4c826d004ff777d7c0938434ab5bb84f3420e5d94b853b1746f89",
            "0x228af6d425e91a783dd18fd89a6b38bda053f2f23c094b875f27cb3abba2030b"
          ],
          [
            "0x214e41788bd2b990347c7f2a8f47612d4dfceb1a1e6da38165873df66ce51f59",
            "0x03fba82d3f783620873da94e9f4e84c8b529d76f54e4b5d7d4805272af9b9775",
            "0x066782fe3e869de2cebd7ebbf60fb435785329dfb12ad9bd1b4e46ed36289511",
            "0x1c5cd6b23ef336be01efa37a27e6b7aae5d1643fceeb212cdff51588835fb537",
            "0x2f3b4bf0f105f88e27248af094e29feed9ff3fad9a794e15830bd2b311539453",
            "0x2f4085eaa9f80a69b739fc23f2fe4057f64729b311783fcfab3a0a36fc1ff432",
            "0x2363603349e94f520fa1f98fe2507f6aae361934078aa59a16214c088185638b"
          ],
          [
            "0x0548541724f64e20128260899abe8fbcdff184a1957a9385fb715923bf0fc79d",
            "0x21c5e25a6991364e59a205e5b01c811deeb095680a72928369cfd2de71b14f98",
            "0x11c5cc53f6338c825817aff7792a2efbce8fff171300d41455a2edac37663d02",
            "0x27a0949fdc9f10495c4ee7214aa0edd2ad8eef68f577da8b96f9d87a39504bf9",
            "0x1c7fc68f3fbde4a23c455ef0d0dbce0ce556a0194e6d552c0455cbb5b0c230e2",
            "0x11d0f56fc00e7d85b3a2939fd33991dc8abc1ced0c3f3c530cbfb4500d63de9c",
            "0x01b2e9d20d9b55deb048cabe1636f0e96363bec886679cbd91f332fb2bade44f"
          ]
        ],
        [
          [
            "0x1aa4d470abeaa2357079129d114bab1170944f929fc178216ad847d4430f3f27",
            "0x0e1f4e4d26e9da5f8ee3deaf48b493610be61d7d3db1d9754feca30879adc644",
            "0x0c298c14356a5a7f226c5a549e59184900385aafd8ea41d9746729964ef75f34",
            "0x19e070982d3ee675e1622ca20d13b2375e528b676706882eb8f1afe1c5045ea1",
            "0x0333e2923992e89dee570a650125eda75a20a72e69e10863a19d17b7beea9295",
            "0x1944aac72bf6fbcdec04361238c3c4d9510d5f07439a1b6ff41f652990be0139",
            "0x27d802ad019a42fd04892ad167d9e83596a730605890401319661675736359f3",
            "0x2bd05a040a0987ac6bc01f67242d54b7a2c527a970ad2815b273471eb9623e73"
          ],
          [
            "0x254b8126f45243f14dd8211df41fe5516b35952d56c62678c148e73cdbad3718",
            "0x2089c597feaa4ca9a202edfbc823763100e294c9e33000e513b2a216491d474a",
            "0x0ddeaa906cb65f3e9c9bea6344dda8db90c253c0f7f99ecef88786fefe0e5cc3",
            "0x1114c9120442750493d999d4dd45dbd4f3b75ab183209235396ce83d8ee9916f",
            "0x2e8b35a8c29e639dde8dfd49b4b347f00ee467863f6efcb355fa1534ef70783f",
            "0x20e6cc613ae6cb0a518425f53db1298a7f8859ee20aad08320d0a4f9bbfe8512",
            "0x2420dd1281fc0dfac176a752d15906b55f137b9cc320d5d5daa9df3f3d43d3e6",
            "0x17bd4f2726748d99925af9a2f2929e231c1869428c13b1e397bb0099191723a3"
          ],
          [
            "0x270712f18b1518fafe093660f492cdbc2fb70ffab31d8a4d8a1934be68792369",
            "0x107cfefa1e864045a668396526ed9f675b2bbf272ca635d8d3e8801099bb97d0",
            "0x04b96a296a35acf415929b8784b6bba64a630d29dff28b628fc98ef708230b57",
            "0x1f0465a9c133a1c6805d705be6b3ea9912a2d062c34dbef92de46955b83e7bd9",
            "0x27a2b7f5549e5eedb90105c0f8e20f0571ab7af0801f1bdd23eaad91f2229a13",
            "0x031b0afb7ab2f1d241f882178f7dcdad48591cc67905d651dbcafce94b14d073",
            "0x22e0323bbbdace5fbc74a0b3dedea6e1e3bf10e84dfc71fe395089ac197af744",
            "0x1eef36d62f3f864eae67c63324e47a6344e33a2d5bfb82f05bef9900c54e745a"
          ],
          [
            "0x2bfc3981a249aeaaec4ab9001727d32d4e6fe75598ee964fc85cf30d50df584b",
            "0x021630ec3f236ed219f73cc617b9f8b267dbee99a63c528544ea31b27cde49fb",
            "0x28890a03199b727fede5ed0090ed69494c053c97930fbb6c52358b0d7d104c16",
            "0x1b80f3f439396c2f466b8e9b25765a014970455a1beaed7a6fa308dac75fb582",
            "0x2a4bbad245a33e5d9701537f751410e4ff297b8f1d1d9098fe9c518c261a1b0a",
            "0x1e431f2b1b7edae4f8cbb5d307bf5131c352c2a215a870d739617f4b017c6d16",
            "0x255639889a259ebe59f74a8fdf2efce7fde1e3a666b35d8e6ec601d4d0b22689",
            "0x2d0d8a814cfa16c2323f174be2dcbe0c295829fc59bf2a89f13b4ead0eb056a8"
          ],
          [
            "0x16060a17e1b11f851ceab20464572b3d78d582ea050014843101485f65ab723d",
            "0x2741203d66c523c7639ea713b20346119c961cc1e9659a458af74cbee16d71bf",
            "0x2208c5004806c7aaf58314590bcbea16168fe62ec0497afc6bdd2938c12d9a23",
            "0x1c01f6db435dc4885eef9cdfed193250b9d3eb4cee366674b07bdd194ff349fd",
            "0x1f0e36c2cf9ac2c4388e74966d9ee7d1a0b3186916a08cfa306f6bb36d21e548",
            "0x199fc2be60e49e679ec2ede6cf3345dcb3b918e5b3e07c2cd8141333934e178f",
            "0x0a38d163b8a2fa3092999c1797b1af909bd971a25a656baefbdbdfa3628e678f",
            "0x198949eef2b27c2b9c3d699e3fe57da3d5b509c2b670afce400aba1aaa9ed51f"
          ],
          [
            "0x00e73217a106c402e4c6c166cd9ef1fd2a0b16ac1cb43646bc1c726f83177770",
            "0x17b2092b0f634576b654c6de21a1a8d812bd4c01559fff83217129082e2b2b20",
            "0x2f24d609cb23720eda55fae29ec6f19902c42d8bf904fb656202736d97b2eb69",
            "0x2df183fe2bc9b8b75773fa961c8d4117e582a80b656af5c58763e7024ea4189c",
            "0x15fe963f5bd0d92878c10a894e118018db82e63528afa4d4703e9881eda118d1",
            "0x0af594dc4030e8509701fbd3d8995f73126ad72a7af0fff344eee82a31ce77ff",
            "0x0b8e857d9fb1d554f3a4ec307ad907de7a436438603af1b28d4e4ee379960ce7",
            "0x07ebcd25a10e56693a28155fcdaf7b3519d9e0e08241e21789696cb76ee06297"
          ],
          [
            "0x04b959ca07e7182ca08f2351a03545bd7ab676f740b02331637ea1434c8545ec",
            "0x068e8e63411df2b3a9d7c567f66419a580d3ba15bbfdd1226effa3fd6bd47b3c",
            "0x0344d0c772c2f053664a7b9266b19d48ae5d2ab3d1c1a18150754ab4b836afd3",
            "0x07e0cca1a35ed15fbdb619bfaecc7a9a8f4c51293927562acea8eab817c6b84b",
            "0x222edf3e26bf74b2f503983189201d4ee8e6d6fad341d7ff50748dd739749df6",
            "0x2d4308b4823b465db653d36818181209d23cd12f844f72f7548d49e55055a601",
            "0x2e8e67fc85f9b4d00e9e1197b35bedf55afd7300a4c370987c83c15cf73cae3c",
            "0x22f1bc4ec138b596128ce5ee5b8184964cc262318e17ad21d45c552477f53e61"
          ],
          [
            "0x0fc9cc95222f92715cf7476010225e14cc38f314071e50e0f3bc9ec674a8aacc",
            "0x2f5a2a0cd0cb24896c94878a8106d57e82c68dcf1e209167a45ae9cf8570fed2",
            "0x2cd19b5c55bab1809e52cc9fc1a038c08935da19cfc563e7048d6bd1970a0c8e",
            "0x24ff2986781fe40ae61e8f5ca0ef17c5a5ea7bddbc127d431547c1f6a8f5cedd",
            "0x12a87d0c5419f448419840e5e5a92d276ace00963d987f2a1008913d98a27114",
            "0x0af3ceff2c865a901b9406d5d9b2fc58833d642f46c6493ca030ef595061ec6c",
            "0x27f42d86842f4d8a8c3aff2f47ffc1e179f097aaecce55bba0b0fdfd5b190aa7",
            "0x2b6b3bc340d4119e57831e4a2187013f1216ab3b639945dd92a984943241f1d0"
          ]
        ],
        [
          [
            "0x0190f922d97c8a7dcf0a142a3be27749d1c64bc22f1c556aaa24925d158cac56",
            "0x1f8d3a9d2d31ab32d9bdb6375170dbba89f6f8f74d16e4fd02f3675d5fe2baad",
            "0x230c694139416f40422d713e13c056c45c3c631b346854523970eaea58a37df4",
            "0x2063a461ad06315ae5992a53a14bb598367624afc2833ccbb83af92ca0f6a334",
            "0x0c574e628f84b6ba9d17b9d2bfd4747e06dd68cda2383d64ce365927098c046f",
            "0x276428d88040a3e0f442424d2ffcb8d19becf3fb6ca02c1b5c61b5ddc53ceb90",
            "0x24bdf6101b2f223174e869d6aecbe8ea5b04a14c38fdf1494393cc6fdb3e42a5",
            "0x180fca184150c0e354b4b3a4a075824d4b68e8274943f4dd8b0c64eca25dc68e",
            "0x10726dcff87299c8532159976607633f1bc2ad24453c1bab26b726b82d756ebb"
          ],
          [
            "0x0607cd8ff9b889773c9eb68b8a4366469d470cd7c6004106caae95c10c424419",
            "0x2591580b73e7b5d5f34d9fdc0cf7fe3de7f6a18a255e4376fde3eb31dfa51d79",
            "0x093cff12150aecb3465c4c99f044be85dcc1eba21d429132c2260dd3d12ea441",
            "0x059116da88a081267dd888204fc6fb79046c3297ccb65f9e0fe0d50b4db44ec6",
            "0x2c948497373514e7d9846dea9ddf5755337ddb661043d6c628cecb8f55173bd8",
            "0x2c2729812be9ed432e75709133119cb0a14e1b6ea31c1279b7c3e495deaf108e",
            "0x2280d6d4718f9f06b551a988408f0515070e455ed63377e910be087fb79bd191",
            "0x1b1bba125505ae9675bcec7c9af579c5cc83533c9d555be398afa09cbf95d6a7",
            "0x17013257716d3cbae28e1c272cb6aaa2844136049ffbca05ca201523032c64d4"
          ],
          [
            "0x1da524cff60b64856dc1f5dde0ff62da7b182da26908f6ba6e590adebf91b40c",
            "0x2bb4565893b6ffc5799139cdc151158749c2c65db48672abaf24c5b3813c0e2b",
            "0x25081a00fc20ae366b1fe7ea6b09e62a51f6fd377f608368c12ba4e3bf89935f",
            "0x1b43719cd10b60c5647c097d1fa84b8f3c12c9c475ade13b388c7ec47240be11",
            "0x22dd201ecbab94a2ee393796fefcca63aa54d9a19ab9c7f20a0bedcfb9d191f2",
            "0x0b8e79838cd30707999c621621e77e69c0f433d543b79c668cf379b6623bac84",
            "0x02082d5647658eae648936cefbedfad2cd0538572aa6122ca68ccced68f432f4",
            "0x277bae2fc597a536adbe9c24bc8ee81731eddb574c6a5142c1c5a48c51f82e81",
            "0x30354c9f29c920c05e99d7cc747510e76f7fa69a71594a290eae7293c5a48441"
          ],
          [
            "0x22f33eaee3c481e65801b761a72832908f066fe21dab5fa5ec1d4c6e99dd6dfc",
            "0x1c5ce77776893d48147444b9f6d66a4da29c95707de832756c739eab8e87658f",
            "0x2ab8edd22fbe2a1cd3ce9a4212d0efb282ccac28af4d876fc946203070c920bd",
            "0x26e49154acca24424d5f8d29f650f9824de82eb7887329cbc83a56ae01dee4a2",
            "0x0badd77f516d4fa321d1099bc1e51909001591ad9919f08ce9718aeeb2bca4d6",
            "0x23671c5d1fb556063a64b5f664340936dc5ffedd4bdbaa2e96205704da5864f5",
            "0x020d7202ccde24901d6ce2d107e79e1fd78d6c9398ba7a4996f116adef14def3",
            "0x1d86496995f14264e7a054cc8224900368775c3e5ac6b5f54285f4a73c2171ae",
            "0x136961746d34fd196025173c4d79bf8b3d1d05291c584928d97258fd5fb4fb4e"
          ],
          [
            "0x075f84e9c719bb8de8e61083290daff19aaa4337454e5ba804257787470f2f54",
            "0x175505391c619b75530fa83e513184381e603d8449d1e070017ee8ec0a4d25f9",
            "0x29c5ce97710c1578a0990d862cf881badf10e4f6bde629199e803cd1c426be4e",
            "0x2caf86cff60521ccc5ec6e2e2c83b4707bb90f948644bfaa8f80b0afcd4cde10",
            "0x24f92793d67638b4abfdf48ce3b62ab5d0e1b250dc274d746f2f7d0544185b62",
            "0x02809dfe24c7fd7cd49b97b27150f4d38a340b60f0733fd4530cd4269b4811e4",
            "0x26709688150ed035f959687edf7747ee8ee946b770173dbe50390ab8c08c5f9c",
            "0x1e5ae4c295ad5a17e00f973f136f1230a6fb85637631b306d3705f80effac24a",
            "0x2310e2337e4d53c1635da18a2722178d55af583591bcc317eba842df247deaa9"
          ],
          [
            "0x2084be9a57e9adb80303a8dcaffd4bb77adb6815168b36a1d363b38425437135",
            "0x06ed1d14dedf763a3065f27e7a46d7fbf20d2b4e86a0db86692a269767d577e3",
            "0x1324544a54174cf7b3cd8ffc4b86320f2319d9b88c1779b89b1916018f3fb9b7",
            "0x2e923ea46d492247e12e0a7dccf6620f5eea6629b7532b3af246809398859633",
            "0x000bbbbb87eccc91d5fb07b6c55088ca514d68ddd93cf31c8ed2d2cc7f23b22b",
            "0x26010a3f5295bb4481310cbca5384a47af0f9905e4c76bf54b870ef0ffefa1c8",
            "0x0751a4a4af246255ce412c4bb47fa34a51b8628f3cd902077775c8fa488e7519",
            "0x28d2351619ccc6fb31ad4206e2c064bf4d9b2292b28463e53e4771f10670ddbf",
            "0x1815e4f7b40a7027878640a6cdc4b2854300cf6fd4953c2ac2c77625ef44ae04"
          ],
          [
            "0x0b303449f1bf4b92d2cbc26ab34b4215b6dd7af010747a705b2a6e3398882922",
            "0x140cdda33bb7a79b2baa851df5ad459e7df569b9f2c3da542d3b8d5b76b356ce",
            "0x1d18b25aac98b282e10b5a3a74ce5caa169a5c30bae52bba280ed517f3f82fef",
            "0x1ec6c32f513b8f30c7aab42e7d91aecbe54aeb188a84f8ca46bd7e9741b9a389",
            "0x089beeb21c346cb9bc182aa2b70f853f1a2258d56893ce5a948d9c645ecbc9bb",
            "0x2790643a66038cce4a6488847d8d2da2eea84961f8134b1be36947f803527e67",
            "0x159e25e00326a76f25c1143a5be6f53fa51ccf368d9974cc6d93cce8eb81d37c",
            "0x2486b884370d49a003fd041e800f0a898ab61b5e947997461ee3284241f3baaa",
            "0x111efc136a9dfe0ebcffae8943e679cc0fbf62fd0ce03b409fecd932a8281b10"
          ],
          [
            "0x0c099bc68243537203f97254f08dfb7efc09de8f96d72f3b3e0aaded45e18b4a",
            "0x035e9ecc464cb431cc92c3356e8a98547e843ed1324c1e971179fd1ad9fd51a0",
            "0x02f35e921dae87f1284c0c8ae737dbdc4936cbbb03a03a5918552fe565270a8d",
            "0x23a72c27f4f5e6ea5325d5b368f98b40693b2db1e8ca3d096739753dc5678303",
            "0x0e07b1d22eed54fdf966ffdfbcebb653b5dac3b2a91f50272876efb17158be2c",
            "0x05fa56d431d4bd09625a86d3623464dc90bd541ea41748f2026f65025ea9d2f2",
            "0x2d6f3e0e98413d5d6a1101b245c9e711bb2e956e27a5870784fd5403b39867cc",
            "0x213176bc1a04939fe7d6bc30691aabd6152ed24f309bff3939a0d91d54c67a66",
            "0x0a5a1148dad4562eab18162b3914b64d5753e9617a5154e93f7e43e6860687ea"
          ],
          [
            "0x1c5fd9060d4e0d999264429a5004c165570bd1675b09f977708b1ca48e616388",
            "0x129f06c930edd36fc2fb7044a6332751a2e3bcdbe756d883716cead6bc7063cb",
            "0x14a5ce1603228d6e6fade57c1da536659ba46d1b25566f12c28debcbedc5b4f4",
            "0x143617efcdbbc0d27a091f28039eba8abb39392e2a462850b1f9cd8532f5075f",
            "0x2885f2d44be0ecff57d92a4384edb5bebfb585bb23eae2a2ea50806bab8b7bd7",
            "0x04715db6d86b513d002589f1f9522f7de3b1a8bd702c167559ede97da2c0076d",
            "0x088887966c079d2e689a8d6d7bd913e92d326959bada59b99a653feaadf6c467",
            "0x12ded41f8047da3e6c22bfed3ec5bb52d027e560048db4c0f96ca9fa85e17bc3",
            "0x1f47c67a4325672f17b8bd1ddbd80e4e9e6c62419a9c204cc7e8821892431aae"
          ]
        ],
        [
          [
            "0x0b1e797eee3f15b88ce3a1fafec88da1d6329ac3c34712db570de886cf569098",
            "0x2fe429db8068e61b82624f25766273cd9fe6368ff097eab97aaa09be4c630e27",
            "0x2e750867942439083365d21fe760c7dfec9e3593c67de12a4255c6b01648b690",
            "0x23237985a96b177ff7c01486ab0d603d29991b8324abd6b07dbb96f5c21ba17f",
            "0x15ccec857b25934ffd429af92c910db31d00dc1c3fb83745a31d8131ea5baa85",
            "0x17102ad2d98043e5509e76c331e6b22d5fb62d074760806aa675764660eb56d2",
            "0x0a4ecaabde9d1ea11c81dafa8d5d4869bee7ad0bf4eb78397b71b8f989cf9812",
            "0x0ec1821648fddc448a1512aecc8ac37714923981940f5542737a468d4d887c8f",
            "0x255a493aa4becd9d137eb76941c4120784c1233f6c5fdf5d65c0832af543e415",
            "0x120f44670301b1435249294d9833d59e01682af4c8658719727678fd9ab7ef2e"
          ],
          [
            "0x1abb95b6e33243a050e563b5c4fd059de5513ec28994a6f60e57c98d3bc8f586",
            "0x0a5b604c958bc90071ad10618b1772599e0c8dddfb641131fef39daa58a39923",
            "0x24e82df5873953792baca345b7c19f61039adeb1190592bca18cf4f907c1a6fe",
            "0x10e3349eefd3a112417e110fd9e832078e54b5f4537cd018aee3dfbb90541581",
            "0x165adebe00c7ba019499018c96f5c5870eca5679c90c843d9527184a525fcca0",
            "0x01fb81218feeedf4e7e0e33dd8ecbe62d65c6b7d4233f32e073571ff862d89c3",
            "0x1be2802fbea51003aafae82ff4499d1158377b108f8b020c82b8460a8d603afa",
            "0x0418081de8c2958355a1e45e28ee51ba2c66cad04835f4fbd81e696de6398769",
            "0x1f3e937ab29f3a88c6fe438698a7198a5209aa6ac9f141319f3bb201e7fd6716",
            "0x0113e968769b0ea32cb7b5ff70484aacc96f13dc2827a8e5e611695e0797fc3c"
          ],
          [
            "0x110d213a836478aa301bc1fd4edd388507d87745b3abfba5bf282afd21f7242a",
            "0x2cdee0c635a4fcd9549f0f91b4f4a9b628aa7319e2eaa094a693b38b5cf9a242",
            "0x00d60f0585755d48577b465746de8e286e49925150f1784f29fb6b96dbd8f0ec",
            "0x2168dcf216d8369a626ccc61453236a389d02519f3052e87eff9ccb8aa299c46",
            "0x03530dd962ef23dc16f79b28c1fc1ddafe9458be15174cbbbf3a806de5f63cef",
            "0x1cedc6d4e1476741c1099557e58e642c42892aa36e2d0a793f670781a21b0dbd",
            "0x269c8c139a4f61e16bfaae9e8bbb1c69808c9071083b0a339dff9e4904b443d6",
            "0x0ea7bc52503e2039d277912e022fd6d0ded5bc687c6ff97194976f3a28bd30c6",
            "0x2180b9eb156eb33cad1aa750ea0fa3ddbfa4127296e497f86e6441e052a23b45",
            "0x18cd1471430adad31e45b529494fc8a7e319bd2fc0619c99207dfacdb657bbf7"
          ],
          [
            "0x18edb2d105bb53b768ae0137850dc2d2bf6d1303a1f8ee4aadf76d8f81990588",
            "0x2c962d7d54a98c3a82a638d8c82450813f42071a17c6c05f470b44958f57ef15",
            "0x1f495e93014314988dace5e4e867f5109e09fa00fce87929d1e0ece95a449345",
            "0x262903f36acf0dc055f610397df0794fbc30927ef185c6356bc33e5c31faef9f",
            "0x1b7e922b3dd503e6441ada966c8b3ba7b908cb2b98b5fbe1e4c2fb982455baa2",
            "0x1a88ae2fde12ba32e5f4eccacf11c25bc163bdedaaa8824474cae5869e5ec20f",
            "0x23407728269c70fe712b021915059dc8dc2124ae648e2cb549fc76362bc2b97d",
            "0x12ab318626d511c23d28baa9fb5b5802e0ab95e3cb17aedbaa25f4d084cfda57",
            "0x1cc69d8f34ee877838950e20a9d4c4bd3e9acaf3d693aa64cae04faa225a2e1e",
            "0x23d0fa965e920dfc530b52670b1e32e2d5fc2821fc918c0844a003b7141825ad"
          ],
          [
            "0x1e53e92df6c53ecec4c0de5b07dc4c9a0c5545f2abcc1fabf4ccb84a0a6e2c27",
            "0x2bc761185f59efb7b67bcf1d3e54da00daea067fe49e3f1d9334e5470438b454",
            "0x124331e0ecb1d9808a1d91efaa98950abe930c46fee5a30d5ad07976a5bc0263",
            "0x0046887724f29321895c2ef8bc0cf545df773c04baa097c352a4165395cca786",
            "0x247460ad4580a18639eada69b904c91b19f7d4387435707696c40bac3bfbdd33",
            "0x265412a4e3b5560aba502d20ed833deff707b7d425ba3c09f3b6392b6f1f4339",
            "0x02ad06fc9f81684542e0458aae19c0a7c18be94f1de3fce6a3e5d2335a01e90e",
            "0x0d1e34192343d66fc1b6591cb6a3b0602b0835a403c7227dbcbd72fd8000c6f2",
            "0x0b565179887ee30e381631d8e5dd357c70ee2ebb410617d2321f6d8537f98970",
            "0x2ea6b32af37cd765d728ddefa30918902a21e19b291400854f56393c56d69460"
          ],
          [
            "0x10fcb817e10f69f7074e64c393b807cdddf33c84a8b5cfe33f44b73fe18c0e36",
            "0x2e450d1fe7773c9889a0be55e44453bcc844c94b56fc0bb806eb9982ac553428",
            "0x2f421fcf54d77dd38930cd69076f9baadd3d3f1947371215a66c894d637e89b9",
            "0x13276081db012d1d4f4b7dd2d8a2f8a5180d2ecc33854cdd35f9ceb07bf40d53",
            "0x144d5be38d44c5bf8f3c5735334fb1a07c13702d86af39ba0b4220ec9a7568a2",
            "0x12691b599d32edc48ae99c7a73abd59e5b18f4bf773fa1051cabd2c49aaabf6b",
            "0x0578a55f0fda29909b9f850c3d74be6668e4444ac691764f1644a626498218e4",
            "0x12e3b04924b2cf6e407bd26b3cd47bca61d6ffcf7efa1aea1c2e0d8a49de64be",
            "0x1162a56ed3bbbb4b6760a16a300ba7202130086da4d5588a70926423ff8c242f",
            "0x03340cacb04d5a85614eacc4be3352938baa3fc714c2575aa9d85f739113c50b"
          ],
          [
            "0x2b1d8c11fc652c593543b6f9800bb7d0c9371dedb96f08bbbccffdc6cc44db98",
            "0x25c0f87c946f375e341f72f6a8dd63a94e86f4ad182715bcfcbf2b28df6b4a0d",
            "0x0543b2bc66f3b2d93d4c1882039ddb37c70c0b437ac23ac5bb9868e6df24485e",
            "0x2dd117218538e8acb0301eb40adfa2435f5bffa8028ff52f96a99d77fe927066",
            "0x269b06b31e89ff132daebc200efdc8ab068136fce65f2fc55a1dcb939b7fc6f5",
            "0x20d4401cbbf92877ecf616d7d28551cb0aec552fae9518dcf9218c38c1a0bc90",
            "0x2ee2da24b7f8e7035fb73b08c3414833ffa38e14b1faac198a860a5767d2feed",
            "0x06dd89fabf92546847b9c13b3a36bbc7e679c5bb0dd785403f3ff49bbe61c8e7",
            "0x1360f719034572b59410c529b62a62aa94565654597e42779f33400f1d17d652",
            "0x15ff827e034c02a90767f0152840e7fc6db983e496ea0519c0ff41dea8180628"
          ],
          [
            "0x19f473e40c05676d5f8d51e11336e9c65cb32828c397cc8125f1dc667b6cadf7",
            "0x0bfe6fc08e2a2e1b8911ae065b985388fcd105a490a4ab943b25558cf3d054b6",
            "0x203d9ee6462a586914fe7dbfc1bfa29773b7f9b3d63aea4120c601129c16660f",
            "0x1b912abf2e1649ad4834ca5b2a3831cc9c207d4d08e4bf274a79dca80e52fe24",
            "0x062caa3c9fd39b69864faf701dc8a4588571cb31bfd5c9c3c59dfd97e99f701a",
            "0x138c03a2ecea183cb8f265eecd7e93275b0bb98297c1545a72197dc6ddd9335f",
            "0x11589959fc2493292fb6c50730e74994ad7cd6d3533c3b00a57dae833cc701e5",
            "0x17b9facdbe747d7c5163ca00e3b0b825d012ed4357604e7185750d677c6b357f",
            "0x0c603d03f92860da8a68c6dcb1924d1a45099aea50f1a362edb2f2a7ddfe90ff",
            "0x05d56f0c844d169248503135e4deb9ffd6329d54cfceed4b947d78a568681147"
          ],
          [
            "0x0fcf3a4d9c6c3392de1bdfe25cfb86817ecb80c51be17d47f79750201f1fcd01",
            "0x0c182e438257c4ad7e7b79c3b68d60984e507ac597cb47dc31d913a7a540fd9a",
            "0x025a1ecbd7e7893f646f35d3e07ee997c94354737884fe6c26ae8155760db8aa",
            "0x20135ff263867f708ee0275170cc9788689c088b2933a361c775cf430748ef1f",
            "0x20e160f772998a2f7d0064c7efa15884ebc6d8b71821cd5336e2df14341c95ee",
            "0x150df11291b680e3ba925a0471c7fbb30e704ab4b554ea5d8c07b70b2b96202a",
            "0x17572029e8e897202d0e65c2172c571d4b91ca856e7ad3f118ad922127b87054",
            "0x0aff15650b805bff6f8b3515d5e29cf914b7349af8924e796009f8a4f1b7264c",
            "0x1a918fc117d9a6445e363ee5833dc01411034b95384d98eee47ae896f92a7d67",
            "0x2e5618411efea30cc7de310d4872597d087c1e122e02ebb117db0c2dff04fc0c"
          ],
          [
            "0x23b02d00fe2634889673a7d04736fe15b9f62652b1c0626a19af8d6085d70822",
            "0x2ff4d0b8798a82667793533730083c25223d589cdd079362f1e8c2e01d54476a",
            "0x1d897f60e87fce5ceed8da7f2f4a63fdee7ff9dcf179c08e05e9e5cdd8238ac7",
            "0x0ba6d4ceee2182d3f2ab2e4a3ad08fc31f7f4cc0fec91ad53e92bf8ada3e278f",
            "0x05ce94b8e9a60b28947710461d87c7757246266ae8fa5d3af3ea81776b5b8c07",
            "0x0c346b046af03cb9048c29353e1107d6b75e590bb2d422ea83c09a5da1ba0c65",
            "0x2fbf8cc6ec7efb30106423f2e67b0aa9403360e56e88b6c5cbaec34a80bdc7f4",
            "0x0d064e72449efc11d1e90b97749de3909490b912bb1f72f542f41d62ab2d847a",
            "0x02a88e0c35617665f3cc2fc77d90afc7a8d1001c71debcf2733ca0c71a19e1ea",
            "0x15eeb3e0541bcf010da0c47adb12f6df540b974d439c93e19ea4d02f9975d446"
          ]
        ],
        [
          [
            "0x026dba58ade8cda188f49e52fce7167b8f219dbd924d7786b0f98fb799fefa2e",
            "0x011a131a3778c3774233bc54096419d463d3abbae18322a7e77a511881665f93",
            "0x2a18ab4dc4777e13cb8358c1c423153570d1cb909544243abdacd4547c8ec3aa",
            "0x16ebd782cbcf6d63c38b87b27db2a4a5af5847a9a60889c4cf6aa318d6866b1e",
            "0x02b7ed47fac275d34f842f09b01ef9421014de040c26a591595b227ba7bc6fb2",
            "0x0c5e49e319fb9535073f07f9e055accaf3e3f24a35dcb46cab67dfc648efaf30",
            "0x0161e4ae5b2d24cd638ba5c32bc2317bf90d404e37e003f1055d9a96e406d30d",
            "0x223c7fc6d24fc53d1b428edb8f1c52d20ceec592187d2c7a6b0b147b6292b81e",
            "0x1ae060e39b338d09845e2e9ebeb70bfb74cd4af926217f5732be2b6cb7fe72a6",
            "0x046191ab41e93929ea51f190fd4e773ac8d5083328d4b2f04828dca3e69098c3",
            "0x14ba1b5383e3733c63d00c32c2bbffd8e54507ed33bf7544c86388191eca3e40"
          ],
          [
            "0x009813c803ff84a3694eedaf4b1c2172615275dc18ca654c799a70440946ccf0",
            "0x1495af03dc9180c886f0e1bdaf9d18e32e6b0d1b80370e7cbe5745dafc433523",
            "0x0d95e8cf8a66b56c32e7d11e0107e41e1297122d1acc41332f1b49895a3c97fc",
            "0x0b05f16108c4616a973b01d82e50d4fc9dcdcce67d2d21f852816bd234e9872b",
            "0x230b62315b30bc49d73dff8a9de79c620e03c747b14c432f170715e588d605aa",
            "0x15d217a31784741048f326e155af96e90b5aae734f06779e698864039c92e123",
            "0x0af9afbecae1761cc17d44b51ca66d1dbdeaf341e85f1082958f9cb72f7b55d4",
            "0x1da4f4e3c6790ae1b89c4118861d8ca2a50cc82a4e7f1ed3c5ba8cb944ba4689",
            "0x2860aa52dc2f967c0c1a0b942ac81e02189d031430c11a919a5aa895bcfb6151",
            "0x16ff33d67c85121bcee7d81cff1618927f1c92b4d1d21c2a07b6ae18b2b7b9b7",
            "0x1ba0e835f47626b0d82426900c49170a8be29c39d90337aa5fc10764e2321a1b"
          ],
          [
            "0x00202973f7fba5bd21ed58bfe7156d7b29010d41090f63f1bb290c1d5da1ad60",
            "0x119344c53707f00243983c6d024fd49a0f8af80e5871933e58ff87c3a1f48b93",
            "0x07c22f96f2f55653d04edc63150567a7a04609b0b79eecfacb1485dceb7bc873",
            "0x2f394cfd3e442503c3a22512aa4b76b95b743c7076ca4115a9fbbb7c6b07ee5d",
            "0x206351750037bdc90d4f3e7918619fc690c2b5857f8bfbd86d7c001e4cf2ca18",
            "0x1accea09c2bfd17f4061725c712fd1976a07e773e54d906da166215201a58136",
            "0x05e52c0ff8c04a8e5e3c7eafa1d0902fe63e35898934b00f4333b38fe614f913",
            "0x2e708baaf894bc5835e5fea81227fa8cfaef99086d12b0a3a7f3f85bbca61d28",
            "0x0ac23f00ff015baab1c8be9a90943c3c72d17818be7ad427c45eb3ff1828727d",
            "0x02134798f4ca7fb9928012c937f37de87432b8665aeedf373e7ffa6fe0c13d00",
            "0x0219f5e28a5fa52689d2b7be432624280c940c9bf9883c1fb0fe929f78873c1b"
          ],
          [
            "0x12305eadf64dac24a7913a62d95aefd45f48355576c671e56fde9cc7c8344ffd",
            "0x00a92bd6a919d1605615786f2efe80743ca57c10ec80cfb926722b5bed408b79",
            "0x0f716c54de41920c401a62df8f9186e19b9523e98637a5b113d61ccc30ba0213",
            "0x0a157e244f939125d57f9c8e66f7d88ec0fb3c05b90f526bac0871bca84677f5",
            "0x2218be861d524eaf03b9420b1368e9c5aa7cefee72d0e6ef80732ee9d7e6e2c0",
            "0x2f9bd19d0c8c3887a7fc0173f863f075e66b183ad89f13704930416e1d5cb7ec",
            "0x14eb401c1084a9ddcd5d0092e5d1a299aa0f55c351545c781703c01ce87d6b29",
            "0x13fe23be24261ba5b92d363989f58e17fceed4a858d1c61fc2cf2b71dbdb6936",
            "0x032fa2f166622f057f61a9405c9256223cab2ba82c9495607921755ab018f690",
            "0x2aeddbfa245756ad1e1658629f747b8da7593b195cc950324f95edc9eda42aaf",
            "0x123a6055681023b16570c70fcdf3ae8e387a973690b9e6761be22f9941d7ef76"
          ],
          [
            "0x25c783ad66d6a1fc6c84770bd637f6207097dffb0378d7e0395f8c0b86b505f9",
            "0x1c7d3a92caa435cdd974520bb6fb6cac81634cc9bf4e534df77736e06d768c3c",
            "0x2cd68fc31b67dc45fb6b16f42b5eb89dba2ae7e9aa50c5f1915275a81887190a",
            "0x1d4567c12db648d4a9c41324c0329325b76a07730fad72ef9e490a748674985c",
            "0x069ee4eb20b4860d4af91afe1781338f53aa354562ecd873e0e625af70746f26",
            "0x06cad0c2bd438c4dba2ed64bbf75066e731484c36d1f6738b6e98601e9fb498d",
            "0x1e0e166d734aa614c6b53db4f691179841a33f8105430a3ee70abca83ba6ec6e",
            "0x1c879c9428e19607d647f5ef1415e76f7c59fd01e52afb80486081851f9a5284",
            "0x215c0cd4e3f1bdb482b93e571879d7931be90023d7a220e8f93b21c8add41ffa",
            "0x1f41fc67ca1322b37b7aa01b631fd19105281f6c6a4d37fbf68fc1b5f62802c6",
            "0x1dce36062af7e4b0098f5590622ced7af9f28e88d476cde1391eb30408d5d266"
          ],
          [
            "0x222deb606f13cf28c73a67216d88b16f5958d5d292ba10ef3bc2c10f5a0b613f",
            "0x12fb88a0f6f749d68da9250d5adecf088442827248d67f989fd14b5c9cd4d4c7",
            "0x0066292e64e6a2c64673aed365cb50f7bd4e1d3b5270f6b2e9982590c3f8400e",
            "0x0a94a2d7c4093c638823b095733f37176d7e747ba24645b515ac2a241ffdda81",
            "0x0a226128da1d9bd5b329f55f52c75682def3369ab13359dcb7d212eefca86229",
            "0x1b5da83966361586e8810fed032435caa80a9b476db21290474ed1977fcef22f",
            "0x2fa75deed281db734faba5b70eaf57962f93e2eea1d3dcee34c81ab1e9fcc0ee",
            "0x128cb3150b15cbc4faab14bf7d676ef3682b52cabfc8d3419dfd98109d19ecc0",
            "0x052700b19ef6d42ea392e044a094cbfc308eea1f72f2a3428b1e721bfc32c6ad",
            "0x22d1e64d4ee15e60c459d851ef9f3495e937f5a90990382c97867c45b7940071",
            "0x252e74746677fd7584ceb0f8aa6936bd04f9528ef600737e9913fe4b5698eb28"
          ],
          [
            "0x1614d025472771fd870a9e9d422b3571c5494e7d679824d8fe1212177d5fa2ec",
            "0x2f6c4e097bb5851be12bbe2c712c2fa906f310b78048d695b4aad301ffc0d268",
            "0x08a1ef65f52128eb3b22df2b6aca30509b0af8af2f7888eee766c0c24871188b",
            "0x2f6f14502f20d958a9ff23b696cac3ae24967517ae8b2e9592daf451840bb98e",
            "0x17ceb42a19de6dd32e3b38cc2990e64273b52a5618263eebfa49d84518ea3bef",
            "0x2adbde5c7b73e9a7e22b913f99e40d95e689c65c428c2397cd273923cf68ddbd",
            "0x14bfe33115df293670393e1dc8da4d6947acc4b60249e5b1c8cae376665cd580",
            "0x2bf523cd8aa3be20ce7d891f8727a7b24b72a4d4838484de842acc782fd8bd32",
            "0x033b93a5cf15ffbafa2726f2527824a11af8e42e01d3a7ee159b273ca0a6520c",
            "0x249f416fae5ab52a435d65201006dd8ae8d54266e4d5643307551902423f7cc6",
            "0x19a9079a9897a237074252767912bed7b7635ae8ca0ede2dd3a42a75c1c6b81a"
          ],
          [
            "0x01358bdd6b7a51b1f5b5d094dbd8ee086ccdcfb9c27faad0806e8ef718d0e2b1",
            "0x1c06c782fbc0980b9e493b29a5e4a04aefc668cd4255d6cfe208e9e7c8b9a1c4",
            "0x24529638ebcdf26de8816287fec6370614e112e10c039190c103a75ced11b426",
            "0x12641cc3cf50ca67bc93bc8c19ed89d4613e9e281a51cdf313cbc8111922242c",
            "0x29012deffb112eb14034159c59162f866d4a1803b4d192a4329359f0f903266f",
            "0x1a8b8ad1ecb6cb888273a90bef8b1a2cfc03dd44e0b28b18e1074e404a9e0f4c",
            "0x17ea198f3ab261da000152f26b0eb0ebe088a709e8b06a18a3dc2108c2096864",
            "0x045aaa99ce1e06a3c02150804a91087f57a43b79797773e83216ca969e873380",
            "0x254e3acdbc75ac592679b032b65a9c91d2e092ab5e5719551b5da635b13e9471",
            "0x12a996abc8577021ac7880c16f058d9e06e9511187f0aadff6bb640e4316d26c",
            "0x0777edef4d91520fcd490a22dc569a97e540a0fdb527b4b1a3a854fe346b8e7f"
          ],
          [
            "0x1c2007eba4d1629846bb69404acc84565de5d24620f75cfcd9f11feeeb3f3748",
            "0x211865b7f9c1c791a33d703ad3280f69756324349afc8912a19b83de2cd06a0c",
            "0x12e4b5408f48641951739ea27e521067240b82aa51a42de2d4dc1e8225908187",
            "0x02185c7a4ad8cb21f19009396f134a2c3fd614d305e475ddd19f26f6d4b3f9ce",
            "0x09c4b2f61adf245266168cc918e96f7f8dfc35bd3df7b23fc641ef01bcc71cce",
            "0x281eca14bbc3920919e001150451c3e44ff18e1dd1171412ff5e663d74a073c1",
            "0x0533e8a454b8cd6df8d48fa9b0a9cb2952933e1a6b1d423cbc54d0533a72599b",
            "0x284ccf70859547fcb9c3c7b64cf0ad62e51726ec81b58eb01c1a1f8ec7a9eb70",
            "0x04fa5620a2c057dc552a59fdefe50a901068190fdc3df8761991cab50a01a449",
            "0x2d2640a74ede9af6c9888e5f68a84fac92b13337dad8fc6152fab34b55419908",
            "0x121a3764269fd35cdf1e621c3dc6318f47b862380ba00357849d8840059463ee"
          ],
          [
            "0x22f49d7244077e41f409c0b353afd1696e3aa15ffdb4a0bdb883ffe7a1a87217",
            "0x25542e07c1c13979bb14f8d4ee93dab7a3dc750806cf37f2c02ff53b4bb9e66d",
            "0x0084b88b1ce4598b701cf96a3379a02a3157d4193c8a8f1157459f6a34ec32fb",
            "0x2f6da385450911cd272e13601e7ce66c2b91d809307492f7ee578ae34d6f5fb4",
            "0x1802b97e54bf3a8978632cbe10e429705b03680325d26ea190c0f1ebc7362ea3",
            "0x0054cc81c7d1d59581ebcd26b16ccbdcbf1968d77f87a2081d13054f51118f7c",
            "0x19681b4242d11e28aa72530cf33a7d15719f1a888fff625e04652c77ee2b2de3",
            "0x1abfe4b1cf5db29d4078e5289bb143498abbbdc9af56720470a26a3dfa2ba855",
            "0x1d2279673f6cabf0a1c4b8eebf8e9c78361680b2e59d7ec19348819f5b3d5a14",
            "0x0f246d2fbb4e1217f09631fbc8770827c36751e6ad8d6fb16810e3395143ad80",
            "0x2f80ca151b077b50767281ea5d4c1f7457f8da444dda16d8149bb6c1061ed0aa"
          ],
          [
            "0x1951523a4270c54403dfe3218fd3d4ccefa43114f1b19fb2c2821a4374718b9d",
            "0x12b5a09e1e95e0d01fbcd234fad473d8ee2ba976fa22827ffa6dd03c8b25a64f",
            "0x2c184e904d7bfd368d4495b9e3027f9af6b9313c8f193f929ac9e24d10d7a36f",
            "0x16fc48e55d64d83010ad573377ea2422397fc3a7e6c88af808a566de0223f0c0",
            "0x2db1ac4c2b1c23a00027fdcf0f663af896d87415bb035b149d28ad3da98c6fcc",
            "0x170c05a5f8a55d5c9fdc5e8238b367be358917a19a28b4c47e46f3e73d42a085",
            "0x1eb7f6e5520215c15e274355b19bbf71abbf04aa426cd07da536cb3f909f6e57",
            "0x14111a74bd24730c833699eb41b38f1d4ed16fcf0fecc1655b76f2437d4a0c9a",
            "0x2d46b48e5090c0c56a390de373f4c9a2008db311fe31063cf4fed54629113585",
            "0x15f30ebdfb8b8ee644241039a26b408dc7a8de77f2cc6fed754b703ea92dde53",
            "0x1ee950c45a0c2f4a4b64688a7935ed2b63d4fe5b414afa05c1a284674409f165"
          ]
        ],
        [
          [
            "0x2cb13179d6e8a4ad1b9fec37376253cf64386ad905e240575fca86539b272dc6",
            "0x0fd547840f3a30a533a994d1fdb3f60ae5073f4484f34be951ee16a276fdeb9a",
            "0x05019671bda026670c7ffa9081795105963f56ce327fcf78451fba2bdb3ac1c6",
            "0x2952c18c15558f29b2ae77fc39e51a395f173a9097db404db765ab02906b27dc",
            "0x2353a60af6bd61e5eac2c9a4263d451fad07380654d4792378daf752e5cc33fa",
            "0x0ed6a3bd48174e370b4f264b37488b03a5e3f4c0f61cf32d3157ad3e3b86f6bd",
            "0x21103a7aa20c8d15501be8c23504c6a912c6100c5d88085cc2e42a52302f4483",
            "0x2fb232573e85d68c536d100c3a6ea9172884451e677b0d1cd0fb4dc4c27536b7",
            "0x302a085be040ff9a709ad0c73238b0d1e11e1d17409abaa34fc45de29b541535",
            "0x0683e640e6154ef73c3cd6b1d0f0fd86ebf7e292e63fa84cf0a883c2f1faa8ba",
            "0x1f09f3fb07f7f6476fac98946b7375095e014b28f23a07ac9fc7077144ac3979",
            "0x0598c38d2e2c78dfe4907c74e82325cb191d52608955b583e5826ebebd1857b5"
          ],
          [
            "0x1f930557a284998225f5f4e4dfbcf5ac211f1b12d91b0562ed3d63285d7a714a",
            "0x04c4061820cda9bf472df3f64d6afa004f1e8623d0a4f6142cca1f19a4c275fb",
            "0x0dbc22c3e54c924a882c22000951239cc263755dfcb38b27ef4f880e202cb5fa",
            "0x2fbb1c59e9e8999d91c40f4d44233122ab35ffc975edfb43c53ed07dbf0d9c76",
            "0x0b8f40d2c4d28c472085203a0e460af73bbecec3b2b3a63f27028f2ca8a71251",
            "0x028c01a9f01601bb46417ed466be6008595052f782e46857d81229e64e6bda02",
            "0x23ce8e402939cccf36176a5bd83183a0d54a24ee6cabe4fc7f814dfbf26f85ea",
            "0x0db82abbcd3a1b56f7fc8d116cb54c54fe26243702bd3d57e71f7ce0d470a40f",
            "0x2e703ea9af99161acf9949da7afb18d462d85b671656d61c2cdee3a72390213f",
            "0x16512c150c1d2fb7235efd2d4f0fad5fdd78f8d0cde53a66bc90206c82c4b597",
            "0x0298aa5d5a44565b75ef68df902d791d01d98a75e822ef553b1761c58d6fdf32",
            "0x203fd2078ab2a8f88b7606543145ee34daeab2aefca31bc04a476065697cabf8"
          ],
          [
            "0x018e8222f6907da5745eeb9cd4a9e62f28b8b710aa85fe729f9ea73a3ef0099d",
            "0x107757eb0c0799f781308d83d2e057ef8106f6b656b45e7636181e113a2cdf32",
            "0x0966a21b9615af2b7563dfe41b8b9fc06039512dc9c8e1196891eb77f856b608",
            "0x082046081498eee63c287c6fa3efcdefeba1b5272a77bba9cfddb56afa53c82d",
            "0x2c7ecbf14b2d6049a6439d0f29f10e26ec975acc3e3eddb77c831a509af59196",
            "0x144022e7e077ff22a2ce3dfe9923107d5aef046d0a1f2cb5f36191ab04eae4ed",
            "0x170403d414148f4681b8213550951e238edc009f46b00693ce3d9c5800fadd0a",
            "0x2997d92a5e9bc66c84f635e8cbf080eb720ecd4ca3e42c3ab8d088611880861a",
            "0x21427b3a9a2cdf1e2e6c628906b21e24271d72c18b0261be68cca44865dece11",
            "0x24bba58086a78541a8ebfd535c107c36946d78ba6cb26d227e615131f71d337d",
            "0x01fd5a6eba52e9ea1db389a1fc8dd3d0283d737c18eb06e090b6fd2dc88e0a14",
            "0x1276442d9383c52d50fc9b5ac34442a4ec8e9cd7aee6d6ceacc1a6f521aae4a4"
          ],
          [
            "0x180e924d757d0be4066feb146ed56212e38acf9df4957432653f370f905b8b07",
            "0x2acd39e3892ac429ed812863efa05eda746b55bb974694a4e77b9a19abb55001",
            "0x17b18621dbd61df085da4cf8a03395e3700269c7df4d98ce4851f90abcbb3631",
            "0x02a429c2d06dcf34d34730c3af8bc19b04abd652468de5a85b5d5cbfd9c23e6e",
            "0x197dfb64189c09aaef94a1f542d8c34aea27fffba704202d5286d62bd0eed372",
            "0x0fd3bdb79cad913432b7d3828e072dadc26cf4903d56b8976200723846c6577e",
            "0x29b9ffe05db2c52ddd1bf0e5c532eefe70497c7df4b97db2f0624836576a6b29",
            "0x0a2a006e3b086bf502c5b1540eaaec14b9c15bf88471cb6d479fb4563f016497",
            "0x237a9e020908cd0edbd9eae8772350e0e731e3228b892fc5f64fdfa9b9daa670",
            "0x006d349d6182ec30d68c9be010587c707f7e1e175c0d324e6added6337a72c2b",
            "0x0aabba39d220f30604d0c44dd47c3c70de3b79f5baa70a3a7a0ca02ae1b080c5",
            "0x16ee980a2c67de24fa1a34082f11c71b7c45966a6e8bc6aa1a1dbc7ef6a9bab2"
          ],
          [
            "0x2f7d0715d1391190e7b14a1242b6799eac3142e21f08ca02c21755eae77a55bc",
            "0x29788bb6cd947ea9efaeefd0eeb7fd563fcc2e40bd623ea2b2442b55d98dc5a6",
            "0x12cc274647fc572bb79035bfc3332a4e566a28011f69dd0874f01c56bc44c3e2",
            "0x2ef584c3aaeedbbe2b4b103a61e94ed40a97294156ad7ddf0de43b845249f534",
            "0x05f9a6a8d64cca12725dd15110f74aecf99dd30e57a7d99829cd8757b75b772f",
            "0x2979d1aeafdf97988560d4ebbacfa6e2b7f3d026946abbb9d5397645e6e81825",
            "0x153891052fca1290fbf83240d334fd4ce05de78adfaa2c9686488e0c47ce1fc0",
            "0x1b8c7eb04d351aff4e76af7f9fa1114fe45aaedafdeb42c1c23503b122639c7b",
            "0x2d8125dbef602bd970d11fad7cfe06c3c64f5687b09b960ab92b14f69efbea57",
            "0x10924807f6fdc4e9e586792e3ace3001f16bc02e84ada5df51d7bd37243ee1ee",
            "0x230918919b6826faa7124c5bd15d10c036d565e100b696a3be7afaedb2abba6b",
            "0x1db922b8c249ff7bf96121eae9d9555ef7770f3dd7b056191ae9ab38a5ccf6ed"
          ],
          [
            "0x02283ed8d5e6f9470b3f4f49a771061e4a4fc7dac683defcc0348a8862c6ce71",
            "0x06ab8672c936070a10757adb45031a5e2922f0fb8b5fab3a4f5e3872fb582ed3",
            "0x2c7d538b9e6d2b2e06e72f8aaab26dbddead1fef6a740a11e9953f8e8e9ee057",
            "0x28e4620d210536bcaa42ee46b1cdcb21bf215933bae4eec639efbd51f4bb6557",
            "0x00fe0def70bfba40679aef8d5a239b3a1b5a52fe8fd7edb754aee2b182d64b66",
            "0x22ae023520979741e5c58fb04fd25d12dc8f5fcb6ad15223a5da7e0f91c7b4f5",
            "0x105c0b246660c4bd8a6f1b36fc3cff86a2c432c0dc9321cb50abb98a10cd1bae",
            "0x2a5aba3b45e79eb2606b2a5b47eb907584aecfbfc0b4cd50cda1ce4854338597",
            "0x23a3b23d5edf5cb66160fd2523b3a383142291c0e0ee666682e946b1d57937d6",
            "0x26635f4df7172107dad6b7c3068d2d438bfbf486471039f9e65a9c8462a2c9c2",
            "0x2bb28ef42f5fadab6a6ffd5655b36580deb063ae3081d587bb1598878590f1cc",
            "0x096dd43a832ab68e35e57c98d7b01f2a2e5936807704593ac72c74001383f7e2"
          ],
          [
            "0x21f60efb132b62909990b9f994f381a9c02abc3ccb54c5c8e8c9c5664c6913d6",
            "0x1db98a562fcd1a5e4496e61264aad5ea3b455f46eabd8957ba671e9c31e5092b",
            "0x2f30800c0ee461010569d36b60685a38b02912a020bc4708598854f65822f15c",
            "0x1e32b1e2e6b59273a113d609663af6b30c95b36884fe5faf371de3d564213c3b",
            "0x1b1523463a45a2982889048681a422c02ea373f8b8c1bf16c74a375d5060c662",
            "0x05246ee7854b2e20e8612da021b30798e5f0d02a5bfd5e79d3f9ac6c79fa609b",
            "0x06cdf8055439ac8424c435e7e9bea3f0ae93eab171ac383ed2cedb460fcb04c4",
            "0x2f9a5cdb79645e3454c617d77a774feaf24ef603454c02076fc4c9d7548cc455",
            "0x01b1625d757786a19a93b37adf7f22ca8a502aa4462ca78f7da2d7c22b37d7f9",
            "0x28bf5488a525f5514400dce722430287fe8e4c810154056eb0f4d6fe61091cf5",
            "0x21891bee31fb7bd89f0e4422b3c8f5b393299af0d9825db9be73e7b20097923c",
            "0x2282e86ade85855d4ea0657c4add20625c6daa90bc93943b59a92dbb77b63681"
          ],
          [
            "0x1cde82acee60b84424e9bcee49a5464ee05d1cf0b70469208a675635ac715495",
            "0x1c4dde07d0f94d1aaa832ac2f5712d438b4e1804b5209ce55942d7afb24c6401",
            "0x116c45e4d88ceae4565c0e94da844eaf2775d5f5b435d94d2d3d38b583fa7841",
            "0x18820364804d22119347b728135b409956f7933defa1059d634b977d9d3abcde",
            "0x0c849d07b1d9e6ecbac517fc19237ff73424a0678f94699b23f76952afa4514c",
            "0x2b60a4d43d12cf31076e0690e931716c47a86e7728c34b2d3cb0cbcf95bbb74f",
            "0x03161d7b94e1b0411fc01dcfbd748a6df3156ff04536b3dd3101f7b2ebc3811b",
            "0x06438e8b0220464039a7b8022f06beaee502c5de269db82f91d88fe1b72834fa",
            "0x14898babc8810cbc626688531511a8473ed89a22569d47ba586c284e45bd0ae0",
            "0x0090dfcc0327a541672cfc26c7e1370583c5f9214177093010fd3fbf279aafd4",
            "0x038e0c2e29c79ccf46b5ea1bc589276aec95b74e8bb82e4385c0585637c885f8",
            "0x28331d0d31ca8675ad4767c490261bbfe5b84adb4ca2c5599a87f331908130f4"
          ],
          [
            "0x118a24510a2153f818f0a996c87de913587805f16cdb1939d9406941f958e8e1",
            "0x2cfc82712ed9d71ff4fdf63ee4ad116fac195794f8d910286c152efd9f959bee",
            "0x2ffccbc40031ebafecfc3a97284bd0f6dc4d45eceb8b8998f1a667bee369ed62",
            "0x09b6c00a37df2770cec0f1bf62a6aac3bd380c6ce9f4f96e0f0879237ffa510b",
            "0x2c4036616c156006337771c1e355fc0f2f238e64cbd69d068aabb4b58116886f",
            "0x041b909a658d136993b3f509a9e9d50138baca48f6b66399ac5c649e68dd3aa4",
            "0x25c075b41ea2d827a4955b6469db9d41760faf885f2c6e9c09407ebb1c4dc274",
            "0x115a91867233cc75d1c906a42930e93cb9c16afced390cc14435e5cfefb4e96e",
            "0x2f8fb37178b525758bf6aa527f25773e1ebcf8e1425379500c8245c741ba3fc4",
            "0x29a14dc4bac0a4c52bf30aaf6b9b8e05453d0d797246b64732d50f176a7ca257",
            "0x2c89dc7562b91d8f2f7daa209b7560520b6bc62ec631db41cc5edac1fb142be4",
            "0x14972bfc85de037b07e55332e6bc5b4f08f39ed4eb8a9721dffc4a586dd9a1df"
          ],
          [
            "0x164567b0de16b7a5550fca229bac7cb0779524325e4ca5e78a86078881660264",
            "0x18b49b773f5799888e9abe3f6883d7063333835b6cdd333580b2b4bf48f3b27e",
            "0x2007424b129ade2194c73e6e2c9d79360d1360c4fbb8c5f31330f938558b3ace",
            "0x0445e26e26f91707da2df5c188baf80ea2f48c703614980fa798971cd8ec60f5",
            "0x176804ec1cf85d35298351245d32236546838d9b98cf4242d601c7e8e501b49b",
            "0x25b6e65e90ffbf910d19fe3ae23d037f8f64da9fe3df483fc4f4977ca36a7b1c",
            "0x2fa2af7970e131f7efe3a7c788890ab860f76751e55b4ff634dd46cc4de660d8",
            "0x0c8fd4ece5c205190cf6c842d1683444079bf49835d5c8b8dfbb11af956ccaf3",
            "0x0e992f44463e2dfd267e6a4a1c3303ea7a1186252efd6c9fae9e5f0c1f6d8266",
            "0x02609ff97ef574fd68d16a3de0872c3b59a5b928258dd1469826a191dcbf5bd0",
            "0x15dc57879cb41d6015da9881f948b40d20f0e03fad87746d8575af009c96033d",
            "0x06d039b64e82d7975dd21a37b5ee79308f20e82e23489382ec2d176190587896"
          ],
          [
            "0x188ff303194112a7034527cc9dd0b4deb0960c9c106ce115178dd7087e4e8c02",
            "0x0b300de5b99c27d332091f8fb0d97cf04a86a51d4d2037788e0d4f38e8f4eab2",
            "0x2c53d6676d4d4c87d9eaf5d4da08d1e98d103a3388d59a7c0c3de51e2623aa3a",
            "0x19f5101715162976766e2b57a58674bc58e1ba2be18a59b07a07e4a93e038075",
            "0x2f5855a876a37f7bbbd6104accfcae507e9ddcd2a7219b487a76b17c525b50ca",
            "0x2c0de448a88dfeaacc9bcf2850b6ff4f701e1a538d69098bc94087cc35930966",
            "0x0ce587066eae0c345c3368c53dff2170cdb081bee52b243a1e6de6d4f82451d7",
            "0x2cea98cc64abd926df963da57f2ef4c434141cb53ac6311b2566edb957982713",
            "0x2c7ae475d90c475f73c0d29be8889d0c4b8536fee6c0389984bf9e4dbb1aae6d",
            "0x23238fda1417302dd03ce54607749610292945bddbd587241714fd3964af5f10",
            "0x1c674ff2ead27ce002f4befc7ad5f0f5123e59793c0fe21075e819ce56ce1e83",
            "0x2627be68d9cd0ccda3828d51621ba409f9acf09f1a9cc503a29ec306f8606ae7"
          ],
          [
            "0x083d832adf9bb4a25f686abeda9f16ebf53263dcf9ef4311781d09920d094ead",
            "0x0541af6b96524662084d1208d71b6b2a8d66d91179745b213679c2a2bbc94968",
            "0x2cf2c992c02a36334ff5dc851646ee7da04b44eb544ee3c0fadb8dc5eef2a585",
            "0x06c5df8fd61eca2fb4923f0a46dd4e416a3a3b48c10ded13133ffeab6fd153e3",
            "0x1a233c7cebfb0c6eb72dfd07aa2b537ccf291e84093aae36cc68002ffb83639b",
            "0x05f6d62f54518f039e79aa726bf15a5983583eca4062405400acca58ca9d2235",
            "0x2b09de93c6e3148cf7ff5731c8e144debb66ca896ecbe4089d2d22cbdb09777e",
            "0x0239ecd92517825174f796345db296562223760fb1b81c091b74a6a4a82968a4",
            "0x2945cb85e34532e3a22fc576703797893ce290d0156430a8dce61c9df89a8bd5",
            "0x00d3be6a5b12bcf1bc705c20c30f320b8881c6c2ec00e857685c0599262a3cf0",
            "0x11e7bc4a39d2730196b6c334f99750de5bb5e4fbca5d6a19eb7fe14abe845dbd",
            "0x0c7c9db952865fb9470f8aa1402536cb3b82276d9e288082ac7f83b10bcb6d17"
          ]
        ],
        [
          [
            "0x0d064dee824928d39f2a8be7d2fa583223c33995784d228839adde2559592592",
            "0x2b2ff5f27531b6f3d6a85d75e3e08f3a2f0dac3680a6c26d55ecbf803ca80569",
            "0x0b658849ce620bbeeff233b7d12258015ea9f87a5390f5614981eb6e4cb4a5fa",
            "0x118132fbc1cd83f95167cb4473d54c6bd2c417e2782e5efea16e72d47b48b70f",
            "0x0b5944768d61c1b3562a5749f4f06c4dd085bb562b838d7e2ef14a21fdf524c0",
            "0x2b04d6ffbaf7144012d92c5c6212803c0b5bcc0d7b1950b889d1fa6f3e56445a",
            "0x29be2a42834ae32de3320fb0ee46b4c102a3d1ae44c5dce152fdeab5450c9c44",
            "0x1946fe9de0a943d5a716eac08561cd91f9031fec82da9ab72883c7b218b11eb7",
            "0x1af3ca6240a55aba55df8e49835b92fa17e39ad5701ef70f8144109f894bf1d0",
            "0x081f58a91a4e0d100e0369fdd81a190035342fd0677ee1bf5215e47f8e58c2c3",
            "0x22a852af90680a8ca9688b71ed27c157d02b406bd6c7fd8121d7c7793ad2305d",
            "0x0b27ba82a0ffb98368981736ae927a227828985c00c3e5df8c1276b1001089a1",
            "0x04b46526207edc70a0d23c8438bc49a365635552dee240661a2cdeef966f20f6"
          ],
          [
            "0x2d8c70035731ad9efba92821a88119f6b8183a362be641729a93d6a327c03809",
            "0x09ef3492ad19dd1d0bfbeb191330a880ee7933c9d3b36bb5fa02283bae5d605e",
            "0x1458de516a534190c5550c6a1bed3af535c38b242eb9291373096ec60e39c1f1",
            "0x136ef2515955ff6619498fac59424816189f896ac0ed69b59854d105df47c4b4",
            "0x18cbfde0cd21c183797a2f089594a81cd828f3b0742371ed02eb83fb0064dd43",
            "0x22757da9e822345297bd060a3f71bb1e70ce977049c393235035677e84357314",
            "0x1622805125ddf344c18e351d11e82291618b975822ad0c903efbeada5a51d44f",
            "0x29765d8cf77619a580658d127fb6faa44d6c70a0f4d65dbaa960754b4195d9fe",
            "0x2bb0b6b08fc1bd11070edc42f23e807b82e8b88ef70355dfc74e096a7ff381cb",
            "0x04951e747b7ae6b99d9250108c5d2b70181a93ff1d4bf723781e1b938029827c",
            "0x17780b9469e81ca70c7cbb4347e7fb40c63ef68f3dde51d04cb47b3b83fc299e",
            "0x1913d51d9c71d042bfbf649d9e6e6ea5fdd82b4fd3173ff2fe02b85582528912",
            "0x2a9e342a56c8b6466d3fe533b89f1ab441b62dff3153d3ae6500c2c3be6365e8"
          ],
          [
            "0x07b620c8a78e09e49ce547aa783aa78f3e4594c49ab3dd6f602bc6c0351d823f",
            "0x27d6bd18703d7ca92aa24076d3187b6c0028d0b6213d9e5d2c66115237a19051",
            "0x2969eb5016f24b31accf173ca204668dc2229845bf6446cea007c113349bd4d7",
            "0x29c67bce04bfd020f4ff7eacab6cbde034b22fb86334675a361f059e50395311",
            "0x124474b08829d9b717c50884bc895cd3f81d519859d21235d7a74450d0a9427b",
            "0x2c7e28f59fe8a8a3bb2fa2b2b1e114ce283fe22a978a3df9f62a171cb1d65e4e",
            "0x165c0b978b4bb646a9ff225ac4900521292be54c879882d3f11eaa3103341487",
            "0x02066134bb299d9e359cb82a8380feb63b60e4b9859d9b9872edaf9152f92d4f",
            "0x09372ed18ba1a774eafe1bff6deec4bc0814b0899c6196fa15a7acd15ecc5ca2",
            "0x1e3a130e8caff9b5e563e8aaf84b2fc73668e351cfd28cf66f5012de61345b58",
            "0x255543a314afc5a2991413228c75eae398b90576b23b6cd86128665cc3bd9478",
            "0x076547449fa03845f185e61578a5a8f2683a19733fc04c73ac6a0b89bebb8453",
            "0x2f98bf081e0eb78f8025c03ee9c199f2e838c51e5a0aefd333e9f7cfb38f534b"
          ],
          [
            "0x231996b592528575567d39d00645a83b13929093bbfa00d6a661e4a690351d0f",
            "0x193f32a3f839f76049c9cbf2414590698a2118e83658327c4338aa3648d8f7d7",
            "0x0a5da659b6fcb1a4273e1b7e3b544d2cbd362cac497afd004b8ea920fdb04bff",
            "0x02a832ceed3837e742196e09491fe23e3f6e51126eab9acec96e71953102ef24",
            "0x098bb2c4c6334dfea474d04cb2e9761861f6b18a8058a52b619d6227a26228a8",
            "0x101749f9dd2605191c1963f25694ae267f6b44bfe2d1af34fefcb65e958784b0",
            "0x0c7b5e09343db5c63c110d3175d01bb498290d971b1e6dc0e9a0e9e7158356b1",
            "0x116a313d00cf99dc18e21f93a5bb198018bbea4b7cdced3e4d210971dd0a681b",
            "0x0404c0fa1bd1f7e059054cbb87f6b5c69d11457e59f90419ce4bd10bb8a803df",
            "0x0c1c216af33054c497ef04381f58582298b54335f632bd62add29e08067a59d9",
            "0x11cb20544f43437a688a7dcb573a7da4f8c7b4437349eedf3fce432a6f3c1653",
            "0x186f160ae866e10c4be0ea7d204cd64e57337c60c40b34c3a371d753f2ff001a",
            "0x1e1d5920edcfe9d6b2d0ddb2f6f741afb06590340fc07b182ea7c3ebbd933931"
          ],
          [
            "0x04e47a72e49b9c5aa3f69f6af22fa0ab640c93fc524dd3c508486d66f079852a",
            "0x235d0e71a350f1f23d9bb5182ac44ec9e4615e77801e5aadcab8336aadb1712c",
            "0x1219740c424743dbbf896996f0ee7a4076ba960a57e8d7679b828479218570d1",
            "0x2b501f1003e27aa809dc9e5cd84976a3b8c169c1e9c63977d7823f80d3f823be",
            "0x0f34db93ea8d2ad7d1eff86db5820cc7ada47bdcd8c82d01821f5c21a3ea2325",
            "0x04d02ab05826fa50bcc5f9af9e396477e68542d076b683ee61b85869d4535893",
            "0x2bcc82e75391be4ea9cd0f8a505f9e4f684778fc7a9b1bceb7868bb299cd2072",
            "0x0fe29b5bead54c5bbf426bb12844a2920884ac447906101cea9888986a030b11",
            "0x1bb2091870a4fac03682fe5b1e2eb56b14ad6e48f4676fe41454bfeeb0ffd4d9",
            "0x0f54c9c522a5c74e0d4e0c63611a7502657575b7a963c0e786d2a761c4e845bb",
            "0x160f5ac0b2481f8019e95e0b26445ba64dc03a4be8a15461496247e6ac29002a",
            "0x2f3d6b8e2361166089501b9147e84ab6b09792ac17a5f080d75b3e320affc86c",
            "0x1b59bb60e986194987fcea070498bcc7c93dd561ce8af5fade754ceac07b1705"
          ],
          [
            "0x0a8cb4b2bf3f0c5da671e48f83e5c1b3018f0d31200a6f19fd5195db22eef7f4",
            "0x1df5c9ef694afe61bc253ae908a8f6af0a08cdb9e78a9f322c22388322f16c2a",
            "0x134431128e5ffc0ab60136c5d851a11dcdd63cdcf17ad64fd77517701de675f8",
            "0x03ea4e2bffe02da5977ced1f1a6e852e921abe2e015f35b36ce4bd0246c2cd89",
            "0x06e03ca1146705522bb5e9dc73560eeee6b9b4bf51d48f953fbd1f006d758a75",
            "0x014c499ee51925b231da17ee7b55a75f96f462e431675ee36c7be4e9b069e260",
            "0x0611ecd1f379a0062b05c4aedb100bc015244c6a88f1631a456cc2acca8930cc",
            "0x22af37c0e4a88deae9f7fad83819910735cb4b49311e0aae11cb7534d0bcee6e",
            "0x299ef95aed8c75494db82e8679fbc6d5a3d2e29aecdcf6979a9b272a607dd5df",
            "0x103cc8384be1be1087b9bb47c0eb6049f85e0413f7b408f1dc2fa1e6fc4af91b",
            "0x206cf4290ac984434fa774bb0f8901a233905632b793c80b1d59966e96a73832",
            "0x0dd85dcf08fd38d22f316d91d812cb2a884308775afa9f667c6ca80954397c86",
            "0x24ce0acb522da527d3eab72865cf073d954babbed3cd1706aa69d767e9afe7cd"
          ],
          [
            "0x18bbb002b46f2e5fec2b120faf87822ca8e77ace94e03aab5c16c4b931739dc8",
            "0x1db2021eca3a3624a7d45bb16cf4a44e2af4fae0dc280030e7ebe55394f69d8c",
            "0x097c6133aea8fe48f3a5fc416bdf5e46d05de0723bc49e53b9fb5e83d350c295",
            "0x150ef9e932a74b8debf670080641339b12684ff5a303b2fb7c1d8d56f56ab61f",
            "0x1237f44f036b2da0067a94947334e3afa2ac4cf1009896766f5b191cde284972",
            "0x2d9ea99d2d237328266d59dd7e018bbd6bcc7941d9ff5f07a17baf0099f614d2",
            "0x0477f951e19f531b8434ad755b6783d61b679efbb87fd956e394db9c434e2352",
            "0x1d8b8ba772c4cda72e8ef9b19c424d55d57251b247c632bea255271afcfc70b6",
            "0x206aa2f36e32b2b06d6be48ad493d354ca7468753f526e6bd82549fc36cd4109",
            "0x28da9309acca103ecf19df72a722134d530bae6c660db3c364d0ebb200c2aeaa",
            "0x01b9435855d6cc4339240e9fa3819c2ff420980d6cf14721b75e4cb1fe57e118",
            "0x238832e643158e96689b5803b0b77601b59bdfb4926113a3455f1ff4df6e2b46",
            "0x0b43b8facc43cfc067b5513abcce846504b9395cdc14df96861a528a52ae2ec5"
          ],
          [
            "0x02bfae1b054ef2e924d75a8a01283da29103c57bad129ec8396ce274ba4524df",
            "0x1a46a26691841c26109a32ae07eb584a6b8af657273cdc4d8a112dea0bcc85cf",
            "0x107da0784dfb314d82859be44d37b4d2b6345c174b91651c65c98449682a5204",
            "0x2b45b3be2674fd820516acd6cc6183c4fae0f7edfa9afcd02dfeeccd02bfed46",
            "0x2082e9103cc45245924289111527312860f6e7ee94578f0118f4a920d0f8d525",
            "0x303a9e22855d95d07e8172f3a0536d4b95142f962b006a8ab09e7bb6335e8487",
            "0x2963514313f046f844f950ffea80f5e5b424b707f16599662e5a2e3668cbe5fb",
            "0x04b7f8d1d5ec8bf689adf12d656b94e15b0b229c1638c9c4757faf0d18fa6433",
            "0x259547168b64b2a228941a542f394a2699c081c149463dc2c3d21fd8b2e4f31c",
            "0x27919dd2f9d3dc9fcbda1a23b95cf23e3630e6fd5210faca6acf4629b88e5ff1",
            "0x2b9237e5941e1657efa507b892c3b8dd57fc8d52876ecb599dd5e1052b6b1f2f",
            "0x202e38e669883619ecbc6a6a45368b9b9a3e9ab67efef50f896dfe48b78d3dac",
            "0x262758fb3e076936995ff3140ef7d1b0a1e0fe4240a50747e2c3c120d977f3ac"
          ],
          [
            "0x06d101b19477d1627b9542581bf0cdfab38b05cdefdcb81965c5be00d780f192",
            "0x0cae80cc05aedb66d6e649b057dbc5ae9759da5d7b43d5e25a400e1f92e9d1aa",
            "0x12256b3b99d31d8a372986f95d66cc139dd23e935487da26b3e249ea7cbf91ae",
            "0x238965d658967afa2bce50ff18cbbe535327c65b0b76e50da30739ded25eb492",
            "0x23a6e143284e8f238c4b632ad78ace5b0dcd94a897cb05d1e297b4880e7433b2",
            "0x24e13a38f04d5e0fc0b6b6e0f782a6a523a8b3b0127224b8e23751b9cb9f8960",
            "0x09010d73677620aae1b0fa8023ff1c812313ae9c3bf43066ea60bc1ab477a7f8",
            "0x0a41e5a4421defd5ed7acfd48401395a409a67c3edf4c168ce3368ed944212d7",
            "0x2fc7d17f3a9afc1de289ad0f94126aeec834498120629cc87c4586c627780075",
            "0x1f86e3e9d147ed604c71e1fb6ef8459cfc40001bb4fc5ccc2661669b155abeba",
            "0x182d8f91ee2a9a26215b35f3c0eecf8ec5cc360124cf6b903e70ca83126975dc",
            "0x067d2b612d75f4f974312d04ae0fef43a35b60ef054c0f475302c55fc10bdab0",
            "0x0eab3f26417e6b53c532072de92d4aa78ccdf1da91660a461abb0f9fd7bdcd7f"
          ],
          [
            "0x18af61f6184ff85f104c2bef179b3ec5a5d242dfbebe8e27a2918f620e8a5be8",
            "0x195057af1319e24df1b905c6e2eb2957003cfc34b001c0e54b9dcf2ea5df6be9",
            "0x1d952ebffcbedd26036c54a1e8a2828fe320adf07a286e7f2c211b47f6c3ee86",
            "0x0370b757ac6cdd46610eec0c22d43a543d5e0482577bbdc14e71090307b5f69a",
            "0x22e076a3aa6ebfe996ba068bf5bffb17fa724338cd67f67ea25330195c628172",
            "0x126851f3eadc0183288a750153910a41e074b3544f0610a51273ad3698be0cb9",
            "0x0361f4082b75a6ebd23f9a6e7309d8c4e7520159da23441edd631a6ac14c20cd",
            "0x1abe8badb2d12353b9bb98152086a9421b7cee17761730e25ac284d6b1ed7b37",
            "0x15a7e64a5a46f5973e4e82a263ef905ed64f182b2041baa00a1359e7e9c5eda7",
            "0x0e154ebd50db3c2864dbe1ed72b0816210851b86c353692d1744cb3372bfa72d",
            "0x25528d5d31dbd77cfa6e7b1847f8e84c81c1ed5bae2a51c9e403cc754c54bb55",
            "0x21f0c6b896fb14220d811441629c78f8e8e27746026220e331cceb89a0ee89a3",
            "0x20addeb2afd20e752a39d2f21ebddc2772773b062922dc8dd3ba068836dba464"
          ],
          [
            "0x11e3a7c2d5f74371beb188c6e3d7a14b33128af8ee3287546d12d7777cef70cb",
            "0x2d4d35acd9f28a3e6bfd601472948293c1e4f084c714ddb1a075f2eae9ce21b3",
            "0x26309b52cb55f6ea5a9030b01378f65d2e6b7a9619926d9b1b1e21cba01fa7e1",
            "0x2aa84c1ef9e848a64f748b80e279ddcff871e9c4c3e2fafaaf79159b0b4e4018",
            "0x2fe31b0df04f276a525b619acc4a5ba3eb58d8c321c62390febab05ecdbc798d",
            "0x27c1b406bd19ed13d533550b8b621186b1fd47f671e6604680317e6638b091e1",
            "0x0cebcf30975b37267aedf521ee2bc753c3424dc4b6edf3984fb02ae1ead44daf",
            "0x291c0da731c016c0d6c4c75387030a962bf7a2eb35e15aac02fadf530278a3d1",
            "0x1216f05607e032e49038ac1458100e89ac8519a5a3cee4545b08850d8bf160e0",
            "0x19ae65945a1dbed3965f2de3a39ff2d54ab1dee0f333b88fb49edb3fc9ac7899",
            "0x2f996ae620d00a3d4e55ef7a6ce0b681388f1b7ff3875b725aea6eb9039d8b25",
            "0x2c825ee561c4ab6a22331177999c89806fbc34518387e807c20c359739ba9eb6",
            "0x0754947436c3cded29a60c9e898237c2183a49db7e70e7eb73aefb4b5c693246"
          ],
          [
            "0x2de5d6a7a27343dd0422ac71b8d409b43ccb0b672e978f8fdfd214f4d7866404",
            "0x025eb2ed84c520aba164e33f0353b5131886c0fbd18e55695541512dec563a0c",
            "0x0a12525f0781322371fd70b0928cce6e2eaaa67b8970dcdf319df25e8019a6de",
            "0x1bbf43ddb5a0b0d2845923b1ce128292359cbb313c5876fbb52f5e6b1fcb7031",
            "0x23e8c3606aee818d2afa8c4465d5ecb9c45bde78dd819c0f35a620593c1f42e6",
            "0x158880f5adb96dd1398128b9ff339f3d827da6463891cca129c012c06b16b321",
            "0x23a1ac07351946a974c8841e92092a4ffc6aefc7fa988e3c1f7e7c87e1512a90",
            "0x034c460fff28862ef7a509a1750a26ed1e5960fcb58c4f48c7d267c77e58dd66",
            "0x223db18f31c85e98e1dd7b7245dddda0ff8e319bd7d1a67fdbc7eef56d667818",
            "0x0099b97c878ce35c957d01b43dab07f8003e2c379b41ca61a6e56a9204fb16bc",
            "0x2c2b1e7c70fec2f58ca01bef5ac37cbb9471ae7914bf08df7e47dd8e3bc3ce93",
            "0x04625f2258edf0262ba0647cae426a486fc801dc0b59d20ec0f4d0af8cbd23ce",
            "0x239ca61a6ef7e501810aa89ab4996dbea8fbd47fd2f7a2c96a818e93a3c38c89"
          ],
          [
            "0x227cb43b9818924f2a2588964a0ad7ddfa3df62284b4b3b10199a501ed970622",
            "0x16c7c5c6161eda32c65bb347655acaa80bcc98bfc023f4ab12f5b2a899f37e3d",
            "0x27e37c68a01530f092cd37c4a26dece2737868dc2c3519435e1f2cb88f07b62c",
            "0x19dd1c6d45298248ad499531f33ce002505458d76178eca26298e39a62fb9501",
            "0x215f5563464e2df6a8daa8c34476a465e4ee9fa0ad01fc4399b649b2e07d1679",
            "0x00f36d166e99139b9bfc1ac3270a3d98c4afa81bf97436076f57383da50436a5",
            "0x1edd7c7deaf249e0fd3f5768aa92e9dad64118b491bcce12340c46f210b07ced",
            "0x08e1741a97f6348ed6d68f4b7bc6ec8b2dbf03f426769cc779ceee4ba1beb03f",
            "0x2f4aa8641ea4135031f4d97a7a2f679a8cbca562ba6aa54eae7d32ff7d04dbd2",
            "0x21a0a43c88ce26effbf8b9ad668056b5b0362e5009f3d80033db473228fb7fc8",
            "0x031b369d011f219e4a8fb21df9352878d93ff8035bcda834c3dcc41c3c2df85d",
            "0x020a72083579059cb659952d3f2a01ed90d21002275b5ea11f209c763baa8457",
            "0x19f11771049b5be81b43ca81e3611f4108a4b9dc30cd122441f74319c3adcde9"
          ]
        ],
        [
          [
            "0x0e30a774c353a2cbf244d3d014d1a0e5ff0bac5e242673ae33f1bb2030feff68",
            "0x12186bb22000ad84b6bf29179ade2d4e7e94ff07e51627e09580571061fa8ce8",
            "0x2399faa648aedf9024c6ac3ceafea248216e24a9e56caf5acd29ce2546a9f6b2",
            "0x03add29fe398ed2d44f233125ecd1509e3cede77e6be08b94af4fec87eb3e48e",
            "0x121af61f4dc5bb24890abeb9251e5cea94770ab062dc0c28bb8995dd8f183635",
            "0x2ca8ffee2d58f2945297b00cd0b511da167080d53949b3f1fceaca9616b6143d",
            "0x2c99ef5e064147da9782b914a294b6c14d21ea7eec1f72e8761671069d82a134",
            "0x0d7d07cd3798f44d832a6571c21706758693e5e93684ce2d1a5e8a53e0cc6709",
            "0x29195117106623ffffb0af525c838686d0d97259fc73a5194609ac7b7b171313",
            "0x01b62d4b17de67375b58f248a88dbf707cc9d1491bce0095644ca0219a01e40a",
            "0x2e1681bc7c22d24c433f81dd3a326fd0242bfc7e2bdeb6307e4d2aca32adda1d",
            "0x0065850d11d0eca87c3697b6f5e57f78ca86952bad1c9047dbd2eb6be9e9db30",
            "0x1a59b36b94f9d723577e504d600c493f2810f0e67112672c743abbb13abf43b8",
            "0x1a4b186b77cd53f961c8ccb7815d9781cef7a52af64d0bf746cb522512d3d0af"
          ],
          [
            "0x12826e5b9be1c9b85f7c98aaca9ce28a870687d3628d60def0ab3072b57b09b8",
            "0x237e39980f9007bbf8699dbece054fea1f19766be6101885d421fa3ea46b5348",
            "0x0540f5492497595e13080f02f6b1e653e2e51895160ffd5ca14d26aed93b8672",
            "0x12bbfbb110ec2971007ddac5f8e36f655465d05f2462996b2114efacac70afb5",
            "0x2f2ec51c48f8b73c51b264a70d2ba0b46bdb43f933de0faea8a7da2a97cb41f3",
            "0x26e36544d0b5952dde4007d11818465bde91c4dce65abc015e7556ba58b95ffa",
            "0x226bf94b86b177cfe7f03103d59e3f9ce2393821954708e7c723f8104a68c664",
            "0x25e311b37cee693545e2c2efc2043bc073552115b3a065cef13d36547b6b9dc5",
            "0x0f2336e0eee4685741ca23828c34c24f073491f0e72c139610524a56f71aa405",
            "0x0d9bb7dab4a189a3b6990a5526c82b0ae50ba7dd558f951bb9fd343cbb4b0e19",
            "0x2a4a6cc884cfd08af4b0dbe89b6d8e0e58113207aded8cbab2d075053efe998c",
            "0x1eb97819b3531ebb640ed6b42134335419101d1db60dd1a924ef9665f7a91af5",
            "0x226b91e352c65de4fcee112445bff20e4a67af0e110957319b2860d5087406bb",
            "0x0ac5b86128ee47944c12af531cf1458042c35adfcd9e5b6a7531973714559de7"
          ],
          [
            "0x22fea1297a4a5f08904d555c2e15d016102a4ed29c32b4bb10809ef14af42c77",
            "0x1808cbe7ddf2a3684d8a164fe2d150df62206f6be33d577dc5798f193aeed7a1",
            "0x1c1ccb44ff8ab6da854e9271f4bef26d2ac26cd7441f1b69d16eee0d7a7b481b",
            "0x1b8d209d66b2c1acbaba435e304ae20662d336d10330beb3355cf801f194733f",
            "0x11738ced3933c4b27de13911db71ccd58b7b31344ed9153dbddddb91fbdbceab",
            "0x1e97ce013afaa6e9c993e9cfdc9aaec91b06787819830985a72e9f7c6e516ab7",
            "0x066ab8beadae7bebd26a33adbd6bb392d6825da37a679e8af9ae8bc4813c3168",
            "0x21b37be521835c32b673a31d71aed1bc7f3ea96fe1d4c23f14623a0a851a3cd8",
            "0x1e86ec086805bc7712b7510def651249ba1d491076241d99d00c692880f39a75",
            "0x075d1aa6cd2b8d181c9e0f42275c9884ae6fa09186fe227e5c4673e56e3acd28",
            "0x142a83206747200fdb02773e766f504c65af82b200c0e7fd942f92be23d586be",
            "0x0ee4683c8da536b6b50773a469bbbde2e417a1cf9be221520af1e755968d7ff6",
            "0x168e771e9f8f860c49367ef919a00d4f128bab01c13d7dd72ce8d36bc6d1d835",
            "0x0c2a439067121449c1ef3dba6be1ff84f6ab7fac4bbd54ad7539e61826ca1971"
          ],
          [
            "0x24cc6751894087b831598b5bc7f9db3cbb48ce294d9208e1aa436cb5fa2e80e1",
            "0x033cccef05b0bcf7b77aa5560a0f949c90be5cc2c57122f9885d24a117c63f98",
            "0x0e8efc85cfebde295ce589de60aec0db43c81f4be7da44eb26fa4b71f7cb7ee9",
            "0x0a9d7ee7ee91677affd3ca4fc674625be897df79f82ec438e80f1e000c8b1f70",
            "0x09175b1fafacdc0e62b5f95e6ca67c3ffc96a26e37cfc734795b92f1e46124d4",
            "0x3016b074c814225e2d5c1091a8303eee4be476b1458ad54c16b4e1691f6b4724",
            "0x0c099861545e013a687cdd49a3a296a8d2c2e99691c2535da712d351d5e63c10",
            "0x0b71a06bb75b0a10bfd28a3788bf54a8a144b3287df9c591a2643c4100fe388f",
            "0x14937879c4c7127644c765b6362f8b98cfd32f8572d7aad9cc329bed5b507a69",
            "0x28f9e0058ebcf1591bc007cb02ac3acde0851427db20c7358dbef9fa9c57c2ba",
            "0x0df653524fff92dde8ec1c9a51c1bec30bf36a4f01e9b3b62eb13f8ffdf7b8bf",
            "0x02dfcfb280a3d372dbc15639eace45c0bac562c44e292f1429bc916578fb0bfd",
            "0x0b345890b33c23d167396c583d12e4f3d9efc904f261202512350190ab1961c5",
            "0x04f7f1fafee121bb811344f73f54f4a3583076739dd9dfc462b3ae6343c93cb0"
          ],
          [
            "0x2cc3d0503a0e1da952b081ba5dc5b117e646bed572a645266c6ec3ce0a1474b9",
            "0x2854c82b4b5f5df6dd3872e3f371372de0d12e16e9108766920b5458105e76bd",
            "0x0b1d810fcc721551e2a596e9009367fc6a924857ab29b703207b08c95ecd001d",
            "0x0b6eb2254edfae1d7503c3518e64cf19f3443d6cd03b71cfbf1be5936da4e046",
            "0x210a4a80e6eaa799f7ce05752bbda4d4ff0520742c943e1efeeb12a91229a5af",
            "0x1c1b2cf11f0d3a3a121be7d0ddfb24dc71f54b9bef943aee32963966922a8399",
            "0x1574c9e5caaa8a6a7fb4894d2c45d1901d1c42b3214fe9a72fd3cc668e399f76",
            "0x26ed5fff06ef9e1942bd3d0d3ba6848e47ec045cd26f93049d80cbfa6bcc73b0",
            "0x059de873c59806f55114bc3f8309f9b64cfcba7434aae220447ea0e9c4a66da2",
            "0x017e39ccba3432a135c0075d720c649562ee4d31b6da2e9c90bd72a039765e73",
            "0x2ae7f1414f1443735318163e1bfb1e1bcf5c271f37f6abf1aa86766b2e59e049",
            "0x12ea921acf5b8adc6a4e36be85713576d658099230b0b1766c666f12d92ab142",
            "0x1815d4c2e6a18f4f3fa538a004146d7f540fbe80a4605857714fba2795615df9",
            "0x18f6c40e3ccf885804b374433af0a962b2963fb9aa01e8bae8cc834b3e17a31d"
          ],
          [
            "0x11eedbe5a5969f33446503494b469a2b83f88d3aa477e5d6d7963a8333a61315",
            "0x009b63c75dfcab572d280b057fbc3640d35dd5f16244863ab8a31e0956da8802",
            "0x09fcacc3998065124de01bf7c0c8ba26ac4241f1f7deca1eefe5ef3d5015e3ad",
            "0x01a9ab3fc2059b0cff7e3cc431f7db45f59d8f7f724cd10a03f31a36638f8b52",
            "0x19bafd0d7942b839f36ad3d70d9c87b55674b9bdee02a7dc30e4f99ebcc1d94f",
            "0x00c474824afd2a880c6a85a7b7a5a434ac422c7a63aaf8ddc7c4d9325edef40e",
            "0x03a65a91d35b6e877908d5c419e7850f645f62b1c913765a214bb0f7a2915b49",
            "0x137908baac2e35e13f86834abfe98d1b54b7c25d6c85fc6c05ec7cded9175517",
            "0x1662f26cf04f5b969cdd6b93e890ef2b5b1124f51822888dc2167bbecf7c31e7",
            "0x0cd0a4c27de11aeb6460e32fa2bcb289cb83321723155304929eb0ca4eea03c9",
            "0x2030b7bc2a70905d031674efb420336fabb0769ac0125c35dfe2ff372c1aa4eb",
            "0x0b5342503af446ef824df4df6a088195fb67276657d420e6f312b2628e922986",
            "0x282a555f9ad4fb57698faa1fc3279bb8c28c1f8dc8c693225bd8520db4313489",
            "0x174c1a1095e95d4f098c8d60826776c2f73691db37ec3b937835b65b01ba13d6"
          ],
          [
            "0x189ae9e9b162ab1a19d599cedcef428bd1325c78740aaad6715b710bfac4c1e6",
            "0x28fd36f1c761ea7bce29e6f00067fa40b32e6b318f506b6c94bb847bf72b5b52",
            "0x05d2f0a3c223122ac01214250320b52ff5a3d242118e19778b2c8cd1a976c611",
            "0x023fba23ab4bc24d4880ba5a6ffd6eb5050dfb8d0f56476d3a30290eda372ac4",
            "0x26b8eab0dd0d95b7a8439e0ff7d3438a73a27b5993d81fcece729a824a3521b1",
            "0x19775ec781fd4089859f6b7f127c91eb83eeb7ec9eade14677b0a6b10b9e6e24",
            "0x0c073eaddb5d3f79e5bf83bac00f37700bd64502d8bf7d5a099fb3eff7d3b03f",
            "0x143991e8386d62334ca0d87832a0845b48416ef5158c18e7b9db8cd6aee223aa",
            "0x05fb897d71edd8d8eb1f3b5c823a5882a06d964056afd532e6c88893a25f2615",
            "0x2745a059d0962f1bf0dde1e1b97e0bbf4c4143d10fd3fdeb8d2b295ee4d7a9dd",
            "0x12a710de6d17f91af890102226853bb64209f1b41331a1d17305bf5b7b52172d",
            "0x09265fb314a676b6b3f827f07283a1ed4f300e8d90f967b20ff61f455d2ab2fe",
            "0x148ab15972a6925b714602710fe9e64c0a015053acb838d0e876a46cb5653f59",
            "0x1f7f9704cab1cfea2b2471d579ef99d193b234af90e62ca09b5a671c2428a515"
          ],
          [
            "0x1aad11449d6e2c6e1adcf9e89114c336c0145528f356ac049f52fd8cb084370a",
            "0x2b56c2e44f703a3b143da03c25749367f752b16817257e6d123b10bc85543432",
            "0x0c7513f762b64022a151d62302099dffd51791d9afd3dcf96cbfcf6035a2c27c",
            "0x0b26700fd4e950c25ad78fedb63fcb0d9ba73ecab858c071664866a9096f14d5",
            "0x173985fe17f3b0fb85de6104c02b46c3d79eee9dc28b567f02ab1a1c0ddec576",
            "0x20a9a6284cfc4381795e3b06837e9596815fd5b6f162bde02f97db687c8479fd",
            "0x217aa400b2b625bc36432a545e533124f99c1cb98eb85df747319e85d530470a",
            "0x148dc9335f621fff9c8d2fa72a9cf5b6febabe1f5ce77689c1a29e393185fba3",
            "0x0ecfacaad0c147e0b3c7e049771e6d4072b02ee4d171c0e53224214d17ade351",
            "0x1365a904c7f6721002dbce17077a89a92bb8038bd27af53333f447c4cf035a80",
            "0x1fba713b98742311dfb3fa356ff83eef234ce8bf2b0d4a52de7af4d2519f2f12",
            "0x0ab913f65e1ceb39ed8b83bd5d7fd900e78511edabcfe62314dd10d567858d8e",
            "0x08e13c2e61c446b53024d2116ab176c843600d00e676402c4641745158c243f8",
            "0x01fa02616024cd9bedf643ea36d262d1b24f38a557a77a82c686618c3c33edf9"
          ],
          [
            "0x0d7e1eae2cfec406402d34c259e5966f6e2eb261d4f08e29088325a6bb669a63",
            "0x184e5824689e4f81438567df435f39e1d35a819041d7eaf3af908429beb2bc2f",
            "0x18fde6451062016edeaa32e40a8fc30751e17e9bac192f8ca891c11f39ebff81",
            "0x04a572b86105dba5253d7ed1e76d35a126e6718551b976b208f593f08158dea9",
            "0x1d948e8774b180fa5e1a3932439dfe8c5f32a437657d21277e42614b4c9a3dc3",
            "0x20441aa5f4d5638e64d7ad9982b1bfcfde158f6a3cd6af62941e05cc8e533151",
            "0x178a58ff122d168cd4ff11a47280a4b8e5cdb313411b6f6e9a947c7fb577a51f",
            "0x256e145378d2604db8c509dda4552452b6c4a891fac5da199c7560768d948836",
            "0x25f64d42a750971afcb8023070f6ec97bb2362b196a5aae2af6a70f2e7b357af",
            "0x02f812121e2eaccc7d51bf266398d5ba8f601a2aa6d335eb69f7864642177667",
            "0x00c8f8722892a2f06c5ab454e407bd557e9c2ea77ef807ee0e3d89c6785b0d33",
            "0x0407d585a6a7efb561377e5f3972319a3e7285e146c5499ef6c8504a3d0b62e3",
            "0x11cb83e01ff5803b049a2b59ae9915b3e0045e1db694a6df9de9c4e7152d191d",
            "0x2e1c292e06b7f8a6e4344f10540675a63ca49e452f69565fcfbcd43bac0f3af4"
          ],
          [
            "0x0796a23ad6ed2ac995104a0d3e6c75e977ce29aba1d25e62a9a8a20364ea1be0",
            "0x1004c5ecbab6b7d12f6bb4caeab33dd56c1f829ee28f47c29fbfbb147e884654",
            "0x077559473737549dfb2016dfa72558bb2c1c816d7318763a5e4fd516b04914e8",
            "0x1bcbe67ed5fb7522adeafd1d9a150f8d57ada218db346915c86e6c00c00e38b8",
            "0x1b61a03e218362204fd20b67536e5e6ca7b96dbb53d53ed1602302988614876f",
            "0x2d3d269ee324e7c43c11aa84cd15bad65444ef8369df15749a8a6b2c8121e2b9",
            "0x0ea45d22479ef5773e58b0fe740868fc1e8b50bff76049d5b6ed5e723711867b",
            "0x2280250e212be2a48d293796a88ac62b05411012f46a66f87a0220a3dff3f79d",
            "0x20be703f86d7c0b9dad98ff8bb9fc92fe8ac0a84c6897a75d851146f74840b71",
            "0x21f8d854091ddb601dab1b01fb30c3d4f77cc3167fa3332c3b32377a07e6aac8",
            "0x0dbd093dc16e73832bde62d05cbb06f8271fa47229470462d8c18cf8a124f9eb",
            "0x2ff5bbbc022d1b74fe184c064e58d967f1aad1f0926c906a5e356cfc3b81ad24",
            "0x119816862c8226e9e5dfabf3167b3b2bf7fb3d19063989b24a16d97c94bd53d7",
            "0x06fbced52576a913e6cdc5c5c96fdc8f9f4e931fa90beeb46d9b3c2d775e1e36"
          ],
          [
            "0x299b8e8621d7d8c8d3d6286cb126b34ee53b2dc9a3697b8380c6e47f5711345c",
            "0x0a973a665693ed09434edb2cb0a971ad277a82b3385788552349ae09e8bd0c85",
            "0x2de9ee6529e5abc7aee93b794c4eefdd517c4fe12fa56bce06a3708d86336bbe",
            "0x2ea6b7a7265c503fcb284c2bb19512dae71ef357125c3ac755c6bc6cc37bdb66",
            "0x1380beac7b062c6b89914a976a8d0b9d3276a13c82c23fa21f4fa4403e3267cd",
            "0x1a5718f4a92dd8d179b932b0820f65c7bb93eabce398f997324f98ac76323b92",
            "0x1c7cbf2448de7114eed701b041809034e07b946a0340b777268529d582c225aa",
            "0x09c89e06cad5430153dd52cc66ae4f521bf4145df048681beb2e06a385050117",
            "0x296f3a9c104222692a44ad24f0f6fd8190027e0755567e9a7009ec71ef440ea0",
            "0x018393505ea6230669a8030f6e76130a14c1070a901ba5b640b88ae80d7d30b5",
            "0x1dca3060a6bbc4c324f7efba22274fd8d1f2560a4eeba8c8b0d38997e0d9c46b",
            "0x06da6d88c233e3182c5fa5ccda1392c0f89f7c6bec4e60da8df8054807eb0922",
            "0x0c61ec79b106e9dc6494a6359f175ff637839ca53ac8e7a13471c56646180390",
            "0x2cec67e62320bc6a0ca32518ec81c74363a4b6d259bd275a63425d6cede468d8"
          ],
          [
            "0x20f11ee81d2ac9a9ed1cac61d9cfdf10bf1b49cdfbb6d232872a1df1427c1839",
            "0x125478c8973bc395b648c822091f8df469504a71ca4fdf1dab59a708d0fe4719",
            "0x12b591b7af35ffd997b3a613687e449225625dd5d101cef2d6f2af02d9dbd6d7",
            "0x30544eda9c322c6c872671d667fc5fcf09cfb8d34e8e5812b6e738e7ab40d8ef",
            "0x2110c105efb481b679ceb2f112d6ea704442763ae2ac65edf8f15cfd169c560d",
            "0x08fd4397aa8b3a84dd1ba4e2d0eb7c6d1c5eda1f764814b5ffe204c8ec735606",
            "0x2487df9d5e066b76ffcb2f0ca190abf5fc1e5872c4b6a36a46870e9159201010",
            "0x0aad68c20fade1e3e2bf70fcef4b550ba00d6399e20d83402fe09b52ddcdf527",
            "0x06301679b6cdb17aa6c212ce342ecf681ab7cd96bf0bfb93350368004d97c353",
            "0x1e151fedfea11659c189a31ba27f2ccf6956084188eb2c4c99b827f645f1db61",
            "0x291bd9401de20916b9002a0066114b3bfae4d3c8308aba4afdccdf0aec12d66a",
            "0x00aab27e6279952c7291f036918f0b279d3b1d9f8e4e8ac380da77ec2fc24ea0",
            "0x1e8ee641308ba6fe5600b2df492cf2f14f9892ba1025826c53c77aeb7bcdb04b",
            "0x276e2623828949e6a2fdc917e2ed45dce0ee503cdaffc9add815f6d1d3c4f9d5"
          ],
          [
            "0x0a403e979943b8d2f947f6eda6d41170881341bb5e4fbbb3b4fe3dd7dccdd777",
            "0x2b0696d45980020a2a421073440e3a4fd39edc5288e6900a5958e0cd81e0eee6",
            "0x2f9f88fe9be36457e8a546455aa00a0f5100a7f32580b78f26a77bd0b7612181",
            "0x206733e327a64b78d3c48b6f7580d0887c1778343b67768859e2532d7d1c46a7",
            "0x00c272d10af2ef78a98dff7486c49d7505edd88c922e5672a3abb15cc49f4134",
            "0x1a327ff2c46f5969fcacb463506e102d682502381fc3f999b9ffbd4520ba4695",
            "0x2c0cbbe46422917152ca1906462bcb5a13ef536322a8715237da09b8c594cac5",
            "0x25f4103521e36d55e418162ef8ebfec6d45695520ef47b8548ba38b52a27fbf5",
            "0x007940eb04b61ec5341c1702f03993faed167db6fa2cea92290cd821b15fe4c2",
            "0x2ae1ec9e09577c82c97b4b09142ace51aaad1df7dc352cd4e5813d8cee9c98db",
            "0x1c97fc775f962fe05a7b66346b93c3260c8f6a90a7f5c63223a3386e19852ead",
            "0x27737fcd76dd296c28817646d30b1168c4d00e1f764c4565caa3276defd15c7e",
            "0x16b61b242d41e1975843309a01a36a14397d7c8e7beb4afbd9233b453aaccdba",
            "0x0c75ba60f8e0f6afa126e75703b83d9908116147b8b2db45ef24f3156b8f1855"
          ],
          [
            "0x04646253380f4bf642972ae81977779454aa0833fda36b1822cb9c09719e3dd1",
            "0x0264625c74f2a3bbbdc19481b7866757e639c124b4eb560da531fcef99773903",
            "0x09714e717daa3ceb3e9794d24abcd172831cba18066c4c048b0995e9e6df1dec",
            "0x14dac9059c9e78d96c7ef807ba342b946870679782231d2af0f6e4ab76cbd101",
            "0x129dd677c1f8aa2d36d2a7d5340645dfac34a64ae456f91b97de9f8e91313615",
            "0x10879ceabc3ad045d76f6cd5b26b56dc47b512d6509458f9ffde8da79e6649cd",
            "0x0f7c3f3cc96ceda039e43c86c1b680c77d6f49f50e94de23e4db42f8e9caf7d3",
            "0x10bd7824fc1b883b3da0072d2c6194c4a1e5957156594e908adbf6e6b1912b9b",
            "0x090da12e1595551d2500f90310b7701df97676404113c33e475b2e7749adb613",
            "0x24ceb0766de25fc22789286a09287be740310c41747320bdf2eb5c956e040356",
            "0x1c7dcecea59e6f7beb6d702e2fe74588415d30e5dc09970bb2d56acc8e08328f",
            "0x110a5e84de09209e9363c03c22b537ac6a7aaba2f6a9d1a1f6bfab71a960a583",
            "0x13822dcc3f6271b71549c2cd917b859cdac36af6848804d15a354d4de0f67ef9",
            "0x085e380905eb2cb7e753d0ab0ff4918b232c734418b6bfe1331de492fc76b21c"
          ]
        ],
        [
          [
            "0x04523bf1a8f284c6d95b310dec2b54e0e00e59b571dd9d46b6201c18e1b56dfe",
            "0x19a92ac6087ab89982fe5650e5e799f91003fd8b45400748d2c25e40f04c578d",
            "0x302608d750f16491df5a285f5f7f6a5ce6b554f5dacf0b69d450b24bbb4967d7",
            "0x1a3c7daa6b4af5662d0d8407b287674d83eae5b7563405f48def49981c98c424",
            "0x2db1c9855ac29acc679367dbf70f08d98894077df2411f91ef68dd90177c1e9b",
            "0x0f06ee47558f182d810bbcb214a25da7f70a567a0464b348e1b30eca7de99d27",
            "0x2166d78d948dafa963381cf1560d00bf3a0a1c288a743344c8643a58daf8cbb3",
            "0x2929be9bfe3f93cd34fceae665d96b1de1afb26bcaeea2f4edc454c50cbc4401",
            "0x1076d439c67997c37c6c1fda9a37dc2f762dd577946f36fcfdccd7898ec67cd4",
            "0x185c9ad0da87cf824624d02bec3ba4665822a0f6b3b25deff3afcc687ce1321d",
            "0x2702b1be39e91044fb73926c1104719f4c037aa4151823ceab24f0cec49f4648",
            "0x0af71a51cd463b9faeda93803cdc03186c7781845252fdf4e0155709d93dd375",
            "0x28667f9c7332073e293c80b98edffae01af4f67b4c52ab45e49db8b30f182d28",
            "0x2763c33f5b2d7bc3a23040afbcdaf998bb13254c272a5f8635a12606a59c2e5c",
            "0x0f81a8d8e08758e8a32aa8292666c4cb6ba3f5f06c4dcf4fc502ff97f03a85a6"
          ],
          [
            "0x113ad8b46c3eec20c9965b5a7b2e8a51529871d0401b4de6f63de9e5211623e2",
            "0x07930cd5256f8ab77ab92b08bbb5b195a44a2382c66e27514619efb94e649110",
            "0x28f8144bdae1b904ead70b3b72c7943037de6b48490efd3177783594edd28b9f",
            "0x2474f543d1f2f33b5ef3fbb190651135a59390c8a3661fae2df1d3f14432b608",
            "0x21715a84742c02d057ac41f743b166da023228425681950edfaff8581201a097",
            "0x1ef0e0c1f0b5f67644c486fecf02238cb7f4fa63a082a3c030daddce65a4b82a",
            "0x278e8dac8c56b28a23dba4d90fba91eb947f5092d4a7a9ec7802f61778488e87",
            "0x0faf33843e6733437e98995e6f7bfa6feefa73d7410d8585918c347f3cfe92a5",
            "0x2ba437d6ae6c588c6b71506c8b508347e634b65cee317af1fbb9cc2a997fc006",
            "0x24a6c1919f94aba9db98a5af38feaa5391cda79f9debfaf118670d7927e41db0",
            "0x04d80e7ef7e27a2b1397678ac42abcc6e2662c880503e4643fdfbace67273b92",
            "0x17f6a3aedb0005a9b0a258e31b8e6e2a48f3f9551cef6812a49075aebb8785f5",
            "0x1e62029129492c8bdf8514945950681361591a9f5eedc2449e5f229c85bb97db",
            "0x16bae774867656e64fc95f3c249f801f150fd7ee28d195bad9eae43743875278",
            "0x10f0172799be23a8fc3f156adfb6c512ba415e35167b563bf7b186fd12a41e57"
          ],
          [
            "0x1fc50a16dbdfa1c3b99038f47f81a1c5d1ef6e7b221d4ccca6e821220130e000",
            "0x2d8d3d924f2897199e38eafbc7e101d17d7e563488a9f3198060796ae84c1b08",
            "0x2aa9aae62cdb852490c650ff9e27c9b33d4cd4020ca66f5e1a6b374e662935bc",
            "0x1848a60efc89965073b95773f467666687e38d59be208e8377d31903921057e4",
            "0x0c893808103549d2030cbfe0004ea6655e24ee71a1f8c1f072d5cf6e17ae2499",
            "0x0ad80718c6e9d1c67b4a37b9e103db32f225fe42a9ba655ff065618b87b82aea",
            "0x020d87476f1243f490246f88736ee5fd6d33191f0561271487e9693fcfd7a649",
            "0x134b86642ff202388f4fe37356ca4f0ec3805566b7d4d412d8937a359ef9b401",
            "0x2c04878b4cb8156e9983d11574ed99dc7562d3fbb1878257abbc68852fdd2680",
            "0x1783a45215805ade9d359232120b183db54b43f9a7e8fb8dcd95ba9bbabbba59",
            "0x0fc96302e8662de23cc5c8c228ac8ac2dcdbfc488a59f4dd41e3f27095f7e195",
            "0x24b22e5ce671ce79dff8de16d7cd2bd6375d7ecaa016ecf59cfeb246dac80720",
            "0x052c33fce08d4a39fd805156c8affb84349428ba4920cfd2e7902ddcf9b0557f",
            "0x00f0d475225c99702bba4fd01276102b5cabff7bd4d147c0e3cdee4c07ac31b1",
            "0x1183e91b7ab7372f157d4c477691eeaffc9e8863fb2d806570c67f4b1858fc54"
          ],
          [
            "0x1214a9d6d7288fe85651a8cb83048c7669c83b5ed82ca2642fff01e852a44b4a",
            "0x1c0de2bfeafce164c9838067a8df6340f9d97edf0122333159b714f45c3f13b1",
            "0x1e394d80067f0e10baa95de0d99b4e39204a18727d1401b476ec976b5f173a82",
            "0x2ca2d8b0a793d90ed318cdb5f697193137155bcfb942d82bef558be5fab359bd",
            "0x28427ab007a68c7ab12371f13bd7dba0acf7e97ea6e64ae52d5219210fe8a2b0",
            "0x2cffc378d2cec76ba7080b37fc671a96328bcdfc4630fcc2f2133dcf29c70dd1",
            "0x00cfcaa1d7d382e1fe1fcb950e14df202a08793d7185255b025d562eb8d97544",
            "0x1d8724c5e641d96f6e372771b0a776bb742fd3c08e1ae250432246cd3bd01bde",
            "0x0fee8f9731397974100834649ee87a27ac92be7a3810303460141aafb542a429",
            "0x116f239abe820737b5e1e82b2ace3a45cefac489a6bff084e323036f54277108",
            "0x2a31cadb918d78b96dcd548b394425a42e2aa7a28a6b63e509261bfae6fa25b3",
            "0x240caf6d7ab2f7b6ab3d15efcf3074f5b2142a1e804f25012d988454809e096c",
            "0x2224c85f0c0b4093014db1e817d1ff16918f15e0cd231b848a48cf83324c4144",
            "0x0039a288951a0381e3aaf598ef132853b5d694716c20db87923f0bcf14c914a8",
            "0x17620d438499f6c0a66bb577add4cadd66ad39e3377d302bf83d3bba126b2aca"
          ],
          [
            "0x0d421a7c25af5538788f49475836712af5da156f88c5867568cd958e305026cc",
            "0x20e4a28303dd55e5cee332f30eebafbd7932e7b3531d942454c344b8b8c17cde",
            "0x20bd028c958d57b79e35218fe34e469ebdaa8e8e714e918d58191f65046b972a",
            "0x06ed98a185bb2358f334eb257ae5e3183599c054c1b4e2022569b8368da1abc8",
            "0x051deb4b234890e31f5ac8e69a1e532453774ae93a9e9360fe009ed377ae9c36",
            "0x21f1f6a630471e32a8b9ac4b7ed4b04c56b96a71ee20a66a5458c6b8d5c6d346",
            "0x0c39dbdf6e6d24a91a0a45f922c894be252baa127d9ac76909f86dc0bcc68a66",
            "0x305614aacdfd4167cd1bfdd8fcdece6892d84d4a65e86e6f7c6349fb75e48b96",
            "0x0ef9ae65eb922605d4260ab2021dfbb4774cd5ffaedc1b79dc681208be6f85c5",
            "0x1adccb898e5fe18b5c29a4708c4b112b56d0fa5d299b5edc07d6f5bc00428b8b",
            "0x18a2661c03ab9b0d8f7d01091c7e563efc033196747e34139d3f5cc7ac001e9a",
            "0x0f8aeec74144d00a3ca38bff10bb0f3a8dbff4af6197847db879745aeb57b5ea",
            "0x1f53514a97e8b57204e57bd6b1b1d9555f3b50368154154e67c2134fd3151591",
            "0x27bcd639c47482d2dc8b6d13da19fb8d63f3d6c875f6fea486da6ff2ee11e107",
            "0x0e9e8373114ad25af97d28e272fc42d8490373cab582193b874a10428ee6cd21"
          ],
          [
            "0x2de8ba83d2b6ab6a711fb9230adee1cba46de8c930c86d266acb8c1cb9684e24",
            "0x1bb15ee4d492a8e2cf1b10db1b738c6780066ea8347abe536357a723f6cf57be",
            "0x27fa2120431379cbd86205ff114f34dd2dbce13e1c2a0a8e46a1dc27e7b686fd",
            "0x1ab527614a37c2ffb00c0fad360abaa447ac1063fb9fc656d0148cdce2d7c372",
            "0x170cee2983fa3d3ecef2f806f40eed8d8e135ceff076fc530bbfee876c9e7f1e",
            "0x288851770f1a13822251da91c84e123593fae1c9cbce6c4ff2317e70bb658209",
            "0x1795384e91bafa554dedf5156cd799e11210ffd2afe817b5c63ad5b85e7fdd06",
            "0x2cda26473cfdcd185ba28cfdaa15e7de2359646a0287ebe8b60d702df009010c",
            "0x27ab4b40901465ef59007114ecf1fbfab6157c24f402246b86a60397267308f3",
            "0x27122781df7bb05f6ae9e14e8e99da5c23dc77cc06108c0ebb061e5d1be93626",
            "0x26812acd03db3412cad4bba1aef71bd44b0094d318ace0366c79e729ff0eb2e6",
            "0x213d29d4e1b6c01fc0d109ea6169490076d131d8e034b3040f7bd9c3c373ea17",
            "0x2132f71ac89892c984a0a73653f2d45222ada34181a9e6dbcea0d63961f934f3",
            "0x121395023931f6bb3ef28b6063eb7a2ed7839e083fdb92c1e5593c83edff5f53",
            "0x1f665ba33da4ab9d9806caff77ced39c9be254fcc4c5da8f570096111fb109b5"
          ],
          [
            "0x0ea7be82f1cb493b1bbd83ab7ca285bf0a1559ea05c3f59827b3b013d0a91fb2",
            "0x2ccf31a572412bb7d9cfa637707853217e7db5550b1cc30a894cdf483a3b63e3",
            "0x0564651bc1179170e3c97afbc4f493617017b43b213eeed86b9b1bffe521fe86",
            "0x0bc769cd7b34fcd1b454abff0c00b89b540a619b87c95444679c3ac6be84d450",
            "0x244b6b63f8041a5975f4640b18c7d067e4a0627f18751dc906016b8893c35123",
            "0x2ff4ee110ee1be62e2715dcd119c95b95413376e88ec3ddc3f06fc9db8c27a94",
            "0x2666ec1a67daa7beb057aa0e6e8a10396601a21884372369c012b49aaf849049",
            "0x2b0666971fd911529e70ef918d019f44b5c9d77442b6d1866f6e76832d478847",
            "0x2bb5bf03cef933e4ee87f511de3985cff0323ab7b718d4cbca3f429addbf3052",
            "0x2e37a7440e75b649a0799cffeb7f9dae38fadfc7cab6c5585e4a84f437729d02",
            "0x000371f0d49346df2d88b9f1ada8ac99dd8125cfa6c30f3738fb9932a853268e",
            "0x0d0327b593042de04f58e0ff93386d1608d33a86872c1d3e7e089120aac7a4ff",
            "0x04dbc4c8de708e59aa4b2116e53944bec97ed42309b4a184561d8f32d291f9c1",
            "0x290ed9ae7479f9be13af13f98bf88507e6fdf018710e4859fd2e48cc66ff9b24",
            "0x135aa38339bd927dd5064e4d572df55811b226bab54b0acaee511d60aedb02fa"
          ],
          [
            "0x1e3ae7e5775d352651d713ebdfcebf9ca8e905cfb792bf7874239450f914c8c5",
            "0x01d492c34b245bc12941bb163c5118bfcf85bc4f344042b2031ed8662a1f6ffa",
            "0x07333cbd0ff13c8ade1febe72892d9ad435c7b451aa72a8c05a7082395882865",
            "0x29ad5236ffbb598a2f8d238703608db7a497a7453ef9d579fbf05be38f8f76f1",
            "0x2e72b1b114dfee7e8d7f0161255c6895fa786070ce62d806c45a22d7d98a0a30",
            "0x2ad369a84b57f7455ba31064001ca7779d2b4b96b0b4a91f156abec366aab786",
            "0x15793f31caea39de315dc5bf5a3662ad5d8e1a12fa1a7280f2efaadafa97adf4",
            "0x056c55df543a8d4043a12f409cd2c4bcf43a770f3e38c3fc79ad214b42da834c",
            "0x1ee10e28c612d9d6ee72f1274850c3e829be5c06f5bb293280152a5610eb01e3",
            "0x29f356dcec3b79523c0589a7046ef0758486828b212146c3f5ce987af3fd719e",
            "0x27cea9c43fe0bf1ce9e53c0c026e839d80a7d869136603102cddf63cdf28b975",
            "0x0bdc078b1edd9cb1fd2c2a01a97bdf7d458648439fac1f28509b41a2dc9e7740",
            "0x2565a17a6bc56e87b0b63664319b8a47bf662c1f49e2ec9251be4fdf33d90f4f",
            "0x15b085b5eb678f8cedf21bfb30e2d64ae1cbdd7472449ed24e6034101c658868",
            "0x22bc96cbe7f8cbca81b29ba7df848dd6599035ff515b6d485550842e1a35a1c2"
          ],
          [
            "0x05943e3618a32cf050018a4e2375f4d027b8c14ac82a0de57cbb90c5122a64b4",
            "0x1c9b5c2c07fccfd9dc6b3abfe05675fc997eb7b8cbd8d8b4cb7e671615b0ecce",
            "0x290a7ae732f4754e0cb91923c9248971932607be2e829163f11612ff8a955b10",
            "0x1434ece209d491280c5ae05d7e26cf92d99bb7289a5c1cac09a38ce53b6e03df",
            "0x228e7399b0e05802852bdd5d5e09966f03c4c3aff53c683eb2f69e0fcc21c0bb",
            "0x24f0fa154fcc6d6459d6c56f711f25e38d57e90be7b8046c9e001815edb41404",
            "0x18800bda17a89832fea54f26741d86c6b6fb9e15b02e7bd065533cb5661d2a95",
            "0x16b11f24502aa4cc3b0c2562a18a24ab8f986431b244034d3fc29555402b5f4a",
            "0x020a9d575fea891302b106439ab03a8a951d8b2ef2b562991946eb2541f1fbad",
            "0x0f9c05f609ad14debeaff107b95accd60e62662259905105abfafa9e8e08eaea",
            "0x095f1db43c827e6f0b9cd4fe929e7b8c78c93fd02ec9e0f10992feb753b4ca07",
            "0x26bc00d9cd25124442832d97abd90866d3fa7a401bf38bd95fa7ad526548fea2",
            "0x173e80596756cd9aee04bd6dd9dc15e4b8ebbfefe3771d9819bd4d444726f79d",
            "0x12a643f4a327acd2454514dd469551e36ab0e3f24ecc3b28a76dc1f38214fe38",
            "0x11e1b0af7f5fc9f049877154ae173a1a72c7bc3ba192e438a9d0fa81fdfa4900"
          ],
          [
            "0x0603755180f66e98215d61e5346b116cc00cfd058274d7d969b3af95e78bb335",
            "0x0243930ba01dfd3945f2aa02d588922b47c1bef2ff8023a849b4ca66a1bfe98b",
            "0x1eb520feac62e4545f4fe7cdb675e36474b8b1fd19e15d7c73a2b1dfbb23fed7",
            "0x255dfbdf30553413a1f8f5113d60e98583838d13e11c1ee02b25a387ea00cccf",
            "0x18451132581b9adf996c6cae15b92d2e4c09fdc7d6c27b4426f32b5e66a0b723",
            "0x07221cad39d9b5f8db705a8723038b92b6baf87284131735eafbecd533dda6d1",
            "0x156f6a09e6a81d8eecf4dbf21646bb968b2406786cd1dedd4cc732b7532f7fe0",
            "0x18ea0ede9010c7bf0fac361b5b8e7f97c75ed93a13a7ad4a017d920c03c98686",
            "0x0b73119c98d25eb6de14246b1401bef485c9dc6accedc23494b9526a39d53221",
            "0x1c66828552cac1443334ed70b7fd7fb525f907ab64479d117864c92e911986c6",
            "0x10a66268dd9a2f368e95507efc2085eeeee8ce977ca1eff5b2e3d94bc342ff58",
            "0x1f14aab5a59ad452cf692b123c65873dd80ffc188798a4570eca792b3f2f257e",
            "0x01d34655b5776e24701621acb41324cacb50165e019bff1e65f98304f7d822a6",
            "0x16a1eedbbea79c5411a639e3bf0e90f6e3f740f141599af8e6a43a2069572f95",
            "0x14de448becba6ca0adb21b07455d2c2864c7b85382267026e28f0978822d65ac"
          ],
          [
            "0x19817db66fdb8215ecf70476c4044c3f41d78ac5a549c684e35845947dca0b11",
            "0x08f328e5e66c0b879b36c233f598bd8578d18e2da9f019f0411731524f42d90b",
            "0x259a2a1f046844724cf992aedc2635f6680f55e8a0fdac695ecd05fbc2cbbd19",
            "0x067d9294b4072b12c368c2816a53bb16b7e7e2a79979a416f2d02af862abedfb",
            "0x0e1d7ec2a54b11b36e65d7551e9a875a88ccc7a6c0470e7c26e199670a0859b2",
            "0x173b3b349ee888d934aee9c14e889cd7d785d1e3e4f1eb72a5c2e56c48fd54c9",
            "0x2977658a10de6e7921ab9e34bcf07bbca61a72549ae57d0c15691bd143d4d2de",
            "0x0396097733de5a1fa4a548749b73ff7c426f98d9e5ad16920614d337897f6b1f",
            "0x2a66defcf489c23eec5079a0ece1c5341027a59e7c592e760184b826d70dba9c",
            "0x10f43368c0567f405aa6aafcf367e3e68beff957c4b0cba17c30c62b3f95490c",
            "0x25a2a43ee612663dbd61814f2deb06ed005a7414f99825f8be66f542f95a7b2f",
            "0x182f1c93c6eb29867b1559c58207a6aeaf40b66eaaf579ca6bd7ca40aaeb7abd",
            "0x042eea616d905025147a482eb436a3b75535c9869b76d6cdace118e15c91fb77",
            "0x05ce7f592dca2148e198554fd64db8c479f29d23f1f16daf3cb8930d9456e4c5",
            "0x1844a81d4fab57aedbb4c4628e2e47fcb2922883eab0b2e1de16f248de4bb902"
          ],
          [
            "0x073965f7a9ba8cb33a955d42da55fd7c37a3f0226b029d36dcb3fbea95d642f3",
            "0x284a2f083ee32a6663081c800713e0f2395e348dcecc89fc81aa75a5db2ba12b",
            "0x08f78e6dc59cd4694c41abbca086569a9083ca8cc800bd9134e4d48ed9d89dc3",
            "0x293ca8a06c5f179d938065ea47f80f65ff21969a9429e400aa177ecf6b6ae853",
            "0x029b68e652deac818824da0c2a11b408d7a839a2e8576c55bfa5f1335ffc5b93",
            "0x09bc3e40bfe5f616fbd520f3894a0fdd37feb29429fd3a5015953171de3a70f9",
            "0x284181093e43419789263736e544817111fdcb559a43773f05186608acc542e4",
            "0x0b9d5a3a957eef251ae9c26e53423f9be6f2efc24bb18756893a9d80e56a0825",
            "0x04aa8e91dc30f9ca318fe24718fe595871f7897e92d57f2d87d4b1bcf9a635e1",
            "0x253a11c66463a6dcafd8399fca58ba27febbc307d8833c666e0d8df072c5f69f",
            "0x0e4fd498778c2c76a02d0d91d8f89825856e706f598337dfebbf3ca33397968f",
            "0x126ec8c200262c45d1133bf9da5f1e5fd62bcea1e493a080af1bd283ab86f122",
            "0x0cf030b10a1b4291e576ebabb39c583fea0fa6decfa98cff7a96dc06cb77da51",
            "0x110298fe7f2bcfdac0bcdc3affeeb436d7b3a377453ae778fabd37a9acb299a7",
            "0x0eef04f24ae210ee0a94bc5621574783e49d4d93365a2b3dd069fafd43055452"
          ],
          [
            "0x09a550431430846b6694125b5642b00607f36a1a29485361a3cf427da77eccd0",
            "0x19772e83816fc2c49b96427c6ad0573347fa49a5df691252592aebc390055a35",
            "0x2d8ec6adad3a646843c88cda01285f8f32d29c6b1025cb5421422bf8bdba7fce",
            "0x255b96258dc8e1644f1bcaecee773632f25a6ea803cd32a1e01f82573775f6fc",
            "0x186e1360041193e12f38099b0e35e767affc3410f6a8dfce9bc75567e39bc402",
            "0x29cb31e1afef4f252578aabd76f23a1320aac90d4a0a66c2225e3d94cc48d22f",
            "0x200fa20ed1b871313900c01f8b697760d030d8cc0150fdc58e04a0d8a2b344b1",
            "0x1a63a589d1710aa705136cb520c2f1c44d778e490c212d4b72e9f1538e5555cf",
            "0x133369b3bcc73ee793e869360cd50d8df60fe398ed9d9c0d0d03e669f796e87f",
            "0x1e99516c240d42bcaaad9c73f21a46193db8433349203035eea30398f9df7893",
            "0x13d84ca7f358aaffb1ee8ebae81c32e01adc01e90d09c9451af36e31af82170e",
            "0x05a78464a4b6bbca6e96d839827bfddbaa9d924840aef6555de643df167d4caa",
            "0x260ef13ac7e80fd2db3de9eb942edeef3f5e252d4c04508b1e1b130191ad0df6",
            "0x14829f09d4beebbe6fc30545047243fb3dab99c62aab7364a7a5b427457a02c0",
            "0x1328467c87ba73028921a89333bab97f8b24fcaa72f43837cbcfe5dfb7a945fe"
          ],
          [
            "0x068eb4e9d6e0a588b61a6ad501f380da0f009067666c0853d156e33d59c43515",
            "0x2dc5900039d4c8523ac379945cb9b58a54e01dbacd67f0c4baee85d353d3fe97",
            "0x1b72ac4374e95b7b7d28cd2909507f3006e8352d4af19e47b0b909682a03200e",
            "0x1f2a8dcafe79fd0ea22bb1563c3b28b23c5c4d7591d45e06744b3b379d426618",
            "0x19294dd22da673470377d671fabdf42cecd37ecbc018386a438706d6106b04a8",
            "0x1932bc6bb488b736e0d4bf306d41e622e66c1d685aa4598153054b40f75c0b00",
            "0x08d1d68b8437bc980aa7c59d83393b162a0827de74070d2d34b4eaedc17e7e60",
            "0x1c0343816b8cecba48519b59b0fb6d4a9bad309ee38311dc3e8cfe8bad75dfbf",
            "0x0709eab96cc6255f2ae917914f25085025490c423284916e23b608638ccce29c",
            "0x0c67a06b33cf73882b1c7152d4585b78223d85c77cddc2c7d3594824c5016565",
            "0x0740c1e9b8ed16e9fae204369c554cfb72007dccfd2530f2e34d544003ae5994",
            "0x02a84c424eb58f9c38b4380af38e0458468980988faa1f0d4c6e723845678523",
            "0x0bc367fd93ceacb599c614aa28068783a5d27eec1fc8fa1765015b76dd82f5cf",
            "0x0278b58503e0b9014104f8c446bed4c6de575c72d4dd9db3d1866846979aab9b",
            "0x0791d832e976b66bdaaff450731ff35d998595ab9748f695bb45d2c0fef06930"
          ],
          [
            "0x225e00a0da5a7f7496b70d0923a7cf7ff332bff06958cc0f3fad439874f6024d",
            "0x0cc378b44e58f668b45832fdab4a49372731ef2415c37f40b5ded5594aef3cca",
            "0x0d7d8273de237ba2d4d5e8051c5bd5e312d298b6726ffbd3af7e732af91dff27",
            "0x22ebe0a315e07be4b0928885f52449b011b3967e519e438c424cc0428c35726f",
            "0x02ed3cf0214f444d436655e03af8aee2b4d96961eea06e8133bd6e8d3e38234f",
            "0x0cb6fa0a5e11b9192a51904939d45a05af8055bdea3f379faac29d1309830e85",
            "0x039598a1443c009678602b8dd3474f276da5d62425083ec628a1737e8cca3e7c",
            "0x1af56e6575123f99c5d7ab7b83770f0fd60fb9f4038c2942644069e3c243793d",
            "0x0e8d9c0707dc5bf80a2f08c343c69cc659def86630af3141a003acb3d3e90c08",
            "0x1f6dd8e85d3597bb6d37b47a1f063122014c888250b38cf8e82e3e5471ef84a9",
            "0x0cc8f90bab68e6de84845da1899bfc52440bdddb940b208301ae94a95777cb72",
            "0x0c0dcf2b13552ec55c97166be347ca2f93b07e2a10164096d353fa280c796821",
            "0x001f126117a949dff900fa5d111a0ce2661bd9d5444577c491a9951cfb58192d",
            "0x138f67fbd9cb91ef5206d48cabb269ac42bd352cf371e43311bccad89acc509e",
            "0x11492ba406435f35623906ff45df11c39efb59fff09f501fb893d717e34f9d61"
          ]
        ],
        [
          [
            "0x2b6fd7bc3a3b595c206c43daac752b765a12255c37ab51ae183933737a8b8099",
            "0x069b1779dec3eaded3f07d0c3e6cecd6cffe78d747faedad9c90665aa2d92cb3",
            "0x1fa4effc83498d19aaa598b7771f88a0554dddda89d32dcf8a6f4cf776d13b99",
            "0x01676f5c07417ab54c37ec8ae1a8314bdeeb09964769881592043dffcb26bf41",
            "0x1f4e7bbc8d42779e58aa07bf54ff324b814fe687b4c8eb81b9b7e74448ee27ff",
            "0x0f6b18c98fc89fbfa99a04c8c96ae5db35c296479f484b680df905d4cbd1dfa9",
            "0x00e6cd10883e1e11c6c191d36329f30eb0045af06c2d86d0c439f5c1f4fef54b",
            "0x0425a9641fb01558bc7170a2ffc24eb6a514198b296a1629cc284d983bca8757",
            "0x00397a7d7434b0aa941348de45aec442cd5cad2c398884950e8233c58dd50335",
            "0x1d66f208fc04411a1385c22e203dc08f0bac2f7cd9dfaccdec20d3b93252ad04",
            "0x0ec1ed3ae3beac4ddd1fdb17b9c7c648e7ec81885a07a5bcbd967e6a3676f356",
            "0x0b3e601e36a5d82e0214362c8419474dc1cc2c0ed8126534d69a3f790b27c603",
            "0x163cb4e3a5ec92e57b25b095a3aaa8cfdc4ce59267718cc6090a07e14af10b0d",
            "0x2dca90f3e5a15b29895f48d7a1290d7a33646b89620dd0a8ccde3aa3a51d41cb",
            "0x2c78ee5ea16d38f0beb9dc0733c4bb1893cb33ff671b737a1122d64f729cff22",
            "0x2af324ec4f9e7786dcf00439c75a294bff753e3292bbf62e66471fa730f19c79"
          ],
          [
            "0x111d04c083f51a6fdf87412a537f6601076d61f435094ea16946efbfa4893e97",
            "0x187aae261ef3ee21b37023518a071675c6d00bde82bd7f5441448abb632a764b",
            "0x0da28ede7f63f75596a2568b2dd7a584576e5b282f284795b1a7aa21663822b1",
            "0x2043bfe52d2964e4a3b2da5e30107716cc764f9b1c8ba463f215ab1f7f03498b",
            "0x27b48a636a39b51a938aea3eb552091559fbfbe71e096d518c40d908dd2570ee",
            "0x17fe75a3d11b4b9d2acf7856d6dea3bbac62ade0c501347b16864f3c73ebb7f9",
            "0x2326c3dca7aab6b1852654fb13fff42a152ca9632124216cc7cc6f6d37522a59",
            "0x080c442909227f4a9da92e33237f9a82cb0c6f7d0c4155bdea5c6517b046eb9e",
            "0x2b1c00ea00893f9f91331bc907397db865c37d3bc6c4b39b81cd931696fd7837",
            "0x092f03c7e98e61c2a85943ffaf9c04dbb0145fc2055e4d5be90bb68b90109746",
            "0x2a0f77bb3624fc4826c9a2a66be4ec75dbc21642a16fcc4182d2d65c0fd8d7ff",
            "0x1083b742d35332a8b79b80e7dc04a72f7e86692e529b6a1ec5687334b607da7c",
            "0x053e95f9455bc6499d447b6cedd0b6aad9cbced97ccf10060f3c9ef51e28e76d",
            "0x05904dae3470d40ce12749b27d646e620e8519e2b17cfa016caeb89d9e34ee6e",
            "0x2e563b9dc5a3d4d5a93f476b466e371019c77fd6eea506126a4f79274f2f6b9b",
            "0x14560083d980d172dd40c9426cff41467acea41d7f48ff11ac5fcc087ba2d5b8"
          ],
          [
            "0x0133c5913f25ff5eaa860d0318f6a4b4349fd22f2d53530e5c785b70988a3a88",
            "0x169538094d4f752529471e3fddc9ef994cfad4f96dcc7d636f0fd509b8eb9c31",
            "0x199835da95f6eb22c591ebe514c7f283f674fcfa1eb787dfee5781a64f082439",
            "0x0dbd8662511dd7000991b39da129f9d03b565a0cd2f218d6eabbb49a25f105e5",
            "0x0dd0c118f15ae07e5db55077dfa46e08109954d99e18d72cd2caf613920e390b",
            "0x07c921bf45e354848a60b0e5f292bb03c2469498b9c1e4d322f4afd1867408c9",
            "0x1f694d1acbaab0ea5bc026a1864d568be555b89c0f49b6134e9b895ae141da86",
            "0x1604de6a2db122bdd5d839540a1005ed402425bac3b85e3a72224d337402bdec",
            "0x25970ce31b7b10cef221267bb1be1656ec29146df06fdb5b4f6fe6607523aa08",
            "0x14956f80a65b01f9ee97e2eb070e9df2711cb8bcb538dd98e532636cc60782e8",
            "0x01d799ae83ef6552f30edc47b9e82adc0503dc4b74da40ba0bbd2cc9eb1b0a53",
            "0x12417c001be86197013b2b4871c4e9b0dceb83991919a9cafacfe54666f590af",
            "0x2171fd11f94485466a819e24d0acef08b0c87d78b46d93bb9462b443fa40cdc5",
            "0x22e9bf2aa02fe65e3cc74fb3d83d4e3351869bd30528c378958af462efd645ff",
            "0x072ea2f5cdc8a3789fbcea414a91e7b27bbfb3151df510d080ff4ef7cc73f0d9",
            "0x260f751c7823abae61b8f3748c84791c0bd84acf7eb6854870250178e9a52cf5"
          ],
          [
            "0x08875f47d6f518c8c2df51a786bf2207aade284067228f440e7d0307520a56cf",
            "0x0a68830f19c0a729b2f89be27373d397ae1157bf507e7799d4220166ea0982d7",
            "0x2af560600b3e25abcc7f78a4d6e2cd3fd99bcba075ab82b55e9841bef7b9210d",
            "0x11b33a9f1818ed7f581cac020051de26fe28dc0bd8cb1a4457d5a8447bdbd6fc",
            "0x045c617f604c1ac9fb8d76e8d380322e5a3b69fa7b7c2ae2c8ec5966d6a4c788",
            "0x0e6197fe502328d0ef7f9b930355312b347204b877e7f85d9b569dc34f064c1a",
            "0x0cdfe099e7a154278dfb6c0388b9daa1e8ff323a20be6a6aa7a8438333f879cb",
            "0x15ded859d501c2733feaddde22ff36fa8ae85803aec7a204f42b1f6553bcc655",
            "0x2d4026bfa7b37a19a300abaf2e1d5c32dbcd42240ed860f681f61dd6d6214cef",
            "0x0bccb669cb016d498464944f7192ecff6716e6cb5f895d2715bcbbb65b1288c0",
            "0x05de1099c65f08a990ac0f1f45ec2fb872c771e10275dccfa4fce1146639d0d5",
            "0x2c465d9b5eb852d79338b427b3184d941f34046172a82cce44e2b8e5c4379478",
            "0x23918075c8fa0929befc2b171f99ebe9ddd6683594ef9a83f84d4acfd9592d59",
            "0x15d7fba62bac57be5d97452a3c06d9fa757f144df166479ee7306967480a287d",
            "0x02b6f16f812ba903901355955cc4ddb99f24f1c6e26430947e51811a68311bbf",
            "0x0f6673b7fb4be8cdea74aaa7802c9c73ff0d53a98e94a2bc60685d890a24fdeb"
          ],
          [
            "0x0ba9f44a107a81cb23fba66f2bc34152728f5f5ca68406649a7efe47c9473f21",
            "0x018ae39086eebb98d1fc5f05fa0f87ddcb149b0afe38d1bbb85a65697895e63f",
            "0x101544d131454f20b549b24a65ec84f1b3221fd9b43461ddc6d156833b34c52a",
            "0x026f2f58d63ca6ef59bb95206ce3ed3124885ec21762bbb1db1d6a7771ec6650",
            "0x25b974fc5129d82ae4c6246e35f802e03440ead09995865313c8ca91c820c2d1",
            "0x2d409bf78bd6f6a4eca7397d065023f0bb6732207925d3ce4beef9f621da2ba2",
            "0x17f732cc1354b1fb476e70568d2dcb0b6683d30b02415dfd385504736aa86de6",
            "0x040db0defe6ba4797b74a43125cf34d86a2b33e7a22e2710b0fb7a5568893aac",
            "0x29e89034942414a1ff6833d6e22742d4106e0f5f37d1f2ab80e5444e5a52c9c7",
            "0x121d2ba5bd8f232ecf44aacf1044cd6ab6f93f1e537d7d1541754fd49f51b225",
            "0x0f0913eb4ee7d3c02d8ce73d1cec2b6cbb176a92129b34a294adf066243ff6bd",
            "0x0a0fe66c0d4de00cc7761008732a0097fb14d6465f9d1df835e0423fb207d979",
            "0x0898ed1ec1a43687ff6aba32de5f819434528a0752b3928331899b0646b2f061",
            "0x11e0b2343ef371d2d6d22805974f2539b6e510d761e0da170d0da90095a13262",
            "0x1d59d5c10b0c9dd347899377da35b7e677c7d39ef1b49166b974a7f2bc99c946",
            "0x1a15b7e2de27125f2e6a74f4ec7cd2455f1bbfaeb1155f1af819bdb5fe54241d"
          ],
          [
            "0x0542832ab23b6c7a4b547a1066037152a2442e998c5381ba97698413153ba6f1",
            "0x04c5ebc771344cc0612765710bfcb1c2e6097abc3d346f049495f7d7b7f06cb1",
            "0x1a51740cda5e45ea4d4bd7bf5ce5466a66a11afb5bc93cf10d5309e07d410e4e",
            "0x2eb6ed568377b696ad3cb237064ec68e390c24886e1f122d21d7cf3290dc6d08",
            "0x181589b140c9109e492fc3ec7d8ca8e3c25a7ce58df06f13ef43561d58c5926e",
            "0x205a6d5aab2d224b668c70fcb41582ee9ebe1ff099292b4bc50af8b292c0ea42",
            "0x28239a882dc7b2f3ff7b9aa8de9e3d81af736d4ee6ed991d5c6b4fa540148f43",
            "0x1ab15f2fde6f535e77e615c8c2602193d45860cc015849df578f9fef9a5bb283",
            "0x032b6266f24017fde1b281d0fe206dff30b539d5c5ba13b5312e488d8d6f194b",
            "0x04e358f259a33244f4058a056110a26816bbec3c76ab6a5f7be93c9e0c92f3eb",
            "0x25a9ac2d1ef84abd98927b52c24f38796ea60e63858ec5b50196d7e169c93b84",
            "0x2f521f24bc02286ae2bf8484fbbc39843886755f52bfec7d3dd5df78d340721d",
            "0x1dc3f7a659530a13accad181b6e265474108d8b1469266552dfbc38cb679d06d",
            "0x2ba39845393fcc776fd383e535d567621c7f64005a83a6f7f48222bc902092a8",
            "0x04730fe04e0108c9a5145a5c48e60c5457e4708522157bfe0f82af5c664d6ea2",
            "0x075a09e41e74de8a2ac7fef27591e76a77c851e1a51185f31e99b5e08f01cc74"
          ],
          [
            "0x0ba1f764367360952942ccb6edf051c8f937906a816641e0d1e9e2ed26906fa8",
            "0x29faa7dadc8b7e9588d4a601e77bd80aadf272a1bfec3c443ca3ccac81d9e1e1",
            "0x1324558b8a5d4ba61b17790128be9f2440c0085dd5d6065b88f0a3b2537bdadd",
            "0x18faaf1c91e002f7dbbd12f408bd5c5b92f38e02ce3635824821e0347faf53ec",
            "0x0ee1288b29855e2e38dd26292b39e260529841344538d6499996a32e7cc523f3",
            "0x2380ab051d0ac580a7d116f4a9337eb31090a4c7ecbd4e638e7717b7a52bf106",
            "0x158926b9e94b10fcb321b293bb8a8647627a5bd31315808d397c1c94f650f2cd",
            "0x264fadcc791aa18e76751a895242c30cdbbd1197a90a456dc278e10bf0bff5e5",
            "0x2ea014b61ed575392239bd9411c0a6c4202b7334cf2e0dd8c3040528e4a3dfda",
            "0x2da2603a26d4fdec35318204ba5060663e15a0b1e4d9395258d5e6eecaea8fb1",
            "0x20a0e3f4e1249c4c6af100dfdf63f8bdc69ec7885bcd0d2c2e98d98f9bb9d104",
            "0x02f1d3eed36018f9679711e030bdbae51224b5efb8b1eb1cdca8ab886212f0fb",
            "0x0e388bb105242406e372080e997a31392cf4ffbd9c694163fc366eae770e435d",
            "0x25143649c13e08d4b00bf34d2aa1a8e450f89788e27766896217047155c5bf1e",
            "0x12ec24239ba1b0fc9f952550a223a52d209d8d22b8b21ac24881a2719276be0e",
            "0x079c04944d50b4777dd0bebe953600645ceca9d65fba020f97365146bef9c6ce"
          ],
          [
            "0x2e0611fa4ca3985d7bfaf512f21a4081141f4ed0dc4b022834d3cb6cfd8b7ffc",
            "0x2acf3493012bbd818724e7ceda2431e97c8933bfaeb5d7463b512e6e8e8f7fcc",
            "0x13473024ba419fc2a7743e7df8fc8375aab150d3753a54250a808d66f2d06b91",
            "0x29437af1b14f637a1f0e39955f2604bf20439fcb2a090e346aa65a9ebe69788e",
            "0x206e4d445315b764280cc643b9479f49946ea86d7304b6a2c692ac34d7c98d34",
            "0x1382c3c24bf2489fe9efd80a163e650111f5d9885e58a9ed729dca1f9a74e59f",
            "0x17cd11864fd2c73d0867d37264b4ca14df935a82f2a6f432c4998135fa5f4aa0",
            "0x2de279fcf77a270823a91a6cd1aafb58e9e3ab32fdff0b3b05c98d554db6fad3",
            "0x12ced5254e260a9db7abe0cbea26396680f6e57dc07732a755d409ef751200b9",
            "0x0ef5f9ee6ba1ae1d1264cf1a36e0fe4b8043ab0bddf9b9c3200fb687a8ea5c83",
            "0x06b7e18d01b47ff8e4ef08078e8128a06693be657489492ac4195a854722bdfd",
            "0x23aa7ccc3751b740eec9f35a29986bc958a4dbc7c4b12eab2be8376706deb20e",
            "0x2273c370eb5810c03903605d7cc94d5a92af6aaaa7b844f35189e77406a7e86b",
            "0x2a7310e75fafe902e20287a91abe388aae8420b1ea4660dd7c159c26b9632cd1",
            "0x20098399725ee15d93ffd3e481e4a7b95c8c5083f9d69bff1714eea7c7d82d49",
            "0x02ca2bac7c1aa0c64e684123f0ffe22173923052b6a01f3c29be80137fd8972c"
          ],
          [
            "0x0e6f23c0ef6f159dec68341a87830fb864b6c08cb954a14a2500876697897fb7",
            "0x23b34612e7d052f6b312ca0e0cf70034ad232d9bf63c88821085383b6f6ec4a3",
            "0x13f15bc6453df6f9383446550534dc57aedb10139e3053e83bafdd99356175f0",
            "0x0edf86bf1b1599fe27c66f3494862d75df7764070a8263cf88778f7287938d8e",
            "0x1641648c26b5a2dc297daaa6d4ddb6a2f258ba738f9094e7c5cda6efa8c993b1",
            "0x280c4522ad0ffd92c391e94c70f87120b8341890c3329af050625f2be52f3a41",
            "0x1d772098b6154921db8e7506e6f0372ca44f20af3386e13bcf71ff5dc0d61b1b",
            "0x053ed8ad550d8992f4b9814920183dd839bf355eaca8cc7b07020a22614a808a",
            "0x1d4f9ba4fd8ce4ef193b9f870f44956079538d63bce344f9016ac5ed63a99a5e",
            "0x0d53d61c8a5214e0c4715274ad67a5d6a2cfb9fc3c1e791d41de22c8ba8468a4",
            "0x12cf87253913d45d287e975f2b4f5b909d16a87d89c889057f666f6ba61389b0",
            "0x2b088cd30a10899babc325bba32aa343d329f9a8782469c4d25f0f237ff607fd",
            "0x19972ffdde7898ec8be4fb28e4b19efaa43c7ee20c88e29096ebe872e1c19475",
            "0x1fa6944703fe0012a16ee6042529ff02bc804313ef8c6d8b0f910a75e6f47739",
            "0x18237af733bc44418ac84e623f483a6be28b8f21d033fbf099d645ba20f1fc26",
            "0x13d9035a0dc798b04dcef0f08edd241524fdca0e95ba9cac05d207bd317e19cf"
          ],
          [
            "0x01a7a2a4a08d87e75f720302bead7ca21c8f7c2ed2debaced9b8b1b2da461cbc",
            "0x11680cc6e80b0e430a4cd3607017fa8331d86c4d03a96dfc18767c97cbe0a197",
            "0x1314b54f8786096244532c9f054b379636e2b58bfdceb3d48dfb2210b529b4e5",
            "0x1336b208e00d8ebac83246a96ebdde351063fa3f635887e753a0ce3e29c7eedd",
            "0x1887be87f7a352410482ef3bdcf7ef17976e087eb8990c76d7e971c44c048239",
            "0x1f405a9483311e1497568f1bdcd6d58cd6bc813982a0e71561b620003b888204",
            "0x209576be72db7b0c9fe2b8329125e7dff0489a8e900a5f14c1e6e48604134264",
            "0x00279702b135d144ede943195269c00bf620f058bf0186ce9fff3cb38b22245a",
            "0x02c9c3135cf64b89eb5b714d7b2ebcd81fc7edae637cc6116591df208b6b2583",
            "0x252e78b4838ad5007f518bb9c6a4ce501871f71128eee3f0c9784cd64b183fbf",
            "0x29a7d554e9ffbee639867842fd0e7d41ea9b1bc9621b654fcb398f71c95b668e",
            "0x305a0c2c2c4d35998e9913829f5602504363f21bd720347350b604193e79bc3f",
            "0x061d78e1953d1943e2d968335b73e15fecef89075e96c943d39702b214ddc5fa",
            "0x261f975babd7692822473b8e39f948b9cf98730a9785de393179d4bb99dacdc8",
            "0x1e3d6cef37f9bdac23d1b381a6c58d0ecf06a6ebf58dfa7a995a443ed7df68e9",
            "0x1d6657d791831169c56b6e9a201f8b7b240246a2d0f854430489b983454032d4"
          ],
          [
            "0x1d8005df48c8565987dbb442b482cae5bfc10ee486ecc5b670ce861345979d1d",
            "0x1fa772ebde6f3732444623d67fe991116298f8f30a2d1010c8ae6132a3d6907f",
            "0x056a8ecd232a674c63d7b603ef8cd06321c560df2fd3f6c2649af576467fd798",
            "0x2646341eb44b4800d56084cb48500fac48fc533891f557e96784cc6004d8928b",
            "0x231f2c98bda8d48bb4a6d9c98bbbc16027235a22a1ed4f88bc8d3a6e582209f2",
            "0x1cafcfb62926fbc04857b0bd7d7392b8d8add16b5cbefb54b4d5312826e89942",
            "0x0b7ab1ef17ff6235f7737f044161902f03d594cf4a0cc67b4ffb4711ade1eb0f",
            "0x179a82b77f2ccb94b38eb582ac4abbb16df429ecc22471be73cc7766f96d9948",
            "0x18b63685f6fed2aa1904856378442151dd1fa01c7ce6121d23e1e9ee20b42558",
            "0x0a27a8d1af6a0460ae1724f32f21a06b036668d0a863be50fcc47fec5763ce93",
            "0x186756775058d09c639cdabbacd01bf3c2744152156fbf7e8f3e999fb610ed38",
            "0x08bd9ddd192d797a19dd1da049beb39fa6596598a27031ea1c2b28966d96180c",
            "0x194184a825de9e9b63ed7a7bd071253ef5903e1e75a50536db93c26311a72017",
            "0x2e08b28bdcc417d9643b3008085a27f4a9876792d3915c8b9da3567a6dd6ce82",
            "0x28e55b0bed59191216d5dbe1dd05b22c009b079de877fd54aaf5401d2c867e02",
            "0x1c89d8f975f0304282ad8f7bd41c12c3b18ac6b80e4065fccda423bbb3ffa786"
          ],
          [
            "0x28122254823f8926acb7e98f557e796282e5e1271618858e76d49d0886da16f3",
            "0x2e63f1740332f57e8317f2592ebd8db0812714d6604132d525e33e19b3c98494",
            "0x0098b740976c2a1031e75132e050bf3838b739d061582543c1c7f95c152ee262",
            "0x06f53c79fed9e09848e112a0742d8ae84a04bd9ba5aa2765b1e5edfb1602140f",
            "0x1fcea89286dc1db61fe1111606af396e98cb53dab5199750aa5e5d11561fb145",
            "0x0a12e162620e71beeb203be56594416b083e7e94eec23e0f44a5ffe9e159508b",
            "0x1b1bbf4e9f706051716a0e28990caf17573086a5d818c038836696808b12d8e5",
            "0x089efed00e9d993f5fc1d5af2f2b5d47a9b70e6d5a603fbaaa8f65102123efd7",
            "0x2b202e1d2626c6793d68aacf9c3a8fffb27cdf5a0b83ff8f3504f9ab26a43d15",
            "0x03048a265d0eeb40e5a531633ac22bb825f75cee9036e66a061be3d4d248c862",
            "0x2532dd7487fcae0dc3a7ac50b80ec330c6fb6d4cf885f1135988bf6dfc010a6f",
            "0x12cee8e3d1cac1ca84517ab3def487c460aec058348ff220c801b78979af9e61",
            "0x21c0d1874decaf90613183ea827b91c1b2951839f71f329cb9c9b0753ffaefee",
            "0x017e9ed191c5641d768b0e55ec0d4a85f6e5419d32f5668d397d5b6cb805387f",
            "0x0c6c9ec31c9e3be0744919fc555c77c0c125927bd16de2807712b35ca26dd045",
            "0x20829ef3df9c183f8965e49c8f315c2995a6446a76053543eb750145f1a77400"
          ],
          [
            "0x2414d4aefc7b4857df681328e68a582d23b2dcffd579a8e6aeed6c61050e05cd",
            "0x1202e349d1d7b805846e90834efc911eb6b10c2a09eaeaa29ed288bd779b14f1",
            "0x024b96dbebfab6d23fa32c2c8e7758cb240bacd8143323c53cdb48dc8b65f8e4",
            "0x2a3c9f55afacee735a1b515526426384ad044291f7691974d9c05c634b43947e",
            "0x0f7bfcfab17db34c144cee44636bdeadfab44a6bf4fc8ef384ec89a4ae9ed209",
            "0x17203c4d2e1a428a17be2c27d1c4c5960dfc6aa36f22bdde8be56a0cd44e71ab",
            "0x22a8ee74367413eccf7aa03fdd420c6bb6255a6dd82081d6b14eda9a9752329b",
            "0x21e25f0a7f8edc38de25ba605a86cc08e08ccb03e77c5e0b9edabe74768b60c0",
            "0x06a78dfde1458ee341a089c15f953a2193527dffb43f552cdad595da7c6fecc6",
            "0x03fd94e51bbda6843d31a282530d54240aa496165d644d5d7737b1e5a7d60d52",
            "0x02efe529db1de3c01d6fe7fb8a71f1eaab6af1641fb1f7aad4f2b88cd13c9fe5",
            "0x0cab504b22a3573d09509f85d3fbd94e94417acb25392342bacd684006c37185",
            "0x1cb33ad2ba7dd0c2063443432a847bccce775a8daf868e0c474905a4fa36d70e",
            "0x0aaf37d1f53dd0556e347ec705962379077cd543198e1c27593f4454521261f7",
            "0x2a607facd3936fdd0e84e9bc3e4b4bac86e8102c2b5ad15cae550d28b3654e73",
            "0x14a2bd5a56f87009db981546533202f3af812d2ef4d6b037f2830853b9f9039c"
          ],
          [
            "0x2f710c72d6da19c7d87cbffd55665b472b0265d13e2326a9a33b96e95d3746b6",
            "0x168fdc32d4aa8dc9034ad4a4fafee89f0ed5c980d3db424d38f8ce5cd04c237c",
            "0x15bbd5619f0d59790804f2b9b37e069fc909a2796d1f77d0c62609deda2d0278",
            "0x1e16e9ca2502d696023bce3427244ad6553ce86bbc4c349a34ba61067c6b6d6a",
            "0x01dd0a5502743aaa9f583bd0ad35de13ad8d5fc98f1961f2612ad4c28fd9f9fa",
            "0x0ed2cfae7b36f470a7d1f6940f914e8ecd322bfd6b50f9ad9f6a2226e7a95db4",
            "0x2c785f9d8834f5cf5d08f106d5f9918340fd414abe24f0a9ff2b8e0492b44d83",
            "0x0d8dbc3fc854c0665c30c48846d7bb0eb18d3d78a4f70fef07f242e45b865eaa",
            "0x22f62e45e50084696ac2512a25db9925244cf0214b6b543d3a9f83b8e8e58ffa",
            "0x2f26bc13ae48520a439c9f546abb35a1222a307e38fafc3e7ffc843f6c77d7ad",
            "0x0af825f7ca24b4a285f544762d9defdc99f2b85c1b89fc5ff2079d3d50e6d4ea",
            "0x160590968429f480f55611c6448912fdf423d37bf483c36acccc1ac9a29d2a53",
            "0x2bb32cf60f8d469edb1b6c56493d4c9338b4051ae2514d4b6082ef18b1d5228a",
            "0x2a4a72e9dfe5bf25f6fde750a1847e5b44298ba58fb504be57a595e7fccdc404",
            "0x0c509a4bf48ad76e90410bea34a8919741608bbbb6b5503c93e732036f079d12",
            "0x199733da4aeed8d6cd148461617e8e46de22d3720431fc1605619b12a7fd4e2a"
          ],
          [
            "0x2e285441d0bed90bb41d6480836850e4d76da8211b04a236dbc7c3c30320c00e",
            "0x0b9ae9f5ee6ad70a651b4b66e34f521b130d18c49464d86fe5d4b1820489028f",
            "0x04760054bd5d07132548bed7657f17c61c038ebcdfdd4025c7b802e08948e108",
            "0x02a4c6d3259779c396ef8173ae5fe87bd611dbe25d1c048ada96306db1e3a40d",
            "0x1959db01f5c8bb0cf483490373e75b0451b87b43e59181be0b6016674f3f5efb",
            "0x1849cd0910d72eacc32d891b71faf500bcb93e1cef2504af443b94f8b1ce7212",
            "0x04b5dc2057b88170a718a102e0ca9177afc757ee26773a0290c6bab159ca4fb9",
            "0x17bdf338072884b522ce3c50ef4711091b9daf48a43374bdc0a830c37e5dcdc8",
            "0x2d9379e69b178208b8496b8a0a0a90d578b21f090c53042be4767e3c10d3b40e",
            "0x014057d02e5ebcf33c166e18fe904defa9e342a19e88d42336377f1c5e67ec30",
            "0x17818dd0254b291d0d8f4f1a458c6a21d8841153661812bbe986b1403cf270df",
            "0x1c95c2917353c53b4cdb7f750a0fe86ce10f8d5bdb018032d3f793797d7c0a35",
            "0x02495b3c1bfec60741808149333fc43f04d79dec56582c292829ffdfb3c1a3c4",
            "0x2adec8549dffde7238b2bda6e7732990a911700c8d35288baa39e67015953231",
            "0x178074303b90d8985e376584b8b8dfb7f952f8f4cf84d815f90baaa3b644c4c6",
            "0x1f5fc060028ba07d11fc9477f4faffe79a81040ea9a04c568267644895e6737f"
          ],
          [
            "0x2964901a2b42e9aea1a6593662aeb9e12077a287434bda4ec2012e36a19dc95c",
            "0x06c2194af72fac58ca13a2a5e3223104ef49a540fd2eaea0d67a920d8567040a",
            "0x0a5494c9bcfa06aa72c36fd22d98fe72dc14dc0e4e74e03d1755f38ac34050ad",
            "0x265ca211180b012c378e0198f0b5f7758c155e3675fadf92ca79156bd56fe339",
            "0x21f659fedaf6c2617f17d637cd6f54a27782f4e8431f87af5c8591932ce7dab7",
            "0x1e463ae3f4c3bd047aa1049f4f091a2f1d5d3550e3d5801fcff68f9a5e6828f4",
            "0x27412191fa2b2e5327a11d290e4b439a4124f48145c61ff4ece8448a4373eadf",
            "0x0b3a769c8b371562260395ee4f348f88bb056a2f0ec0f98e4e633bf7d943615f",
            "0x1adb4c87433d866e8fe5ae26d01477e3962879c20c8c3a170c0727167c06d0b8",
            "0x1fc26ed027db7b9e7241c2c760176662f634ba05a9ca7a850e184ae588cbe215",
            "0x10175fb6f81b16436af30682f36fbab396eddb7829a50e946c75f27e260987c7",
            "0x23d300373bb8ebf7dbcf314a3c0b1fdecd5cae23f7e7bb915bcdb6a6782b57fb",
            "0x0f0417fa6237167e741525261306c17664dc3efa9247aa0d4bcfff38e89dedee",
            "0x1e8fd20a8030fdd94e2c4353d8f82b4b212bf887bc59615814890b0f92a47d90",
            "0x18572826385dfc6eeca4d3c71d110b04abae013c5450d9e4947a3d019bb41b6f",
            "0x208b7c8c1ff8422d4a1bd13a02a94681ce217d925f40d2875f73def14de7a220"
          ]
        ],
        [
          [
            "0x196b76cefdcc7f6a54c71d40114a0bb82694c936f1573ac7ac1ea3fcce1fe938",
            "0x1440dc2578f44694d18c25f892d98c23cfdb87a772200020e897823d4bc84d3b",
            "0x23aeeb0c6499b84bfc32ae3c42df9728798fd2ef774f1518b870bc57d1385900",
            "0x1ed9d3e9276acb7b4dae53eba148806fd9bb07b2dd06187212fab7dcbe63d72c",
            "0x2ff57f3f7e95b03411db790a86647467581197124d217520ef2e6332a5b35185",
            "0x15faefbf8584a38969b4a719ffe5f02c2191a8cceda0b775162203d30b80208b",
            "0x1e6eaab1191593de0d89cbb2399ab8aa955d829ad959428cd539be30b72fde9c",
            "0x2a3bb020c8a50d310ef5b5c77cc408b077fe2481454754c4568ff668fe5f0974",
            "0x051f815c454b6015c7ebf90c297b90e9604cd36acc6af07f99b5e51fdeb32234",
            "0x28b75c2ac167fdf184725317c7bbb8083e5ac5bba937bcfa6cefcb69e4048bf0",
            "0x023af324599683d9b71b61d093d63dcbbd97e44957333d2697fdd060c1e4b585",
            "0x05a07868a7c95f50a015879fe7cdf1eb6c317e4d489d4515208ddf40a32329ea",
            "0x2c5b4a65bc55ac5fbeebde53ce5fa68882faed2a92a7b3f5732832c72f7f2c30",
            "0x173f895e472c4eb16a2aff3b8e0417fb32b83eb1e3233471c76a0550505d0607",
            "0x206cb038cc328526d0c3dc5af19437d83219751c5ee8f61b0e9e2f5881366be3",
            "0x0240c57897161666f28d000b88d3353921d967420f401ce86bbee42be287a4f8",
            "0x1aaefc2e9925fcd453996fda804063fdab276b37c5f51dfdfef9255b4ec10cc0"
          ],
          [
            "0x130fc54477fd953377fc23abbd7a41be6764892a8787c759c1440fe0133c852d",
            "0x065e134cb8d84447d6ea1e17932bd4a341ebef2568313c24594faf9d7eca2110",
            "0x0e76c40392bd5f458bc187be54099312a0fefff44b441637020eb92670a6fcf3",
            "0x0b981765ecae69dd7af3b10ffa424b8aeb206cc4f49257265c6753b1cc54ebcf",
            "0x0e4fb044a9fcb4087e351341f25d98b1399b576e2d6654534f348219a0acdf86",
            "0x303e39ca88e8da6e5c963564712df8a7f8501a7af4a990e4ccec19e5f8fc805d",
            "0x01b77995dbf30cc55f9d4cd4849ced949349da81239a015440fdb38b876abee5",
            "0x23643add30be204734d029cf034c958144551060c1901c420a28c9688ec36a80",
            "0x1946a26ab8953f9be558105fa5179f175e76a24429dad5d532c2ceb3cfea05c9",
            "0x248b533f875e5ee8e751cefa4b1d0732fcd30151c3a5cc4abbbb1e93b4655d45",
            "0x2e7a1c51da61dd214a1789d6f1ee2957f69d21b1f16d1f9458eb25a406500bd3",
            "0x2065e374edb1f3cbbd2919dc04d14adb07062dd01ec1501b85522e7e0faf925e",
            "0x2f36535a83a09cf09fc38a20a725477aec56668f034a364a9f4a5605fffd33cc",
            "0x1123d3c97ff8e6b589d118bc40ca0b9ac12ae909558f2582551f7a42345b4621",
            "0x160b30c874d9c06704c92c266c7a5b7fd966a62a5db008f1bffdf443b1099a82",
            "0x1361d27c42a7b4bd6eaeb98a339592616c0d4d8fceadfdb16468162bdfa88d46",
            "0x00f1e8f86860c3b5c78bc14dfb67d22c6beb8992123658842f23f75ae3a92e99"
          ],
          [
            "0x2c9c91f48661771baeef6774578a78f69c355c8e907156fdf26db39d2446413f",
            "0x2c6b133e80abef84904fa4a75f968fbaabef890286d5fd11b87a1e52b7eb6d0d",
            "0x2ce8546cb59f420ede61692e764e0e9f6715b16a2c8047cd8131c97646f50d24",
            "0x0adaeaf28776b813d518f645c793e57bf16067fd80eb921dd5a67e895646c9c4",
            "0x2086a01b816438a2a41c59e43d73fa9aacf0c24e4f6bac229d65fba59922554a",
            "0x2348580de49aac01ce8fcb5aa2b467f6787dd8a96ccecd6fb47df7d5a4307398",
            "0x1fb6bd6df650d27e8cac05ac0b45eef0700e308b29b4bd41eecff58027edc45c",
            "0x03e9718237c1700d7dd213e026f307e8000b3851467fed9e6f51fa5020c2369c",
            "0x00925af35a3366801ac80a31d63f745fa807bda10560345ad572bef4cf2ce0d6",
            "0x0f8692d64a5b69a956c4e2006bfec344477fdf5f0c9aab866609842b9d75269d",
            "0x2bdfe7eb4fa803bc1dc0052a46d850ee3e091eba8a7f12579682f6f6fd5044d4",
            "0x13bdacc137bbcf51d8bc9d281931d6e71122dc6e93e7ffe8b835e3393775c3d4",
            "0x07d78ce0c1c87391a06a06c83d300d52524b29f183884e300e0eaddacd05f068",
            "0x0984c132b29a05f2b506ca07c06fe9a6584f36bb87506d2d316a4f353cac5f1f",
            "0x1b00faa85136b1bfc496e0ea9a6284cae525aa96612ffeeb514808955693879e",
            "0x19e1e46536704ceceac3eab991bd806e347be40a0b7956dcd7037352fdbc4347",
            "0x19c2540bbb1cd4e08f105437063c945cfef28ae9dd50b97e0b795f8dc5ae34e2"
          ],
          [
            "0x1dec0bafa3e8190621e5e095ef751ea03c836dbb8045b2a73f8d397cfb815192",
            "0x27c72332f59a00135baa94bde294911d135d1d95f53c52eb8b3b95594374906d",
            "0x16e64661144d816885b32f3f7809703477788268d57c14b1d939a26b29cb7ef3",
            "0x2018db386a3e4e57eada8d91408b155061df050140fb22f9a4f34fb4e2d02428",
            "0x12263b7e3f3de60899a2c22fee919972cd79dc289a87f31f1b44baf2439dc87c",
            "0x10e420edcb6da76170b24d777ce9d31612edb1593ea6d30e8cfdacfb6974f991",
            "0x0ebcb358f95f84b719c631d4045cef03ac6fc238f6834522cebd02e47411bb6f",
            "0x0c48e2f304f730d48e83dae5c78a46188500bc8040a49542eea5ef1a21b9d222",
            "0x00e766f03afbb7af630eaa8aff4fe60f3810f30f3f4438498efe0186333dadc0",
            "0x1b8a7909d7e7bd4f0bcc8003968e384ac2e8b405ad05cf610364d3ecb982db7e",
            "0x1d92e4213d840a330ecbdb08693dbf9a971bbd6229047eb88a03f334cadef227",
            "0x0d3b3fb86a44b7422429a249884c85644af1975641206e610070c02ef5a9f4cd",
            "0x25c7e8faf6c48a156cb91d81a997c6673d32694a3fdd64f5e9594e9f504bad83",
            "0x2d7af834c9cdf1b38c8cfed218f1ef0ce0b9908de9e7aa7a5510c4fb917a0281",
            "0x175af5e50e5685ec2dbb1cf7a2cd25d45680f6cddf68d7c0795dec98b87f6a71",
            "0x121f4a18d7b7d9650aab625ebe8695a8079439f2ab00c090279de74726234e6e",
            "0x21f08f9b3c23f3a02518114a96929b6d1056eb4d1db147ce0c8882e1b0f7bd1b"
          ],
          [
            "0x0a5f52ad6ec4a8aa377d8dd2ae3aaf6eea0c68c63a1d034fbda67133ca0b85cb",
            "0x087488f735b1fe2fa3c6c7148c4968e7f3479b1418a1a566743c1ca215dcfcfc",
            "0x06cf0db92f86b2732ee5fb881ef0176012dc4adfd849b9be4de17846a6ce5d99",
            "0x067c4411745db6c6aa659ec737a586a8f4a1cde0352e30aa0063794865fc1c04",
            "0x19909241cac50288c0d12343e0c12cf9b9790b405ef0a9001aa6be0289063aa9",
            "0x01d25b94bb7c49c0170ee1fb2a5824b70e4554bcc54b6c8f8cc0cc9d74f19a5e",
            "0x03274e735db2faf186787528254272ee01967e6ae9d825141378b8354d843965",
            "0x0cac320362e235b458d6d364cd0fff914f3c056adbb038dc2a861a49f7f70e24",
            "0x1111ed7a66ba2ccd4bea0d43eec86ea35ab40253a1209e3637f103dcb84fc429",
            "0x13e736cc70b7c828a38dd6394ece76b9ccdae2ca4f43963432502fe8c2ad19ff",
            "0x1f2805084976b142f7c74a416ff439ff1bcd8b8e7b0570130040754a61b71912",
            "0x27aa50a0e5d5588c1486e8e7fc8dda65489fffb866756c218f87e7280cddfa64",
            "0x1f3cc6f65d9d34370825a38fd1f48f509f7c56171b9e7a624d9b0ecdf6ac4eab",
            "0x1b11713791ea4cb2e17c8c5867502043d0a8cf955384c1c793c506b75fc0db29",
            "0x104560e95c49febb7a030862edb3a33c2b2a3d414b0536b2e54e25ab36e8f281",
            "0x08c45f3c4c486f6b5378c779c607b517200bb70b5533bdacef18519f625b925b",
            "0x2d2193c677bbcd56a74fc2ae50ab4f2cc69aa77ccfc33c7707452d5adac77edb"
          ],
          [
            "0x20ab7394bfdab344cbb6f2123800a0e23508e2125bfe795ab4a767cecb4d9306",
            "0x19f0e2e141896eae6d56d182b687b8a6c64cbb59e031b749f35822fc7ee353fe",
            "0x18f754a95b0af0e4706ff9024bb135164abd6fc16ee40cc2d6852d88a2ffc9f7",
            "0x193fe0e9b48010fa319c33b86b6b18f428f323fa237ca918a38faaa91ba49567",
            "0x011ff091dd551b6d586203ee0cafae2f7652e923aba82574a53b632a066f4884",
            "0x1da3e00601ca3fc0d90b197bd2a474b46efe3aff3b2cfaf1ebe15fa1afadf2db",
            "0x004ef41945559c1fb0b2116cb2be1f043bfce8dbc96feecccda47cbf68be59b5",
            "0x2f053fdf1a72d6ad8c9df97a04d637916f25e3425b6dc33e99ca7cac5cc7e4c7",
            "0x1daf74842c7e79104349ad399592c5c4cce16f79e1a86f50d941598772cca953",
            "0x2ae8da8d0b129a22f834d0d234c8917c2f877ff00dc16215498d4b748fb40df1",
            "0x099b0a6330926a4a1564dfe94f9a1104bb8374bb518a89de08c591c17dfaa059",
            "0x0b9aebf041146c119199757ea8ceee5abcea9ec42cdb28b921caf21e84847851",
            "0x055ef271e388278b1aca34d3cb00116bd6f7cb584b3c69f0de2a7afc8d98deb8",
            "0x26fbf1a351963fbbdab590dbd760ce6284273525a1b46c41f29226c65339f4b3",
            "0x12fd67863b2e03b6fb45224fb041ff280e936742b54c8e54d3823e090e144169",
            "0x00600cf26635b2d546431507589739010d1b757ceaae617bf95b8e1efa98643d",
            "0x0f528f5912be49455d4323b259e30ce2984d8170601eeb4bd7096b47353ab7fc"
          ],
          [
            "0x110ea322b0c26476c67bfa2c1b9d1713f93b3b9cf8320ce0dcd4b64288bda07a",
            "0x299c47f1e3ecc557ab1c9abe36f0d2ba0ece01051e07f0858e97a9ce16f5664e",
            "0x1cc053a6a4d6f96da77e5e73adb9d49bc4d0ef2cc2f69fade48040b7f8d71386",
            "0x09558ecc58bee4f3c578f62489dd900840a9889096c0a62114aa2db045a1d033",
            "0x093d7d5563e3ccd0b5f15a9b093fe6b863aacccf9af11ffea9b295b7dd42b1f6",
            "0x045dc0579ca66e7e096d4dd86b882e68af2d35d70cf5e3b1783caaa0ec424253",
            "0x0da02f6410e24058a1e90412cd5302c57197f7b1af2a99496f9cff3ffd58808f",
            "0x2dfb6dd598ada57ea71a8d68e6924608f0ec7838808688ee4b3fcd521f7be6d2",
            "0x1057062b40bdcf1fe2aaef45898c871146799a92c87d0fce64302d6bc83172df",
            "0x26e6d18aea75a94861a02333b5364ceceaa78adfbb742817218ca3af607b910e",
            "0x0565b96659025935d9c025c7ab20b1611db00b67ecc51426b342f8c7a17fed83",
            "0x2776bde52a1259472c1cc020e719f82191dec3ab7699b7d0fd769dd3fe392997",
            "0x0c1a324c49d15f87931821989b8c8437ea9eb46ed3aacf8895fd1cc311053e60",
            "0x27e68568e9cffd07f9253ef9dbc356251dc6b2d6a903d6c7046b5e90e1bcdc9a",
            "0x1db0e7e01722aad210e5296c36e9103e82d15765c318134d177146a1d9fd5358",
            "0x0aef8a4e47d5ec760e0565ae7acdabe7e8e98972de86dd2f447aaf216ab4cc17",
            "0x08c00c4e5b3467f01901f64f9f89c15bb0b90918d488b730cacc3296691e9200"
          ],
          [
            "0x054eabe6131681fa01fbc6dbf3e7d53595d0f8809987182142b890ac8af89cbe",
            "0x1a4befe11c0230c62de44ffafea0de903ba328c6d67af73680312b68f9acffda",
            "0x01e40665f5bb8c5c0dc9c11f39d47e9d33e717afa31ba74f92f8737a55efe134",
            "0x23c4abfeb83192362aae21b2e9ee5cfc765bf1000f798c3ae70133556abc78bd",
            "0x1669e44bf0223a77f48fffbc9f4f20b5814f6185ae11a210f8fdfcb5f71d603d",
            "0x2d5b3f523a9668cbe4887881bf7b40184f978713e358de270d87a600e5c5c92f",
            "0x10c1856f282f556d7cf6d4a293621506724ba6d3c582e4c261842f2a4bdb0ec6",
            "0x22cc4349f6baa3a8e0b61fc40ab97210e4bd3b3dec7f05bb8ef839c84692afbc",
            "0x12d019e37cd1bd76fee065bb7380a9bd8331a4dbcd1c9c776792bc19045c23b6",
            "0x27aa38fa051c434189df57bafd80723ee29bdccd59fbc1aa9af11891d3722e61",
            "0x0f0b9336db5c16d472fda3fb9ac13b13394c09ab9f484ecf6ad2060217b5896a",
            "0x275a6f59623354d71d38b4e200ce2e9676aab74ea8b8366fce33bdbc47d0586d",
            "0x02ebb6730d7bafeac23fc0b457ea824eeea3c55eca634bf24b2ac2a9a21483e1",
            "0x0ff215eb1e38dc67432e262df27eda7c3aa9419d5b6e299bd948e970fc35a62f",
            "0x247f9c7fa610322535feb0676cff549f1c177d0d39d3f1eee642e9253aafb82d",
            "0x2ad0bd9f71e2785084aa0b84616b7dada053207c418e65f4035be66a0cdc8c12",
            "0x0fc3ccef00d6a64080abbed4fed90b69c5e5803134c22b42cdca0a60f03ec33c"
          ],
          [
            "0x224d811fbdef8ec0a006d376a019e57c93bd596213a07823b7d4abce1fd8e621",
            "0x140762d30c5c3a0b0750b1400a86a9e2f5cfc2531b729370f3ad9fe1dcd43f96",
            "0x0976d7c3844bc8deea0f0337f89b2a131302ffd2d0a870181ca5fd5fb6d4fb63",
            "0x0152604201ca7df05994e9d5f058f3b6749cea63aa0cb5b4e1c3a00b6667958e",
            "0x1ab6d8fe39f87bb0ee5b883eea2725caa52c575740d5ac30b058f77113d05239",
            "0x1b62ba8037a83f1261544c307f019dbea1cc6a84d481ea8960b0fc670745e8ae",
            "0x239abc7c9f866aec28685c26f4e046a92d4360d36cb50890f422e18ed6f8a7b2",
            "0x02fed5a03200417664537df8fa30276b85d91bd2ed21de33d901fb4d82439857",
            "0x0996cae74d9627ca3c56c646095f39730274d25e82c42ce21cf789253d48a3f0",
            "0x304dbc0936862356e0024b2a32dfa3085abedbd337f22b89062be614d83cb083",
            "0x2a7de8f5ff476d81d393f1d274636ca956f05bd422bc9f3cc0fac0054b58cb02",
            "0x12c6f6c83a3530faced60c88f19a82fd12b7d938a79864ed20a545a52fdce11d",
            "0x201e03f1ff672629473a24f32d2d502acdc8fdd2883014de74c98f40a195b3e4",
            "0x118c3efe920c9c3f907c867743d35d2ccbff7c89e9c31bb6a17c552ef92b6c01",
            "0x0f705feba5f01cb27b27c104bc93f0c974f561fa26d5614f6a9d9e47d03bc655",
            "0x28d327a1c2d6012d9e69e9a3b4c11ad336d3c0dcdff4c5c84ddddf911eb645f5",
            "0x1bce67f4dc99547f2caff1b5c6d63e3ee2565a404190664533c1c65dd9d8d532"
          ],
          [
            "0x0e691fca423128a7d4afcaa582b1a94799ba1f5d2a5d53bc2bba56bbecb227a1",
            "0x180aa4babfa7539753d9c222e5e3359aca59e06bbefc7cf3a3ffa4f961fa1d5b",
            "0x2c54287eee368d5d52dfb068282d68e6b09b76bd1b5c9333b36848ac277744f5",
            "0x2f65361a4aed320fcd03a45c44dda740213571f3975ce20b96bffd960cbc6e25",
            "0x235bf178b5b56262d988bfc62708b0f85d57385cde2b4dacf9e6d592deb2afe4",
            "0x1794ec2b0eeb22fbd753b21fcd949e7bedb305f15a59eaf74a961c3046635f85",
            "0x083e1cd5943461ab505b200311bde4003fb4f7ed16aa58c8bc28f2e08e9f6922",
            "0x22a67a88776982d6a15f577dcf780ac485ebaae6fdf6fbe50b95ea266a7b6059",
            "0x2d1188d9e7e6ac24c4b2c9dc3dfcfb0fe4782d689f31b94b1fb15ef29d11f19e",
            "0x265c43c886f07d025200d56cd246b01670b3e82ab482f5879b10608cc05a37fc",
            "0x0f26d05e938f8317bd608eff0895d352dca712b653b1492f8c2ea96b26f9381e",
            "0x257689a4e22f6a8768aafe54218d31de4e409fdbf42319582536bb583313a395",
            "0x1edc57f174e1322b627c6f9dbe27ae2703c3f11c364b38188bf41d8ca0c1709a",
            "0x17b39f38636d5eff5e06eff089eb56051a602bc8f4bf1bb0ad2b2cd10cf07138",
            "0x306094ecfe63300b2f95bc98a0406c7898d86852330a7b69f9b04b5404b3eef3",
            "0x11afecc85590543bd2df8ab952be164670a3f32593e962d4bd493bcd3c84f84d",
            "0x1a8ba4f37d2315389c8560d74dac572a4447a02145516287053e6b9edefbca2d"
          ],
          [
            "0x189e279c92de0bab66707e6e6e310524e615cd4c6aacc665372a3b8e372d8ce6",
            "0x17208ea9cd4dc1a6deebe6a8d27a3181ab5f86c6a706e6fd007fc1eb678e9de6",
            "0x228a3488cabbf9f29efc0bce211a09031972b37f25ea35aca840dc2331a0cf35",
            "0x22122c6313fc9a4c6d0f944d3ce238272bf35147b1b788aab2b8dbceb6024c76",
            "0x06649a13e65023a713aaee5387d388e3609ae9b14ba4da10642ee0b7b4a16634",
            "0x1ed4c95c6283b45ec0cd88f511976f063ea2beb0695b8af7cc10589593a7978c",
            "0x15fe62a69b0438294395da1bfc93272d88797ceeef666ba2443f0c146f8ab7ee",
            "0x2b079a1d09b9d4a76d4e50c45c01fb7508b1c443a8fb21ebd28533e05def8864",
            "0x0c34496a7db5abb330b2f6ce9adaef5ae6e308c8fc2c5634097ae352aa7457d4",
            "0x04ffe27a92cb4300e774388edc3147ab9dcc4ab354c380f51ca7a2e7fe0463c4",
            "0x28b73b335c72f0774871a2030d444e5fb954979c1c568e112fb911a46c666768",
            "0x195821b99af2c217404ee582e29889072ba3cd994b74955c261b5ad364e5a9c7",
            "0x20a56fce37122b7400ab61a65eac815dd180f52fad2835f7fd9649063523881e",
            "0x235132912db2da07a4750c5ed5df2590e718404aefc48be6953432f64424042e",
            "0x1059db5e97f25826b0bbefd6bfaa6e9496c55ef5a88fefe9712691f6fbdf4298",
            "0x0b050c882073a581e767223705cd9510c04c30168c50ffe0c9875a28b6938299",
            "0x115e60c4e2937eb53c6e4a5488f801266e84d07547a0b1cd91b18f49efef9920"
          ],
          [
            "0x1d9bcbbd17b93b1913d2f79cdf12844441237206f0294746d93f8e5bdceb4725",
            "0x20007a0f5d37798789e0a8ef683536d9cf4831a6566eb727b41191d9f2974710",
            "0x16bae49f5ebb1ffe886b634d215de61ebf4f44d1cdc4f84670df8ed69310bfe2",
            "0x229aa5b547a63780d8d129e209fdb92f85662616d59da908075e668fd817822d",
            "0x29a5b1e4e2f25445496adec230ed53a35993b37630aecb5d76e56608d1b78cc6",
            "0x0bfce7b120068b9a30029dbdb36be01d071e8163fa1724f13c6ca89be29b729e",
            "0x20055568b33367bc12bf4aed7a0909c173588a5763c6a1a7598ba7c6c7e3c2a5",
            "0x2df1ff86644fcc42a1932cf15d314eed407608246f14a8098725ff7be809c87e",
            "0x1d4fb0f18f31c8270b4636e6b5d7a33e455b1050de1164182cfcb739cce965da",
            "0x19d6f1d110d9f873db002ff2ed828905bd6cc5d7921c238d7569daa9b2401d32",
            "0x282a01e8f2ce09cbdd862f98fdaba3f9af02443edc962cb34802d04477de1e20",
            "0x304b679008e8a1f09448423a05889e0df663a2b65055ca9ee5a99dfe13fb9a16",
            "0x1998147edaf3a92ab179c61ac2c36af5caf3e78bcbfb684cfea15db17b835907",
            "0x028a4572cb654261cf9358435923e65aff8f40393752748b76acfd2e3f5755c9",
            "0x15bd998c2729dbeaccc29b5d6e4f0fd96ad0a6037c84a1a1a785169fb336fb6e",
            "0x07cdf3309e130f9ceddd688af3885369fbacf6d8a44de4d450667c0d7641213f",
            "0x152d47acb9b06c9d12c2138a31416bbbbb991a65dc4d4f8ef91a3dd728e63b6a"
          ],
          [
            "0x1179184635a9780ee1312dcc3d15c7ef042b18ae9409670e28c4c7f0fb9b608e",
            "0x229da441a302929b0bae93741b7c75e11337c797e5721f9d7ee59235cda9a40c",
            "0x2e269dc78f70f9103b2bced3edbd41e156e64910887b4dddf8a3eee960f601b7",
            "0x21a91fed8bed14914c4fd491b6fa4dcbae7b3b8b3d456303af886c328abf4699",
            "0x29f07c1effc65b5589e1ca52cbe00bd65ef5e962d01200302670b6dce79eeb00",
            "0x0506a7a5de6b56ebec5e708a70a3cecb3a2cfd25e7a20ed495e295a93023c5a8",
            "0x0c02b148f4a1559b597cd320f00c02b96a7fc7c83811bd86a1e79cc3106b2201",
            "0x24a466f74e99a602894f421010f43a81c708b1b4ad076425190b85347f685b1a",
            "0x1fee18888425724970bd2897b54c7fa8e9c367dddbc8484da37864faff9f9056",
            "0x19711c41d76f64a371aba62f3f46710dee0c3aad217b7cb00bd12613b24ef52b",
            "0x2770d14a220152fa7083040be9b3cd38c8ace9e207073486bcfafcad706748b1",
            "0x08dffe684aa33f911d35e9a644b4bdbfcd15a4da49b6531816b60e8ce4f6b5e0",
            "0x1cbfab7cb05e2f28254b230bfce017f005fb4f2dd8935ad11765b347d2003667",
            "0x21d7269a53d3712b20543b0039aecc9466520133d299e8442000b33184a39e84",
            "0x21fde580a19886b13358f18a32d5aff685b4bd77d94f067f44f6e7a93350fd2a",
            "0x05232bf95807e48ad82a1eb4bc481e9b0720e95196dfe361f55c4d1cfc7926d7",
            "0x13602646b88ba31c0d544c757bd9181727835dbe690c30583a23f37f52fe5e3d"
          ],
          [
            "0x0e48466182ae8333af1891a6aa19736741ed0680d57c931ede13fc07ae82e88b",
            "0x1137b5c61b9684bec41e4dfaa76438256622a4378ea4e646a2844bbc85bf81cc",
            "0x1f4b85552b960d1c18b7b8f66af7305a6773d9b05faf51e0ed1a5f2ef2f95e7d",
            "0x0ba8a54914886fae16700c02efdf7767413a0bec5a19ed0cf0a7d8ac60c1f1c3",
            "0x30289c9678c0330f85cf8e362683a6144f22b841aa08f586f219dd9edaef78bc",
            "0x04890048fcdbde6366761cd58fcc6ac0a3360d9a64233d3ea4d8d6be8a23ec45",
            "0x1a4162e8a7704447be0c1d4d5cf2f777670f4841ea27ac2709cd6bffeed2cebd",
            "0x2e944b449c1369ce9766fa6f4f99a87630b5c1f2d63677a437a537d61b6c7470",
            "0x22d6e787f44daa6b6593dfde5576d2fdf5dc0447e65a1d5e7712e4e62c3bdcee",
            "0x0e08ddb69d5efd949c3d671e4e78e4fc7628c65ec1cfbc18ba6a101aa19dbf66",
            "0x27a573036509a8a29a90eaa34d2adaed5ed1ec6b207274f3c5ca23dad3880e57",
            "0x072372083f62195bcc2b5afab1038198a3f0546b62d171ea21c37c8f31551176",
            "0x151e0bc2110e4300dd82a4c92442c4751c65b294426c8c320c69e61831958ceb",
            "0x13f1acc389c4f8e752cc7e4b81c37ae2130c60df9c8b7e87dc5fb7459caf4916",
            "0x06823a9baa55623732b02fa270b2f887fd3804a85c1a7f2a355df3fbefc69dc1",
            "0x1e41936e6bc0c3ed665c2e2466ab9216b9973fe136d9f9aad95878c1b5607c6e",
            "0x065766d2980331a55c0a39d83be78bd127baee77d53a24268e064c71daaf2b6a"
          ],
          [
            "0x1c9d56f71c2f22c44d3a8c17bf5b40452e05471f0b6dfe9ffe4725eb29f73464",
            "0x113003c1dc7baf35e4536f95f4eab2f3badda2c7a1c6b5afc956234ade3e7129",
            "0x0d5fb9b0e1503f2b92697c473b69cf76d38fc12912e2c3cb33996dbb0cdfaa38",
            "0x2e164a524ee22eb5a8903fae1f35a3a78f882f3e3a9892b6ff4753baac934949",
            "0x01f9dcbde7d058134a510a711d036d1f1800e473a63b33a7e0fb04dc2e09e3af",
            "0x285b20799970b58c63ac9f4af564ce0f28209b61802214da5bfafd0cf24c6712",
            "0x0ce3dd727fdd11a8bc731500effa23763089ce3332cb730f9fe57146ee204810",
            "0x01079746ca51d9518a0c309296ca48206292798910494277be2bb65a6b134b3a",
            "0x23a85d4f91eda69f310c451d7d480c2f40c0d53382ddd3fcaaae627b9617170e",
            "0x240657d67f92b5e4261ace434fd286206c315565378ce8b81661523f0e6ddc54",
            "0x2384a384bcc2c4a17ff7c9e3e7d131d39173c431333a9c7c1d6fd7110e25902b",
            "0x25547b51b2c6874e4538ca9b34093b714ad36a8f356e4c78e0d66b1f190038fb",
            "0x0e59e1a990ec00f72edc37248349d7a5a6f7bcaef158110450f1e5985f0a5d99",
            "0x066c6090936f6b054f17dea91682954332b3e32d8f20a0ae171d417316d3622f",
            "0x1b25662843b0986ab1a4e9a766193efca47c70d49364f03d50c5edb5b5517ebe",
            "0x2647635477ee5fa9e7ac5983f92db34d7336646c63c63e2dd53d60b8714bd759",
            "0x26db2e85a9006ef5c11cd675a267d42efef9f5af90466b2aaf75eea8024b00bb"
          ],
          [
            "0x2234546f5e8541e8f72ad794891950b32b1cd891cc66775c5b635961642e9c15",
            "0x1b61468fab59c925f1986186bcb97965a858523a2582d434319a9525ae71158f",
            "0x011291ef514a10d6f0651e4ad0da5d4a489e3018927879da942defdbdf701ddd",
            "0x2df2fb2c2e321e3cce13d16091705a40c5c795f8b41b61dfd6ae7d97d63578b4",
            "0x01baaf8ff96bb2224bc34cf80c38bf13086f1e429bceec12090d8a7c376a9a82",
            "0x07b0d70ccff1b70dad9bb4b0142e3f6dc5bc95d3766affad378cc5042484dec9",
            "0x11f28ee5da80d19e31581b566a439537466d9ca7fdf14b7086830bd8ac13c4cb",
            "0x0013d7b03e8fc9fa647fca6cdca97146901df7c675a164913c2bd2a3b6ee3cb4",
            "0x2440e786179a7fbcfe8d29ab18d0fc6cfa383cfb747f7a2d15b77d82d9b0d9d3",
            "0x056149221712b88ec291fc218324142d02873cdd53199679fce4dfcb5dda9116",
            "0x162c5bbc81b44427be4e82c5e5253bd66c3054f5c5b73b28b29238487849a794",
            "0x178f2aa8df9a11ef33558dcc934971f7697e626cfef00ffcdeb6f3c9c1a7d10a",
            "0x24afd92f80e57788f40fbb2b79f29454dc485fbafb5a7263f462b7c84b4e500b",
            "0x0492ae5f5ac2a5102ea96e60ac8375553687151ae44042dbf5899232c8f2100a",
            "0x10dcb11f815c7e29c66be1dd3c5f7602c98e9fb1687c2d825b48789c521fbd0b",
            "0x0a11d587cb75d48544eec662ad27ca6acfec98f7a8b7963a294e4bb329b170df",
            "0x1dd6b095cb68459dcf6bdadd434aa81f80a55a08e6782c653a93afd8a65f3267"
          ],
          [
            "0x14c09d155c5d428198c234b553da338f227cbc12b0e42f2b9ce71563ee1495c0",
            "0x117fd528770fb17f718e29a2d91a63ec7c39ef1dd3039f0943f717d1804253d5",
            "0x120e7416d74308e24047f6828c68ae28bc288b216e8a25e8b0ebcf738480e390",
            "0x06995e510fd7669374c39d27903f342ac5bf8a1464807f308bef610b76cb693e",
            "0x1d814b3c17656c2327f94cc02472780b886b88394f1a5cbe34dc4f44ff134fce",
            "0x03b90da34b198cbca17e34aac98b169875ecf73aeb5c6ff1f00c9fe535aa9902",
            "0x27fa77a0658791e6755781c367683f9c9333a41364f7870edff1935a347485d8",
            "0x06d6ee531ba3fdced05e24cf9103d0962dd227f1de692c0199483e92ab24ba59",
            "0x1e507921be7c76124879ffce5b62dd0e96259e98cc64c27208d62b40bfe3e482",
            "0x0681adaea79cf457db5701931f0ee2f15ecbb159ed50cf746a15b85c6f8a5370",
            "0x1e6196147508bf2edc872c4e897a967778b119f69fb431a7f646d2018eab4010",
            "0x068efa35bc620124ab7d88990171bae4102ad21dfddfb387df0de0c8a3a189e9",
            "0x1b012224a4f050df841122d17c5ea4eded7c8ec2034743a432a2cee893976f29",
            "0x208d814151bcdcddfcf835a958c259a6477bfe4b3392710edf9d80787a25c5d0",
            "0x28f901fcaa860b0dc4192adef8ea4ae55af6ce432c85e0ce4d073e514ab24252",
            "0x1bd639879731823c871f9cd4714e3cc56a6eb19884b73664eed24b11929119a0",
            "0x1d3ee85f078fbeecda2473efc2bedd1ba7ec6f4795faaeae3b0de48d3080c625"
          ]
        ]
      ]
    };
  }
});

// node_modules/@darkforest_eth/hashing/dist/fakeHash.js
var require_fakeHash2 = __commonJS({
  "node_modules/@darkforest_eth/hashing/dist/fakeHash.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fakeHash = exports.seededRandom = void 0;
    var big_integer_1 = __importDefault(require_BigInteger());
    function seededRandom(seed) {
      const x3 = Math.sin(seed) * 1e4;
      return x3 - Math.floor(x3);
    }
    exports.seededRandom = seededRandom;
    var SIZE = 65536;
    var globalSeed = 1;
    var globalRandom = () => {
      return seededRandom(globalSeed++);
    };
    var arr = [];
    for (let i3 = 0; i3 < SIZE; i3 += 1) {
      arr.push({
        idx: i3,
        rand: globalRandom()
      });
    }
    arr.sort((a3, b3) => a3.rand - b3.rand);
    var lookup = arr.map((a3) => a3.idx);
    var lookupInv = Array(SIZE).fill(0);
    for (let i3 = 0; i3 < SIZE; i3 += 1) {
      lookupInv[lookup[i3]] = i3;
    }
    var posMod = (m3, n2) => {
      const val2 = Math.floor(m3 / n2) * n2;
      return m3 - val2;
    };
    var sigma = (x3, y3) => {
      const val2 = 256 * x3 + y3;
      const idx = posMod(val2, SIZE);
      const ret = [Math.floor(lookup[idx] / 256), lookup[idx] % 256];
      return ret;
    };
    var cyc = (m3, n2) => (r3, s2) => {
      const val2 = posMod(256 * (r3 + m3) + (s2 + n2), SIZE);
      const ret = [Math.floor(val2 / 256), val2 % 256];
      return ret;
    };
    var fakeHash = (planetRarity) => (x3, y3) => {
      const m3 = Math.floor(x3 / 256);
      const r3 = x3 - m3 * 256;
      const n2 = Math.floor(y3 / 256);
      const s2 = y3 - n2 * 256;
      const [mPrime, nPrime] = sigma(m3, n2);
      const [xPrime, yPrime] = sigma(...cyc(mPrime, nPrime)(...sigma(r3, s2)));
      const validPlanet = xPrime * 256 + yPrime < 256 * 256 / planetRarity;
      let hash3 = validPlanet ? "00000000" : "1eadbeef";
      const seed = 8 * (1e7 * x3 + y3);
      for (let i3 = 0; i3 < 7; i3 += 1) {
        const rand2 = Math.floor(seededRandom(seed + i3) * 2 ** 32);
        let append = rand2.toString(16);
        while (append.length < 8) {
          append = "0" + append;
        }
        hash3 += append;
      }
      return (0, big_integer_1.default)(hash3, 16);
    };
    exports.fakeHash = fakeHash;
  }
});

// node_modules/@darkforest_eth/hashing/dist/fractions/bigFraction.js
var require_bigFraction2 = __commonJS({
  "node_modules/@darkforest_eth/hashing/dist/fractions/bigFraction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.errorConstructor = exports.Fraction = void 0;
    var { Fraction, errorConstructor } = function(root) {
      "use strict";
      function errorConstructor2() {
        const temp = Error.apply(this, arguments);
        temp["name"] = this["name"] = name;
        this["stack"] = temp["stack"];
        this["message"] = temp["message"];
      }
      if (!BigInt)
        BigInt = function(n2) {
          return n2;
        };
      const C_ONE = BigInt(1);
      const C_ZERO = BigInt(0);
      const C_TEN = BigInt(10);
      const C_TWO = BigInt(2);
      const C_FIVE = BigInt(5);
      const MAX_CYCLE_LEN = BigInt(2e3);
      const P2 = {
        s: C_ONE,
        n: C_ZERO,
        d: C_ONE
      };
      function createError(name2) {
        function IntermediateInheritor() {
        }
        IntermediateInheritor.prototype = Error.prototype;
        errorConstructor2.prototype = new IntermediateInheritor();
        return errorConstructor2;
      }
      const DivisionByZero = Fraction2["DivisionByZero"] = createError("DivisionByZero");
      const InvalidParameter = Fraction2["InvalidParameter"] = createError("InvalidParameter");
      function assign(n2, s2) {
        try {
          n2 = BigInt(n2);
        } catch (e4) {
          throw new InvalidParameter();
        }
        return n2 * s2;
      }
      const parse2 = function(p1, p2) {
        let n2 = C_ZERO, d2 = C_ONE, s2 = C_ONE;
        if (p1 === void 0 || p1 === null) {
        } else if (p2 !== void 0) {
          n2 = BigInt(p1);
          d2 = BigInt(p2);
          s2 = n2 * d2;
        } else if (typeof p1 === "object") {
          if ("d" in p1 && "n" in p1) {
            n2 = BigInt(p1["n"]);
            d2 = BigInt(p1["d"]);
            if ("s" in p1)
              n2 *= BigInt(p1["s"]);
          } else if (0 in p1) {
            n2 = BigInt(p1[0]);
            if (1 in p1)
              d2 = BigInt(p1[1]);
          } else if (p1 instanceof BigInt) {
            n2 = BigInt(p1);
          } else {
            throw new InvalidParameter();
          }
          s2 = n2 * d2;
        } else if (typeof p1 === "number") {
          if (isNaN(p1)) {
            throw new InvalidParameter();
          }
          if (p1 < 0) {
            s2 = -C_ONE;
            p1 = -p1;
          }
          if (p1 % 1 === 0) {
            n2 = BigInt(p1);
          } else if (p1 > 0) {
            let z2 = 1;
            let A = 0, B = 1;
            let C3 = 1, D2 = 1;
            let N3 = 1e7;
            if (p1 >= 1) {
              z2 = 10 ** Math.floor(1 + Math.log10(p1));
              p1 /= z2;
            }
            while (B <= N3 && D2 <= N3) {
              let M3 = (A + C3) / (B + D2);
              if (p1 === M3) {
                if (B + D2 <= N3) {
                  n2 = A + C3;
                  d2 = B + D2;
                } else if (D2 > B) {
                  n2 = C3;
                  d2 = D2;
                } else {
                  n2 = A;
                  d2 = B;
                }
                break;
              } else {
                if (p1 > M3) {
                  A += C3;
                  B += D2;
                } else {
                  C3 += A;
                  D2 += B;
                }
                if (B > N3) {
                  n2 = C3;
                  d2 = D2;
                } else {
                  n2 = A;
                  d2 = B;
                }
              }
            }
            n2 = BigInt(n2) * BigInt(z2);
            d2 = BigInt(d2);
          } else if (isNaN(p1)) {
            d2 = n2 = NaN;
          }
        } else if (typeof p1 === "string") {
          let ndx = 0;
          let v3 = C_ZERO, w3 = C_ZERO, x3 = C_ZERO, y3 = C_ONE, z2 = C_ONE;
          let match = p1.match(/\d+|./g);
          if (match === null)
            throw new InvalidParameter();
          if (match[ndx] === "-") {
            s2 = -C_ONE;
            ndx++;
          } else if (match[ndx] === "+") {
            ndx++;
          }
          if (match.length === ndx + 1) {
            w3 = assign(match[ndx++], s2);
          } else if (match[ndx + 1] === "." || match[ndx] === ".") {
            if (match[ndx] !== ".") {
              v3 = assign(match[ndx++], s2);
            }
            ndx++;
            if (ndx + 1 === match.length || match[ndx + 1] === "(" && match[ndx + 3] === ")" || match[ndx + 1] === "'" && match[ndx + 3] === "'") {
              w3 = assign(match[ndx], s2);
              y3 = C_TEN ** BigInt(match[ndx].length);
              ndx++;
            }
            if (match[ndx] === "(" && match[ndx + 2] === ")" || match[ndx] === "'" && match[ndx + 2] === "'") {
              x3 = assign(match[ndx + 1], s2);
              z2 = C_TEN ** BigInt(match[ndx + 1].length) - C_ONE;
              ndx += 3;
            }
          } else if (match[ndx + 1] === "/" || match[ndx + 1] === ":") {
            w3 = assign(match[ndx], s2);
            y3 = assign(match[ndx + 2], C_ONE);
            ndx += 3;
          } else if (match[ndx + 3] === "/" && match[ndx + 1] === " ") {
            v3 = assign(match[ndx], s2);
            w3 = assign(match[ndx + 2], s2);
            y3 = assign(match[ndx + 4], C_ONE);
            ndx += 5;
          }
          if (match.length <= ndx) {
            d2 = y3 * z2;
            s2 = n2 = x3 + d2 * v3 + z2 * w3;
          } else {
            throw new InvalidParameter();
          }
        } else {
          throw new InvalidParameter();
        }
        if (d2 === C_ZERO) {
          throw new DivisionByZero();
        }
        P2["s"] = s2 < C_ZERO ? -C_ONE : C_ONE;
        P2["n"] = n2 < C_ZERO ? -n2 : n2;
        P2["d"] = d2 < C_ZERO ? -d2 : d2;
      };
      function modpow(b3, e4, m3) {
        let r3 = C_ONE;
        for (; e4 > C_ZERO; b3 = b3 * b3 % m3, e4 >>= C_ONE) {
          if (e4 & C_ONE) {
            r3 = r3 * b3 % m3;
          }
        }
        return r3;
      }
      function cycleLen(n2, d2) {
        for (; d2 % C_TWO === C_ZERO; d2 /= C_TWO) {
        }
        for (; d2 % C_FIVE === C_ZERO; d2 /= C_FIVE) {
        }
        if (d2 === C_ONE)
          return C_ZERO;
        let rem = C_TEN % d2;
        let t3 = C_ONE;
        for (; rem !== C_ONE; t3++) {
          rem = rem * C_TEN % d2;
          if (t3 > MAX_CYCLE_LEN)
            return C_ZERO;
        }
        return t3;
      }
      function cycleStart(n2, d2, len) {
        let rem1 = C_ONE;
        let rem2 = modpow(C_TEN, len, d2);
        for (let t3 = 0; t3 < 300; t3++) {
          if (rem1 === rem2)
            return BigInt(t3);
          rem1 = rem1 * C_TEN % d2;
          rem2 = rem2 * C_TEN % d2;
        }
        return 0;
      }
      function gcd(a3, b3) {
        if (!a3)
          return b3;
        if (!b3)
          return a3;
        while (1) {
          a3 %= b3;
          if (!a3)
            return b3;
          b3 %= a3;
          if (!b3)
            return a3;
        }
      }
      function Fraction2(a3, b3) {
        if (!(this instanceof Fraction2)) {
          return new Fraction2(a3, b3);
        }
        parse2(a3, b3);
        a3 = gcd(P2["d"], P2["n"]);
        this["s"] = P2["s"];
        this["n"] = P2["n"] / a3 | C_ZERO;
        this["d"] = P2["d"] / a3 | C_ZERO;
      }
      Fraction2.prototype = {
        s: C_ONE,
        n: C_ZERO,
        d: C_ONE,
        abs: function() {
          return new Fraction2(this["n"], this["d"]);
        },
        neg: function() {
          return new Fraction2(-this["s"] * this["n"], this["d"]);
        },
        add: function(a3, b3) {
          parse2(a3, b3);
          return new Fraction2(this["s"] * this["n"] * P2["d"] + P2["s"] * this["d"] * P2["n"], this["d"] * P2["d"]);
        },
        sub: function(a3, b3) {
          parse2(a3, b3);
          return new Fraction2(this["s"] * this["n"] * P2["d"] - P2["s"] * this["d"] * P2["n"], this["d"] * P2["d"]);
        },
        mul: function(a3, b3) {
          parse2(a3, b3);
          return new Fraction2(this["s"] * P2["s"] * this["n"] * P2["n"], this["d"] * P2["d"]);
        },
        div: function(a3, b3) {
          parse2(a3, b3);
          return new Fraction2(this["s"] * P2["s"] * this["n"] * P2["d"], this["d"] * P2["n"]);
        },
        clone: function() {
          return new Fraction2(this);
        },
        mod: function(a3, b3) {
          if (a3 === void 0) {
            return new Fraction2(this["s"] * this["n"] % this["d"], 1);
          }
          parse2(a3, b3);
          if (P2["n"] === 0 && this["d"] === 0) {
            Fraction2(0, 0);
          }
          return new Fraction2(this["s"] * (P2["d"] * this["n"]) % (P2["n"] * this["d"]), P2["d"] * this["d"]);
        },
        gcd: function(a3, b3) {
          parse2(a3, b3);
          return new Fraction2(gcd(P2["n"], this["n"]) * gcd(P2["d"], this["d"]), P2["d"] * this["d"]);
        },
        lcm: function(a3, b3) {
          parse2(a3, b3);
          if (P2["n"] === C_ZERO && this["n"] === C_ZERO) {
            return new Fraction2();
          }
          return new Fraction2(P2["n"] * this["n"], gcd(P2["n"], this["n"]) * gcd(P2["d"], this["d"]));
        },
        inverse: function() {
          return new Fraction2(this["s"] * this["d"], this["n"]);
        },
        pow: function(m3) {
          if (m3 < 0) {
            return new Fraction2((this["s"] * this["d"]) ** BigInt(-m3), this["n"] ** BigInt(-m3));
          } else {
            return new Fraction2((this["s"] * this["n"]) ** BigInt(+m3), this["d"] ** BigInt(+m3));
          }
        },
        equals: function(a3, b3) {
          parse2(a3, b3);
          return this["s"] * this["n"] * P2["d"] === P2["s"] * P2["n"] * this["d"];
        },
        compare: function(a3, b3) {
          parse2(a3, b3);
          let t3 = this["s"] * this["n"] * P2["d"] - P2["s"] * P2["n"] * this["d"];
          return (C_ZERO < t3) - (t3 < C_ZERO);
        },
        ceil: function(places) {
          places = 10 ** Number(places || 0);
          return new Fraction2(Math.ceil(places * Number(this["s"] * this["n"]) / Number(this["d"])), places);
        },
        floor: function(places) {
          places = 10 ** Number(places || 0);
          return new Fraction2(Math.floor(places * Number(this["s"] * this["n"]) / Number(this["d"])), places);
        },
        round: function(places) {
          places = 10 ** Number(places || 0);
          return new Fraction2(Math.round(places * Number(this["s"] * this["n"]) / Number(this["d"])), places);
        },
        divisible: function(a3, b3) {
          parse2(a3, b3);
          return !(!(P2["n"] * this["d"]) || this["n"] * P2["d"] % (P2["n"] * this["d"]));
        },
        valueOf: function() {
          return Number(this["s"] * this["n"]) / Number(this["d"]);
        },
        toString: function(dec) {
          let g3;
          let N3 = this["n"];
          let D2 = this["d"];
          dec = dec || 15;
          let cycLen = cycleLen(N3, D2);
          let cycOff = cycleStart(N3, D2, cycLen);
          let str = this["s"] < C_ZERO ? "-" : "";
          str += N3 / D2 | C_ZERO;
          N3 %= D2;
          N3 *= C_TEN;
          if (N3)
            str += ".";
          if (cycLen) {
            for (let i3 = cycOff; i3--; ) {
              str += N3 / D2 | C_ZERO;
              N3 %= D2;
              N3 *= C_TEN;
            }
            str += "(";
            for (let i3 = cycLen; i3--; ) {
              str += N3 / D2 | C_ZERO;
              N3 %= D2;
              N3 *= C_TEN;
            }
            str += ")";
          } else {
            for (let i3 = dec; N3 && i3--; ) {
              str += N3 / D2 | C_ZERO;
              N3 %= D2;
              N3 *= C_TEN;
            }
          }
          return str;
        },
        toFraction: function(excludeWhole) {
          let n2 = this["n"];
          let d2 = this["d"];
          let str = this["s"] < C_ZERO ? "-" : "";
          if (d2 === C_ONE) {
            str += n2;
          } else {
            let whole = n2 / d2 | C_ZERO;
            if (excludeWhole && whole > C_ZERO) {
              str += whole;
              str += " ";
              n2 %= d2;
            }
            str += n2;
            str += "/";
            str += d2;
          }
          return str;
        },
        toLatex: function(excludeWhole) {
          let n2 = this["n"];
          let d2 = this["d"];
          let str = this["s"] < C_ZERO ? "-" : "";
          if (d2 === C_ONE) {
            str += n2;
          } else {
            let whole = n2 / d2 | C_ZERO;
            if (excludeWhole && whole > C_ZERO) {
              str += whole;
              n2 %= d2;
            }
            str += "\\frac{";
            str += n2;
            str += "}{";
            str += d2;
            str += "}";
          }
          return str;
        },
        toContinued: function() {
          let a3 = this["n"];
          let b3 = this["d"];
          let res = [];
          do {
            res.push(a3 / b3 | C_ZERO);
            let t3 = a3 % b3;
            a3 = b3;
            b3 = t3;
          } while (a3 !== C_ONE);
          return res;
        },
        simplify: function(eps) {
          let cont = this["abs"]()["toContinued"]();
          eps = eps || 1e-3;
          function rec(a3) {
            if (a3.length === 1)
              return new Fraction2(a3[0]);
            return rec(a3.slice(1))["inverse"]()["add"](a3[0]);
          }
          for (let i3 = 0; i3 < cont.length; i3++) {
            let tmp = rec(cont.slice(0, i3 + 1));
            if (tmp["sub"](this["abs"]())["abs"]().valueOf() < eps) {
              return tmp["mul"](this["s"]);
            }
          }
          return this;
        }
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      Fraction2["default"] = Fraction2;
      Fraction2["Fraction"] = Fraction2;
      return {
        Fraction: Fraction2,
        errorConstructor: errorConstructor2
      };
    }(exports);
    exports.Fraction = Fraction;
    exports.errorConstructor = errorConstructor;
  }
});

// node_modules/@darkforest_eth/hashing/dist/mimc.js
var require_mimc2 = __commonJS({
  "node_modules/@darkforest_eth/hashing/dist/mimc.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.perlinRandHash = exports.mimcWithRounds = exports.modPBigIntNative = exports.modPBigInt = exports.mimcSponge = exports.p = void 0;
    var big_integer_1 = __importDefault(require_BigInteger());
    exports.p = (0, big_integer_1.default)("21888242871839275222246405745257275088548364400416034343698204186575808495617");
    var c5 = [
      "0",
      "7120861356467848435263064379192047478074060781135320967663101236819528304084",
      "5024705281721889198577876690145313457398658950011302225525409148828000436681",
      "17980351014018068290387269214713820287804403312720763401943303895585469787384",
      "19886576439381707240399940949310933992335779767309383709787331470398675714258",
      "1213715278223786725806155661738676903520350859678319590331207960381534602599",
      "18162138253399958831050545255414688239130588254891200470934232514682584734511",
      "7667462281466170157858259197976388676420847047604921256361474169980037581876",
      "7207551498477838452286210989212982851118089401128156132319807392460388436957",
      "9864183311657946807255900203841777810810224615118629957816193727554621093838",
      "4798196928559910300796064665904583125427459076060519468052008159779219347957",
      "17387238494588145257484818061490088963673275521250153686214197573695921400950",
      "10005334761930299057035055370088813230849810566234116771751925093634136574742",
      "11897542014760736209670863723231849628230383119798486487899539017466261308762",
      "16771780563523793011283273687253985566177232886900511371656074413362142152543",
      "749264854018824809464168489785113337925400687349357088413132714480582918506",
      "3683645737503705042628598550438395339383572464204988015434959428676652575331",
      "7556750851783822914673316211129907782679509728346361368978891584375551186255",
      "20391289379084797414557439284689954098721219201171527383291525676334308303023",
      "18146517657445423462330854383025300323335289319277199154920964274562014376193",
      "8080173465267536232534446836148661251987053305394647905212781979099916615292",
      "10796443006899450245502071131975731672911747129805343722228413358507805531141",
      "5404287610364961067658660283245291234008692303120470305032076412056764726509",
      "4623894483395123520243967718315330178025957095502546813929290333264120223168",
      "16845753148201777192406958674202574751725237939980634861948953189320362207797",
      "4622170486584704769521001011395820886029808520586507873417553166762370293671",
      "16688277490485052681847773549197928630624828392248424077804829676011512392564",
      "11878652861183667748838188993669912629573713271883125458838494308957689090959",
      "2436445725746972287496138382764643208791713986676129260589667864467010129482",
      "1888098689545151571063267806606510032698677328923740058080630641742325067877",
      "148924106504065664829055598316821983869409581623245780505601526786791681102",
      "18875020877782404439294079398043479420415331640996249745272087358069018086569",
      "15189693413320228845990326214136820307649565437237093707846682797649429515840",
      "19669450123472657781282985229369348220906547335081730205028099210442632534079",
      "5521922218264623411380547905210139511350706092570900075727555783240701821773",
      "4144769320246558352780591737261172907511489963810975650573703217887429086546",
      "10097732913112662248360143041019433907849917041759137293018029019134392559350",
      "1720059427972723034107765345743336447947522473310069975142483982753181038321",
      "6302388219880227251325608388535181451187131054211388356563634768253301290116",
      "6745410632962119604799318394592010194450845483518862700079921360015766217097",
      "10858157235265583624235850660462324469799552996870780238992046963007491306222",
      "20241898894740093733047052816576694435372877719072347814065227797906130857593",
      "10165780782761211520836029617746977303303335603838343292431760011576528327409",
      "2832093654883670345969792724123161241696170611611744759675180839473215203706",
      "153011722355526826233082383360057587249818749719433916258246100068258954737",
      "20196970640587451358539129330170636295243141659030208529338914906436009086943",
      "3180973917010545328313139835982464870638521890385603025657430208141494469656",
      "17198004293191777441573635123110935015228014028618868252989374962722329283022",
      "7642160509228669138628515458941659189680509753651629476399516332224325757132",
      "19346204940546791021518535594447257347218878114049998691060016493806845179755",
      "11501810868606870391127866188394535330696206817602260610801897042898616817272",
      "3113973447392053821824427670386252797811804954746053461397972968381571297505",
      "6545064306297957002139416752334741502722251869537551068239642131448768236585",
      "5203908808704813498389265425172875593837960384349653691918590736979872578408",
      "2246692432011290582160062129070762007374502637007107318105405626910313810224",
      "11760570435432189127645691249600821064883781677693087773459065574359292849137",
      "5543749482491340532547407723464609328207990784853381797689466144924198391839",
      "8837549193990558762776520822018694066937602576881497343584903902880277769302",
      "12855514863299373699594410385788943772765811961581749194183533625311486462501",
      "5363660674689121676875069134269386492382220935599781121306637800261912519729",
      "13162342403579303950549728848130828093497701266240457479693991108217307949435",
      "916941639326869583414469202910306428966657806899788970948781207501251816730",
      "15618589556584434434009868216186115416835494805174158488636000580759692174228",
      "8959562060028569701043973060670353733575345393653685776974948916988033453971",
      "16390754464333401712265575949874369157699293840516802426621216808905079127650",
      "168282396747788514908709091757591226095443902501365500003618183905496160435",
      "8327443473179334761744301768309008451162322941906921742120510244986704677004",
      "17213012626801210615058753489149961717422101711567228037597150941152495100640",
      "10394369641533736715250242399198097296122982486516256408681925424076248952280",
      "17784386835392322654196171115293700800825771210400152504776806618892170162248",
      "16533189939837087893364000390641148516479148564190420358849587959161226782982",
      "18725396114211370207078434315900726338547621160475533496863298091023511945076",
      "7132325028834551397904855671244375895110341505383911719294705267624034122405",
      "148317947440800089795933930720822493695520852448386394775371401743494965187",
      "19001050671757720352890779127693793630251266879994702723636759889378387053056",
      "18824274411769830274877839365728651108434404855803844568234862945613766611460",
      "12771414330193951156383998390424063470766226667986423961689712557338777174205",
      "11332046574800279729678603488745295198038913503395629790213378101166488244657",
      "9607550223176946388146938069307456967842408600269548190739947540821716354749",
      "8756385288462344550200229174435953103162307705310807828651304665320046782583",
      "176061952957067086877570020242717222844908281373122372938833890096257042779",
      "12200212977482648306758992405065921724409841940671166017620928947866825250857",
      "10868453624107875516866146499877130701929063632959660262366632833504750028858",
      "2016095394399807253596787752134573207202567875457560571095586743878953450738",
      "21815578223768330433802113452339488275704145896544481092014911825656390567514",
      "4923772847693564777744725640710197015181591950368494148029046443433103381621",
      "1813584943682214789802230765734821149202472893379265320098816901270224589984",
      "10810123816265612772922113403831964815724109728287572256602010709288980656498",
      "1153669123397255702524721206511185557982017410156956216465120456256288427021",
      "5007518659266430200134478928344522649876467369278722765097865662497773767152",
      "2511432546938591792036639990606464315121646668029252285288323664350666551637",
      "32883284540320451295484135704808083452381176816565850047310272290579727564",
      "10484856914279112612610993418405543310546746652738541161791501150994088679557",
      "2026733759645519472558796412979210009170379159866522399881566309631434814953",
      "14731806221235869882801331463708736361296174006732553130708107037190460654379",
      "14740327483193277147065845135561988641238516852487657117813536909482068950652",
      "18787428285295558781869865751953016580493190547148386433580291216673009884554",
      "3804047064713122820157099453648459188816376755739202017447862327783289895072",
      "16709604795697901641948603019242067672006293290826991671766611326262532802914",
      "11061717085931490100602849654034280576915102867237101935487893025907907250695",
      "2821730726367472966906149684046356272806484545281639696873240305052362149654",
      "17467794879902895769410571945152708684493991588672014763135370927880883292655",
      "1571520786233540988201616650622796363168031165456869481368085474420849243232",
      "10041051776251223165849354194892664881051125330236567356945669006147134614302",
      "3981753758468103976812813304477670033098707002886030847251581853700311567551",
      "4365864398105436789177703571412645548020537580493599380018290523813331678900",
      "2391801327305361293476178683853802679507598622000359948432171562543560193350",
      "214219368547551689972421167733597094823289857206402800635962137077096090722",
      "18192064100315141084242006659317257023098826945893371479835220462302399655674",
      "15487549757142039139328911515400805508248576685795694919457041092150651939253",
      "10142447197759703415402259672441315777933858467700579946665223821199077641122",
      "11246573086260753259993971254725613211193686683988426513880826148090811891866",
      "6574066859860991369704567902211886840188702386542112593710271426704432301235",
      "11311085442652291634822798307831431035776248927202286895207125867542470350078",
      "20977948360215259915441258687649465618185769343138135384346964466965010873779",
      "792781492853909872425531014397300057232399608769451037135936617996830018501",
      "5027602491523497423798779154966735896562099398367163998686335127580757861872",
      "14595204575654316237672764823862241845410365278802914304953002937313300553572",
      "13973538843621261113924259058427434053808430378163734641175100160836376897004",
      "16395063164993626722686882727042150241125309409717445381854913964674649318585",
      "8465768840047024550750516678171433288207841931251654898809033371655109266663",
      "21345603324471810861925019445720576814602636473739003852898308205213912255830",
      "21171984405852590343970239018692870799717057961108910523876770029017785940991",
      "10761027113757988230637066281488532903174559953630210849190212601991063767647",
      "6678298831065390834922566306988418588227382406175769592902974103663687992230",
      "4993662582188632374202316265508850988596880036291765531885657575099537176757",
      "18364168158495573675698600238443218434246806358811328083953887470513967121206",
      "3506345610354615013737144848471391553141006285964325596214723571988011984829",
      "248732676202643792226973868626360612151424823368345645514532870586234380100",
      "10090204501612803176317709245679152331057882187411777688746797044706063410969",
      "21297149835078365363970699581821844234354988617890041296044775371855432973500",
      "16729368143229828574342820060716366330476985824952922184463387490091156065099",
      "4467191506765339364971058668792642195242197133011672559453028147641428433293",
      "8677548159358013363291014307402600830078662555833653517843708051504582990832",
      "1022951765127126818581466247360193856197472064872288389992480993218645055345",
      "1888195070251580606973417065636430294417895423429240431595054184472931224452",
      "4221265384902749246920810956363310125115516771964522748896154428740238579824",
      "2825393571154632139467378429077438870179957021959813965940638905853993971879",
      "19171031072692942278056619599721228021635671304612437350119663236604712493093",
      "10780807212297131186617505517708903709488273075252405602261683478333331220733",
      "18230936781133176044598070768084230333433368654744509969087239465125979720995",
      "16901065971871379877929280081392692752968612240624985552337779093292740763381",
      "146494141603558321291767829522948454429758543710648402457451799015963102253",
      "2492729278659146790410698334997955258248120870028541691998279257260289595548",
      "2204224910006646535594933495262085193210692406133533679934843341237521233504",
      "16062117410185840274616925297332331018523844434907012275592638570193234893570",
      "5894928453677122829055071981254202951712129328678534592916926069506935491729",
      "4947482739415078212217504789923078546034438919537985740403824517728200332286",
      "16143265650645676880461646123844627780378251900510645261875867423498913438066",
      "397690828254561723549349897112473766901585444153303054845160673059519614409",
      "11272653598912269895509621181205395118899451234151664604248382803490621227687",
      "15566927854306879444693061574322104423426072650522411176731130806720753591030",
      "14222898219492484180162096141564251903058269177856173968147960855133048449557",
      "16690275395485630428127725067513114066329712673106153451801968992299636791385",
      "3667030990325966886479548860429670833692690972701471494757671819017808678584",
      "21280039024501430842616328642522421302481259067470872421086939673482530783142",
      "15895485136902450169492923978042129726601461603404514670348703312850236146328",
      "7733050956302327984762132317027414325566202380840692458138724610131603812560",
      "438123800976401478772659663183448617575635636575786782566035096946820525816",
      "814913922521637742587885320797606426167962526342166512693085292151314976633",
      "12368712287081330853637674140264759478736012797026621876924395982504369598764",
      "2494806857395134874309386694756263421445039103814920780777601708371037591569",
      "16101132301514338989512946061786320637179843435886825102406248183507106312877",
      "6252650284989960032925831409804233477770646333900692286731621844532438095656",
      "9277135875276787021836189566799935097400042171346561246305113339462708861695",
      "10493603554686607050979497281838644324893776154179810893893660722522945589063",
      "8673089750662709235894359384294076697329948991010184356091130382437645649279",
      "9558393272910366944245875920138649617479779893610128634419086981339060613250",
      "19012287860122586147374214541764572282814469237161122489573881644994964647218",
      "9783723818270121678386992630754842961728702994964214799008457449989291229500",
      "15550788416669474113213749561488122552422887538676036667630838378023479382689",
      "15016165746156232864069722572047169071786333815661109750860165034341572904221",
      "6506225705710197163670556961299945987488979904603689017479840649664564978574",
      "10796631184889302076168355684722130903785890709107732067446714470783437829037",
      "19871836214837460419845806980869387567383718044439891735114283113359312279540",
      "20871081766843466343749609089986071784031203517506781251203251608363835140622",
      "5100105771517691442278432864090229416166996183792075307747582375962855820797",
      "8777887112076272395250620301071581171386440850451972412060638225741125310886",
      "5300440870136391278944213332144327695659161151625757537632832724102670898756",
      "1205448543652932944633962232545707633928124666868453915721030884663332604536",
      "5542499997310181530432302492142574333860449305424174466698068685590909336771",
      "11028094245762332275225364962905938096659249161369092798505554939952525894293",
      "19187314764836593118404597958543112407224947638377479622725713735224279297009",
      "17047263688548829001253658727764731047114098556534482052135734487985276987385",
      "19914849528178967155534624144358541535306360577227460456855821557421213606310",
      "2929658084700714257515872921366736697080475676508114973627124569375444665664",
      "15092262360719700162343163278648422751610766427236295023221516498310468956361",
      "21578580340755653236050830649990190843552802306886938815497471545814130084980",
      "1258781501221760320019859066036073675029057285507345332959539295621677296991",
      "3819598418157732134449049289585680301176983019643974929528867686268702720163",
      "8653175945487997845203439345797943132543211416447757110963967501177317426221",
      "6614652990340435611114076169697104582524566019034036680161902142028967568142",
      "19212515502973904821995111796203064175854996071497099383090983975618035391558",
      "18664315914479294273286016871365663486061896605232511201418576829062292269769",
      "11498264615058604317482574216318586415670903094838791165247179252175768794889",
      "10814026414212439999107945133852431304483604215416531759535467355316227331774",
      "17566185590731088197064706533119299946752127014428399631467913813769853431107",
      "14016139747289624978792446847000951708158212463304817001882956166752906714332",
      "8242601581342441750402731523736202888792436665415852106196418942315563860366",
      "9244680976345080074252591214216060854998619670381671198295645618515047080988",
      "12216779172735125538689875667307129262237123728082657485828359100719208190116",
      "10702811721859145441471328511968332847175733707711670171718794132331147396634",
      "6479667912792222539919362076122453947926362746906450079329453150607427372979",
      "15117544653571553820496948522381772148324367479772362833334593000535648316185",
      "6842203153996907264167856337497139692895299874139131328642472698663046726780",
      "12732823292801537626009139514048596316076834307941224506504666470961250728055",
      "6936272626871035740815028148058841877090860312517423346335878088297448888663",
      "17297554111853491139852678417579991271009602631577069694853813331124433680030",
      "16641596134749940573104316021365063031319260205559553673368334842484345864859",
      "7400481189785154329569470986896455371037813715804007747228648863919991399081",
      "2273205422216987330510475127669563545720586464429614439716564154166712854048",
      "15162538063742142685306302282127534305212832649282186184583465569986719234456",
      "5628039096440332922248578319648483863204530861778160259559031331287721255522",
      "16085392195894691829567913404182676871326863890140775376809129785155092531260",
      "14227467863135365427954093998621993651369686288941275436795622973781503444257",
      "18224457394066545825553407391290108485121649197258948320896164404518684305122",
      "274945154732293792784580363548970818611304339008964723447672490026510689427",
      "11050822248291117548220126630860474473945266276626263036056336623671308219529",
      "2119542016932434047340813757208803962484943912710204325088879681995922344971",
      "0"
    ].map((n2) => (0, big_integer_1.default)(n2));
    var FeistelState = class {
      constructor(rounds, k3) {
        this.l = (0, big_integer_1.default)(0);
        this.r = (0, big_integer_1.default)(0);
        this.rounds = rounds;
        this.k = k3;
      }
      inject(elt) {
        this.l = this.l.add(elt).mod(exports.p);
      }
      mix() {
        for (let i3 = 0; i3 < this.rounds - 1; i3++) {
          const t4 = this.k.add(this.l).add(c5[i3]).mod(exports.p);
          const lNew = t4.modPow(5, exports.p).add(this.r).mod(exports.p);
          this.r = this.l;
          this.l = lNew;
        }
        const t3 = this.k.add(this.l).mod(exports.p);
        this.r = t3.modPow(5, exports.p).add(this.r).mod(exports.p);
      }
    };
    function mimcSponge(inputs, nOutputs, rounds, key2) {
      const state = new FeistelState(rounds, (0, big_integer_1.default)(key2));
      for (const elt of inputs) {
        state.inject(elt);
        state.mix();
      }
      const outputs = [state.l];
      for (let i3 = 0; i3 < nOutputs - 1; i3++) {
        state.mix();
        outputs.push(state.l);
      }
      return outputs;
    }
    exports.mimcSponge = mimcSponge;
    function modPBigInt(x3) {
      let ret = (0, big_integer_1.default)(x3).mod(exports.p);
      if (ret.lesser((0, big_integer_1.default)(0))) {
        ret = ret.add(exports.p);
      }
      return ret;
    }
    exports.modPBigInt = modPBigInt;
    function modPBigIntNative(x3) {
      let ret = x3.mod(exports.p);
      if (ret.lesser((0, big_integer_1.default)(0))) {
        ret = ret.add(exports.p);
      }
      return ret;
    }
    exports.modPBigIntNative = modPBigIntNative;
    var mimcWithRounds = (rounds, key2) => (...inputs) => mimcSponge(inputs.map((n2) => modPBigInt(n2)), 1, rounds, key2)[0];
    exports.mimcWithRounds = mimcWithRounds;
    function mimcHash4(key2) {
      return (0, exports.mimcWithRounds)(220, key2);
    }
    var perlinRandHash = (key2) => (0, exports.mimcWithRounds)(4, key2);
    exports.perlinRandHash = perlinRandHash;
    exports.default = mimcHash4;
  }
});

// node_modules/@darkforest_eth/hashing/dist/perlin.js
var require_perlin2 = __commonJS({
  "node_modules/@darkforest_eth/hashing/dist/perlin.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.perlin = exports.MAX_PERLIN_VALUE = exports.getRandomGradientAt = exports.rand = void 0;
    var big_integer_1 = __importDefault(require_BigInteger());
    var bigFraction_1 = require_bigFraction2();
    var mimc_1 = require_mimc2();
    var TRACK_LCM = false;
    var rand2 = (key2) => (...args) => {
      return (0, mimc_1.perlinRandHash)(key2)(...args).remainder(16).toJSNumber();
    };
    exports.rand = rand2;
    var vecs;
    try {
      vecs = [
        [1e3, 0],
        [923, 382],
        [707, 707],
        [382, 923],
        [0, 1e3],
        [-383, 923],
        [-708, 707],
        [-924, 382],
        [-1e3, 0],
        [-924, -383],
        [-708, -708],
        [-383, -924],
        [-1, -1e3],
        [382, -924],
        [707, -708],
        [923, -383]
      ].map(([x3, y3]) => ({ x: new bigFraction_1.Fraction(x3, 1e3), y: new bigFraction_1.Fraction(y3, 1e3) }));
    } catch (err) {
      console.error("Browser does not support BigInt.", err);
    }
    var getRandomGradientAt = (point3, scale, randFn) => {
      const val2 = vecs[randFn(point3.x.valueOf(), point3.y.valueOf(), scale.valueOf())];
      return val2;
    };
    exports.getRandomGradientAt = getRandomGradientAt;
    var minus = (a3, b3) => {
      return {
        x: a3.x.sub(b3.x),
        y: a3.y.sub(b3.y)
      };
    };
    var dot = (a3, b3) => {
      return a3.x.mul(b3.x).add(a3.y.mul(b3.y));
    };
    var smoothStep = (x3) => {
      return x3;
    };
    var scalarMultiply = (s2, v3) => ({
      x: v3.x.mul(s2),
      y: v3.y.mul(s2)
    });
    var getWeight = (corner, p2) => {
      return smoothStep(new bigFraction_1.Fraction(1).sub(p2.x.sub(corner.x).abs())).mul(smoothStep(new bigFraction_1.Fraction(1).sub(p2.y.sub(corner.y).abs())));
    };
    var perlinValue = (corners, scale, p2) => {
      let ret = new bigFraction_1.Fraction(0);
      for (const corner of corners) {
        const distVec = minus(p2, corner.coords);
        ret = ret.add(getWeight(scalarMultiply(scale.inverse(), corner.coords), scalarMultiply(scale.inverse(), p2)).mul(dot(scalarMultiply(scale.inverse(), distVec), corner.gradient)));
      }
      return ret;
    };
    var runningLCM = (0, big_integer_1.default)(1);
    var updateLCM = (oldLCM, newValue) => {
      if (!TRACK_LCM) {
        return oldLCM;
      }
      const newLCM = big_integer_1.default.lcm(oldLCM, newValue);
      if (newLCM !== oldLCM) {
        console.log("LCM updated to ", newLCM);
      }
      return newLCM;
    };
    var realMod = (dividend, divisor) => {
      const temp = dividend.mod(divisor);
      if (temp.s.toString() === "-1") {
        return temp.add(divisor);
      }
      return temp;
    };
    var valueAt = (p2, scale, randFn) => {
      const bottomLeftCoords = {
        x: p2.x.sub(realMod(p2.x, scale)),
        y: p2.y.sub(realMod(p2.y, scale))
      };
      const bottomRightCoords = {
        x: bottomLeftCoords.x.add(scale),
        y: bottomLeftCoords.y
      };
      const topLeftCoords = {
        x: bottomLeftCoords.x,
        y: bottomLeftCoords.y.add(scale)
      };
      const topRightCoords = {
        x: bottomLeftCoords.x.add(scale),
        y: bottomLeftCoords.y.add(scale)
      };
      const bottomLeftGrad = {
        coords: bottomLeftCoords,
        gradient: (0, exports.getRandomGradientAt)(bottomLeftCoords, scale, randFn)
      };
      const bottomRightGrad = {
        coords: bottomRightCoords,
        gradient: (0, exports.getRandomGradientAt)(bottomRightCoords, scale, randFn)
      };
      const topLeftGrad = {
        coords: topLeftCoords,
        gradient: (0, exports.getRandomGradientAt)(topLeftCoords, scale, randFn)
      };
      const topRightGrad = {
        coords: topRightCoords,
        gradient: (0, exports.getRandomGradientAt)(topRightCoords, scale, randFn)
      };
      const out = perlinValue([bottomLeftGrad, bottomRightGrad, topLeftGrad, topRightGrad], scale, p2);
      return out;
    };
    exports.MAX_PERLIN_VALUE = 32;
    function perlin(coords, options) {
      let { x: x3, y: y3 } = coords;
      if (options.mirrorY)
        x3 = Math.abs(x3);
      if (options.mirrorX)
        y3 = Math.abs(y3);
      const fractionalP = { x: new bigFraction_1.Fraction(x3), y: new bigFraction_1.Fraction(y3) };
      let ret = new bigFraction_1.Fraction(0);
      const pValues = [];
      for (let i3 = 0; i3 < 3; i3 += 1) {
        pValues.push(valueAt(fractionalP, new bigFraction_1.Fraction(options.scale * 2 ** i3), (0, exports.rand)(options.key)));
      }
      ret = ret.add(pValues[0]);
      ret = ret.add(pValues[0]);
      ret = ret.add(pValues[1]);
      ret = ret.add(pValues[2]);
      ret = ret.div(4);
      runningLCM = updateLCM(runningLCM, (0, big_integer_1.default)(ret.d));
      ret = ret.mul(exports.MAX_PERLIN_VALUE / 2);
      if (options.floor)
        ret = ret.floor();
      ret = ret.add(exports.MAX_PERLIN_VALUE / 2);
      const out = ret.valueOf();
      return Math.floor(out * 100) / 100;
    }
    exports.perlin = perlin;
  }
});

// node_modules/@darkforest_eth/hashing/dist/index.js
var require_dist8 = __commonJS({
  "node_modules/@darkforest_eth/hashing/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0)
        k22 = k3;
      Object.defineProperty(o3, k22, { enumerable: true, get: function() {
        return m3[k3];
      } });
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0)
        k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o3, v3) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
    } : function(o3, v3) {
      o3["default"] = v3;
    });
    var __importStar = exports && exports.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule)
        return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k3 in mod2)
          if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod2, k3))
            __createBinding(result, mod2, k3);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_PERLIN_VALUE = exports.Fraction = exports.seededRandom = exports.fakeHash = exports.modPBigIntNative = exports.modPBigInt = exports.getRandomGradientAt = exports.rand = exports.perlin = exports.mimcSponge = exports.mimcHash = void 0;
    var fakeHash_1 = require_fakeHash2();
    Object.defineProperty(exports, "fakeHash", { enumerable: true, get: function() {
      return fakeHash_1.fakeHash;
    } });
    Object.defineProperty(exports, "seededRandom", { enumerable: true, get: function() {
      return fakeHash_1.seededRandom;
    } });
    var bigFraction_1 = require_bigFraction2();
    Object.defineProperty(exports, "Fraction", { enumerable: true, get: function() {
      return bigFraction_1.Fraction;
    } });
    var mimc_1 = __importStar(require_mimc2());
    exports.mimcHash = mimc_1.default;
    Object.defineProperty(exports, "mimcSponge", { enumerable: true, get: function() {
      return mimc_1.mimcSponge;
    } });
    Object.defineProperty(exports, "modPBigInt", { enumerable: true, get: function() {
      return mimc_1.modPBigInt;
    } });
    Object.defineProperty(exports, "modPBigIntNative", { enumerable: true, get: function() {
      return mimc_1.modPBigIntNative;
    } });
    var perlin_1 = require_perlin2();
    Object.defineProperty(exports, "getRandomGradientAt", { enumerable: true, get: function() {
      return perlin_1.getRandomGradientAt;
    } });
    Object.defineProperty(exports, "MAX_PERLIN_VALUE", { enumerable: true, get: function() {
      return perlin_1.MAX_PERLIN_VALUE;
    } });
    Object.defineProperty(exports, "perlin", { enumerable: true, get: function() {
      return perlin_1.perlin;
    } });
    Object.defineProperty(exports, "rand", { enumerable: true, get: function() {
      return perlin_1.rand;
    } });
  }
});

// (disabled):node_modules/buffer/index.js
var require_buffer = __commonJS({
  "(disabled):node_modules/buffer/index.js"() {
  }
});

// node_modules/bn.js/lib/bn.js
var require_bn = __commonJS({
  "node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert4(val2, msg) {
        if (!val2)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base2, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN3;
      } else {
        exports2.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer().Buffer;
        }
      } catch (e4) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN3.prototype._init = function init2(number, base2, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base2, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert4(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base2 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base2, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert4(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base2, endian) {
        assert4(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i3 = 0; i3 < this.length; i3++) {
          this.words[i3] = 0;
        }
        var j3, w3;
        var off = 0;
        if (endian === "be") {
          for (i3 = number.length - 1, j3 = 0; i3 >= 0; i3 -= 3) {
            w3 = number[i3] | number[i3 - 1] << 8 | number[i3 - 2] << 16;
            this.words[j3] |= w3 << off & 67108863;
            this.words[j3 + 1] = w3 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j3++;
            }
          }
        } else if (endian === "le") {
          for (i3 = 0, j3 = 0; i3 < number.length; i3 += 3) {
            w3 = number[i3] | number[i3 + 1] << 8 | number[i3 + 2] << 16;
            this.words[j3] |= w3 << off & 67108863;
            this.words[j3 + 1] = w3 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j3++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string2, index) {
        var c5 = string2.charCodeAt(index);
        if (c5 >= 65 && c5 <= 70) {
          return c5 - 55;
        } else if (c5 >= 97 && c5 <= 102) {
          return c5 - 87;
        } else {
          return c5 - 48 & 15;
        }
      }
      function parseHexByte(string2, lowerBound, index) {
        var r3 = parseHex4Bits(string2, index);
        if (index - 1 >= lowerBound) {
          r3 |= parseHex4Bits(string2, index - 1) << 4;
        }
        return r3;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i3 = 0; i3 < this.length; i3++) {
          this.words[i3] = 0;
        }
        var off = 0;
        var j3 = 0;
        var w3;
        if (endian === "be") {
          for (i3 = number.length - 1; i3 >= start; i3 -= 2) {
            w3 = parseHexByte(number, start, i3) << off;
            this.words[j3] |= w3 & 67108863;
            if (off >= 18) {
              off -= 18;
              j3 += 1;
              this.words[j3] |= w3 >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i3 = parseLength % 2 === 0 ? start + 1 : start; i3 < number.length; i3 += 2) {
            w3 = parseHexByte(number, start, i3) << off;
            this.words[j3] |= w3 & 67108863;
            if (off >= 18) {
              off -= 18;
              j3 += 1;
              this.words[j3] |= w3 >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul4) {
        var r3 = 0;
        var len = Math.min(str.length, end);
        for (var i3 = start; i3 < len; i3++) {
          var c5 = str.charCodeAt(i3) - 48;
          r3 *= mul4;
          if (c5 >= 49) {
            r3 += c5 - 49 + 10;
          } else if (c5 >= 17) {
            r3 += c5 - 17 + 10;
          } else {
            r3 += c5;
          }
        }
        return r3;
      }
      BN3.prototype._parseBase = function _parseBase(number, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number.length - start;
        var mod2 = total % limbLen;
        var end = Math.min(total, total - mod2) + start;
        var word = 0;
        for (var i3 = start; i3 < end; i3 += limbLen) {
          word = parseBase(number, i3, i3 + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod2 !== 0) {
          var pow2 = 1;
          word = parseBase(number, i3, number.length, base2);
          for (i3 = 0; i3 < mod2; i3++) {
            pow2 *= base2;
          }
          this.imuln(pow2);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN3.prototype.copy = function copy2(dest) {
        dest.words = new Array(this.length);
        for (var i3 = 0; i3 < this.length; i3++) {
          dest.words[i3] = this.words[i3];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN3.prototype.clone = function clone() {
        var r3 = new BN3(null);
        this.copy(r3);
        return r3;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN3.prototype.inspect = function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString3(base2, padding2) {
        base2 = base2 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i3 = 0; i3 < this.length; i3++) {
            var w3 = this.words[i3];
            var word = ((w3 << off | carry) & 16777215).toString(16);
            carry = w3 >>> 24 - off & 16777215;
            if (carry !== 0 || i3 !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i3--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c5 = this.clone();
          c5.negative = 0;
          while (!c5.isZero()) {
            var r3 = c5.modn(groupBase).toString(base2);
            c5 = c5.idivn(groupBase);
            if (!c5.isZero()) {
              out = zeros2[groupSize - r3.length] + r3 + out;
            } else {
              out = r3 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert4(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber2() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert4(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON2() {
        return this.toString(16);
      };
      BN3.prototype.toBuffer = function toBuffer2(endian, length) {
        assert4(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN3.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength2 = this.byteLength();
        var reqLength = length || Math.max(1, byteLength2);
        assert4(byteLength2 <= reqLength, "byte array longer than desired length");
        assert4(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b3, i3;
        var q = this.clone();
        if (!littleEndian) {
          for (i3 = 0; i3 < reqLength - byteLength2; i3++) {
            res[i3] = 0;
          }
          for (i3 = 0; !q.isZero(); i3++) {
            b3 = q.andln(255);
            q.iushrn(8);
            res[reqLength - i3 - 1] = b3;
          }
        } else {
          for (i3 = 0; !q.isZero(); i3++) {
            b3 = q.andln(255);
            q.iushrn(8);
            res[i3] = b3;
          }
          for (; i3 < reqLength; i3++) {
            res[i3] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w3) {
          return 32 - Math.clz32(w3);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w3) {
          var t3 = w3;
          var r3 = 0;
          if (t3 >= 4096) {
            r3 += 13;
            t3 >>>= 13;
          }
          if (t3 >= 64) {
            r3 += 7;
            t3 >>>= 7;
          }
          if (t3 >= 8) {
            r3 += 4;
            t3 >>>= 4;
          }
          if (t3 >= 2) {
            r3 += 2;
            t3 >>>= 2;
          }
          return r3 + t3;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w3) {
        if (w3 === 0)
          return 26;
        var t3 = w3;
        var r3 = 0;
        if ((t3 & 8191) === 0) {
          r3 += 13;
          t3 >>>= 13;
        }
        if ((t3 & 127) === 0) {
          r3 += 7;
          t3 >>>= 7;
        }
        if ((t3 & 15) === 0) {
          r3 += 4;
          t3 >>>= 4;
        }
        if ((t3 & 3) === 0) {
          r3 += 2;
          t3 >>>= 2;
        }
        if ((t3 & 1) === 0) {
          r3++;
        }
        return r3;
      };
      BN3.prototype.bitLength = function bitLength2() {
        var w3 = this.words[this.length - 1];
        var hi = this._countBits(w3);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w3 = new Array(num.bitLength());
        for (var bit = 0; bit < w3.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w3[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w3;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r3 = 0;
        for (var i3 = 0; i3 < this.length; i3++) {
          var b3 = this._zeroBits(this.words[i3]);
          r3 += b3;
          if (b3 !== 26)
            break;
        }
        return r3;
      };
      BN3.prototype.byteLength = function byteLength2() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg4() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i3 = 0; i3 < num.length; i3++) {
          this.words[i3] = this.words[i3] | num.words[i3];
        }
        return this.strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert4((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b3;
        if (this.length > num.length) {
          b3 = num;
        } else {
          b3 = this;
        }
        for (var i3 = 0; i3 < b3.length; i3++) {
          this.words[i3] = this.words[i3] & num.words[i3];
        }
        this.length = b3.length;
        return this.strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert4((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a3;
        var b3;
        if (this.length > num.length) {
          a3 = this;
          b3 = num;
        } else {
          a3 = num;
          b3 = this;
        }
        for (var i3 = 0; i3 < b3.length; i3++) {
          this.words[i3] = a3.words[i3] ^ b3.words[i3];
        }
        if (this !== a3) {
          for (; i3 < a3.length; i3++) {
            this.words[i3] = a3.words[i3];
          }
        }
        this.length = a3.length;
        return this.strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert4((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert4(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i3 = 0; i3 < bytesNeeded; i3++) {
          this.words[i3] = ~this.words[i3] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i3] = ~this.words[i3] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val2) {
        assert4(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val2) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r3;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r3 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r3 = this.isub(num);
          num.negative = 1;
          return r3._normSign();
        }
        var a3, b3;
        if (this.length > num.length) {
          a3 = this;
          b3 = num;
        } else {
          a3 = num;
          b3 = this;
        }
        var carry = 0;
        for (var i3 = 0; i3 < b3.length; i3++) {
          r3 = (a3.words[i3] | 0) + (b3.words[i3] | 0) + carry;
          this.words[i3] = r3 & 67108863;
          carry = r3 >>> 26;
        }
        for (; carry !== 0 && i3 < a3.length; i3++) {
          r3 = (a3.words[i3] | 0) + carry;
          this.words[i3] = r3 & 67108863;
          carry = r3 >>> 26;
        }
        this.length = a3.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a3 !== this) {
          for (; i3 < a3.length; i3++) {
            this.words[i3] = a3.words[i3];
          }
        }
        return this;
      };
      BN3.prototype.add = function add4(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r3 = this.iadd(num);
          num.negative = 1;
          return r3._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a3, b3;
        if (cmp > 0) {
          a3 = this;
          b3 = num;
        } else {
          a3 = num;
          b3 = this;
        }
        var carry = 0;
        for (var i3 = 0; i3 < b3.length; i3++) {
          r3 = (a3.words[i3] | 0) - (b3.words[i3] | 0) + carry;
          carry = r3 >> 26;
          this.words[i3] = r3 & 67108863;
        }
        for (; carry !== 0 && i3 < a3.length; i3++) {
          r3 = (a3.words[i3] | 0) + carry;
          carry = r3 >> 26;
          this.words[i3] = r3 & 67108863;
        }
        if (carry === 0 && i3 < a3.length && a3 !== this) {
          for (; i3 < a3.length; i3++) {
            this.words[i3] = a3.words[i3];
          }
        }
        this.length = Math.max(this.length, i3);
        if (a3 !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN3.prototype.sub = function sub2(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a3 = self2.words[0] | 0;
        var b3 = num.words[0] | 0;
        var r3 = a3 * b3;
        var lo = r3 & 67108863;
        var carry = r3 / 67108864 | 0;
        out.words[0] = lo;
        for (var k3 = 1; k3 < len; k3++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k3, num.length - 1);
          for (var j3 = Math.max(0, k3 - self2.length + 1); j3 <= maxJ; j3++) {
            var i3 = k3 - j3 | 0;
            a3 = self2.words[i3] | 0;
            b3 = num.words[j3] | 0;
            r3 = a3 * b3 + rword;
            ncarry += r3 / 67108864 | 0;
            rword = r3 & 67108863;
          }
          out.words[k3] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k3] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a3 = self2.words;
        var b3 = num.words;
        var o3 = out.words;
        var c5 = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a3[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a3[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a22 = a3[2] | 0;
        var al2 = a22 & 8191;
        var ah2 = a22 >>> 13;
        var a32 = a3[3] | 0;
        var al3 = a32 & 8191;
        var ah3 = a32 >>> 13;
        var a4 = a3[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a3[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a3[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a3[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a3[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a3[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b3[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b3[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b22 = b3[2] | 0;
        var bl2 = b22 & 8191;
        var bh2 = b22 >>> 13;
        var b32 = b3[3] | 0;
        var bl3 = b32 & 8191;
        var bh3 = b32 >>> 13;
        var b4 = b3[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b3[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b3[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b3[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b3[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b3[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c5 + lo | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c5 + lo | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w22 = (c5 + lo | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
        w22 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c5 + lo | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c5 + lo | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c5 + lo | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c5 + lo | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c5 + lo | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c5 + lo | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c5 + lo | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c5 + lo | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c5 + lo | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c5 + lo | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c5 + lo | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c5 + lo | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c5 + lo | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c5 + lo | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c5 + lo | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c5 + lo | 0) + ((mid & 8191) << 13) | 0;
        c5 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o3[0] = w0;
        o3[1] = w1;
        o3[2] = w22;
        o3[3] = w3;
        o3[4] = w4;
        o3[5] = w5;
        o3[6] = w6;
        o3[7] = w7;
        o3[8] = w8;
        o3[9] = w9;
        o3[10] = w10;
        o3[11] = w11;
        o3[12] = w12;
        o3[13] = w13;
        o3[14] = w14;
        o3[15] = w15;
        o3[16] = w16;
        o3[17] = w17;
        o3[18] = w18;
        if (c5 !== 0) {
          o3[19] = c5;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k3 = 0; k3 < out.length - 1; k3++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k3, num.length - 1);
          for (var j3 = Math.max(0, k3 - self2.length + 1); j3 <= maxJ; j3++) {
            var i3 = k3 - j3;
            var a3 = self2.words[i3] | 0;
            var b3 = num.words[j3] | 0;
            var r3 = a3 * b3;
            var lo = r3 & 67108863;
            ncarry = ncarry + (r3 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k3] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k3] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x3, y3) {
        this.x = x3;
        this.y = y3;
      }
      FFTM.prototype.makeRBT = function makeRBT(N3) {
        var t3 = new Array(N3);
        var l3 = BN3.prototype._countBits(N3) - 1;
        for (var i3 = 0; i3 < N3; i3++) {
          t3[i3] = this.revBin(i3, l3, N3);
        }
        return t3;
      };
      FFTM.prototype.revBin = function revBin(x3, l3, N3) {
        if (x3 === 0 || x3 === N3 - 1)
          return x3;
        var rb = 0;
        for (var i3 = 0; i3 < l3; i3++) {
          rb |= (x3 & 1) << l3 - i3 - 1;
          x3 >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N3) {
        for (var i3 = 0; i3 < N3; i3++) {
          rtws[i3] = rws[rbt[i3]];
          itws[i3] = iws[rbt[i3]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N3, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N3);
        for (var s2 = 1; s2 < N3; s2 <<= 1) {
          var l3 = s2 << 1;
          var rtwdf = Math.cos(2 * Math.PI / l3);
          var itwdf = Math.sin(2 * Math.PI / l3);
          for (var p2 = 0; p2 < N3; p2 += l3) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j3 = 0; j3 < s2; j3++) {
              var re = rtws[p2 + j3];
              var ie = itws[p2 + j3];
              var ro = rtws[p2 + j3 + s2];
              var io = itws[p2 + j3 + s2];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p2 + j3] = re + ro;
              itws[p2 + j3] = ie + io;
              rtws[p2 + j3 + s2] = re - ro;
              itws[p2 + j3 + s2] = ie - io;
              if (j3 !== l3) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n2, m3) {
        var N3 = Math.max(m3, n2) | 1;
        var odd = N3 & 1;
        var i3 = 0;
        for (N3 = N3 / 2 | 0; N3; N3 = N3 >>> 1) {
          i3++;
        }
        return 1 << i3 + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N3) {
        if (N3 <= 1)
          return;
        for (var i3 = 0; i3 < N3 / 2; i3++) {
          var t3 = rws[i3];
          rws[i3] = rws[N3 - i3 - 1];
          rws[N3 - i3 - 1] = t3;
          t3 = iws[i3];
          iws[i3] = -iws[N3 - i3 - 1];
          iws[N3 - i3 - 1] = -t3;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N3) {
        var carry = 0;
        for (var i3 = 0; i3 < N3 / 2; i3++) {
          var w3 = Math.round(ws[2 * i3 + 1] / N3) * 8192 + Math.round(ws[2 * i3] / N3) + carry;
          ws[i3] = w3 & 67108863;
          if (w3 < 67108864) {
            carry = 0;
          } else {
            carry = w3 / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N3) {
        var carry = 0;
        for (var i3 = 0; i3 < len; i3++) {
          carry = carry + (ws[i3] | 0);
          rws[2 * i3] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i3 + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i3 = 2 * len; i3 < N3; ++i3) {
          rws[i3] = 0;
        }
        assert4(carry === 0);
        assert4((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N3) {
        var ph = new Array(N3);
        for (var i3 = 0; i3 < N3; i3++) {
          ph[i3] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x3, y3, out) {
        var N3 = 2 * this.guessLen13b(x3.length, y3.length);
        var rbt = this.makeRBT(N3);
        var _3 = this.stub(N3);
        var rws = new Array(N3);
        var rwst = new Array(N3);
        var iwst = new Array(N3);
        var nrws = new Array(N3);
        var nrwst = new Array(N3);
        var niwst = new Array(N3);
        var rmws = out.words;
        rmws.length = N3;
        this.convert13b(x3.words, x3.length, rws, N3);
        this.convert13b(y3.words, y3.length, nrws, N3);
        this.transform(rws, _3, rwst, iwst, N3, rbt);
        this.transform(nrws, _3, nrwst, niwst, N3, rbt);
        for (var i3 = 0; i3 < N3; i3++) {
          var rx = rwst[i3] * nrwst[i3] - iwst[i3] * niwst[i3];
          iwst[i3] = rwst[i3] * niwst[i3] + iwst[i3] * nrwst[i3];
          rwst[i3] = rx;
        }
        this.conjugate(rwst, iwst, N3);
        this.transform(rwst, iwst, rmws, _3, N3, rbt);
        this.conjugate(rmws, _3, N3);
        this.normalize13b(rmws, N3);
        out.negative = x3.negative ^ y3.negative;
        out.length = x3.length + y3.length;
        return out.strip();
      };
      BN3.prototype.mul = function mul4(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        assert4(typeof num === "number");
        assert4(num < 67108864);
        var carry = 0;
        for (var i3 = 0; i3 < this.length; i3++) {
          var w3 = (this.words[i3] | 0) * num;
          var lo = (w3 & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w3 / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i3] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i3] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow2(num) {
        var w3 = toBitArray(num);
        if (w3.length === 0)
          return new BN3(1);
        var res = this;
        for (var i3 = 0; i3 < w3.length; i3++, res = res.sqr()) {
          if (w3[i3] !== 0)
            break;
        }
        if (++i3 < w3.length) {
          for (var q = res.sqr(); i3 < w3.length; i3++, q = q.sqr()) {
            if (w3[i3] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits2) {
        assert4(typeof bits2 === "number" && bits2 >= 0);
        var r3 = bits2 % 26;
        var s2 = (bits2 - r3) / 26;
        var carryMask = 67108863 >>> 26 - r3 << 26 - r3;
        var i3;
        if (r3 !== 0) {
          var carry = 0;
          for (i3 = 0; i3 < this.length; i3++) {
            var newCarry = this.words[i3] & carryMask;
            var c5 = (this.words[i3] | 0) - newCarry << r3;
            this.words[i3] = c5 | carry;
            carry = newCarry >>> 26 - r3;
          }
          if (carry) {
            this.words[i3] = carry;
            this.length++;
          }
        }
        if (s2 !== 0) {
          for (i3 = this.length - 1; i3 >= 0; i3--) {
            this.words[i3 + s2] = this.words[i3];
          }
          for (i3 = 0; i3 < s2; i3++) {
            this.words[i3] = 0;
          }
          this.length += s2;
        }
        return this.strip();
      };
      BN3.prototype.ishln = function ishln(bits2) {
        assert4(this.negative === 0);
        return this.iushln(bits2);
      };
      BN3.prototype.iushrn = function iushrn(bits2, hint, extended) {
        assert4(typeof bits2 === "number" && bits2 >= 0);
        var h3;
        if (hint) {
          h3 = (hint - hint % 26) / 26;
        } else {
          h3 = 0;
        }
        var r3 = bits2 % 26;
        var s2 = Math.min((bits2 - r3) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r3 << r3;
        var maskedWords = extended;
        h3 -= s2;
        h3 = Math.max(0, h3);
        if (maskedWords) {
          for (var i3 = 0; i3 < s2; i3++) {
            maskedWords.words[i3] = this.words[i3];
          }
          maskedWords.length = s2;
        }
        if (s2 === 0) {
        } else if (this.length > s2) {
          this.length -= s2;
          for (i3 = 0; i3 < this.length; i3++) {
            this.words[i3] = this.words[i3 + s2];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i3 = this.length - 1; i3 >= 0 && (carry !== 0 || i3 >= h3); i3--) {
          var word = this.words[i3] | 0;
          this.words[i3] = carry << 26 - r3 | word >>> r3;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN3.prototype.ishrn = function ishrn(bits2, hint, extended) {
        assert4(this.negative === 0);
        return this.iushrn(bits2, hint, extended);
      };
      BN3.prototype.shln = function shln(bits2) {
        return this.clone().ishln(bits2);
      };
      BN3.prototype.ushln = function ushln(bits2) {
        return this.clone().iushln(bits2);
      };
      BN3.prototype.shrn = function shrn(bits2) {
        return this.clone().ishrn(bits2);
      };
      BN3.prototype.ushrn = function ushrn(bits2) {
        return this.clone().iushrn(bits2);
      };
      BN3.prototype.testn = function testn(bit) {
        assert4(typeof bit === "number" && bit >= 0);
        var r3 = bit % 26;
        var s2 = (bit - r3) / 26;
        var q = 1 << r3;
        if (this.length <= s2)
          return false;
        var w3 = this.words[s2];
        return !!(w3 & q);
      };
      BN3.prototype.imaskn = function imaskn(bits2) {
        assert4(typeof bits2 === "number" && bits2 >= 0);
        var r3 = bits2 % 26;
        var s2 = (bits2 - r3) / 26;
        assert4(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s2) {
          return this;
        }
        if (r3 !== 0) {
          s2++;
        }
        this.length = Math.min(s2, this.length);
        if (r3 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r3 << r3;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN3.prototype.maskn = function maskn(bits2) {
        return this.clone().imaskn(bits2);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert4(typeof num === "number");
        assert4(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i3 = 0; i3 < this.length && this.words[i3] >= 67108864; i3++) {
          this.words[i3] -= 67108864;
          if (i3 === this.length - 1) {
            this.words[i3 + 1] = 1;
          } else {
            this.words[i3 + 1]++;
          }
        }
        this.length = Math.max(this.length, i3 + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert4(typeof num === "number");
        assert4(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i3 = 0; i3 < this.length && this.words[i3] < 0; i3++) {
            this.words[i3] += 67108864;
            this.words[i3 + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs2() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul4, shift) {
        var len = num.length + shift;
        var i3;
        this._expand(len);
        var w3;
        var carry = 0;
        for (i3 = 0; i3 < num.length; i3++) {
          w3 = (this.words[i3 + shift] | 0) + carry;
          var right = (num.words[i3] | 0) * mul4;
          w3 -= right & 67108863;
          carry = (w3 >> 26) - (right / 67108864 | 0);
          this.words[i3 + shift] = w3 & 67108863;
        }
        for (; i3 < this.length - shift; i3++) {
          w3 = (this.words[i3 + shift] | 0) + carry;
          carry = w3 >> 26;
          this.words[i3 + shift] = w3 & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert4(carry === -1);
        carry = 0;
        for (i3 = 0; i3 < this.length; i3++) {
          w3 = -(this.words[i3] | 0) + carry;
          carry = w3 >> 26;
          this.words[i3] = w3 & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a3 = this.clone();
        var b3 = num;
        var bhi = b3.words[b3.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b3 = b3.ushln(shift);
          a3.iushln(shift);
          bhi = b3.words[b3.length - 1] | 0;
        }
        var m3 = a3.length - b3.length;
        var q;
        if (mode !== "mod") {
          q = new BN3(null);
          q.length = m3 + 1;
          q.words = new Array(q.length);
          for (var i3 = 0; i3 < q.length; i3++) {
            q.words[i3] = 0;
          }
        }
        var diff = a3.clone()._ishlnsubmul(b3, 1, m3);
        if (diff.negative === 0) {
          a3 = diff;
          if (q) {
            q.words[m3] = 1;
          }
        }
        for (var j3 = m3 - 1; j3 >= 0; j3--) {
          var qj = (a3.words[b3.length + j3] | 0) * 67108864 + (a3.words[b3.length + j3 - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a3._ishlnsubmul(b3, qj, j3);
          while (a3.negative !== 0) {
            qj--;
            a3.negative = 0;
            a3._ishlnsubmul(b3, 1, j3);
            if (!a3.isZero()) {
              a3.negative ^= 1;
            }
          }
          if (q) {
            q.words[j3] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a3.strip();
        if (mode !== "div" && shift !== 0) {
          a3.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a3
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert4(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div2, mod2, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div2 = res.div.neg();
          }
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.iadd(num);
            }
          }
          return {
            div: div2,
            mod: mod2
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div2 = res.div.neg();
          }
          return {
            div: div2,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod2
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div2(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod2(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r22 = num.andln(1);
        var cmp = mod2.cmp(half);
        if (cmp < 0 || r22 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modn = function modn(num) {
        assert4(num <= 67108863);
        var p2 = (1 << 26) % num;
        var acc = 0;
        for (var i3 = this.length - 1; i3 >= 0; i3--) {
          acc = (p2 * acc + (this.words[i3] | 0)) % num;
        }
        return acc;
      };
      BN3.prototype.idivn = function idivn(num) {
        assert4(num <= 67108863);
        var carry = 0;
        for (var i3 = this.length - 1; i3 >= 0; i3--) {
          var w3 = (this.words[i3] | 0) + carry * 67108864;
          this.words[i3] = w3 / num | 0;
          carry = w3 % num;
        }
        return this.strip();
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p2) {
        assert4(p2.negative === 0);
        assert4(!p2.isZero());
        var x3 = this;
        var y3 = p2.clone();
        if (x3.negative !== 0) {
          x3 = x3.umod(p2);
        } else {
          x3 = x3.clone();
        }
        var A = new BN3(1);
        var B = new BN3(0);
        var C3 = new BN3(0);
        var D2 = new BN3(1);
        var g3 = 0;
        while (x3.isEven() && y3.isEven()) {
          x3.iushrn(1);
          y3.iushrn(1);
          ++g3;
        }
        var yp = y3.clone();
        var xp = x3.clone();
        while (!x3.isZero()) {
          for (var i3 = 0, im = 1; (x3.words[0] & im) === 0 && i3 < 26; ++i3, im <<= 1)
            ;
          if (i3 > 0) {
            x3.iushrn(i3);
            while (i3-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j3 = 0, jm = 1; (y3.words[0] & jm) === 0 && j3 < 26; ++j3, jm <<= 1)
            ;
          if (j3 > 0) {
            y3.iushrn(j3);
            while (j3-- > 0) {
              if (C3.isOdd() || D2.isOdd()) {
                C3.iadd(yp);
                D2.isub(xp);
              }
              C3.iushrn(1);
              D2.iushrn(1);
            }
          }
          if (x3.cmp(y3) >= 0) {
            x3.isub(y3);
            A.isub(C3);
            B.isub(D2);
          } else {
            y3.isub(x3);
            C3.isub(A);
            D2.isub(B);
          }
        }
        return {
          a: C3,
          b: D2,
          gcd: y3.iushln(g3)
        };
      };
      BN3.prototype._invmp = function _invmp(p2) {
        assert4(p2.negative === 0);
        assert4(!p2.isZero());
        var a3 = this;
        var b3 = p2.clone();
        if (a3.negative !== 0) {
          a3 = a3.umod(p2);
        } else {
          a3 = a3.clone();
        }
        var x1 = new BN3(1);
        var x22 = new BN3(0);
        var delta = b3.clone();
        while (a3.cmpn(1) > 0 && b3.cmpn(1) > 0) {
          for (var i3 = 0, im = 1; (a3.words[0] & im) === 0 && i3 < 26; ++i3, im <<= 1)
            ;
          if (i3 > 0) {
            a3.iushrn(i3);
            while (i3-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j3 = 0, jm = 1; (b3.words[0] & jm) === 0 && j3 < 26; ++j3, jm <<= 1)
            ;
          if (j3 > 0) {
            b3.iushrn(j3);
            while (j3-- > 0) {
              if (x22.isOdd()) {
                x22.iadd(delta);
              }
              x22.iushrn(1);
            }
          }
          if (a3.cmp(b3) >= 0) {
            a3.isub(b3);
            x1.isub(x22);
          } else {
            b3.isub(a3);
            x22.isub(x1);
          }
        }
        var res;
        if (a3.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x22;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p2);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a3 = this.clone();
        var b3 = num.clone();
        a3.negative = 0;
        b3.negative = 0;
        for (var shift = 0; a3.isEven() && b3.isEven(); shift++) {
          a3.iushrn(1);
          b3.iushrn(1);
        }
        do {
          while (a3.isEven()) {
            a3.iushrn(1);
          }
          while (b3.isEven()) {
            b3.iushrn(1);
          }
          var r3 = a3.cmp(b3);
          if (r3 < 0) {
            var t3 = a3;
            a3 = b3;
            b3 = t3;
          } else if (r3 === 0 || b3.cmpn(1) === 0) {
            break;
          }
          a3.isub(b3);
        } while (true);
        return b3.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd2() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert4(typeof bit === "number");
        var r3 = bit % 26;
        var s2 = (bit - r3) / 26;
        var q = 1 << r3;
        if (this.length <= s2) {
          this._expand(s2 + 1);
          this.words[s2] |= q;
          return this;
        }
        var carry = q;
        for (var i3 = s2; carry !== 0 && i3 < this.length; i3++) {
          var w3 = this.words[i3] | 0;
          w3 += carry;
          carry = w3 >>> 26;
          w3 &= 67108863;
          this.words[i3] = w3;
        }
        if (carry !== 0) {
          this.words[i3] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero2() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert4(num <= 67108863, "Number is too big");
          var w3 = this.words[0] | 0;
          res = w3 === num ? 0 : w3 < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i3 = this.length - 1; i3 >= 0; i3--) {
          var a3 = this.words[i3] | 0;
          var b3 = num.words[i3] | 0;
          if (a3 === b3)
            continue;
          if (a3 < b3) {
            res = -1;
          } else if (a3 > b3) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt2(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt2(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq5(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert4(!this.red, "Already a number in reduction context");
        assert4(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert4(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert4(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert4(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert4(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert4(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert4(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert4(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert4(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert4(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert4(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert4(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert4(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert4(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert4(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert4(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p2) {
        this.name = name2;
        this.p = new BN3(p2, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r3 = num;
        var rlen;
        do {
          this.split(r3, this.tmp);
          r3 = this.imulK(r3);
          r3 = r3.iadd(this.tmp);
          rlen = r3.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r3.ucmp(this.p);
        if (cmp === 0) {
          r3.words[0] = 0;
          r3.length = 1;
        } else if (cmp > 0) {
          r3.isub(this.p);
        } else {
          if (r3.strip !== void 0) {
            r3.strip();
          } else {
            r3._strip();
          }
        }
        return r3;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i3 = 0; i3 < outLen; i3++) {
          output.words[i3] = input.words[i3];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i3 = 10; i3 < input.length; i3++) {
          var next = input.words[i3] | 0;
          input.words[i3 - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i3 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i3 = 0; i3 < num.length; i3++) {
          var w3 = num.words[i3] | 0;
          lo += w3 * 977;
          num.words[i3] = lo & 67108863;
          lo = w3 * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i3 = 0; i3 < num.length; i3++) {
          var hi = (num.words[i3] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i3] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m3) {
        if (typeof m3 === "string") {
          var prime = BN3._prime(m3);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert4(m3.gtn(1), "modulus must be greater than 1");
          this.m = m3;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a3) {
        assert4(a3.negative === 0, "red works only with positives");
        assert4(a3.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a3, b3) {
        assert4((a3.negative | b3.negative) === 0, "red works only with positives");
        assert4(a3.red && a3.red === b3.red, "red works only with red numbers");
      };
      Red.prototype.imod = function imod(a3) {
        if (this.prime)
          return this.prime.ireduce(a3)._forceRed(this);
        return a3.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg4(a3) {
        if (a3.isZero()) {
          return a3.clone();
        }
        return this.m.sub(a3)._forceRed(this);
      };
      Red.prototype.add = function add4(a3, b3) {
        this._verify2(a3, b3);
        var res = a3.add(b3);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a3, b3) {
        this._verify2(a3, b3);
        var res = a3.iadd(b3);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub2(a3, b3) {
        this._verify2(a3, b3);
        var res = a3.sub(b3);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a3, b3) {
        this._verify2(a3, b3);
        var res = a3.isub(b3);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl2(a3, num) {
        this._verify1(a3);
        return this.imod(a3.ushln(num));
      };
      Red.prototype.imul = function imul(a3, b3) {
        this._verify2(a3, b3);
        return this.imod(a3.imul(b3));
      };
      Red.prototype.mul = function mul4(a3, b3) {
        this._verify2(a3, b3);
        return this.imod(a3.mul(b3));
      };
      Red.prototype.isqr = function isqr(a3) {
        return this.imul(a3, a3.clone());
      };
      Red.prototype.sqr = function sqr(a3) {
        return this.mul(a3, a3);
      };
      Red.prototype.sqrt = function sqrt(a3) {
        if (a3.isZero())
          return a3.clone();
        var mod3 = this.m.andln(3);
        assert4(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow2 = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a3, pow2);
        }
        var q = this.m.subn(1);
        var s2 = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s2++;
          q.iushrn(1);
        }
        assert4(!q.isZero());
        var one2 = new BN3(1).toRed(this);
        var nOne = one2.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z2 = this.m.bitLength();
        z2 = new BN3(2 * z2 * z2).toRed(this);
        while (this.pow(z2, lpow).cmp(nOne) !== 0) {
          z2.redIAdd(nOne);
        }
        var c5 = this.pow(z2, q);
        var r3 = this.pow(a3, q.addn(1).iushrn(1));
        var t3 = this.pow(a3, q);
        var m3 = s2;
        while (t3.cmp(one2) !== 0) {
          var tmp = t3;
          for (var i3 = 0; tmp.cmp(one2) !== 0; i3++) {
            tmp = tmp.redSqr();
          }
          assert4(i3 < m3);
          var b3 = this.pow(c5, new BN3(1).iushln(m3 - i3 - 1));
          r3 = r3.redMul(b3);
          c5 = b3.redSqr();
          t3 = t3.redMul(c5);
          m3 = i3;
        }
        return r3;
      };
      Red.prototype.invm = function invm(a3) {
        var inv = a3._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow2(a3, num) {
        if (num.isZero())
          return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a3.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a3;
        for (var i3 = 2; i3 < wnd.length; i3++) {
          wnd[i3] = this.mul(wnd[i3 - 1], a3);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i3 = num.length - 1; i3 >= 0; i3--) {
          var word = num.words[i3];
          for (var j3 = start - 1; j3 >= 0; j3--) {
            var bit = word >> j3 & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i3 !== 0 || j3 !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r3 = num.umod(this.m);
        return r3 === num ? r3.clone() : r3;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m3) {
        Red.call(this, m3);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r3 = this.imod(num.mul(this.rinv));
        r3.red = null;
        return r3;
      };
      Mont.prototype.imul = function imul(a3, b3) {
        if (a3.isZero() || b3.isZero()) {
          a3.words[0] = 0;
          a3.length = 1;
          return a3;
        }
        var t3 = a3.imul(b3);
        var c5 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u3 = t3.isub(c5).iushrn(this.shift);
        var res = u3;
        if (u3.cmp(this.m) >= 0) {
          res = u3.isub(this.m);
        } else if (u3.cmpn(0) < 0) {
          res = u3.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul4(a3, b3) {
        if (a3.isZero() || b3.isZero())
          return new BN3(0)._forceRed(this);
        var t3 = a3.mul(b3);
        var c5 = t3.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u3 = t3.isub(c5).iushrn(this.shift);
        var res = u3;
        if (u3.cmp(this.m) >= 0) {
          res = u3.isub(this.m);
        } else if (u3.cmpn(0) < 0) {
          res = u3.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a3) {
        var res = this.imod(a3._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/js-sha3/src/sha3.js
var require_sha3 = __commonJS({
  "node_modules/js-sha3/src/sha3.js"(exports, module) {
    (function() {
      "use strict";
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = global;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === "object" && module.exports;
      var AMD = typeof define === "function" && define.amd;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648
      ];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
      var CSHAKE_BYTEPAD = {
        "128": 168,
        "256": 136
      };
      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var createOutputMethod = function(bits3, padding2, outputType) {
        return function(message) {
          return new Keccak(bits3, padding2, bits3).update(message)[outputType]();
        };
      };
      var createShakeOutputMethod = function(bits3, padding2, outputType) {
        return function(message, outputBits) {
          return new Keccak(bits3, padding2, outputBits).update(message)[outputType]();
        };
      };
      var createCshakeOutputMethod = function(bits3, padding2, outputType) {
        return function(message, outputBits, n2, s2) {
          return methods["cshake" + bits3].update(message, outputBits, n2, s2)[outputType]();
        };
      };
      var createKmacOutputMethod = function(bits3, padding2, outputType) {
        return function(key2, message, outputBits, s2) {
          return methods["kmac" + bits3].update(key2, message, outputBits, s2)[outputType]();
        };
      };
      var createOutputMethods = function(method, createMethod2, bits3, padding2) {
        for (var i4 = 0; i4 < OUTPUT_TYPES.length; ++i4) {
          var type = OUTPUT_TYPES[i4];
          method[type] = createMethod2(bits3, padding2, type);
        }
        return method;
      };
      var createMethod = function(bits3, padding2) {
        var method = createOutputMethod(bits3, padding2, "hex");
        method.create = function() {
          return new Keccak(bits3, padding2, bits3);
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits3, padding2);
      };
      var createShakeMethod = function(bits3, padding2) {
        var method = createShakeOutputMethod(bits3, padding2, "hex");
        method.create = function(outputBits) {
          return new Keccak(bits3, padding2, outputBits);
        };
        method.update = function(message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits3, padding2);
      };
      var createCshakeMethod = function(bits3, padding2) {
        var w3 = CSHAKE_BYTEPAD[bits3];
        var method = createCshakeOutputMethod(bits3, padding2, "hex");
        method.create = function(outputBits, n2, s2) {
          if (!n2 && !s2) {
            return methods["shake" + bits3].create(outputBits);
          } else {
            return new Keccak(bits3, padding2, outputBits).bytepad([n2, s2], w3);
          }
        };
        method.update = function(message, outputBits, n2, s2) {
          return method.create(outputBits, n2, s2).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits3, padding2);
      };
      var createKmacMethod = function(bits3, padding2) {
        var w3 = CSHAKE_BYTEPAD[bits3];
        var method = createKmacOutputMethod(bits3, padding2, "hex");
        method.create = function(key2, outputBits, s2) {
          return new Kmac(bits3, padding2, outputBits).bytepad(["KMAC", s2], w3).bytepad([key2], w3);
        };
        method.update = function(key2, message, outputBits, s2) {
          return method.create(key2, outputBits, s2).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits3, padding2);
      };
      var algorithms = [
        { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
        { name: "sha3", padding: PADDING, bits: BITS, createMethod },
        { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];
      var methods = {}, methodNames = [];
      for (var i3 = 0; i3 < algorithms.length; ++i3) {
        var algorithm = algorithms[i3];
        var bits2 = algorithm.bits;
        for (var j3 = 0; j3 < bits2.length; ++j3) {
          var methodName = algorithm.name + "_" + bits2[j3];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits2[j3], algorithm.padding);
          if (algorithm.name !== "sha3") {
            var newMethodName = algorithm.name + bits2[j3];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }
      function Keccak(bits3, padding2, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding2;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits3 << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for (var i4 = 0; i4 < 50; ++i4) {
          this.s[i4] = 0;
        }
      }
      Keccak.prototype.update = function(message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== "string") {
          if (type === "object") {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s2 = this.s, i4, code;
        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i4 = 1; i4 < blockCount + 1; ++i4) {
              blocks[i4] = 0;
            }
          }
          if (notString) {
            for (i4 = this.start; index < length && i4 < byteCount; ++index) {
              blocks[i4 >> 2] |= message[index] << SHIFT[i4++ & 3];
            }
          } else {
            for (i4 = this.start; index < length && i4 < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 128) {
                blocks[i4 >> 2] |= code << SHIFT[i4++ & 3];
              } else if (code < 2048) {
                blocks[i4 >> 2] |= (192 | code >> 6) << SHIFT[i4++ & 3];
                blocks[i4 >> 2] |= (128 | code & 63) << SHIFT[i4++ & 3];
              } else if (code < 55296 || code >= 57344) {
                blocks[i4 >> 2] |= (224 | code >> 12) << SHIFT[i4++ & 3];
                blocks[i4 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i4++ & 3];
                blocks[i4 >> 2] |= (128 | code & 63) << SHIFT[i4++ & 3];
              } else {
                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks[i4 >> 2] |= (240 | code >> 18) << SHIFT[i4++ & 3];
                blocks[i4 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i4++ & 3];
                blocks[i4 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i4++ & 3];
                blocks[i4 >> 2] |= (128 | code & 63) << SHIFT[i4++ & 3];
              }
            }
          }
          this.lastByteIndex = i4;
          if (i4 >= byteCount) {
            this.start = i4 - byteCount;
            this.block = blocks[blockCount];
            for (i4 = 0; i4 < blockCount; ++i4) {
              s2[i4] ^= blocks[i4];
            }
            f3(s2);
            this.reset = true;
          } else {
            this.start = i4;
          }
        }
        return this;
      };
      Keccak.prototype.encode = function(x3, right) {
        var o3 = x3 & 255, n2 = 1;
        var bytes3 = [o3];
        x3 = x3 >> 8;
        o3 = x3 & 255;
        while (o3 > 0) {
          bytes3.unshift(o3);
          x3 = x3 >> 8;
          o3 = x3 & 255;
          ++n2;
        }
        if (right) {
          bytes3.push(n2);
        } else {
          bytes3.unshift(n2);
        }
        this.update(bytes3);
        return bytes3.length;
      };
      Keccak.prototype.encodeString = function(str) {
        var notString, type = typeof str;
        if (type !== "string") {
          if (type === "object") {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes3 = 0, length = str.length;
        if (notString) {
          bytes3 = length;
        } else {
          for (var i4 = 0; i4 < str.length; ++i4) {
            var code = str.charCodeAt(i4);
            if (code < 128) {
              bytes3 += 1;
            } else if (code < 2048) {
              bytes3 += 2;
            } else if (code < 55296 || code >= 57344) {
              bytes3 += 3;
            } else {
              code = 65536 + ((code & 1023) << 10 | str.charCodeAt(++i4) & 1023);
              bytes3 += 4;
            }
          }
        }
        bytes3 += this.encode(bytes3 * 8);
        this.update(str);
        return bytes3;
      };
      Keccak.prototype.bytepad = function(strs, w3) {
        var bytes3 = this.encode(w3);
        for (var i4 = 0; i4 < strs.length; ++i4) {
          bytes3 += this.encodeString(strs[i4]);
        }
        var paddingBytes = w3 - bytes3 % w3;
        var zeros2 = [];
        zeros2.length = paddingBytes;
        this.update(zeros2);
        return this;
      };
      Keccak.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i4 = this.lastByteIndex, blockCount = this.blockCount, s2 = this.s;
        blocks[i4 >> 2] |= this.padding[i4 & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i4 = 1; i4 < blockCount + 1; ++i4) {
            blocks[i4] = 0;
          }
        }
        blocks[blockCount - 1] |= 2147483648;
        for (i4 = 0; i4 < blockCount; ++i4) {
          s2[i4] ^= blocks[i4];
        }
        f3(s2);
      };
      Keccak.prototype.toString = Keccak.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i4 = 0, j4 = 0;
        var hex2 = "", block;
        while (j4 < outputBlocks) {
          for (i4 = 0; i4 < blockCount && j4 < outputBlocks; ++i4, ++j4) {
            block = s2[i4];
            hex2 += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
          }
          if (j4 % blockCount === 0) {
            f3(s2);
            i4 = 0;
          }
        }
        if (extraBytes) {
          block = s2[i4];
          hex2 += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
          if (extraBytes > 1) {
            hex2 += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
          }
          if (extraBytes > 2) {
            hex2 += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
          }
        }
        return hex2;
      };
      Keccak.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i4 = 0, j4 = 0;
        var bytes3 = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer(outputBlocks + 1 << 2);
        } else {
          buffer = new ArrayBuffer(bytes3);
        }
        var array = new Uint32Array(buffer);
        while (j4 < outputBlocks) {
          for (i4 = 0; i4 < blockCount && j4 < outputBlocks; ++i4, ++j4) {
            array[j4] = s2[i4];
          }
          if (j4 % blockCount === 0) {
            f3(s2);
          }
        }
        if (extraBytes) {
          array[i4] = s2[i4];
          buffer = buffer.slice(0, bytes3);
        }
        return buffer;
      };
      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
      Keccak.prototype.digest = Keccak.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i4 = 0, j4 = 0;
        var array = [], offset, block;
        while (j4 < outputBlocks) {
          for (i4 = 0; i4 < blockCount && j4 < outputBlocks; ++i4, ++j4) {
            offset = j4 << 2;
            block = s2[i4];
            array[offset] = block & 255;
            array[offset + 1] = block >> 8 & 255;
            array[offset + 2] = block >> 16 & 255;
            array[offset + 3] = block >> 24 & 255;
          }
          if (j4 % blockCount === 0) {
            f3(s2);
          }
        }
        if (extraBytes) {
          offset = j4 << 2;
          block = s2[i4];
          array[offset] = block & 255;
          if (extraBytes > 1) {
            array[offset + 1] = block >> 8 & 255;
          }
          if (extraBytes > 2) {
            array[offset + 2] = block >> 16 & 255;
          }
        }
        return array;
      };
      function Kmac(bits3, padding2, outputBits) {
        Keccak.call(this, bits3, padding2, outputBits);
      }
      Kmac.prototype = new Keccak();
      Kmac.prototype.finalize = function() {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };
      var f3 = function(s2) {
        var h3, l3, n2, c0, c1, c22, c32, c42, c5, c6, c7, c8, c9, b0, b1, b22, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b222, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n2 = 0; n2 < 48; n2 += 2) {
          c0 = s2[0] ^ s2[10] ^ s2[20] ^ s2[30] ^ s2[40];
          c1 = s2[1] ^ s2[11] ^ s2[21] ^ s2[31] ^ s2[41];
          c22 = s2[2] ^ s2[12] ^ s2[22] ^ s2[32] ^ s2[42];
          c32 = s2[3] ^ s2[13] ^ s2[23] ^ s2[33] ^ s2[43];
          c42 = s2[4] ^ s2[14] ^ s2[24] ^ s2[34] ^ s2[44];
          c5 = s2[5] ^ s2[15] ^ s2[25] ^ s2[35] ^ s2[45];
          c6 = s2[6] ^ s2[16] ^ s2[26] ^ s2[36] ^ s2[46];
          c7 = s2[7] ^ s2[17] ^ s2[27] ^ s2[37] ^ s2[47];
          c8 = s2[8] ^ s2[18] ^ s2[28] ^ s2[38] ^ s2[48];
          c9 = s2[9] ^ s2[19] ^ s2[29] ^ s2[39] ^ s2[49];
          h3 = c8 ^ (c22 << 1 | c32 >>> 31);
          l3 = c9 ^ (c32 << 1 | c22 >>> 31);
          s2[0] ^= h3;
          s2[1] ^= l3;
          s2[10] ^= h3;
          s2[11] ^= l3;
          s2[20] ^= h3;
          s2[21] ^= l3;
          s2[30] ^= h3;
          s2[31] ^= l3;
          s2[40] ^= h3;
          s2[41] ^= l3;
          h3 = c0 ^ (c42 << 1 | c5 >>> 31);
          l3 = c1 ^ (c5 << 1 | c42 >>> 31);
          s2[2] ^= h3;
          s2[3] ^= l3;
          s2[12] ^= h3;
          s2[13] ^= l3;
          s2[22] ^= h3;
          s2[23] ^= l3;
          s2[32] ^= h3;
          s2[33] ^= l3;
          s2[42] ^= h3;
          s2[43] ^= l3;
          h3 = c22 ^ (c6 << 1 | c7 >>> 31);
          l3 = c32 ^ (c7 << 1 | c6 >>> 31);
          s2[4] ^= h3;
          s2[5] ^= l3;
          s2[14] ^= h3;
          s2[15] ^= l3;
          s2[24] ^= h3;
          s2[25] ^= l3;
          s2[34] ^= h3;
          s2[35] ^= l3;
          s2[44] ^= h3;
          s2[45] ^= l3;
          h3 = c42 ^ (c8 << 1 | c9 >>> 31);
          l3 = c5 ^ (c9 << 1 | c8 >>> 31);
          s2[6] ^= h3;
          s2[7] ^= l3;
          s2[16] ^= h3;
          s2[17] ^= l3;
          s2[26] ^= h3;
          s2[27] ^= l3;
          s2[36] ^= h3;
          s2[37] ^= l3;
          s2[46] ^= h3;
          s2[47] ^= l3;
          h3 = c6 ^ (c0 << 1 | c1 >>> 31);
          l3 = c7 ^ (c1 << 1 | c0 >>> 31);
          s2[8] ^= h3;
          s2[9] ^= l3;
          s2[18] ^= h3;
          s2[19] ^= l3;
          s2[28] ^= h3;
          s2[29] ^= l3;
          s2[38] ^= h3;
          s2[39] ^= l3;
          s2[48] ^= h3;
          s2[49] ^= l3;
          b0 = s2[0];
          b1 = s2[1];
          b32 = s2[11] << 4 | s2[10] >>> 28;
          b33 = s2[10] << 4 | s2[11] >>> 28;
          b14 = s2[20] << 3 | s2[21] >>> 29;
          b15 = s2[21] << 3 | s2[20] >>> 29;
          b46 = s2[31] << 9 | s2[30] >>> 23;
          b47 = s2[30] << 9 | s2[31] >>> 23;
          b28 = s2[40] << 18 | s2[41] >>> 14;
          b29 = s2[41] << 18 | s2[40] >>> 14;
          b20 = s2[2] << 1 | s2[3] >>> 31;
          b21 = s2[3] << 1 | s2[2] >>> 31;
          b22 = s2[13] << 12 | s2[12] >>> 20;
          b3 = s2[12] << 12 | s2[13] >>> 20;
          b34 = s2[22] << 10 | s2[23] >>> 22;
          b35 = s2[23] << 10 | s2[22] >>> 22;
          b16 = s2[33] << 13 | s2[32] >>> 19;
          b17 = s2[32] << 13 | s2[33] >>> 19;
          b48 = s2[42] << 2 | s2[43] >>> 30;
          b49 = s2[43] << 2 | s2[42] >>> 30;
          b40 = s2[5] << 30 | s2[4] >>> 2;
          b41 = s2[4] << 30 | s2[5] >>> 2;
          b222 = s2[14] << 6 | s2[15] >>> 26;
          b23 = s2[15] << 6 | s2[14] >>> 26;
          b4 = s2[25] << 11 | s2[24] >>> 21;
          b5 = s2[24] << 11 | s2[25] >>> 21;
          b36 = s2[34] << 15 | s2[35] >>> 17;
          b37 = s2[35] << 15 | s2[34] >>> 17;
          b18 = s2[45] << 29 | s2[44] >>> 3;
          b19 = s2[44] << 29 | s2[45] >>> 3;
          b10 = s2[6] << 28 | s2[7] >>> 4;
          b11 = s2[7] << 28 | s2[6] >>> 4;
          b42 = s2[17] << 23 | s2[16] >>> 9;
          b43 = s2[16] << 23 | s2[17] >>> 9;
          b24 = s2[26] << 25 | s2[27] >>> 7;
          b25 = s2[27] << 25 | s2[26] >>> 7;
          b6 = s2[36] << 21 | s2[37] >>> 11;
          b7 = s2[37] << 21 | s2[36] >>> 11;
          b38 = s2[47] << 24 | s2[46] >>> 8;
          b39 = s2[46] << 24 | s2[47] >>> 8;
          b30 = s2[8] << 27 | s2[9] >>> 5;
          b31 = s2[9] << 27 | s2[8] >>> 5;
          b12 = s2[18] << 20 | s2[19] >>> 12;
          b13 = s2[19] << 20 | s2[18] >>> 12;
          b44 = s2[29] << 7 | s2[28] >>> 25;
          b45 = s2[28] << 7 | s2[29] >>> 25;
          b26 = s2[38] << 8 | s2[39] >>> 24;
          b27 = s2[39] << 8 | s2[38] >>> 24;
          b8 = s2[48] << 14 | s2[49] >>> 18;
          b9 = s2[49] << 14 | s2[48] >>> 18;
          s2[0] = b0 ^ ~b22 & b4;
          s2[1] = b1 ^ ~b3 & b5;
          s2[10] = b10 ^ ~b12 & b14;
          s2[11] = b11 ^ ~b13 & b15;
          s2[20] = b20 ^ ~b222 & b24;
          s2[21] = b21 ^ ~b23 & b25;
          s2[30] = b30 ^ ~b32 & b34;
          s2[31] = b31 ^ ~b33 & b35;
          s2[40] = b40 ^ ~b42 & b44;
          s2[41] = b41 ^ ~b43 & b45;
          s2[2] = b22 ^ ~b4 & b6;
          s2[3] = b3 ^ ~b5 & b7;
          s2[12] = b12 ^ ~b14 & b16;
          s2[13] = b13 ^ ~b15 & b17;
          s2[22] = b222 ^ ~b24 & b26;
          s2[23] = b23 ^ ~b25 & b27;
          s2[32] = b32 ^ ~b34 & b36;
          s2[33] = b33 ^ ~b35 & b37;
          s2[42] = b42 ^ ~b44 & b46;
          s2[43] = b43 ^ ~b45 & b47;
          s2[4] = b4 ^ ~b6 & b8;
          s2[5] = b5 ^ ~b7 & b9;
          s2[14] = b14 ^ ~b16 & b18;
          s2[15] = b15 ^ ~b17 & b19;
          s2[24] = b24 ^ ~b26 & b28;
          s2[25] = b25 ^ ~b27 & b29;
          s2[34] = b34 ^ ~b36 & b38;
          s2[35] = b35 ^ ~b37 & b39;
          s2[44] = b44 ^ ~b46 & b48;
          s2[45] = b45 ^ ~b47 & b49;
          s2[6] = b6 ^ ~b8 & b0;
          s2[7] = b7 ^ ~b9 & b1;
          s2[16] = b16 ^ ~b18 & b10;
          s2[17] = b17 ^ ~b19 & b11;
          s2[26] = b26 ^ ~b28 & b20;
          s2[27] = b27 ^ ~b29 & b21;
          s2[36] = b36 ^ ~b38 & b30;
          s2[37] = b37 ^ ~b39 & b31;
          s2[46] = b46 ^ ~b48 & b40;
          s2[47] = b47 ^ ~b49 & b41;
          s2[8] = b8 ^ ~b0 & b22;
          s2[9] = b9 ^ ~b1 & b3;
          s2[18] = b18 ^ ~b10 & b12;
          s2[19] = b19 ^ ~b11 & b13;
          s2[28] = b28 ^ ~b20 & b222;
          s2[29] = b29 ^ ~b21 & b23;
          s2[38] = b38 ^ ~b30 & b32;
          s2[39] = b39 ^ ~b31 & b33;
          s2[48] = b48 ^ ~b40 & b42;
          s2[49] = b49 ^ ~b41 & b43;
          s2[0] ^= RC[n2];
          s2[1] ^= RC[n2 + 1];
        }
      };
      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i3 = 0; i3 < methodNames.length; ++i3) {
          root[methodNames[i3]] = methods[methodNames[i3]];
        }
        if (AMD) {
          define(function() {
            return methods;
          });
        }
      }
    })();
  }
});

// node_modules/minimalistic-assert/index.js
var require_minimalistic_assert = __commonJS({
  "node_modules/minimalistic-assert/index.js"(exports, module) {
    module.exports = assert4;
    function assert4(val2, msg) {
      if (!val2)
        throw new Error(msg || "Assertion failed");
    }
    assert4.equal = function assertEqual2(l3, r3, msg) {
      if (l3 != r3)
        throw new Error(msg || "Assertion failed: " + l3 + " != " + r3);
    };
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports, module) {
    if (typeof Object.create === "function") {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/hash.js/lib/hash/utils.js
var require_utils = __commonJS({
  "node_modules/hash.js/lib/hash/utils.js"(exports) {
    "use strict";
    var assert4 = require_minimalistic_assert();
    var inherits = require_inherits_browser();
    exports.inherits = inherits;
    function isSurrogatePair(msg, i3) {
      if ((msg.charCodeAt(i3) & 64512) !== 55296) {
        return false;
      }
      if (i3 < 0 || i3 + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i3 + 1) & 64512) === 56320;
    }
    function toArray2(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === "string") {
        if (!enc) {
          var p2 = 0;
          for (var i3 = 0; i3 < msg.length; i3++) {
            var c5 = msg.charCodeAt(i3);
            if (c5 < 128) {
              res[p2++] = c5;
            } else if (c5 < 2048) {
              res[p2++] = c5 >> 6 | 192;
              res[p2++] = c5 & 63 | 128;
            } else if (isSurrogatePair(msg, i3)) {
              c5 = 65536 + ((c5 & 1023) << 10) + (msg.charCodeAt(++i3) & 1023);
              res[p2++] = c5 >> 18 | 240;
              res[p2++] = c5 >> 12 & 63 | 128;
              res[p2++] = c5 >> 6 & 63 | 128;
              res[p2++] = c5 & 63 | 128;
            } else {
              res[p2++] = c5 >> 12 | 224;
              res[p2++] = c5 >> 6 & 63 | 128;
              res[p2++] = c5 & 63 | 128;
            }
          }
        } else if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0)
            msg = "0" + msg;
          for (i3 = 0; i3 < msg.length; i3 += 2)
            res.push(parseInt(msg[i3] + msg[i3 + 1], 16));
        }
      } else {
        for (i3 = 0; i3 < msg.length; i3++)
          res[i3] = msg[i3] | 0;
      }
      return res;
    }
    exports.toArray = toArray2;
    function toHex2(msg) {
      var res = "";
      for (var i3 = 0; i3 < msg.length; i3++)
        res += zero2(msg[i3].toString(16));
      return res;
    }
    exports.toHex = toHex2;
    function htonl(w3) {
      var res = w3 >>> 24 | w3 >>> 8 & 65280 | w3 << 8 & 16711680 | (w3 & 255) << 24;
      return res >>> 0;
    }
    exports.htonl = htonl;
    function toHex32(msg, endian) {
      var res = "";
      for (var i3 = 0; i3 < msg.length; i3++) {
        var w3 = msg[i3];
        if (endian === "little")
          w3 = htonl(w3);
        res += zero8(w3.toString(16));
      }
      return res;
    }
    exports.toHex32 = toHex32;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    exports.zero2 = zero2;
    function zero8(word) {
      if (word.length === 7)
        return "0" + word;
      else if (word.length === 6)
        return "00" + word;
      else if (word.length === 5)
        return "000" + word;
      else if (word.length === 4)
        return "0000" + word;
      else if (word.length === 3)
        return "00000" + word;
      else if (word.length === 2)
        return "000000" + word;
      else if (word.length === 1)
        return "0000000" + word;
      else
        return word;
    }
    exports.zero8 = zero8;
    function join32(msg, start, end, endian) {
      var len = end - start;
      assert4(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i3 = 0, k3 = start; i3 < res.length; i3++, k3 += 4) {
        var w3;
        if (endian === "big")
          w3 = msg[k3] << 24 | msg[k3 + 1] << 16 | msg[k3 + 2] << 8 | msg[k3 + 3];
        else
          w3 = msg[k3 + 3] << 24 | msg[k3 + 2] << 16 | msg[k3 + 1] << 8 | msg[k3];
        res[i3] = w3 >>> 0;
      }
      return res;
    }
    exports.join32 = join32;
    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i3 = 0, k3 = 0; i3 < msg.length; i3++, k3 += 4) {
        var m3 = msg[i3];
        if (endian === "big") {
          res[k3] = m3 >>> 24;
          res[k3 + 1] = m3 >>> 16 & 255;
          res[k3 + 2] = m3 >>> 8 & 255;
          res[k3 + 3] = m3 & 255;
        } else {
          res[k3 + 3] = m3 >>> 24;
          res[k3 + 2] = m3 >>> 16 & 255;
          res[k3 + 1] = m3 >>> 8 & 255;
          res[k3] = m3 & 255;
        }
      }
      return res;
    }
    exports.split32 = split32;
    function rotr32(w3, b3) {
      return w3 >>> b3 | w3 << 32 - b3;
    }
    exports.rotr32 = rotr32;
    function rotl32(w3, b3) {
      return w3 << b3 | w3 >>> 32 - b3;
    }
    exports.rotl32 = rotl32;
    function sum32(a3, b3) {
      return a3 + b3 >>> 0;
    }
    exports.sum32 = sum32;
    function sum32_3(a3, b3, c5) {
      return a3 + b3 + c5 >>> 0;
    }
    exports.sum32_3 = sum32_3;
    function sum32_4(a3, b3, c5, d2) {
      return a3 + b3 + c5 + d2 >>> 0;
    }
    exports.sum32_4 = sum32_4;
    function sum32_5(a3, b3, c5, d2, e4) {
      return a3 + b3 + c5 + d2 + e4 >>> 0;
    }
    exports.sum32_5 = sum32_5;
    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    exports.sum64 = sum64;
    function sum64_hi(ah, al, bh, bl) {
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    exports.sum64_hi = sum64_hi;
    function sum64_lo(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    exports.sum64_lo = sum64_lo;
    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    exports.sum64_4_hi = sum64_4_hi;
    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    exports.sum64_4_lo = sum64_4_lo;
    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = lo + el >>> 0;
      carry += lo < el ? 1 : 0;
      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    exports.sum64_5_hi = sum64_5_hi;
    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;
      return lo >>> 0;
    }
    exports.sum64_5_lo = sum64_5_lo;
    function rotr64_hi(ah, al, num) {
      var r3 = al << 32 - num | ah >>> num;
      return r3 >>> 0;
    }
    exports.rotr64_hi = rotr64_hi;
    function rotr64_lo(ah, al, num) {
      var r3 = ah << 32 - num | al >>> num;
      return r3 >>> 0;
    }
    exports.rotr64_lo = rotr64_lo;
    function shr64_hi(ah, al, num) {
      return ah >>> num;
    }
    exports.shr64_hi = shr64_hi;
    function shr64_lo(ah, al, num) {
      var r3 = ah << 32 - num | al >>> num;
      return r3 >>> 0;
    }
    exports.shr64_lo = shr64_lo;
  }
});

// node_modules/hash.js/lib/hash/common.js
var require_common = __commonJS({
  "node_modules/hash.js/lib/hash/common.js"(exports) {
    "use strict";
    var utils5 = require_utils();
    var assert4 = require_minimalistic_assert();
    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = "big";
      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    exports.BlockHash = BlockHash;
    BlockHash.prototype.update = function update2(msg, enc) {
      msg = utils5.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;
      if (this.pending.length >= this._delta8) {
        msg = this.pending;
        var r3 = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r3, msg.length);
        if (this.pending.length === 0)
          this.pending = null;
        msg = utils5.join32(msg, 0, msg.length - r3, this.endian);
        for (var i3 = 0; i3 < msg.length; i3 += this._delta32)
          this._update(msg, i3, i3 + this._delta32);
      }
      return this;
    };
    BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert4(this.pending === null);
      return this._digest(enc);
    };
    BlockHash.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes3 = this._delta8;
      var k3 = bytes3 - (len + this.padLength) % bytes3;
      var res = new Array(k3 + this.padLength);
      res[0] = 128;
      for (var i3 = 1; i3 < k3; i3++)
        res[i3] = 0;
      len <<= 3;
      if (this.endian === "big") {
        for (var t3 = 8; t3 < this.padLength; t3++)
          res[i3++] = 0;
        res[i3++] = 0;
        res[i3++] = 0;
        res[i3++] = 0;
        res[i3++] = 0;
        res[i3++] = len >>> 24 & 255;
        res[i3++] = len >>> 16 & 255;
        res[i3++] = len >>> 8 & 255;
        res[i3++] = len & 255;
      } else {
        res[i3++] = len & 255;
        res[i3++] = len >>> 8 & 255;
        res[i3++] = len >>> 16 & 255;
        res[i3++] = len >>> 24 & 255;
        res[i3++] = 0;
        res[i3++] = 0;
        res[i3++] = 0;
        res[i3++] = 0;
        for (t3 = 8; t3 < this.padLength; t3++)
          res[i3++] = 0;
      }
      return res;
    };
  }
});

// node_modules/hash.js/lib/hash/sha/common.js
var require_common2 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/common.js"(exports) {
    "use strict";
    var utils5 = require_utils();
    var rotr32 = utils5.rotr32;
    function ft_1(s2, x3, y3, z2) {
      if (s2 === 0)
        return ch32(x3, y3, z2);
      if (s2 === 1 || s2 === 3)
        return p32(x3, y3, z2);
      if (s2 === 2)
        return maj32(x3, y3, z2);
    }
    exports.ft_1 = ft_1;
    function ch32(x3, y3, z2) {
      return x3 & y3 ^ ~x3 & z2;
    }
    exports.ch32 = ch32;
    function maj32(x3, y3, z2) {
      return x3 & y3 ^ x3 & z2 ^ y3 & z2;
    }
    exports.maj32 = maj32;
    function p32(x3, y3, z2) {
      return x3 ^ y3 ^ z2;
    }
    exports.p32 = p32;
    function s0_256(x3) {
      return rotr32(x3, 2) ^ rotr32(x3, 13) ^ rotr32(x3, 22);
    }
    exports.s0_256 = s0_256;
    function s1_256(x3) {
      return rotr32(x3, 6) ^ rotr32(x3, 11) ^ rotr32(x3, 25);
    }
    exports.s1_256 = s1_256;
    function g0_256(x3) {
      return rotr32(x3, 7) ^ rotr32(x3, 18) ^ x3 >>> 3;
    }
    exports.g0_256 = g0_256;
    function g1_256(x3) {
      return rotr32(x3, 17) ^ rotr32(x3, 19) ^ x3 >>> 10;
    }
    exports.g1_256 = g1_256;
  }
});

// node_modules/hash.js/lib/hash/sha/1.js
var require__ = __commonJS({
  "node_modules/hash.js/lib/hash/sha/1.js"(exports, module) {
    "use strict";
    var utils5 = require_utils();
    var common = require_common();
    var shaCommon = require_common2();
    var rotl32 = utils5.rotl32;
    var sum32 = utils5.sum32;
    var sum32_5 = utils5.sum32_5;
    var ft_1 = shaCommon.ft_1;
    var BlockHash = common.BlockHash;
    var sha1_K = [
      1518500249,
      1859775393,
      2400959708,
      3395469782
    ];
    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();
      BlockHash.call(this);
      this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
      ];
      this.W = new Array(80);
    }
    utils5.inherits(SHA1, BlockHash);
    module.exports = SHA1;
    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;
    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i3 = 0; i3 < 16; i3++)
        W[i3] = msg[start + i3];
      for (; i3 < W.length; i3++)
        W[i3] = rotl32(W[i3 - 3] ^ W[i3 - 8] ^ W[i3 - 14] ^ W[i3 - 16], 1);
      var a3 = this.h[0];
      var b3 = this.h[1];
      var c5 = this.h[2];
      var d2 = this.h[3];
      var e4 = this.h[4];
      for (i3 = 0; i3 < W.length; i3++) {
        var s2 = ~~(i3 / 20);
        var t3 = sum32_5(rotl32(a3, 5), ft_1(s2, b3, c5, d2), e4, W[i3], sha1_K[s2]);
        e4 = d2;
        d2 = c5;
        c5 = rotl32(b3, 30);
        b3 = a3;
        a3 = t3;
      }
      this.h[0] = sum32(this.h[0], a3);
      this.h[1] = sum32(this.h[1], b3);
      this.h[2] = sum32(this.h[2], c5);
      this.h[3] = sum32(this.h[3], d2);
      this.h[4] = sum32(this.h[4], e4);
    };
    SHA1.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils5.toHex32(this.h, "big");
      else
        return utils5.split32(this.h, "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/256.js
var require__2 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/256.js"(exports, module) {
    "use strict";
    var utils5 = require_utils();
    var common = require_common();
    var shaCommon = require_common2();
    var assert4 = require_minimalistic_assert();
    var sum32 = utils5.sum32;
    var sum32_4 = utils5.sum32_4;
    var sum32_5 = utils5.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;
    var BlockHash = common.BlockHash;
    var sha256_K = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ];
    function SHA256() {
      if (!(this instanceof SHA256))
        return new SHA256();
      BlockHash.call(this);
      this.h = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils5.inherits(SHA256, BlockHash);
    module.exports = SHA256;
    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;
    SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i3 = 0; i3 < 16; i3++)
        W[i3] = msg[start + i3];
      for (; i3 < W.length; i3++)
        W[i3] = sum32_4(g1_256(W[i3 - 2]), W[i3 - 7], g0_256(W[i3 - 15]), W[i3 - 16]);
      var a3 = this.h[0];
      var b3 = this.h[1];
      var c5 = this.h[2];
      var d2 = this.h[3];
      var e4 = this.h[4];
      var f3 = this.h[5];
      var g3 = this.h[6];
      var h3 = this.h[7];
      assert4(this.k.length === W.length);
      for (i3 = 0; i3 < W.length; i3++) {
        var T1 = sum32_5(h3, s1_256(e4), ch32(e4, f3, g3), this.k[i3], W[i3]);
        var T2 = sum32(s0_256(a3), maj32(a3, b3, c5));
        h3 = g3;
        g3 = f3;
        f3 = e4;
        e4 = sum32(d2, T1);
        d2 = c5;
        c5 = b3;
        b3 = a3;
        a3 = sum32(T1, T2);
      }
      this.h[0] = sum32(this.h[0], a3);
      this.h[1] = sum32(this.h[1], b3);
      this.h[2] = sum32(this.h[2], c5);
      this.h[3] = sum32(this.h[3], d2);
      this.h[4] = sum32(this.h[4], e4);
      this.h[5] = sum32(this.h[5], f3);
      this.h[6] = sum32(this.h[6], g3);
      this.h[7] = sum32(this.h[7], h3);
    };
    SHA256.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils5.toHex32(this.h, "big");
      else
        return utils5.split32(this.h, "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/224.js
var require__3 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/224.js"(exports, module) {
    "use strict";
    var utils5 = require_utils();
    var SHA256 = require__2();
    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();
      SHA256.call(this);
      this.h = [
        3238371032,
        914150663,
        812702999,
        4144912697,
        4290775857,
        1750603025,
        1694076839,
        3204075428
      ];
    }
    utils5.inherits(SHA224, SHA256);
    module.exports = SHA224;
    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;
    SHA224.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils5.toHex32(this.h.slice(0, 7), "big");
      else
        return utils5.split32(this.h.slice(0, 7), "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/512.js
var require__4 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/512.js"(exports, module) {
    "use strict";
    var utils5 = require_utils();
    var common = require_common();
    var assert4 = require_minimalistic_assert();
    var rotr64_hi = utils5.rotr64_hi;
    var rotr64_lo = utils5.rotr64_lo;
    var shr64_hi = utils5.shr64_hi;
    var shr64_lo = utils5.shr64_lo;
    var sum64 = utils5.sum64;
    var sum64_hi = utils5.sum64_hi;
    var sum64_lo = utils5.sum64_lo;
    var sum64_4_hi = utils5.sum64_4_hi;
    var sum64_4_lo = utils5.sum64_4_lo;
    var sum64_5_hi = utils5.sum64_5_hi;
    var sum64_5_lo = utils5.sum64_5_lo;
    var BlockHash = common.BlockHash;
    var sha512_K = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    function SHA512() {
      if (!(this instanceof SHA512))
        return new SHA512();
      BlockHash.call(this);
      this.h = [
        1779033703,
        4089235720,
        3144134277,
        2227873595,
        1013904242,
        4271175723,
        2773480762,
        1595750129,
        1359893119,
        2917565137,
        2600822924,
        725511199,
        528734635,
        4215389547,
        1541459225,
        327033209
      ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils5.inherits(SHA512, BlockHash);
    module.exports = SHA512;
    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;
    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;
      for (var i3 = 0; i3 < 32; i3++)
        W[i3] = msg[start + i3];
      for (; i3 < W.length; i3 += 2) {
        var c0_hi = g1_512_hi(W[i3 - 4], W[i3 - 3]);
        var c0_lo = g1_512_lo(W[i3 - 4], W[i3 - 3]);
        var c1_hi = W[i3 - 14];
        var c1_lo = W[i3 - 13];
        var c2_hi = g0_512_hi(W[i3 - 30], W[i3 - 29]);
        var c2_lo = g0_512_lo(W[i3 - 30], W[i3 - 29]);
        var c3_hi = W[i3 - 32];
        var c3_lo = W[i3 - 31];
        W[i3] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i3 + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
      }
    };
    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);
      var W = this.W;
      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];
      assert4(this.k.length === W.length);
      for (var i3 = 0; i3 < W.length; i3 += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i3];
        var c3_lo = this.k[i3 + 1];
        var c4_hi = W[i3];
        var c4_lo = W[i3 + 1];
        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }
      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };
    SHA512.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils5.toHex32(this.h, "big");
      else
        return utils5.split32(this.h, "big");
    };
    function ch64_hi(xh, xl, yh, yl, zh) {
      var r3 = xh & yh ^ ~xh & zh;
      if (r3 < 0)
        r3 += 4294967296;
      return r3;
    }
    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r3 = xl & yl ^ ~xl & zl;
      if (r3 < 0)
        r3 += 4294967296;
      return r3;
    }
    function maj64_hi(xh, xl, yh, yl, zh) {
      var r3 = xh & yh ^ xh & zh ^ yh & zh;
      if (r3 < 0)
        r3 += 4294967296;
      return r3;
    }
    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r3 = xl & yl ^ xl & zl ^ yl & zl;
      if (r3 < 0)
        r3 += 4294967296;
      return r3;
    }
    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);
      var c2_hi = rotr64_hi(xl, xh, 7);
      var r3 = c0_hi ^ c1_hi ^ c2_hi;
      if (r3 < 0)
        r3 += 4294967296;
      return r3;
    }
    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);
      var c2_lo = rotr64_lo(xl, xh, 7);
      var r3 = c0_lo ^ c1_lo ^ c2_lo;
      if (r3 < 0)
        r3 += 4294967296;
      return r3;
    }
    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);
      var r3 = c0_hi ^ c1_hi ^ c2_hi;
      if (r3 < 0)
        r3 += 4294967296;
      return r3;
    }
    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);
      var r3 = c0_lo ^ c1_lo ^ c2_lo;
      if (r3 < 0)
        r3 += 4294967296;
      return r3;
    }
    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);
      var r3 = c0_hi ^ c1_hi ^ c2_hi;
      if (r3 < 0)
        r3 += 4294967296;
      return r3;
    }
    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);
      var r3 = c0_lo ^ c1_lo ^ c2_lo;
      if (r3 < 0)
        r3 += 4294967296;
      return r3;
    }
    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);
      var c2_hi = shr64_hi(xh, xl, 6);
      var r3 = c0_hi ^ c1_hi ^ c2_hi;
      if (r3 < 0)
        r3 += 4294967296;
      return r3;
    }
    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);
      var c2_lo = shr64_lo(xh, xl, 6);
      var r3 = c0_lo ^ c1_lo ^ c2_lo;
      if (r3 < 0)
        r3 += 4294967296;
      return r3;
    }
  }
});

// node_modules/hash.js/lib/hash/sha/384.js
var require__5 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/384.js"(exports, module) {
    "use strict";
    var utils5 = require_utils();
    var SHA512 = require__4();
    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();
      SHA512.call(this);
      this.h = [
        3418070365,
        3238371032,
        1654270250,
        914150663,
        2438529370,
        812702999,
        355462360,
        4144912697,
        1731405415,
        4290775857,
        2394180231,
        1750603025,
        3675008525,
        1694076839,
        1203062813,
        3204075428
      ];
    }
    utils5.inherits(SHA384, SHA512);
    module.exports = SHA384;
    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;
    SHA384.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils5.toHex32(this.h.slice(0, 12), "big");
      else
        return utils5.split32(this.h.slice(0, 12), "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha.js
var require_sha = __commonJS({
  "node_modules/hash.js/lib/hash/sha.js"(exports) {
    "use strict";
    exports.sha1 = require__();
    exports.sha224 = require__3();
    exports.sha256 = require__2();
    exports.sha384 = require__5();
    exports.sha512 = require__4();
  }
});

// node_modules/hash.js/lib/hash/ripemd.js
var require_ripemd = __commonJS({
  "node_modules/hash.js/lib/hash/ripemd.js"(exports) {
    "use strict";
    var utils5 = require_utils();
    var common = require_common();
    var rotl32 = utils5.rotl32;
    var sum32 = utils5.sum32;
    var sum32_3 = utils5.sum32_3;
    var sum32_4 = utils5.sum32_4;
    var BlockHash = common.BlockHash;
    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();
      BlockHash.call(this);
      this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      this.endian = "little";
    }
    utils5.inherits(RIPEMD160, BlockHash);
    exports.ripemd160 = RIPEMD160;
    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;
    RIPEMD160.prototype._update = function update2(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C3 = this.h[2];
      var D2 = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C3;
      var Dh = D2;
      var Eh = E;
      for (var j3 = 0; j3 < 80; j3++) {
        var T2 = sum32(rotl32(sum32_4(A, f3(j3, B, C3, D2), msg[r3[j3] + start], K(j3)), s2[j3]), E);
        A = E;
        E = D2;
        D2 = rotl32(C3, 10);
        C3 = B;
        B = T2;
        T2 = sum32(rotl32(sum32_4(Ah, f3(79 - j3, Bh, Ch, Dh), msg[rh[j3] + start], Kh(j3)), sh[j3]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T2;
      }
      T2 = sum32_3(this.h[1], C3, Dh);
      this.h[1] = sum32_3(this.h[2], D2, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T2;
    };
    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils5.toHex32(this.h, "little");
      else
        return utils5.split32(this.h, "little");
    };
    function f3(j3, x3, y3, z2) {
      if (j3 <= 15)
        return x3 ^ y3 ^ z2;
      else if (j3 <= 31)
        return x3 & y3 | ~x3 & z2;
      else if (j3 <= 47)
        return (x3 | ~y3) ^ z2;
      else if (j3 <= 63)
        return x3 & z2 | y3 & ~z2;
      else
        return x3 ^ (y3 | ~z2);
    }
    function K(j3) {
      if (j3 <= 15)
        return 0;
      else if (j3 <= 31)
        return 1518500249;
      else if (j3 <= 47)
        return 1859775393;
      else if (j3 <= 63)
        return 2400959708;
      else
        return 2840853838;
    }
    function Kh(j3) {
      if (j3 <= 15)
        return 1352829926;
      else if (j3 <= 31)
        return 1548603684;
      else if (j3 <= 47)
        return 1836072691;
      else if (j3 <= 63)
        return 2053994217;
      else
        return 0;
    }
    var r3 = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var rh = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var s2 = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sh = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
  }
});

// node_modules/hash.js/lib/hash/hmac.js
var require_hmac = __commonJS({
  "node_modules/hash.js/lib/hash/hmac.js"(exports, module) {
    "use strict";
    var utils5 = require_utils();
    var assert4 = require_minimalistic_assert();
    function Hmac(hash3, key2, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash3, key2, enc);
      this.Hash = hash3;
      this.blockSize = hash3.blockSize / 8;
      this.outSize = hash3.outSize / 8;
      this.inner = null;
      this.outer = null;
      this._init(utils5.toArray(key2, enc));
    }
    module.exports = Hmac;
    Hmac.prototype._init = function init2(key2) {
      if (key2.length > this.blockSize)
        key2 = new this.Hash().update(key2).digest();
      assert4(key2.length <= this.blockSize);
      for (var i3 = key2.length; i3 < this.blockSize; i3++)
        key2.push(0);
      for (i3 = 0; i3 < key2.length; i3++)
        key2[i3] ^= 54;
      this.inner = new this.Hash().update(key2);
      for (i3 = 0; i3 < key2.length; i3++)
        key2[i3] ^= 106;
      this.outer = new this.Hash().update(key2);
    };
    Hmac.prototype.update = function update2(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };
    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };
  }
});

// node_modules/hash.js/lib/hash.js
var require_hash = __commonJS({
  "node_modules/hash.js/lib/hash.js"(exports) {
    var hash3 = exports;
    hash3.utils = require_utils();
    hash3.common = require_common();
    hash3.sha = require_sha();
    hash3.ripemd = require_ripemd();
    hash3.hmac = require_hmac();
    hash3.sha1 = hash3.sha.sha1;
    hash3.sha256 = hash3.sha.sha256;
    hash3.sha224 = hash3.sha.sha224;
    hash3.sha384 = hash3.sha.sha384;
    hash3.sha512 = hash3.sha.sha512;
    hash3.ripemd160 = hash3.ripemd.ripemd160;
  }
});

// node_modules/aes-js/index.js
var require_aes_js = __commonJS({
  "node_modules/aes-js/index.js"(exports, module) {
    "use strict";
    (function(root) {
      function checkInt(value) {
        return parseInt(value) === value;
      }
      function checkInts(arrayish) {
        if (!checkInt(arrayish.length)) {
          return false;
        }
        for (var i3 = 0; i3 < arrayish.length; i3++) {
          if (!checkInt(arrayish[i3]) || arrayish[i3] < 0 || arrayish[i3] > 255) {
            return false;
          }
        }
        return true;
      }
      function coerceArray(arg, copy2) {
        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === "Uint8Array") {
          if (copy2) {
            if (arg.slice) {
              arg = arg.slice();
            } else {
              arg = Array.prototype.slice.call(arg);
            }
          }
          return arg;
        }
        if (Array.isArray(arg)) {
          if (!checkInts(arg)) {
            throw new Error("Array contains invalid value: " + arg);
          }
          return new Uint8Array(arg);
        }
        if (checkInt(arg.length) && checkInts(arg)) {
          return new Uint8Array(arg);
        }
        throw new Error("unsupported array-like object");
      }
      function createArray(length) {
        return new Uint8Array(length);
      }
      function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
        if (sourceStart != null || sourceEnd != null) {
          if (sourceArray.slice) {
            sourceArray = sourceArray.slice(sourceStart, sourceEnd);
          } else {
            sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
          }
        }
        targetArray.set(sourceArray, targetStart);
      }
      var convertUtf8 = function() {
        function toBytes(text) {
          var result = [], i3 = 0;
          text = encodeURI(text);
          while (i3 < text.length) {
            var c5 = text.charCodeAt(i3++);
            if (c5 === 37) {
              result.push(parseInt(text.substr(i3, 2), 16));
              i3 += 2;
            } else {
              result.push(c5);
            }
          }
          return coerceArray(result);
        }
        function fromBytes(bytes3) {
          var result = [], i3 = 0;
          while (i3 < bytes3.length) {
            var c5 = bytes3[i3];
            if (c5 < 128) {
              result.push(String.fromCharCode(c5));
              i3++;
            } else if (c5 > 191 && c5 < 224) {
              result.push(String.fromCharCode((c5 & 31) << 6 | bytes3[i3 + 1] & 63));
              i3 += 2;
            } else {
              result.push(String.fromCharCode((c5 & 15) << 12 | (bytes3[i3 + 1] & 63) << 6 | bytes3[i3 + 2] & 63));
              i3 += 3;
            }
          }
          return result.join("");
        }
        return {
          toBytes,
          fromBytes
        };
      }();
      var convertHex = function() {
        function toBytes(text) {
          var result = [];
          for (var i3 = 0; i3 < text.length; i3 += 2) {
            result.push(parseInt(text.substr(i3, 2), 16));
          }
          return result;
        }
        var Hex = "0123456789abcdef";
        function fromBytes(bytes3) {
          var result = [];
          for (var i3 = 0; i3 < bytes3.length; i3++) {
            var v3 = bytes3[i3];
            result.push(Hex[(v3 & 240) >> 4] + Hex[v3 & 15]);
          }
          return result.join("");
        }
        return {
          toBytes,
          fromBytes
        };
      }();
      var numberOfRounds = { 16: 10, 24: 12, 32: 14 };
      var rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
      var S2 = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
      var Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
      var T1 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
      var T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
      var T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
      var T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
      var T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
      var T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
      var T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
      var T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
      var U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
      var U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
      var U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
      var U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
      function convertToInt32(bytes3) {
        var result = [];
        for (var i3 = 0; i3 < bytes3.length; i3 += 4) {
          result.push(bytes3[i3] << 24 | bytes3[i3 + 1] << 16 | bytes3[i3 + 2] << 8 | bytes3[i3 + 3]);
        }
        return result;
      }
      var AES = function(key2) {
        if (!(this instanceof AES)) {
          throw Error("AES must be instanitated with `new`");
        }
        Object.defineProperty(this, "key", {
          value: coerceArray(key2, true)
        });
        this._prepare();
      };
      AES.prototype._prepare = function() {
        var rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
          throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
        }
        this._Ke = [];
        this._Kd = [];
        for (var i3 = 0; i3 <= rounds; i3++) {
          this._Ke.push([0, 0, 0, 0]);
          this._Kd.push([0, 0, 0, 0]);
        }
        var roundKeyCount = (rounds + 1) * 4;
        var KC = this.key.length / 4;
        var tk = convertToInt32(this.key);
        var index;
        for (var i3 = 0; i3 < KC; i3++) {
          index = i3 >> 2;
          this._Ke[index][i3 % 4] = tk[i3];
          this._Kd[rounds - index][i3 % 4] = tk[i3];
        }
        var rconpointer = 0;
        var t3 = KC, tt;
        while (t3 < roundKeyCount) {
          tt = tk[KC - 1];
          tk[0] ^= S2[tt >> 16 & 255] << 24 ^ S2[tt >> 8 & 255] << 16 ^ S2[tt & 255] << 8 ^ S2[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
          rconpointer += 1;
          if (KC != 8) {
            for (var i3 = 1; i3 < KC; i3++) {
              tk[i3] ^= tk[i3 - 1];
            }
          } else {
            for (var i3 = 1; i3 < KC / 2; i3++) {
              tk[i3] ^= tk[i3 - 1];
            }
            tt = tk[KC / 2 - 1];
            tk[KC / 2] ^= S2[tt & 255] ^ S2[tt >> 8 & 255] << 8 ^ S2[tt >> 16 & 255] << 16 ^ S2[tt >> 24 & 255] << 24;
            for (var i3 = KC / 2 + 1; i3 < KC; i3++) {
              tk[i3] ^= tk[i3 - 1];
            }
          }
          var i3 = 0, r3, c5;
          while (i3 < KC && t3 < roundKeyCount) {
            r3 = t3 >> 2;
            c5 = t3 % 4;
            this._Ke[r3][c5] = tk[i3];
            this._Kd[rounds - r3][c5] = tk[i3++];
            t3++;
          }
        }
        for (var r3 = 1; r3 < rounds; r3++) {
          for (var c5 = 0; c5 < 4; c5++) {
            tt = this._Kd[r3][c5];
            this._Kd[r3][c5] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
          }
        }
      };
      AES.prototype.encrypt = function(plaintext) {
        if (plaintext.length != 16) {
          throw new Error("invalid plaintext size (must be 16 bytes)");
        }
        var rounds = this._Ke.length - 1;
        var a3 = [0, 0, 0, 0];
        var t3 = convertToInt32(plaintext);
        for (var i3 = 0; i3 < 4; i3++) {
          t3[i3] ^= this._Ke[0][i3];
        }
        for (var r3 = 1; r3 < rounds; r3++) {
          for (var i3 = 0; i3 < 4; i3++) {
            a3[i3] = T1[t3[i3] >> 24 & 255] ^ T2[t3[(i3 + 1) % 4] >> 16 & 255] ^ T3[t3[(i3 + 2) % 4] >> 8 & 255] ^ T4[t3[(i3 + 3) % 4] & 255] ^ this._Ke[r3][i3];
          }
          t3 = a3.slice();
        }
        var result = createArray(16), tt;
        for (var i3 = 0; i3 < 4; i3++) {
          tt = this._Ke[rounds][i3];
          result[4 * i3] = (S2[t3[i3] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i3 + 1] = (S2[t3[(i3 + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i3 + 2] = (S2[t3[(i3 + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i3 + 3] = (S2[t3[(i3 + 3) % 4] & 255] ^ tt) & 255;
        }
        return result;
      };
      AES.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length != 16) {
          throw new Error("invalid ciphertext size (must be 16 bytes)");
        }
        var rounds = this._Kd.length - 1;
        var a3 = [0, 0, 0, 0];
        var t3 = convertToInt32(ciphertext);
        for (var i3 = 0; i3 < 4; i3++) {
          t3[i3] ^= this._Kd[0][i3];
        }
        for (var r3 = 1; r3 < rounds; r3++) {
          for (var i3 = 0; i3 < 4; i3++) {
            a3[i3] = T5[t3[i3] >> 24 & 255] ^ T6[t3[(i3 + 3) % 4] >> 16 & 255] ^ T7[t3[(i3 + 2) % 4] >> 8 & 255] ^ T8[t3[(i3 + 1) % 4] & 255] ^ this._Kd[r3][i3];
          }
          t3 = a3.slice();
        }
        var result = createArray(16), tt;
        for (var i3 = 0; i3 < 4; i3++) {
          tt = this._Kd[rounds][i3];
          result[4 * i3] = (Si[t3[i3] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i3 + 1] = (Si[t3[(i3 + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i3 + 2] = (Si[t3[(i3 + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i3 + 3] = (Si[t3[(i3 + 1) % 4] & 255] ^ tt) & 255;
        }
        return result;
      };
      var ModeOfOperationECB = function(key2) {
        if (!(this instanceof ModeOfOperationECB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Electronic Code Block";
        this.name = "ecb";
        this._aes = new AES(key2);
      };
      ModeOfOperationECB.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) {
          throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        }
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for (var i3 = 0; i3 < plaintext.length; i3 += 16) {
          copyArray(plaintext, block, 0, i3, i3 + 16);
          block = this._aes.encrypt(block);
          copyArray(block, ciphertext, i3);
        }
        return ciphertext;
      };
      ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) {
          throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for (var i3 = 0; i3 < ciphertext.length; i3 += 16) {
          copyArray(ciphertext, block, 0, i3, i3 + 16);
          block = this._aes.decrypt(block);
          copyArray(block, plaintext, i3);
        }
        return plaintext;
      };
      var ModeOfOperationCBC = function(key2, iv) {
        if (!(this instanceof ModeOfOperationCBC)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Cipher Block Chaining";
        this.name = "cbc";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 bytes)");
        }
        this._lastCipherblock = coerceArray(iv, true);
        this._aes = new AES(key2);
      };
      ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) {
          throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        }
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for (var i3 = 0; i3 < plaintext.length; i3 += 16) {
          copyArray(plaintext, block, 0, i3, i3 + 16);
          for (var j3 = 0; j3 < 16; j3++) {
            block[j3] ^= this._lastCipherblock[j3];
          }
          this._lastCipherblock = this._aes.encrypt(block);
          copyArray(this._lastCipherblock, ciphertext, i3);
        }
        return ciphertext;
      };
      ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) {
          throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for (var i3 = 0; i3 < ciphertext.length; i3 += 16) {
          copyArray(ciphertext, block, 0, i3, i3 + 16);
          block = this._aes.decrypt(block);
          for (var j3 = 0; j3 < 16; j3++) {
            plaintext[i3 + j3] = block[j3] ^ this._lastCipherblock[j3];
          }
          copyArray(ciphertext, this._lastCipherblock, 0, i3, i3 + 16);
        }
        return plaintext;
      };
      var ModeOfOperationCFB = function(key2, iv, segmentSize) {
        if (!(this instanceof ModeOfOperationCFB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Cipher Feedback";
        this.name = "cfb";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 size)");
        }
        if (!segmentSize) {
          segmentSize = 1;
        }
        this.segmentSize = segmentSize;
        this._shiftRegister = coerceArray(iv, true);
        this._aes = new AES(key2);
      };
      ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
        if (plaintext.length % this.segmentSize != 0) {
          throw new Error("invalid plaintext size (must be segmentSize bytes)");
        }
        var encrypted = coerceArray(plaintext, true);
        var xorSegment;
        for (var i3 = 0; i3 < encrypted.length; i3 += this.segmentSize) {
          xorSegment = this._aes.encrypt(this._shiftRegister);
          for (var j3 = 0; j3 < this.segmentSize; j3++) {
            encrypted[i3 + j3] ^= xorSegment[j3];
          }
          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
          copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i3, i3 + this.segmentSize);
        }
        return encrypted;
      };
      ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length % this.segmentSize != 0) {
          throw new Error("invalid ciphertext size (must be segmentSize bytes)");
        }
        var plaintext = coerceArray(ciphertext, true);
        var xorSegment;
        for (var i3 = 0; i3 < plaintext.length; i3 += this.segmentSize) {
          xorSegment = this._aes.encrypt(this._shiftRegister);
          for (var j3 = 0; j3 < this.segmentSize; j3++) {
            plaintext[i3 + j3] ^= xorSegment[j3];
          }
          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
          copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i3, i3 + this.segmentSize);
        }
        return plaintext;
      };
      var ModeOfOperationOFB = function(key2, iv) {
        if (!(this instanceof ModeOfOperationOFB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Output Feedback";
        this.name = "ofb";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 bytes)");
        }
        this._lastPrecipher = coerceArray(iv, true);
        this._lastPrecipherIndex = 16;
        this._aes = new AES(key2);
      };
      ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for (var i3 = 0; i3 < encrypted.length; i3++) {
          if (this._lastPrecipherIndex === 16) {
            this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
            this._lastPrecipherIndex = 0;
          }
          encrypted[i3] ^= this._lastPrecipher[this._lastPrecipherIndex++];
        }
        return encrypted;
      };
      ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;
      var Counter = function(initialValue) {
        if (!(this instanceof Counter)) {
          throw Error("Counter must be instanitated with `new`");
        }
        if (initialValue !== 0 && !initialValue) {
          initialValue = 1;
        }
        if (typeof initialValue === "number") {
          this._counter = createArray(16);
          this.setValue(initialValue);
        } else {
          this.setBytes(initialValue);
        }
      };
      Counter.prototype.setValue = function(value) {
        if (typeof value !== "number" || parseInt(value) != value) {
          throw new Error("invalid counter value (must be an integer)");
        }
        for (var index = 15; index >= 0; --index) {
          this._counter[index] = value % 256;
          value = value >> 8;
        }
      };
      Counter.prototype.setBytes = function(bytes3) {
        bytes3 = coerceArray(bytes3, true);
        if (bytes3.length != 16) {
          throw new Error("invalid counter bytes size (must be 16 bytes)");
        }
        this._counter = bytes3;
      };
      Counter.prototype.increment = function() {
        for (var i3 = 15; i3 >= 0; i3--) {
          if (this._counter[i3] === 255) {
            this._counter[i3] = 0;
          } else {
            this._counter[i3]++;
            break;
          }
        }
      };
      var ModeOfOperationCTR = function(key2, counter) {
        if (!(this instanceof ModeOfOperationCTR)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Counter";
        this.name = "ctr";
        if (!(counter instanceof Counter)) {
          counter = new Counter(counter);
        }
        this._counter = counter;
        this._remainingCounter = null;
        this._remainingCounterIndex = 16;
        this._aes = new AES(key2);
      };
      ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for (var i3 = 0; i3 < encrypted.length; i3++) {
          if (this._remainingCounterIndex === 16) {
            this._remainingCounter = this._aes.encrypt(this._counter._counter);
            this._remainingCounterIndex = 0;
            this._counter.increment();
          }
          encrypted[i3] ^= this._remainingCounter[this._remainingCounterIndex++];
        }
        return encrypted;
      };
      ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;
      function pkcs7pad(data) {
        data = coerceArray(data, true);
        var padder = 16 - data.length % 16;
        var result = createArray(data.length + padder);
        copyArray(data, result);
        for (var i3 = data.length; i3 < result.length; i3++) {
          result[i3] = padder;
        }
        return result;
      }
      function pkcs7strip(data) {
        data = coerceArray(data, true);
        if (data.length < 16) {
          throw new Error("PKCS#7 invalid length");
        }
        var padder = data[data.length - 1];
        if (padder > 16) {
          throw new Error("PKCS#7 padding byte out of range");
        }
        var length = data.length - padder;
        for (var i3 = 0; i3 < padder; i3++) {
          if (data[length + i3] !== padder) {
            throw new Error("PKCS#7 invalid padding byte");
          }
        }
        var result = createArray(length);
        copyArray(data, result, 0, 0, length);
        return result;
      }
      var aesjs = {
        AES,
        Counter,
        ModeOfOperation: {
          ecb: ModeOfOperationECB,
          cbc: ModeOfOperationCBC,
          cfb: ModeOfOperationCFB,
          ofb: ModeOfOperationOFB,
          ctr: ModeOfOperationCTR
        },
        utils: {
          hex: convertHex,
          utf8: convertUtf8
        },
        padding: {
          pkcs7: {
            pad: pkcs7pad,
            strip: pkcs7strip
          }
        },
        _arrayTest: {
          coerceArray,
          createArray,
          copyArray
        }
      };
      if (typeof exports !== "undefined") {
        module.exports = aesjs;
      } else if (typeof define === "function" && define.amd) {
        define(aesjs);
      } else {
        if (root.aesjs) {
          aesjs._aesjs = root.aesjs;
        }
        root.aesjs = aesjs;
      }
    })(exports);
  }
});

// node_modules/scrypt-js/scrypt.js
var require_scrypt = __commonJS({
  "node_modules/scrypt-js/scrypt.js"(exports, module) {
    "use strict";
    (function(root) {
      const MAX_VALUE = 2147483647;
      function SHA256(m3) {
        const K = new Uint32Array([
          1116352408,
          1899447441,
          3049323471,
          3921009573,
          961987163,
          1508970993,
          2453635748,
          2870763221,
          3624381080,
          310598401,
          607225278,
          1426881987,
          1925078388,
          2162078206,
          2614888103,
          3248222580,
          3835390401,
          4022224774,
          264347078,
          604807628,
          770255983,
          1249150122,
          1555081692,
          1996064986,
          2554220882,
          2821834349,
          2952996808,
          3210313671,
          3336571891,
          3584528711,
          113926993,
          338241895,
          666307205,
          773529912,
          1294757372,
          1396182291,
          1695183700,
          1986661051,
          2177026350,
          2456956037,
          2730485921,
          2820302411,
          3259730800,
          3345764771,
          3516065817,
          3600352804,
          4094571909,
          275423344,
          430227734,
          506948616,
          659060556,
          883997877,
          958139571,
          1322822218,
          1537002063,
          1747873779,
          1955562222,
          2024104815,
          2227730452,
          2361852424,
          2428436474,
          2756734187,
          3204031479,
          3329325298
        ]);
        let h0 = 1779033703, h1 = 3144134277, h22 = 1013904242, h3 = 2773480762;
        let h4 = 1359893119, h5 = 2600822924, h6 = 528734635, h7 = 1541459225;
        const w3 = new Uint32Array(64);
        function blocks(p3) {
          let off = 0, len = p3.length;
          while (len >= 64) {
            let a3 = h0, b3 = h1, c5 = h22, d2 = h3, e4 = h4, f3 = h5, g3 = h6, h8 = h7, u3, i4, j3, t1, t22;
            for (i4 = 0; i4 < 16; i4++) {
              j3 = off + i4 * 4;
              w3[i4] = (p3[j3] & 255) << 24 | (p3[j3 + 1] & 255) << 16 | (p3[j3 + 2] & 255) << 8 | p3[j3 + 3] & 255;
            }
            for (i4 = 16; i4 < 64; i4++) {
              u3 = w3[i4 - 2];
              t1 = (u3 >>> 17 | u3 << 32 - 17) ^ (u3 >>> 19 | u3 << 32 - 19) ^ u3 >>> 10;
              u3 = w3[i4 - 15];
              t22 = (u3 >>> 7 | u3 << 32 - 7) ^ (u3 >>> 18 | u3 << 32 - 18) ^ u3 >>> 3;
              w3[i4] = (t1 + w3[i4 - 7] | 0) + (t22 + w3[i4 - 16] | 0) | 0;
            }
            for (i4 = 0; i4 < 64; i4++) {
              t1 = (((e4 >>> 6 | e4 << 32 - 6) ^ (e4 >>> 11 | e4 << 32 - 11) ^ (e4 >>> 25 | e4 << 32 - 25)) + (e4 & f3 ^ ~e4 & g3) | 0) + (h8 + (K[i4] + w3[i4] | 0) | 0) | 0;
              t22 = ((a3 >>> 2 | a3 << 32 - 2) ^ (a3 >>> 13 | a3 << 32 - 13) ^ (a3 >>> 22 | a3 << 32 - 22)) + (a3 & b3 ^ a3 & c5 ^ b3 & c5) | 0;
              h8 = g3;
              g3 = f3;
              f3 = e4;
              e4 = d2 + t1 | 0;
              d2 = c5;
              c5 = b3;
              b3 = a3;
              a3 = t1 + t22 | 0;
            }
            h0 = h0 + a3 | 0;
            h1 = h1 + b3 | 0;
            h22 = h22 + c5 | 0;
            h3 = h3 + d2 | 0;
            h4 = h4 + e4 | 0;
            h5 = h5 + f3 | 0;
            h6 = h6 + g3 | 0;
            h7 = h7 + h8 | 0;
            off += 64;
            len -= 64;
          }
        }
        blocks(m3);
        let i3, bytesLeft = m3.length % 64, bitLenHi = m3.length / 536870912 | 0, bitLenLo = m3.length << 3, numZeros = bytesLeft < 56 ? 56 : 120, p2 = m3.slice(m3.length - bytesLeft, m3.length);
        p2.push(128);
        for (i3 = bytesLeft + 1; i3 < numZeros; i3++) {
          p2.push(0);
        }
        p2.push(bitLenHi >>> 24 & 255);
        p2.push(bitLenHi >>> 16 & 255);
        p2.push(bitLenHi >>> 8 & 255);
        p2.push(bitLenHi >>> 0 & 255);
        p2.push(bitLenLo >>> 24 & 255);
        p2.push(bitLenLo >>> 16 & 255);
        p2.push(bitLenLo >>> 8 & 255);
        p2.push(bitLenLo >>> 0 & 255);
        blocks(p2);
        return [
          h0 >>> 24 & 255,
          h0 >>> 16 & 255,
          h0 >>> 8 & 255,
          h0 >>> 0 & 255,
          h1 >>> 24 & 255,
          h1 >>> 16 & 255,
          h1 >>> 8 & 255,
          h1 >>> 0 & 255,
          h22 >>> 24 & 255,
          h22 >>> 16 & 255,
          h22 >>> 8 & 255,
          h22 >>> 0 & 255,
          h3 >>> 24 & 255,
          h3 >>> 16 & 255,
          h3 >>> 8 & 255,
          h3 >>> 0 & 255,
          h4 >>> 24 & 255,
          h4 >>> 16 & 255,
          h4 >>> 8 & 255,
          h4 >>> 0 & 255,
          h5 >>> 24 & 255,
          h5 >>> 16 & 255,
          h5 >>> 8 & 255,
          h5 >>> 0 & 255,
          h6 >>> 24 & 255,
          h6 >>> 16 & 255,
          h6 >>> 8 & 255,
          h6 >>> 0 & 255,
          h7 >>> 24 & 255,
          h7 >>> 16 & 255,
          h7 >>> 8 & 255,
          h7 >>> 0 & 255
        ];
      }
      function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
        password = password.length <= 64 ? password : SHA256(password);
        const innerLen = 64 + salt.length + 4;
        const inner = new Array(innerLen);
        const outerKey = new Array(64);
        let i3;
        let dk = [];
        for (i3 = 0; i3 < 64; i3++) {
          inner[i3] = 54;
        }
        for (i3 = 0; i3 < password.length; i3++) {
          inner[i3] ^= password[i3];
        }
        for (i3 = 0; i3 < salt.length; i3++) {
          inner[64 + i3] = salt[i3];
        }
        for (i3 = innerLen - 4; i3 < innerLen; i3++) {
          inner[i3] = 0;
        }
        for (i3 = 0; i3 < 64; i3++)
          outerKey[i3] = 92;
        for (i3 = 0; i3 < password.length; i3++)
          outerKey[i3] ^= password[i3];
        function incrementCounter() {
          for (let i4 = innerLen - 1; i4 >= innerLen - 4; i4--) {
            inner[i4]++;
            if (inner[i4] <= 255)
              return;
            inner[i4] = 0;
          }
        }
        while (dkLen >= 32) {
          incrementCounter();
          dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
          dkLen -= 32;
        }
        if (dkLen > 0) {
          incrementCounter();
          dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
        }
        return dk;
      }
      function blockmix_salsa8(BY, Yi, r3, x3, _X) {
        let i3;
        arraycopy(BY, (2 * r3 - 1) * 16, _X, 0, 16);
        for (i3 = 0; i3 < 2 * r3; i3++) {
          blockxor(BY, i3 * 16, _X, 16);
          salsa20_8(_X, x3);
          arraycopy(_X, 0, BY, Yi + i3 * 16, 16);
        }
        for (i3 = 0; i3 < r3; i3++) {
          arraycopy(BY, Yi + i3 * 2 * 16, BY, i3 * 16, 16);
        }
        for (i3 = 0; i3 < r3; i3++) {
          arraycopy(BY, Yi + (i3 * 2 + 1) * 16, BY, (i3 + r3) * 16, 16);
        }
      }
      function R(a3, b3) {
        return a3 << b3 | a3 >>> 32 - b3;
      }
      function salsa20_8(B, x3) {
        arraycopy(B, 0, x3, 0, 16);
        for (let i3 = 8; i3 > 0; i3 -= 2) {
          x3[4] ^= R(x3[0] + x3[12], 7);
          x3[8] ^= R(x3[4] + x3[0], 9);
          x3[12] ^= R(x3[8] + x3[4], 13);
          x3[0] ^= R(x3[12] + x3[8], 18);
          x3[9] ^= R(x3[5] + x3[1], 7);
          x3[13] ^= R(x3[9] + x3[5], 9);
          x3[1] ^= R(x3[13] + x3[9], 13);
          x3[5] ^= R(x3[1] + x3[13], 18);
          x3[14] ^= R(x3[10] + x3[6], 7);
          x3[2] ^= R(x3[14] + x3[10], 9);
          x3[6] ^= R(x3[2] + x3[14], 13);
          x3[10] ^= R(x3[6] + x3[2], 18);
          x3[3] ^= R(x3[15] + x3[11], 7);
          x3[7] ^= R(x3[3] + x3[15], 9);
          x3[11] ^= R(x3[7] + x3[3], 13);
          x3[15] ^= R(x3[11] + x3[7], 18);
          x3[1] ^= R(x3[0] + x3[3], 7);
          x3[2] ^= R(x3[1] + x3[0], 9);
          x3[3] ^= R(x3[2] + x3[1], 13);
          x3[0] ^= R(x3[3] + x3[2], 18);
          x3[6] ^= R(x3[5] + x3[4], 7);
          x3[7] ^= R(x3[6] + x3[5], 9);
          x3[4] ^= R(x3[7] + x3[6], 13);
          x3[5] ^= R(x3[4] + x3[7], 18);
          x3[11] ^= R(x3[10] + x3[9], 7);
          x3[8] ^= R(x3[11] + x3[10], 9);
          x3[9] ^= R(x3[8] + x3[11], 13);
          x3[10] ^= R(x3[9] + x3[8], 18);
          x3[12] ^= R(x3[15] + x3[14], 7);
          x3[13] ^= R(x3[12] + x3[15], 9);
          x3[14] ^= R(x3[13] + x3[12], 13);
          x3[15] ^= R(x3[14] + x3[13], 18);
        }
        for (let i3 = 0; i3 < 16; ++i3) {
          B[i3] += x3[i3];
        }
      }
      function blockxor(S2, Si, D2, len) {
        for (let i3 = 0; i3 < len; i3++) {
          D2[i3] ^= S2[Si + i3];
        }
      }
      function arraycopy(src, srcPos, dest, destPos, length) {
        while (length--) {
          dest[destPos++] = src[srcPos++];
        }
      }
      function checkBufferish(o3) {
        if (!o3 || typeof o3.length !== "number") {
          return false;
        }
        for (let i3 = 0; i3 < o3.length; i3++) {
          const v3 = o3[i3];
          if (typeof v3 !== "number" || v3 % 1 || v3 < 0 || v3 >= 256) {
            return false;
          }
        }
        return true;
      }
      function ensureInteger(value, name2) {
        if (typeof value !== "number" || value % 1) {
          throw new Error("invalid " + name2);
        }
        return value;
      }
      function _scrypt(password, salt, N3, r3, p2, dkLen, callback) {
        N3 = ensureInteger(N3, "N");
        r3 = ensureInteger(r3, "r");
        p2 = ensureInteger(p2, "p");
        dkLen = ensureInteger(dkLen, "dkLen");
        if (N3 === 0 || (N3 & N3 - 1) !== 0) {
          throw new Error("N must be power of 2");
        }
        if (N3 > MAX_VALUE / 128 / r3) {
          throw new Error("N too large");
        }
        if (r3 > MAX_VALUE / 128 / p2) {
          throw new Error("r too large");
        }
        if (!checkBufferish(password)) {
          throw new Error("password must be an array or buffer");
        }
        password = Array.prototype.slice.call(password);
        if (!checkBufferish(salt)) {
          throw new Error("salt must be an array or buffer");
        }
        salt = Array.prototype.slice.call(salt);
        let b3 = PBKDF2_HMAC_SHA256_OneIter(password, salt, p2 * 128 * r3);
        const B = new Uint32Array(p2 * 32 * r3);
        for (let i3 = 0; i3 < B.length; i3++) {
          const j3 = i3 * 4;
          B[i3] = (b3[j3 + 3] & 255) << 24 | (b3[j3 + 2] & 255) << 16 | (b3[j3 + 1] & 255) << 8 | (b3[j3 + 0] & 255) << 0;
        }
        const XY = new Uint32Array(64 * r3);
        const V = new Uint32Array(32 * r3 * N3);
        const Yi = 32 * r3;
        const x3 = new Uint32Array(16);
        const _X = new Uint32Array(16);
        const totalOps = p2 * N3 * 2;
        let currentOp = 0;
        let lastPercent10 = null;
        let stop = false;
        let state = 0;
        let i0 = 0, i1;
        let Bi;
        const limit = callback ? parseInt(1e3 / r3) : 4294967295;
        const nextTick = typeof setImmediate !== "undefined" ? setImmediate : setTimeout;
        const incrementalSMix = function() {
          if (stop) {
            return callback(new Error("cancelled"), currentOp / totalOps);
          }
          let steps;
          switch (state) {
            case 0:
              Bi = i0 * 32 * r3;
              arraycopy(B, Bi, XY, 0, Yi);
              state = 1;
              i1 = 0;
            case 1:
              steps = N3 - i1;
              if (steps > limit) {
                steps = limit;
              }
              for (let i3 = 0; i3 < steps; i3++) {
                arraycopy(XY, 0, V, (i1 + i3) * Yi, Yi);
                blockmix_salsa8(XY, Yi, r3, x3, _X);
              }
              i1 += steps;
              currentOp += steps;
              if (callback) {
                const percent10 = parseInt(1e3 * currentOp / totalOps);
                if (percent10 !== lastPercent10) {
                  stop = callback(null, currentOp / totalOps);
                  if (stop) {
                    break;
                  }
                  lastPercent10 = percent10;
                }
              }
              if (i1 < N3) {
                break;
              }
              i1 = 0;
              state = 2;
            case 2:
              steps = N3 - i1;
              if (steps > limit) {
                steps = limit;
              }
              for (let i3 = 0; i3 < steps; i3++) {
                const offset = (2 * r3 - 1) * 16;
                const j3 = XY[offset] & N3 - 1;
                blockxor(V, j3 * Yi, XY, Yi);
                blockmix_salsa8(XY, Yi, r3, x3, _X);
              }
              i1 += steps;
              currentOp += steps;
              if (callback) {
                const percent10 = parseInt(1e3 * currentOp / totalOps);
                if (percent10 !== lastPercent10) {
                  stop = callback(null, currentOp / totalOps);
                  if (stop) {
                    break;
                  }
                  lastPercent10 = percent10;
                }
              }
              if (i1 < N3) {
                break;
              }
              arraycopy(XY, 0, B, Bi, Yi);
              i0++;
              if (i0 < p2) {
                state = 0;
                break;
              }
              b3 = [];
              for (let i3 = 0; i3 < B.length; i3++) {
                b3.push(B[i3] >> 0 & 255);
                b3.push(B[i3] >> 8 & 255);
                b3.push(B[i3] >> 16 & 255);
                b3.push(B[i3] >> 24 & 255);
              }
              const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b3, dkLen);
              if (callback) {
                callback(null, 1, derivedKey);
              }
              return derivedKey;
          }
          if (callback) {
            nextTick(incrementalSMix);
          }
        };
        if (!callback) {
          while (true) {
            const derivedKey = incrementalSMix();
            if (derivedKey != void 0) {
              return derivedKey;
            }
          }
        }
        incrementalSMix();
      }
      const lib = {
        scrypt: function(password, salt, N3, r3, p2, dkLen, progressCallback) {
          return new Promise(function(resolve, reject) {
            let lastProgress = 0;
            if (progressCallback) {
              progressCallback(0);
            }
            _scrypt(password, salt, N3, r3, p2, dkLen, function(error, progress, key2) {
              if (error) {
                reject(error);
              } else if (key2) {
                if (progressCallback && lastProgress !== 1) {
                  progressCallback(1);
                }
                resolve(new Uint8Array(key2));
              } else if (progressCallback && progress !== lastProgress) {
                lastProgress = progress;
                return progressCallback(progress);
              }
            });
          });
        },
        syncScrypt: function(password, salt, N3, r3, p2, dkLen) {
          return new Uint8Array(_scrypt(password, salt, N3, r3, p2, dkLen));
        }
      };
      if (typeof exports !== "undefined") {
        module.exports = lib;
      } else if (typeof define === "function" && define.amd) {
        define(lib);
      } else if (root) {
        if (root.scrypt) {
          root._scrypt = root.scrypt;
        }
        root.scrypt = lib;
      }
    })(exports);
  }
});

// node_modules/bech32/index.js
var require_bech32 = __commonJS({
  "node_modules/bech32/index.js"(exports, module) {
    "use strict";
    var ALPHABET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
    var ALPHABET_MAP = {};
    for (z2 = 0; z2 < ALPHABET.length; z2++) {
      x3 = ALPHABET.charAt(z2);
      if (ALPHABET_MAP[x3] !== void 0)
        throw new TypeError(x3 + " is ambiguous");
      ALPHABET_MAP[x3] = z2;
    }
    var x3;
    var z2;
    function polymodStep(pre) {
      var b3 = pre >> 25;
      return (pre & 33554431) << 5 ^ -(b3 >> 0 & 1) & 996825010 ^ -(b3 >> 1 & 1) & 642813549 ^ -(b3 >> 2 & 1) & 513874426 ^ -(b3 >> 3 & 1) & 1027748829 ^ -(b3 >> 4 & 1) & 705979059;
    }
    function prefixChk(prefix) {
      var chk = 1;
      for (var i3 = 0; i3 < prefix.length; ++i3) {
        var c5 = prefix.charCodeAt(i3);
        if (c5 < 33 || c5 > 126)
          return "Invalid prefix (" + prefix + ")";
        chk = polymodStep(chk) ^ c5 >> 5;
      }
      chk = polymodStep(chk);
      for (i3 = 0; i3 < prefix.length; ++i3) {
        var v3 = prefix.charCodeAt(i3);
        chk = polymodStep(chk) ^ v3 & 31;
      }
      return chk;
    }
    function encode4(prefix, words2, LIMIT) {
      LIMIT = LIMIT || 90;
      if (prefix.length + 7 + words2.length > LIMIT)
        throw new TypeError("Exceeds length limit");
      prefix = prefix.toLowerCase();
      var chk = prefixChk(prefix);
      if (typeof chk === "string")
        throw new Error(chk);
      var result = prefix + "1";
      for (var i3 = 0; i3 < words2.length; ++i3) {
        var x4 = words2[i3];
        if (x4 >> 5 !== 0)
          throw new Error("Non 5-bit word");
        chk = polymodStep(chk) ^ x4;
        result += ALPHABET.charAt(x4);
      }
      for (i3 = 0; i3 < 6; ++i3) {
        chk = polymodStep(chk);
      }
      chk ^= 1;
      for (i3 = 0; i3 < 6; ++i3) {
        var v3 = chk >> (5 - i3) * 5 & 31;
        result += ALPHABET.charAt(v3);
      }
      return result;
    }
    function __decode(str, LIMIT) {
      LIMIT = LIMIT || 90;
      if (str.length < 8)
        return str + " too short";
      if (str.length > LIMIT)
        return "Exceeds length limit";
      var lowered = str.toLowerCase();
      var uppered = str.toUpperCase();
      if (str !== lowered && str !== uppered)
        return "Mixed-case string " + str;
      str = lowered;
      var split = str.lastIndexOf("1");
      if (split === -1)
        return "No separator character for " + str;
      if (split === 0)
        return "Missing prefix for " + str;
      var prefix = str.slice(0, split);
      var wordChars = str.slice(split + 1);
      if (wordChars.length < 6)
        return "Data too short";
      var chk = prefixChk(prefix);
      if (typeof chk === "string")
        return chk;
      var words2 = [];
      for (var i3 = 0; i3 < wordChars.length; ++i3) {
        var c5 = wordChars.charAt(i3);
        var v3 = ALPHABET_MAP[c5];
        if (v3 === void 0)
          return "Unknown character " + c5;
        chk = polymodStep(chk) ^ v3;
        if (i3 + 6 >= wordChars.length)
          continue;
        words2.push(v3);
      }
      if (chk !== 1)
        return "Invalid checksum for " + str;
      return { prefix, words: words2 };
    }
    function decodeUnsafe() {
      var res = __decode.apply(null, arguments);
      if (typeof res === "object")
        return res;
    }
    function decode3(str) {
      var res = __decode.apply(null, arguments);
      if (typeof res === "object")
        return res;
      throw new Error(res);
    }
    function convert(data, inBits, outBits, pad) {
      var value = 0;
      var bits2 = 0;
      var maxV = (1 << outBits) - 1;
      var result = [];
      for (var i3 = 0; i3 < data.length; ++i3) {
        value = value << inBits | data[i3];
        bits2 += inBits;
        while (bits2 >= outBits) {
          bits2 -= outBits;
          result.push(value >> bits2 & maxV);
        }
      }
      if (pad) {
        if (bits2 > 0) {
          result.push(value << outBits - bits2 & maxV);
        }
      } else {
        if (bits2 >= inBits)
          return "Excess padding";
        if (value << outBits - bits2 & maxV)
          return "Non-zero padding";
      }
      return result;
    }
    function toWordsUnsafe(bytes3) {
      var res = convert(bytes3, 8, 5, true);
      if (Array.isArray(res))
        return res;
    }
    function toWords(bytes3) {
      var res = convert(bytes3, 8, 5, true);
      if (Array.isArray(res))
        return res;
      throw new Error(res);
    }
    function fromWordsUnsafe(words2) {
      var res = convert(words2, 5, 8, false);
      if (Array.isArray(res))
        return res;
    }
    function fromWords(words2) {
      var res = convert(words2, 5, 8, false);
      if (Array.isArray(res))
        return res;
      throw new Error(res);
    }
    module.exports = {
      decodeUnsafe,
      decode: decode3,
      encode: encode4,
      toWordsUnsafe,
      toWords,
      fromWordsUnsafe,
      fromWords
    };
  }
});

// client/plugin/helpers/ed25519.js
var require_ed25519 = __commonJS({
  "client/plugin/helpers/ed25519.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.nobleEd25519 = {}));
    })(exports, function(exports2) {
      "use strict";
      const nodeCrypto = {};
      const _0n = BigInt(0);
      const _1n = BigInt(1);
      const _2n = BigInt(2);
      const _255n = BigInt(255);
      const CURVE_ORDER = _2n ** BigInt(252) + BigInt("27742317777372353535851937790883648493");
      const CURVE = {
        a: BigInt(-1),
        d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"),
        P: _2n ** _255n - BigInt(19),
        l: CURVE_ORDER,
        n: CURVE_ORDER,
        h: BigInt(8),
        Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"),
        Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960")
      };
      const MAX_256B = _2n ** BigInt(256);
      const SQRT_M1 = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
      BigInt("6853475219497561581579357271197624642482790079785650197046958215289687604742");
      const SQRT_AD_MINUS_ONE = BigInt("25063068953384623474111414158702152701244531502492656460079210482610430750235");
      const INVSQRT_A_MINUS_D = BigInt("54469307008909316920995813868745141605393597292927456921205312896311721017578");
      const ONE_MINUS_D_SQ = BigInt("1159843021668779879193775521855586647937357759715417654439879720876111806838");
      const D_MINUS_ONE_SQ = BigInt("40440834346308536858101042469323190826248399146238708352240133220865137265952");
      class ExtendedPoint {
        constructor(x3, y3, z2, t3) {
          this.x = x3;
          this.y = y3;
          this.z = z2;
          this.t = t3;
        }
        static fromAffine(p2) {
          if (!(p2 instanceof Point2)) {
            throw new TypeError("ExtendedPoint#fromAffine: expected Point");
          }
          if (p2.equals(Point2.ZERO))
            return ExtendedPoint.ZERO;
          return new ExtendedPoint(p2.x, p2.y, _1n, mod2(p2.x * p2.y));
        }
        static toAffineBatch(points) {
          const toInv = invertBatch(points.map((p2) => p2.z));
          return points.map((p2, i3) => p2.toAffine(toInv[i3]));
        }
        static normalizeZ(points) {
          return this.toAffineBatch(points).map(this.fromAffine);
        }
        equals(other) {
          assertExtPoint(other);
          const { x: X1, y: Y1, z: Z1 } = this;
          const { x: X2, y: Y2, z: Z2 } = other;
          const X1Z2 = mod2(X1 * Z2);
          const X2Z1 = mod2(X2 * Z1);
          const Y1Z2 = mod2(Y1 * Z2);
          const Y2Z1 = mod2(Y2 * Z1);
          return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
        }
        negate() {
          return new ExtendedPoint(mod2(-this.x), this.y, this.z, mod2(-this.t));
        }
        double() {
          const { x: X1, y: Y1, z: Z1 } = this;
          const { a: a3 } = CURVE;
          const A = mod2(X1 ** _2n);
          const B = mod2(Y1 ** _2n);
          const C3 = mod2(_2n * mod2(Z1 ** _2n));
          const D2 = mod2(a3 * A);
          const E = mod2(mod2((X1 + Y1) ** _2n) - A - B);
          const G = D2 + B;
          const F5 = G - C3;
          const H2 = D2 - B;
          const X3 = mod2(E * F5);
          const Y3 = mod2(G * H2);
          const T3 = mod2(E * H2);
          const Z3 = mod2(F5 * G);
          return new ExtendedPoint(X3, Y3, Z3, T3);
        }
        add(other) {
          assertExtPoint(other);
          const { x: X1, y: Y1, z: Z1, t: T1 } = this;
          const { x: X2, y: Y2, z: Z2, t: T2 } = other;
          const A = mod2((Y1 - X1) * (Y2 + X2));
          const B = mod2((Y1 + X1) * (Y2 - X2));
          const F5 = mod2(B - A);
          if (F5 === _0n)
            return this.double();
          const C3 = mod2(Z1 * _2n * T2);
          const D2 = mod2(T1 * _2n * Z2);
          const E = D2 + C3;
          const G = B + A;
          const H2 = D2 - C3;
          const X3 = mod2(E * F5);
          const Y3 = mod2(G * H2);
          const T3 = mod2(E * H2);
          const Z3 = mod2(F5 * G);
          return new ExtendedPoint(X3, Y3, Z3, T3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        precomputeWindow(W) {
          const windows = 1 + 256 / W;
          const points = [];
          let p2 = this;
          let base2 = p2;
          for (let window2 = 0; window2 < windows; window2++) {
            base2 = p2;
            points.push(base2);
            for (let i3 = 1; i3 < 2 ** (W - 1); i3++) {
              base2 = base2.add(p2);
              points.push(base2);
            }
            p2 = base2.double();
          }
          return points;
        }
        wNAF(n2, affinePoint) {
          if (!affinePoint && this.equals(ExtendedPoint.BASE))
            affinePoint = Point2.BASE;
          const W = affinePoint && affinePoint._WINDOW_SIZE || 1;
          if (256 % W) {
            throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");
          }
          let precomputes = affinePoint && pointPrecomputes.get(affinePoint);
          if (!precomputes) {
            precomputes = this.precomputeWindow(W);
            if (affinePoint && W !== 1) {
              precomputes = ExtendedPoint.normalizeZ(precomputes);
              pointPrecomputes.set(affinePoint, precomputes);
            }
          }
          let p2 = ExtendedPoint.ZERO;
          let f3 = ExtendedPoint.ZERO;
          const windows = 1 + 256 / W;
          const windowSize = 2 ** (W - 1);
          const mask = BigInt(2 ** W - 1);
          const maxNumber = 2 ** W;
          const shiftBy = BigInt(W);
          for (let window2 = 0; window2 < windows; window2++) {
            const offset = window2 * windowSize;
            let wbits = Number(n2 & mask);
            n2 >>= shiftBy;
            if (wbits > windowSize) {
              wbits -= maxNumber;
              n2 += _1n;
            }
            if (wbits === 0) {
              let pr = precomputes[offset];
              if (window2 % 2)
                pr = pr.negate();
              f3 = f3.add(pr);
            } else {
              let cached = precomputes[offset + Math.abs(wbits) - 1];
              if (wbits < 0)
                cached = cached.negate();
              p2 = p2.add(cached);
            }
          }
          return ExtendedPoint.normalizeZ([p2, f3])[0];
        }
        multiply(scalar, affinePoint) {
          return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);
        }
        multiplyUnsafe(scalar) {
          let n2 = normalizeScalar(scalar, CURVE.l, false);
          const G = ExtendedPoint.BASE;
          const P0 = ExtendedPoint.ZERO;
          if (n2 === _0n)
            return P0;
          if (this.equals(P0) || n2 === _1n)
            return this;
          if (this.equals(G))
            return this.wNAF(n2);
          let p2 = P0;
          let d2 = this;
          while (n2 > _0n) {
            if (n2 & _1n)
              p2 = p2.add(d2);
            d2 = d2.double();
            n2 >>= _1n;
          }
          return p2;
        }
        isSmallOrder() {
          return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);
        }
        isTorsionFree() {
          return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);
        }
        toAffine(invZ = invert(this.z)) {
          const { x: x3, y: y3, z: z2 } = this;
          const ax = mod2(x3 * invZ);
          const ay = mod2(y3 * invZ);
          const zz = mod2(z2 * invZ);
          if (zz !== _1n)
            throw new Error("invZ was invalid");
          return new Point2(ax, ay);
        }
        fromRistrettoBytes() {
          legacyRist();
        }
        toRistrettoBytes() {
          legacyRist();
        }
        fromRistrettoHash() {
          legacyRist();
        }
      }
      ExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod2(CURVE.Gx * CURVE.Gy));
      ExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);
      function assertExtPoint(other) {
        if (!(other instanceof ExtendedPoint))
          throw new TypeError("ExtendedPoint expected");
      }
      function assertRstPoint(other) {
        if (!(other instanceof RistrettoPoint))
          throw new TypeError("RistrettoPoint expected");
      }
      function legacyRist() {
        throw new Error("Legacy method: switch to RistrettoPoint");
      }
      class RistrettoPoint {
        constructor(ep) {
          this.ep = ep;
        }
        static calcElligatorRistrettoMap(r0) {
          const { d: d2 } = CURVE;
          const r3 = mod2(SQRT_M1 * r0 * r0);
          const Ns = mod2((r3 + _1n) * ONE_MINUS_D_SQ);
          let c5 = BigInt(-1);
          const D2 = mod2((c5 - d2 * r3) * mod2(r3 + d2));
          let { isValid: Ns_D_is_sq, value: s2 } = uvRatio(Ns, D2);
          let s_ = mod2(s2 * r0);
          if (!edIsNegative(s_))
            s_ = mod2(-s_);
          if (!Ns_D_is_sq)
            s2 = s_;
          if (!Ns_D_is_sq)
            c5 = r3;
          const Nt = mod2(c5 * (r3 - _1n) * D_MINUS_ONE_SQ - D2);
          const s22 = s2 * s2;
          const W0 = mod2((s2 + s2) * D2);
          const W1 = mod2(Nt * SQRT_AD_MINUS_ONE);
          const W2 = mod2(_1n - s22);
          const W3 = mod2(_1n + s22);
          return new ExtendedPoint(mod2(W0 * W3), mod2(W2 * W1), mod2(W1 * W3), mod2(W0 * W2));
        }
        static hashToCurve(hex2) {
          hex2 = ensureBytes(hex2, 64);
          const r1 = bytes255ToNumberLE(hex2.slice(0, 32));
          const R1 = this.calcElligatorRistrettoMap(r1);
          const r22 = bytes255ToNumberLE(hex2.slice(32, 64));
          const R2 = this.calcElligatorRistrettoMap(r22);
          return new RistrettoPoint(R1.add(R2));
        }
        static fromHex(hex2) {
          hex2 = ensureBytes(hex2, 32);
          const { a: a3, d: d2 } = CURVE;
          const emsg = "RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint";
          const s2 = bytes255ToNumberLE(hex2);
          if (!equalBytes(numberTo32BytesLE(s2), hex2) || edIsNegative(s2))
            throw new Error(emsg);
          const s22 = mod2(s2 * s2);
          const u1 = mod2(_1n + a3 * s22);
          const u22 = mod2(_1n - a3 * s22);
          const u1_2 = mod2(u1 * u1);
          const u2_2 = mod2(u22 * u22);
          const v3 = mod2(a3 * d2 * u1_2 - u2_2);
          const { isValid, value: I2 } = invertSqrt(mod2(v3 * u2_2));
          const Dx = mod2(I2 * u22);
          const Dy = mod2(I2 * Dx * v3);
          let x3 = mod2((s2 + s2) * Dx);
          if (edIsNegative(x3))
            x3 = mod2(-x3);
          const y3 = mod2(u1 * Dy);
          const t3 = mod2(x3 * y3);
          if (!isValid || edIsNegative(t3) || y3 === _0n)
            throw new Error(emsg);
          return new RistrettoPoint(new ExtendedPoint(x3, y3, _1n, t3));
        }
        toRawBytes() {
          let { x: x3, y: y3, z: z2, t: t3 } = this.ep;
          const u1 = mod2(mod2(z2 + y3) * mod2(z2 - y3));
          const u22 = mod2(x3 * y3);
          const { value: invsqrt } = invertSqrt(mod2(u1 * u22 ** _2n));
          const D1 = mod2(invsqrt * u1);
          const D2 = mod2(invsqrt * u22);
          const zInv = mod2(D1 * D2 * t3);
          let D3;
          if (edIsNegative(t3 * zInv)) {
            let _x = mod2(y3 * SQRT_M1);
            let _y = mod2(x3 * SQRT_M1);
            x3 = _x;
            y3 = _y;
            D3 = mod2(D1 * INVSQRT_A_MINUS_D);
          } else {
            D3 = D2;
          }
          if (edIsNegative(x3 * zInv))
            y3 = mod2(-y3);
          let s2 = mod2((z2 - y3) * D3);
          if (edIsNegative(s2))
            s2 = mod2(-s2);
          return numberTo32BytesLE(s2);
        }
        toHex() {
          return bytesToHex(this.toRawBytes());
        }
        toString() {
          return this.toHex();
        }
        equals(other) {
          assertRstPoint(other);
          const a3 = this.ep;
          const b3 = other.ep;
          const one2 = mod2(a3.x * b3.y) === mod2(a3.y * b3.x);
          const two = mod2(a3.y * b3.y) === mod2(a3.x * b3.x);
          return one2 || two;
        }
        add(other) {
          assertRstPoint(other);
          return new RistrettoPoint(this.ep.add(other.ep));
        }
        subtract(other) {
          assertRstPoint(other);
          return new RistrettoPoint(this.ep.subtract(other.ep));
        }
        multiply(scalar) {
          return new RistrettoPoint(this.ep.multiply(scalar));
        }
        multiplyUnsafe(scalar) {
          return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));
        }
      }
      RistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);
      RistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);
      const pointPrecomputes = new WeakMap();
      class Point2 {
        constructor(x3, y3) {
          this.x = x3;
          this.y = y3;
        }
        _setWindowSize(windowSize) {
          this._WINDOW_SIZE = windowSize;
          pointPrecomputes.delete(this);
        }
        static fromHex(hex2, strict = true) {
          const { d: d2, P: P2 } = CURVE;
          hex2 = ensureBytes(hex2, 32);
          const normed = hex2.slice();
          normed[31] = hex2[31] & ~128;
          const y3 = bytesToNumberLE(normed);
          if (strict && y3 >= P2)
            throw new Error("Expected 0 < hex < P");
          if (!strict && y3 >= MAX_256B)
            throw new Error("Expected 0 < hex < 2**256");
          const y22 = mod2(y3 * y3);
          const u3 = mod2(y22 - _1n);
          const v3 = mod2(d2 * y22 + _1n);
          let { isValid, value: x3 } = uvRatio(u3, v3);
          if (!isValid)
            throw new Error("Point.fromHex: invalid y coordinate");
          const isXOdd = (x3 & _1n) === _1n;
          const isLastByteOdd = (hex2[31] & 128) !== 0;
          if (isLastByteOdd !== isXOdd) {
            x3 = mod2(-x3);
          }
          return new Point2(x3, y3);
        }
        static async fromPrivateKey(privateKey) {
          return (await getExtendedPublicKey(privateKey)).point;
        }
        toRawBytes() {
          const bytes3 = numberTo32BytesLE(this.y);
          bytes3[31] |= this.x & _1n ? 128 : 0;
          return bytes3;
        }
        toHex() {
          return bytesToHex(this.toRawBytes());
        }
        toX25519() {
          const { y: y3 } = this;
          const u3 = mod2((_1n + y3) * invert(_1n - y3));
          return numberTo32BytesLE(u3);
        }
        isTorsionFree() {
          return ExtendedPoint.fromAffine(this).isTorsionFree();
        }
        equals(other) {
          return this.x === other.x && this.y === other.y;
        }
        negate() {
          return new Point2(mod2(-this.x), this.y);
        }
        add(other) {
          return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();
        }
        subtract(other) {
          return this.add(other.negate());
        }
        multiply(scalar) {
          return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();
        }
      }
      Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy);
      Point2.ZERO = new Point2(_0n, _1n);
      class Signature2 {
        constructor(r3, s2) {
          this.r = r3;
          this.s = s2;
          this.assertValidity();
        }
        static fromHex(hex2) {
          const bytes3 = ensureBytes(hex2, 64);
          const r3 = Point2.fromHex(bytes3.slice(0, 32), false);
          const s2 = bytesToNumberLE(bytes3.slice(32, 64));
          return new Signature2(r3, s2);
        }
        assertValidity() {
          const { r: r3, s: s2 } = this;
          if (!(r3 instanceof Point2))
            throw new Error("Expected Point instance");
          normalizeScalar(s2, CURVE.l, false);
          return this;
        }
        toRawBytes() {
          const u8 = new Uint8Array(64);
          u8.set(this.r.toRawBytes());
          u8.set(numberTo32BytesLE(this.s), 32);
          return u8;
        }
        toHex() {
          return bytesToHex(this.toRawBytes());
        }
      }
      function concatBytes(...arrays) {
        if (!arrays.every((a3) => a3 instanceof Uint8Array))
          throw new Error("Expected Uint8Array list");
        if (arrays.length === 1)
          return arrays[0];
        const length = arrays.reduce((a3, arr) => a3 + arr.length, 0);
        const result = new Uint8Array(length);
        for (let i3 = 0, pad = 0; i3 < arrays.length; i3++) {
          const arr = arrays[i3];
          result.set(arr, pad);
          pad += arr.length;
        }
        return result;
      }
      const hexes = Array.from({ length: 256 }, (v3, i3) => i3.toString(16).padStart(2, "0"));
      function bytesToHex(uint8a) {
        if (!(uint8a instanceof Uint8Array))
          throw new Error("Uint8Array expected");
        let hex2 = "";
        for (let i3 = 0; i3 < uint8a.length; i3++) {
          hex2 += hexes[uint8a[i3]];
        }
        return hex2;
      }
      function hexToBytes(hex2) {
        if (typeof hex2 !== "string") {
          throw new TypeError("hexToBytes: expected string, got " + typeof hex2);
        }
        if (hex2.length % 2)
          throw new Error("hexToBytes: received invalid unpadded hex");
        const array = new Uint8Array(hex2.length / 2);
        for (let i3 = 0; i3 < array.length; i3++) {
          const j3 = i3 * 2;
          const hexByte = hex2.slice(j3, j3 + 2);
          const byte = Number.parseInt(hexByte, 16);
          if (Number.isNaN(byte) || byte < 0)
            throw new Error("Invalid byte sequence");
          array[i3] = byte;
        }
        return array;
      }
      function numberTo32BytesBE(num) {
        const length = 32;
        const hex2 = num.toString(16).padStart(length * 2, "0");
        return hexToBytes(hex2);
      }
      function numberTo32BytesLE(num) {
        return numberTo32BytesBE(num).reverse();
      }
      function edIsNegative(num) {
        return (mod2(num) & _1n) === _1n;
      }
      function bytesToNumberLE(uint8a) {
        if (!(uint8a instanceof Uint8Array))
          throw new Error("Expected Uint8Array");
        return BigInt("0x" + bytesToHex(Uint8Array.from(uint8a).reverse()));
      }
      function bytes255ToNumberLE(bytes3) {
        return mod2(bytesToNumberLE(bytes3) & _2n ** _255n - _1n);
      }
      function mod2(a3, b3 = CURVE.P) {
        const res = a3 % b3;
        return res >= _0n ? res : b3 + res;
      }
      function invert(number, modulo = CURVE.P) {
        if (number === _0n || modulo <= _0n) {
          throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
        }
        let a3 = mod2(number, modulo);
        let b3 = modulo;
        let x3 = _0n, u3 = _1n;
        while (a3 !== _0n) {
          const q = b3 / a3;
          const r3 = b3 % a3;
          const m3 = x3 - u3 * q;
          b3 = a3, a3 = r3, x3 = u3, u3 = m3;
        }
        const gcd = b3;
        if (gcd !== _1n)
          throw new Error("invert: does not exist");
        return mod2(x3, modulo);
      }
      function invertBatch(nums, p2 = CURVE.P) {
        const tmp = new Array(nums.length);
        const lastMultiplied = nums.reduce((acc, num, i3) => {
          if (num === _0n)
            return acc;
          tmp[i3] = acc;
          return mod2(acc * num, p2);
        }, _1n);
        const inverted = invert(lastMultiplied, p2);
        nums.reduceRight((acc, num, i3) => {
          if (num === _0n)
            return acc;
          tmp[i3] = mod2(acc * tmp[i3], p2);
          return mod2(acc * num, p2);
        }, inverted);
        return tmp;
      }
      function pow2(x3, power) {
        const { P: P2 } = CURVE;
        let res = x3;
        while (power-- > _0n) {
          res *= res;
          res %= P2;
        }
        return res;
      }
      function pow_2_252_3(x3) {
        const { P: P2 } = CURVE;
        const _5n = BigInt(5);
        const _10n = BigInt(10);
        const _20n = BigInt(20);
        const _40n = BigInt(40);
        const _80n = BigInt(80);
        const x22 = x3 * x3 % P2;
        const b22 = x22 * x3 % P2;
        const b4 = pow2(b22, _2n) * b22 % P2;
        const b5 = pow2(b4, _1n) * x3 % P2;
        const b10 = pow2(b5, _5n) * b5 % P2;
        const b20 = pow2(b10, _10n) * b10 % P2;
        const b40 = pow2(b20, _20n) * b20 % P2;
        const b80 = pow2(b40, _40n) * b40 % P2;
        const b160 = pow2(b80, _80n) * b80 % P2;
        const b240 = pow2(b160, _80n) * b80 % P2;
        const b250 = pow2(b240, _10n) * b10 % P2;
        const pow_p_5_8 = pow2(b250, _2n) * x3 % P2;
        return { pow_p_5_8, b2: b22 };
      }
      function uvRatio(u3, v3) {
        const v32 = mod2(v3 * v3 * v3);
        const v7 = mod2(v32 * v32 * v3);
        const pow3 = pow_2_252_3(u3 * v7).pow_p_5_8;
        let x3 = mod2(u3 * v32 * pow3);
        const vx2 = mod2(v3 * x3 * x3);
        const root1 = x3;
        const root2 = mod2(x3 * SQRT_M1);
        const useRoot1 = vx2 === u3;
        const useRoot2 = vx2 === mod2(-u3);
        const noRoot = vx2 === mod2(-u3 * SQRT_M1);
        if (useRoot1)
          x3 = root1;
        if (useRoot2 || noRoot)
          x3 = root2;
        if (edIsNegative(x3))
          x3 = mod2(-x3);
        return { isValid: useRoot1 || useRoot2, value: x3 };
      }
      function invertSqrt(number) {
        return uvRatio(_1n, number);
      }
      async function sha512ModqLE(...args) {
        const hash3 = await utils5.sha512(concatBytes(...args));
        const value = bytesToNumberLE(hash3);
        return mod2(value, CURVE.l);
      }
      function equalBytes(b1, b22) {
        if (b1.length !== b22.length) {
          return false;
        }
        for (let i3 = 0; i3 < b1.length; i3++) {
          if (b1[i3] !== b22[i3]) {
            return false;
          }
        }
        return true;
      }
      function ensureBytes(hex2, expectedLength) {
        const bytes3 = hex2 instanceof Uint8Array ? Uint8Array.from(hex2) : hexToBytes(hex2);
        if (typeof expectedLength === "number" && bytes3.length !== expectedLength)
          throw new Error(`Expected ${expectedLength} bytes`);
        return bytes3;
      }
      function normalizeScalar(num, max, strict = true) {
        if (!max)
          throw new TypeError("Specify max value");
        if (typeof num === "number" && Number.isSafeInteger(num))
          num = BigInt(num);
        if (typeof num === "bigint" && num < max) {
          if (strict) {
            if (_0n < num)
              return num;
          } else {
            if (_0n <= num)
              return num;
          }
        }
        throw new TypeError("Expected valid scalar: 0 < scalar < max");
      }
      function adjustBytes25519(bytes3) {
        bytes3[0] &= 248;
        bytes3[31] &= 127;
        bytes3[31] |= 64;
        return bytes3;
      }
      function decodeScalar25519(n2) {
        return bytesToNumberLE(adjustBytes25519(ensureBytes(n2, 32)));
      }
      async function getExtendedPublicKey(key2) {
        key2 = typeof key2 === "bigint" || typeof key2 === "number" ? numberTo32BytesBE(normalizeScalar(key2, MAX_256B)) : ensureBytes(key2);
        if (key2.length !== 32)
          throw new Error(`Expected 32 bytes`);
        const hashed = await utils5.sha512(key2);
        const head = adjustBytes25519(hashed.slice(0, 32));
        const prefix = hashed.slice(32, 64);
        const scalar = mod2(bytesToNumberLE(head), CURVE.l);
        const point3 = Point2.BASE.multiply(scalar);
        const pointBytes = point3.toRawBytes();
        return { head, prefix, scalar, point: point3, pointBytes };
      }
      async function getPublicKey2(privateKey) {
        return (await getExtendedPublicKey(privateKey)).pointBytes;
      }
      async function getPublicKeyAsPoint(privateKey) {
        return (await getExtendedPublicKey(privateKey)).point;
      }
      async function sign3(message, privateKey) {
        message = ensureBytes(message);
        const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);
        const r3 = await sha512ModqLE(prefix, message);
        const R = Point2.BASE.multiply(r3);
        const k3 = await sha512ModqLE(R.toRawBytes(), pointBytes, message);
        const s2 = mod2(r3 + k3 * scalar, CURVE.l);
        return new Signature2(R, s2).toRawBytes();
      }
      async function verify3(sig, message, publicKey) {
        message = ensureBytes(message);
        if (!(publicKey instanceof Point2))
          publicKey = Point2.fromHex(publicKey, false);
        const { r: r3, s: s2 } = sig instanceof Signature2 ? sig.assertValidity() : Signature2.fromHex(sig);
        const SB = ExtendedPoint.BASE.multiplyUnsafe(s2);
        const k3 = await sha512ModqLE(r3.toRawBytes(), publicKey.toRawBytes(), message);
        const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k3);
        const RkA = ExtendedPoint.fromAffine(r3).add(kA);
        return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);
      }
      async function getSharedSecret(privateKey, publicKey) {
        const { head } = await getExtendedPublicKey(privateKey);
        const u3 = Point2.fromHex(publicKey).toX25519();
        return curve25519.scalarMult(head, u3);
      }
      Point2.BASE._setWindowSize(8);
      function cswap(swap2, x_2, x_3) {
        const dummy = mod2(swap2 * (x_2 - x_3));
        x_2 = mod2(x_2 - dummy);
        x_3 = mod2(x_3 + dummy);
        return [x_2, x_3];
      }
      function montgomeryLadder(pointU, scalar) {
        const { P: P2 } = CURVE;
        const u3 = normalizeScalar(pointU, P2);
        const k3 = normalizeScalar(scalar, P2);
        const a24 = BigInt(121665);
        const x_1 = u3;
        let x_2 = _1n;
        let z_2 = _0n;
        let x_3 = u3;
        let z_3 = _1n;
        let swap2 = _0n;
        let sw;
        for (let t3 = BigInt(255 - 1); t3 >= _0n; t3--) {
          const k_t = k3 >> t3 & _1n;
          swap2 ^= k_t;
          sw = cswap(swap2, x_2, x_3);
          x_2 = sw[0];
          x_3 = sw[1];
          sw = cswap(swap2, z_2, z_3);
          z_2 = sw[0];
          z_3 = sw[1];
          swap2 = k_t;
          const A = x_2 + z_2;
          const AA = mod2(A * A);
          const B = x_2 - z_2;
          const BB = mod2(B * B);
          const E = AA - BB;
          const C3 = x_3 + z_3;
          const D2 = x_3 - z_3;
          const DA = mod2(D2 * A);
          const CB = mod2(C3 * B);
          x_3 = mod2((DA + CB) ** _2n);
          z_3 = mod2(x_1 * (DA - CB) ** _2n);
          x_2 = mod2(AA * BB);
          z_2 = mod2(E * (AA + mod2(a24 * E)));
        }
        sw = cswap(swap2, x_2, x_3);
        x_2 = sw[0];
        x_3 = sw[1];
        sw = cswap(swap2, z_2, z_3);
        z_2 = sw[0];
        z_3 = sw[1];
        const { pow_p_5_8, b2: b22 } = pow_2_252_3(z_2);
        const xp2 = mod2(pow2(pow_p_5_8, BigInt(3)) * b22);
        return mod2(x_2 * xp2);
      }
      function encodeUCoordinate(u3) {
        return numberTo32BytesLE(mod2(u3, CURVE.P));
      }
      function decodeUCoordinate(uEnc) {
        const u3 = ensureBytes(uEnc, 32);
        u3[31] &= 127;
        return bytesToNumberLE(u3);
      }
      const curve25519 = {
        BASE_POINT_U: "0900000000000000000000000000000000000000000000000000000000000000",
        scalarMult(privateKey, publicKey) {
          const u3 = decodeUCoordinate(publicKey);
          const p2 = decodeScalar25519(privateKey);
          const pu = montgomeryLadder(u3, p2);
          if (pu === _0n)
            throw new Error("Invalid private or public key received");
          return encodeUCoordinate(pu);
        },
        scalarMultBase(privateKey) {
          return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);
        }
      };
      const crypto2 = {
        node: nodeCrypto,
        web: typeof self === "object" && "crypto" in self ? self.crypto : void 0
      };
      const utils5 = {
        TORSION_SUBGROUP: [
          "0100000000000000000000000000000000000000000000000000000000000000",
          "c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a",
          "0000000000000000000000000000000000000000000000000000000000000080",
          "26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05",
          "ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f",
          "26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85",
          "0000000000000000000000000000000000000000000000000000000000000000",
          "c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa"
        ],
        bytesToHex,
        getExtendedPublicKey,
        mod: mod2,
        invert,
        hashToPrivateScalar: (hash3) => {
          hash3 = ensureBytes(hash3);
          if (hash3.length < 40 || hash3.length > 1024)
            throw new Error("Expected 40-1024 bytes of private key as per FIPS 186");
          const num = mod2(bytesToNumberLE(hash3), CURVE.l);
          if (num === _0n || num === _1n)
            throw new Error("Invalid private key");
          return num;
        },
        randomBytes: (bytesLength = 32) => {
          if (crypto2.web) {
            return crypto2.web.getRandomValues(new Uint8Array(bytesLength));
          } else if (crypto2.node) {
            const { randomBytes: randomBytes2 } = crypto2.node;
            return new Uint8Array(randomBytes2(bytesLength).buffer);
          } else {
            throw new Error("The environment doesn't have randomBytes function");
          }
        },
        randomPrivateKey: () => {
          return utils5.randomBytes(32);
        },
        sha512: async (message) => {
          if (crypto2.web) {
            const buffer = await crypto2.web.subtle.digest("SHA-512", message.buffer);
            return new Uint8Array(buffer);
          } else if (crypto2.node) {
            return Uint8Array.from(crypto2.node.createHash("sha512").update(message).digest());
          } else {
            throw new Error("The environment doesn't have sha512 function");
          }
        },
        precompute(windowSize = 8, point3 = Point2.BASE) {
          const cached = point3.equals(Point2.BASE) ? point3 : new Point2(point3.x, point3.y);
          cached._setWindowSize(windowSize);
          cached.multiply(_2n);
          return cached;
        }
      };
      exports2.CURVE = CURVE;
      exports2.ExtendedPoint = ExtendedPoint;
      exports2.Point = Point2;
      exports2.RistrettoPoint = RistrettoPoint;
      exports2.Signature = Signature2;
      exports2.curve25519 = curve25519;
      exports2.getPublicKey = getPublicKey2;
      exports2.getPublicKeyAsPoint = getPublicKeyAsPoint;
      exports2.getSharedSecret = getSharedSecret;
      exports2.sign = sign3;
      exports2.utils = utils5;
      exports2.verify = verify3;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// node_modules/preact/dist/preact.module.js
var n;
var l;
var u;
var i;
var t;
var o;
var r;
var f;
var e = {};
var c = [];
var s = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
function a(n2, l3) {
  for (var u3 in l3)
    n2[u3] = l3[u3];
  return n2;
}
function h(n2) {
  var l3 = n2.parentNode;
  l3 && l3.removeChild(n2);
}
function v(l3, u3, i3) {
  var t3, o3, r3, f3 = {};
  for (r3 in u3)
    r3 == "key" ? t3 = u3[r3] : r3 == "ref" ? o3 = u3[r3] : f3[r3] = u3[r3];
  if (arguments.length > 2 && (f3.children = arguments.length > 3 ? n.call(arguments, 2) : i3), typeof l3 == "function" && l3.defaultProps != null)
    for (r3 in l3.defaultProps)
      f3[r3] === void 0 && (f3[r3] = l3.defaultProps[r3]);
  return y(l3, f3, t3, o3, null);
}
function y(n2, i3, t3, o3, r3) {
  var f3 = { type: n2, props: i3, key: t3, ref: o3, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, __h: null, constructor: void 0, __v: r3 == null ? ++u : r3 };
  return r3 == null && l.vnode != null && l.vnode(f3), f3;
}
function d(n2) {
  return n2.children;
}
function _(n2, l3) {
  this.props = n2, this.context = l3;
}
function k(n2, l3) {
  if (l3 == null)
    return n2.__ ? k(n2.__, n2.__.__k.indexOf(n2) + 1) : null;
  for (var u3; l3 < n2.__k.length; l3++)
    if ((u3 = n2.__k[l3]) != null && u3.__e != null)
      return u3.__e;
  return typeof n2.type == "function" ? k(n2) : null;
}
function b(n2) {
  var l3, u3;
  if ((n2 = n2.__) != null && n2.__c != null) {
    for (n2.__e = n2.__c.base = null, l3 = 0; l3 < n2.__k.length; l3++)
      if ((u3 = n2.__k[l3]) != null && u3.__e != null) {
        n2.__e = n2.__c.base = u3.__e;
        break;
      }
    return b(n2);
  }
}
function m(n2) {
  (!n2.__d && (n2.__d = true) && t.push(n2) && !g.__r++ || r !== l.debounceRendering) && ((r = l.debounceRendering) || o)(g);
}
function g() {
  for (var n2; g.__r = t.length; )
    n2 = t.sort(function(n3, l3) {
      return n3.__v.__b - l3.__v.__b;
    }), t = [], n2.some(function(n3) {
      var l3, u3, i3, t3, o3, r3;
      n3.__d && (o3 = (t3 = (l3 = n3).__v).__e, (r3 = l3.__P) && (u3 = [], (i3 = a({}, t3)).__v = t3.__v + 1, j(r3, t3, i3, l3.__n, r3.ownerSVGElement !== void 0, t3.__h != null ? [o3] : null, u3, o3 == null ? k(t3) : o3, t3.__h), z(u3, t3), t3.__e != o3 && b(t3)));
    });
}
function w(n2, l3, u3, i3, t3, o3, r3, f3, s2, a3) {
  var h3, v3, p2, _3, b3, m3, g3, w3 = i3 && i3.__k || c, A = w3.length;
  for (u3.__k = [], h3 = 0; h3 < l3.length; h3++)
    if ((_3 = u3.__k[h3] = (_3 = l3[h3]) == null || typeof _3 == "boolean" ? null : typeof _3 == "string" || typeof _3 == "number" || typeof _3 == "bigint" ? y(null, _3, null, null, _3) : Array.isArray(_3) ? y(d, { children: _3 }, null, null, null) : _3.__b > 0 ? y(_3.type, _3.props, _3.key, null, _3.__v) : _3) != null) {
      if (_3.__ = u3, _3.__b = u3.__b + 1, (p2 = w3[h3]) === null || p2 && _3.key == p2.key && _3.type === p2.type)
        w3[h3] = void 0;
      else
        for (v3 = 0; v3 < A; v3++) {
          if ((p2 = w3[v3]) && _3.key == p2.key && _3.type === p2.type) {
            w3[v3] = void 0;
            break;
          }
          p2 = null;
        }
      j(n2, _3, p2 = p2 || e, t3, o3, r3, f3, s2, a3), b3 = _3.__e, (v3 = _3.ref) && p2.ref != v3 && (g3 || (g3 = []), p2.ref && g3.push(p2.ref, null, _3), g3.push(v3, _3.__c || b3, _3)), b3 != null ? (m3 == null && (m3 = b3), typeof _3.type == "function" && _3.__k === p2.__k ? _3.__d = s2 = x(_3, s2, n2) : s2 = P(n2, _3, p2, w3, b3, s2), typeof u3.type == "function" && (u3.__d = s2)) : s2 && p2.__e == s2 && s2.parentNode != n2 && (s2 = k(p2));
    }
  for (u3.__e = m3, h3 = A; h3--; )
    w3[h3] != null && (typeof u3.type == "function" && w3[h3].__e != null && w3[h3].__e == u3.__d && (u3.__d = k(i3, h3 + 1)), N(w3[h3], w3[h3]));
  if (g3)
    for (h3 = 0; h3 < g3.length; h3++)
      M(g3[h3], g3[++h3], g3[++h3]);
}
function x(n2, l3, u3) {
  for (var i3, t3 = n2.__k, o3 = 0; t3 && o3 < t3.length; o3++)
    (i3 = t3[o3]) && (i3.__ = n2, l3 = typeof i3.type == "function" ? x(i3, l3, u3) : P(u3, i3, i3, t3, i3.__e, l3));
  return l3;
}
function P(n2, l3, u3, i3, t3, o3) {
  var r3, f3, e4;
  if (l3.__d !== void 0)
    r3 = l3.__d, l3.__d = void 0;
  else if (u3 == null || t3 != o3 || t3.parentNode == null)
    n:
      if (o3 == null || o3.parentNode !== n2)
        n2.appendChild(t3), r3 = null;
      else {
        for (f3 = o3, e4 = 0; (f3 = f3.nextSibling) && e4 < i3.length; e4 += 2)
          if (f3 == t3)
            break n;
        n2.insertBefore(t3, o3), r3 = o3;
      }
  return r3 !== void 0 ? r3 : t3.nextSibling;
}
function C(n2, l3, u3, i3, t3) {
  var o3;
  for (o3 in u3)
    o3 === "children" || o3 === "key" || o3 in l3 || H(n2, o3, null, u3[o3], i3);
  for (o3 in l3)
    t3 && typeof l3[o3] != "function" || o3 === "children" || o3 === "key" || o3 === "value" || o3 === "checked" || u3[o3] === l3[o3] || H(n2, o3, l3[o3], u3[o3], i3);
}
function $(n2, l3, u3) {
  l3[0] === "-" ? n2.setProperty(l3, u3) : n2[l3] = u3 == null ? "" : typeof u3 != "number" || s.test(l3) ? u3 : u3 + "px";
}
function H(n2, l3, u3, i3, t3) {
  var o3;
  n:
    if (l3 === "style")
      if (typeof u3 == "string")
        n2.style.cssText = u3;
      else {
        if (typeof i3 == "string" && (n2.style.cssText = i3 = ""), i3)
          for (l3 in i3)
            u3 && l3 in u3 || $(n2.style, l3, "");
        if (u3)
          for (l3 in u3)
            i3 && u3[l3] === i3[l3] || $(n2.style, l3, u3[l3]);
      }
    else if (l3[0] === "o" && l3[1] === "n")
      o3 = l3 !== (l3 = l3.replace(/Capture$/, "")), l3 = l3.toLowerCase() in n2 ? l3.toLowerCase().slice(2) : l3.slice(2), n2.l || (n2.l = {}), n2.l[l3 + o3] = u3, u3 ? i3 || n2.addEventListener(l3, o3 ? T : I, o3) : n2.removeEventListener(l3, o3 ? T : I, o3);
    else if (l3 !== "dangerouslySetInnerHTML") {
      if (t3)
        l3 = l3.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
      else if (l3 !== "href" && l3 !== "list" && l3 !== "form" && l3 !== "tabIndex" && l3 !== "download" && l3 in n2)
        try {
          n2[l3] = u3 == null ? "" : u3;
          break n;
        } catch (n3) {
        }
      typeof u3 == "function" || (u3 != null && (u3 !== false || l3[0] === "a" && l3[1] === "r") ? n2.setAttribute(l3, u3) : n2.removeAttribute(l3));
    }
}
function I(n2) {
  this.l[n2.type + false](l.event ? l.event(n2) : n2);
}
function T(n2) {
  this.l[n2.type + true](l.event ? l.event(n2) : n2);
}
function j(n2, u3, i3, t3, o3, r3, f3, e4, c5) {
  var s2, h3, v3, y3, p2, k3, b3, m3, g3, x3, A, P2 = u3.type;
  if (u3.constructor !== void 0)
    return null;
  i3.__h != null && (c5 = i3.__h, e4 = u3.__e = i3.__e, u3.__h = null, r3 = [e4]), (s2 = l.__b) && s2(u3);
  try {
    n:
      if (typeof P2 == "function") {
        if (m3 = u3.props, g3 = (s2 = P2.contextType) && t3[s2.__c], x3 = s2 ? g3 ? g3.props.value : s2.__ : t3, i3.__c ? b3 = (h3 = u3.__c = i3.__c).__ = h3.__E : ("prototype" in P2 && P2.prototype.render ? u3.__c = h3 = new P2(m3, x3) : (u3.__c = h3 = new _(m3, x3), h3.constructor = P2, h3.render = O), g3 && g3.sub(h3), h3.props = m3, h3.state || (h3.state = {}), h3.context = x3, h3.__n = t3, v3 = h3.__d = true, h3.__h = []), h3.__s == null && (h3.__s = h3.state), P2.getDerivedStateFromProps != null && (h3.__s == h3.state && (h3.__s = a({}, h3.__s)), a(h3.__s, P2.getDerivedStateFromProps(m3, h3.__s))), y3 = h3.props, p2 = h3.state, v3)
          P2.getDerivedStateFromProps == null && h3.componentWillMount != null && h3.componentWillMount(), h3.componentDidMount != null && h3.__h.push(h3.componentDidMount);
        else {
          if (P2.getDerivedStateFromProps == null && m3 !== y3 && h3.componentWillReceiveProps != null && h3.componentWillReceiveProps(m3, x3), !h3.__e && h3.shouldComponentUpdate != null && h3.shouldComponentUpdate(m3, h3.__s, x3) === false || u3.__v === i3.__v) {
            h3.props = m3, h3.state = h3.__s, u3.__v !== i3.__v && (h3.__d = false), h3.__v = u3, u3.__e = i3.__e, u3.__k = i3.__k, u3.__k.forEach(function(n3) {
              n3 && (n3.__ = u3);
            }), h3.__h.length && f3.push(h3);
            break n;
          }
          h3.componentWillUpdate != null && h3.componentWillUpdate(m3, h3.__s, x3), h3.componentDidUpdate != null && h3.__h.push(function() {
            h3.componentDidUpdate(y3, p2, k3);
          });
        }
        h3.context = x3, h3.props = m3, h3.state = h3.__s, (s2 = l.__r) && s2(u3), h3.__d = false, h3.__v = u3, h3.__P = n2, s2 = h3.render(h3.props, h3.state, h3.context), h3.state = h3.__s, h3.getChildContext != null && (t3 = a(a({}, t3), h3.getChildContext())), v3 || h3.getSnapshotBeforeUpdate == null || (k3 = h3.getSnapshotBeforeUpdate(y3, p2)), A = s2 != null && s2.type === d && s2.key == null ? s2.props.children : s2, w(n2, Array.isArray(A) ? A : [A], u3, i3, t3, o3, r3, f3, e4, c5), h3.base = u3.__e, u3.__h = null, h3.__h.length && f3.push(h3), b3 && (h3.__E = h3.__ = null), h3.__e = false;
      } else
        r3 == null && u3.__v === i3.__v ? (u3.__k = i3.__k, u3.__e = i3.__e) : u3.__e = L(i3.__e, u3, i3, t3, o3, r3, f3, c5);
    (s2 = l.diffed) && s2(u3);
  } catch (n3) {
    u3.__v = null, (c5 || r3 != null) && (u3.__e = e4, u3.__h = !!c5, r3[r3.indexOf(e4)] = null), l.__e(n3, u3, i3);
  }
}
function z(n2, u3) {
  l.__c && l.__c(u3, n2), n2.some(function(u4) {
    try {
      n2 = u4.__h, u4.__h = [], n2.some(function(n3) {
        n3.call(u4);
      });
    } catch (n3) {
      l.__e(n3, u4.__v);
    }
  });
}
function L(l3, u3, i3, t3, o3, r3, f3, c5) {
  var s2, a3, v3, y3 = i3.props, p2 = u3.props, d2 = u3.type, _3 = 0;
  if (d2 === "svg" && (o3 = true), r3 != null) {
    for (; _3 < r3.length; _3++)
      if ((s2 = r3[_3]) && "setAttribute" in s2 == !!d2 && (d2 ? s2.localName === d2 : s2.nodeType === 3)) {
        l3 = s2, r3[_3] = null;
        break;
      }
  }
  if (l3 == null) {
    if (d2 === null)
      return document.createTextNode(p2);
    l3 = o3 ? document.createElementNS("http://www.w3.org/2000/svg", d2) : document.createElement(d2, p2.is && p2), r3 = null, c5 = false;
  }
  if (d2 === null)
    y3 === p2 || c5 && l3.data === p2 || (l3.data = p2);
  else {
    if (r3 = r3 && n.call(l3.childNodes), a3 = (y3 = i3.props || e).dangerouslySetInnerHTML, v3 = p2.dangerouslySetInnerHTML, !c5) {
      if (r3 != null)
        for (y3 = {}, _3 = 0; _3 < l3.attributes.length; _3++)
          y3[l3.attributes[_3].name] = l3.attributes[_3].value;
      (v3 || a3) && (v3 && (a3 && v3.__html == a3.__html || v3.__html === l3.innerHTML) || (l3.innerHTML = v3 && v3.__html || ""));
    }
    if (C(l3, p2, y3, o3, c5), v3)
      u3.__k = [];
    else if (_3 = u3.props.children, w(l3, Array.isArray(_3) ? _3 : [_3], u3, i3, t3, o3 && d2 !== "foreignObject", r3, f3, r3 ? r3[0] : i3.__k && k(i3, 0), c5), r3 != null)
      for (_3 = r3.length; _3--; )
        r3[_3] != null && h(r3[_3]);
    c5 || ("value" in p2 && (_3 = p2.value) !== void 0 && (_3 !== l3.value || d2 === "progress" && !_3 || d2 === "option" && _3 !== y3.value) && H(l3, "value", _3, y3.value, false), "checked" in p2 && (_3 = p2.checked) !== void 0 && _3 !== l3.checked && H(l3, "checked", _3, y3.checked, false));
  }
  return l3;
}
function M(n2, u3, i3) {
  try {
    typeof n2 == "function" ? n2(u3) : n2.current = u3;
  } catch (n3) {
    l.__e(n3, i3);
  }
}
function N(n2, u3, i3) {
  var t3, o3;
  if (l.unmount && l.unmount(n2), (t3 = n2.ref) && (t3.current && t3.current !== n2.__e || M(t3, null, u3)), (t3 = n2.__c) != null) {
    if (t3.componentWillUnmount)
      try {
        t3.componentWillUnmount();
      } catch (n3) {
        l.__e(n3, u3);
      }
    t3.base = t3.__P = null;
  }
  if (t3 = n2.__k)
    for (o3 = 0; o3 < t3.length; o3++)
      t3[o3] && N(t3[o3], u3, typeof n2.type != "function");
  i3 || n2.__e == null || h(n2.__e), n2.__e = n2.__d = void 0;
}
function O(n2, l3, u3) {
  return this.constructor(n2, u3);
}
function S(u3, i3, t3) {
  var o3, r3, f3;
  l.__ && l.__(u3, i3), r3 = (o3 = typeof t3 == "function") ? null : t3 && t3.__k || i3.__k, f3 = [], j(i3, u3 = (!o3 && t3 || i3).__k = v(d, null, [u3]), r3 || e, e, i3.ownerSVGElement !== void 0, !o3 && t3 ? [t3] : r3 ? null : i3.firstChild ? n.call(i3.childNodes) : null, f3, !o3 && t3 ? t3 : r3 ? r3.__e : i3.firstChild, o3), z(f3, u3);
}
function D(n2, l3) {
  var u3 = { __c: l3 = "__cC" + f++, __: n2, Consumer: function(n3, l4) {
    return n3.children(l4);
  }, Provider: function(n3) {
    var u4, i3;
    return this.getChildContext || (u4 = [], (i3 = {})[l3] = this, this.getChildContext = function() {
      return i3;
    }, this.shouldComponentUpdate = function(n4) {
      this.props.value !== n4.value && u4.some(m);
    }, this.sub = function(n4) {
      u4.push(n4);
      var l4 = n4.componentWillUnmount;
      n4.componentWillUnmount = function() {
        u4.splice(u4.indexOf(n4), 1), l4 && l4.call(n4);
      };
    }), n3.children;
  } };
  return u3.Provider.__ = u3.Consumer.contextType = u3;
}
n = c.slice, l = { __e: function(n2, l3, u3, i3) {
  for (var t3, o3, r3; l3 = l3.__; )
    if ((t3 = l3.__c) && !t3.__)
      try {
        if ((o3 = t3.constructor) && o3.getDerivedStateFromError != null && (t3.setState(o3.getDerivedStateFromError(n2)), r3 = t3.__d), t3.componentDidCatch != null && (t3.componentDidCatch(n2, i3 || {}), r3 = t3.__d), r3)
          return t3.__E = t3;
      } catch (l4) {
        n2 = l4;
      }
  throw n2;
} }, u = 0, i = function(n2) {
  return n2 != null && n2.constructor === void 0;
}, _.prototype.setState = function(n2, l3) {
  var u3;
  u3 = this.__s != null && this.__s !== this.state ? this.__s : this.__s = a({}, this.state), typeof n2 == "function" && (n2 = n2(a({}, u3), this.props)), n2 && a(u3, n2), n2 != null && this.__v && (l3 && this.__h.push(l3), m(this));
}, _.prototype.forceUpdate = function(n2) {
  this.__v && (this.__e = true, n2 && this.__h.push(n2), m(this));
}, _.prototype.render = d, t = [], o = typeof Promise == "function" ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, g.__r = 0, f = 0;

// node_modules/preact/hooks/dist/hooks.module.js
var t2;
var u2;
var r2;
var o2 = 0;
var i2 = [];
var c2 = l.__b;
var f2 = l.__r;
var e2 = l.diffed;
var a2 = l.__c;
var v2 = l.unmount;
function l2(t3, r3) {
  l.__h && l.__h(u2, t3, o2 || r3), o2 = 0;
  var i3 = u2.__H || (u2.__H = { __: [], __h: [] });
  return t3 >= i3.__.length && i3.__.push({}), i3.__[t3];
}
function m2(n2) {
  return o2 = 1, p(w2, n2);
}
function p(n2, r3, o3) {
  var i3 = l2(t2++, 2);
  return i3.t = n2, i3.__c || (i3.__ = [o3 ? o3(r3) : w2(void 0, r3), function(n3) {
    var t3 = i3.t(i3.__[0], n3);
    i3.__[0] !== t3 && (i3.__ = [t3, i3.__[1]], i3.__c.setState({}));
  }], i3.__c = u2), i3.__;
}
function y2(r3, o3) {
  var i3 = l2(t2++, 3);
  !l.__s && k2(i3.__H, o3) && (i3.__ = r3, i3.__H = o3, u2.__H.__h.push(i3));
}
function h2(n2) {
  return o2 = 5, _2(function() {
    return { current: n2 };
  }, []);
}
function _2(n2, u3) {
  var r3 = l2(t2++, 7);
  return k2(r3.__H, u3) && (r3.__ = n2(), r3.__H = u3, r3.__h = n2), r3.__;
}
function F(n2) {
  var r3 = u2.context[n2.__c], o3 = l2(t2++, 9);
  return o3.c = n2, r3 ? (o3.__ == null && (o3.__ = true, r3.sub(u2)), r3.props.value) : n2.__;
}
function x2() {
  for (var t3; t3 = i2.shift(); )
    if (t3.__P)
      try {
        t3.__H.__h.forEach(g2), t3.__H.__h.forEach(j2), t3.__H.__h = [];
      } catch (u3) {
        t3.__H.__h = [], l.__e(u3, t3.__v);
      }
}
l.__b = function(n2) {
  u2 = null, c2 && c2(n2);
}, l.__r = function(n2) {
  f2 && f2(n2), t2 = 0;
  var r3 = (u2 = n2.__c).__H;
  r3 && (r3.__h.forEach(g2), r3.__h.forEach(j2), r3.__h = []);
}, l.diffed = function(t3) {
  e2 && e2(t3);
  var o3 = t3.__c;
  o3 && o3.__H && o3.__H.__h.length && (i2.push(o3) !== 1 && r2 === l.requestAnimationFrame || ((r2 = l.requestAnimationFrame) || function(n2) {
    var t4, u3 = function() {
      clearTimeout(r3), b2 && cancelAnimationFrame(t4), setTimeout(n2);
    }, r3 = setTimeout(u3, 100);
    b2 && (t4 = requestAnimationFrame(u3));
  })(x2)), u2 = null;
}, l.__c = function(t3, u3) {
  u3.some(function(t4) {
    try {
      t4.__h.forEach(g2), t4.__h = t4.__h.filter(function(n2) {
        return !n2.__ || j2(n2);
      });
    } catch (r3) {
      u3.some(function(n2) {
        n2.__h && (n2.__h = []);
      }), u3 = [], l.__e(r3, t4.__v);
    }
  }), a2 && a2(t3, u3);
}, l.unmount = function(t3) {
  v2 && v2(t3);
  var u3, r3 = t3.__c;
  r3 && r3.__H && (r3.__H.__.forEach(function(n2) {
    try {
      g2(n2);
    } catch (n3) {
      u3 = n3;
    }
  }), u3 && l.__e(u3, r3.__v));
};
var b2 = typeof requestAnimationFrame == "function";
function g2(n2) {
  var t3 = u2, r3 = n2.__c;
  typeof r3 == "function" && (n2.__c = void 0, r3()), u2 = t3;
}
function j2(n2) {
  var t3 = u2;
  n2.__c = n2.__(), u2 = t3;
}
function k2(n2, t3) {
  return !n2 || n2.length !== t3.length || t3.some(function(t4, u3) {
    return t4 !== n2[u3];
  });
}
function w2(n2, t3) {
  return typeof t3 == "function" ? t3(n2) : t3;
}

// client/plugin/components/ContractContext.ts
var ContractContext = D({});
var ContractProvider = ContractContext.Provider;

// client/plugin/helpers/theme.ts
var colors = {
  muted: "#838383",
  gray: "#aaaaaa",
  background: "#151515",
  backgrounddark: "#252525",
  border: "#777",
  borderlight: "#5f5f5f",
  blueBackground: "#0a0a23",
  dfblue: "#00ADE1",
  dfgreen: "#00DC82",
  dfred: "#FF6492",
  dfyellow: "#e8e228",
  dfpurple: "#9189d9",
  dfwhite: "#ffffff",
  dfblack: "#000000",
  dfrare: "#6b68ff",
  dfepic: "#c13cff",
  dflegendary: "#f8b73e",
  dfmythic: "#ff44b7"
};
var clickableLinkStyle = { textDecoration: "underline", cursor: "pointer" };
var listingStyles = {
  listing: {
    display: "grid",
    gridTemplateColumns: "1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr",
    gridColumnGap: "4px",
    textAlign: "center"
  },
  longText: {
    overflow: "hidden",
    "text-overflow": "ellipsis",
    "white-space": "nowrap"
  }
};
var orderStyles = {
  order: {
    display: "grid",
    gridColumnGap: "4px",
    textAlign: "center",
    gridTemplateColumns: "1fr 1fr 1fr 1fr 1fr"
  }
};
var orderPlacerStyles = {
  order: {
    display: "grid",
    gridTemplateColumns: "1fr 1fr",
    columnGap: "4px",
    rowGap: "4px"
  },
  longText: {
    overflow: "hidden",
    "text-overflow": "ellipsis",
    "white-space": "nowrap"
  }
};
var myPlanetstyles = {
  planets: {
    display: "grid",
    gridRowGap: "4px"
  },
  empty: {
    color: "#838383"
  }
};
var faqStyles = {
  question: {
    textDecoration: "underline"
  }
};

// client/plugin/components/Button.tsx
function Button({
  children,
  style,
  theme = "default",
  onClick = () => {
  },
  disabled = false
}) {
  const [isActive, setIsActive] = m2(false);
  return /* @__PURE__ */ v("button", {
    style: { ...styleButton(theme, isActive, disabled), ...style },
    onMouseEnter: () => setIsActive(true),
    onMouseLeave: () => setIsActive(false),
    onClick,
    disabled
  }, children);
}
function styleButton(theme, isActive, disabled) {
  const styleBase = {
    padding: "2px 8px",
    border: 0,
    color: isActive ? colors.dfblack : colors.gray,
    outline: "none",
    cursor: disabled ? "default" : "pointer",
    opacity: disabled ? 0.5 : 1
  };
  return { ...styleBase, ...themeButton(theme, isActive) };
}
function themeButton(theme, isActive) {
  switch (theme) {
    case "blue":
    case "info":
      return {
        background: isActive ? colors.dfblue : colors.backgrounddark
      };
    case "yellow":
    case "warning":
      return {
        background: isActive ? colors.dfyellow : colors.backgrounddark
      };
    case "green":
    case "success":
      return {
        background: isActive ? colors.dfgreen : colors.backgrounddark
      };
    case "red":
    case "danger":
      return {
        background: isActive ? colors.dfred : colors.backgrounddark
      };
    case "gray":
    case "default":
    default:
      return {
        background: isActive ? colors.muted : colors.backgrounddark
      };
  }
}

// client/plugin/components/Navigation.tsx
var styles = {
  container: {
    position: "relative",
    height: "100%"
  },
  tabs: {
    display: "grid",
    position: "absolute",
    padding: "8px",
    gridColumnGap: "8px",
    justifyContent: "flex-start",
    gridTemplateColumns: "auto auto auto auto auto auto 1fr",
    alignItems: "center",
    top: 0,
    width: "100%",
    background: colors.background,
    borderBottom: `1px solid ${colors.borderlight}`
  },
  content: {
    paddingTop: "40px",
    paddingBottom: "40px",
    height: "100%",
    overflowY: "scroll"
  }
};
function Navigation({ tabs }) {
  const [activeTab, setActiveTab] = m2(tabs[0].name);
  const { TabContent } = tabs.find((tab) => tab.name === activeTab);
  const styleTab = (isActive) => ({
    color: isActive ? colors.dfwhite : colors.muted,
    background: colors.background
  });
  return /* @__PURE__ */ v("div", {
    style: styles.container
  }, /* @__PURE__ */ v("div", {
    style: styles.tabs
  }, tabs.map((tab) => /* @__PURE__ */ v(Button, {
    key: tab.name,
    style: styleTab(tab.name === activeTab),
    onClick: () => setActiveTab(tab.name),
    children: tab.name
  })), /* @__PURE__ */ v("div", {
    style: { textAlign: "right" }
  }, /* @__PURE__ */ v(Button, {
    style: { ...styleTab(), marginLeft: "auto", cursor: "auto" },
    disabled: true
  }))), /* @__PURE__ */ v("div", null, "Some random text"), /* @__PURE__ */ v("div", {
    style: styles.content
  }, /* @__PURE__ */ v(TabContent, null)));
}

// client/plugin/components/ErrorLabel.tsx
var styles2 = {
  marginBottom: 16,
  padding: 8,
  color: colors.dfred
};
function ErrorLabel({ error }) {
  return error ? /* @__PURE__ */ v("p", {
    style: styles2
  }, "Error: ", error.message) : null;
}

// client/plugin/components/Loading.tsx
var Loading = ({ length = 5, padding: padding2 = 8 }) => {
  const [indicator, setIndicator] = m2(". ");
  y2(() => {
    let timeout = setTimeout(() => {
      if (indicator.length === length * 2)
        setIndicator(". ");
      else
        setIndicator(indicator + ". ");
    }, 150);
    return () => clearTimeout(timeout);
  }, [indicator]);
  return /* @__PURE__ */ v("div", {
    style: { padding: padding2 }
  }, indicator);
};

// artifacts/contracts/NightMarket.sol/NightMarket.json
var _format = "hh-sol-artifact-1";
var contractName = "NightMarket";
var sourceName = "contracts/NightMarket.sol";
var abi = [
  {
    inputs: [
      {
        internalType: "contract IVerifier",
        name: "_listVerifier",
        type: "address"
      },
      {
        internalType: "contract IVerifier",
        name: "_saleVerifier",
        type: "address"
      },
      {
        internalType: "address",
        name: "_gameContract",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "listingId",
        type: "uint256"
      }
    ],
    name: "Asked",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "planetHash",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "SpacetypeHash",
        type: "uint256"
      }
    ],
    name: "Contract",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "seller",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "listingId",
        type: "uint256"
      }
    ],
    name: "Delisted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "seller",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "listingId",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "locationId",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "biombase",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nonce",
        type: "uint256"
      }
    ],
    name: "Listed",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "listingId",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "orderId",
        type: "uint256"
      }
    ],
    name: "Refunded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "listingId",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "orderId",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nonce",
        type: "uint256"
      }
    ],
    name: "Sold",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_listingId",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_expectedSharedKeyHash",
        type: "uint256"
      }
    ],
    name: "ask",
    outputs: [
      {
        internalType: "uint256",
        name: "orderId",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_listingId",
        type: "uint256"
      }
    ],
    name: "delist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "df",
    outputs: [
      {
        internalType: "contract IGetter",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "listingId",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "orderId",
        type: "uint256"
      }
    ],
    name: "getOrder",
    outputs: [
      {
        components: [
          {
            internalType: "address payable",
            name: "buyer",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "expectedSharedKeyHash",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "created",
            type: "uint256"
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool"
          }
        ],
        internalType: "struct NightMarket.Order",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256[8]",
        name: "_proof",
        type: "uint256[8]"
      },
      {
        internalType: "uint256[4]",
        name: "_coordEncryption",
        type: "uint256[4]"
      },
      {
        internalType: "uint256",
        name: "_nonce",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_keyCommitment",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_locationId",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_biomebase",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_escrowTime",
        type: "uint256"
      }
    ],
    name: "list",
    outputs: [
      {
        internalType: "uint256",
        name: "listingId",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "listVerifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "listings",
    outputs: [
      {
        internalType: "address payable",
        name: "seller",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "keyCommitment",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "escrowTime",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "numOrders",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "isActive",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "numListings",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_listingId",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_orderId",
        type: "uint256"
      }
    ],
    name: "refund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256[8]",
        name: "_proof",
        type: "uint256[8]"
      },
      {
        internalType: "uint256[4]",
        name: "_keyEncryption",
        type: "uint256[4]"
      },
      {
        internalType: "uint256",
        name: "_nonce",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_listingId",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_orderId",
        type: "uint256"
      }
    ],
    name: "sale",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "saleVerifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "zkConstants",
    outputs: [
      {
        internalType: "bool",
        name: "DISABLE_ZK_CHECKS",
        type: "bool"
      },
      {
        internalType: "uint256",
        name: "PLANETHASH_KEY",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "SPACETYPE_KEY",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "BIOMEBASE_KEY",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "PERLIN_MIRROR_X",
        type: "bool"
      },
      {
        internalType: "bool",
        name: "PERLIN_MIRROR_Y",
        type: "bool"
      },
      {
        internalType: "uint256",
        name: "PERLIN_LENGTH_SCALE",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var bytecode = "";
var deployedBytecode = "";
var linkReferences = {};
var deployedLinkReferences = {};
var NightMarket_default = {
  _format,
  contractName,
  sourceName,
  abi,
  bytecode,
  deployedBytecode,
  linkReferences,
  deployedLinkReferences
};

// artifacts/contracts/NightMarketFactory.sol/NightMarketFactory.json
var _format2 = "hh-sol-artifact-1";
var contractName2 = "NightMarketFactory";
var sourceName2 = "contracts/NightMarketFactory.sol";
var abi2 = [
  {
    inputs: [
      {
        internalType: "contract IVerifier",
        name: "_listVerifier",
        type: "address"
      },
      {
        internalType: "contract IVerifier",
        name: "_saleVerifier",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "gameToMarket",
    outputs: [
      {
        internalType: "contract NightMarket",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "listVerifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "marketOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "saleVerifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_gameContract",
        type: "address"
      }
    ],
    name: "setNightMarket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var bytecode2 = "";
var deployedBytecode2 = "0x60806040523480156200001157600080fd5b50600436106200005e5760003560e01c806302689b4b146200006357806309f63780146200008557806310496dde14620000a557806321021dea14620000db5780637a11e33114620000fd575b600080fd5b6200006d62000133565b6040516200007c9190620004da565b60405180910390f35b620000a360048036038101906200009d919062000541565b62000157565b005b620000c36004803603810190620000bd919062000541565b62000236565b604051620000d2919062000598565b60405180910390f35b620000e562000269565b604051620000f49190620005da565b60405180910390f35b6200011b600480360381019062000115919062000541565b6200028d565b6040516200012a919062000608565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b600073ffffffffffffffffffffffffffffffffffffffff166000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000227576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200021e90620006ac565b60405180910390fd5b620002338133620002c0565b50565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084604051620003139062000441565b6200032193929190620006ce565b604051809103906000f0801580156200033e573d6000803e3d6000fd5b509050806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b612ec5806200070c83390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006200049a620004946200048e846200044f565b6200046f565b6200044f565b9050919050565b6000620004ae8262000479565b9050919050565b6000620004c282620004a1565b9050919050565b620004d481620004b5565b82525050565b6000602082019050620004f16000830184620004c9565b92915050565b600080fd5b600062000509826200044f565b9050919050565b6200051b81620004fc565b81146200052757600080fd5b50565b6000813590506200053b8162000510565b92915050565b6000602082840312156200055a5762000559620004f7565b5b60006200056a848285016200052a565b91505092915050565b60006200058082620004a1565b9050919050565b620005928162000573565b82525050565b6000602082019050620005af600083018462000587565b92915050565b6000620005c282620004a1565b9050919050565b620005d481620005b5565b82525050565b6000602082019050620005f16000830184620005c9565b92915050565b6200060281620004fc565b82525050565b60006020820190506200061f6000830184620005f7565b92915050565b600082825260208201905092915050565b7f4e4d20616c726561647920696e69742e20666f722067616d6520636f6e74726160008201527f6374000000000000000000000000000000000000000000000000000000000000602082015250565b60006200069460228362000625565b9150620006a18262000636565b604082019050919050565b60006020820190508181036000830152620006c78162000685565b9050919050565b6000606082019050620006e56000830186620004c9565b620006f46020830185620005c9565b620007036040830184620005f7565b94935050505056fe60e06040523480156200001157600080fd5b5060405162002ec538038062002ec5833981810160405281019062000037919062000328565b60016000819055508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060805173ffffffffffffffffffffffffffffffffffffffff16634d618eb16040518163ffffffff1660e01b815260040160e060405180830381865afa15801562000129573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014f91906200055d565b600360008201518160000160006101000a81548160ff02191690831515021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555060a08201518160040160016101000a81548160ff02191690831515021790555060c082015181600501559050507ff179060018ea5d955f59437b4e8e9e418a99d0022fc149daf2eca65c8ed5af1660036001015460036002015460405162000219929190620005a0565b60405180910390a1505050620005cd565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002668262000239565b9050919050565b60006200027a8262000259565b9050919050565b6200028c816200026d565b81146200029857600080fd5b50565b600081519050620002ac8162000281565b92915050565b6000620002bf8262000259565b9050919050565b620002d181620002b2565b8114620002dd57600080fd5b50565b600081519050620002f181620002c6565b92915050565b620003028162000259565b81146200030e57600080fd5b50565b6000815190506200032281620002f7565b92915050565b60008060006060848603121562000344576200034362000234565b5b600062000354868287016200029b565b93505060206200036786828701620002e0565b92505060406200037a8682870162000311565b9150509250925092565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003d48262000389565b810181811067ffffffffffffffff82111715620003f657620003f56200039a565b5b80604052505050565b60006200040b6200022a565b9050620004198282620003c9565b919050565b60008115159050919050565b62000435816200041e565b81146200044157600080fd5b50565b60008151905062000455816200042a565b92915050565b6000819050919050565b62000470816200045b565b81146200047c57600080fd5b50565b600081519050620004908162000465565b92915050565b600060e08284031215620004af57620004ae62000384565b5b620004bb60e0620003ff565b90506000620004cd8482850162000444565b6000830152506020620004e3848285016200047f565b6020830152506040620004f9848285016200047f565b60408301525060606200050f848285016200047f565b6060830152506080620005258482850162000444565b60808301525060a06200053b8482850162000444565b60a08301525060c062000551848285016200047f565b60c08301525092915050565b600060e0828403121562000576576200057562000234565b5b6000620005868482850162000496565b91505092915050565b6200059a816200045b565b82525050565b6000604082019050620005b760008301856200058f565b620005c660208301846200058f565b9392505050565b60805160a05160c0516128ac6200061960003960008181610316015261119f0152600081816102f20152610b2a0152600081816107f5015281816108d40152610ecd01526128ac6000f3fe6080604052600436106100a75760003560e01c806376376eca1161006457806376376eca146101d557806390af04c114610206578063964bc33f146102315780639d35f5941461025a578063b1d8734214610285578063de74e57b146102ae576100a7565b806302689b4b146100ac57806321021dea146100d75780635af36e3e146101025780635e1a35731461012b5780636f941083146101685780637613df7b14610198575b600080fd5b3480156100b857600080fd5b506100c16102f0565b6040516100ce91906114bc565b60405180910390f35b3480156100e357600080fd5b506100ec610314565b6040516100f991906114f8565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190611558565b610338565b005b34801561013757600080fd5b50610152600480360381019061014d9190611558565b610543565b60405161015f9190611638565b60405180910390f35b610182600480360381019061017d9190611558565b61060a565b60405161018f9190611662565b60405180910390f35b3480156101a457600080fd5b506101bf60048036038101906101ba9190611875565b6107f0565b6040516101cc9190611662565b60405180910390f35b3480156101e157600080fd5b506101ea610d0f565b6040516101fd9796959493929190611941565b60405180910390f35b34801561021257600080fd5b5061021b610d66565b6040516102289190611662565b60405180910390f35b34801561023d57600080fd5b50610258600480360381019061025391906119b0565b610d6c565b005b34801561026657600080fd5b5061026f610ecb565b60405161027c91906119fe565b60405180910390f35b34801561029157600080fd5b506102ac60048036038101906102a79190611a19565b610eef565b005b3480156102ba57600080fd5b506102d560048036038101906102d091906119b0565b611350565b6040516102e796959493929190611aa8565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026000540361037d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037490611b66565b60405180910390fd5b60026000819055506000600260008481526020019081526020016000209050600081600601600084815260200190815260200160002090508060030160009054906101000a900460ff16610406576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fd90611bd2565b60405180910390fd5b610418816002015483600301546113b9565b8061043257508160050160009054906101000a900460ff16155b610471576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046890611c64565b60405180910390fd5b60008160030160006101000a81548160ff0219169083151502179055508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc83600201549081150290604051600060405180830381858888f193505050501580156104fc573d6000803e3d6000fd5b50837fb7c1f9298a18c36af08bd57eabbfbeb04695f24d0438f67614741ec15fb5c4a98460405161052d9190611662565b60405180910390a2505060016000819055505050565b61054b6113fd565b6002600084815260200190815260200160002060060160008381526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff161515151581525050905092915050565b6000806002600085815260200190815260200160002090508060050160009054906101000a900460ff16610673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066a90611cd0565b60405180910390fd5b806002015434146106b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b090611d3c565b60405180910390fd5b60405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020014381526020016001151581525081600601600083600401600081548092919061070e90611d8b565b91905055815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550905050833373ffffffffffffffffffffffffffffffffffffffff167f1a73e26a67085be53ea94a528b889060197d2beef2d0b53b2f602aa367a902ae60405160405180910390a3806004015491505092915050565b6000847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ccf738e9826040518263ffffffff1660e01b815260040161084c9190611662565b6101a060405180830381865afa15801561086a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088e9190611f76565b600001516108d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c890612016565b60405180910390fd5b807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663edb7ffe4836040518263ffffffff1660e01b815260040161092b9190611662565b608060405180830381865afa158015610948573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096c91906120ec565b60000151036109b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a79061218b565b60405180910390fd5b7001000000000000000000000000000000008810610a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fa906121f7565b60405180910390fd5b6000604051806101e0016040528060036001015481526020016003800154815260200160036002015481526020016003600501548152602001610a57600360040160009054906101000a900460ff166113dd565b8152602001610a77600360040160019054906101000a900460ff166113dd565b81526020018b600060048110610a9057610a8f612217565b5b602002015181526020018b600160048110610aae57610aad612217565b5b602002015181526020018b600260048110610acc57610acb612217565b5b602002015181526020018b600360048110610aea57610ae9612217565b5b602002015181526020018a81526020018981526020018881526020018781526020013373ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e80436b08c836040518363ffffffff1660e01b8152600401610b83929190612366565b602060405180830381865afa158015610ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc49190612391565b610c03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfa90612430565b60405180910390fd5b60016000815480929190610c1690611d8b565b9190505592506000600260008581526020019081526020016000209050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555088816001018190555085816002018190555084816003018190555060018160050160006101000a81548160ff02191690831515021790555087843373ffffffffffffffffffffffffffffffffffffffff167f54adbd68a9eccbfd0f79cc8a60ad65f7f29b687a7842d7dcf2e7154060002c708a8e604051610cf8929190612450565b60405180910390a450505098975050505050505050565b60038060000160009054906101000a900460ff16908060010154908060020154908060030154908060040160009054906101000a900460ff16908060040160019054906101000a900460ff16908060050154905087565b60015481565b60006002600083815260200190815260200160002090508060050160009054906101000a900460ff16610dd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dcb906124c5565b60405180910390fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5d90612557565b60405180910390fd5b60008160050160006101000a81548160ff021916908315150217905550813373ffffffffffffffffffffffffffffffffffffffff167f070be797ebb4cddc2d58b4fe8de5939531dd771aaed937a59fbe5c9dc8a5d09960405160405180910390a35050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260005403610f34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2b90611b66565b60405180910390fd5b600260008190555060006002600084815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610fe5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdc906125c3565b60405180910390fd5b8060050160009054906101000a900460ff16611036576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102d9061262f565b60405180910390fd5b7b040000000000000000000000000000000000000000000000000000008410611094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108b9061269b565b60405180910390fd5b600081600601600084815260200190815260200160002090508060030160009054906101000a900460ff166110fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f590612707565b60405180910390fd5b60006040518060e001604052808860006004811061111f5761111e612217565b5b602002015181526020018860016004811061113d5761113c612217565b5b602002015181526020018860026004811061115b5761115a612217565b5b602002015181526020018860036004811061117957611178612217565b5b6020020151815260200187815260200184600101548152602001836001015481525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ee6a60ae89836040518363ffffffff1660e01b81526004016111f89291906127ab565b602060405180830381865afa158015611215573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112399190612391565b611278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126f90612822565b60405180910390fd5b60008260030160006101000a81548160ff0219169083151502179055508260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc84600201549081150290604051600060405180830381858888f19350505050158015611303573d6000803e3d6000fd5b50847fb94ad6b739f9bef4a950b4e9ce06c0f6f6bcfc31bea46cc96187fb7cd1066cab8588604051611336929190612450565b60405180910390a250505060016000819055505050505050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154908060050160009054906101000a900460ff16905086565b6000806113cf83436113e790919063ffffffff16565b905083811191505092915050565b6000819050919050565b600081836113f59190612842565b905092915050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000151581525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061148261147d6114788461143d565b61145d565b61143d565b9050919050565b600061149482611467565b9050919050565b60006114a682611489565b9050919050565b6114b68161149b565b82525050565b60006020820190506114d160008301846114ad565b92915050565b60006114e282611489565b9050919050565b6114f2816114d7565b82525050565b600060208201905061150d60008301846114e9565b92915050565b6000604051905090565b600080fd5b6000819050919050565b61153581611522565b811461154057600080fd5b50565b6000813590506115528161152c565b92915050565b6000806040838503121561156f5761156e61151d565b5b600061157d85828601611543565b925050602061158e85828601611543565b9150509250929050565b60006115a38261143d565b9050919050565b6115b381611598565b82525050565b6115c281611522565b82525050565b60008115159050919050565b6115dd816115c8565b82525050565b6080820160008201516115f960008501826115aa565b50602082015161160c60208501826115b9565b50604082015161161f60408501826115b9565b50606082015161163260608501826115d4565b50505050565b600060808201905061164d60008301846115e3565b92915050565b61165c81611522565b82525050565b60006020820190506116776000830184611653565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116cb82611682565b810181811067ffffffffffffffff821117156116ea576116e9611693565b5b80604052505050565b60006116fd611513565b905061170982826116c2565b919050565b600067ffffffffffffffff82111561172957611728611693565b5b602082029050919050565b600080fd5b600061174c6117478461170e565b6116f3565b9050806020840283018581111561176657611765611734565b5b835b8181101561178f578061177b8882611543565b845260208401935050602081019050611768565b5050509392505050565b600082601f8301126117ae576117ad61167d565b5b60086117bb848285611739565b91505092915050565b600067ffffffffffffffff8211156117df576117de611693565b5b602082029050919050565b60006117fd6117f8846117c4565b6116f3565b9050806020840283018581111561181757611816611734565b5b835b81811015611840578061182c8882611543565b845260208401935050602081019050611819565b5050509392505050565b600082601f83011261185f5761185e61167d565b5b600461186c8482856117ea565b91505092915050565b600080600080600080600080610240898b0312156118965761189561151d565b5b60006118a48b828c01611799565b9850506101006118b68b828c0161184a565b9750506101806118c88b828c01611543565b9650506101a06118da8b828c01611543565b9550506101c06118ec8b828c01611543565b9450506101e06118fe8b828c01611543565b9350506102006119108b828c01611543565b9250506102206119228b828c01611543565b9150509295985092959890939650565b61193b816115c8565b82525050565b600060e082019050611956600083018a611932565b6119636020830189611653565b6119706040830188611653565b61197d6060830187611653565b61198a6080830186611932565b61199760a0830185611932565b6119a460c0830184611653565b98975050505050505050565b6000602082840312156119c6576119c561151d565b5b60006119d484828501611543565b91505092915050565b60006119e882611489565b9050919050565b6119f8816119dd565b82525050565b6000602082019050611a1360008301846119ef565b92915050565b60008060008060006101e08688031215611a3657611a3561151d565b5b6000611a4488828901611799565b955050610100611a568882890161184a565b945050610180611a6888828901611543565b9350506101a0611a7a88828901611543565b9250506101c0611a8c88828901611543565b9150509295509295909350565b611aa281611598565b82525050565b600060c082019050611abd6000830189611a99565b611aca6020830188611653565b611ad76040830187611653565b611ae46060830186611653565b611af16080830185611653565b611afe60a0830184611932565b979650505050505050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611b50601f83611b09565b9150611b5b82611b1a565b602082019050919050565b60006020820190508181036000830152611b7f81611b43565b9050919050565b7f4f726465722070726576696f75736c7920726566756e64656400000000000000600082015250565b6000611bbc601983611b09565b9150611bc782611b86565b602082019050919050565b60006020820190508181036000830152611beb81611baf565b9050919050565b7f4f72646572206e6f7420726566756e6461626c6520617420746869732074696d60008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c4e602183611b09565b9150611c5982611bf2565b604082019050919050565b60006020820190508181036000830152611c7d81611c41565b9050919050565b7f4c697374696e67206973206e6f206c6f6e676572206163746976650000000000600082015250565b6000611cba601b83611b09565b9150611cc582611c84565b602082019050919050565b60006020820190508181036000830152611ce981611cad565b9050919050565b7f5061796d656e7420697320696e636f7272656374000000000000000000000000600082015250565b6000611d26601483611b09565b9150611d3182611cf0565b602082019050919050565b60006020820190508181036000830152611d5581611d19565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d9682611522565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611dc857611dc7611d5c565b5b600182019050919050565b600080fd5b611de1816115c8565b8114611dec57600080fd5b50565b600081519050611dfe81611dd8565b92915050565b600081519050611e138161152c565b92915050565b60048110611e2657600080fd5b50565b600081519050611e3881611e19565b92915050565b60006101a08284031215611e5557611e54611dd3565b5b611e606101a06116f3565b90506000611e7084828501611def565b6000830152506020611e8484828501611e04565b6020830152506040611e9884828501611e04565b6040830152506060611eac84828501611e04565b6060830152506080611ec084828501611e29565b60808301525060a0611ed484828501611e04565b60a08301525060c0611ee884828501611e04565b60c08301525060e0611efc84828501611e04565b60e083015250610100611f1184828501611e04565b61010083015250610120611f2784828501611def565b61012083015250610140611f3d84828501611e04565b61014083015250610160611f5384828501611def565b61016083015250610180611f6984828501611e04565b6101808301525092915050565b60006101a08284031215611f8d57611f8c61151d565b5b6000611f9b84828501611e3e565b91505092915050565b7f506c616e657420646f65736e27742065786974206f72206973206e6f7420696e60008201527f697469616c697a65640000000000000000000000000000000000000000000000602082015250565b6000612000602983611b09565b915061200b82611fa4565b604082019050919050565b6000602082019050818103600083015261202f81611ff3565b9050919050565b60006120418261143d565b9050919050565b61205181612036565b811461205c57600080fd5b50565b60008151905061206e81612048565b92915050565b60006080828403121561208a57612089611dd3565b5b61209460806116f3565b905060006120a484828501611e04565b60008301525060206120b884828501611e04565b60208301525060406120cc84828501611e04565b60408301525060606120e08482850161205f565b60608301525092915050565b6000608082840312156121025761210161151d565b5b600061211084828501612074565b91505092915050565b7f506c616e657420636f6f7264696e61746573206861766520616c72656164792060008201527f6265656e2072657665616c656400000000000000000000000000000000000000602082015250565b6000612175602d83611b09565b915061218082612119565b604082019050919050565b600060208201905081810360008301526121a481612168565b9050919050565b7f4e6f6e6365206d75737420626520736d616c6c6572207468616e20325e313238600082015250565b60006121e1602083611b09565b91506121ec826121ab565b602082019050919050565b60006020820190508181036000830152612210816121d4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060089050919050565b600081905092915050565b6000819050919050565b600061227283836115b9565b60208301905092915050565b6000602082019050919050565b61229481612246565b61229e8184612251565b92506122a98261225c565b8060005b838110156122da5781516122c18782612266565b96506122cc8361227e565b9250506001810190506122ad565b505050505050565b6000600f9050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b612318816122e2565b61232281846122ed565b925061232d826122f8565b8060005b8381101561235e5781516123458782612266565b965061235083612302565b925050600181019050612331565b505050505050565b60006102e08201905061237c600083018561228b565b61238a61010083018461230f565b9392505050565b6000602082840312156123a7576123a661151d565b5b60006123b584828501611def565b91505092915050565b7f53656c6c6572206c69737420636f6f7264696e617465733a20696e76616c696460008201527f2070726f6f660000000000000000000000000000000000000000000000000000602082015250565b600061241a602683611b09565b9150612425826123be565b604082019050919050565b600060208201905081810360008301526124498161240d565b9050919050565b60006040820190506124656000830185611653565b6124726020830184611653565b9392505050565b7f4c697374696e6720697320616c726561647920696e6163746976650000000000600082015250565b60006124af601b83611b09565b91506124ba82612479565b602082019050919050565b600060208201905081810360008301526124de816124a2565b9050919050565b7f4f6e6c792073656c6c65722063616e2064656c697374207468656972206c697360008201527f74696e6700000000000000000000000000000000000000000000000000000000602082015250565b6000612541602483611b09565b915061254c826124e5565b604082019050919050565b6000602082019050818103600083015261257081612534565b9050919050565b7f4f6e6c792073656c6c65722063616e20636c6f73652073616c65000000000000600082015250565b60006125ad601a83611b09565b91506125b882612577565b602082019050919050565b600060208201905081810360008301526125dc816125a0565b9050919050565b7f4c697374696e6720697320696e61637469766500000000000000000000000000600082015250565b6000612619601383611b09565b9150612624826125e3565b602082019050919050565b600060208201905081810360008301526126488161260c565b9050919050565b7f4e6f6e6365206d75737420626520736d616c6c6572207468616e20325e323138600082015250565b6000612685602083611b09565b91506126908261264f565b602082019050919050565b600060208201905081810360008301526126b481612678565b9050919050565b7f4f7264657220697320696e616374697665000000000000000000000000000000600082015250565b60006126f1601183611b09565b91506126fc826126bb565b602082019050919050565b60006020820190508181036000830152612720816126e4565b9050919050565b600060079050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b61275d81612727565b6127678184612732565b92506127728261273d565b8060005b838110156127a357815161278a8782612266565b965061279583612747565b925050600181019050612776565b505050505050565b60006101e0820190506127c1600083018561228b565b6127cf610100830184612754565b9392505050565b7f73616c652070726f6f6620696e76616c69640000000000000000000000000000600082015250565b600061280c601283611b09565b9150612817826127d6565b602082019050919050565b6000602082019050818103600083015261283b816127ff565b9050919050565b600061284d82611522565b915061285883611522565b92508282101561286b5761286a611d5c565b5b82820390509291505056fea264697066735822122081d5a22b7b83a8623235873849b0a6e3e89e312086c604cbe9f501f4de977c9e64736f6c634300080d0033a2646970667358221220148b411c75e738d71ecf81b7b2e5e60ebdc8af5d05b945bef11e739ff3ef725164736f6c634300080d0033";
var linkReferences2 = {};
var deployedLinkReferences2 = {};
var NightMarketFactory_default = {
  _format: _format2,
  contractName: contractName2,
  sourceName: sourceName2,
  abi: abi2,
  bytecode: bytecode2,
  deployedBytecode: deployedBytecode2,
  linkReferences: linkReferences2,
  deployedLinkReferences: deployedLinkReferences2
};

// client/plugin/helpers/constants.ts
var NIGHTMARKET_ABI = NightMarket_default.abi;
var NIGHTMARKET_FACTORY_ADDR = "0xF950500E618a83A70D8C4F5BC2A3fd4ed3f69079";
var NIGHTMARKET_FACTORY_ABI = NightMarketFactory_default.abi;
var POLL_INTERVAL = 5e3;
var LIST_ZKEY_URL = "https://raw.githubusercontent.com/factorgroup/nightmarket/main/client/list/list.zkey";
var LIST_WASM_URL = "https://raw.githubusercontent.com/factorgroup/nightmarket/main/client/list/list.wasm";
var SALE_ZKEY_URL = "https://raw.githubusercontent.com/factorgroup/nightmarket/main/client/sale/sale.zkey";
var SALE_WASM_URL = "https://raw.githubusercontent.com/factorgroup/nightmarket/main/client/sale/sale.wasm";

// client/plugin/hooks/use-myplanets.ts
function useMyPlanets() {
  const [myPlanets, setMyPlanets] = m2([]);
  const [loading, setLoading] = m2(true);
  const [error, setError] = m2();
  y2(() => {
    const fetchMyPlanets = () => {
      const planetsIter = df.getAllPlanets();
      const planets = [];
      for (var planet of planetsIter) {
        if (df.getLocationOfPlanet(planet.locationId) && !planet.coordsRevealed) {
          planets.push(planet);
        }
      }
      setMyPlanets(planets);
      setLoading(false);
    };
    fetchMyPlanets();
    const poll2 = setInterval(fetchMyPlanets, POLL_INTERVAL * 6);
    return () => clearInterval(poll2);
  }, []);
  return {
    myPlanets,
    loading,
    error
  };
}

// client/plugin/components/PlanetItem.tsx
var import_procedural = __toModule(require_dist7());
var styles3 = {
  planet: {
    display: "grid",
    gridTemplateColumns: "2.75fr 2fr 1fr 2fr 1fr 1fr 1.75fr",
    gridColumnGap: "8px",
    textAlign: "left"
  },
  longText: {
    overflow: "hidden",
    "text-overflow": "ellipsis",
    "white-space": "nowrap"
  }
};
function PlanetItem({ planet, action }) {
  return /* @__PURE__ */ v("div", {
    style: styles3.planet
  }, [
    /* @__PURE__ */ v("div", {
      style: styles3.longText
    }, (0, import_procedural.getPlanetName)(planet)),
    /* @__PURE__ */ v("div", {
      style: styles3.longText
    }, planet.owner == 0 ? "unowned" : planet.owner),
    /* @__PURE__ */ v("div", null, planet.planetLevel),
    /* @__PURE__ */ v("div", {
      style: styles3.longText
    }, planet.energy),
    /* @__PURE__ */ v("div", null, planet.silver)
  ], /* @__PURE__ */ v("div", null, action));
}

// client/plugin/components/MyPlanets.tsx
function MyPlanets({
  emptyState,
  planets,
  setActivePlanet
}) {
  console.log("Calling MyPlanets");
  const planetsFormatted = planets.map((planet) => /* @__PURE__ */ v(PlanetItem, {
    key: planet.locationId,
    planet,
    action: setActivePlanet(planet)
  }));
  return /* @__PURE__ */ v("div", null, /* @__PURE__ */ v("div", {
    style: myPlanetstyles.planets
  }, planetsFormatted));
}

// client/plugin/components/Input.tsx
function NumInput({
  value,
  onChange,
  style = {},
  type,
  placeholder = 0,
  min = 0,
  step = 1,
  required = true,
  name: name2
}) {
  const inputStyle = {
    outline: "none",
    background: "rgb(21, 21, 21)",
    color: "rgb(131, 131, 131)",
    borderRadius: "4px",
    border: "1px solid rgb(95, 95, 95)",
    padding: "0 4px",
    ...style
  };
  return /* @__PURE__ */ v("input", {
    name: name2,
    style: inputStyle,
    type,
    min,
    value,
    step,
    placeholder: placeholder.toString(),
    onInput: (e4) => onChange(e4.target.value),
    required
  });
}
function TextInput({
  value,
  onChange,
  style = {},
  type,
  placeholder = "",
  required = true,
  name: name2
}) {
  const inputStyle = {
    outline: "none",
    background: "rgb(21, 21, 21)",
    color: "rgb(131, 131, 131)",
    borderRadius: "4px",
    border: "1px solid rgb(95, 95, 95)",
    padding: "0 4px",
    ...style
  };
  return /* @__PURE__ */ v("input", {
    name: name2,
    style: inputStyle,
    type,
    value,
    placeholder,
    onInput: (e4) => onChange(e4.target.value),
    required
  });
}

// client/plugin/hooks/use-contract.ts
var useContract = () => F(ContractContext);

// client/plugin/components/SignerContext.tsx
var SignerContext = D({
  address: "",
  signer: {}
});
var MySignerProvider = (props) => {
  const [address, setAddress] = m2("");
  y2(() => {
    const setInfos = async () => {
      const address2 = await props.signer.getAddress();
      setAddress(address2);
    };
    setInfos();
  }, [props.signer]);
  return /* @__PURE__ */ v(SignerContext.Provider, {
    value: { signer: props.signer, address },
    children: props.children
  });
};

// client/plugin/hooks/use-signer.ts
var useSigner = () => F(SignerContext);

// client/plugin/components/MyTransactionContext.tsx
var MyTransactionContext = D([]);
var MyTransactionProvider = (props) => {
  const [transactions, setTransactions] = m2(props.txs);
  const { market } = useContract();
  const signer = useSigner();
  return /* @__PURE__ */ v(MyTransactionContext.Provider, {
    value: { transactions, setTransactions },
    children: props.children
  });
};

// client/plugin/hooks/use-mytransactions.ts
var useTransactions = () => {
  const { transactions: myTransactions, setTransactions } = F(MyTransactionContext);
  return {
    myTransactions,
    setTransactions,
    addTransaction: (a3) => setTransactions([...myTransactions, a3]),
    isTrxPending: (a3) => myTransactions.map((b3) => b3.id).includes(a3.id)
  };
};

// client/plugin/helpers/poseidon.ts
import { Scalar, ZqField, utils } from "https://cdn.skypack.dev/ffjavascript-browser@0.0.3";
var { unstringifyBigInts } = utils;
var F2 = new ZqField(Scalar.fromString("21888242871839275222246405745257275088548364400416034343698204186575808495617"));
var two128 = F2.e("340282366920938463463374607431768211456");
function assert(expr, message) {
  if (!Boolean(expr)) {
    throw new Error(message || "unknown assertion error");
  }
}
function encrypt(msg, key2, nonce) {
  assert(Array.isArray(msg), "Poseidon encrypt: msg is not Array");
  assert(Array.isArray(key2), "Poseidon encrypt: key is not Array");
  assert(key2.length === 2, "Poseidon encrypt: key length needs to be 2");
  msg = msg.map((x3) => F2.e(x3));
  assert(nonce < two128, "nonce must be less than 2 ^ 128");
  const message = [...msg];
  while (message.length % 3 > 0) {
    message.push(F2.zero);
  }
  let cipherLength = message.length;
  let state = [
    F2.zero,
    F2.e(key2[0]),
    F2.e(key2[1]),
    F2.add(F2.e(nonce), F2.mul(F2.e(msg.length), two128))
  ];
  const ciphertext = [];
  for (let i3 = 0; i3 < cipherLength / 3; i3++) {
    state = poseidonPerm(state);
    state[1] = F2.add(state[1], F2.e(message[i3 * 3]));
    state[2] = F2.add(state[2], F2.e(message[i3 * 3 + 1]));
    state[3] = F2.add(state[3], F2.e(message[i3 * 3 + 2]));
    ciphertext.push(state[1]);
    ciphertext.push(state[2]);
    ciphertext.push(state[3]);
  }
  state = poseidonPerm(state);
  ciphertext.push(state[1]);
  return ciphertext;
}
function decrypt(ciphertext, key2, nonce, length) {
  assert(Array.isArray(ciphertext), "Poseidon decrypt: ciphertext must be array");
  assert(Array.isArray(key2), "Poseidon decrypt: key must be array");
  assert(key2.length === 2, "Poseidon decrypt: key length must be 2");
  let state = [
    F2.zero,
    F2.e(key2[0]),
    F2.e(key2[1]),
    F2.add(F2.e(nonce), F2.mul(F2.e(length), two128))
  ];
  const message = [];
  let n2 = Math.floor(ciphertext.length / 3);
  for (let i3 = 0; i3 < n2; i3++) {
    state = poseidonPerm(state);
    message.push(F2.sub(ciphertext[i3 * 3], state[1]));
    message.push(F2.sub(ciphertext[i3 * 3 + 1], state[2]));
    message.push(F2.sub(ciphertext[i3 * 3 + 2], state[3]));
    state[1] = ciphertext[i3 * 3];
    state[2] = ciphertext[i3 * 3 + 1];
    state[3] = ciphertext[i3 * 3 + 2];
  }
  if (length > 3) {
    if (length % 3 === 2) {
      assert(F2.eq(message[message.length - 1], F2.zero), "Poseidon decrypt: length error 1");
    } else if (length % 3 === 1) {
      assert(F2.eq(message[message.length - 1], F2.zero), "Poseidon decrypt: length error 2");
      assert(F2.eq(message[message.length - 2], F2.zero), "Poseidon decrypt: length error 3");
    }
  }
  state = poseidonPerm(state);
  assert(F2.eq(ciphertext[ciphertext.length - 1], state[1]), "Poseidon decrypt: last ciphertext bad");
  return message.slice(0, length);
}
var { C: C2, M: M2 } = unstringifyBigInts(require_poseidon_constants());
var N_ROUNDS_F = 8;
var N_ROUNDS_P = [56, 57, 56, 60, 60, 63, 64, 63];
var pow5 = (a3) => F2.mul(a3, F2.square(F2.square(a3, a3)));
function poseidonPerm(inputs) {
  assert(inputs.length > 0, "PoseidonPerm: input length but not be zero");
  assert(inputs.length < N_ROUNDS_P.length, "PoseidonPerm: input length must be smaller than n rounds p");
  const t3 = inputs.length;
  const nRoundsF = N_ROUNDS_F;
  const nRoundsP = N_ROUNDS_P[t3 - 2];
  let state = inputs.map((a3) => F2.e(a3));
  for (let r3 = 0; r3 < nRoundsF + nRoundsP; r3++) {
    state = state.map((a3, i3) => F2.add(a3, C2[t3 - 2][r3 * t3 + i3]));
    if (r3 < nRoundsF / 2 || r3 >= nRoundsF / 2 + nRoundsP) {
      state = state.map((a3) => pow5(a3));
    } else {
      state[0] = pow5(state[0]);
    }
    state = state.map((_3, i3) => state.reduce((acc, a3, j3) => F2.add(acc, F2.mul(M2[t3 - 2][i3][j3], a3)), F2.zero));
  }
  return state.map((x3) => F2.normalize(x3));
}

// client/plugin/helpers/snarks.ts
import { BigNumber } from "https://cdn.skypack.dev/ethers";

// client/plugin/helpers/snarkjs.js
var hexLen = [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4];
function fromString$3(s2, radix) {
  if (!radix || radix == 10) {
    return BigInt(s2);
  } else if (radix == 16) {
    if (s2.slice(0, 2) == "0x") {
      return BigInt(s2);
    } else {
      return BigInt("0x" + s2);
    }
  }
}
var e$2 = fromString$3;
function fromArray$3(a3, radix) {
  let acc = BigInt(0);
  radix = BigInt(radix);
  for (let i3 = 0; i3 < a3.length; i3++) {
    acc = acc * radix + BigInt(a3[i3]);
  }
  return acc;
}
function bitLength$2(a3) {
  const aS = a3.toString(16);
  return (aS.length - 1) * 4 + hexLen[parseInt(aS[0], 16)];
}
function isNegative$2(a3) {
  return BigInt(a3) < BigInt(0);
}
function isZero$2(a3) {
  return !a3;
}
function shiftLeft$2(a3, n2) {
  return BigInt(a3) << BigInt(n2);
}
function shiftRight$2(a3, n2) {
  return BigInt(a3) >> BigInt(n2);
}
var shl$2 = shiftLeft$2;
var shr$2 = shiftRight$2;
function isOdd$2(a3) {
  return (BigInt(a3) & BigInt(1)) == BigInt(1);
}
function naf$2(n2) {
  let E = BigInt(n2);
  const res = [];
  while (E) {
    if (E & BigInt(1)) {
      const z2 = 2 - Number(E % BigInt(4));
      res.push(z2);
      E = E - BigInt(z2);
    } else {
      res.push(0);
    }
    E = E >> BigInt(1);
  }
  return res;
}
function bits$2(n2) {
  let E = BigInt(n2);
  const res = [];
  while (E) {
    if (E & BigInt(1)) {
      res.push(1);
    } else {
      res.push(0);
    }
    E = E >> BigInt(1);
  }
  return res;
}
function toNumber$3(s2) {
  if (s2 > BigInt(Number.MAX_SAFE_INTEGER)) {
    throw new Error("Number too big");
  }
  return Number(s2);
}
function toArray$2(s2, radix) {
  const res = [];
  let rem = BigInt(s2);
  radix = BigInt(radix);
  while (rem) {
    res.unshift(Number(rem % radix));
    rem = rem / radix;
  }
  return res;
}
function add$2(a3, b3) {
  return BigInt(a3) + BigInt(b3);
}
function sub$2(a3, b3) {
  return BigInt(a3) - BigInt(b3);
}
function neg$2(a3) {
  return -BigInt(a3);
}
function mul$2(a3, b3) {
  return BigInt(a3) * BigInt(b3);
}
function square$2(a3) {
  return BigInt(a3) * BigInt(a3);
}
function pow$2(a3, b3) {
  return BigInt(a3) ** BigInt(b3);
}
function exp$3(a3, b3) {
  return BigInt(a3) ** BigInt(b3);
}
function abs$2(a3) {
  return BigInt(a3) >= 0 ? BigInt(a3) : -BigInt(a3);
}
function div$2(a3, b3) {
  return BigInt(a3) / BigInt(b3);
}
function mod$2(a3, b3) {
  return BigInt(a3) % BigInt(b3);
}
function eq$2(a3, b3) {
  return BigInt(a3) == BigInt(b3);
}
function neq$2(a3, b3) {
  return BigInt(a3) != BigInt(b3);
}
function lt$2(a3, b3) {
  return BigInt(a3) < BigInt(b3);
}
function gt$2(a3, b3) {
  return BigInt(a3) > BigInt(b3);
}
function leq$2(a3, b3) {
  return BigInt(a3) <= BigInt(b3);
}
function geq$2(a3, b3) {
  return BigInt(a3) >= BigInt(b3);
}
function band$2(a3, b3) {
  return BigInt(a3) & BigInt(b3);
}
function bor$2(a3, b3) {
  return BigInt(a3) | BigInt(b3);
}
function bxor$2(a3, b3) {
  return BigInt(a3) ^ BigInt(b3);
}
function land$2(a3, b3) {
  return BigInt(a3) && BigInt(b3);
}
function lor$2(a3, b3) {
  return BigInt(a3) || BigInt(b3);
}
function lnot$2(a3) {
  return !BigInt(a3);
}
var Scalar_native = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  fromString: fromString$3,
  e: e$2,
  fromArray: fromArray$3,
  bitLength: bitLength$2,
  isNegative: isNegative$2,
  isZero: isZero$2,
  shiftLeft: shiftLeft$2,
  shiftRight: shiftRight$2,
  shl: shl$2,
  shr: shr$2,
  isOdd: isOdd$2,
  naf: naf$2,
  bits: bits$2,
  toNumber: toNumber$3,
  toArray: toArray$2,
  add: add$2,
  sub: sub$2,
  neg: neg$2,
  mul: mul$2,
  square: square$2,
  pow: pow$2,
  exp: exp$3,
  abs: abs$2,
  div: div$2,
  mod: mod$2,
  eq: eq$2,
  neq: neq$2,
  lt: lt$2,
  gt: gt$2,
  leq: leq$2,
  geq: geq$2,
  band: band$2,
  bor: bor$2,
  bxor: bxor$2,
  land: land$2,
  lor: lor$2,
  lnot: lnot$2
});
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function createCommonjsModule(fn) {
  var module = { exports: {} };
  return fn(module, module.exports), module.exports;
}
var BigInteger = createCommonjsModule(function(module) {
  var bigInt = function(undefined$1) {
    var BASE = 1e7, LOG_BASE = 7, MAX_INT = 9007199254740992, MAX_INT_ARR = smallToArray(MAX_INT), DEFAULT_ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz";
    var supportsNativeBigInt2 = typeof BigInt === "function";
    function Integer(v3, radix, alphabet2, caseSensitive) {
      if (typeof v3 === "undefined")
        return Integer[0];
      if (typeof radix !== "undefined")
        return +radix === 10 && !alphabet2 ? parseValue(v3) : parseBase(v3, radix, alphabet2, caseSensitive);
      return parseValue(v3);
    }
    function BigInteger2(value, sign3) {
      this.value = value;
      this.sign = sign3;
      this.isSmall = false;
    }
    BigInteger2.prototype = Object.create(Integer.prototype);
    function SmallInteger(value) {
      this.value = value;
      this.sign = value < 0;
      this.isSmall = true;
    }
    SmallInteger.prototype = Object.create(Integer.prototype);
    function NativeBigInt(value) {
      this.value = value;
    }
    NativeBigInt.prototype = Object.create(Integer.prototype);
    function isPrecise(n2) {
      return -MAX_INT < n2 && n2 < MAX_INT;
    }
    function smallToArray(n2) {
      if (n2 < 1e7)
        return [n2];
      if (n2 < 1e14)
        return [n2 % 1e7, Math.floor(n2 / 1e7)];
      return [n2 % 1e7, Math.floor(n2 / 1e7) % 1e7, Math.floor(n2 / 1e14)];
    }
    function arrayToSmall(arr) {
      trim(arr);
      var length = arr.length;
      if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {
        switch (length) {
          case 0:
            return 0;
          case 1:
            return arr[0];
          case 2:
            return arr[0] + arr[1] * BASE;
          default:
            return arr[0] + (arr[1] + arr[2] * BASE) * BASE;
        }
      }
      return arr;
    }
    function trim(v3) {
      var i4 = v3.length;
      while (v3[--i4] === 0)
        ;
      v3.length = i4 + 1;
    }
    function createArray(length) {
      var x3 = new Array(length);
      var i4 = -1;
      while (++i4 < length) {
        x3[i4] = 0;
      }
      return x3;
    }
    function truncate(n2) {
      if (n2 > 0)
        return Math.floor(n2);
      return Math.ceil(n2);
    }
    function add4(a3, b3) {
      var l_a = a3.length, l_b = b3.length, r3 = new Array(l_a), carry = 0, base2 = BASE, sum, i4;
      for (i4 = 0; i4 < l_b; i4++) {
        sum = a3[i4] + b3[i4] + carry;
        carry = sum >= base2 ? 1 : 0;
        r3[i4] = sum - carry * base2;
      }
      while (i4 < l_a) {
        sum = a3[i4] + carry;
        carry = sum === base2 ? 1 : 0;
        r3[i4++] = sum - carry * base2;
      }
      if (carry > 0)
        r3.push(carry);
      return r3;
    }
    function addAny(a3, b3) {
      if (a3.length >= b3.length)
        return add4(a3, b3);
      return add4(b3, a3);
    }
    function addSmall(a3, carry) {
      var l3 = a3.length, r3 = new Array(l3), base2 = BASE, sum, i4;
      for (i4 = 0; i4 < l3; i4++) {
        sum = a3[i4] - base2 + carry;
        carry = Math.floor(sum / base2);
        r3[i4] = sum - carry * base2;
        carry += 1;
      }
      while (carry > 0) {
        r3[i4++] = carry % base2;
        carry = Math.floor(carry / base2);
      }
      return r3;
    }
    BigInteger2.prototype.add = function(v3) {
      var n2 = parseValue(v3);
      if (this.sign !== n2.sign) {
        return this.subtract(n2.negate());
      }
      var a3 = this.value, b3 = n2.value;
      if (n2.isSmall) {
        return new BigInteger2(addSmall(a3, Math.abs(b3)), this.sign);
      }
      return new BigInteger2(addAny(a3, b3), this.sign);
    };
    BigInteger2.prototype.plus = BigInteger2.prototype.add;
    SmallInteger.prototype.add = function(v3) {
      var n2 = parseValue(v3);
      var a3 = this.value;
      if (a3 < 0 !== n2.sign) {
        return this.subtract(n2.negate());
      }
      var b3 = n2.value;
      if (n2.isSmall) {
        if (isPrecise(a3 + b3))
          return new SmallInteger(a3 + b3);
        b3 = smallToArray(Math.abs(b3));
      }
      return new BigInteger2(addSmall(b3, Math.abs(a3)), a3 < 0);
    };
    SmallInteger.prototype.plus = SmallInteger.prototype.add;
    NativeBigInt.prototype.add = function(v3) {
      return new NativeBigInt(this.value + parseValue(v3).value);
    };
    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;
    function subtract(a3, b3) {
      var a_l = a3.length, b_l = b3.length, r3 = new Array(a_l), borrow = 0, base2 = BASE, i4, difference;
      for (i4 = 0; i4 < b_l; i4++) {
        difference = a3[i4] - borrow - b3[i4];
        if (difference < 0) {
          difference += base2;
          borrow = 1;
        } else
          borrow = 0;
        r3[i4] = difference;
      }
      for (i4 = b_l; i4 < a_l; i4++) {
        difference = a3[i4] - borrow;
        if (difference < 0)
          difference += base2;
        else {
          r3[i4++] = difference;
          break;
        }
        r3[i4] = difference;
      }
      for (; i4 < a_l; i4++) {
        r3[i4] = a3[i4];
      }
      trim(r3);
      return r3;
    }
    function subtractAny(a3, b3, sign3) {
      var value;
      if (compareAbs(a3, b3) >= 0) {
        value = subtract(a3, b3);
      } else {
        value = subtract(b3, a3);
        sign3 = !sign3;
      }
      value = arrayToSmall(value);
      if (typeof value === "number") {
        if (sign3)
          value = -value;
        return new SmallInteger(value);
      }
      return new BigInteger2(value, sign3);
    }
    function subtractSmall(a3, b3, sign3) {
      var l3 = a3.length, r3 = new Array(l3), carry = -b3, base2 = BASE, i4, difference;
      for (i4 = 0; i4 < l3; i4++) {
        difference = a3[i4] + carry;
        carry = Math.floor(difference / base2);
        difference %= base2;
        r3[i4] = difference < 0 ? difference + base2 : difference;
      }
      r3 = arrayToSmall(r3);
      if (typeof r3 === "number") {
        if (sign3)
          r3 = -r3;
        return new SmallInteger(r3);
      }
      return new BigInteger2(r3, sign3);
    }
    BigInteger2.prototype.subtract = function(v3) {
      var n2 = parseValue(v3);
      if (this.sign !== n2.sign) {
        return this.add(n2.negate());
      }
      var a3 = this.value, b3 = n2.value;
      if (n2.isSmall)
        return subtractSmall(a3, Math.abs(b3), this.sign);
      return subtractAny(a3, b3, this.sign);
    };
    BigInteger2.prototype.minus = BigInteger2.prototype.subtract;
    SmallInteger.prototype.subtract = function(v3) {
      var n2 = parseValue(v3);
      var a3 = this.value;
      if (a3 < 0 !== n2.sign) {
        return this.add(n2.negate());
      }
      var b3 = n2.value;
      if (n2.isSmall) {
        return new SmallInteger(a3 - b3);
      }
      return subtractSmall(b3, Math.abs(a3), a3 >= 0);
    };
    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;
    NativeBigInt.prototype.subtract = function(v3) {
      return new NativeBigInt(this.value - parseValue(v3).value);
    };
    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;
    BigInteger2.prototype.negate = function() {
      return new BigInteger2(this.value, !this.sign);
    };
    SmallInteger.prototype.negate = function() {
      var sign3 = this.sign;
      var small = new SmallInteger(-this.value);
      small.sign = !sign3;
      return small;
    };
    NativeBigInt.prototype.negate = function() {
      return new NativeBigInt(-this.value);
    };
    BigInteger2.prototype.abs = function() {
      return new BigInteger2(this.value, false);
    };
    SmallInteger.prototype.abs = function() {
      return new SmallInteger(Math.abs(this.value));
    };
    NativeBigInt.prototype.abs = function() {
      return new NativeBigInt(this.value >= 0 ? this.value : -this.value);
    };
    function multiplyLong(a3, b3) {
      var a_l = a3.length, b_l = b3.length, l3 = a_l + b_l, r3 = createArray(l3), base2 = BASE, product, carry, i4, a_i, b_j;
      for (i4 = 0; i4 < a_l; ++i4) {
        a_i = a3[i4];
        for (var j3 = 0; j3 < b_l; ++j3) {
          b_j = b3[j3];
          product = a_i * b_j + r3[i4 + j3];
          carry = Math.floor(product / base2);
          r3[i4 + j3] = product - carry * base2;
          r3[i4 + j3 + 1] += carry;
        }
      }
      trim(r3);
      return r3;
    }
    function multiplySmall(a3, b3) {
      var l3 = a3.length, r3 = new Array(l3), base2 = BASE, carry = 0, product, i4;
      for (i4 = 0; i4 < l3; i4++) {
        product = a3[i4] * b3 + carry;
        carry = Math.floor(product / base2);
        r3[i4] = product - carry * base2;
      }
      while (carry > 0) {
        r3[i4++] = carry % base2;
        carry = Math.floor(carry / base2);
      }
      return r3;
    }
    function shiftLeft2(x3, n2) {
      var r3 = [];
      while (n2-- > 0)
        r3.push(0);
      return r3.concat(x3);
    }
    function multiplyKaratsuba(x3, y3) {
      var n2 = Math.max(x3.length, y3.length);
      if (n2 <= 30)
        return multiplyLong(x3, y3);
      n2 = Math.ceil(n2 / 2);
      var b3 = x3.slice(n2), a3 = x3.slice(0, n2), d2 = y3.slice(n2), c5 = y3.slice(0, n2);
      var ac = multiplyKaratsuba(a3, c5), bd = multiplyKaratsuba(b3, d2), abcd = multiplyKaratsuba(addAny(a3, b3), addAny(c5, d2));
      var product = addAny(addAny(ac, shiftLeft2(subtract(subtract(abcd, ac), bd), n2)), shiftLeft2(bd, 2 * n2));
      trim(product);
      return product;
    }
    function useKaratsuba(l1, l22) {
      return -0.012 * l1 - 0.012 * l22 + 15e-6 * l1 * l22 > 0;
    }
    BigInteger2.prototype.multiply = function(v3) {
      var n2 = parseValue(v3), a3 = this.value, b3 = n2.value, sign3 = this.sign !== n2.sign, abs2;
      if (n2.isSmall) {
        if (b3 === 0)
          return Integer[0];
        if (b3 === 1)
          return this;
        if (b3 === -1)
          return this.negate();
        abs2 = Math.abs(b3);
        if (abs2 < BASE) {
          return new BigInteger2(multiplySmall(a3, abs2), sign3);
        }
        b3 = smallToArray(abs2);
      }
      if (useKaratsuba(a3.length, b3.length))
        return new BigInteger2(multiplyKaratsuba(a3, b3), sign3);
      return new BigInteger2(multiplyLong(a3, b3), sign3);
    };
    BigInteger2.prototype.times = BigInteger2.prototype.multiply;
    function multiplySmallAndArray(a3, b3, sign3) {
      if (a3 < BASE) {
        return new BigInteger2(multiplySmall(b3, a3), sign3);
      }
      return new BigInteger2(multiplyLong(b3, smallToArray(a3)), sign3);
    }
    SmallInteger.prototype._multiplyBySmall = function(a3) {
      if (isPrecise(a3.value * this.value)) {
        return new SmallInteger(a3.value * this.value);
      }
      return multiplySmallAndArray(Math.abs(a3.value), smallToArray(Math.abs(this.value)), this.sign !== a3.sign);
    };
    BigInteger2.prototype._multiplyBySmall = function(a3) {
      if (a3.value === 0)
        return Integer[0];
      if (a3.value === 1)
        return this;
      if (a3.value === -1)
        return this.negate();
      return multiplySmallAndArray(Math.abs(a3.value), this.value, this.sign !== a3.sign);
    };
    SmallInteger.prototype.multiply = function(v3) {
      return parseValue(v3)._multiplyBySmall(this);
    };
    SmallInteger.prototype.times = SmallInteger.prototype.multiply;
    NativeBigInt.prototype.multiply = function(v3) {
      return new NativeBigInt(this.value * parseValue(v3).value);
    };
    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;
    function square2(a3) {
      var l3 = a3.length, r3 = createArray(l3 + l3), base2 = BASE, product, carry, i4, a_i, a_j;
      for (i4 = 0; i4 < l3; i4++) {
        a_i = a3[i4];
        carry = 0 - a_i * a_i;
        for (var j3 = i4; j3 < l3; j3++) {
          a_j = a3[j3];
          product = 2 * (a_i * a_j) + r3[i4 + j3] + carry;
          carry = Math.floor(product / base2);
          r3[i4 + j3] = product - carry * base2;
        }
        r3[i4 + l3] = carry;
      }
      trim(r3);
      return r3;
    }
    BigInteger2.prototype.square = function() {
      return new BigInteger2(square2(this.value), false);
    };
    SmallInteger.prototype.square = function() {
      var value = this.value * this.value;
      if (isPrecise(value))
        return new SmallInteger(value);
      return new BigInteger2(square2(smallToArray(Math.abs(this.value))), false);
    };
    NativeBigInt.prototype.square = function(v3) {
      return new NativeBigInt(this.value * this.value);
    };
    function divMod1(a3, b3) {
      var a_l = a3.length, b_l = b3.length, base2 = BASE, result = createArray(b3.length), divisorMostSignificantDigit = b3[b_l - 1], lambda = Math.ceil(base2 / (2 * divisorMostSignificantDigit)), remainder = multiplySmall(a3, lambda), divisor = multiplySmall(b3, lambda), quotientDigit, shift, carry, borrow, i4, l3, q;
      if (remainder.length <= a_l)
        remainder.push(0);
      divisor.push(0);
      divisorMostSignificantDigit = divisor[b_l - 1];
      for (shift = a_l - b_l; shift >= 0; shift--) {
        quotientDigit = base2 - 1;
        if (remainder[shift + b_l] !== divisorMostSignificantDigit) {
          quotientDigit = Math.floor((remainder[shift + b_l] * base2 + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);
        }
        carry = 0;
        borrow = 0;
        l3 = divisor.length;
        for (i4 = 0; i4 < l3; i4++) {
          carry += quotientDigit * divisor[i4];
          q = Math.floor(carry / base2);
          borrow += remainder[shift + i4] - (carry - q * base2);
          carry = q;
          if (borrow < 0) {
            remainder[shift + i4] = borrow + base2;
            borrow = -1;
          } else {
            remainder[shift + i4] = borrow;
            borrow = 0;
          }
        }
        while (borrow !== 0) {
          quotientDigit -= 1;
          carry = 0;
          for (i4 = 0; i4 < l3; i4++) {
            carry += remainder[shift + i4] - base2 + divisor[i4];
            if (carry < 0) {
              remainder[shift + i4] = carry + base2;
              carry = 0;
            } else {
              remainder[shift + i4] = carry;
              carry = 1;
            }
          }
          borrow += carry;
        }
        result[shift] = quotientDigit;
      }
      remainder = divModSmall(remainder, lambda)[0];
      return [arrayToSmall(result), arrayToSmall(remainder)];
    }
    function divMod2(a3, b3) {
      var a_l = a3.length, b_l = b3.length, result = [], part = [], base2 = BASE, guess, xlen, highx, highy, check;
      while (a_l) {
        part.unshift(a3[--a_l]);
        trim(part);
        if (compareAbs(part, b3) < 0) {
          result.push(0);
          continue;
        }
        xlen = part.length;
        highx = part[xlen - 1] * base2 + part[xlen - 2];
        highy = b3[b_l - 1] * base2 + b3[b_l - 2];
        if (xlen > b_l) {
          highx = (highx + 1) * base2;
        }
        guess = Math.ceil(highx / highy);
        do {
          check = multiplySmall(b3, guess);
          if (compareAbs(check, part) <= 0)
            break;
          guess--;
        } while (guess);
        result.push(guess);
        part = subtract(part, check);
      }
      result.reverse();
      return [arrayToSmall(result), arrayToSmall(part)];
    }
    function divModSmall(value, lambda) {
      var length = value.length, quotient = createArray(length), base2 = BASE, i4, q, remainder, divisor;
      remainder = 0;
      for (i4 = length - 1; i4 >= 0; --i4) {
        divisor = remainder * base2 + value[i4];
        q = truncate(divisor / lambda);
        remainder = divisor - q * lambda;
        quotient[i4] = q | 0;
      }
      return [quotient, remainder | 0];
    }
    function divModAny(self2, v3) {
      var value, n2 = parseValue(v3);
      if (supportsNativeBigInt2) {
        return [new NativeBigInt(self2.value / n2.value), new NativeBigInt(self2.value % n2.value)];
      }
      var a3 = self2.value, b3 = n2.value;
      var quotient;
      if (b3 === 0)
        throw new Error("Cannot divide by zero");
      if (self2.isSmall) {
        if (n2.isSmall) {
          return [new SmallInteger(truncate(a3 / b3)), new SmallInteger(a3 % b3)];
        }
        return [Integer[0], self2];
      }
      if (n2.isSmall) {
        if (b3 === 1)
          return [self2, Integer[0]];
        if (b3 == -1)
          return [self2.negate(), Integer[0]];
        var abs2 = Math.abs(b3);
        if (abs2 < BASE) {
          value = divModSmall(a3, abs2);
          quotient = arrayToSmall(value[0]);
          var remainder = value[1];
          if (self2.sign)
            remainder = -remainder;
          if (typeof quotient === "number") {
            if (self2.sign !== n2.sign)
              quotient = -quotient;
            return [new SmallInteger(quotient), new SmallInteger(remainder)];
          }
          return [new BigInteger2(quotient, self2.sign !== n2.sign), new SmallInteger(remainder)];
        }
        b3 = smallToArray(abs2);
      }
      var comparison = compareAbs(a3, b3);
      if (comparison === -1)
        return [Integer[0], self2];
      if (comparison === 0)
        return [Integer[self2.sign === n2.sign ? 1 : -1], Integer[0]];
      if (a3.length + b3.length <= 200)
        value = divMod1(a3, b3);
      else
        value = divMod2(a3, b3);
      quotient = value[0];
      var qSign = self2.sign !== n2.sign, mod2 = value[1], mSign = self2.sign;
      if (typeof quotient === "number") {
        if (qSign)
          quotient = -quotient;
        quotient = new SmallInteger(quotient);
      } else
        quotient = new BigInteger2(quotient, qSign);
      if (typeof mod2 === "number") {
        if (mSign)
          mod2 = -mod2;
        mod2 = new SmallInteger(mod2);
      } else
        mod2 = new BigInteger2(mod2, mSign);
      return [quotient, mod2];
    }
    BigInteger2.prototype.divmod = function(v3) {
      var result = divModAny(this, v3);
      return {
        quotient: result[0],
        remainder: result[1]
      };
    };
    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger2.prototype.divmod;
    BigInteger2.prototype.divide = function(v3) {
      return divModAny(this, v3)[0];
    };
    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function(v3) {
      return new NativeBigInt(this.value / parseValue(v3).value);
    };
    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger2.prototype.over = BigInteger2.prototype.divide;
    BigInteger2.prototype.mod = function(v3) {
      return divModAny(this, v3)[1];
    };
    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function(v3) {
      return new NativeBigInt(this.value % parseValue(v3).value);
    };
    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger2.prototype.remainder = BigInteger2.prototype.mod;
    BigInteger2.prototype.pow = function(v3) {
      var n2 = parseValue(v3), a3 = this.value, b3 = n2.value, value, x3, y3;
      if (b3 === 0)
        return Integer[1];
      if (a3 === 0)
        return Integer[0];
      if (a3 === 1)
        return Integer[1];
      if (a3 === -1)
        return n2.isEven() ? Integer[1] : Integer[-1];
      if (n2.sign) {
        return Integer[0];
      }
      if (!n2.isSmall)
        throw new Error("The exponent " + n2.toString() + " is too large.");
      if (this.isSmall) {
        if (isPrecise(value = Math.pow(a3, b3)))
          return new SmallInteger(truncate(value));
      }
      x3 = this;
      y3 = Integer[1];
      while (true) {
        if (b3 & true) {
          y3 = y3.times(x3);
          --b3;
        }
        if (b3 === 0)
          break;
        b3 /= 2;
        x3 = x3.square();
      }
      return y3;
    };
    SmallInteger.prototype.pow = BigInteger2.prototype.pow;
    NativeBigInt.prototype.pow = function(v3) {
      var n2 = parseValue(v3);
      var a3 = this.value, b3 = n2.value;
      var _0 = BigInt(0), _1 = BigInt(1), _22 = BigInt(2);
      if (b3 === _0)
        return Integer[1];
      if (a3 === _0)
        return Integer[0];
      if (a3 === _1)
        return Integer[1];
      if (a3 === BigInt(-1))
        return n2.isEven() ? Integer[1] : Integer[-1];
      if (n2.isNegative())
        return new NativeBigInt(_0);
      var x3 = this;
      var y3 = Integer[1];
      while (true) {
        if ((b3 & _1) === _1) {
          y3 = y3.times(x3);
          --b3;
        }
        if (b3 === _0)
          break;
        b3 /= _22;
        x3 = x3.square();
      }
      return y3;
    };
    BigInteger2.prototype.modPow = function(exp2, mod2) {
      exp2 = parseValue(exp2);
      mod2 = parseValue(mod2);
      if (mod2.isZero())
        throw new Error("Cannot take modPow with modulus 0");
      var r3 = Integer[1], base2 = this.mod(mod2);
      if (exp2.isNegative()) {
        exp2 = exp2.multiply(Integer[-1]);
        base2 = base2.modInv(mod2);
      }
      while (exp2.isPositive()) {
        if (base2.isZero())
          return Integer[0];
        if (exp2.isOdd())
          r3 = r3.multiply(base2).mod(mod2);
        exp2 = exp2.divide(2);
        base2 = base2.square().mod(mod2);
      }
      return r3;
    };
    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger2.prototype.modPow;
    function compareAbs(a3, b3) {
      if (a3.length !== b3.length) {
        return a3.length > b3.length ? 1 : -1;
      }
      for (var i4 = a3.length - 1; i4 >= 0; i4--) {
        if (a3[i4] !== b3[i4])
          return a3[i4] > b3[i4] ? 1 : -1;
      }
      return 0;
    }
    BigInteger2.prototype.compareAbs = function(v3) {
      var n2 = parseValue(v3), a3 = this.value, b3 = n2.value;
      if (n2.isSmall)
        return 1;
      return compareAbs(a3, b3);
    };
    SmallInteger.prototype.compareAbs = function(v3) {
      var n2 = parseValue(v3), a3 = Math.abs(this.value), b3 = n2.value;
      if (n2.isSmall) {
        b3 = Math.abs(b3);
        return a3 === b3 ? 0 : a3 > b3 ? 1 : -1;
      }
      return -1;
    };
    NativeBigInt.prototype.compareAbs = function(v3) {
      var a3 = this.value;
      var b3 = parseValue(v3).value;
      a3 = a3 >= 0 ? a3 : -a3;
      b3 = b3 >= 0 ? b3 : -b3;
      return a3 === b3 ? 0 : a3 > b3 ? 1 : -1;
    };
    BigInteger2.prototype.compare = function(v3) {
      if (v3 === Infinity) {
        return -1;
      }
      if (v3 === -Infinity) {
        return 1;
      }
      var n2 = parseValue(v3), a3 = this.value, b3 = n2.value;
      if (this.sign !== n2.sign) {
        return n2.sign ? 1 : -1;
      }
      if (n2.isSmall) {
        return this.sign ? -1 : 1;
      }
      return compareAbs(a3, b3) * (this.sign ? -1 : 1);
    };
    BigInteger2.prototype.compareTo = BigInteger2.prototype.compare;
    SmallInteger.prototype.compare = function(v3) {
      if (v3 === Infinity) {
        return -1;
      }
      if (v3 === -Infinity) {
        return 1;
      }
      var n2 = parseValue(v3), a3 = this.value, b3 = n2.value;
      if (n2.isSmall) {
        return a3 == b3 ? 0 : a3 > b3 ? 1 : -1;
      }
      if (a3 < 0 !== n2.sign) {
        return a3 < 0 ? -1 : 1;
      }
      return a3 < 0 ? 1 : -1;
    };
    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;
    NativeBigInt.prototype.compare = function(v3) {
      if (v3 === Infinity) {
        return -1;
      }
      if (v3 === -Infinity) {
        return 1;
      }
      var a3 = this.value;
      var b3 = parseValue(v3).value;
      return a3 === b3 ? 0 : a3 > b3 ? 1 : -1;
    };
    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;
    BigInteger2.prototype.equals = function(v3) {
      return this.compare(v3) === 0;
    };
    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger2.prototype.eq = BigInteger2.prototype.equals;
    BigInteger2.prototype.notEquals = function(v3) {
      return this.compare(v3) !== 0;
    };
    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger2.prototype.neq = BigInteger2.prototype.notEquals;
    BigInteger2.prototype.greater = function(v3) {
      return this.compare(v3) > 0;
    };
    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger2.prototype.gt = BigInteger2.prototype.greater;
    BigInteger2.prototype.lesser = function(v3) {
      return this.compare(v3) < 0;
    };
    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger2.prototype.lt = BigInteger2.prototype.lesser;
    BigInteger2.prototype.greaterOrEquals = function(v3) {
      return this.compare(v3) >= 0;
    };
    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger2.prototype.geq = BigInteger2.prototype.greaterOrEquals;
    BigInteger2.prototype.lesserOrEquals = function(v3) {
      return this.compare(v3) <= 0;
    };
    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger2.prototype.leq = BigInteger2.prototype.lesserOrEquals;
    BigInteger2.prototype.isEven = function() {
      return (this.value[0] & 1) === 0;
    };
    SmallInteger.prototype.isEven = function() {
      return (this.value & 1) === 0;
    };
    NativeBigInt.prototype.isEven = function() {
      return (this.value & BigInt(1)) === BigInt(0);
    };
    BigInteger2.prototype.isOdd = function() {
      return (this.value[0] & 1) === 1;
    };
    SmallInteger.prototype.isOdd = function() {
      return (this.value & 1) === 1;
    };
    NativeBigInt.prototype.isOdd = function() {
      return (this.value & BigInt(1)) === BigInt(1);
    };
    BigInteger2.prototype.isPositive = function() {
      return !this.sign;
    };
    SmallInteger.prototype.isPositive = function() {
      return this.value > 0;
    };
    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;
    BigInteger2.prototype.isNegative = function() {
      return this.sign;
    };
    SmallInteger.prototype.isNegative = function() {
      return this.value < 0;
    };
    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;
    BigInteger2.prototype.isUnit = function() {
      return false;
    };
    SmallInteger.prototype.isUnit = function() {
      return Math.abs(this.value) === 1;
    };
    NativeBigInt.prototype.isUnit = function() {
      return this.abs().value === BigInt(1);
    };
    BigInteger2.prototype.isZero = function() {
      return false;
    };
    SmallInteger.prototype.isZero = function() {
      return this.value === 0;
    };
    NativeBigInt.prototype.isZero = function() {
      return this.value === BigInt(0);
    };
    BigInteger2.prototype.isDivisibleBy = function(v3) {
      var n2 = parseValue(v3);
      if (n2.isZero())
        return false;
      if (n2.isUnit())
        return true;
      if (n2.compareAbs(2) === 0)
        return this.isEven();
      return this.mod(n2).isZero();
    };
    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger2.prototype.isDivisibleBy;
    function isBasicPrime(v3) {
      var n2 = v3.abs();
      if (n2.isUnit())
        return false;
      if (n2.equals(2) || n2.equals(3) || n2.equals(5))
        return true;
      if (n2.isEven() || n2.isDivisibleBy(3) || n2.isDivisibleBy(5))
        return false;
      if (n2.lesser(49))
        return true;
    }
    function millerRabinTest(n2, a3) {
      var nPrev = n2.prev(), b3 = nPrev, r3 = 0, d2, i4, x3;
      while (b3.isEven())
        b3 = b3.divide(2), r3++;
      next:
        for (i4 = 0; i4 < a3.length; i4++) {
          if (n2.lesser(a3[i4]))
            continue;
          x3 = bigInt(a3[i4]).modPow(b3, n2);
          if (x3.isUnit() || x3.equals(nPrev))
            continue;
          for (d2 = r3 - 1; d2 != 0; d2--) {
            x3 = x3.square().mod(n2);
            if (x3.isUnit())
              return false;
            if (x3.equals(nPrev))
              continue next;
          }
          return false;
        }
      return true;
    }
    BigInteger2.prototype.isPrime = function(strict) {
      var isPrime = isBasicPrime(this);
      if (isPrime !== undefined$1)
        return isPrime;
      var n2 = this.abs();
      var bits2 = n2.bitLength();
      if (bits2 <= 64)
        return millerRabinTest(n2, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);
      var logN = Math.log(2) * bits2.toJSNumber();
      var t3 = Math.ceil(strict === true ? 2 * Math.pow(logN, 2) : logN);
      for (var a3 = [], i4 = 0; i4 < t3; i4++) {
        a3.push(bigInt(i4 + 2));
      }
      return millerRabinTest(n2, a3);
    };
    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger2.prototype.isPrime;
    BigInteger2.prototype.isProbablePrime = function(iterations, rng) {
      var isPrime = isBasicPrime(this);
      if (isPrime !== undefined$1)
        return isPrime;
      var n2 = this.abs();
      var t3 = iterations === undefined$1 ? 5 : iterations;
      for (var a3 = [], i4 = 0; i4 < t3; i4++) {
        a3.push(bigInt.randBetween(2, n2.minus(2), rng));
      }
      return millerRabinTest(n2, a3);
    };
    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger2.prototype.isProbablePrime;
    BigInteger2.prototype.modInv = function(n2) {
      var t3 = bigInt.zero, newT = bigInt.one, r3 = parseValue(n2), newR = this.abs(), q, lastT, lastR;
      while (!newR.isZero()) {
        q = r3.divide(newR);
        lastT = t3;
        lastR = r3;
        t3 = newT;
        r3 = newR;
        newT = lastT.subtract(q.multiply(newT));
        newR = lastR.subtract(q.multiply(newR));
      }
      if (!r3.isUnit())
        throw new Error(this.toString() + " and " + n2.toString() + " are not co-prime");
      if (t3.compare(0) === -1) {
        t3 = t3.add(n2);
      }
      if (this.isNegative()) {
        return t3.negate();
      }
      return t3;
    };
    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger2.prototype.modInv;
    BigInteger2.prototype.next = function() {
      var value = this.value;
      if (this.sign) {
        return subtractSmall(value, 1, this.sign);
      }
      return new BigInteger2(addSmall(value, 1), this.sign);
    };
    SmallInteger.prototype.next = function() {
      var value = this.value;
      if (value + 1 < MAX_INT)
        return new SmallInteger(value + 1);
      return new BigInteger2(MAX_INT_ARR, false);
    };
    NativeBigInt.prototype.next = function() {
      return new NativeBigInt(this.value + BigInt(1));
    };
    BigInteger2.prototype.prev = function() {
      var value = this.value;
      if (this.sign) {
        return new BigInteger2(addSmall(value, 1), true);
      }
      return subtractSmall(value, 1, this.sign);
    };
    SmallInteger.prototype.prev = function() {
      var value = this.value;
      if (value - 1 > -MAX_INT)
        return new SmallInteger(value - 1);
      return new BigInteger2(MAX_INT_ARR, true);
    };
    NativeBigInt.prototype.prev = function() {
      return new NativeBigInt(this.value - BigInt(1));
    };
    var powersOfTwo = [1];
    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE)
      powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);
    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];
    function shift_isSmall(n2) {
      return Math.abs(n2) <= BASE;
    }
    BigInteger2.prototype.shiftLeft = function(v3) {
      var n2 = parseValue(v3).toJSNumber();
      if (!shift_isSmall(n2)) {
        throw new Error(String(n2) + " is too large for shifting.");
      }
      if (n2 < 0)
        return this.shiftRight(-n2);
      var result = this;
      if (result.isZero())
        return result;
      while (n2 >= powers2Length) {
        result = result.multiply(highestPower2);
        n2 -= powers2Length - 1;
      }
      return result.multiply(powersOfTwo[n2]);
    };
    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger2.prototype.shiftLeft;
    BigInteger2.prototype.shiftRight = function(v3) {
      var remQuo;
      var n2 = parseValue(v3).toJSNumber();
      if (!shift_isSmall(n2)) {
        throw new Error(String(n2) + " is too large for shifting.");
      }
      if (n2 < 0)
        return this.shiftLeft(-n2);
      var result = this;
      while (n2 >= powers2Length) {
        if (result.isZero() || result.isNegative() && result.isUnit())
          return result;
        remQuo = divModAny(result, highestPower2);
        result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
        n2 -= powers2Length - 1;
      }
      remQuo = divModAny(result, powersOfTwo[n2]);
      return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
    };
    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger2.prototype.shiftRight;
    function bitwise(x3, y3, fn) {
      y3 = parseValue(y3);
      var xSign = x3.isNegative(), ySign = y3.isNegative();
      var xRem = xSign ? x3.not() : x3, yRem = ySign ? y3.not() : y3;
      var xDigit = 0, yDigit = 0;
      var xDivMod = null, yDivMod = null;
      var result = [];
      while (!xRem.isZero() || !yRem.isZero()) {
        xDivMod = divModAny(xRem, highestPower2);
        xDigit = xDivMod[1].toJSNumber();
        if (xSign) {
          xDigit = highestPower2 - 1 - xDigit;
        }
        yDivMod = divModAny(yRem, highestPower2);
        yDigit = yDivMod[1].toJSNumber();
        if (ySign) {
          yDigit = highestPower2 - 1 - yDigit;
        }
        xRem = xDivMod[0];
        yRem = yDivMod[0];
        result.push(fn(xDigit, yDigit));
      }
      var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);
      for (var i4 = result.length - 1; i4 >= 0; i4 -= 1) {
        sum = sum.multiply(highestPower2).add(bigInt(result[i4]));
      }
      return sum;
    }
    BigInteger2.prototype.not = function() {
      return this.negate().prev();
    };
    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger2.prototype.not;
    BigInteger2.prototype.and = function(n2) {
      return bitwise(this, n2, function(a3, b3) {
        return a3 & b3;
      });
    };
    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger2.prototype.and;
    BigInteger2.prototype.or = function(n2) {
      return bitwise(this, n2, function(a3, b3) {
        return a3 | b3;
      });
    };
    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger2.prototype.or;
    BigInteger2.prototype.xor = function(n2) {
      return bitwise(this, n2, function(a3, b3) {
        return a3 ^ b3;
      });
    };
    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger2.prototype.xor;
    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;
    function roughLOB(n2) {
      var v3 = n2.value, x3 = typeof v3 === "number" ? v3 | LOBMASK_I : typeof v3 === "bigint" ? v3 | BigInt(LOBMASK_I) : v3[0] + v3[1] * BASE | LOBMASK_BI;
      return x3 & -x3;
    }
    function integerLogarithm(value, base2) {
      if (base2.compareTo(value) <= 0) {
        var tmp = integerLogarithm(value, base2.square(base2));
        var p2 = tmp.p;
        var e4 = tmp.e;
        var t3 = p2.multiply(base2);
        return t3.compareTo(value) <= 0 ? { p: t3, e: e4 * 2 + 1 } : { p: p2, e: e4 * 2 };
      }
      return { p: bigInt(1), e: 0 };
    }
    BigInteger2.prototype.bitLength = function() {
      var n2 = this;
      if (n2.compareTo(bigInt(0)) < 0) {
        n2 = n2.negate().subtract(bigInt(1));
      }
      if (n2.compareTo(bigInt(0)) === 0) {
        return bigInt(0);
      }
      return bigInt(integerLogarithm(n2, bigInt(2)).e).add(bigInt(1));
    };
    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger2.prototype.bitLength;
    function max(a3, b3) {
      a3 = parseValue(a3);
      b3 = parseValue(b3);
      return a3.greater(b3) ? a3 : b3;
    }
    function min(a3, b3) {
      a3 = parseValue(a3);
      b3 = parseValue(b3);
      return a3.lesser(b3) ? a3 : b3;
    }
    function gcd(a3, b3) {
      a3 = parseValue(a3).abs();
      b3 = parseValue(b3).abs();
      if (a3.equals(b3))
        return a3;
      if (a3.isZero())
        return b3;
      if (b3.isZero())
        return a3;
      var c5 = Integer[1], d2, t3;
      while (a3.isEven() && b3.isEven()) {
        d2 = min(roughLOB(a3), roughLOB(b3));
        a3 = a3.divide(d2);
        b3 = b3.divide(d2);
        c5 = c5.multiply(d2);
      }
      while (a3.isEven()) {
        a3 = a3.divide(roughLOB(a3));
      }
      do {
        while (b3.isEven()) {
          b3 = b3.divide(roughLOB(b3));
        }
        if (a3.greater(b3)) {
          t3 = b3;
          b3 = a3;
          a3 = t3;
        }
        b3 = b3.subtract(a3);
      } while (!b3.isZero());
      return c5.isUnit() ? a3 : a3.multiply(c5);
    }
    function lcm(a3, b3) {
      a3 = parseValue(a3).abs();
      b3 = parseValue(b3).abs();
      return a3.divide(gcd(a3, b3)).multiply(b3);
    }
    function randBetween(a3, b3, rng) {
      a3 = parseValue(a3);
      b3 = parseValue(b3);
      var usedRNG = rng || Math.random;
      var low = min(a3, b3), high = max(a3, b3);
      var range = high.subtract(low).add(1);
      if (range.isSmall)
        return low.add(Math.floor(usedRNG() * range));
      var digits = toBase(range, BASE).value;
      var result = [], restricted = true;
      for (var i4 = 0; i4 < digits.length; i4++) {
        var top = restricted ? digits[i4] + (i4 + 1 < digits.length ? digits[i4 + 1] / BASE : 0) : BASE;
        var digit = truncate(usedRNG() * top);
        result.push(digit);
        if (digit < digits[i4])
          restricted = false;
      }
      return low.add(Integer.fromArray(result, BASE, false));
    }
    var parseBase = function(text, base2, alphabet2, caseSensitive) {
      alphabet2 = alphabet2 || DEFAULT_ALPHABET;
      text = String(text);
      if (!caseSensitive) {
        text = text.toLowerCase();
        alphabet2 = alphabet2.toLowerCase();
      }
      var length = text.length;
      var i4;
      var absBase = Math.abs(base2);
      var alphabetValues = {};
      for (i4 = 0; i4 < alphabet2.length; i4++) {
        alphabetValues[alphabet2[i4]] = i4;
      }
      for (i4 = 0; i4 < length; i4++) {
        var c5 = text[i4];
        if (c5 === "-")
          continue;
        if (c5 in alphabetValues) {
          if (alphabetValues[c5] >= absBase) {
            if (c5 === "1" && absBase === 1)
              continue;
            throw new Error(c5 + " is not a valid digit in base " + base2 + ".");
          }
        }
      }
      base2 = parseValue(base2);
      var digits = [];
      var isNegative2 = text[0] === "-";
      for (i4 = isNegative2 ? 1 : 0; i4 < text.length; i4++) {
        var c5 = text[i4];
        if (c5 in alphabetValues)
          digits.push(parseValue(alphabetValues[c5]));
        else if (c5 === "<") {
          var start = i4;
          do {
            i4++;
          } while (text[i4] !== ">" && i4 < text.length);
          digits.push(parseValue(text.slice(start + 1, i4)));
        } else
          throw new Error(c5 + " is not a valid character");
      }
      return parseBaseFromArray(digits, base2, isNegative2);
    };
    function parseBaseFromArray(digits, base2, isNegative2) {
      var val2 = Integer[0], pow2 = Integer[1], i4;
      for (i4 = digits.length - 1; i4 >= 0; i4--) {
        val2 = val2.add(digits[i4].times(pow2));
        pow2 = pow2.times(base2);
      }
      return isNegative2 ? val2.negate() : val2;
    }
    function stringify(digit, alphabet2) {
      alphabet2 = alphabet2 || DEFAULT_ALPHABET;
      if (digit < alphabet2.length) {
        return alphabet2[digit];
      }
      return "<" + digit + ">";
    }
    function toBase(n2, base2) {
      base2 = bigInt(base2);
      if (base2.isZero()) {
        if (n2.isZero())
          return { value: [0], isNegative: false };
        throw new Error("Cannot convert nonzero numbers to base 0.");
      }
      if (base2.equals(-1)) {
        if (n2.isZero())
          return { value: [0], isNegative: false };
        if (n2.isNegative())
          return {
            value: [].concat.apply([], Array.apply(null, Array(-n2.toJSNumber())).map(Array.prototype.valueOf, [1, 0])),
            isNegative: false
          };
        var arr = Array.apply(null, Array(n2.toJSNumber() - 1)).map(Array.prototype.valueOf, [0, 1]);
        arr.unshift([1]);
        return {
          value: [].concat.apply([], arr),
          isNegative: false
        };
      }
      var neg4 = false;
      if (n2.isNegative() && base2.isPositive()) {
        neg4 = true;
        n2 = n2.abs();
      }
      if (base2.isUnit()) {
        if (n2.isZero())
          return { value: [0], isNegative: false };
        return {
          value: Array.apply(null, Array(n2.toJSNumber())).map(Number.prototype.valueOf, 1),
          isNegative: neg4
        };
      }
      var out = [];
      var left = n2, divmod;
      while (left.isNegative() || left.compareAbs(base2) >= 0) {
        divmod = left.divmod(base2);
        left = divmod.quotient;
        var digit = divmod.remainder;
        if (digit.isNegative()) {
          digit = base2.minus(digit).abs();
          left = left.next();
        }
        out.push(digit.toJSNumber());
      }
      out.push(left.toJSNumber());
      return { value: out.reverse(), isNegative: neg4 };
    }
    function toBaseString(n2, base2, alphabet2) {
      var arr = toBase(n2, base2);
      return (arr.isNegative ? "-" : "") + arr.value.map(function(x3) {
        return stringify(x3, alphabet2);
      }).join("");
    }
    BigInteger2.prototype.toArray = function(radix) {
      return toBase(this, radix);
    };
    SmallInteger.prototype.toArray = function(radix) {
      return toBase(this, radix);
    };
    NativeBigInt.prototype.toArray = function(radix) {
      return toBase(this, radix);
    };
    BigInteger2.prototype.toString = function(radix, alphabet2) {
      if (radix === undefined$1)
        radix = 10;
      if (radix !== 10)
        return toBaseString(this, radix, alphabet2);
      var v3 = this.value, l3 = v3.length, str = String(v3[--l3]), zeros2 = "0000000", digit;
      while (--l3 >= 0) {
        digit = String(v3[l3]);
        str += zeros2.slice(digit.length) + digit;
      }
      var sign3 = this.sign ? "-" : "";
      return sign3 + str;
    };
    SmallInteger.prototype.toString = function(radix, alphabet2) {
      if (radix === undefined$1)
        radix = 10;
      if (radix != 10)
        return toBaseString(this, radix, alphabet2);
      return String(this.value);
    };
    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;
    NativeBigInt.prototype.toJSON = BigInteger2.prototype.toJSON = SmallInteger.prototype.toJSON = function() {
      return this.toString();
    };
    BigInteger2.prototype.valueOf = function() {
      return parseInt(this.toString(), 10);
    };
    BigInteger2.prototype.toJSNumber = BigInteger2.prototype.valueOf;
    SmallInteger.prototype.valueOf = function() {
      return this.value;
    };
    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;
    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function() {
      return parseInt(this.toString(), 10);
    };
    function parseStringValue(v3) {
      if (isPrecise(+v3)) {
        var x3 = +v3;
        if (x3 === truncate(x3))
          return supportsNativeBigInt2 ? new NativeBigInt(BigInt(x3)) : new SmallInteger(x3);
        throw new Error("Invalid integer: " + v3);
      }
      var sign3 = v3[0] === "-";
      if (sign3)
        v3 = v3.slice(1);
      var split = v3.split(/e/i);
      if (split.length > 2)
        throw new Error("Invalid integer: " + split.join("e"));
      if (split.length === 2) {
        var exp2 = split[1];
        if (exp2[0] === "+")
          exp2 = exp2.slice(1);
        exp2 = +exp2;
        if (exp2 !== truncate(exp2) || !isPrecise(exp2))
          throw new Error("Invalid integer: " + exp2 + " is not a valid exponent.");
        var text = split[0];
        var decimalPlace = text.indexOf(".");
        if (decimalPlace >= 0) {
          exp2 -= text.length - decimalPlace - 1;
          text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);
        }
        if (exp2 < 0)
          throw new Error("Cannot include negative exponent part for integers");
        text += new Array(exp2 + 1).join("0");
        v3 = text;
      }
      var isValid = /^([0-9][0-9]*)$/.test(v3);
      if (!isValid)
        throw new Error("Invalid integer: " + v3);
      if (supportsNativeBigInt2) {
        return new NativeBigInt(BigInt(sign3 ? "-" + v3 : v3));
      }
      var r3 = [], max2 = v3.length, l3 = LOG_BASE, min2 = max2 - l3;
      while (max2 > 0) {
        r3.push(+v3.slice(min2, max2));
        min2 -= l3;
        if (min2 < 0)
          min2 = 0;
        max2 -= l3;
      }
      trim(r3);
      return new BigInteger2(r3, sign3);
    }
    function parseNumberValue(v3) {
      if (supportsNativeBigInt2) {
        return new NativeBigInt(BigInt(v3));
      }
      if (isPrecise(v3)) {
        if (v3 !== truncate(v3))
          throw new Error(v3 + " is not an integer.");
        return new SmallInteger(v3);
      }
      return parseStringValue(v3.toString());
    }
    function parseValue(v3) {
      if (typeof v3 === "number") {
        return parseNumberValue(v3);
      }
      if (typeof v3 === "string") {
        return parseStringValue(v3);
      }
      if (typeof v3 === "bigint") {
        return new NativeBigInt(v3);
      }
      return v3;
    }
    for (var i3 = 0; i3 < 1e3; i3++) {
      Integer[i3] = parseValue(i3);
      if (i3 > 0)
        Integer[-i3] = parseValue(-i3);
    }
    Integer.one = Integer[1];
    Integer.zero = Integer[0];
    Integer.minusOne = Integer[-1];
    Integer.max = max;
    Integer.min = min;
    Integer.gcd = gcd;
    Integer.lcm = lcm;
    Integer.isInstance = function(x3) {
      return x3 instanceof BigInteger2 || x3 instanceof SmallInteger || x3 instanceof NativeBigInt;
    };
    Integer.randBetween = randBetween;
    Integer.fromArray = function(digits, base2, isNegative2) {
      return parseBaseFromArray(digits.map(parseValue), parseValue(base2 || 10), isNegative2);
    };
    return Integer;
  }();
  if (module.hasOwnProperty("exports")) {
    module.exports = bigInt;
  }
});
function fromString$2(s2, radix) {
  if (typeof s2 == "string") {
    if (s2.slice(0, 2) == "0x") {
      return BigInteger(s2.slice(2), 16);
    } else {
      return BigInteger(s2, radix);
    }
  } else {
    return BigInteger(s2, radix);
  }
}
var e$1 = fromString$2;
function fromArray$2(a3, radix) {
  return BigInteger.fromArray(a3, radix);
}
function bitLength$1(a3) {
  return BigInteger(a3).bitLength();
}
function isNegative$1(a3) {
  return BigInteger(a3).isNegative();
}
function isZero$1(a3) {
  return BigInteger(a3).isZero();
}
function shiftLeft$1(a3, n2) {
  return BigInteger(a3).shiftLeft(n2);
}
function shiftRight$1(a3, n2) {
  return BigInteger(a3).shiftRight(n2);
}
var shl$1 = shiftLeft$1;
var shr$1 = shiftRight$1;
function isOdd$1(a3) {
  return BigInteger(a3).isOdd();
}
function naf$1(n2) {
  let E = BigInteger(n2);
  const res = [];
  while (E.gt(BigInteger.zero)) {
    if (E.isOdd()) {
      const z2 = 2 - E.mod(4).toJSNumber();
      res.push(z2);
      E = E.minus(z2);
    } else {
      res.push(0);
    }
    E = E.shiftRight(1);
  }
  return res;
}
function bits$1(n2) {
  let E = BigInteger(n2);
  const res = [];
  while (E.gt(BigInteger.zero)) {
    if (E.isOdd()) {
      res.push(1);
    } else {
      res.push(0);
    }
    E = E.shiftRight(1);
  }
  return res;
}
function toNumber$2(s2) {
  if (!s2.lt(BigInteger("9007199254740992", 10))) {
    throw new Error("Number too big");
  }
  return s2.toJSNumber();
}
function toArray$1(s2, radix) {
  return BigInteger(s2).toArray(radix);
}
function add$1(a3, b3) {
  return BigInteger(a3).add(BigInteger(b3));
}
function sub$1(a3, b3) {
  return BigInteger(a3).minus(BigInteger(b3));
}
function neg$1(a3) {
  return BigInteger.zero.minus(BigInteger(a3));
}
function mul$1(a3, b3) {
  return BigInteger(a3).times(BigInteger(b3));
}
function square$1(a3) {
  return BigInteger(a3).square();
}
function pow$1(a3, b3) {
  return BigInteger(a3).pow(BigInteger(b3));
}
function exp$2(a3, b3) {
  return BigInteger(a3).pow(BigInteger(b3));
}
function abs$1(a3) {
  return BigInteger(a3).abs();
}
function div$1(a3, b3) {
  return BigInteger(a3).divide(BigInteger(b3));
}
function mod$1(a3, b3) {
  return BigInteger(a3).mod(BigInteger(b3));
}
function eq$1(a3, b3) {
  return BigInteger(a3).eq(BigInteger(b3));
}
function neq$1(a3, b3) {
  return BigInteger(a3).neq(BigInteger(b3));
}
function lt$1(a3, b3) {
  return BigInteger(a3).lt(BigInteger(b3));
}
function gt$1(a3, b3) {
  return BigInteger(a3).gt(BigInteger(b3));
}
function leq$1(a3, b3) {
  return BigInteger(a3).leq(BigInteger(b3));
}
function geq$1(a3, b3) {
  return BigInteger(a3).geq(BigInteger(b3));
}
function band$1(a3, b3) {
  return BigInteger(a3).and(BigInteger(b3));
}
function bor$1(a3, b3) {
  return BigInteger(a3).or(BigInteger(b3));
}
function bxor$1(a3, b3) {
  return BigInteger(a3).xor(BigInteger(b3));
}
function land$1(a3, b3) {
  return !BigInteger(a3).isZero() && !BigInteger(b3).isZero();
}
function lor$1(a3, b3) {
  return !BigInteger(a3).isZero() || !BigInteger(b3).isZero();
}
function lnot$1(a3) {
  return BigInteger(a3).isZero();
}
var Scalar_bigint = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  fromString: fromString$2,
  e: e$1,
  fromArray: fromArray$2,
  bitLength: bitLength$1,
  isNegative: isNegative$1,
  isZero: isZero$1,
  shiftLeft: shiftLeft$1,
  shiftRight: shiftRight$1,
  shl: shl$1,
  shr: shr$1,
  isOdd: isOdd$1,
  naf: naf$1,
  bits: bits$1,
  toNumber: toNumber$2,
  toArray: toArray$1,
  add: add$1,
  sub: sub$1,
  neg: neg$1,
  mul: mul$1,
  square: square$1,
  pow: pow$1,
  exp: exp$2,
  abs: abs$1,
  div: div$1,
  mod: mod$1,
  eq: eq$1,
  neq: neq$1,
  lt: lt$1,
  gt: gt$1,
  leq: leq$1,
  geq: geq$1,
  band: band$1,
  bor: bor$1,
  bxor: bxor$1,
  land: land$1,
  lor: lor$1,
  lnot: lnot$1
});
var supportsNativeBigInt$2 = typeof BigInt === "function";
var Scalar$1 = {};
if (supportsNativeBigInt$2) {
  Object.assign(Scalar$1, Scalar_native);
} else {
  Object.assign(Scalar$1, Scalar_bigint);
}
Scalar$1.toRprLE = function rprBE(buff, o3, e4, n8) {
  const s2 = "0000000" + e4.toString(16);
  const v3 = new Uint32Array(buff.buffer, o3, n8 / 4);
  const l3 = ((s2.length - 7) * 4 - 1 >> 5) + 1;
  for (let i3 = 0; i3 < l3; i3++)
    v3[i3] = parseInt(s2.substring(s2.length - 8 * i3 - 8, s2.length - 8 * i3), 16);
  for (let i3 = l3; i3 < v3.length; i3++)
    v3[i3] = 0;
  for (let i3 = v3.length * 4; i3 < n8; i3++)
    buff[i3] = Scalar$1.toNumber(Scalar$1.band(Scalar$1.shiftRight(e4, i3 * 8), 255));
};
Scalar$1.toRprBE = function rprLEM(buff, o3, e4, n8) {
  const s2 = "0000000" + e4.toString(16);
  const v3 = new DataView(buff.buffer, buff.byteOffset + o3, n8);
  const l3 = ((s2.length - 7) * 4 - 1 >> 5) + 1;
  for (let i3 = 0; i3 < l3; i3++)
    v3.setUint32(n8 - i3 * 4 - 4, parseInt(s2.substring(s2.length - 8 * i3 - 8, s2.length - 8 * i3), 16), false);
  for (let i3 = 0; i3 < n8 / 4 - l3; i3++)
    v3[i3] = 0;
};
Scalar$1.fromRprLE = function rprLEM2(buff, o3, n8) {
  n8 = n8 || buff.byteLength;
  o3 = o3 || 0;
  const v3 = new Uint32Array(buff.buffer, o3, n8 / 4);
  const a3 = new Array(n8 / 4);
  v3.forEach((ch, i3) => a3[a3.length - i3 - 1] = ch.toString(16).padStart(8, "0"));
  return Scalar$1.fromString(a3.join(""), 16);
};
Scalar$1.fromRprBE = function rprLEM3(buff, o3, n8) {
  n8 = n8 || buff.byteLength;
  o3 = o3 || 0;
  const v3 = new DataView(buff.buffer, buff.byteOffset + o3, n8);
  const a3 = new Array(n8 / 4);
  for (let i3 = 0; i3 < n8 / 4; i3++) {
    a3[i3] = v3.getUint32(i3 * 4, false).toString(16).padStart(8, "0");
  }
  return Scalar$1.fromString(a3.join(""), 16);
};
Scalar$1.toString = function toString(a3, radix) {
  return a3.toString(radix);
};
Scalar$1.toLEBuff = function toLEBuff(a3) {
  const buff = new Uint8Array(Math.floor((Scalar$1.bitLength(a3) - 1) / 8) + 1);
  Scalar$1.toRprLE(buff, 0, a3, buff.byteLength);
  return buff;
};
Scalar$1.zero = Scalar$1.e(0);
Scalar$1.one = Scalar$1.e(1);
var {
  toRprLE,
  toRprBE,
  fromRprLE,
  fromRprBE,
  toString: toString$6,
  toLEBuff: toLEBuff2,
  zero,
  one,
  fromString: fromString$1,
  e: e3,
  fromArray: fromArray$1,
  bitLength,
  isNegative,
  isZero,
  shiftLeft,
  shiftRight,
  shl,
  shr,
  isOdd,
  naf,
  bits,
  toNumber: toNumber$1,
  toArray,
  add,
  sub,
  neg,
  mul,
  square,
  pow,
  exp: exp$1,
  abs,
  div,
  mod,
  eq,
  neq,
  lt,
  gt,
  leq,
  geq,
  band,
  bor,
  bxor,
  land,
  lor,
  lnot
} = Scalar$1;
var _Scalar = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  toRprLE,
  toRprBE,
  fromRprLE,
  fromRprBE,
  toString: toString$6,
  toLEBuff: toLEBuff2,
  zero,
  one,
  fromString: fromString$1,
  e: e3,
  fromArray: fromArray$1,
  bitLength,
  isNegative,
  isZero,
  shiftLeft,
  shiftRight,
  shl,
  shr,
  isOdd,
  naf,
  bits,
  toNumber: toNumber$1,
  toArray,
  add,
  sub,
  neg,
  mul,
  square,
  pow,
  exp: exp$1,
  abs,
  div,
  mod,
  eq,
  neq,
  lt,
  gt,
  leq,
  geq,
  band,
  bor,
  bxor,
  land,
  lor,
  lnot
});
var _revTable$2 = [];
for (let i3 = 0; i3 < 256; i3++) {
  _revTable$2[i3] = _revSlow$2(i3, 8);
}
function _revSlow$2(idx, bits2) {
  let res = 0;
  let a3 = idx;
  for (let i3 = 0; i3 < bits2; i3++) {
    res <<= 1;
    res = res | a3 & 1;
    a3 >>= 1;
  }
  return res;
}
function exp(F5, base2, e4) {
  if (isZero(e4))
    return F5.one;
  const n2 = bits(e4);
  if (n2.legth == 0)
    return F5.one;
  let res = base2;
  for (let i3 = n2.length - 2; i3 >= 0; i3--) {
    res = F5.square(res);
    if (n2[i3]) {
      res = F5.mul(res, base2);
    }
  }
  return res;
}
function buildSqrt(F5) {
  if (F5.m % 2 == 1) {
    if (eq(mod(F5.p, 4), 1)) {
      if (eq(mod(F5.p, 8), 1)) {
        if (eq(mod(F5.p, 16), 1)) {
          alg5_tonelliShanks(F5);
        } else if (eq(mod(F5.p, 16), 9)) {
          alg4_kong(F5);
        } else {
          throw new Error("Field withot sqrt");
        }
      } else if (eq(mod(F5.p, 8), 5)) {
        alg3_atkin(F5);
      } else {
        throw new Error("Field withot sqrt");
      }
    } else if (eq(mod(F5.p, 4), 3)) {
      alg2_shanks(F5);
    }
  } else {
    const pm2mod4 = mod(pow(F5.p, F5.m / 2), 4);
    if (pm2mod4 == 1) {
      alg10_adj(F5);
    } else if (pm2mod4 == 3) {
      alg9_adj(F5);
    } else {
      alg8_complex(F5);
    }
  }
}
function alg5_tonelliShanks(F5) {
  F5.sqrt_q = pow(F5.p, F5.m);
  F5.sqrt_s = 0;
  F5.sqrt_t = sub(F5.sqrt_q, 1);
  while (!isOdd(F5.sqrt_t)) {
    F5.sqrt_s = F5.sqrt_s + 1;
    F5.sqrt_t = div(F5.sqrt_t, 2);
  }
  let c0 = F5.one;
  while (F5.eq(c0, F5.one)) {
    const c5 = F5.random();
    F5.sqrt_z = F5.pow(c5, F5.sqrt_t);
    c0 = F5.pow(F5.sqrt_z, 2 ** (F5.sqrt_s - 1));
  }
  F5.sqrt_tm1d2 = div(sub(F5.sqrt_t, 1), 2);
  F5.sqrt = function(a3) {
    const F6 = this;
    if (F6.isZero(a3))
      return F6.zero;
    let w3 = F6.pow(a3, F6.sqrt_tm1d2);
    const a0 = F6.pow(F6.mul(F6.square(w3), a3), 2 ** (F6.sqrt_s - 1));
    if (F6.eq(a0, F6.negone))
      return null;
    let v3 = F6.sqrt_s;
    let x3 = F6.mul(a3, w3);
    let b3 = F6.mul(x3, w3);
    let z2 = F6.sqrt_z;
    while (!F6.eq(b3, F6.one)) {
      let b2k = F6.square(b3);
      let k3 = 1;
      while (!F6.eq(b2k, F6.one)) {
        b2k = F6.square(b2k);
        k3++;
      }
      w3 = z2;
      for (let i3 = 0; i3 < v3 - k3 - 1; i3++) {
        w3 = F6.square(w3);
      }
      z2 = F6.square(w3);
      b3 = F6.mul(b3, z2);
      x3 = F6.mul(x3, w3);
      v3 = k3;
    }
    return F6.geq(x3, F6.zero) ? x3 : F6.neg(x3);
  };
}
function alg4_kong(F5) {
  F5.sqrt = function() {
    throw new Error("Sqrt alg 4 not implemented");
  };
}
function alg3_atkin(F5) {
  F5.sqrt = function() {
    throw new Error("Sqrt alg 3 not implemented");
  };
}
function alg2_shanks(F5) {
  F5.sqrt_q = pow(F5.p, F5.m);
  F5.sqrt_e1 = div(sub(F5.sqrt_q, 3), 4);
  F5.sqrt = function(a3) {
    if (this.isZero(a3))
      return this.zero;
    const a1 = this.pow(a3, this.sqrt_e1);
    const a0 = this.mul(this.square(a1), a3);
    if (this.eq(a0, this.negone))
      return null;
    const x3 = this.mul(a1, a3);
    return F5.geq(x3, F5.zero) ? x3 : F5.neg(x3);
  };
}
function alg10_adj(F5) {
  F5.sqrt = function() {
    throw new Error("Sqrt alg 10 not implemented");
  };
}
function alg9_adj(F5) {
  F5.sqrt_q = pow(F5.p, F5.m / 2);
  F5.sqrt_e34 = div(sub(F5.sqrt_q, 3), 4);
  F5.sqrt_e12 = div(sub(F5.sqrt_q, 1), 2);
  F5.frobenius = function(n2, x3) {
    if (n2 % 2 == 1) {
      return F5.conjugate(x3);
    } else {
      return x3;
    }
  };
  F5.sqrt = function(a3) {
    const F6 = this;
    const a1 = F6.pow(a3, F6.sqrt_e34);
    const alfa = F6.mul(F6.square(a1), a3);
    const a0 = F6.mul(F6.frobenius(1, alfa), alfa);
    if (F6.eq(a0, F6.negone))
      return null;
    const x0 = F6.mul(a1, a3);
    let x3;
    if (F6.eq(alfa, F6.negone)) {
      x3 = F6.mul(x0, [F6.F.zero, F6.F.one]);
    } else {
      const b3 = F6.pow(F6.add(F6.one, alfa), F6.sqrt_e12);
      x3 = F6.mul(b3, x0);
    }
    return F6.geq(x3, F6.zero) ? x3 : F6.neg(x3);
  };
}
function alg8_complex(F5) {
  F5.sqrt = function() {
    throw new Error("Sqrt alg 8 not implemented");
  };
}
function quarterRound(st, a3, b3, c5, d2) {
  st[a3] = st[a3] + st[b3] >>> 0;
  st[d2] = (st[d2] ^ st[a3]) >>> 0;
  st[d2] = (st[d2] << 16 | st[d2] >>> 16 & 65535) >>> 0;
  st[c5] = st[c5] + st[d2] >>> 0;
  st[b3] = (st[b3] ^ st[c5]) >>> 0;
  st[b3] = (st[b3] << 12 | st[b3] >>> 20 & 4095) >>> 0;
  st[a3] = st[a3] + st[b3] >>> 0;
  st[d2] = (st[d2] ^ st[a3]) >>> 0;
  st[d2] = (st[d2] << 8 | st[d2] >>> 24 & 255) >>> 0;
  st[c5] = st[c5] + st[d2] >>> 0;
  st[b3] = (st[b3] ^ st[c5]) >>> 0;
  st[b3] = (st[b3] << 7 | st[b3] >>> 25 & 127) >>> 0;
}
function doubleRound(st) {
  quarterRound(st, 0, 4, 8, 12);
  quarterRound(st, 1, 5, 9, 13);
  quarterRound(st, 2, 6, 10, 14);
  quarterRound(st, 3, 7, 11, 15);
  quarterRound(st, 0, 5, 10, 15);
  quarterRound(st, 1, 6, 11, 12);
  quarterRound(st, 2, 7, 8, 13);
  quarterRound(st, 3, 4, 9, 14);
}
var ChaCha = class {
  constructor(seed) {
    seed = seed || [0, 0, 0, 0, 0, 0, 0, 0];
    this.state = [
      1634760805,
      857760878,
      2036477234,
      1797285236,
      seed[0],
      seed[1],
      seed[2],
      seed[3],
      seed[4],
      seed[5],
      seed[6],
      seed[7],
      0,
      0,
      0,
      0
    ];
    this.idx = 16;
    this.buff = new Array(16);
  }
  nextU32() {
    if (this.idx == 16)
      this.update();
    return this.buff[this.idx++];
  }
  nextU64() {
    return add(mul(this.nextU32(), 4294967296), this.nextU32());
  }
  nextBool() {
    return (this.nextU32() & 1) == 1;
  }
  update() {
    for (let i3 = 0; i3 < 16; i3++)
      this.buff[i3] = this.state[i3];
    for (let i3 = 0; i3 < 10; i3++)
      doubleRound(this.buff);
    for (let i3 = 0; i3 < 16; i3++)
      this.buff[i3] = this.buff[i3] + this.state[i3] >>> 0;
    this.idx = 0;
    this.state[12] = this.state[12] + 1 >>> 0;
    if (this.state[12] != 0)
      return;
    this.state[13] = this.state[13] + 1 >>> 0;
    if (this.state[13] != 0)
      return;
    this.state[14] = this.state[14] + 1 >>> 0;
    if (this.state[14] != 0)
      return;
    this.state[15] = this.state[15] + 1 >>> 0;
  }
};
function getRandomBytes(n2) {
  let array = new Uint8Array(n2);
  {
    if (typeof globalThis.crypto !== "undefined") {
      globalThis.crypto.getRandomValues(array);
    } else {
      for (let i3 = 0; i3 < n2; i3++) {
        array[i3] = Math.random() * 4294967296 >>> 0;
      }
    }
  }
  return array;
}
function getRandomSeed() {
  const arr = getRandomBytes(32);
  const arrV = new Uint32Array(arr.buffer);
  const seed = [];
  for (let i3 = 0; i3 < 8; i3++) {
    seed.push(arrV[i3]);
  }
  return seed;
}
var threadRng = null;
function getThreadRng() {
  if (threadRng)
    return threadRng;
  threadRng = new ChaCha(getRandomSeed());
  return threadRng;
}
var ZqField$1 = class {
  constructor(p2) {
    this.type = "F1";
    this.one = BigInt(1);
    this.zero = BigInt(0);
    this.p = BigInt(p2);
    this.m = 1;
    this.negone = this.p - this.one;
    this.two = BigInt(2);
    this.half = this.p >> this.one;
    this.bitLength = bitLength(this.p);
    this.mask = (this.one << BigInt(this.bitLength)) - this.one;
    this.n64 = Math.floor((this.bitLength - 1) / 64) + 1;
    this.n32 = this.n64 * 2;
    this.n8 = this.n64 * 8;
    this.R = this.e(this.one << BigInt(this.n64 * 64));
    this.Ri = this.inv(this.R);
    const e4 = this.negone >> this.one;
    this.nqr = this.two;
    let r3 = this.pow(this.nqr, e4);
    while (!this.eq(r3, this.negone)) {
      this.nqr = this.nqr + this.one;
      r3 = this.pow(this.nqr, e4);
    }
    this.s = 0;
    this.t = this.negone;
    while ((this.t & this.one) == this.zero) {
      this.s = this.s + 1;
      this.t = this.t >> this.one;
    }
    this.nqr_to_t = this.pow(this.nqr, this.t);
    buildSqrt(this);
  }
  e(a3, b3) {
    let res;
    if (!b3) {
      res = BigInt(a3);
    } else if (b3 == 16) {
      res = BigInt("0x" + a3);
    }
    if (res < 0) {
      let nres = -res;
      if (nres >= this.p)
        nres = nres % this.p;
      return this.p - nres;
    } else {
      return res >= this.p ? res % this.p : res;
    }
  }
  add(a3, b3) {
    const res = a3 + b3;
    return res >= this.p ? res - this.p : res;
  }
  sub(a3, b3) {
    return a3 >= b3 ? a3 - b3 : this.p - b3 + a3;
  }
  neg(a3) {
    return a3 ? this.p - a3 : a3;
  }
  mul(a3, b3) {
    return a3 * b3 % this.p;
  }
  mulScalar(base2, s2) {
    return base2 * this.e(s2) % this.p;
  }
  square(a3) {
    return a3 * a3 % this.p;
  }
  eq(a3, b3) {
    return a3 == b3;
  }
  neq(a3, b3) {
    return a3 != b3;
  }
  lt(a3, b3) {
    const aa = a3 > this.half ? a3 - this.p : a3;
    const bb = b3 > this.half ? b3 - this.p : b3;
    return aa < bb;
  }
  gt(a3, b3) {
    const aa = a3 > this.half ? a3 - this.p : a3;
    const bb = b3 > this.half ? b3 - this.p : b3;
    return aa > bb;
  }
  leq(a3, b3) {
    const aa = a3 > this.half ? a3 - this.p : a3;
    const bb = b3 > this.half ? b3 - this.p : b3;
    return aa <= bb;
  }
  geq(a3, b3) {
    const aa = a3 > this.half ? a3 - this.p : a3;
    const bb = b3 > this.half ? b3 - this.p : b3;
    return aa >= bb;
  }
  div(a3, b3) {
    return this.mul(a3, this.inv(b3));
  }
  idiv(a3, b3) {
    if (!b3)
      throw new Error("Division by zero");
    return a3 / b3;
  }
  inv(a3) {
    if (!a3)
      throw new Error("Division by zero");
    let t3 = this.zero;
    let r3 = this.p;
    let newt = this.one;
    let newr = a3 % this.p;
    while (newr) {
      let q = r3 / newr;
      [t3, newt] = [newt, t3 - q * newt];
      [r3, newr] = [newr, r3 - q * newr];
    }
    if (t3 < this.zero)
      t3 += this.p;
    return t3;
  }
  mod(a3, b3) {
    return a3 % b3;
  }
  pow(b3, e4) {
    return exp(this, b3, e4);
  }
  exp(b3, e4) {
    return exp(this, b3, e4);
  }
  band(a3, b3) {
    const res = a3 & b3 & this.mask;
    return res >= this.p ? res - this.p : res;
  }
  bor(a3, b3) {
    const res = (a3 | b3) & this.mask;
    return res >= this.p ? res - this.p : res;
  }
  bxor(a3, b3) {
    const res = (a3 ^ b3) & this.mask;
    return res >= this.p ? res - this.p : res;
  }
  bnot(a3) {
    const res = a3 ^ this.mask;
    return res >= this.p ? res - this.p : res;
  }
  shl(a3, b3) {
    if (Number(b3) < this.bitLength) {
      const res = a3 << b3 & this.mask;
      return res >= this.p ? res - this.p : res;
    } else {
      const nb = this.p - b3;
      if (Number(nb) < this.bitLength) {
        return a3 >> nb;
      } else {
        return this.zero;
      }
    }
  }
  shr(a3, b3) {
    if (Number(b3) < this.bitLength) {
      return a3 >> b3;
    } else {
      const nb = this.p - b3;
      if (Number(nb) < this.bitLength) {
        const res = a3 << nb & this.mask;
        return res >= this.p ? res - this.p : res;
      } else {
        return 0;
      }
    }
  }
  land(a3, b3) {
    return a3 && b3 ? this.one : this.zero;
  }
  lor(a3, b3) {
    return a3 || b3 ? this.one : this.zero;
  }
  lnot(a3) {
    return a3 ? this.zero : this.one;
  }
  sqrt_old(n2) {
    if (n2 == this.zero)
      return this.zero;
    const res = this.pow(n2, this.negone >> this.one);
    if (res != this.one)
      return null;
    let m3 = this.s;
    let c5 = this.nqr_to_t;
    let t3 = this.pow(n2, this.t);
    let r3 = this.pow(n2, this.add(this.t, this.one) >> this.one);
    while (t3 != this.one) {
      let sq = this.square(t3);
      let i3 = 1;
      while (sq != this.one) {
        i3++;
        sq = this.square(sq);
      }
      let b3 = c5;
      for (let j3 = 0; j3 < m3 - i3 - 1; j3++)
        b3 = this.square(b3);
      m3 = i3;
      c5 = this.square(b3);
      t3 = this.mul(t3, c5);
      r3 = this.mul(r3, b3);
    }
    if (r3 > this.p >> this.one) {
      r3 = this.neg(r3);
    }
    return r3;
  }
  normalize(a3, b3) {
    a3 = BigInt(a3, b3);
    if (a3 < 0) {
      let na = -a3;
      if (na >= this.p)
        na = na % this.p;
      return this.p - na;
    } else {
      return a3 >= this.p ? a3 % this.p : a3;
    }
  }
  random() {
    const nBytes = this.bitLength * 2 / 8;
    let res = this.zero;
    for (let i3 = 0; i3 < nBytes; i3++) {
      res = (res << BigInt(8)) + BigInt(getRandomBytes(1)[0]);
    }
    return res % this.p;
  }
  toString(a3, base2) {
    let vs;
    if (a3 > this.half) {
      const v3 = this.p - a3;
      vs = "-" + v3.toString(base2);
    } else {
      vs = a3.toString(base2);
    }
    return vs;
  }
  isZero(a3) {
    return a3 == this.zero;
  }
  fromRng(rng) {
    let v3;
    do {
      v3 = this.zero;
      for (let i3 = 0; i3 < this.n64; i3++) {
        v3 += rng.nextU64() << BigInt(64 * i3);
      }
      v3 &= this.mask;
    } while (v3 >= this.p);
    v3 = v3 * this.Ri % this.p;
    return v3;
  }
};
var ZqField2 = class {
  constructor(p2) {
    this.type = "F1";
    this.one = BigInteger.one;
    this.zero = BigInteger.zero;
    this.p = BigInteger(p2);
    this.m = 1;
    this.negone = this.p.minus(BigInteger.one);
    this.two = BigInteger(2);
    this.half = this.p.shiftRight(1);
    this.bitLength = this.p.bitLength();
    this.mask = BigInteger.one.shiftLeft(this.bitLength).minus(BigInteger.one);
    this.n64 = Math.floor((this.bitLength - 1) / 64) + 1;
    this.n32 = this.n64 * 2;
    this.n8 = this.n64 * 8;
    this.R = BigInteger.one.shiftLeft(this.n64 * 64);
    this.Ri = this.inv(this.R);
    const e4 = this.negone.shiftRight(this.one);
    this.nqr = this.two;
    let r3 = this.pow(this.nqr, e4);
    while (!r3.equals(this.negone)) {
      this.nqr = this.nqr.add(this.one);
      r3 = this.pow(this.nqr, e4);
    }
    this.s = this.zero;
    this.t = this.negone;
    while (!this.t.isOdd()) {
      this.s = this.s.add(this.one);
      this.t = this.t.shiftRight(this.one);
    }
    this.nqr_to_t = this.pow(this.nqr, this.t);
    buildSqrt(this);
  }
  e(a3, b3) {
    const res = BigInteger(a3, b3);
    return this.normalize(res);
  }
  add(a3, b3) {
    let res = a3.add(b3);
    if (res.geq(this.p)) {
      res = res.minus(this.p);
    }
    return res;
  }
  sub(a3, b3) {
    if (a3.geq(b3)) {
      return a3.minus(b3);
    } else {
      return this.p.minus(b3.minus(a3));
    }
  }
  neg(a3) {
    if (a3.isZero())
      return a3;
    return this.p.minus(a3);
  }
  mul(a3, b3) {
    return a3.times(b3).mod(this.p);
  }
  mulScalar(base2, s2) {
    return base2.times(BigInteger(s2)).mod(this.p);
  }
  square(a3) {
    return a3.square().mod(this.p);
  }
  eq(a3, b3) {
    return a3.eq(b3);
  }
  neq(a3, b3) {
    return a3.neq(b3);
  }
  lt(a3, b3) {
    const aa = a3.gt(this.half) ? a3.minus(this.p) : a3;
    const bb = b3.gt(this.half) ? b3.minus(this.p) : b3;
    return aa.lt(bb);
  }
  gt(a3, b3) {
    const aa = a3.gt(this.half) ? a3.minus(this.p) : a3;
    const bb = b3.gt(this.half) ? b3.minus(this.p) : b3;
    return aa.gt(bb);
  }
  leq(a3, b3) {
    const aa = a3.gt(this.half) ? a3.minus(this.p) : a3;
    const bb = b3.gt(this.half) ? b3.minus(this.p) : b3;
    return aa.leq(bb);
  }
  geq(a3, b3) {
    const aa = a3.gt(this.half) ? a3.minus(this.p) : a3;
    const bb = b3.gt(this.half) ? b3.minus(this.p) : b3;
    return aa.geq(bb);
  }
  div(a3, b3) {
    if (b3.isZero())
      throw new Error("Division by zero");
    return a3.times(b3.modInv(this.p)).mod(this.p);
  }
  idiv(a3, b3) {
    if (b3.isZero())
      throw new Error("Division by zero");
    return a3.divide(b3);
  }
  inv(a3) {
    if (a3.isZero())
      throw new Error("Division by zero");
    return a3.modInv(this.p);
  }
  mod(a3, b3) {
    return a3.mod(b3);
  }
  pow(a3, b3) {
    return a3.modPow(b3, this.p);
  }
  exp(a3, b3) {
    return a3.modPow(b3, this.p);
  }
  band(a3, b3) {
    return a3.and(b3).and(this.mask).mod(this.p);
  }
  bor(a3, b3) {
    return a3.or(b3).and(this.mask).mod(this.p);
  }
  bxor(a3, b3) {
    return a3.xor(b3).and(this.mask).mod(this.p);
  }
  bnot(a3) {
    return a3.xor(this.mask).mod(this.p);
  }
  shl(a3, b3) {
    if (b3.lt(this.bitLength)) {
      return a3.shiftLeft(b3).and(this.mask).mod(this.p);
    } else {
      const nb = this.p.minus(b3);
      if (nb.lt(this.bitLength)) {
        return this.shr(a3, nb);
      } else {
        return BigInteger.zero;
      }
    }
  }
  shr(a3, b3) {
    if (b3.lt(this.bitLength)) {
      return a3.shiftRight(b3);
    } else {
      const nb = this.p.minus(b3);
      if (nb.lt(this.bitLength)) {
        return this.shl(a3, nb);
      } else {
        return BigInteger.zero;
      }
    }
  }
  land(a3, b3) {
    return a3.isZero() || b3.isZero() ? BigInteger.zero : BigInteger.one;
  }
  lor(a3, b3) {
    return a3.isZero() && b3.isZero() ? BigInteger.zero : BigInteger.one;
  }
  lnot(a3) {
    return a3.isZero() ? BigInteger.one : BigInteger.zero;
  }
  sqrt_old(n2) {
    if (n2.equals(this.zero))
      return this.zero;
    const res = this.pow(n2, this.negone.shiftRight(this.one));
    if (!res.equals(this.one))
      return null;
    let m3 = parseInt(this.s);
    let c5 = this.nqr_to_t;
    let t3 = this.pow(n2, this.t);
    let r3 = this.pow(n2, this.add(this.t, this.one).shiftRight(this.one));
    while (!t3.equals(this.one)) {
      let sq = this.square(t3);
      let i3 = 1;
      while (!sq.equals(this.one)) {
        i3++;
        sq = this.square(sq);
      }
      let b3 = c5;
      for (let j3 = 0; j3 < m3 - i3 - 1; j3++)
        b3 = this.square(b3);
      m3 = i3;
      c5 = this.square(b3);
      t3 = this.mul(t3, c5);
      r3 = this.mul(r3, b3);
    }
    if (r3.greater(this.p.shiftRight(this.one))) {
      r3 = this.neg(r3);
    }
    return r3;
  }
  normalize(a3) {
    a3 = BigInteger(a3);
    if (a3.isNegative()) {
      return this.p.minus(a3.abs().mod(this.p));
    } else {
      return a3.mod(this.p);
    }
  }
  random() {
    let res = BigInteger(0);
    let n2 = BigInteger(this.p.square());
    while (!n2.isZero()) {
      res = res.shiftLeft(8).add(BigInteger(getRandomBytes(1)[0]));
      n2 = n2.shiftRight(8);
    }
    return res.mod(this.p);
  }
  toString(a3, base2) {
    let vs;
    if (!a3.lesserOrEquals(this.p.shiftRight(BigInteger(1)))) {
      const v3 = this.p.minus(a3);
      vs = "-" + v3.toString(base2);
    } else {
      vs = a3.toString(base2);
    }
    return vs;
  }
  isZero(a3) {
    return a3.isZero();
  }
  fromRng(rng) {
    let v3;
    do {
      v3 = BigInteger(0);
      for (let i3 = 0; i3 < this.n64; i3++) {
        v3 = v3.add(v3, rng.nextU64().shiftLeft(64 * i3));
      }
      v3 = v3.and(this.mask);
    } while (v3.geq(this.p));
    v3 = v3.times(this.Ri).mod(this.q);
    return v3;
  }
};
var supportsNativeBigInt$1 = typeof BigInt === "function";
var _F1Field;
if (supportsNativeBigInt$1) {
  _F1Field = ZqField$1;
} else {
  _F1Field = ZqField2;
}
var F1Field = class extends _F1Field {
  toRprLE(buff, o3, e4) {
    toRprLE(buff, o3, e4, this.n64 * 8);
  }
  toRprBE(buff, o3, e4) {
    toRprBE(buff, o3, e4, this.n64 * 8);
  }
  toRprBEM(buff, o3, e4) {
    return this.toRprBE(buff, o3, this.mul(this.R, e4));
  }
  toRprLEM(buff, o3, e4) {
    return this.toRprLE(buff, o3, this.mul(this.R, e4));
  }
  fromRprLE(buff, o3) {
    return fromRprLE(buff, o3, this.n8);
  }
  fromRprBE(buff, o3) {
    return fromRprBE(buff, o3, this.n8);
  }
  fromRprLEM(buff, o3) {
    return this.mul(this.fromRprLE(buff, o3), this.Ri);
  }
  fromRprBEM(buff, o3) {
    return this.mul(this.fromRprBE(buff, o3), this.Ri);
  }
};
var bigInt2BytesLE = function bigInt2BytesLE2(_a, len) {
  const b3 = Array(len);
  let v3 = BigInteger(_a);
  for (let i3 = 0; i3 < len; i3++) {
    b3[i3] = v3.and(255).toJSNumber();
    v3 = v3.shiftRight(8);
  }
  return b3;
};
var bigInt2U32LE = function bigInt2BytesLE3(_a, len) {
  const b3 = Array(len);
  let v3 = BigInteger(_a);
  for (let i3 = 0; i3 < len; i3++) {
    b3[i3] = v3.and(4294967295).toJSNumber();
    v3 = v3.shiftRight(32);
  }
  return b3;
};
var isOcamNum = function(a3) {
  if (!Array.isArray(a3))
    return false;
  if (a3.length != 3)
    return false;
  if (typeof a3[0] !== "number")
    return false;
  if (typeof a3[1] !== "number")
    return false;
  if (!Array.isArray(a3[2]))
    return false;
  return true;
};
var utils$3 = {
  bigInt2BytesLE,
  bigInt2U32LE,
  isOcamNum
};
var build_int = function buildInt(module, n64, _prefix) {
  const prefix = _prefix || "int";
  if (module.modules[prefix])
    return prefix;
  module.modules[prefix] = {};
  const n32 = n64 * 2;
  const n8 = n64 * 8;
  module.alloc(n8, utils$3.bigInt2BytesLE(1, n8));
  function buildCopy() {
    const f3 = module.addFunction(prefix + "_copy");
    f3.addParam("px", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    for (let i3 = 0; i3 < n64; i3++) {
      f3.addCode(c5.i64_store(c5.getLocal("pr"), i3 * 8, c5.i64_load(c5.getLocal("px"), i3 * 8)));
    }
  }
  function buildZero() {
    const f3 = module.addFunction(prefix + "_zero");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    for (let i3 = 0; i3 < n64; i3++) {
      f3.addCode(c5.i64_store(c5.getLocal("pr"), i3 * 8, c5.i64_const(0)));
    }
  }
  function buildOne() {
    const f3 = module.addFunction(prefix + "_one");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.i64_store(c5.getLocal("pr"), 0, c5.i64_const(1)));
    for (let i3 = 1; i3 < n64; i3++) {
      f3.addCode(c5.i64_store(c5.getLocal("pr"), i3 * 8, c5.i64_const(0)));
    }
  }
  function buildIsZero() {
    const f3 = module.addFunction(prefix + "_isZero");
    f3.addParam("px", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    function getCompCode(n2) {
      if (n2 == 0) {
        return c5.ret(c5.i64_eqz(c5.i64_load(c5.getLocal("px"))));
      }
      return c5.if(c5.i64_eqz(c5.i64_load(c5.getLocal("px"), n2 * 8)), getCompCode(n2 - 1), c5.ret(c5.i32_const(0)));
    }
    f3.addCode(getCompCode(n64 - 1));
    f3.addCode(c5.ret(c5.i32_const(0)));
  }
  function buildEq() {
    const f3 = module.addFunction(prefix + "_eq");
    f3.addParam("px", "i32");
    f3.addParam("py", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    function getCompCode(n2) {
      if (n2 == 0) {
        return c5.ret(c5.i64_eq(c5.i64_load(c5.getLocal("px")), c5.i64_load(c5.getLocal("py"))));
      }
      return c5.if(c5.i64_eq(c5.i64_load(c5.getLocal("px"), n2 * 8), c5.i64_load(c5.getLocal("py"), n2 * 8)), getCompCode(n2 - 1), c5.ret(c5.i32_const(0)));
    }
    f3.addCode(getCompCode(n64 - 1));
    f3.addCode(c5.ret(c5.i32_const(0)));
  }
  function buildGte() {
    const f3 = module.addFunction(prefix + "_gte");
    f3.addParam("px", "i32");
    f3.addParam("py", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    function getCompCode(n2) {
      if (n2 == 0) {
        return c5.ret(c5.i64_ge_u(c5.i64_load(c5.getLocal("px")), c5.i64_load(c5.getLocal("py"))));
      }
      return c5.if(c5.i64_lt_u(c5.i64_load(c5.getLocal("px"), n2 * 8), c5.i64_load(c5.getLocal("py"), n2 * 8)), c5.ret(c5.i32_const(0)), c5.if(c5.i64_gt_u(c5.i64_load(c5.getLocal("px"), n2 * 8), c5.i64_load(c5.getLocal("py"), n2 * 8)), c5.ret(c5.i32_const(1)), getCompCode(n2 - 1)));
    }
    f3.addCode(getCompCode(n64 - 1));
    f3.addCode(c5.ret(c5.i32_const(0)));
  }
  function buildAdd() {
    const f3 = module.addFunction(prefix + "_add");
    f3.addParam("x", "i32");
    f3.addParam("y", "i32");
    f3.addParam("r", "i32");
    f3.setReturnType("i32");
    f3.addLocal("c", "i64");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.setLocal("c", c5.i64_add(c5.i64_load32_u(c5.getLocal("x")), c5.i64_load32_u(c5.getLocal("y")))));
    f3.addCode(c5.i64_store32(c5.getLocal("r"), c5.getLocal("c")));
    for (let i3 = 1; i3 < n32; i3++) {
      f3.addCode(c5.setLocal("c", c5.i64_add(c5.i64_add(c5.i64_load32_u(c5.getLocal("x"), 4 * i3), c5.i64_load32_u(c5.getLocal("y"), 4 * i3)), c5.i64_shr_u(c5.getLocal("c"), c5.i64_const(32)))));
      f3.addCode(c5.i64_store32(c5.getLocal("r"), i3 * 4, c5.getLocal("c")));
    }
    f3.addCode(c5.i32_wrap_i64(c5.i64_shr_u(c5.getLocal("c"), c5.i64_const(32))));
  }
  function buildSub() {
    const f3 = module.addFunction(prefix + "_sub");
    f3.addParam("x", "i32");
    f3.addParam("y", "i32");
    f3.addParam("r", "i32");
    f3.setReturnType("i32");
    f3.addLocal("c", "i64");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.setLocal("c", c5.i64_sub(c5.i64_load32_u(c5.getLocal("x")), c5.i64_load32_u(c5.getLocal("y")))));
    f3.addCode(c5.i64_store32(c5.getLocal("r"), c5.i64_and(c5.getLocal("c"), c5.i64_const("0xFFFFFFFF"))));
    for (let i3 = 1; i3 < n32; i3++) {
      f3.addCode(c5.setLocal("c", c5.i64_add(c5.i64_sub(c5.i64_load32_u(c5.getLocal("x"), 4 * i3), c5.i64_load32_u(c5.getLocal("y"), 4 * i3)), c5.i64_shr_s(c5.getLocal("c"), c5.i64_const(32)))));
      f3.addCode(c5.i64_store32(c5.getLocal("r"), i3 * 4, c5.i64_and(c5.getLocal("c"), c5.i64_const("0xFFFFFFFF"))));
    }
    f3.addCode(c5.i32_wrap_i64(c5.i64_shr_s(c5.getLocal("c"), c5.i64_const(32))));
  }
  function buildMul() {
    const f3 = module.addFunction(prefix + "_mul");
    f3.addParam("x", "i32");
    f3.addParam("y", "i32");
    f3.addParam("r", "i32");
    f3.addLocal("c0", "i64");
    f3.addLocal("c1", "i64");
    for (let i3 = 0; i3 < n32; i3++) {
      f3.addLocal("x" + i3, "i64");
      f3.addLocal("y" + i3, "i64");
    }
    const c5 = f3.getCodeBuilder();
    const loadX = [];
    const loadY = [];
    function mulij(i3, j3) {
      let X, Y;
      if (!loadX[i3]) {
        X = c5.teeLocal("x" + i3, c5.i64_load32_u(c5.getLocal("x"), i3 * 4));
        loadX[i3] = true;
      } else {
        X = c5.getLocal("x" + i3);
      }
      if (!loadY[j3]) {
        Y = c5.teeLocal("y" + j3, c5.i64_load32_u(c5.getLocal("y"), j3 * 4));
        loadY[j3] = true;
      } else {
        Y = c5.getLocal("y" + j3);
      }
      return c5.i64_mul(X, Y);
    }
    let c0 = "c0";
    let c1 = "c1";
    for (let k3 = 0; k3 < n32 * 2 - 1; k3++) {
      for (let i3 = Math.max(0, k3 - n32 + 1); i3 <= k3 && i3 < n32; i3++) {
        const j3 = k3 - i3;
        f3.addCode(c5.setLocal(c0, c5.i64_add(c5.i64_and(c5.getLocal(c0), c5.i64_const(4294967295)), mulij(i3, j3))));
        f3.addCode(c5.setLocal(c1, c5.i64_add(c5.getLocal(c1), c5.i64_shr_u(c5.getLocal(c0), c5.i64_const(32)))));
      }
      f3.addCode(c5.i64_store32(c5.getLocal("r"), k3 * 4, c5.getLocal(c0)));
      [c0, c1] = [c1, c0];
      f3.addCode(c5.setLocal(c1, c5.i64_shr_u(c5.getLocal(c0), c5.i64_const(32))));
    }
    f3.addCode(c5.i64_store32(c5.getLocal("r"), n32 * 4 * 2 - 4, c5.getLocal(c0)));
  }
  function buildSquare() {
    const f3 = module.addFunction(prefix + "_square");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    f3.addLocal("c0", "i64");
    f3.addLocal("c1", "i64");
    f3.addLocal("c0_old", "i64");
    f3.addLocal("c1_old", "i64");
    for (let i3 = 0; i3 < n32; i3++) {
      f3.addLocal("x" + i3, "i64");
    }
    const c5 = f3.getCodeBuilder();
    const loadX = [];
    function mulij(i3, j3) {
      let X, Y;
      if (!loadX[i3]) {
        X = c5.teeLocal("x" + i3, c5.i64_load32_u(c5.getLocal("x"), i3 * 4));
        loadX[i3] = true;
      } else {
        X = c5.getLocal("x" + i3);
      }
      if (!loadX[j3]) {
        Y = c5.teeLocal("x" + j3, c5.i64_load32_u(c5.getLocal("x"), j3 * 4));
        loadX[j3] = true;
      } else {
        Y = c5.getLocal("x" + j3);
      }
      return c5.i64_mul(X, Y);
    }
    let c0 = "c0";
    let c1 = "c1";
    let c0_old = "c0_old";
    let c1_old = "c1_old";
    for (let k3 = 0; k3 < n32 * 2 - 1; k3++) {
      f3.addCode(c5.setLocal(c0, c5.i64_const(0)), c5.setLocal(c1, c5.i64_const(0)));
      for (let i3 = Math.max(0, k3 - n32 + 1); i3 < k3 + 1 >> 1 && i3 < n32; i3++) {
        const j3 = k3 - i3;
        f3.addCode(c5.setLocal(c0, c5.i64_add(c5.i64_and(c5.getLocal(c0), c5.i64_const(4294967295)), mulij(i3, j3))));
        f3.addCode(c5.setLocal(c1, c5.i64_add(c5.getLocal(c1), c5.i64_shr_u(c5.getLocal(c0), c5.i64_const(32)))));
      }
      f3.addCode(c5.setLocal(c0, c5.i64_shl(c5.i64_and(c5.getLocal(c0), c5.i64_const(4294967295)), c5.i64_const(1))));
      f3.addCode(c5.setLocal(c1, c5.i64_add(c5.i64_shl(c5.getLocal(c1), c5.i64_const(1)), c5.i64_shr_u(c5.getLocal(c0), c5.i64_const(32)))));
      if (k3 % 2 == 0) {
        f3.addCode(c5.setLocal(c0, c5.i64_add(c5.i64_and(c5.getLocal(c0), c5.i64_const(4294967295)), mulij(k3 >> 1, k3 >> 1))));
        f3.addCode(c5.setLocal(c1, c5.i64_add(c5.getLocal(c1), c5.i64_shr_u(c5.getLocal(c0), c5.i64_const(32)))));
      }
      if (k3 > 0) {
        f3.addCode(c5.setLocal(c0, c5.i64_add(c5.i64_and(c5.getLocal(c0), c5.i64_const(4294967295)), c5.i64_and(c5.getLocal(c0_old), c5.i64_const(4294967295)))));
        f3.addCode(c5.setLocal(c1, c5.i64_add(c5.i64_add(c5.getLocal(c1), c5.i64_shr_u(c5.getLocal(c0), c5.i64_const(32))), c5.getLocal(c1_old))));
      }
      f3.addCode(c5.i64_store32(c5.getLocal("r"), k3 * 4, c5.getLocal(c0)));
      f3.addCode(c5.setLocal(c0_old, c5.getLocal(c1)), c5.setLocal(c1_old, c5.i64_shr_u(c5.getLocal(c0_old), c5.i64_const(32))));
    }
    f3.addCode(c5.i64_store32(c5.getLocal("r"), n32 * 4 * 2 - 4, c5.getLocal(c0_old)));
  }
  function buildSquareOld() {
    const f3 = module.addFunction(prefix + "_squareOld");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(prefix + "_mul", c5.getLocal("x"), c5.getLocal("x"), c5.getLocal("r")));
  }
  function _buildMul1() {
    const f3 = module.addFunction(prefix + "__mul1");
    f3.addParam("px", "i32");
    f3.addParam("y", "i64");
    f3.addParam("pr", "i32");
    f3.addLocal("c", "i64");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.setLocal("c", c5.i64_mul(c5.i64_load32_u(c5.getLocal("px"), 0, 0), c5.getLocal("y"))));
    f3.addCode(c5.i64_store32(c5.getLocal("pr"), 0, 0, c5.getLocal("c")));
    for (let i3 = 1; i3 < n32; i3++) {
      f3.addCode(c5.setLocal("c", c5.i64_add(c5.i64_mul(c5.i64_load32_u(c5.getLocal("px"), 4 * i3, 0), c5.getLocal("y")), c5.i64_shr_u(c5.getLocal("c"), c5.i64_const(32)))));
      f3.addCode(c5.i64_store32(c5.getLocal("pr"), i3 * 4, 0, c5.getLocal("c")));
    }
  }
  function _buildAdd1() {
    const f3 = module.addFunction(prefix + "__add1");
    f3.addParam("x", "i32");
    f3.addParam("y", "i64");
    f3.addLocal("c", "i64");
    f3.addLocal("px", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.setLocal("px", c5.getLocal("x")));
    f3.addCode(c5.setLocal("c", c5.i64_add(c5.i64_load32_u(c5.getLocal("px"), 0, 0), c5.getLocal("y"))));
    f3.addCode(c5.i64_store32(c5.getLocal("px"), 0, 0, c5.getLocal("c")));
    f3.addCode(c5.setLocal("c", c5.i64_shr_u(c5.getLocal("c"), c5.i64_const(32))));
    f3.addCode(c5.block(c5.loop(c5.br_if(1, c5.i64_eqz(c5.getLocal("c"))), c5.setLocal("px", c5.i32_add(c5.getLocal("px"), c5.i32_const(4))), c5.setLocal("c", c5.i64_add(c5.i64_load32_u(c5.getLocal("px"), 0, 0), c5.getLocal("c"))), c5.i64_store32(c5.getLocal("px"), 0, 0, c5.getLocal("c")), c5.setLocal("c", c5.i64_shr_u(c5.getLocal("c"), c5.i64_const(32))), c5.br(0))));
  }
  function buildDiv() {
    _buildMul1();
    _buildAdd1();
    const f3 = module.addFunction(prefix + "_div");
    f3.addParam("x", "i32");
    f3.addParam("y", "i32");
    f3.addParam("c", "i32");
    f3.addParam("r", "i32");
    f3.addLocal("rr", "i32");
    f3.addLocal("cc", "i32");
    f3.addLocal("eX", "i32");
    f3.addLocal("eY", "i32");
    f3.addLocal("sy", "i64");
    f3.addLocal("sx", "i64");
    f3.addLocal("ec", "i32");
    const c5 = f3.getCodeBuilder();
    const Y = c5.i32_const(module.alloc(n8));
    const Caux = c5.i32_const(module.alloc(n8));
    const Raux = c5.i32_const(module.alloc(n8));
    const C3 = c5.getLocal("cc");
    const R = c5.getLocal("rr");
    const pr1 = module.alloc(n8 * 2);
    const R1 = c5.i32_const(pr1);
    const R2 = c5.i32_const(pr1 + n8);
    f3.addCode(c5.if(c5.getLocal("c"), c5.setLocal("cc", c5.getLocal("c")), c5.setLocal("cc", Caux)));
    f3.addCode(c5.if(c5.getLocal("r"), c5.setLocal("rr", c5.getLocal("r")), c5.setLocal("rr", Raux)));
    f3.addCode(c5.call(prefix + "_copy", c5.getLocal("x"), R));
    f3.addCode(c5.call(prefix + "_copy", c5.getLocal("y"), Y));
    f3.addCode(c5.call(prefix + "_zero", C3));
    f3.addCode(c5.call(prefix + "_zero", R1));
    f3.addCode(c5.setLocal("eX", c5.i32_const(n8 - 1)));
    f3.addCode(c5.setLocal("eY", c5.i32_const(n8 - 1)));
    f3.addCode(c5.block(c5.loop(c5.br_if(1, c5.i32_or(c5.i32_load8_u(c5.i32_add(Y, c5.getLocal("eY")), 0, 0), c5.i32_eq(c5.getLocal("eY"), c5.i32_const(3)))), c5.setLocal("eY", c5.i32_sub(c5.getLocal("eY"), c5.i32_const(1))), c5.br(0))));
    f3.addCode(c5.setLocal("sy", c5.i64_add(c5.i64_load32_u(c5.i32_sub(c5.i32_add(Y, c5.getLocal("eY")), c5.i32_const(3)), 0, 0), c5.i64_const(1))));
    f3.addCode(c5.if(c5.i64_eq(c5.getLocal("sy"), c5.i64_const(1)), c5.drop(c5.i64_div_u(c5.i64_const(0), c5.i64_const(0)))));
    f3.addCode(c5.block(c5.loop(c5.block(c5.loop(c5.br_if(1, c5.i32_or(c5.i32_load8_u(c5.i32_add(R, c5.getLocal("eX")), 0, 0), c5.i32_eq(c5.getLocal("eX"), c5.i32_const(7)))), c5.setLocal("eX", c5.i32_sub(c5.getLocal("eX"), c5.i32_const(1))), c5.br(0))), c5.setLocal("sx", c5.i64_load(c5.i32_sub(c5.i32_add(R, c5.getLocal("eX")), c5.i32_const(7)), 0, 0)), c5.setLocal("sx", c5.i64_div_u(c5.getLocal("sx"), c5.getLocal("sy"))), c5.setLocal("ec", c5.i32_sub(c5.i32_sub(c5.getLocal("eX"), c5.getLocal("eY")), c5.i32_const(4))), c5.block(c5.loop(c5.br_if(1, c5.i32_and(c5.i64_eqz(c5.i64_and(c5.getLocal("sx"), c5.i64_const("0xFFFFFFFF00000000"))), c5.i32_ge_s(c5.getLocal("ec"), c5.i32_const(0)))), c5.setLocal("sx", c5.i64_shr_u(c5.getLocal("sx"), c5.i64_const(8))), c5.setLocal("ec", c5.i32_add(c5.getLocal("ec"), c5.i32_const(1))), c5.br(0))), c5.if(c5.i64_eqz(c5.getLocal("sx")), [
      ...c5.br_if(2, c5.i32_eqz(c5.call(prefix + "_gte", R, Y))),
      ...c5.setLocal("sx", c5.i64_const(1)),
      ...c5.setLocal("ec", c5.i32_const(0))
    ]), c5.call(prefix + "__mul1", Y, c5.getLocal("sx"), R2), c5.drop(c5.call(prefix + "_sub", R, c5.i32_sub(R2, c5.getLocal("ec")), R)), c5.call(prefix + "__add1", c5.i32_add(C3, c5.getLocal("ec")), c5.getLocal("sx")), c5.br(0))));
  }
  function buildInverseMod() {
    const f3 = module.addFunction(prefix + "_inverseMod");
    f3.addParam("px", "i32");
    f3.addParam("pm", "i32");
    f3.addParam("pr", "i32");
    f3.addLocal("t", "i32");
    f3.addLocal("newt", "i32");
    f3.addLocal("r", "i32");
    f3.addLocal("qq", "i32");
    f3.addLocal("qr", "i32");
    f3.addLocal("newr", "i32");
    f3.addLocal("swp", "i32");
    f3.addLocal("x", "i32");
    f3.addLocal("signt", "i32");
    f3.addLocal("signnewt", "i32");
    f3.addLocal("signx", "i32");
    const c5 = f3.getCodeBuilder();
    const aux1 = c5.i32_const(module.alloc(n8));
    const aux2 = c5.i32_const(module.alloc(n8));
    const aux3 = c5.i32_const(module.alloc(n8));
    const aux4 = c5.i32_const(module.alloc(n8));
    const aux5 = c5.i32_const(module.alloc(n8));
    const aux6 = c5.i32_const(module.alloc(n8));
    const mulBuff = c5.i32_const(module.alloc(n8 * 2));
    const aux7 = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.setLocal("t", aux1), c5.call(prefix + "_zero", aux1), c5.setLocal("signt", c5.i32_const(0)));
    f3.addCode(c5.setLocal("r", aux2), c5.call(prefix + "_copy", c5.getLocal("pm"), aux2));
    f3.addCode(c5.setLocal("newt", aux3), c5.call(prefix + "_one", aux3), c5.setLocal("signnewt", c5.i32_const(0)));
    f3.addCode(c5.setLocal("newr", aux4), c5.call(prefix + "_copy", c5.getLocal("px"), aux4));
    f3.addCode(c5.setLocal("qq", aux5));
    f3.addCode(c5.setLocal("qr", aux6));
    f3.addCode(c5.setLocal("x", aux7));
    f3.addCode(c5.block(c5.loop(c5.br_if(1, c5.call(prefix + "_isZero", c5.getLocal("newr"))), c5.call(prefix + "_div", c5.getLocal("r"), c5.getLocal("newr"), c5.getLocal("qq"), c5.getLocal("qr")), c5.call(prefix + "_mul", c5.getLocal("qq"), c5.getLocal("newt"), mulBuff), c5.if(c5.getLocal("signt"), c5.if(c5.getLocal("signnewt"), c5.if(c5.call(prefix + "_gte", mulBuff, c5.getLocal("t")), [
      ...c5.drop(c5.call(prefix + "_sub", mulBuff, c5.getLocal("t"), c5.getLocal("x"))),
      ...c5.setLocal("signx", c5.i32_const(0))
    ], [
      ...c5.drop(c5.call(prefix + "_sub", c5.getLocal("t"), mulBuff, c5.getLocal("x"))),
      ...c5.setLocal("signx", c5.i32_const(1))
    ]), [
      ...c5.drop(c5.call(prefix + "_add", mulBuff, c5.getLocal("t"), c5.getLocal("x"))),
      ...c5.setLocal("signx", c5.i32_const(1))
    ]), c5.if(c5.getLocal("signnewt"), [
      ...c5.drop(c5.call(prefix + "_add", mulBuff, c5.getLocal("t"), c5.getLocal("x"))),
      ...c5.setLocal("signx", c5.i32_const(0))
    ], c5.if(c5.call(prefix + "_gte", c5.getLocal("t"), mulBuff), [
      ...c5.drop(c5.call(prefix + "_sub", c5.getLocal("t"), mulBuff, c5.getLocal("x"))),
      ...c5.setLocal("signx", c5.i32_const(0))
    ], [
      ...c5.drop(c5.call(prefix + "_sub", mulBuff, c5.getLocal("t"), c5.getLocal("x"))),
      ...c5.setLocal("signx", c5.i32_const(1))
    ]))), c5.setLocal("swp", c5.getLocal("t")), c5.setLocal("t", c5.getLocal("newt")), c5.setLocal("newt", c5.getLocal("x")), c5.setLocal("x", c5.getLocal("swp")), c5.setLocal("signt", c5.getLocal("signnewt")), c5.setLocal("signnewt", c5.getLocal("signx")), c5.setLocal("swp", c5.getLocal("r")), c5.setLocal("r", c5.getLocal("newr")), c5.setLocal("newr", c5.getLocal("qr")), c5.setLocal("qr", c5.getLocal("swp")), c5.br(0))));
    f3.addCode(c5.if(c5.getLocal("signt"), c5.drop(c5.call(prefix + "_sub", c5.getLocal("pm"), c5.getLocal("t"), c5.getLocal("pr"))), c5.call(prefix + "_copy", c5.getLocal("t"), c5.getLocal("pr"))));
  }
  buildCopy();
  buildZero();
  buildIsZero();
  buildOne();
  buildEq();
  buildGte();
  buildAdd();
  buildSub();
  buildMul();
  buildSquare();
  buildSquareOld();
  buildDiv();
  buildInverseMod();
  module.exportFunction(prefix + "_copy");
  module.exportFunction(prefix + "_zero");
  module.exportFunction(prefix + "_one");
  module.exportFunction(prefix + "_isZero");
  module.exportFunction(prefix + "_eq");
  module.exportFunction(prefix + "_gte");
  module.exportFunction(prefix + "_add");
  module.exportFunction(prefix + "_sub");
  module.exportFunction(prefix + "_mul");
  module.exportFunction(prefix + "_square");
  module.exportFunction(prefix + "_squareOld");
  module.exportFunction(prefix + "_div");
  module.exportFunction(prefix + "_inverseMod");
  return prefix;
};
var build_timesscalar = function buildTimesScalar(module, fnName, elementLen, opAB, opAA, opCopy, opInit) {
  const f3 = module.addFunction(fnName);
  f3.addParam("base", "i32");
  f3.addParam("scalar", "i32");
  f3.addParam("scalarLength", "i32");
  f3.addParam("r", "i32");
  f3.addLocal("i", "i32");
  f3.addLocal("b", "i32");
  const c5 = f3.getCodeBuilder();
  const aux = c5.i32_const(module.alloc(elementLen));
  f3.addCode(c5.if(c5.i32_eqz(c5.getLocal("scalarLength")), [
    ...c5.call(opInit, c5.getLocal("r")),
    ...c5.ret([])
  ]));
  f3.addCode(c5.call(opCopy, c5.getLocal("base"), aux));
  f3.addCode(c5.call(opInit, c5.getLocal("r")));
  f3.addCode(c5.setLocal("i", c5.getLocal("scalarLength")));
  f3.addCode(c5.block(c5.loop(c5.setLocal("i", c5.i32_sub(c5.getLocal("i"), c5.i32_const(1))), c5.setLocal("b", c5.i32_load8_u(c5.i32_add(c5.getLocal("scalar"), c5.getLocal("i")))), ...innerLoop(), c5.br_if(1, c5.i32_eqz(c5.getLocal("i"))), c5.br(0))));
  function innerLoop() {
    const code = [];
    for (let i3 = 0; i3 < 8; i3++) {
      code.push(...c5.call(opAA, c5.getLocal("r"), c5.getLocal("r")), ...c5.if(c5.i32_ge_u(c5.getLocal("b"), c5.i32_const(128 >> i3)), [
        ...c5.setLocal("b", c5.i32_sub(c5.getLocal("b"), c5.i32_const(128 >> i3))),
        ...c5.call(opAB, c5.getLocal("r"), aux, c5.getLocal("r"))
      ]));
    }
    return code;
  }
};
var build_batchinverse = buildBatchInverse;
function buildBatchInverse(module, prefix) {
  const n8 = module.modules[prefix].n64 * 8;
  const f3 = module.addFunction(prefix + "_batchInverse");
  f3.addParam("pIn", "i32");
  f3.addParam("inStep", "i32");
  f3.addParam("n", "i32");
  f3.addParam("pOut", "i32");
  f3.addParam("outStep", "i32");
  f3.addLocal("itAux", "i32");
  f3.addLocal("itIn", "i32");
  f3.addLocal("itOut", "i32");
  f3.addLocal("i", "i32");
  const c5 = f3.getCodeBuilder();
  const AUX = c5.i32_const(module.alloc(n8));
  f3.addCode(c5.setLocal("itAux", c5.i32_load(c5.i32_const(0))), c5.i32_store(c5.i32_const(0), c5.i32_add(c5.getLocal("itAux"), c5.i32_mul(c5.i32_add(c5.getLocal("n"), c5.i32_const(1)), c5.i32_const(n8)))));
  f3.addCode(c5.call(prefix + "_one", c5.getLocal("itAux")), c5.setLocal("itIn", c5.getLocal("pIn")), c5.setLocal("itAux", c5.i32_add(c5.getLocal("itAux"), c5.i32_const(n8))), c5.setLocal("i", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("i"), c5.getLocal("n"))), c5.if(c5.call(prefix + "_isZero", c5.getLocal("itIn")), c5.call(prefix + "_copy", c5.i32_sub(c5.getLocal("itAux"), c5.i32_const(n8)), c5.getLocal("itAux")), c5.call(prefix + "_mul", c5.getLocal("itIn"), c5.i32_sub(c5.getLocal("itAux"), c5.i32_const(n8)), c5.getLocal("itAux"))), c5.setLocal("itIn", c5.i32_add(c5.getLocal("itIn"), c5.getLocal("inStep"))), c5.setLocal("itAux", c5.i32_add(c5.getLocal("itAux"), c5.i32_const(n8))), c5.setLocal("i", c5.i32_add(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))), c5.setLocal("itIn", c5.i32_sub(c5.getLocal("itIn"), c5.getLocal("inStep"))), c5.setLocal("itAux", c5.i32_sub(c5.getLocal("itAux"), c5.i32_const(n8))), c5.setLocal("itOut", c5.i32_add(c5.getLocal("pOut"), c5.i32_mul(c5.i32_sub(c5.getLocal("n"), c5.i32_const(1)), c5.getLocal("outStep")))), c5.call(prefix + "_inverse", c5.getLocal("itAux"), c5.getLocal("itAux")), c5.block(c5.loop(c5.br_if(1, c5.i32_eqz(c5.getLocal("i"))), c5.if(c5.call(prefix + "_isZero", c5.getLocal("itIn")), [
    ...c5.call(prefix + "_copy", c5.getLocal("itAux"), c5.i32_sub(c5.getLocal("itAux"), c5.i32_const(n8))),
    ...c5.call(prefix + "_zero", c5.getLocal("itOut"))
  ], [
    ...c5.call(prefix + "_copy", c5.i32_sub(c5.getLocal("itAux"), c5.i32_const(n8)), AUX),
    ...c5.call(prefix + "_mul", c5.getLocal("itAux"), c5.getLocal("itIn"), c5.i32_sub(c5.getLocal("itAux"), c5.i32_const(n8))),
    ...c5.call(prefix + "_mul", c5.getLocal("itAux"), AUX, c5.getLocal("itOut"))
  ]), c5.setLocal("itIn", c5.i32_sub(c5.getLocal("itIn"), c5.getLocal("inStep"))), c5.setLocal("itOut", c5.i32_sub(c5.getLocal("itOut"), c5.getLocal("outStep"))), c5.setLocal("itAux", c5.i32_sub(c5.getLocal("itAux"), c5.i32_const(n8))), c5.setLocal("i", c5.i32_sub(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))));
  f3.addCode(c5.i32_store(c5.i32_const(0), c5.getLocal("itAux")));
}
var build_batchconvertion = buildBatchConvertion$1;
function buildBatchConvertion$1(module, fnName, internalFnName, sizeIn, sizeOut, reverse) {
  if (typeof reverse === "undefined") {
    if (sizeIn < sizeOut) {
      reverse = true;
    } else {
      reverse = false;
    }
  }
  const f3 = module.addFunction(fnName);
  f3.addParam("pIn", "i32");
  f3.addParam("n", "i32");
  f3.addParam("pOut", "i32");
  f3.addLocal("i", "i32");
  f3.addLocal("itIn", "i32");
  f3.addLocal("itOut", "i32");
  const c5 = f3.getCodeBuilder();
  if (reverse) {
    f3.addCode(c5.setLocal("itIn", c5.i32_add(c5.getLocal("pIn"), c5.i32_mul(c5.i32_sub(c5.getLocal("n"), c5.i32_const(1)), c5.i32_const(sizeIn)))), c5.setLocal("itOut", c5.i32_add(c5.getLocal("pOut"), c5.i32_mul(c5.i32_sub(c5.getLocal("n"), c5.i32_const(1)), c5.i32_const(sizeOut)))), c5.setLocal("i", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("i"), c5.getLocal("n"))), c5.call(internalFnName, c5.getLocal("itIn"), c5.getLocal("itOut")), c5.setLocal("itIn", c5.i32_sub(c5.getLocal("itIn"), c5.i32_const(sizeIn))), c5.setLocal("itOut", c5.i32_sub(c5.getLocal("itOut"), c5.i32_const(sizeOut))), c5.setLocal("i", c5.i32_add(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))));
  } else {
    f3.addCode(c5.setLocal("itIn", c5.getLocal("pIn")), c5.setLocal("itOut", c5.getLocal("pOut")), c5.setLocal("i", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("i"), c5.getLocal("n"))), c5.call(internalFnName, c5.getLocal("itIn"), c5.getLocal("itOut")), c5.setLocal("itIn", c5.i32_add(c5.getLocal("itIn"), c5.i32_const(sizeIn))), c5.setLocal("itOut", c5.i32_add(c5.getLocal("itOut"), c5.i32_const(sizeOut))), c5.setLocal("i", c5.i32_add(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))));
  }
}
var build_batchop = buildBatchConvertion;
function buildBatchConvertion(module, fnName, internalFnName, sizeIn, sizeOut, reverse) {
  if (typeof reverse === "undefined") {
    if (sizeIn < sizeOut) {
      reverse = true;
    } else {
      reverse = false;
    }
  }
  const f3 = module.addFunction(fnName);
  f3.addParam("pIn1", "i32");
  f3.addParam("pIn2", "i32");
  f3.addParam("n", "i32");
  f3.addParam("pOut", "i32");
  f3.addLocal("i", "i32");
  f3.addLocal("itIn1", "i32");
  f3.addLocal("itIn2", "i32");
  f3.addLocal("itOut", "i32");
  const c5 = f3.getCodeBuilder();
  if (reverse) {
    f3.addCode(c5.setLocal("itIn1", c5.i32_add(c5.getLocal("pIn1"), c5.i32_mul(c5.i32_sub(c5.getLocal("n"), c5.i32_const(1)), c5.i32_const(sizeIn)))), c5.setLocal("itIn2", c5.i32_add(c5.getLocal("pIn2"), c5.i32_mul(c5.i32_sub(c5.getLocal("n"), c5.i32_const(1)), c5.i32_const(sizeIn)))), c5.setLocal("itOut", c5.i32_add(c5.getLocal("pOut"), c5.i32_mul(c5.i32_sub(c5.getLocal("n"), c5.i32_const(1)), c5.i32_const(sizeOut)))), c5.setLocal("i", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("i"), c5.getLocal("n"))), c5.call(internalFnName, c5.getLocal("itIn1"), c5.getLocal("itIn2"), c5.getLocal("itOut")), c5.setLocal("itIn1", c5.i32_sub(c5.getLocal("itIn1"), c5.i32_const(sizeIn))), c5.setLocal("itIn2", c5.i32_sub(c5.getLocal("itIn2"), c5.i32_const(sizeIn))), c5.setLocal("itOut", c5.i32_sub(c5.getLocal("itOut"), c5.i32_const(sizeOut))), c5.setLocal("i", c5.i32_add(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))));
  } else {
    f3.addCode(c5.setLocal("itIn1", c5.getLocal("pIn1")), c5.setLocal("itIn2", c5.getLocal("pIn2")), c5.setLocal("itOut", c5.getLocal("pOut")), c5.setLocal("i", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("i"), c5.getLocal("n"))), c5.call(internalFnName, c5.getLocal("itIn1"), c5.getLocal("itIn2"), c5.getLocal("itOut")), c5.setLocal("itIn1", c5.i32_add(c5.getLocal("itIn1"), c5.i32_const(sizeIn))), c5.setLocal("itIn2", c5.i32_add(c5.getLocal("itIn2"), c5.i32_const(sizeIn))), c5.setLocal("itOut", c5.i32_add(c5.getLocal("itOut"), c5.i32_const(sizeOut))), c5.setLocal("i", c5.i32_add(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))));
  }
}
var build_f1m = function buildF1m(module, _q, _prefix, _intPrefix) {
  const q = BigInteger(_q);
  const n64 = Math.floor((q.minus(1).bitLength() - 1) / 64) + 1;
  const n32 = n64 * 2;
  const n8 = n64 * 8;
  const prefix = _prefix || "f1m";
  if (module.modules[prefix])
    return prefix;
  const intPrefix = build_int(module, n64, _intPrefix);
  const pq = module.alloc(n8, utils$3.bigInt2BytesLE(q, n8));
  module.alloc(utils$3.bigInt2BytesLE(BigInteger.one.shiftLeft(n64 * 64).mod(q), n8));
  const pR2 = module.alloc(utils$3.bigInt2BytesLE(BigInteger.one.shiftLeft(n64 * 64).square().mod(q), n8));
  const pOne = module.alloc(utils$3.bigInt2BytesLE(BigInteger.one.shiftLeft(n64 * 64).mod(q), n8));
  const pZero = module.alloc(utils$3.bigInt2BytesLE(BigInteger.zero, n8));
  const _minusOne = q.minus(BigInteger.one);
  const _e = _minusOne.shiftRight(1);
  const pe = module.alloc(n8, utils$3.bigInt2BytesLE(_e, n8));
  const _ePlusOne = _e.add(BigInteger.one);
  const pePlusOne = module.alloc(n8, utils$3.bigInt2BytesLE(_ePlusOne, n8));
  module.modules[prefix] = {
    pq,
    pR2,
    n64,
    q,
    pOne,
    pZero,
    pePlusOne
  };
  function buildOne() {
    const f3 = module.addFunction(prefix + "_one");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(intPrefix + "_copy", c5.i32_const(pOne), c5.getLocal("pr")));
  }
  function buildAdd() {
    const f3 = module.addFunction(prefix + "_add");
    f3.addParam("x", "i32");
    f3.addParam("y", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.if(c5.call(intPrefix + "_add", c5.getLocal("x"), c5.getLocal("y"), c5.getLocal("r")), c5.drop(c5.call(intPrefix + "_sub", c5.getLocal("r"), c5.i32_const(pq), c5.getLocal("r"))), c5.if(c5.call(intPrefix + "_gte", c5.getLocal("r"), c5.i32_const(pq)), c5.drop(c5.call(intPrefix + "_sub", c5.getLocal("r"), c5.i32_const(pq), c5.getLocal("r"))))));
  }
  function buildSub() {
    const f3 = module.addFunction(prefix + "_sub");
    f3.addParam("x", "i32");
    f3.addParam("y", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.if(c5.call(intPrefix + "_sub", c5.getLocal("x"), c5.getLocal("y"), c5.getLocal("r")), c5.drop(c5.call(intPrefix + "_add", c5.getLocal("r"), c5.i32_const(pq), c5.getLocal("r")))));
  }
  function buildNeg() {
    const f3 = module.addFunction(prefix + "_neg");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(prefix + "_sub", c5.i32_const(pZero), c5.getLocal("x"), c5.getLocal("r")));
  }
  function buildIsNegative() {
    const f3 = module.addFunction(prefix + "_isNegative");
    f3.addParam("x", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const AUX = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.call(prefix + "_fromMontgomery", c5.getLocal("x"), AUX), c5.call(intPrefix + "_gte", AUX, c5.i32_const(pePlusOne)));
  }
  function buildSign() {
    const f3 = module.addFunction(prefix + "_sign");
    f3.addParam("x", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const AUX = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.if(c5.call(intPrefix + "_isZero", c5.getLocal("x")), c5.ret(c5.i32_const(0))), c5.call(prefix + "_fromMontgomery", c5.getLocal("x"), AUX), c5.if(c5.call(intPrefix + "_gte", AUX, c5.i32_const(pePlusOne)), c5.ret(c5.i32_const(-1))), c5.ret(c5.i32_const(1)));
  }
  function buildMReduct() {
    const carries = module.alloc(n32 * n32 * 8);
    const f3 = module.addFunction(prefix + "_mReduct");
    f3.addParam("t", "i32");
    f3.addParam("r", "i32");
    f3.addLocal("np32", "i64");
    f3.addLocal("c", "i64");
    f3.addLocal("m", "i64");
    const c5 = f3.getCodeBuilder();
    const np32 = BigInteger("100000000", 16).minus(q.modInv(BigInteger("100000000", 16))).toJSNumber();
    f3.addCode(c5.setLocal("np32", c5.i64_const(np32)));
    for (let i3 = 0; i3 < n32; i3++) {
      f3.addCode(c5.setLocal("c", c5.i64_const(0)));
      f3.addCode(c5.setLocal("m", c5.i64_and(c5.i64_mul(c5.i64_load32_u(c5.getLocal("t"), i3 * 4), c5.getLocal("np32")), c5.i64_const("0xFFFFFFFF"))));
      for (let j3 = 0; j3 < n32; j3++) {
        f3.addCode(c5.setLocal("c", c5.i64_add(c5.i64_add(c5.i64_load32_u(c5.getLocal("t"), (i3 + j3) * 4), c5.i64_shr_u(c5.getLocal("c"), c5.i64_const(32))), c5.i64_mul(c5.i64_load32_u(c5.i32_const(pq), j3 * 4), c5.getLocal("m")))));
        f3.addCode(c5.i64_store32(c5.getLocal("t"), (i3 + j3) * 4, c5.getLocal("c")));
      }
      f3.addCode(c5.i64_store32(c5.i32_const(carries), i3 * 4, c5.i64_shr_u(c5.getLocal("c"), c5.i64_const(32))));
    }
    f3.addCode(c5.call(prefix + "_add", c5.i32_const(carries), c5.i32_add(c5.getLocal("t"), c5.i32_const(n32 * 4)), c5.getLocal("r")));
  }
  function buildMul() {
    const f3 = module.addFunction(prefix + "_mul");
    f3.addParam("x", "i32");
    f3.addParam("y", "i32");
    f3.addParam("r", "i32");
    f3.addLocal("c0", "i64");
    f3.addLocal("c1", "i64");
    f3.addLocal("np32", "i64");
    for (let i3 = 0; i3 < n32; i3++) {
      f3.addLocal("x" + i3, "i64");
      f3.addLocal("y" + i3, "i64");
      f3.addLocal("m" + i3, "i64");
      f3.addLocal("q" + i3, "i64");
    }
    const c5 = f3.getCodeBuilder();
    const np32 = BigInteger("100000000", 16).minus(q.modInv(BigInteger("100000000", 16))).toJSNumber();
    f3.addCode(c5.setLocal("np32", c5.i64_const(np32)));
    const loadX = [];
    const loadY = [];
    const loadQ = [];
    function mulij(i3, j3) {
      let X, Y;
      if (!loadX[i3]) {
        X = c5.teeLocal("x" + i3, c5.i64_load32_u(c5.getLocal("x"), i3 * 4));
        loadX[i3] = true;
      } else {
        X = c5.getLocal("x" + i3);
      }
      if (!loadY[j3]) {
        Y = c5.teeLocal("y" + j3, c5.i64_load32_u(c5.getLocal("y"), j3 * 4));
        loadY[j3] = true;
      } else {
        Y = c5.getLocal("y" + j3);
      }
      return c5.i64_mul(X, Y);
    }
    function mulqm(i3, j3) {
      let Q, M3;
      if (!loadQ[i3]) {
        Q = c5.teeLocal("q" + i3, c5.i64_load32_u(c5.i32_const(0), pq + i3 * 4));
        loadQ[i3] = true;
      } else {
        Q = c5.getLocal("q" + i3);
      }
      M3 = c5.getLocal("m" + j3);
      return c5.i64_mul(Q, M3);
    }
    let c0 = "c0";
    let c1 = "c1";
    for (let k3 = 0; k3 < n32 * 2 - 1; k3++) {
      for (let i3 = Math.max(0, k3 - n32 + 1); i3 <= k3 && i3 < n32; i3++) {
        const j3 = k3 - i3;
        f3.addCode(c5.setLocal(c0, c5.i64_add(c5.i64_and(c5.getLocal(c0), c5.i64_const(4294967295)), mulij(i3, j3))));
        f3.addCode(c5.setLocal(c1, c5.i64_add(c5.getLocal(c1), c5.i64_shr_u(c5.getLocal(c0), c5.i64_const(32)))));
      }
      for (let i3 = Math.max(1, k3 - n32 + 1); i3 <= k3 && i3 < n32; i3++) {
        const j3 = k3 - i3;
        f3.addCode(c5.setLocal(c0, c5.i64_add(c5.i64_and(c5.getLocal(c0), c5.i64_const(4294967295)), mulqm(i3, j3))));
        f3.addCode(c5.setLocal(c1, c5.i64_add(c5.getLocal(c1), c5.i64_shr_u(c5.getLocal(c0), c5.i64_const(32)))));
      }
      if (k3 < n32) {
        f3.addCode(c5.setLocal("m" + k3, c5.i64_and(c5.i64_mul(c5.i64_and(c5.getLocal(c0), c5.i64_const(4294967295)), c5.getLocal("np32")), c5.i64_const("0xFFFFFFFF"))));
        f3.addCode(c5.setLocal(c0, c5.i64_add(c5.i64_and(c5.getLocal(c0), c5.i64_const(4294967295)), mulqm(0, k3))));
        f3.addCode(c5.setLocal(c1, c5.i64_add(c5.getLocal(c1), c5.i64_shr_u(c5.getLocal(c0), c5.i64_const(32)))));
      }
      if (k3 >= n32) {
        f3.addCode(c5.i64_store32(c5.getLocal("r"), (k3 - n32) * 4, c5.getLocal(c0)));
      }
      [c0, c1] = [c1, c0];
      f3.addCode(c5.setLocal(c1, c5.i64_shr_u(c5.getLocal(c0), c5.i64_const(32))));
    }
    f3.addCode(c5.i64_store32(c5.getLocal("r"), n32 * 4 - 4, c5.getLocal(c0)));
    f3.addCode(c5.if(c5.i32_wrap_i64(c5.getLocal(c1)), c5.drop(c5.call(intPrefix + "_sub", c5.getLocal("r"), c5.i32_const(pq), c5.getLocal("r"))), c5.if(c5.call(intPrefix + "_gte", c5.getLocal("r"), c5.i32_const(pq)), c5.drop(c5.call(intPrefix + "_sub", c5.getLocal("r"), c5.i32_const(pq), c5.getLocal("r"))))));
  }
  function buildSquare() {
    const f3 = module.addFunction(prefix + "_square");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    f3.addLocal("c0", "i64");
    f3.addLocal("c1", "i64");
    f3.addLocal("c0_old", "i64");
    f3.addLocal("c1_old", "i64");
    f3.addLocal("np32", "i64");
    for (let i3 = 0; i3 < n32; i3++) {
      f3.addLocal("x" + i3, "i64");
      f3.addLocal("m" + i3, "i64");
      f3.addLocal("q" + i3, "i64");
    }
    const c5 = f3.getCodeBuilder();
    const np32 = BigInteger("100000000", 16).minus(q.modInv(BigInteger("100000000", 16))).toJSNumber();
    f3.addCode(c5.setLocal("np32", c5.i64_const(np32)));
    const loadX = [];
    const loadQ = [];
    function mulij(i3, j3) {
      let X, Y;
      if (!loadX[i3]) {
        X = c5.teeLocal("x" + i3, c5.i64_load32_u(c5.getLocal("x"), i3 * 4));
        loadX[i3] = true;
      } else {
        X = c5.getLocal("x" + i3);
      }
      if (!loadX[j3]) {
        Y = c5.teeLocal("x" + j3, c5.i64_load32_u(c5.getLocal("x"), j3 * 4));
        loadX[j3] = true;
      } else {
        Y = c5.getLocal("x" + j3);
      }
      return c5.i64_mul(X, Y);
    }
    function mulqm(i3, j3) {
      let Q, M3;
      if (!loadQ[i3]) {
        Q = c5.teeLocal("q" + i3, c5.i64_load32_u(c5.i32_const(0), pq + i3 * 4));
        loadQ[i3] = true;
      } else {
        Q = c5.getLocal("q" + i3);
      }
      M3 = c5.getLocal("m" + j3);
      return c5.i64_mul(Q, M3);
    }
    let c0 = "c0";
    let c1 = "c1";
    let c0_old = "c0_old";
    let c1_old = "c1_old";
    for (let k3 = 0; k3 < n32 * 2 - 1; k3++) {
      f3.addCode(c5.setLocal(c0, c5.i64_const(0)), c5.setLocal(c1, c5.i64_const(0)));
      for (let i3 = Math.max(0, k3 - n32 + 1); i3 < k3 + 1 >> 1 && i3 < n32; i3++) {
        const j3 = k3 - i3;
        f3.addCode(c5.setLocal(c0, c5.i64_add(c5.i64_and(c5.getLocal(c0), c5.i64_const(4294967295)), mulij(i3, j3))));
        f3.addCode(c5.setLocal(c1, c5.i64_add(c5.getLocal(c1), c5.i64_shr_u(c5.getLocal(c0), c5.i64_const(32)))));
      }
      f3.addCode(c5.setLocal(c0, c5.i64_shl(c5.i64_and(c5.getLocal(c0), c5.i64_const(4294967295)), c5.i64_const(1))));
      f3.addCode(c5.setLocal(c1, c5.i64_add(c5.i64_shl(c5.getLocal(c1), c5.i64_const(1)), c5.i64_shr_u(c5.getLocal(c0), c5.i64_const(32)))));
      if (k3 % 2 == 0) {
        f3.addCode(c5.setLocal(c0, c5.i64_add(c5.i64_and(c5.getLocal(c0), c5.i64_const(4294967295)), mulij(k3 >> 1, k3 >> 1))));
        f3.addCode(c5.setLocal(c1, c5.i64_add(c5.getLocal(c1), c5.i64_shr_u(c5.getLocal(c0), c5.i64_const(32)))));
      }
      if (k3 > 0) {
        f3.addCode(c5.setLocal(c0, c5.i64_add(c5.i64_and(c5.getLocal(c0), c5.i64_const(4294967295)), c5.i64_and(c5.getLocal(c0_old), c5.i64_const(4294967295)))));
        f3.addCode(c5.setLocal(c1, c5.i64_add(c5.i64_add(c5.getLocal(c1), c5.i64_shr_u(c5.getLocal(c0), c5.i64_const(32))), c5.getLocal(c1_old))));
      }
      for (let i3 = Math.max(1, k3 - n32 + 1); i3 <= k3 && i3 < n32; i3++) {
        const j3 = k3 - i3;
        f3.addCode(c5.setLocal(c0, c5.i64_add(c5.i64_and(c5.getLocal(c0), c5.i64_const(4294967295)), mulqm(i3, j3))));
        f3.addCode(c5.setLocal(c1, c5.i64_add(c5.getLocal(c1), c5.i64_shr_u(c5.getLocal(c0), c5.i64_const(32)))));
      }
      if (k3 < n32) {
        f3.addCode(c5.setLocal("m" + k3, c5.i64_and(c5.i64_mul(c5.i64_and(c5.getLocal(c0), c5.i64_const(4294967295)), c5.getLocal("np32")), c5.i64_const("0xFFFFFFFF"))));
        f3.addCode(c5.setLocal(c0, c5.i64_add(c5.i64_and(c5.getLocal(c0), c5.i64_const(4294967295)), mulqm(0, k3))));
        f3.addCode(c5.setLocal(c1, c5.i64_add(c5.getLocal(c1), c5.i64_shr_u(c5.getLocal(c0), c5.i64_const(32)))));
      }
      if (k3 >= n32) {
        f3.addCode(c5.i64_store32(c5.getLocal("r"), (k3 - n32) * 4, c5.getLocal(c0)));
      }
      f3.addCode(c5.setLocal(c0_old, c5.getLocal(c1)), c5.setLocal(c1_old, c5.i64_shr_u(c5.getLocal(c0_old), c5.i64_const(32))));
    }
    f3.addCode(c5.i64_store32(c5.getLocal("r"), n32 * 4 - 4, c5.getLocal(c0_old)));
    f3.addCode(c5.if(c5.i32_wrap_i64(c5.getLocal(c1_old)), c5.drop(c5.call(intPrefix + "_sub", c5.getLocal("r"), c5.i32_const(pq), c5.getLocal("r"))), c5.if(c5.call(intPrefix + "_gte", c5.getLocal("r"), c5.i32_const(pq)), c5.drop(c5.call(intPrefix + "_sub", c5.getLocal("r"), c5.i32_const(pq), c5.getLocal("r"))))));
  }
  function buildSquareOld() {
    const f3 = module.addFunction(prefix + "_squareOld");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(prefix + "_mul", c5.getLocal("x"), c5.getLocal("x"), c5.getLocal("r")));
  }
  function buildToMontgomery() {
    const f3 = module.addFunction(prefix + "_toMontgomery");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(prefix + "_mul", c5.getLocal("x"), c5.i32_const(pR2), c5.getLocal("r")));
  }
  function buildFromMontgomery() {
    const pAux2 = module.alloc(n8 * 2);
    const f3 = module.addFunction(prefix + "_fromMontgomery");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(intPrefix + "_copy", c5.getLocal("x"), c5.i32_const(pAux2)));
    f3.addCode(c5.call(intPrefix + "_zero", c5.i32_const(pAux2 + n8)));
    f3.addCode(c5.call(prefix + "_mReduct", c5.i32_const(pAux2), c5.getLocal("r")));
  }
  function buildInverse() {
    const f3 = module.addFunction(prefix + "_inverse");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(prefix + "_fromMontgomery", c5.getLocal("x"), c5.getLocal("r")));
    f3.addCode(c5.call(intPrefix + "_inverseMod", c5.getLocal("r"), c5.i32_const(pq), c5.getLocal("r")));
    f3.addCode(c5.call(prefix + "_toMontgomery", c5.getLocal("r"), c5.getLocal("r")));
  }
  let _nqr = BigInteger(2);
  if (q.isPrime()) {
    while (!_nqr.modPow(_e, q).equals(_minusOne))
      _nqr = _nqr.add(BigInteger.one);
  }
  module.alloc(utils$3.bigInt2BytesLE(_nqr.shiftLeft(n64 * 64).mod(q), n8));
  let s2 = 0;
  let _t = _minusOne;
  while (!_t.isOdd() && !_t.isZero()) {
    s2++;
    _t = _t.shiftRight(1);
  }
  const pt = module.alloc(n8, utils$3.bigInt2BytesLE(_t, n8));
  const _nqrToT = _nqr.modPow(_t, q);
  const pNqrToT = module.alloc(utils$3.bigInt2BytesLE(_nqrToT.shiftLeft(n64 * 64).mod(q), n8));
  const _tPlusOneOver2 = _t.add(1).shiftRight(1);
  const ptPlusOneOver2 = module.alloc(n8, utils$3.bigInt2BytesLE(_tPlusOneOver2, n8));
  function buildSqrt2() {
    const f3 = module.addFunction(prefix + "_sqrt");
    f3.addParam("n", "i32");
    f3.addParam("r", "i32");
    f3.addLocal("m", "i32");
    f3.addLocal("i", "i32");
    f3.addLocal("j", "i32");
    const c5 = f3.getCodeBuilder();
    const ONE2 = c5.i32_const(pOne);
    const C3 = c5.i32_const(module.alloc(n8));
    const T2 = c5.i32_const(module.alloc(n8));
    const R = c5.i32_const(module.alloc(n8));
    const SQ = c5.i32_const(module.alloc(n8));
    const B = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.if(c5.call(prefix + "_isZero", c5.getLocal("n")), c5.ret(c5.call(prefix + "_zero", c5.getLocal("r")))), c5.setLocal("m", c5.i32_const(s2)), c5.call(prefix + "_copy", c5.i32_const(pNqrToT), C3), c5.call(prefix + "_exp", c5.getLocal("n"), c5.i32_const(pt), c5.i32_const(n8), T2), c5.call(prefix + "_exp", c5.getLocal("n"), c5.i32_const(ptPlusOneOver2), c5.i32_const(n8), R), c5.block(c5.loop(c5.br_if(1, c5.call(prefix + "_eq", T2, ONE2)), c5.call(prefix + "_square", T2, SQ), c5.setLocal("i", c5.i32_const(1)), c5.block(c5.loop(c5.br_if(1, c5.call(prefix + "_eq", SQ, ONE2)), c5.call(prefix + "_square", SQ, SQ), c5.setLocal("i", c5.i32_add(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))), c5.call(prefix + "_copy", C3, B), c5.setLocal("j", c5.i32_sub(c5.i32_sub(c5.getLocal("m"), c5.getLocal("i")), c5.i32_const(1))), c5.block(c5.loop(c5.br_if(1, c5.i32_eqz(c5.getLocal("j"))), c5.call(prefix + "_square", B, B), c5.setLocal("j", c5.i32_sub(c5.getLocal("j"), c5.i32_const(1))), c5.br(0))), c5.setLocal("m", c5.getLocal("i")), c5.call(prefix + "_square", B, C3), c5.call(prefix + "_mul", T2, C3, T2), c5.call(prefix + "_mul", R, B, R), c5.br(0))), c5.if(c5.call(prefix + "_isNegative", R), c5.call(prefix + "_neg", R, c5.getLocal("r")), c5.call(prefix + "_copy", R, c5.getLocal("r"))));
  }
  function buildIsSquare() {
    const f3 = module.addFunction(prefix + "_isSquare");
    f3.addParam("n", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const ONE2 = c5.i32_const(pOne);
    const AUX = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.if(c5.call(prefix + "_isZero", c5.getLocal("n")), c5.ret(c5.i32_const(1))), c5.call(prefix + "_exp", c5.getLocal("n"), c5.i32_const(pe), c5.i32_const(n8), AUX), c5.call(prefix + "_eq", AUX, ONE2));
  }
  function buildLoad() {
    const f3 = module.addFunction(prefix + "_load");
    f3.addParam("scalar", "i32");
    f3.addParam("scalarLen", "i32");
    f3.addParam("r", "i32");
    f3.addLocal("p", "i32");
    f3.addLocal("l", "i32");
    f3.addLocal("i", "i32");
    f3.addLocal("j", "i32");
    const c5 = f3.getCodeBuilder();
    const R = c5.i32_const(module.alloc(n8));
    const pAux = module.alloc(n8);
    const AUX = c5.i32_const(pAux);
    f3.addCode(c5.call(intPrefix + "_zero", c5.getLocal("r")), c5.setLocal("i", c5.i32_const(n8)), c5.setLocal("p", c5.getLocal("scalar")), c5.block(c5.loop(c5.br_if(1, c5.i32_gt_u(c5.getLocal("i"), c5.getLocal("scalarLen"))), c5.if(c5.i32_eq(c5.getLocal("i"), c5.i32_const(n8)), c5.call(prefix + "_one", R), c5.call(prefix + "_mul", R, c5.i32_const(pR2), R)), c5.call(prefix + "_mul", c5.getLocal("p"), R, AUX), c5.call(prefix + "_add", c5.getLocal("r"), AUX, c5.getLocal("r")), c5.setLocal("p", c5.i32_add(c5.getLocal("p"), c5.i32_const(n8))), c5.setLocal("i", c5.i32_add(c5.getLocal("i"), c5.i32_const(n8))), c5.br(0))), c5.setLocal("l", c5.i32_rem_u(c5.getLocal("scalarLen"), c5.i32_const(n8))), c5.if(c5.i32_eqz(c5.getLocal("l")), c5.ret([])), c5.call(intPrefix + "_zero", AUX), c5.setLocal("j", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("j"), c5.getLocal("l"))), c5.i32_store8(c5.getLocal("j"), pAux, c5.i32_load8_u(c5.getLocal("p"))), c5.setLocal("p", c5.i32_add(c5.getLocal("p"), c5.i32_const(1))), c5.setLocal("j", c5.i32_add(c5.getLocal("j"), c5.i32_const(1))), c5.br(0))), c5.if(c5.i32_eq(c5.getLocal("i"), c5.i32_const(n8)), c5.call(prefix + "_one", R), c5.call(prefix + "_mul", R, c5.i32_const(pR2), R)), c5.call(prefix + "_mul", AUX, R, AUX), c5.call(prefix + "_add", c5.getLocal("r"), AUX, c5.getLocal("r")));
  }
  function buildTimesScalar2() {
    const f3 = module.addFunction(prefix + "_timesScalar");
    f3.addParam("x", "i32");
    f3.addParam("scalar", "i32");
    f3.addParam("scalarLen", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const AUX = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.call(prefix + "_load", c5.getLocal("scalar"), c5.getLocal("scalarLen"), AUX), c5.call(prefix + "_toMontgomery", AUX, AUX), c5.call(prefix + "_mul", c5.getLocal("x"), AUX, c5.getLocal("r")));
  }
  function buildIsOne() {
    const f3 = module.addFunction(prefix + "_isOne");
    f3.addParam("x", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.ret(c5.call(intPrefix + "_eq", c5.getLocal("x"), c5.i32_const(pOne))));
  }
  module.exportFunction(intPrefix + "_copy", prefix + "_copy");
  module.exportFunction(intPrefix + "_zero", prefix + "_zero");
  module.exportFunction(intPrefix + "_isZero", prefix + "_isZero");
  module.exportFunction(intPrefix + "_eq", prefix + "_eq");
  buildIsOne();
  buildAdd();
  buildSub();
  buildNeg();
  buildMReduct();
  buildMul();
  buildSquare();
  buildSquareOld();
  buildToMontgomery();
  buildFromMontgomery();
  buildIsNegative();
  buildSign();
  buildInverse();
  buildOne();
  buildLoad();
  buildTimesScalar2();
  build_batchinverse(module, prefix);
  build_batchconvertion(module, prefix + "_batchToMontgomery", prefix + "_toMontgomery", n8, n8);
  build_batchconvertion(module, prefix + "_batchFromMontgomery", prefix + "_fromMontgomery", n8, n8);
  build_batchconvertion(module, prefix + "_batchNeg", prefix + "_neg", n8, n8);
  build_batchop(module, prefix + "_batchAdd", prefix + "_add", n8, n8);
  build_batchop(module, prefix + "_batchSub", prefix + "_sub", n8, n8);
  build_batchop(module, prefix + "_batchMul", prefix + "_mul", n8, n8);
  module.exportFunction(prefix + "_add");
  module.exportFunction(prefix + "_sub");
  module.exportFunction(prefix + "_neg");
  module.exportFunction(prefix + "_isNegative");
  module.exportFunction(prefix + "_isOne");
  module.exportFunction(prefix + "_sign");
  module.exportFunction(prefix + "_mReduct");
  module.exportFunction(prefix + "_mul");
  module.exportFunction(prefix + "_square");
  module.exportFunction(prefix + "_squareOld");
  module.exportFunction(prefix + "_fromMontgomery");
  module.exportFunction(prefix + "_toMontgomery");
  module.exportFunction(prefix + "_inverse");
  module.exportFunction(prefix + "_one");
  module.exportFunction(prefix + "_load");
  module.exportFunction(prefix + "_timesScalar");
  build_timesscalar(module, prefix + "_exp", n8, prefix + "_mul", prefix + "_square", intPrefix + "_copy", prefix + "_one");
  module.exportFunction(prefix + "_exp");
  module.exportFunction(prefix + "_batchInverse");
  if (q.isPrime()) {
    buildSqrt2();
    buildIsSquare();
    module.exportFunction(prefix + "_sqrt");
    module.exportFunction(prefix + "_isSquare");
  }
  module.exportFunction(prefix + "_batchToMontgomery");
  module.exportFunction(prefix + "_batchFromMontgomery");
  return prefix;
};
var build_f1 = function buildF1(module, _q, _prefix, _f1mPrefix, _intPrefix) {
  const q = BigInteger(_q);
  const n64 = Math.floor((q.minus(1).bitLength() - 1) / 64) + 1;
  const n8 = n64 * 8;
  const prefix = _prefix || "f1";
  if (module.modules[prefix])
    return prefix;
  module.modules[prefix] = {
    n64
  };
  const intPrefix = _intPrefix || "int";
  const f1mPrefix = build_f1m(module, q, _f1mPrefix, intPrefix);
  const pR2 = module.modules[f1mPrefix].pR2;
  const pq = module.modules[f1mPrefix].pq;
  const pePlusOne = module.modules[f1mPrefix].pePlusOne;
  function buildMul() {
    const pAux1 = module.alloc(n8);
    const f3 = module.addFunction(prefix + "_mul");
    f3.addParam("x", "i32");
    f3.addParam("y", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(f1mPrefix + "_mul", c5.getLocal("x"), c5.getLocal("y"), c5.i32_const(pAux1)));
    f3.addCode(c5.call(f1mPrefix + "_mul", c5.i32_const(pAux1), c5.i32_const(pR2), c5.getLocal("r")));
  }
  function buildSquare() {
    const f3 = module.addFunction(prefix + "_square");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(prefix + "_mul", c5.getLocal("x"), c5.getLocal("x"), c5.getLocal("r")));
  }
  function buildInverse() {
    const f3 = module.addFunction(prefix + "_inverse");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(intPrefix + "_inverseMod", c5.getLocal("x"), c5.i32_const(pq), c5.getLocal("r")));
  }
  function buildIsNegative() {
    const f3 = module.addFunction(prefix + "_isNegative");
    f3.addParam("x", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(intPrefix + "_gte", c5.getLocal("x"), c5.i32_const(pePlusOne)));
  }
  buildMul();
  buildSquare();
  buildInverse();
  buildIsNegative();
  module.exportFunction(f1mPrefix + "_add", prefix + "_add");
  module.exportFunction(f1mPrefix + "_sub", prefix + "_sub");
  module.exportFunction(f1mPrefix + "_neg", prefix + "_neg");
  module.exportFunction(prefix + "_mul");
  module.exportFunction(prefix + "_square");
  module.exportFunction(prefix + "_inverse");
  module.exportFunction(prefix + "_isNegative");
  module.exportFunction(f1mPrefix + "_copy", prefix + "_copy");
  module.exportFunction(f1mPrefix + "_zero", prefix + "_zero");
  module.exportFunction(f1mPrefix + "_one", prefix + "_one");
  module.exportFunction(f1mPrefix + "_isZero", prefix + "_isZero");
  module.exportFunction(f1mPrefix + "_eq", prefix + "_eq");
  return prefix;
};
var build_f2m = function buildF2m(module, mulNonResidueFn, prefix, f1mPrefix) {
  if (module.modules[prefix])
    return prefix;
  const f1n8 = module.modules[f1mPrefix].n64 * 8;
  const q = module.modules[f1mPrefix].q;
  module.modules[prefix] = {
    n64: module.modules[f1mPrefix].n64 * 2
  };
  function buildAdd() {
    const f3 = module.addFunction(prefix + "_add");
    f3.addParam("x", "i32");
    f3.addParam("y", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const y0 = c5.getLocal("y");
    const y1 = c5.i32_add(c5.getLocal("y"), c5.i32_const(f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    f3.addCode(c5.call(f1mPrefix + "_add", x0, y0, r0), c5.call(f1mPrefix + "_add", x1, y1, r1));
  }
  function buildTimesScalar2() {
    const f3 = module.addFunction(prefix + "_timesScalar");
    f3.addParam("x", "i32");
    f3.addParam("scalar", "i32");
    f3.addParam("scalarLen", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    f3.addCode(c5.call(f1mPrefix + "_timesScalar", x0, c5.getLocal("scalar"), c5.getLocal("scalarLen"), r0), c5.call(f1mPrefix + "_timesScalar", x1, c5.getLocal("scalar"), c5.getLocal("scalarLen"), r1));
  }
  function buildSub() {
    const f3 = module.addFunction(prefix + "_sub");
    f3.addParam("x", "i32");
    f3.addParam("y", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const y0 = c5.getLocal("y");
    const y1 = c5.i32_add(c5.getLocal("y"), c5.i32_const(f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    f3.addCode(c5.call(f1mPrefix + "_sub", x0, y0, r0), c5.call(f1mPrefix + "_sub", x1, y1, r1));
  }
  function buildNeg() {
    const f3 = module.addFunction(prefix + "_neg");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    f3.addCode(c5.call(f1mPrefix + "_neg", x0, r0), c5.call(f1mPrefix + "_neg", x1, r1));
  }
  function buildConjugate() {
    const f3 = module.addFunction(prefix + "_conjugate");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    f3.addCode(c5.call(f1mPrefix + "_copy", x0, r0), c5.call(f1mPrefix + "_neg", x1, r1));
  }
  function buildIsNegative() {
    const f3 = module.addFunction(prefix + "_isNegative");
    f3.addParam("x", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    f3.addCode(c5.if(c5.call(f1mPrefix + "_isZero", x1), c5.ret(c5.call(f1mPrefix + "_isNegative", x0))), c5.ret(c5.call(f1mPrefix + "_isNegative", x1)));
  }
  function buildMul() {
    const f3 = module.addFunction(prefix + "_mul");
    f3.addParam("x", "i32");
    f3.addParam("y", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const y0 = c5.getLocal("y");
    const y1 = c5.i32_add(c5.getLocal("y"), c5.i32_const(f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    const A = c5.i32_const(module.alloc(f1n8));
    const B = c5.i32_const(module.alloc(f1n8));
    const C3 = c5.i32_const(module.alloc(f1n8));
    const D2 = c5.i32_const(module.alloc(f1n8));
    f3.addCode(c5.call(f1mPrefix + "_mul", x0, y0, A), c5.call(f1mPrefix + "_mul", x1, y1, B), c5.call(f1mPrefix + "_add", x0, x1, C3), c5.call(f1mPrefix + "_add", y0, y1, D2), c5.call(f1mPrefix + "_mul", C3, D2, C3), c5.call(mulNonResidueFn, B, r0), c5.call(f1mPrefix + "_add", A, r0, r0), c5.call(f1mPrefix + "_add", A, B, r1), c5.call(f1mPrefix + "_sub", C3, r1, r1));
  }
  function buildMul1() {
    const f3 = module.addFunction(prefix + "_mul1");
    f3.addParam("x", "i32");
    f3.addParam("y", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const y3 = c5.getLocal("y");
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    f3.addCode(c5.call(f1mPrefix + "_mul", x0, y3, r0), c5.call(f1mPrefix + "_mul", x1, y3, r1));
  }
  function buildSquare() {
    const f3 = module.addFunction(prefix + "_square");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    const AB = c5.i32_const(module.alloc(f1n8));
    const APB = c5.i32_const(module.alloc(f1n8));
    const APNB = c5.i32_const(module.alloc(f1n8));
    const ABPNAB = c5.i32_const(module.alloc(f1n8));
    f3.addCode(c5.call(f1mPrefix + "_mul", x0, x1, AB), c5.call(f1mPrefix + "_add", x0, x1, APB), c5.call(mulNonResidueFn, x1, APNB), c5.call(f1mPrefix + "_add", x0, APNB, APNB), c5.call(mulNonResidueFn, AB, ABPNAB), c5.call(f1mPrefix + "_add", ABPNAB, AB, ABPNAB), c5.call(f1mPrefix + "_mul", APB, APNB, r0), c5.call(f1mPrefix + "_sub", r0, ABPNAB, r0), c5.call(f1mPrefix + "_add", AB, AB, r1));
  }
  function buildToMontgomery() {
    const f3 = module.addFunction(prefix + "_toMontgomery");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    f3.addCode(c5.call(f1mPrefix + "_toMontgomery", x0, r0), c5.call(f1mPrefix + "_toMontgomery", x1, r1));
  }
  function buildFromMontgomery() {
    const f3 = module.addFunction(prefix + "_fromMontgomery");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    f3.addCode(c5.call(f1mPrefix + "_fromMontgomery", x0, r0), c5.call(f1mPrefix + "_fromMontgomery", x1, r1));
  }
  function buildCopy() {
    const f3 = module.addFunction(prefix + "_copy");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    f3.addCode(c5.call(f1mPrefix + "_copy", x0, r0), c5.call(f1mPrefix + "_copy", x1, r1));
  }
  function buildZero() {
    const f3 = module.addFunction(prefix + "_zero");
    f3.addParam("x", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    f3.addCode(c5.call(f1mPrefix + "_zero", x0), c5.call(f1mPrefix + "_zero", x1));
  }
  function buildOne() {
    const f3 = module.addFunction(prefix + "_one");
    f3.addParam("x", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    f3.addCode(c5.call(f1mPrefix + "_one", x0), c5.call(f1mPrefix + "_zero", x1));
  }
  function buildEq() {
    const f3 = module.addFunction(prefix + "_eq");
    f3.addParam("x", "i32");
    f3.addParam("y", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const y0 = c5.getLocal("y");
    const y1 = c5.i32_add(c5.getLocal("y"), c5.i32_const(f1n8));
    f3.addCode(c5.i32_and(c5.call(f1mPrefix + "_eq", x0, y0), c5.call(f1mPrefix + "_eq", x1, y1)));
  }
  function buildIsZero() {
    const f3 = module.addFunction(prefix + "_isZero");
    f3.addParam("x", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    f3.addCode(c5.i32_and(c5.call(f1mPrefix + "_isZero", x0), c5.call(f1mPrefix + "_isZero", x1)));
  }
  function buildInverse() {
    const f3 = module.addFunction(prefix + "_inverse");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    const t0 = c5.i32_const(module.alloc(f1n8));
    const t1 = c5.i32_const(module.alloc(f1n8));
    const t22 = c5.i32_const(module.alloc(f1n8));
    const t3 = c5.i32_const(module.alloc(f1n8));
    f3.addCode(c5.call(f1mPrefix + "_square", x0, t0), c5.call(f1mPrefix + "_square", x1, t1), c5.call(mulNonResidueFn, t1, t22), c5.call(f1mPrefix + "_sub", t0, t22, t22), c5.call(f1mPrefix + "_inverse", t22, t3), c5.call(f1mPrefix + "_mul", x0, t3, r0), c5.call(f1mPrefix + "_mul", x1, t3, r1), c5.call(f1mPrefix + "_neg", r1, r1));
  }
  function buildSign() {
    const f3 = module.addFunction(prefix + "_sign");
    f3.addParam("x", "i32");
    f3.addLocal("s", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    f3.addCode(c5.setLocal("s", c5.call(f1mPrefix + "_sign", x1)), c5.if(c5.getLocal("s"), c5.ret(c5.getLocal("s"))), c5.ret(c5.call(f1mPrefix + "_sign", x0)));
  }
  function buildIsOne() {
    const f3 = module.addFunction(prefix + "_isOne");
    f3.addParam("x", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    f3.addCode(c5.ret(c5.i32_and(c5.call(f1mPrefix + "_isOne", x0), c5.call(f1mPrefix + "_isZero", x1))));
  }
  function buildSqrt2() {
    const f3 = module.addFunction(prefix + "_sqrt");
    f3.addParam("a", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    const e34 = c5.i32_const(module.alloc(utils$3.bigInt2BytesLE(BigInteger(q).minus(BigInteger(3)).divide(4), f1n8)));
    const e12 = c5.i32_const(module.alloc(utils$3.bigInt2BytesLE(BigInteger(q).minus(BigInteger(1)).divide(2), f1n8)));
    const a3 = c5.getLocal("a");
    const a1 = c5.i32_const(module.alloc(f1n8 * 2));
    const alpha = c5.i32_const(module.alloc(f1n8 * 2));
    const a0 = c5.i32_const(module.alloc(f1n8 * 2));
    const pn1 = module.alloc(f1n8 * 2);
    const n1 = c5.i32_const(pn1);
    const n1a = c5.i32_const(pn1);
    const n1b = c5.i32_const(pn1 + f1n8);
    const x0 = c5.i32_const(module.alloc(f1n8 * 2));
    const b3 = c5.i32_const(module.alloc(f1n8 * 2));
    f3.addCode(c5.call(prefix + "_one", n1), c5.call(prefix + "_neg", n1, n1), c5.call(prefix + "_exp", a3, e34, c5.i32_const(f1n8), a1), c5.call(prefix + "_square", a1, alpha), c5.call(prefix + "_mul", a3, alpha, alpha), c5.call(prefix + "_conjugate", alpha, a0), c5.call(prefix + "_mul", a0, alpha, a0), c5.if(c5.call(prefix + "_eq", a0, n1), c5.unreachable()), c5.call(prefix + "_mul", a1, a3, x0), c5.if(c5.call(prefix + "_eq", alpha, n1), [
      ...c5.call(f1mPrefix + "_zero", n1a),
      ...c5.call(f1mPrefix + "_one", n1b),
      ...c5.call(prefix + "_mul", n1, x0, c5.getLocal("pr"))
    ], [
      ...c5.call(prefix + "_one", b3),
      ...c5.call(prefix + "_add", b3, alpha, b3),
      ...c5.call(prefix + "_exp", b3, e12, c5.i32_const(f1n8), b3),
      ...c5.call(prefix + "_mul", b3, x0, c5.getLocal("pr"))
    ]));
  }
  function buildIsSquare() {
    const f3 = module.addFunction(prefix + "_isSquare");
    f3.addParam("a", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const e34 = c5.i32_const(module.alloc(utils$3.bigInt2BytesLE(BigInteger(q).minus(BigInteger(3)).divide(4), f1n8)));
    const a3 = c5.getLocal("a");
    const a1 = c5.i32_const(module.alloc(f1n8 * 2));
    const alpha = c5.i32_const(module.alloc(f1n8 * 2));
    const a0 = c5.i32_const(module.alloc(f1n8 * 2));
    const pn1 = module.alloc(f1n8 * 2);
    const n1 = c5.i32_const(pn1);
    f3.addCode(c5.call(prefix + "_one", n1), c5.call(prefix + "_neg", n1, n1), c5.call(prefix + "_exp", a3, e34, c5.i32_const(f1n8), a1), c5.call(prefix + "_square", a1, alpha), c5.call(prefix + "_mul", a3, alpha, alpha), c5.call(prefix + "_conjugate", alpha, a0), c5.call(prefix + "_mul", a0, alpha, a0), c5.if(c5.call(prefix + "_eq", a0, n1), c5.ret(c5.i32_const(0))), c5.ret(c5.i32_const(1)));
  }
  buildIsZero();
  buildIsOne();
  buildZero();
  buildOne();
  buildCopy();
  buildMul();
  buildMul1();
  buildSquare();
  buildAdd();
  buildSub();
  buildNeg();
  buildConjugate();
  buildToMontgomery();
  buildFromMontgomery();
  buildEq();
  buildInverse();
  buildTimesScalar2();
  buildSign();
  buildIsNegative();
  module.exportFunction(prefix + "_isZero");
  module.exportFunction(prefix + "_isOne");
  module.exportFunction(prefix + "_zero");
  module.exportFunction(prefix + "_one");
  module.exportFunction(prefix + "_copy");
  module.exportFunction(prefix + "_mul");
  module.exportFunction(prefix + "_mul1");
  module.exportFunction(prefix + "_square");
  module.exportFunction(prefix + "_add");
  module.exportFunction(prefix + "_sub");
  module.exportFunction(prefix + "_neg");
  module.exportFunction(prefix + "_sign");
  module.exportFunction(prefix + "_conjugate");
  module.exportFunction(prefix + "_fromMontgomery");
  module.exportFunction(prefix + "_toMontgomery");
  module.exportFunction(prefix + "_eq");
  module.exportFunction(prefix + "_inverse");
  build_batchinverse(module, prefix);
  build_timesscalar(module, prefix + "_exp", f1n8 * 2, prefix + "_mul", prefix + "_square", prefix + "_copy", prefix + "_one");
  buildSqrt2();
  buildIsSquare();
  module.exportFunction(prefix + "_exp");
  module.exportFunction(prefix + "_timesScalar");
  module.exportFunction(prefix + "_batchInverse");
  module.exportFunction(prefix + "_sqrt");
  module.exportFunction(prefix + "_isSquare");
  module.exportFunction(prefix + "_isNegative");
  return prefix;
};
var build_f3m = function buildF3m(module, mulNonResidueFn, prefix, f1mPrefix) {
  if (module.modules[prefix])
    return prefix;
  const f1n8 = module.modules[f1mPrefix].n64 * 8;
  module.modules[prefix] = {
    n64: module.modules[f1mPrefix].n64 * 3
  };
  function buildAdd() {
    const f3 = module.addFunction(prefix + "_add");
    f3.addParam("x", "i32");
    f3.addParam("y", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const x22 = c5.i32_add(c5.getLocal("x"), c5.i32_const(2 * f1n8));
    const y0 = c5.getLocal("y");
    const y1 = c5.i32_add(c5.getLocal("y"), c5.i32_const(f1n8));
    const y22 = c5.i32_add(c5.getLocal("y"), c5.i32_const(2 * f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    const r22 = c5.i32_add(c5.getLocal("r"), c5.i32_const(2 * f1n8));
    f3.addCode(c5.call(f1mPrefix + "_add", x0, y0, r0), c5.call(f1mPrefix + "_add", x1, y1, r1), c5.call(f1mPrefix + "_add", x22, y22, r22));
  }
  function buildTimesScalar2() {
    const f3 = module.addFunction(prefix + "_timesScalar");
    f3.addParam("x", "i32");
    f3.addParam("scalar", "i32");
    f3.addParam("scalarLen", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const x22 = c5.i32_add(c5.getLocal("x"), c5.i32_const(2 * f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    const r22 = c5.i32_add(c5.getLocal("r"), c5.i32_const(2 * f1n8));
    f3.addCode(c5.call(f1mPrefix + "_timesScalar", x0, c5.getLocal("scalar"), c5.getLocal("scalarLen"), r0), c5.call(f1mPrefix + "_timesScalar", x1, c5.getLocal("scalar"), c5.getLocal("scalarLen"), r1), c5.call(f1mPrefix + "_timesScalar", x22, c5.getLocal("scalar"), c5.getLocal("scalarLen"), r22));
  }
  function buildSub() {
    const f3 = module.addFunction(prefix + "_sub");
    f3.addParam("x", "i32");
    f3.addParam("y", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const x22 = c5.i32_add(c5.getLocal("x"), c5.i32_const(2 * f1n8));
    const y0 = c5.getLocal("y");
    const y1 = c5.i32_add(c5.getLocal("y"), c5.i32_const(f1n8));
    const y22 = c5.i32_add(c5.getLocal("y"), c5.i32_const(2 * f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    const r22 = c5.i32_add(c5.getLocal("r"), c5.i32_const(2 * f1n8));
    f3.addCode(c5.call(f1mPrefix + "_sub", x0, y0, r0), c5.call(f1mPrefix + "_sub", x1, y1, r1), c5.call(f1mPrefix + "_sub", x22, y22, r22));
  }
  function buildNeg() {
    const f3 = module.addFunction(prefix + "_neg");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const x22 = c5.i32_add(c5.getLocal("x"), c5.i32_const(2 * f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    const r22 = c5.i32_add(c5.getLocal("r"), c5.i32_const(2 * f1n8));
    f3.addCode(c5.call(f1mPrefix + "_neg", x0, r0), c5.call(f1mPrefix + "_neg", x1, r1), c5.call(f1mPrefix + "_neg", x22, r22));
  }
  function buildIsNegative() {
    const f3 = module.addFunction(prefix + "_isNegative");
    f3.addParam("x", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const x22 = c5.i32_add(c5.getLocal("x"), c5.i32_const(2 * f1n8));
    f3.addCode(c5.if(c5.call(f1mPrefix + "_isZero", x22), c5.if(c5.call(f1mPrefix + "_isZero", x1), c5.ret(c5.call(f1mPrefix + "_isNegative", x0)), c5.ret(c5.call(f1mPrefix + "_isNegative", x1)))), c5.ret(c5.call(f1mPrefix + "_isNegative", x22)));
  }
  function buildMul() {
    const f3 = module.addFunction(prefix + "_mul");
    f3.addParam("x", "i32");
    f3.addParam("y", "i32");
    f3.addParam("r", "i32");
    const cd = f3.getCodeBuilder();
    const a3 = cd.getLocal("x");
    const b3 = cd.i32_add(cd.getLocal("x"), cd.i32_const(f1n8));
    const c5 = cd.i32_add(cd.getLocal("x"), cd.i32_const(2 * f1n8));
    const A = cd.getLocal("y");
    const B = cd.i32_add(cd.getLocal("y"), cd.i32_const(f1n8));
    const C3 = cd.i32_add(cd.getLocal("y"), cd.i32_const(2 * f1n8));
    const r0 = cd.getLocal("r");
    const r1 = cd.i32_add(cd.getLocal("r"), cd.i32_const(f1n8));
    const r22 = cd.i32_add(cd.getLocal("r"), cd.i32_const(2 * f1n8));
    const aA = cd.i32_const(module.alloc(f1n8));
    const bB = cd.i32_const(module.alloc(f1n8));
    const cC = cd.i32_const(module.alloc(f1n8));
    const a_b = cd.i32_const(module.alloc(f1n8));
    const A_B = cd.i32_const(module.alloc(f1n8));
    const a_c = cd.i32_const(module.alloc(f1n8));
    const A_C = cd.i32_const(module.alloc(f1n8));
    const b_c = cd.i32_const(module.alloc(f1n8));
    const B_C = cd.i32_const(module.alloc(f1n8));
    const aA_bB = cd.i32_const(module.alloc(f1n8));
    const aA_cC = cd.i32_const(module.alloc(f1n8));
    const bB_cC = cd.i32_const(module.alloc(f1n8));
    const AUX = cd.i32_const(module.alloc(f1n8));
    f3.addCode(cd.call(f1mPrefix + "_mul", a3, A, aA), cd.call(f1mPrefix + "_mul", b3, B, bB), cd.call(f1mPrefix + "_mul", c5, C3, cC), cd.call(f1mPrefix + "_add", a3, b3, a_b), cd.call(f1mPrefix + "_add", A, B, A_B), cd.call(f1mPrefix + "_add", a3, c5, a_c), cd.call(f1mPrefix + "_add", A, C3, A_C), cd.call(f1mPrefix + "_add", b3, c5, b_c), cd.call(f1mPrefix + "_add", B, C3, B_C), cd.call(f1mPrefix + "_add", aA, bB, aA_bB), cd.call(f1mPrefix + "_add", aA, cC, aA_cC), cd.call(f1mPrefix + "_add", bB, cC, bB_cC), cd.call(f1mPrefix + "_mul", b_c, B_C, r0), cd.call(f1mPrefix + "_sub", r0, bB_cC, r0), cd.call(mulNonResidueFn, r0, r0), cd.call(f1mPrefix + "_add", aA, r0, r0), cd.call(f1mPrefix + "_mul", a_b, A_B, r1), cd.call(f1mPrefix + "_sub", r1, aA_bB, r1), cd.call(mulNonResidueFn, cC, AUX), cd.call(f1mPrefix + "_add", r1, AUX, r1), cd.call(f1mPrefix + "_mul", a_c, A_C, r22), cd.call(f1mPrefix + "_sub", r22, aA_cC, r22), cd.call(f1mPrefix + "_add", r22, bB, r22));
  }
  function buildSquare() {
    const f3 = module.addFunction(prefix + "_square");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const A = c5.getLocal("x");
    const B = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const C3 = c5.i32_add(c5.getLocal("x"), c5.i32_const(2 * f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    const r22 = c5.i32_add(c5.getLocal("r"), c5.i32_const(2 * f1n8));
    const s0 = c5.i32_const(module.alloc(f1n8));
    const ab = c5.i32_const(module.alloc(f1n8));
    const s1 = c5.i32_const(module.alloc(f1n8));
    const s2 = c5.i32_const(module.alloc(f1n8));
    const bc = c5.i32_const(module.alloc(f1n8));
    const s3 = c5.i32_const(module.alloc(f1n8));
    const s4 = c5.i32_const(module.alloc(f1n8));
    f3.addCode(c5.call(f1mPrefix + "_square", A, s0), c5.call(f1mPrefix + "_mul", A, B, ab), c5.call(f1mPrefix + "_add", ab, ab, s1), c5.call(f1mPrefix + "_sub", A, B, s2), c5.call(f1mPrefix + "_add", s2, C3, s2), c5.call(f1mPrefix + "_square", s2, s2), c5.call(f1mPrefix + "_mul", B, C3, bc), c5.call(f1mPrefix + "_add", bc, bc, s3), c5.call(f1mPrefix + "_square", C3, s4), c5.call(mulNonResidueFn, s3, r0), c5.call(f1mPrefix + "_add", s0, r0, r0), c5.call(mulNonResidueFn, s4, r1), c5.call(f1mPrefix + "_add", s1, r1, r1), c5.call(f1mPrefix + "_add", s0, s4, r22), c5.call(f1mPrefix + "_sub", s3, r22, r22), c5.call(f1mPrefix + "_add", s2, r22, r22), c5.call(f1mPrefix + "_add", s1, r22, r22));
  }
  function buildToMontgomery() {
    const f3 = module.addFunction(prefix + "_toMontgomery");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const x22 = c5.i32_add(c5.getLocal("x"), c5.i32_const(2 * f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    const r22 = c5.i32_add(c5.getLocal("r"), c5.i32_const(2 * f1n8));
    f3.addCode(c5.call(f1mPrefix + "_toMontgomery", x0, r0), c5.call(f1mPrefix + "_toMontgomery", x1, r1), c5.call(f1mPrefix + "_toMontgomery", x22, r22));
  }
  function buildFromMontgomery() {
    const f3 = module.addFunction(prefix + "_fromMontgomery");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const x22 = c5.i32_add(c5.getLocal("x"), c5.i32_const(2 * f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    const r22 = c5.i32_add(c5.getLocal("r"), c5.i32_const(2 * f1n8));
    f3.addCode(c5.call(f1mPrefix + "_fromMontgomery", x0, r0), c5.call(f1mPrefix + "_fromMontgomery", x1, r1), c5.call(f1mPrefix + "_fromMontgomery", x22, r22));
  }
  function buildCopy() {
    const f3 = module.addFunction(prefix + "_copy");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const x22 = c5.i32_add(c5.getLocal("x"), c5.i32_const(2 * f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    const r22 = c5.i32_add(c5.getLocal("r"), c5.i32_const(2 * f1n8));
    f3.addCode(c5.call(f1mPrefix + "_copy", x0, r0), c5.call(f1mPrefix + "_copy", x1, r1), c5.call(f1mPrefix + "_copy", x22, r22));
  }
  function buildZero() {
    const f3 = module.addFunction(prefix + "_zero");
    f3.addParam("x", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const x22 = c5.i32_add(c5.getLocal("x"), c5.i32_const(2 * f1n8));
    f3.addCode(c5.call(f1mPrefix + "_zero", x0), c5.call(f1mPrefix + "_zero", x1), c5.call(f1mPrefix + "_zero", x22));
  }
  function buildOne() {
    const f3 = module.addFunction(prefix + "_one");
    f3.addParam("x", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const x22 = c5.i32_add(c5.getLocal("x"), c5.i32_const(2 * f1n8));
    f3.addCode(c5.call(f1mPrefix + "_one", x0), c5.call(f1mPrefix + "_zero", x1), c5.call(f1mPrefix + "_zero", x22));
  }
  function buildEq() {
    const f3 = module.addFunction(prefix + "_eq");
    f3.addParam("x", "i32");
    f3.addParam("y", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const x22 = c5.i32_add(c5.getLocal("x"), c5.i32_const(2 * f1n8));
    const y0 = c5.getLocal("y");
    const y1 = c5.i32_add(c5.getLocal("y"), c5.i32_const(f1n8));
    const y22 = c5.i32_add(c5.getLocal("y"), c5.i32_const(2 * f1n8));
    f3.addCode(c5.i32_and(c5.i32_and(c5.call(f1mPrefix + "_eq", x0, y0), c5.call(f1mPrefix + "_eq", x1, y1)), c5.call(f1mPrefix + "_eq", x22, y22)));
  }
  function buildIsZero() {
    const f3 = module.addFunction(prefix + "_isZero");
    f3.addParam("x", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const x22 = c5.i32_add(c5.getLocal("x"), c5.i32_const(2 * f1n8));
    f3.addCode(c5.i32_and(c5.i32_and(c5.call(f1mPrefix + "_isZero", x0), c5.call(f1mPrefix + "_isZero", x1)), c5.call(f1mPrefix + "_isZero", x22)));
  }
  function buildInverse() {
    const f3 = module.addFunction(prefix + "_inverse");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const x22 = c5.i32_add(c5.getLocal("x"), c5.i32_const(2 * f1n8));
    const r0 = c5.getLocal("r");
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f1n8));
    const r22 = c5.i32_add(c5.getLocal("r"), c5.i32_const(2 * f1n8));
    const t0 = c5.i32_const(module.alloc(f1n8));
    const t1 = c5.i32_const(module.alloc(f1n8));
    const t22 = c5.i32_const(module.alloc(f1n8));
    const t3 = c5.i32_const(module.alloc(f1n8));
    const t4 = c5.i32_const(module.alloc(f1n8));
    const t5 = c5.i32_const(module.alloc(f1n8));
    const c0 = c5.i32_const(module.alloc(f1n8));
    const c1 = c5.i32_const(module.alloc(f1n8));
    const c22 = c5.i32_const(module.alloc(f1n8));
    const t6 = c5.i32_const(module.alloc(f1n8));
    const AUX = c5.i32_const(module.alloc(f1n8));
    f3.addCode(c5.call(f1mPrefix + "_square", x0, t0), c5.call(f1mPrefix + "_square", x1, t1), c5.call(f1mPrefix + "_square", x22, t22), c5.call(f1mPrefix + "_mul", x0, x1, t3), c5.call(f1mPrefix + "_mul", x0, x22, t4), c5.call(f1mPrefix + "_mul", x1, x22, t5), c5.call(mulNonResidueFn, t5, c0), c5.call(f1mPrefix + "_sub", t0, c0, c0), c5.call(mulNonResidueFn, t22, c1), c5.call(f1mPrefix + "_sub", c1, t3, c1), c5.call(f1mPrefix + "_sub", t1, t4, c22), c5.call(f1mPrefix + "_mul", x22, c1, t6), c5.call(f1mPrefix + "_mul", x1, c22, AUX), c5.call(f1mPrefix + "_add", t6, AUX, t6), c5.call(mulNonResidueFn, t6, t6), c5.call(f1mPrefix + "_mul", x0, c0, AUX), c5.call(f1mPrefix + "_add", AUX, t6, t6), c5.call(f1mPrefix + "_inverse", t6, t6), c5.call(f1mPrefix + "_mul", t6, c0, r0), c5.call(f1mPrefix + "_mul", t6, c1, r1), c5.call(f1mPrefix + "_mul", t6, c22, r22));
  }
  function buildSign() {
    const f3 = module.addFunction(prefix + "_sign");
    f3.addParam("x", "i32");
    f3.addLocal("s", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const x22 = c5.i32_add(c5.getLocal("x"), c5.i32_const(2 * f1n8));
    f3.addCode(c5.setLocal("s", c5.call(f1mPrefix + "_sign", x22)), c5.if(c5.getLocal("s"), c5.ret(c5.getLocal("s"))), c5.setLocal("s", c5.call(f1mPrefix + "_sign", x1)), c5.if(c5.getLocal("s"), c5.ret(c5.getLocal("s"))), c5.ret(c5.call(f1mPrefix + "_sign", x0)));
  }
  function buildIsOne() {
    const f3 = module.addFunction(prefix + "_isOne");
    f3.addParam("x", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8));
    const x22 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1n8 * 2));
    f3.addCode(c5.ret(c5.i32_and(c5.i32_and(c5.call(f1mPrefix + "_isOne", x0), c5.call(f1mPrefix + "_isZero", x1)), c5.call(f1mPrefix + "_isZero", x22))));
  }
  buildIsZero();
  buildIsOne();
  buildZero();
  buildOne();
  buildCopy();
  buildMul();
  buildSquare();
  buildAdd();
  buildSub();
  buildNeg();
  buildSign();
  buildToMontgomery();
  buildFromMontgomery();
  buildEq();
  buildInverse();
  buildTimesScalar2();
  buildIsNegative();
  module.exportFunction(prefix + "_isZero");
  module.exportFunction(prefix + "_isOne");
  module.exportFunction(prefix + "_zero");
  module.exportFunction(prefix + "_one");
  module.exportFunction(prefix + "_copy");
  module.exportFunction(prefix + "_mul");
  module.exportFunction(prefix + "_square");
  module.exportFunction(prefix + "_add");
  module.exportFunction(prefix + "_sub");
  module.exportFunction(prefix + "_neg");
  module.exportFunction(prefix + "_sign");
  module.exportFunction(prefix + "_fromMontgomery");
  module.exportFunction(prefix + "_toMontgomery");
  module.exportFunction(prefix + "_eq");
  module.exportFunction(prefix + "_inverse");
  build_batchinverse(module, prefix);
  build_timesscalar(module, prefix + "_exp", f1n8 * 3, prefix + "_mul", prefix + "_square", prefix + "_copy", prefix + "_one");
  module.exportFunction(prefix + "_exp");
  module.exportFunction(prefix + "_timesScalar");
  module.exportFunction(prefix + "_batchInverse");
  module.exportFunction(prefix + "_isNegative");
  return prefix;
};
var build_timesscalarnaf = function buildTimesScalarNAF(module, fnName, elementLen, opAB, opAA, opAmB, opCopy, opInit) {
  const f3 = module.addFunction(fnName);
  f3.addParam("base", "i32");
  f3.addParam("scalar", "i32");
  f3.addParam("scalarLength", "i32");
  f3.addParam("r", "i32");
  f3.addLocal("old0", "i32");
  f3.addLocal("nbits", "i32");
  f3.addLocal("i", "i32");
  f3.addLocal("last", "i32");
  f3.addLocal("cur", "i32");
  f3.addLocal("carry", "i32");
  f3.addLocal("p", "i32");
  const c5 = f3.getCodeBuilder();
  const aux = c5.i32_const(module.alloc(elementLen));
  function getBit(IDX) {
    return c5.i32_and(c5.i32_shr_u(c5.i32_load(c5.i32_add(c5.getLocal("scalar"), c5.i32_and(c5.i32_shr_u(IDX, c5.i32_const(3)), c5.i32_const(4294967292)))), c5.i32_and(IDX, c5.i32_const(31))), c5.i32_const(1));
  }
  function pushBit(b3) {
    return [
      ...c5.i32_store8(c5.getLocal("p"), c5.i32_const(b3)),
      ...c5.setLocal("p", c5.i32_add(c5.getLocal("p"), c5.i32_const(1)))
    ];
  }
  f3.addCode(c5.if(c5.i32_eqz(c5.getLocal("scalarLength")), [
    ...c5.call(opInit, c5.getLocal("r")),
    ...c5.ret([])
  ]), c5.setLocal("nbits", c5.i32_shl(c5.getLocal("scalarLength"), c5.i32_const(3))), c5.setLocal("old0", c5.i32_load(c5.i32_const(0))), c5.setLocal("p", c5.getLocal("old0")), c5.i32_store(c5.i32_const(0), c5.i32_and(c5.i32_add(c5.i32_add(c5.getLocal("old0"), c5.i32_const(32)), c5.getLocal("nbits")), c5.i32_const(4294967288))), c5.setLocal("i", c5.i32_const(1)), c5.setLocal("last", getBit(c5.i32_const(0))), c5.setLocal("carry", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("i"), c5.getLocal("nbits"))), c5.setLocal("cur", getBit(c5.getLocal("i"))), c5.if(c5.getLocal("last"), c5.if(c5.getLocal("cur"), c5.if(c5.getLocal("carry"), [
    ...c5.setLocal("last", c5.i32_const(0)),
    ...c5.setLocal("carry", c5.i32_const(1)),
    ...pushBit(1)
  ], [
    ...c5.setLocal("last", c5.i32_const(0)),
    ...c5.setLocal("carry", c5.i32_const(1)),
    ...pushBit(255)
  ]), c5.if(c5.getLocal("carry"), [
    ...c5.setLocal("last", c5.i32_const(0)),
    ...c5.setLocal("carry", c5.i32_const(1)),
    ...pushBit(255)
  ], [
    ...c5.setLocal("last", c5.i32_const(0)),
    ...c5.setLocal("carry", c5.i32_const(0)),
    ...pushBit(1)
  ])), c5.if(c5.getLocal("cur"), c5.if(c5.getLocal("carry"), [
    ...c5.setLocal("last", c5.i32_const(0)),
    ...c5.setLocal("carry", c5.i32_const(1)),
    ...pushBit(0)
  ], [
    ...c5.setLocal("last", c5.i32_const(1)),
    ...c5.setLocal("carry", c5.i32_const(0)),
    ...pushBit(0)
  ]), c5.if(c5.getLocal("carry"), [
    ...c5.setLocal("last", c5.i32_const(1)),
    ...c5.setLocal("carry", c5.i32_const(0)),
    ...pushBit(0)
  ], [
    ...c5.setLocal("last", c5.i32_const(0)),
    ...c5.setLocal("carry", c5.i32_const(0)),
    ...pushBit(0)
  ]))), c5.setLocal("i", c5.i32_add(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))), c5.if(c5.getLocal("last"), c5.if(c5.getLocal("carry"), [
    ...pushBit(255),
    ...pushBit(0),
    ...pushBit(1)
  ], [
    ...pushBit(1)
  ]), c5.if(c5.getLocal("carry"), [
    ...pushBit(0),
    ...pushBit(1)
  ])), c5.setLocal("p", c5.i32_sub(c5.getLocal("p"), c5.i32_const(1))), c5.call(opCopy, c5.getLocal("base"), aux), c5.call(opInit, c5.getLocal("r")), c5.block(c5.loop(c5.call(opAA, c5.getLocal("r"), c5.getLocal("r")), c5.setLocal("cur", c5.i32_load8_u(c5.getLocal("p"))), c5.if(c5.getLocal("cur"), c5.if(c5.i32_eq(c5.getLocal("cur"), c5.i32_const(1)), c5.call(opAB, c5.getLocal("r"), aux, c5.getLocal("r")), c5.call(opAmB, c5.getLocal("r"), aux, c5.getLocal("r")))), c5.br_if(1, c5.i32_eq(c5.getLocal("old0"), c5.getLocal("p"))), c5.setLocal("p", c5.i32_sub(c5.getLocal("p"), c5.i32_const(1))), c5.br(0))), c5.i32_store(c5.i32_const(0), c5.getLocal("old0")));
};
var build_multiexp = function buildMultiexp(module, prefix, fnName, opAdd, n8b) {
  const n64g = module.modules[prefix].n64;
  const n8g = n64g * 8;
  function buildGetChunk() {
    const f3 = module.addFunction(fnName + "_getChunk");
    f3.addParam("pScalar", "i32");
    f3.addParam("scalarSize", "i32");
    f3.addParam("startBit", "i32");
    f3.addParam("chunkSize", "i32");
    f3.addLocal("bitsToEnd", "i32");
    f3.addLocal("mask", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.setLocal("bitsToEnd", c5.i32_sub(c5.i32_mul(c5.getLocal("scalarSize"), c5.i32_const(8)), c5.getLocal("startBit"))), c5.if(c5.i32_gt_s(c5.getLocal("chunkSize"), c5.getLocal("bitsToEnd")), c5.setLocal("mask", c5.i32_sub(c5.i32_shl(c5.i32_const(1), c5.getLocal("bitsToEnd")), c5.i32_const(1))), c5.setLocal("mask", c5.i32_sub(c5.i32_shl(c5.i32_const(1), c5.getLocal("chunkSize")), c5.i32_const(1)))), c5.i32_and(c5.i32_shr_u(c5.i32_load(c5.i32_add(c5.getLocal("pScalar"), c5.i32_shr_u(c5.getLocal("startBit"), c5.i32_const(3))), 0, 0), c5.i32_and(c5.getLocal("startBit"), c5.i32_const(7))), c5.getLocal("mask")));
  }
  function buildMutiexpChunk() {
    const f3 = module.addFunction(fnName + "_chunk");
    f3.addParam("pBases", "i32");
    f3.addParam("pScalars", "i32");
    f3.addParam("scalarSize", "i32");
    f3.addParam("n", "i32");
    f3.addParam("startBit", "i32");
    f3.addParam("chunkSize", "i32");
    f3.addParam("pr", "i32");
    f3.addLocal("nChunks", "i32");
    f3.addLocal("itScalar", "i32");
    f3.addLocal("endScalar", "i32");
    f3.addLocal("itBase", "i32");
    f3.addLocal("i", "i32");
    f3.addLocal("j", "i32");
    f3.addLocal("nTable", "i32");
    f3.addLocal("pTable", "i32");
    f3.addLocal("idx", "i32");
    f3.addLocal("pIdxTable", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.if(c5.i32_eqz(c5.getLocal("n")), [
      ...c5.call(prefix + "_zero", c5.getLocal("pr")),
      ...c5.ret([])
    ]), c5.setLocal("nTable", c5.i32_shl(c5.i32_const(1), c5.getLocal("chunkSize"))), c5.setLocal("pTable", c5.i32_load(c5.i32_const(0))), c5.i32_store(c5.i32_const(0), c5.i32_add(c5.getLocal("pTable"), c5.i32_mul(c5.getLocal("nTable"), c5.i32_const(n8g)))), c5.setLocal("j", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("j"), c5.getLocal("nTable"))), c5.call(prefix + "_zero", c5.i32_add(c5.getLocal("pTable"), c5.i32_mul(c5.getLocal("j"), c5.i32_const(n8g)))), c5.setLocal("j", c5.i32_add(c5.getLocal("j"), c5.i32_const(1))), c5.br(0))), c5.setLocal("itBase", c5.getLocal("pBases")), c5.setLocal("itScalar", c5.getLocal("pScalars")), c5.setLocal("endScalar", c5.i32_add(c5.getLocal("pScalars"), c5.i32_mul(c5.getLocal("n"), c5.getLocal("scalarSize")))), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("itScalar"), c5.getLocal("endScalar"))), c5.setLocal("idx", c5.call(fnName + "_getChunk", c5.getLocal("itScalar"), c5.getLocal("scalarSize"), c5.getLocal("startBit"), c5.getLocal("chunkSize"))), c5.if(c5.getLocal("idx"), [
      ...c5.setLocal("pIdxTable", c5.i32_add(c5.getLocal("pTable"), c5.i32_mul(c5.i32_sub(c5.getLocal("idx"), c5.i32_const(1)), c5.i32_const(n8g)))),
      ...c5.call(opAdd, c5.getLocal("pIdxTable"), c5.getLocal("itBase"), c5.getLocal("pIdxTable"))
    ]), c5.setLocal("itScalar", c5.i32_add(c5.getLocal("itScalar"), c5.getLocal("scalarSize"))), c5.setLocal("itBase", c5.i32_add(c5.getLocal("itBase"), c5.i32_const(n8b))), c5.br(0))), c5.call(fnName + "_reduceTable", c5.getLocal("pTable"), c5.getLocal("chunkSize")), c5.call(prefix + "_copy", c5.getLocal("pTable"), c5.getLocal("pr")), c5.i32_store(c5.i32_const(0), c5.getLocal("pTable")));
  }
  function buildMultiexp3() {
    const f3 = module.addFunction(fnName);
    f3.addParam("pBases", "i32");
    f3.addParam("pScalars", "i32");
    f3.addParam("scalarSize", "i32");
    f3.addParam("n", "i32");
    f3.addParam("pr", "i32");
    f3.addLocal("chunkSize", "i32");
    f3.addLocal("nChunks", "i32");
    f3.addLocal("itScalar", "i32");
    f3.addLocal("endScalar", "i32");
    f3.addLocal("itBase", "i32");
    f3.addLocal("itBit", "i32");
    f3.addLocal("i", "i32");
    f3.addLocal("j", "i32");
    f3.addLocal("nTable", "i32");
    f3.addLocal("pTable", "i32");
    f3.addLocal("idx", "i32");
    f3.addLocal("pIdxTable", "i32");
    const c5 = f3.getCodeBuilder();
    const aux = c5.i32_const(module.alloc(n8g));
    const pTSizes2 = module.alloc([
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      16,
      16,
      15,
      14,
      13,
      13,
      12,
      11,
      10,
      9,
      8,
      7,
      7,
      6,
      5,
      4,
      3,
      2,
      1,
      1,
      1,
      1
    ]);
    f3.addCode(c5.call(prefix + "_zero", c5.getLocal("pr")), c5.if(c5.i32_eqz(c5.getLocal("n")), c5.ret([])), c5.setLocal("chunkSize", c5.i32_load8_u(c5.i32_clz(c5.getLocal("n")), pTSizes2)), c5.setLocal("nChunks", c5.i32_add(c5.i32_div_u(c5.i32_sub(c5.i32_shl(c5.getLocal("scalarSize"), c5.i32_const(3)), c5.i32_const(1)), c5.getLocal("chunkSize")), c5.i32_const(1))), c5.setLocal("itBit", c5.i32_mul(c5.i32_sub(c5.getLocal("nChunks"), c5.i32_const(1)), c5.getLocal("chunkSize"))), c5.block(c5.loop(c5.br_if(1, c5.i32_lt_s(c5.getLocal("itBit"), c5.i32_const(0))), c5.if(c5.i32_eqz(c5.call(prefix + "_isZero", c5.getLocal("pr"))), [
      ...c5.setLocal("j", c5.i32_const(0)),
      ...c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("j"), c5.getLocal("chunkSize"))), c5.call(prefix + "_double", c5.getLocal("pr"), c5.getLocal("pr")), c5.setLocal("j", c5.i32_add(c5.getLocal("j"), c5.i32_const(1))), c5.br(0)))
    ]), c5.call(fnName + "_chunk", c5.getLocal("pBases"), c5.getLocal("pScalars"), c5.getLocal("scalarSize"), c5.getLocal("n"), c5.getLocal("itBit"), c5.getLocal("chunkSize"), aux), c5.call(prefix + "_add", c5.getLocal("pr"), aux, c5.getLocal("pr")), c5.setLocal("itBit", c5.i32_sub(c5.getLocal("itBit"), c5.getLocal("chunkSize"))), c5.br(0))));
  }
  function buildReduceTable() {
    const f3 = module.addFunction(fnName + "_reduceTable");
    f3.addParam("pTable", "i32");
    f3.addParam("p", "i32");
    f3.addLocal("half", "i32");
    f3.addLocal("it1", "i32");
    f3.addLocal("it2", "i32");
    f3.addLocal("pAcc", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.if(c5.i32_eq(c5.getLocal("p"), c5.i32_const(1)), c5.ret([])), c5.setLocal("half", c5.i32_shl(c5.i32_const(1), c5.i32_sub(c5.getLocal("p"), c5.i32_const(1)))), c5.setLocal("it1", c5.getLocal("pTable")), c5.setLocal("it2", c5.i32_add(c5.getLocal("pTable"), c5.i32_mul(c5.getLocal("half"), c5.i32_const(n8g)))), c5.setLocal("pAcc", c5.i32_sub(c5.getLocal("it2"), c5.i32_const(n8g))), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("it1"), c5.getLocal("pAcc"))), c5.call(prefix + "_add", c5.getLocal("it1"), c5.getLocal("it2"), c5.getLocal("it1")), c5.call(prefix + "_add", c5.getLocal("pAcc"), c5.getLocal("it2"), c5.getLocal("pAcc")), c5.setLocal("it1", c5.i32_add(c5.getLocal("it1"), c5.i32_const(n8g))), c5.setLocal("it2", c5.i32_add(c5.getLocal("it2"), c5.i32_const(n8g))), c5.br(0))), c5.call(fnName + "_reduceTable", c5.getLocal("pTable"), c5.i32_sub(c5.getLocal("p"), c5.i32_const(1))), c5.setLocal("p", c5.i32_sub(c5.getLocal("p"), c5.i32_const(1))), c5.block(c5.loop(c5.br_if(1, c5.i32_eqz(c5.getLocal("p"))), c5.call(prefix + "_double", c5.getLocal("pAcc"), c5.getLocal("pAcc")), c5.setLocal("p", c5.i32_sub(c5.getLocal("p"), c5.i32_const(1))), c5.br(0))), c5.call(prefix + "_add", c5.getLocal("pTable"), c5.getLocal("pAcc"), c5.getLocal("pTable")));
  }
  buildGetChunk();
  buildReduceTable();
  buildMutiexpChunk();
  buildMultiexp3();
  module.exportFunction(fnName);
  module.exportFunction(fnName + "_chunk");
};
var build_curve_jacobian_a0 = function buildCurve(module, prefix, prefixField, pB) {
  const n64 = module.modules[prefixField].n64;
  const n8 = n64 * 8;
  if (module.modules[prefix])
    return prefix;
  module.modules[prefix] = {
    n64: n64 * 3
  };
  function buildIsZero() {
    const f3 = module.addFunction(prefix + "_isZero");
    f3.addParam("p1", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(prefixField + "_isZero", c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8 * 2))));
  }
  function buildIsZeroAffine() {
    const f3 = module.addFunction(prefix + "_isZeroAffine");
    f3.addParam("p1", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.i32_and(c5.call(prefixField + "_isZero", c5.getLocal("p1")), c5.call(prefixField + "_isZero", c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8)))));
  }
  function buildCopy() {
    const f3 = module.addFunction(prefix + "_copy");
    f3.addParam("ps", "i32");
    f3.addParam("pd", "i32");
    const c5 = f3.getCodeBuilder();
    for (let i3 = 0; i3 < n64 * 3; i3++) {
      f3.addCode(c5.i64_store(c5.getLocal("pd"), i3 * 8, c5.i64_load(c5.getLocal("ps"), i3 * 8)));
    }
  }
  function buildCopyAffine() {
    const f3 = module.addFunction(prefix + "_copyAffine");
    f3.addParam("ps", "i32");
    f3.addParam("pd", "i32");
    const c5 = f3.getCodeBuilder();
    for (let i3 = 0; i3 < n64 * 2; i3++) {
      f3.addCode(c5.i64_store(c5.getLocal("pd"), i3 * 8, c5.i64_load(c5.getLocal("ps"), i3 * 8)));
    }
  }
  function buildZero() {
    const f3 = module.addFunction(prefix + "_zero");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(prefixField + "_zero", c5.getLocal("pr")));
    f3.addCode(c5.call(prefixField + "_one", c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8))));
    f3.addCode(c5.call(prefixField + "_zero", c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8 * 2))));
  }
  function buildZeroAffine() {
    const f3 = module.addFunction(prefix + "_zeroAffine");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(prefixField + "_zero", c5.getLocal("pr")));
    f3.addCode(c5.call(prefixField + "_zero", c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8))));
  }
  function buildEq() {
    const f3 = module.addFunction(prefix + "_eq");
    f3.addParam("p1", "i32");
    f3.addParam("p2", "i32");
    f3.setReturnType("i32");
    f3.addLocal("z1", "i32");
    f3.addLocal("z2", "i32");
    const c5 = f3.getCodeBuilder();
    const x1 = c5.getLocal("p1");
    const y1 = c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8));
    f3.addCode(c5.setLocal("z1", c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8 * 2))));
    const z1 = c5.getLocal("z1");
    const x22 = c5.getLocal("p2");
    const y22 = c5.i32_add(c5.getLocal("p2"), c5.i32_const(n8));
    f3.addCode(c5.setLocal("z2", c5.i32_add(c5.getLocal("p2"), c5.i32_const(n8 * 2))));
    const z2 = c5.getLocal("z2");
    const Z1Z1 = c5.i32_const(module.alloc(n8));
    const Z2Z2 = c5.i32_const(module.alloc(n8));
    const U1 = c5.i32_const(module.alloc(n8));
    const U2 = c5.i32_const(module.alloc(n8));
    const Z1_cubed = c5.i32_const(module.alloc(n8));
    const Z2_cubed = c5.i32_const(module.alloc(n8));
    const S1 = c5.i32_const(module.alloc(n8));
    const S2 = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.if(c5.call(prefix + "_isZero", c5.getLocal("p1")), c5.ret(c5.call(prefix + "_isZero", c5.getLocal("p2")))), c5.if(c5.call(prefix + "_isZero", c5.getLocal("p2")), c5.ret(c5.i32_const(0))), c5.if(c5.call(prefixField + "_isOne", z1), c5.ret(c5.call(prefix + "_eqMixed", c5.getLocal("p2"), c5.getLocal("p1")))), c5.if(c5.call(prefixField + "_isOne", z2), c5.ret(c5.call(prefix + "_eqMixed", c5.getLocal("p1"), c5.getLocal("p2")))), c5.call(prefixField + "_square", z1, Z1Z1), c5.call(prefixField + "_square", z2, Z2Z2), c5.call(prefixField + "_mul", x1, Z2Z2, U1), c5.call(prefixField + "_mul", x22, Z1Z1, U2), c5.call(prefixField + "_mul", z1, Z1Z1, Z1_cubed), c5.call(prefixField + "_mul", z2, Z2Z2, Z2_cubed), c5.call(prefixField + "_mul", y1, Z2_cubed, S1), c5.call(prefixField + "_mul", y22, Z1_cubed, S2), c5.if(c5.call(prefixField + "_eq", U1, U2), c5.if(c5.call(prefixField + "_eq", S1, S2), c5.ret(c5.i32_const(1)))), c5.ret(c5.i32_const(0)));
  }
  function buildEqMixed() {
    const f3 = module.addFunction(prefix + "_eqMixed");
    f3.addParam("p1", "i32");
    f3.addParam("p2", "i32");
    f3.setReturnType("i32");
    f3.addLocal("z1", "i32");
    const c5 = f3.getCodeBuilder();
    const x1 = c5.getLocal("p1");
    const y1 = c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8));
    f3.addCode(c5.setLocal("z1", c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8 * 2))));
    const z1 = c5.getLocal("z1");
    const x22 = c5.getLocal("p2");
    const y22 = c5.i32_add(c5.getLocal("p2"), c5.i32_const(n8));
    const Z1Z1 = c5.i32_const(module.alloc(n8));
    const U2 = c5.i32_const(module.alloc(n8));
    const Z1_cubed = c5.i32_const(module.alloc(n8));
    const S2 = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.if(c5.call(prefix + "_isZero", c5.getLocal("p1")), c5.ret(c5.call(prefix + "_isZeroAffine", c5.getLocal("p2")))), c5.if(c5.call(prefix + "_isZeroAffine", c5.getLocal("p2")), c5.ret(c5.i32_const(0))), c5.if(c5.call(prefixField + "_isOne", z1), c5.ret(c5.call(prefix + "_eqAffine", c5.getLocal("p1"), c5.getLocal("p2")))), c5.call(prefixField + "_square", z1, Z1Z1), c5.call(prefixField + "_mul", x22, Z1Z1, U2), c5.call(prefixField + "_mul", z1, Z1Z1, Z1_cubed), c5.call(prefixField + "_mul", y22, Z1_cubed, S2), c5.if(c5.call(prefixField + "_eq", x1, U2), c5.if(c5.call(prefixField + "_eq", y1, S2), c5.ret(c5.i32_const(1)))), c5.ret(c5.i32_const(0)));
  }
  function buildDouble() {
    const f3 = module.addFunction(prefix + "_double");
    f3.addParam("p1", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    const x3 = c5.getLocal("p1");
    const y3 = c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8));
    const z2 = c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8 * 2));
    const x32 = c5.getLocal("pr");
    const y32 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8));
    const z3 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8 * 2));
    const A = c5.i32_const(module.alloc(n8));
    const B = c5.i32_const(module.alloc(n8));
    const C3 = c5.i32_const(module.alloc(n8));
    const D2 = c5.i32_const(module.alloc(n8));
    const E = c5.i32_const(module.alloc(n8));
    const F5 = c5.i32_const(module.alloc(n8));
    const G = c5.i32_const(module.alloc(n8));
    const eightC = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.if(c5.call(prefix + "_isZero", c5.getLocal("p1")), [
      ...c5.call(prefix + "_copy", c5.getLocal("p1"), c5.getLocal("pr")),
      ...c5.ret([])
    ]), c5.if(c5.call(prefixField + "_isOne", z2), [
      ...c5.ret(c5.call(prefix + "_doubleAffine", c5.getLocal("p1"), c5.getLocal("pr"))),
      ...c5.ret([])
    ]), c5.call(prefixField + "_square", x3, A), c5.call(prefixField + "_square", y3, B), c5.call(prefixField + "_square", B, C3), c5.call(prefixField + "_add", x3, B, D2), c5.call(prefixField + "_square", D2, D2), c5.call(prefixField + "_sub", D2, A, D2), c5.call(prefixField + "_sub", D2, C3, D2), c5.call(prefixField + "_add", D2, D2, D2), c5.call(prefixField + "_add", A, A, E), c5.call(prefixField + "_add", E, A, E), c5.call(prefixField + "_square", E, F5), c5.call(prefixField + "_mul", y3, z2, G), c5.call(prefixField + "_add", D2, D2, x32), c5.call(prefixField + "_sub", F5, x32, x32), c5.call(prefixField + "_add", C3, C3, eightC), c5.call(prefixField + "_add", eightC, eightC, eightC), c5.call(prefixField + "_add", eightC, eightC, eightC), c5.call(prefixField + "_sub", D2, x32, y32), c5.call(prefixField + "_mul", y32, E, y32), c5.call(prefixField + "_sub", y32, eightC, y32), c5.call(prefixField + "_add", G, G, z3));
  }
  function buildDoubleAffine() {
    const f3 = module.addFunction(prefix + "_doubleAffine");
    f3.addParam("p1", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    const x3 = c5.getLocal("p1");
    const y3 = c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8));
    const x32 = c5.getLocal("pr");
    const y32 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8));
    const z3 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8 * 2));
    const XX = c5.i32_const(module.alloc(n8));
    const YY = c5.i32_const(module.alloc(n8));
    const YYYY = c5.i32_const(module.alloc(n8));
    const S2 = c5.i32_const(module.alloc(n8));
    const M3 = c5.i32_const(module.alloc(n8));
    const eightYYYY = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.if(c5.call(prefix + "_isZeroAffine", c5.getLocal("p1")), [
      ...c5.call(prefix + "_toJacobian", c5.getLocal("p1"), c5.getLocal("pr")),
      ...c5.ret([])
    ]), c5.call(prefixField + "_square", x3, XX), c5.call(prefixField + "_square", y3, YY), c5.call(prefixField + "_square", YY, YYYY), c5.call(prefixField + "_add", x3, YY, S2), c5.call(prefixField + "_square", S2, S2), c5.call(prefixField + "_sub", S2, XX, S2), c5.call(prefixField + "_sub", S2, YYYY, S2), c5.call(prefixField + "_add", S2, S2, S2), c5.call(prefixField + "_add", XX, XX, M3), c5.call(prefixField + "_add", M3, XX, M3), c5.call(prefixField + "_add", y3, y3, z3), c5.call(prefixField + "_square", M3, x32), c5.call(prefixField + "_sub", x32, S2, x32), c5.call(prefixField + "_sub", x32, S2, x32), c5.call(prefixField + "_add", YYYY, YYYY, eightYYYY), c5.call(prefixField + "_add", eightYYYY, eightYYYY, eightYYYY), c5.call(prefixField + "_add", eightYYYY, eightYYYY, eightYYYY), c5.call(prefixField + "_sub", S2, x32, y32), c5.call(prefixField + "_mul", y32, M3, y32), c5.call(prefixField + "_sub", y32, eightYYYY, y32));
  }
  function buildEqAffine() {
    const f3 = module.addFunction(prefix + "_eqAffine");
    f3.addParam("p1", "i32");
    f3.addParam("p2", "i32");
    f3.setReturnType("i32");
    f3.addLocal("z1", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.ret(c5.i32_and(c5.call(prefixField + "_eq", c5.getLocal("p1"), c5.getLocal("p2")), c5.call(prefixField + "_eq", c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8)), c5.i32_add(c5.getLocal("p2"), c5.i32_const(n8))))));
  }
  function buildToMontgomery() {
    const f3 = module.addFunction(prefix + "_toMontgomery");
    f3.addParam("p1", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(prefixField + "_toMontgomery", c5.getLocal("p1"), c5.getLocal("pr")));
    for (let i3 = 1; i3 < 3; i3++) {
      f3.addCode(c5.call(prefixField + "_toMontgomery", c5.i32_add(c5.getLocal("p1"), c5.i32_const(i3 * n8)), c5.i32_add(c5.getLocal("pr"), c5.i32_const(i3 * n8))));
    }
  }
  function buildToMontgomeryAffine() {
    const f3 = module.addFunction(prefix + "_toMontgomeryAffine");
    f3.addParam("p1", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(prefixField + "_toMontgomery", c5.getLocal("p1"), c5.getLocal("pr")));
    for (let i3 = 1; i3 < 2; i3++) {
      f3.addCode(c5.call(prefixField + "_toMontgomery", c5.i32_add(c5.getLocal("p1"), c5.i32_const(i3 * n8)), c5.i32_add(c5.getLocal("pr"), c5.i32_const(i3 * n8))));
    }
  }
  function buildFromMontgomery() {
    const f3 = module.addFunction(prefix + "_fromMontgomery");
    f3.addParam("p1", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(prefixField + "_fromMontgomery", c5.getLocal("p1"), c5.getLocal("pr")));
    for (let i3 = 1; i3 < 3; i3++) {
      f3.addCode(c5.call(prefixField + "_fromMontgomery", c5.i32_add(c5.getLocal("p1"), c5.i32_const(i3 * n8)), c5.i32_add(c5.getLocal("pr"), c5.i32_const(i3 * n8))));
    }
  }
  function buildFromMontgomeryAffine() {
    const f3 = module.addFunction(prefix + "_fromMontgomeryAffine");
    f3.addParam("p1", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(prefixField + "_fromMontgomery", c5.getLocal("p1"), c5.getLocal("pr")));
    for (let i3 = 1; i3 < 2; i3++) {
      f3.addCode(c5.call(prefixField + "_fromMontgomery", c5.i32_add(c5.getLocal("p1"), c5.i32_const(i3 * n8)), c5.i32_add(c5.getLocal("pr"), c5.i32_const(i3 * n8))));
    }
  }
  function buildAdd() {
    const f3 = module.addFunction(prefix + "_add");
    f3.addParam("p1", "i32");
    f3.addParam("p2", "i32");
    f3.addParam("pr", "i32");
    f3.addLocal("z1", "i32");
    f3.addLocal("z2", "i32");
    const c5 = f3.getCodeBuilder();
    const x1 = c5.getLocal("p1");
    const y1 = c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8));
    f3.addCode(c5.setLocal("z1", c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8 * 2))));
    const z1 = c5.getLocal("z1");
    const x22 = c5.getLocal("p2");
    const y22 = c5.i32_add(c5.getLocal("p2"), c5.i32_const(n8));
    f3.addCode(c5.setLocal("z2", c5.i32_add(c5.getLocal("p2"), c5.i32_const(n8 * 2))));
    const z2 = c5.getLocal("z2");
    const x3 = c5.getLocal("pr");
    const y3 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8));
    const z3 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8 * 2));
    const Z1Z1 = c5.i32_const(module.alloc(n8));
    const Z2Z2 = c5.i32_const(module.alloc(n8));
    const U1 = c5.i32_const(module.alloc(n8));
    const U2 = c5.i32_const(module.alloc(n8));
    const Z1_cubed = c5.i32_const(module.alloc(n8));
    const Z2_cubed = c5.i32_const(module.alloc(n8));
    const S1 = c5.i32_const(module.alloc(n8));
    const S2 = c5.i32_const(module.alloc(n8));
    const H2 = c5.i32_const(module.alloc(n8));
    const S2_minus_S1 = c5.i32_const(module.alloc(n8));
    const I2 = c5.i32_const(module.alloc(n8));
    const J = c5.i32_const(module.alloc(n8));
    const r3 = c5.i32_const(module.alloc(n8));
    const r22 = c5.i32_const(module.alloc(n8));
    const V = c5.i32_const(module.alloc(n8));
    const V2 = c5.i32_const(module.alloc(n8));
    const S1_J2 = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.if(c5.call(prefix + "_isZero", c5.getLocal("p1")), [
      ...c5.call(prefix + "_copy", c5.getLocal("p2"), c5.getLocal("pr")),
      ...c5.ret([])
    ]), c5.if(c5.call(prefix + "_isZero", c5.getLocal("p2")), [
      ...c5.call(prefix + "_copy", c5.getLocal("p1"), c5.getLocal("pr")),
      ...c5.ret([])
    ]), c5.if(c5.call(prefixField + "_isOne", z1), [
      ...c5.call(prefix + "_addMixed", x22, x1, x3),
      ...c5.ret([])
    ]), c5.if(c5.call(prefixField + "_isOne", z2), [
      ...c5.call(prefix + "_addMixed", x1, x22, x3),
      ...c5.ret([])
    ]), c5.call(prefixField + "_square", z1, Z1Z1), c5.call(prefixField + "_square", z2, Z2Z2), c5.call(prefixField + "_mul", x1, Z2Z2, U1), c5.call(prefixField + "_mul", x22, Z1Z1, U2), c5.call(prefixField + "_mul", z1, Z1Z1, Z1_cubed), c5.call(prefixField + "_mul", z2, Z2Z2, Z2_cubed), c5.call(prefixField + "_mul", y1, Z2_cubed, S1), c5.call(prefixField + "_mul", y22, Z1_cubed, S2), c5.if(c5.call(prefixField + "_eq", U1, U2), c5.if(c5.call(prefixField + "_eq", S1, S2), [
      ...c5.call(prefix + "_double", c5.getLocal("p1"), c5.getLocal("pr")),
      ...c5.ret([])
    ])), c5.call(prefixField + "_sub", U2, U1, H2), c5.call(prefixField + "_sub", S2, S1, S2_minus_S1), c5.call(prefixField + "_add", H2, H2, I2), c5.call(prefixField + "_square", I2, I2), c5.call(prefixField + "_mul", H2, I2, J), c5.call(prefixField + "_add", S2_minus_S1, S2_minus_S1, r3), c5.call(prefixField + "_mul", U1, I2, V), c5.call(prefixField + "_square", r3, r22), c5.call(prefixField + "_add", V, V, V2), c5.call(prefixField + "_sub", r22, J, x3), c5.call(prefixField + "_sub", x3, V2, x3), c5.call(prefixField + "_mul", S1, J, S1_J2), c5.call(prefixField + "_add", S1_J2, S1_J2, S1_J2), c5.call(prefixField + "_sub", V, x3, y3), c5.call(prefixField + "_mul", y3, r3, y3), c5.call(prefixField + "_sub", y3, S1_J2, y3), c5.call(prefixField + "_add", z1, z2, z3), c5.call(prefixField + "_square", z3, z3), c5.call(prefixField + "_sub", z3, Z1Z1, z3), c5.call(prefixField + "_sub", z3, Z2Z2, z3), c5.call(prefixField + "_mul", z3, H2, z3));
  }
  function buildAddMixed() {
    const f3 = module.addFunction(prefix + "_addMixed");
    f3.addParam("p1", "i32");
    f3.addParam("p2", "i32");
    f3.addParam("pr", "i32");
    f3.addLocal("z1", "i32");
    const c5 = f3.getCodeBuilder();
    const x1 = c5.getLocal("p1");
    const y1 = c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8));
    f3.addCode(c5.setLocal("z1", c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8 * 2))));
    const z1 = c5.getLocal("z1");
    const x22 = c5.getLocal("p2");
    const y22 = c5.i32_add(c5.getLocal("p2"), c5.i32_const(n8));
    const x3 = c5.getLocal("pr");
    const y3 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8));
    const z3 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8 * 2));
    const Z1Z1 = c5.i32_const(module.alloc(n8));
    const U2 = c5.i32_const(module.alloc(n8));
    const Z1_cubed = c5.i32_const(module.alloc(n8));
    const S2 = c5.i32_const(module.alloc(n8));
    const H2 = c5.i32_const(module.alloc(n8));
    const HH = c5.i32_const(module.alloc(n8));
    const S2_minus_y1 = c5.i32_const(module.alloc(n8));
    const I2 = c5.i32_const(module.alloc(n8));
    const J = c5.i32_const(module.alloc(n8));
    const r3 = c5.i32_const(module.alloc(n8));
    const r22 = c5.i32_const(module.alloc(n8));
    const V = c5.i32_const(module.alloc(n8));
    const V2 = c5.i32_const(module.alloc(n8));
    const y1_J2 = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.if(c5.call(prefix + "_isZero", c5.getLocal("p1")), [
      ...c5.call(prefix + "_copyAffine", c5.getLocal("p2"), c5.getLocal("pr")),
      ...c5.call(prefixField + "_one", c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8 * 2))),
      ...c5.ret([])
    ]), c5.if(c5.call(prefix + "_isZeroAffine", c5.getLocal("p2")), [
      ...c5.call(prefix + "_copy", c5.getLocal("p1"), c5.getLocal("pr")),
      ...c5.ret([])
    ]), c5.if(c5.call(prefixField + "_isOne", z1), [
      ...c5.call(prefix + "_addAffine", x1, x22, x3),
      ...c5.ret([])
    ]), c5.call(prefixField + "_square", z1, Z1Z1), c5.call(prefixField + "_mul", x22, Z1Z1, U2), c5.call(prefixField + "_mul", z1, Z1Z1, Z1_cubed), c5.call(prefixField + "_mul", y22, Z1_cubed, S2), c5.if(c5.call(prefixField + "_eq", x1, U2), c5.if(c5.call(prefixField + "_eq", y1, S2), [
      ...c5.call(prefix + "_doubleAffine", c5.getLocal("p2"), c5.getLocal("pr")),
      ...c5.ret([])
    ])), c5.call(prefixField + "_sub", U2, x1, H2), c5.call(prefixField + "_sub", S2, y1, S2_minus_y1), c5.call(prefixField + "_square", H2, HH), c5.call(prefixField + "_add", HH, HH, I2), c5.call(prefixField + "_add", I2, I2, I2), c5.call(prefixField + "_mul", H2, I2, J), c5.call(prefixField + "_add", S2_minus_y1, S2_minus_y1, r3), c5.call(prefixField + "_mul", x1, I2, V), c5.call(prefixField + "_square", r3, r22), c5.call(prefixField + "_add", V, V, V2), c5.call(prefixField + "_sub", r22, J, x3), c5.call(prefixField + "_sub", x3, V2, x3), c5.call(prefixField + "_mul", y1, J, y1_J2), c5.call(prefixField + "_add", y1_J2, y1_J2, y1_J2), c5.call(prefixField + "_sub", V, x3, y3), c5.call(prefixField + "_mul", y3, r3, y3), c5.call(prefixField + "_sub", y3, y1_J2, y3), c5.call(prefixField + "_add", z1, H2, z3), c5.call(prefixField + "_square", z3, z3), c5.call(prefixField + "_sub", z3, Z1Z1, z3), c5.call(prefixField + "_sub", z3, HH, z3));
  }
  function buildAddAffine() {
    const f3 = module.addFunction(prefix + "_addAffine");
    f3.addParam("p1", "i32");
    f3.addParam("p2", "i32");
    f3.addParam("pr", "i32");
    f3.addLocal("z1", "i32");
    const c5 = f3.getCodeBuilder();
    const x1 = c5.getLocal("p1");
    const y1 = c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8));
    f3.addCode(c5.setLocal("z1", c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8 * 2))));
    const x22 = c5.getLocal("p2");
    const y22 = c5.i32_add(c5.getLocal("p2"), c5.i32_const(n8));
    const x3 = c5.getLocal("pr");
    const y3 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8));
    const z3 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8 * 2));
    const H2 = c5.i32_const(module.alloc(n8));
    const HH = c5.i32_const(module.alloc(n8));
    const y2_minus_y1 = c5.i32_const(module.alloc(n8));
    const I2 = c5.i32_const(module.alloc(n8));
    const J = c5.i32_const(module.alloc(n8));
    const r3 = c5.i32_const(module.alloc(n8));
    const r22 = c5.i32_const(module.alloc(n8));
    const V = c5.i32_const(module.alloc(n8));
    const V2 = c5.i32_const(module.alloc(n8));
    const y1_J2 = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.if(c5.call(prefix + "_isZeroAffine", c5.getLocal("p1")), [
      ...c5.call(prefix + "_copyAffine", c5.getLocal("p2"), c5.getLocal("pr")),
      ...c5.call(prefixField + "_one", c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8 * 2))),
      ...c5.ret([])
    ]), c5.if(c5.call(prefix + "_isZeroAffine", c5.getLocal("p2")), [
      ...c5.call(prefix + "_copyAffine", c5.getLocal("p1"), c5.getLocal("pr")),
      ...c5.call(prefixField + "_one", c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8 * 2))),
      ...c5.ret([])
    ]), c5.if(c5.call(prefixField + "_eq", x1, x22), c5.if(c5.call(prefixField + "_eq", y1, y22), [
      ...c5.call(prefix + "_doubleAffine", c5.getLocal("p2"), c5.getLocal("pr")),
      ...c5.ret([])
    ])), c5.call(prefixField + "_sub", x22, x1, H2), c5.call(prefixField + "_sub", y22, y1, y2_minus_y1), c5.call(prefixField + "_square", H2, HH), c5.call(prefixField + "_add", HH, HH, I2), c5.call(prefixField + "_add", I2, I2, I2), c5.call(prefixField + "_mul", H2, I2, J), c5.call(prefixField + "_add", y2_minus_y1, y2_minus_y1, r3), c5.call(prefixField + "_mul", x1, I2, V), c5.call(prefixField + "_square", r3, r22), c5.call(prefixField + "_add", V, V, V2), c5.call(prefixField + "_sub", r22, J, x3), c5.call(prefixField + "_sub", x3, V2, x3), c5.call(prefixField + "_mul", y1, J, y1_J2), c5.call(prefixField + "_add", y1_J2, y1_J2, y1_J2), c5.call(prefixField + "_sub", V, x3, y3), c5.call(prefixField + "_mul", y3, r3, y3), c5.call(prefixField + "_sub", y3, y1_J2, y3), c5.call(prefixField + "_add", H2, H2, z3));
  }
  function buildNeg() {
    const f3 = module.addFunction(prefix + "_neg");
    f3.addParam("p1", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    const x3 = c5.getLocal("p1");
    const y3 = c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8));
    const z2 = c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8 * 2));
    const x32 = c5.getLocal("pr");
    const y32 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8));
    const z3 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8 * 2));
    f3.addCode(c5.call(prefixField + "_copy", x3, x32), c5.call(prefixField + "_neg", y3, y32), c5.call(prefixField + "_copy", z2, z3));
  }
  function buildNegAffine() {
    const f3 = module.addFunction(prefix + "_negAffine");
    f3.addParam("p1", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    const x3 = c5.getLocal("p1");
    const y3 = c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8));
    const x32 = c5.getLocal("pr");
    const y32 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8));
    f3.addCode(c5.call(prefixField + "_copy", x3, x32), c5.call(prefixField + "_neg", y3, y32));
  }
  function buildSub() {
    const f3 = module.addFunction(prefix + "_sub");
    f3.addParam("p1", "i32");
    f3.addParam("p2", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    const AUX = c5.i32_const(module.alloc(n8 * 3));
    f3.addCode(c5.call(prefix + "_neg", c5.getLocal("p2"), AUX), c5.call(prefix + "_add", c5.getLocal("p1"), AUX, c5.getLocal("pr")));
  }
  function buildSubMixed() {
    const f3 = module.addFunction(prefix + "_subMixed");
    f3.addParam("p1", "i32");
    f3.addParam("p2", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    const AUX = c5.i32_const(module.alloc(n8 * 3));
    f3.addCode(c5.call(prefix + "_negAffine", c5.getLocal("p2"), AUX), c5.call(prefix + "_addMixed", c5.getLocal("p1"), AUX, c5.getLocal("pr")));
  }
  function buildSubAffine() {
    const f3 = module.addFunction(prefix + "_subAffine");
    f3.addParam("p1", "i32");
    f3.addParam("p2", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    const AUX = c5.i32_const(module.alloc(n8 * 3));
    f3.addCode(c5.call(prefix + "_negAffine", c5.getLocal("p2"), AUX), c5.call(prefix + "_addAffine", c5.getLocal("p1"), AUX, c5.getLocal("pr")));
  }
  function buildNormalize() {
    const f3 = module.addFunction(prefix + "_normalize");
    f3.addParam("p1", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    const x3 = c5.getLocal("p1");
    const y3 = c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8));
    const z2 = c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8 * 2));
    const x32 = c5.getLocal("pr");
    const y32 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8));
    const z3 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8 * 2));
    const Z_inv = c5.i32_const(module.alloc(n8));
    const Z2_inv = c5.i32_const(module.alloc(n8));
    const Z3_inv = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.if(c5.call(prefix + "_isZero", c5.getLocal("p1")), c5.call(prefix + "_zero", c5.getLocal("pr")), [
      ...c5.call(prefixField + "_inverse", z2, Z_inv),
      ...c5.call(prefixField + "_square", Z_inv, Z2_inv),
      ...c5.call(prefixField + "_mul", Z_inv, Z2_inv, Z3_inv),
      ...c5.call(prefixField + "_mul", x3, Z2_inv, x32),
      ...c5.call(prefixField + "_mul", y3, Z3_inv, y32),
      ...c5.call(prefixField + "_one", z3)
    ]));
  }
  function buildToAffine() {
    const f3 = module.addFunction(prefix + "_toAffine");
    f3.addParam("p1", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    const x3 = c5.getLocal("p1");
    const y3 = c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8));
    const z2 = c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8 * 2));
    const x32 = c5.getLocal("pr");
    const y32 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8));
    const Z_inv = c5.i32_const(module.alloc(n8));
    const Z2_inv = c5.i32_const(module.alloc(n8));
    const Z3_inv = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.if(c5.call(prefix + "_isZero", c5.getLocal("p1")), [
      ...c5.call(prefixField + "_zero", x32),
      ...c5.call(prefixField + "_zero", y32)
    ], [
      ...c5.call(prefixField + "_inverse", z2, Z_inv),
      ...c5.call(prefixField + "_square", Z_inv, Z2_inv),
      ...c5.call(prefixField + "_mul", Z_inv, Z2_inv, Z3_inv),
      ...c5.call(prefixField + "_mul", x3, Z2_inv, x32),
      ...c5.call(prefixField + "_mul", y3, Z3_inv, y32)
    ]));
  }
  function buildToJacobian() {
    const f3 = module.addFunction(prefix + "_toJacobian");
    f3.addParam("p1", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    const x3 = c5.getLocal("p1");
    const y3 = c5.i32_add(c5.getLocal("p1"), c5.i32_const(n8));
    const x32 = c5.getLocal("pr");
    const y32 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8));
    const z3 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8 * 2));
    f3.addCode(c5.if(c5.call(prefix + "_isZeroAffine", c5.getLocal("p1")), c5.call(prefix + "_zero", c5.getLocal("pr")), [
      ...c5.call(prefixField + "_one", z3),
      ...c5.call(prefixField + "_copy", y3, y32),
      ...c5.call(prefixField + "_copy", x3, x32)
    ]));
  }
  function buildBatchToAffine() {
    const f3 = module.addFunction(prefix + "_batchToAffine");
    f3.addParam("pIn", "i32");
    f3.addParam("n", "i32");
    f3.addParam("pOut", "i32");
    f3.addLocal("pAux", "i32");
    f3.addLocal("itIn", "i32");
    f3.addLocal("itAux", "i32");
    f3.addLocal("itOut", "i32");
    f3.addLocal("i", "i32");
    const c5 = f3.getCodeBuilder();
    const tmp = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.setLocal("pAux", c5.i32_load(c5.i32_const(0))), c5.i32_store(c5.i32_const(0), c5.i32_add(c5.getLocal("pAux"), c5.i32_mul(c5.getLocal("n"), c5.i32_const(n8)))), c5.call(prefixField + "_batchInverse", c5.i32_add(c5.getLocal("pIn"), c5.i32_const(n8 * 2)), c5.i32_const(n8 * 3), c5.getLocal("n"), c5.getLocal("pAux"), c5.i32_const(n8)), c5.setLocal("itIn", c5.getLocal("pIn")), c5.setLocal("itAux", c5.getLocal("pAux")), c5.setLocal("itOut", c5.getLocal("pOut")), c5.setLocal("i", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("i"), c5.getLocal("n"))), c5.if(c5.call(prefixField + "_isZero", c5.getLocal("itAux")), [
      ...c5.call(prefixField + "_zero", c5.getLocal("itOut")),
      ...c5.call(prefixField + "_zero", c5.i32_add(c5.getLocal("itOut"), c5.i32_const(n8)))
    ], [
      ...c5.call(prefixField + "_mul", c5.getLocal("itAux"), c5.i32_add(c5.getLocal("itIn"), c5.i32_const(n8)), tmp),
      ...c5.call(prefixField + "_square", c5.getLocal("itAux"), c5.getLocal("itAux")),
      ...c5.call(prefixField + "_mul", c5.getLocal("itAux"), c5.getLocal("itIn"), c5.getLocal("itOut")),
      ...c5.call(prefixField + "_mul", c5.getLocal("itAux"), tmp, c5.i32_add(c5.getLocal("itOut"), c5.i32_const(n8)))
    ]), c5.setLocal("itIn", c5.i32_add(c5.getLocal("itIn"), c5.i32_const(n8 * 3))), c5.setLocal("itOut", c5.i32_add(c5.getLocal("itOut"), c5.i32_const(n8 * 2))), c5.setLocal("itAux", c5.i32_add(c5.getLocal("itAux"), c5.i32_const(n8))), c5.setLocal("i", c5.i32_add(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))), c5.i32_store(c5.i32_const(0), c5.getLocal("pAux")));
  }
  function buildReverseBytes() {
    const f3 = module.addFunction(prefix + "__reverseBytes");
    f3.addParam("pIn", "i32");
    f3.addParam("n", "i32");
    f3.addParam("pOut", "i32");
    f3.addLocal("itOut", "i32");
    f3.addLocal("itIn", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.setLocal("itOut", c5.i32_sub(c5.i32_add(c5.getLocal("pOut"), c5.getLocal("n")), c5.i32_const(1))), c5.setLocal("itIn", c5.getLocal("pIn")), c5.block(c5.loop(c5.br_if(1, c5.i32_lt_s(c5.getLocal("itOut"), c5.getLocal("pOut"))), c5.i32_store8(c5.getLocal("itOut"), c5.i32_load8_u(c5.getLocal("itIn"))), c5.setLocal("itOut", c5.i32_sub(c5.getLocal("itOut"), c5.i32_const(1))), c5.setLocal("itIn", c5.i32_add(c5.getLocal("itIn"), c5.i32_const(1))), c5.br(0))));
  }
  function buildLEMtoC() {
    const f3 = module.addFunction(prefix + "_LEMtoC");
    f3.addParam("pIn", "i32");
    f3.addParam("pOut", "i32");
    const c5 = f3.getCodeBuilder();
    const tmp = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.if(c5.call(prefix + "_isZero", c5.getLocal("pIn")), [
      ...c5.call(prefixField + "_zero", c5.getLocal("pOut")),
      ...c5.i32_store8(c5.getLocal("pOut"), c5.i32_const(64)),
      ...c5.ret([])
    ]), c5.call(prefixField + "_fromMontgomery", c5.getLocal("pIn"), tmp), c5.call(prefix + "__reverseBytes", tmp, c5.i32_const(n8), c5.getLocal("pOut")), c5.if(c5.i32_eq(c5.call(prefixField + "_sign", c5.i32_add(c5.getLocal("pIn"), c5.i32_const(n8))), c5.i32_const(-1)), c5.i32_store8(c5.getLocal("pOut"), c5.i32_or(c5.i32_load8_u(c5.getLocal("pOut")), c5.i32_const(128)))));
  }
  function buildLEMtoU() {
    const f3 = module.addFunction(prefix + "_LEMtoU");
    f3.addParam("pIn", "i32");
    f3.addParam("pOut", "i32");
    const c5 = f3.getCodeBuilder();
    const pTmp = module.alloc(n8 * 2);
    const tmp = c5.i32_const(pTmp);
    const tmpX = c5.i32_const(pTmp);
    const tmpY = c5.i32_const(pTmp + n8);
    f3.addCode(c5.if(c5.call(prefix + "_isZeroAffine", c5.getLocal("pIn")), [
      ...c5.call(prefix + "_zeroAffine", c5.getLocal("pOut")),
      ...c5.i32_store8(c5.getLocal("pOut"), c5.i32_const(64)),
      ...c5.ret([])
    ]), c5.call(prefix + "_fromMontgomeryAffine", c5.getLocal("pIn"), tmp), c5.call(prefix + "__reverseBytes", tmpX, c5.i32_const(n8), c5.getLocal("pOut")), c5.call(prefix + "__reverseBytes", tmpY, c5.i32_const(n8), c5.i32_add(c5.getLocal("pOut"), c5.i32_const(n8))));
  }
  function buildUtoLEM() {
    const f3 = module.addFunction(prefix + "_UtoLEM");
    f3.addParam("pIn", "i32");
    f3.addParam("pOut", "i32");
    const c5 = f3.getCodeBuilder();
    const pTmp = module.alloc(n8 * 2);
    const tmp = c5.i32_const(pTmp);
    const tmpX = c5.i32_const(pTmp);
    const tmpY = c5.i32_const(pTmp + n8);
    f3.addCode(c5.if(c5.i32_and(c5.i32_load8_u(c5.getLocal("pIn")), c5.i32_const(64)), [
      ...c5.call(prefix + "_zeroAffine", c5.getLocal("pOut")),
      ...c5.ret([])
    ]), c5.call(prefix + "__reverseBytes", c5.getLocal("pIn"), c5.i32_const(n8), tmpX), c5.call(prefix + "__reverseBytes", c5.i32_add(c5.getLocal("pIn"), c5.i32_const(n8)), c5.i32_const(n8), tmpY), c5.call(prefix + "_toMontgomeryAffine", tmp, c5.getLocal("pOut")));
  }
  function buildCtoLEM() {
    const f3 = module.addFunction(prefix + "_CtoLEM");
    f3.addParam("pIn", "i32");
    f3.addParam("pOut", "i32");
    f3.addLocal("firstByte", "i32");
    f3.addLocal("greatest", "i32");
    const c5 = f3.getCodeBuilder();
    const pTmp = module.alloc(n8 * 2);
    const tmpX = c5.i32_const(pTmp);
    const tmpY = c5.i32_const(pTmp + n8);
    f3.addCode(c5.setLocal("firstByte", c5.i32_load8_u(c5.getLocal("pIn"))), c5.if(c5.i32_and(c5.getLocal("firstByte"), c5.i32_const(64)), [
      ...c5.call(prefix + "_zeroAffine", c5.getLocal("pOut")),
      ...c5.ret([])
    ]), c5.setLocal("greatest", c5.i32_and(c5.getLocal("firstByte"), c5.i32_const(128))), c5.call(prefixField + "_copy", c5.getLocal("pIn"), tmpY), c5.i32_store8(tmpY, c5.i32_and(c5.getLocal("firstByte"), c5.i32_const(63))), c5.call(prefix + "__reverseBytes", tmpY, c5.i32_const(n8), tmpX), c5.call(prefixField + "_toMontgomery", tmpX, c5.getLocal("pOut")), c5.call(prefixField + "_square", c5.getLocal("pOut"), tmpY), c5.call(prefixField + "_mul", c5.getLocal("pOut"), tmpY, tmpY), c5.call(prefixField + "_add", tmpY, c5.i32_const(pB), tmpY), c5.call(prefixField + "_sqrt", tmpY, tmpY), c5.call(prefixField + "_neg", tmpY, tmpX), c5.if(c5.i32_eq(c5.call(prefixField + "_sign", tmpY), c5.i32_const(-1)), c5.if(c5.getLocal("greatest"), c5.call(prefixField + "_copy", tmpY, c5.i32_add(c5.getLocal("pOut"), c5.i32_const(n8))), c5.call(prefixField + "_neg", tmpY, c5.i32_add(c5.getLocal("pOut"), c5.i32_const(n8)))), c5.if(c5.getLocal("greatest"), c5.call(prefixField + "_neg", tmpY, c5.i32_add(c5.getLocal("pOut"), c5.i32_const(n8))), c5.call(prefixField + "_copy", tmpY, c5.i32_add(c5.getLocal("pOut"), c5.i32_const(n8))))));
  }
  function buildInCurveAffine() {
    const f3 = module.addFunction(prefix + "_inCurveAffine");
    f3.addParam("pIn", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const x3 = c5.getLocal("pIn");
    const y3 = c5.i32_add(c5.getLocal("pIn"), n8);
    const y22 = module.alloc(n8 * 2);
    const x3b = module.alloc(n8 * 2);
    f3.addCode(c5.call(prefixField + "_square", y3, y22), c5.call(prefixField + "_square", x3, x3b), c5.call(prefixField + "_mul", x3, x3b, x3b), c5.call(prefixField + "_add", x3b, c5.i32_const(pB), x3b), c5.ret(c5.call(prefixField + "_eq", y22, x3b)));
  }
  function buildInCurveAffine() {
    const f3 = module.addFunction(prefix + "_inCurveAffine");
    f3.addParam("pIn", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const x3 = c5.getLocal("pIn");
    const y3 = c5.i32_add(c5.getLocal("pIn"), c5.i32_const(n8));
    const y22 = c5.i32_const(module.alloc(n8));
    const x3b = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.call(prefixField + "_square", y3, y22), c5.call(prefixField + "_square", x3, x3b), c5.call(prefixField + "_mul", x3, x3b, x3b), c5.call(prefixField + "_add", x3b, c5.i32_const(pB), x3b), c5.ret(c5.call(prefixField + "_eq", y22, x3b)));
  }
  function buildInCurve() {
    const f3 = module.addFunction(prefix + "_inCurve");
    f3.addParam("pIn", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const aux = c5.i32_const(module.alloc(n8 * 2));
    f3.addCode(c5.call(prefix + "_toAffine", c5.getLocal("pIn"), aux), c5.ret(c5.call(prefix + "_inCurveAffine", aux)));
  }
  buildIsZeroAffine();
  buildIsZero();
  buildZeroAffine();
  buildZero();
  buildCopyAffine();
  buildCopy();
  buildToJacobian();
  buildEqAffine();
  buildEqMixed();
  buildEq();
  buildDoubleAffine();
  buildDouble();
  buildAddAffine();
  buildAddMixed();
  buildAdd();
  buildNegAffine();
  buildNeg();
  buildSubAffine();
  buildSubMixed();
  buildSub();
  buildFromMontgomeryAffine();
  buildFromMontgomery();
  buildToMontgomeryAffine();
  buildToMontgomery();
  buildToAffine();
  buildInCurveAffine();
  buildInCurve();
  buildBatchToAffine();
  buildNormalize();
  buildReverseBytes();
  buildLEMtoU();
  buildLEMtoC();
  buildUtoLEM();
  buildCtoLEM();
  build_batchconvertion(module, prefix + "_batchLEMtoU", prefix + "_LEMtoU", n8 * 2, n8 * 2);
  build_batchconvertion(module, prefix + "_batchLEMtoC", prefix + "_LEMtoC", n8 * 2, n8);
  build_batchconvertion(module, prefix + "_batchUtoLEM", prefix + "_UtoLEM", n8 * 2, n8 * 2);
  build_batchconvertion(module, prefix + "_batchCtoLEM", prefix + "_CtoLEM", n8, n8 * 2, true);
  build_batchconvertion(module, prefix + "_batchToJacobian", prefix + "_toJacobian", n8 * 2, n8 * 3, true);
  build_multiexp(module, prefix, prefix + "_multiexp", prefix + "_add", n8 * 3);
  build_multiexp(module, prefix, prefix + "_multiexpAffine", prefix + "_addMixed", n8 * 2);
  build_timesscalarnaf(module, prefix + "_timesScalar", n8 * 3, prefix + "_add", prefix + "_double", prefix + "_sub", prefix + "_copy", prefix + "_zero");
  build_timesscalarnaf(module, prefix + "_timesScalarAffine", n8 * 2, prefix + "_addMixed", prefix + "_double", prefix + "_subMixed", prefix + "_copyAffine", prefix + "_zero");
  module.exportFunction(prefix + "_isZero");
  module.exportFunction(prefix + "_isZeroAffine");
  module.exportFunction(prefix + "_eq");
  module.exportFunction(prefix + "_eqMixed");
  module.exportFunction(prefix + "_eqAffine");
  module.exportFunction(prefix + "_copy");
  module.exportFunction(prefix + "_copyAffine");
  module.exportFunction(prefix + "_zero");
  module.exportFunction(prefix + "_zeroAffine");
  module.exportFunction(prefix + "_double");
  module.exportFunction(prefix + "_doubleAffine");
  module.exportFunction(prefix + "_add");
  module.exportFunction(prefix + "_addMixed");
  module.exportFunction(prefix + "_addAffine");
  module.exportFunction(prefix + "_neg");
  module.exportFunction(prefix + "_negAffine");
  module.exportFunction(prefix + "_sub");
  module.exportFunction(prefix + "_subMixed");
  module.exportFunction(prefix + "_subAffine");
  module.exportFunction(prefix + "_fromMontgomery");
  module.exportFunction(prefix + "_fromMontgomeryAffine");
  module.exportFunction(prefix + "_toMontgomery");
  module.exportFunction(prefix + "_toMontgomeryAffine");
  module.exportFunction(prefix + "_timesScalar");
  module.exportFunction(prefix + "_timesScalarAffine");
  module.exportFunction(prefix + "_normalize");
  module.exportFunction(prefix + "_LEMtoU");
  module.exportFunction(prefix + "_LEMtoC");
  module.exportFunction(prefix + "_UtoLEM");
  module.exportFunction(prefix + "_CtoLEM");
  module.exportFunction(prefix + "_batchLEMtoU");
  module.exportFunction(prefix + "_batchLEMtoC");
  module.exportFunction(prefix + "_batchUtoLEM");
  module.exportFunction(prefix + "_batchCtoLEM");
  module.exportFunction(prefix + "_toAffine");
  module.exportFunction(prefix + "_toJacobian");
  module.exportFunction(prefix + "_batchToAffine");
  module.exportFunction(prefix + "_batchToJacobian");
  module.exportFunction(prefix + "_inCurve");
  module.exportFunction(prefix + "_inCurveAffine");
  return prefix;
};
var build_fft = function buildFFT(module, prefix, gPrefix, fPrefix, opGtimesF) {
  const n64f = module.modules[fPrefix].n64;
  const n8f = n64f * 8;
  const n64g = module.modules[gPrefix].n64;
  const n8g = n64g * 8;
  const q = module.modules[fPrefix].q;
  let rem = q.minus(BigInteger(1));
  let maxBits = 0;
  while (!rem.isOdd()) {
    maxBits++;
    rem = rem.shiftRight(1);
  }
  let nr = BigInteger(2);
  while (nr.modPow(q.shiftRight(1), q).equals(1))
    nr = nr.add(1);
  const w3 = new Array(maxBits + 1);
  w3[maxBits] = nr.modPow(rem, q);
  let n2 = maxBits - 1;
  while (n2 >= 0) {
    w3[n2] = w3[n2 + 1].modPow(2, q);
    n2--;
  }
  const bytes3 = [];
  const R = BigInteger(1).shiftLeft(n8f * 8).mod(q);
  for (let i3 = 0; i3 < w3.length; i3++) {
    const m3 = w3[i3].times(R).mod(q);
    bytes3.push(...utils$3.bigInt2BytesLE(m3, n8f));
  }
  const ROOTs = module.alloc(bytes3);
  const i22 = new Array(maxBits + 1);
  i22[0] = BigInteger(1);
  for (let i3 = 1; i3 <= maxBits; i3++) {
    i22[i3] = i22[i3 - 1].times(2);
  }
  const bytesi2 = [];
  for (let i3 = 0; i3 <= maxBits; i3++) {
    const m3 = i22[i3].modInv(q).times(R).mod(q);
    bytesi2.push(...utils$3.bigInt2BytesLE(m3, n8f));
  }
  const INV2 = module.alloc(bytesi2);
  const shift = nr.modPow(2, q);
  const bytesShiftToSmallM = [];
  const bytesSConst = [];
  for (let i3 = 0; i3 <= maxBits; i3++) {
    const shiftToSmallM = shift.modPow(BigInteger(2).pow(i3), q);
    const sConst = q.add(BigInteger.one).minus(shiftToSmallM).modInv(q);
    bytesShiftToSmallM.push(...utils$3.bigInt2BytesLE(shiftToSmallM.times(R).mod(q), n8f));
    bytesSConst.push(...utils$3.bigInt2BytesLE(sConst.times(R).mod(q), n8f));
  }
  const SHIFT_TO_M = module.alloc(bytesShiftToSmallM);
  const SCONST = module.alloc(bytesSConst);
  function rev(x3) {
    let r3 = 0;
    for (let i3 = 0; i3 < 8; i3++) {
      if (x3 & 1 << i3) {
        r3 = r3 | 128 >> i3;
      }
    }
    return r3;
  }
  const rtable = Array(256);
  for (let i3 = 0; i3 < 256; i3++) {
    rtable[i3] = rev(i3);
  }
  const REVTABLE = module.alloc(rtable);
  function buildLog2() {
    const f3 = module.addFunction(prefix + "__log2");
    f3.addParam("n", "i32");
    f3.setReturnType("i32");
    f3.addLocal("bits", "i32");
    f3.addLocal("aux", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.setLocal("aux", c5.i32_shr_u(c5.getLocal("n"), c5.i32_const(1))));
    f3.addCode(c5.setLocal("bits", c5.i32_const(0)));
    f3.addCode(c5.block(c5.loop(c5.br_if(1, c5.i32_eqz(c5.getLocal("aux"))), c5.setLocal("aux", c5.i32_shr_u(c5.getLocal("aux"), c5.i32_const(1))), c5.setLocal("bits", c5.i32_add(c5.getLocal("bits"), c5.i32_const(1))), c5.br(0))));
    f3.addCode(c5.if(c5.i32_ne(c5.getLocal("n"), c5.i32_shl(c5.i32_const(1), c5.getLocal("bits"))), c5.unreachable()));
    f3.addCode(c5.if(c5.i32_gt_u(c5.getLocal("bits"), c5.i32_const(maxBits)), c5.unreachable()));
    f3.addCode(c5.getLocal("bits"));
  }
  function buildFFT3() {
    const f3 = module.addFunction(prefix + "_fft");
    f3.addParam("px", "i32");
    f3.addParam("n", "i32");
    f3.addLocal("bits", "i32");
    const c5 = f3.getCodeBuilder();
    const One3 = c5.i32_const(module.alloc(n8f));
    f3.addCode(c5.setLocal("bits", c5.call(prefix + "__log2", c5.getLocal("n"))), c5.call(fPrefix + "_one", One3), c5.call(prefix + "_rawfft", c5.getLocal("px"), c5.getLocal("bits"), c5.i32_const(0), One3));
  }
  function buildIFFT() {
    const f3 = module.addFunction(prefix + "_ifft");
    f3.addParam("px", "i32");
    f3.addParam("n", "i32");
    f3.addLocal("bits", "i32");
    f3.addLocal("pInv2", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.setLocal("bits", c5.call(prefix + "__log2", c5.getLocal("n"))), c5.setLocal("pInv2", c5.i32_add(c5.i32_const(INV2), c5.i32_mul(c5.getLocal("bits"), c5.i32_const(n8f)))), c5.call(prefix + "_rawfft", c5.getLocal("px"), c5.getLocal("bits"), c5.i32_const(1), c5.getLocal("pInv2")));
  }
  function buildRawFFT() {
    const f3 = module.addFunction(prefix + "_rawfft");
    f3.addParam("px", "i32");
    f3.addParam("bits", "i32");
    f3.addParam("reverse", "i32");
    f3.addParam("mulFactor", "i32");
    f3.addLocal("s", "i32");
    f3.addLocal("k", "i32");
    f3.addLocal("j", "i32");
    f3.addLocal("m", "i32");
    f3.addLocal("mdiv2", "i32");
    f3.addLocal("n", "i32");
    f3.addLocal("pwm", "i32");
    f3.addLocal("idx1", "i32");
    f3.addLocal("idx2", "i32");
    const c5 = f3.getCodeBuilder();
    const W = c5.i32_const(module.alloc(n8f));
    const T2 = c5.i32_const(module.alloc(n8g));
    const U = c5.i32_const(module.alloc(n8g));
    f3.addCode(c5.call(prefix + "__reversePermutation", c5.getLocal("px"), c5.getLocal("bits")), c5.setLocal("n", c5.i32_shl(c5.i32_const(1), c5.getLocal("bits"))), c5.setLocal("s", c5.i32_const(1)), c5.block(c5.loop(c5.br_if(1, c5.i32_gt_u(c5.getLocal("s"), c5.getLocal("bits"))), c5.setLocal("m", c5.i32_shl(c5.i32_const(1), c5.getLocal("s"))), c5.setLocal("pwm", c5.i32_add(c5.i32_const(ROOTs), c5.i32_mul(c5.getLocal("s"), c5.i32_const(n8f)))), c5.setLocal("k", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_ge_u(c5.getLocal("k"), c5.getLocal("n"))), c5.call(fPrefix + "_one", W), c5.setLocal("mdiv2", c5.i32_shr_u(c5.getLocal("m"), c5.i32_const(1))), c5.setLocal("j", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_ge_u(c5.getLocal("j"), c5.getLocal("mdiv2"))), c5.setLocal("idx1", c5.i32_add(c5.getLocal("px"), c5.i32_mul(c5.i32_add(c5.getLocal("k"), c5.getLocal("j")), c5.i32_const(n8g)))), c5.setLocal("idx2", c5.i32_add(c5.getLocal("idx1"), c5.i32_mul(c5.getLocal("mdiv2"), c5.i32_const(n8g)))), c5.call(opGtimesF, c5.getLocal("idx2"), W, T2), c5.call(gPrefix + "_copy", c5.getLocal("idx1"), U), c5.call(gPrefix + "_add", U, T2, c5.getLocal("idx1")), c5.call(gPrefix + "_sub", U, T2, c5.getLocal("idx2")), c5.call(fPrefix + "_mul", W, c5.getLocal("pwm"), W), c5.setLocal("j", c5.i32_add(c5.getLocal("j"), c5.i32_const(1))), c5.br(0))), c5.setLocal("k", c5.i32_add(c5.getLocal("k"), c5.getLocal("m"))), c5.br(0))), c5.setLocal("s", c5.i32_add(c5.getLocal("s"), c5.i32_const(1))), c5.br(0))), c5.call(prefix + "__fftFinal", c5.getLocal("px"), c5.getLocal("bits"), c5.getLocal("reverse"), c5.getLocal("mulFactor")));
  }
  function buildFinalInverse() {
    const f3 = module.addFunction(prefix + "__fftFinal");
    f3.addParam("px", "i32");
    f3.addParam("bits", "i32");
    f3.addParam("reverse", "i32");
    f3.addParam("mulFactor", "i32");
    f3.addLocal("n", "i32");
    f3.addLocal("ndiv2", "i32");
    f3.addLocal("pInv2", "i32");
    f3.addLocal("i", "i32");
    f3.addLocal("mask", "i32");
    f3.addLocal("idx1", "i32");
    f3.addLocal("idx2", "i32");
    const c5 = f3.getCodeBuilder();
    const T2 = c5.i32_const(module.alloc(n8g));
    f3.addCode(c5.if(c5.i32_and(c5.i32_eqz(c5.getLocal("reverse")), c5.call(fPrefix + "_isOne", c5.getLocal("mulFactor"))), c5.ret([])), c5.setLocal("n", c5.i32_shl(c5.i32_const(1), c5.getLocal("bits"))), c5.setLocal("mask", c5.i32_sub(c5.getLocal("n"), c5.i32_const(1))), c5.setLocal("i", c5.i32_const(1)), c5.setLocal("ndiv2", c5.i32_shr_u(c5.getLocal("n"), c5.i32_const(1))), c5.block(c5.loop(c5.br_if(1, c5.i32_ge_u(c5.getLocal("i"), c5.getLocal("ndiv2"))), c5.setLocal("idx1", c5.i32_add(c5.getLocal("px"), c5.i32_mul(c5.getLocal("i"), c5.i32_const(n8g)))), c5.setLocal("idx2", c5.i32_add(c5.getLocal("px"), c5.i32_mul(c5.i32_sub(c5.getLocal("n"), c5.getLocal("i")), c5.i32_const(n8g)))), c5.if(c5.getLocal("reverse"), c5.if(c5.call(fPrefix + "_isOne", c5.getLocal("mulFactor")), [
      ...c5.call(gPrefix + "_copy", c5.getLocal("idx1"), T2),
      ...c5.call(gPrefix + "_copy", c5.getLocal("idx2"), c5.getLocal("idx1")),
      ...c5.call(gPrefix + "_copy", T2, c5.getLocal("idx2"))
    ], [
      ...c5.call(gPrefix + "_copy", c5.getLocal("idx1"), T2),
      ...c5.call(opGtimesF, c5.getLocal("idx2"), c5.getLocal("mulFactor"), c5.getLocal("idx1")),
      ...c5.call(opGtimesF, T2, c5.getLocal("mulFactor"), c5.getLocal("idx2"))
    ]), c5.if(c5.call(fPrefix + "_isOne", c5.getLocal("mulFactor")), [], [
      ...c5.call(opGtimesF, c5.getLocal("idx1"), c5.getLocal("mulFactor"), c5.getLocal("idx1")),
      ...c5.call(opGtimesF, c5.getLocal("idx2"), c5.getLocal("mulFactor"), c5.getLocal("idx2"))
    ])), c5.setLocal("i", c5.i32_add(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))), c5.if(c5.call(fPrefix + "_isOne", c5.getLocal("mulFactor")), [], [
      ...c5.call(opGtimesF, c5.getLocal("px"), c5.getLocal("mulFactor"), c5.getLocal("px")),
      ...c5.setLocal("idx2", c5.i32_add(c5.getLocal("px"), c5.i32_mul(c5.getLocal("ndiv2"), c5.i32_const(n8g)))),
      ...c5.call(opGtimesF, c5.getLocal("idx2"), c5.getLocal("mulFactor"), c5.getLocal("idx2"))
    ]));
  }
  function buildReversePermutation() {
    const f3 = module.addFunction(prefix + "__reversePermutation");
    f3.addParam("px", "i32");
    f3.addParam("bits", "i32");
    f3.addLocal("n", "i32");
    f3.addLocal("i", "i32");
    f3.addLocal("ri", "i32");
    f3.addLocal("idx1", "i32");
    f3.addLocal("idx2", "i32");
    const c5 = f3.getCodeBuilder();
    const T2 = c5.i32_const(module.alloc(n8g));
    f3.addCode(c5.setLocal("n", c5.i32_shl(c5.i32_const(1), c5.getLocal("bits"))), c5.setLocal("i", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("i"), c5.getLocal("n"))), c5.setLocal("idx1", c5.i32_add(c5.getLocal("px"), c5.i32_mul(c5.getLocal("i"), c5.i32_const(n8g)))), c5.setLocal("ri", c5.call(prefix + "__rev", c5.getLocal("i"), c5.getLocal("bits"))), c5.setLocal("idx2", c5.i32_add(c5.getLocal("px"), c5.i32_mul(c5.getLocal("ri"), c5.i32_const(n8g)))), c5.if(c5.i32_lt_u(c5.getLocal("i"), c5.getLocal("ri")), [
      ...c5.call(gPrefix + "_copy", c5.getLocal("idx1"), T2),
      ...c5.call(gPrefix + "_copy", c5.getLocal("idx2"), c5.getLocal("idx1")),
      ...c5.call(gPrefix + "_copy", T2, c5.getLocal("idx2"))
    ]), c5.setLocal("i", c5.i32_add(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))));
  }
  function buildRev() {
    const f3 = module.addFunction(prefix + "__rev");
    f3.addParam("x", "i32");
    f3.addParam("bits", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.i32_rotl(c5.i32_add(c5.i32_add(c5.i32_shl(c5.i32_load8_u(c5.i32_and(c5.getLocal("x"), c5.i32_const(255)), REVTABLE, 0), c5.i32_const(24)), c5.i32_shl(c5.i32_load8_u(c5.i32_and(c5.i32_shr_u(c5.getLocal("x"), c5.i32_const(8)), c5.i32_const(255)), REVTABLE, 0), c5.i32_const(16))), c5.i32_add(c5.i32_shl(c5.i32_load8_u(c5.i32_and(c5.i32_shr_u(c5.getLocal("x"), c5.i32_const(16)), c5.i32_const(255)), REVTABLE, 0), c5.i32_const(8)), c5.i32_load8_u(c5.i32_and(c5.i32_shr_u(c5.getLocal("x"), c5.i32_const(24)), c5.i32_const(255)), REVTABLE, 0))), c5.getLocal("bits")));
  }
  function buildFFTJoin() {
    const f3 = module.addFunction(prefix + "_fftJoin");
    f3.addParam("pBuff1", "i32");
    f3.addParam("pBuff2", "i32");
    f3.addParam("n", "i32");
    f3.addParam("first", "i32");
    f3.addParam("inc", "i32");
    f3.addLocal("idx1", "i32");
    f3.addLocal("idx2", "i32");
    f3.addLocal("i", "i32");
    const c5 = f3.getCodeBuilder();
    const W = c5.i32_const(module.alloc(n8f));
    const T2 = c5.i32_const(module.alloc(n8g));
    const U = c5.i32_const(module.alloc(n8g));
    f3.addCode(c5.call(fPrefix + "_copy", c5.getLocal("first"), W), c5.setLocal("i", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("i"), c5.getLocal("n"))), c5.setLocal("idx1", c5.i32_add(c5.getLocal("pBuff1"), c5.i32_mul(c5.getLocal("i"), c5.i32_const(n8g)))), c5.setLocal("idx2", c5.i32_add(c5.getLocal("pBuff2"), c5.i32_mul(c5.getLocal("i"), c5.i32_const(n8g)))), c5.call(opGtimesF, c5.getLocal("idx2"), W, T2), c5.call(gPrefix + "_copy", c5.getLocal("idx1"), U), c5.call(gPrefix + "_add", U, T2, c5.getLocal("idx1")), c5.call(gPrefix + "_sub", U, T2, c5.getLocal("idx2")), c5.call(fPrefix + "_mul", W, c5.getLocal("inc"), W), c5.setLocal("i", c5.i32_add(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))));
  }
  function buildFFTJoinExt() {
    const f3 = module.addFunction(prefix + "_fftJoinExt");
    f3.addParam("pBuff1", "i32");
    f3.addParam("pBuff2", "i32");
    f3.addParam("n", "i32");
    f3.addParam("first", "i32");
    f3.addParam("inc", "i32");
    f3.addParam("totalBits", "i32");
    f3.addLocal("idx1", "i32");
    f3.addLocal("idx2", "i32");
    f3.addLocal("i", "i32");
    f3.addLocal("pShiftToM", "i32");
    const c5 = f3.getCodeBuilder();
    const W = c5.i32_const(module.alloc(n8f));
    const U = c5.i32_const(module.alloc(n8g));
    f3.addCode(c5.setLocal("pShiftToM", c5.i32_add(c5.i32_const(SHIFT_TO_M), c5.i32_mul(c5.getLocal("totalBits"), c5.i32_const(n8f)))), c5.call(fPrefix + "_copy", c5.getLocal("first"), W), c5.setLocal("i", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("i"), c5.getLocal("n"))), c5.setLocal("idx1", c5.i32_add(c5.getLocal("pBuff1"), c5.i32_mul(c5.getLocal("i"), c5.i32_const(n8g)))), c5.setLocal("idx2", c5.i32_add(c5.getLocal("pBuff2"), c5.i32_mul(c5.getLocal("i"), c5.i32_const(n8g)))), c5.call(gPrefix + "_add", c5.getLocal("idx1"), c5.getLocal("idx2"), U), c5.call(opGtimesF, c5.getLocal("idx2"), c5.getLocal("pShiftToM"), c5.getLocal("idx2")), c5.call(gPrefix + "_add", c5.getLocal("idx1"), c5.getLocal("idx2"), c5.getLocal("idx2")), c5.call(opGtimesF, c5.getLocal("idx2"), W, c5.getLocal("idx2")), c5.call(gPrefix + "_copy", U, c5.getLocal("idx1")), c5.call(fPrefix + "_mul", W, c5.getLocal("inc"), W), c5.setLocal("i", c5.i32_add(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))));
  }
  function buildFFTJoinExtInv() {
    const f3 = module.addFunction(prefix + "_fftJoinExtInv");
    f3.addParam("pBuff1", "i32");
    f3.addParam("pBuff2", "i32");
    f3.addParam("n", "i32");
    f3.addParam("first", "i32");
    f3.addParam("inc", "i32");
    f3.addParam("totalBits", "i32");
    f3.addLocal("idx1", "i32");
    f3.addLocal("idx2", "i32");
    f3.addLocal("i", "i32");
    f3.addLocal("pShiftToM", "i32");
    f3.addLocal("pSConst", "i32");
    const c5 = f3.getCodeBuilder();
    const W = c5.i32_const(module.alloc(n8f));
    const U = c5.i32_const(module.alloc(n8g));
    f3.addCode(c5.setLocal("pShiftToM", c5.i32_add(c5.i32_const(SHIFT_TO_M), c5.i32_mul(c5.getLocal("totalBits"), c5.i32_const(n8f)))), c5.setLocal("pSConst", c5.i32_add(c5.i32_const(SCONST), c5.i32_mul(c5.getLocal("totalBits"), c5.i32_const(n8f)))), c5.call(fPrefix + "_copy", c5.getLocal("first"), W), c5.setLocal("i", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("i"), c5.getLocal("n"))), c5.setLocal("idx1", c5.i32_add(c5.getLocal("pBuff1"), c5.i32_mul(c5.getLocal("i"), c5.i32_const(n8g)))), c5.setLocal("idx2", c5.i32_add(c5.getLocal("pBuff2"), c5.i32_mul(c5.getLocal("i"), c5.i32_const(n8g)))), c5.call(opGtimesF, c5.getLocal("idx2"), W, U), c5.call(gPrefix + "_sub", c5.getLocal("idx1"), U, c5.getLocal("idx2")), c5.call(opGtimesF, c5.getLocal("idx2"), c5.getLocal("pSConst"), c5.getLocal("idx2")), c5.call(opGtimesF, c5.getLocal("idx1"), c5.getLocal("pShiftToM"), c5.getLocal("idx1")), c5.call(gPrefix + "_sub", U, c5.getLocal("idx1"), c5.getLocal("idx1")), c5.call(opGtimesF, c5.getLocal("idx1"), c5.getLocal("pSConst"), c5.getLocal("idx1")), c5.call(fPrefix + "_mul", W, c5.getLocal("inc"), W), c5.setLocal("i", c5.i32_add(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))));
  }
  function buildPrepareLagrangeEvaluation() {
    const f3 = module.addFunction(prefix + "_prepareLagrangeEvaluation");
    f3.addParam("pBuff1", "i32");
    f3.addParam("pBuff2", "i32");
    f3.addParam("n", "i32");
    f3.addParam("first", "i32");
    f3.addParam("inc", "i32");
    f3.addParam("totalBits", "i32");
    f3.addLocal("idx1", "i32");
    f3.addLocal("idx2", "i32");
    f3.addLocal("i", "i32");
    f3.addLocal("pShiftToM", "i32");
    f3.addLocal("pSConst", "i32");
    const c5 = f3.getCodeBuilder();
    const W = c5.i32_const(module.alloc(n8f));
    const U = c5.i32_const(module.alloc(n8g));
    f3.addCode(c5.setLocal("pShiftToM", c5.i32_add(c5.i32_const(SHIFT_TO_M), c5.i32_mul(c5.getLocal("totalBits"), c5.i32_const(n8f)))), c5.setLocal("pSConst", c5.i32_add(c5.i32_const(SCONST), c5.i32_mul(c5.getLocal("totalBits"), c5.i32_const(n8f)))), c5.call(fPrefix + "_copy", c5.getLocal("first"), W), c5.setLocal("i", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("i"), c5.getLocal("n"))), c5.setLocal("idx1", c5.i32_add(c5.getLocal("pBuff1"), c5.i32_mul(c5.getLocal("i"), c5.i32_const(n8g)))), c5.setLocal("idx2", c5.i32_add(c5.getLocal("pBuff2"), c5.i32_mul(c5.getLocal("i"), c5.i32_const(n8g)))), c5.call(opGtimesF, c5.getLocal("idx1"), c5.getLocal("pShiftToM"), U), c5.call(gPrefix + "_sub", c5.getLocal("idx2"), U, U), c5.call(gPrefix + "_sub", c5.getLocal("idx1"), c5.getLocal("idx2"), c5.getLocal("idx2")), c5.call(opGtimesF, U, c5.getLocal("pSConst"), c5.getLocal("idx1")), c5.call(opGtimesF, c5.getLocal("idx2"), W, c5.getLocal("idx2")), c5.call(fPrefix + "_mul", W, c5.getLocal("inc"), W), c5.setLocal("i", c5.i32_add(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))));
  }
  function buildFFTMix() {
    const f3 = module.addFunction(prefix + "_fftMix");
    f3.addParam("pBuff", "i32");
    f3.addParam("n", "i32");
    f3.addParam("exp", "i32");
    f3.addLocal("nGroups", "i32");
    f3.addLocal("nPerGroup", "i32");
    f3.addLocal("nPerGroupDiv2", "i32");
    f3.addLocal("pairOffset", "i32");
    f3.addLocal("idx1", "i32");
    f3.addLocal("idx2", "i32");
    f3.addLocal("i", "i32");
    f3.addLocal("j", "i32");
    f3.addLocal("pwm", "i32");
    const c5 = f3.getCodeBuilder();
    const W = c5.i32_const(module.alloc(n8f));
    const T2 = c5.i32_const(module.alloc(n8g));
    const U = c5.i32_const(module.alloc(n8g));
    f3.addCode(c5.setLocal("nPerGroup", c5.i32_shl(c5.i32_const(1), c5.getLocal("exp"))), c5.setLocal("nPerGroupDiv2", c5.i32_shr_u(c5.getLocal("nPerGroup"), c5.i32_const(1))), c5.setLocal("nGroups", c5.i32_shr_u(c5.getLocal("n"), c5.getLocal("exp"))), c5.setLocal("pairOffset", c5.i32_mul(c5.getLocal("nPerGroupDiv2"), c5.i32_const(n8g))), c5.setLocal("pwm", c5.i32_add(c5.i32_const(ROOTs), c5.i32_mul(c5.getLocal("exp"), c5.i32_const(n8f)))), c5.setLocal("i", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("i"), c5.getLocal("nGroups"))), c5.call(fPrefix + "_one", W), c5.setLocal("j", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("j"), c5.getLocal("nPerGroupDiv2"))), c5.setLocal("idx1", c5.i32_add(c5.getLocal("pBuff"), c5.i32_mul(c5.i32_add(c5.i32_mul(c5.getLocal("i"), c5.getLocal("nPerGroup")), c5.getLocal("j")), c5.i32_const(n8g)))), c5.setLocal("idx2", c5.i32_add(c5.getLocal("idx1"), c5.getLocal("pairOffset"))), c5.call(opGtimesF, c5.getLocal("idx2"), W, T2), c5.call(gPrefix + "_copy", c5.getLocal("idx1"), U), c5.call(gPrefix + "_add", U, T2, c5.getLocal("idx1")), c5.call(gPrefix + "_sub", U, T2, c5.getLocal("idx2")), c5.call(fPrefix + "_mul", W, c5.getLocal("pwm"), W), c5.setLocal("j", c5.i32_add(c5.getLocal("j"), c5.i32_const(1))), c5.br(0))), c5.setLocal("i", c5.i32_add(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))));
  }
  function buildFFTFinal() {
    const f3 = module.addFunction(prefix + "_fftFinal");
    f3.addParam("pBuff", "i32");
    f3.addParam("n", "i32");
    f3.addParam("factor", "i32");
    f3.addLocal("idx1", "i32");
    f3.addLocal("idx2", "i32");
    f3.addLocal("i", "i32");
    f3.addLocal("ndiv2", "i32");
    const c5 = f3.getCodeBuilder();
    const T2 = c5.i32_const(module.alloc(n8g));
    f3.addCode(c5.setLocal("ndiv2", c5.i32_shr_u(c5.getLocal("n"), c5.i32_const(1))), c5.if(c5.i32_and(c5.getLocal("n"), c5.i32_const(1)), c5.call(opGtimesF, c5.i32_add(c5.getLocal("pBuff"), c5.i32_mul(c5.getLocal("ndiv2"), c5.i32_const(n8g))), c5.getLocal("factor"), c5.i32_add(c5.getLocal("pBuff"), c5.i32_mul(c5.getLocal("ndiv2"), c5.i32_const(n8g))))), c5.setLocal("i", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_ge_u(c5.getLocal("i"), c5.getLocal("ndiv2"))), c5.setLocal("idx1", c5.i32_add(c5.getLocal("pBuff"), c5.i32_mul(c5.getLocal("i"), c5.i32_const(n8g)))), c5.setLocal("idx2", c5.i32_add(c5.getLocal("pBuff"), c5.i32_mul(c5.i32_sub(c5.i32_sub(c5.getLocal("n"), c5.i32_const(1)), c5.getLocal("i")), c5.i32_const(n8g)))), c5.call(opGtimesF, c5.getLocal("idx2"), c5.getLocal("factor"), T2), c5.call(opGtimesF, c5.getLocal("idx1"), c5.getLocal("factor"), c5.getLocal("idx2")), c5.call(gPrefix + "_copy", T2, c5.getLocal("idx1")), c5.setLocal("i", c5.i32_add(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))));
  }
  buildRev();
  buildReversePermutation();
  buildFinalInverse();
  buildRawFFT();
  buildLog2();
  buildFFT3();
  buildIFFT();
  buildFFTJoin();
  buildFFTJoinExt();
  buildFFTJoinExtInv();
  buildFFTMix();
  buildFFTFinal();
  buildPrepareLagrangeEvaluation();
  module.exportFunction(prefix + "_fft");
  module.exportFunction(prefix + "_ifft");
  module.exportFunction(prefix + "_rawfft");
  module.exportFunction(prefix + "_fftJoin");
  module.exportFunction(prefix + "_fftJoinExt");
  module.exportFunction(prefix + "_fftJoinExtInv");
  module.exportFunction(prefix + "_fftMix");
  module.exportFunction(prefix + "_fftFinal");
  module.exportFunction(prefix + "_prepareLagrangeEvaluation");
};
var build_pol = function buildPol(module, prefix, prefixField) {
  const n64 = module.modules[prefixField].n64;
  const n8 = n64 * 8;
  function buildZero() {
    const f3 = module.addFunction(prefix + "_zero");
    f3.addParam("px", "i32");
    f3.addParam("n", "i32");
    f3.addLocal("lastp", "i32");
    f3.addLocal("p", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.setLocal("p", c5.getLocal("px")), c5.setLocal("lastp", c5.i32_add(c5.getLocal("px"), c5.i32_mul(c5.getLocal("n"), c5.i32_const(n8)))), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("p"), c5.getLocal("lastp"))), c5.call(prefixField + "_zero", c5.getLocal("p")), c5.setLocal("p", c5.i32_add(c5.getLocal("p"), c5.i32_const(n8))), c5.br(0))));
  }
  function buildConstructLC() {
    const f3 = module.addFunction(prefix + "_constructLC");
    f3.addParam("ppolynomials", "i32");
    f3.addParam("psignals", "i32");
    f3.addParam("nSignals", "i32");
    f3.addParam("pres", "i32");
    f3.addLocal("i", "i32");
    f3.addLocal("j", "i32");
    f3.addLocal("pp", "i32");
    f3.addLocal("ps", "i32");
    f3.addLocal("pd", "i32");
    f3.addLocal("ncoefs", "i32");
    const c5 = f3.getCodeBuilder();
    const aux = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.setLocal("i", c5.i32_const(0)), c5.setLocal("pp", c5.getLocal("ppolynomials")), c5.setLocal("ps", c5.getLocal("psignals")), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("i"), c5.getLocal("nSignals"))), c5.setLocal("ncoefs", c5.i32_load(c5.getLocal("pp"))), c5.setLocal("pp", c5.i32_add(c5.getLocal("pp"), c5.i32_const(4))), c5.setLocal("j", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("j"), c5.getLocal("ncoefs"))), c5.setLocal("pd", c5.i32_add(c5.getLocal("pres"), c5.i32_mul(c5.i32_load(c5.getLocal("pp")), c5.i32_const(n8)))), c5.setLocal("pp", c5.i32_add(c5.getLocal("pp"), c5.i32_const(4))), c5.call(prefixField + "_mul", c5.getLocal("ps"), c5.getLocal("pp"), aux), c5.call(prefixField + "_add", aux, c5.getLocal("pd"), c5.getLocal("pd")), c5.setLocal("pp", c5.i32_add(c5.getLocal("pp"), c5.i32_const(n8))), c5.setLocal("j", c5.i32_add(c5.getLocal("j"), c5.i32_const(1))), c5.br(0))), c5.setLocal("ps", c5.i32_add(c5.getLocal("ps"), c5.i32_const(n8))), c5.setLocal("i", c5.i32_add(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))));
  }
  buildZero();
  buildConstructLC();
  module.exportFunction(prefix + "_zero");
  module.exportFunction(prefix + "_constructLC");
  return prefix;
};
var build_qap = function buildQAP(module, prefix, prefixField) {
  const n64 = module.modules[prefixField].n64;
  const n8 = n64 * 8;
  function buildBuildABC() {
    const f3 = module.addFunction(prefix + "_buildABC");
    f3.addParam("pCoefs", "i32");
    f3.addParam("nCoefs", "i32");
    f3.addParam("pWitness", "i32");
    f3.addParam("pA", "i32");
    f3.addParam("pB", "i32");
    f3.addParam("pC", "i32");
    f3.addParam("offsetOut", "i32");
    f3.addParam("nOut", "i32");
    f3.addParam("offsetWitness", "i32");
    f3.addParam("nWitness", "i32");
    f3.addLocal("it", "i32");
    f3.addLocal("ita", "i32");
    f3.addLocal("itb", "i32");
    f3.addLocal("last", "i32");
    f3.addLocal("m", "i32");
    f3.addLocal("c", "i32");
    f3.addLocal("s", "i32");
    f3.addLocal("pOut", "i32");
    const c5 = f3.getCodeBuilder();
    const aux = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.setLocal("ita", c5.getLocal("pA")), c5.setLocal("itb", c5.getLocal("pB")), c5.setLocal("last", c5.i32_add(c5.getLocal("pA"), c5.i32_mul(c5.getLocal("nOut"), c5.i32_const(n8)))), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("ita"), c5.getLocal("last"))), c5.call(prefixField + "_zero", c5.getLocal("ita")), c5.call(prefixField + "_zero", c5.getLocal("itb")), c5.setLocal("ita", c5.i32_add(c5.getLocal("ita"), c5.i32_const(n8))), c5.setLocal("itb", c5.i32_add(c5.getLocal("itb"), c5.i32_const(n8))), c5.br(0))), c5.setLocal("it", c5.getLocal("pCoefs")), c5.setLocal("last", c5.i32_add(c5.getLocal("pCoefs"), c5.i32_mul(c5.getLocal("nCoefs"), c5.i32_const(n8 + 12)))), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("it"), c5.getLocal("last"))), c5.setLocal("s", c5.i32_load(c5.getLocal("it"), 8)), c5.if(c5.i32_or(c5.i32_lt_u(c5.getLocal("s"), c5.getLocal("offsetWitness")), c5.i32_ge_u(c5.getLocal("s"), c5.i32_add(c5.getLocal("offsetWitness"), c5.getLocal("nWitness")))), [
      ...c5.setLocal("it", c5.i32_add(c5.getLocal("it"), c5.i32_const(n8 + 12))),
      ...c5.br(1)
    ]), c5.setLocal("m", c5.i32_load(c5.getLocal("it"))), c5.if(c5.i32_eq(c5.getLocal("m"), c5.i32_const(0)), c5.setLocal("pOut", c5.getLocal("pA")), c5.if(c5.i32_eq(c5.getLocal("m"), c5.i32_const(1)), c5.setLocal("pOut", c5.getLocal("pB")), [
      ...c5.setLocal("it", c5.i32_add(c5.getLocal("it"), c5.i32_const(n8 + 12))),
      ...c5.br(1)
    ])), c5.setLocal("c", c5.i32_load(c5.getLocal("it"), 4)), c5.if(c5.i32_or(c5.i32_lt_u(c5.getLocal("c"), c5.getLocal("offsetOut")), c5.i32_ge_u(c5.getLocal("c"), c5.i32_add(c5.getLocal("offsetOut"), c5.getLocal("nOut")))), [
      ...c5.setLocal("it", c5.i32_add(c5.getLocal("it"), c5.i32_const(n8 + 12))),
      ...c5.br(1)
    ]), c5.setLocal("pOut", c5.i32_add(c5.getLocal("pOut"), c5.i32_mul(c5.i32_sub(c5.getLocal("c"), c5.getLocal("offsetOut")), c5.i32_const(n8)))), c5.call(prefixField + "_mul", c5.i32_add(c5.getLocal("pWitness"), c5.i32_mul(c5.i32_sub(c5.getLocal("s"), c5.getLocal("offsetWitness")), c5.i32_const(n8))), c5.i32_add(c5.getLocal("it"), c5.i32_const(12)), aux), c5.call(prefixField + "_add", c5.getLocal("pOut"), aux, c5.getLocal("pOut")), c5.setLocal("it", c5.i32_add(c5.getLocal("it"), c5.i32_const(n8 + 12))), c5.br(0))), c5.setLocal("ita", c5.getLocal("pA")), c5.setLocal("itb", c5.getLocal("pB")), c5.setLocal("it", c5.getLocal("pC")), c5.setLocal("last", c5.i32_add(c5.getLocal("pA"), c5.i32_mul(c5.getLocal("nOut"), c5.i32_const(n8)))), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("ita"), c5.getLocal("last"))), c5.call(prefixField + "_mul", c5.getLocal("ita"), c5.getLocal("itb"), c5.getLocal("it")), c5.setLocal("ita", c5.i32_add(c5.getLocal("ita"), c5.i32_const(n8))), c5.setLocal("itb", c5.i32_add(c5.getLocal("itb"), c5.i32_const(n8))), c5.setLocal("it", c5.i32_add(c5.getLocal("it"), c5.i32_const(n8))), c5.br(0))));
  }
  function buildJoinABC() {
    const f3 = module.addFunction(prefix + "_joinABC");
    f3.addParam("pA", "i32");
    f3.addParam("pB", "i32");
    f3.addParam("pC", "i32");
    f3.addParam("n", "i32");
    f3.addParam("pP", "i32");
    f3.addLocal("ita", "i32");
    f3.addLocal("itb", "i32");
    f3.addLocal("itc", "i32");
    f3.addLocal("itp", "i32");
    f3.addLocal("last", "i32");
    const c5 = f3.getCodeBuilder();
    const aux = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.setLocal("ita", c5.getLocal("pA")), c5.setLocal("itb", c5.getLocal("pB")), c5.setLocal("itc", c5.getLocal("pC")), c5.setLocal("itp", c5.getLocal("pP")), c5.setLocal("last", c5.i32_add(c5.getLocal("pA"), c5.i32_mul(c5.getLocal("n"), c5.i32_const(n8)))), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("ita"), c5.getLocal("last"))), c5.call(prefixField + "_mul", c5.getLocal("ita"), c5.getLocal("itb"), aux), c5.call(prefixField + "_sub", aux, c5.getLocal("itc"), c5.getLocal("itp")), c5.setLocal("ita", c5.i32_add(c5.getLocal("ita"), c5.i32_const(n8))), c5.setLocal("itb", c5.i32_add(c5.getLocal("itb"), c5.i32_const(n8))), c5.setLocal("itc", c5.i32_add(c5.getLocal("itc"), c5.i32_const(n8))), c5.setLocal("itp", c5.i32_add(c5.getLocal("itp"), c5.i32_const(n8))), c5.br(0))));
  }
  function buildBatchAdd() {
    const f3 = module.addFunction(prefix + "_batchAdd");
    f3.addParam("pa", "i32");
    f3.addParam("pb", "i32");
    f3.addParam("n", "i32");
    f3.addParam("pr", "i32");
    f3.addLocal("ita", "i32");
    f3.addLocal("itb", "i32");
    f3.addLocal("itr", "i32");
    f3.addLocal("last", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.setLocal("ita", c5.getLocal("pa")), c5.setLocal("itb", c5.getLocal("pb")), c5.setLocal("itr", c5.getLocal("pr")), c5.setLocal("last", c5.i32_add(c5.getLocal("pa"), c5.i32_mul(c5.getLocal("n"), c5.i32_const(n8)))), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("ita"), c5.getLocal("last"))), c5.call(prefixField + "_add", c5.getLocal("ita"), c5.getLocal("itb"), c5.getLocal("itr")), c5.setLocal("ita", c5.i32_add(c5.getLocal("ita"), c5.i32_const(n8))), c5.setLocal("itb", c5.i32_add(c5.getLocal("itb"), c5.i32_const(n8))), c5.setLocal("itr", c5.i32_add(c5.getLocal("itr"), c5.i32_const(n8))), c5.br(0))));
  }
  buildBuildABC();
  buildJoinABC();
  buildBatchAdd();
  module.exportFunction(prefix + "_buildABC");
  module.exportFunction(prefix + "_joinABC");
  module.exportFunction(prefix + "_batchAdd");
  return prefix;
};
var build_applykey = function buildApplyKey(module, fnName, gPrefix, frPrefix, sizeGIn, sizeGOut, sizeF, opGtimesF) {
  const f3 = module.addFunction(fnName);
  f3.addParam("pIn", "i32");
  f3.addParam("n", "i32");
  f3.addParam("pFirst", "i32");
  f3.addParam("pInc", "i32");
  f3.addParam("pOut", "i32");
  f3.addLocal("pOldFree", "i32");
  f3.addLocal("i", "i32");
  f3.addLocal("pFrom", "i32");
  f3.addLocal("pTo", "i32");
  const c5 = f3.getCodeBuilder();
  const t3 = c5.i32_const(module.alloc(sizeF));
  f3.addCode(c5.setLocal("pFrom", c5.getLocal("pIn")), c5.setLocal("pTo", c5.getLocal("pOut")));
  f3.addCode(c5.call(frPrefix + "_copy", c5.getLocal("pFirst"), t3));
  f3.addCode(c5.setLocal("i", c5.i32_const(0)), c5.block(c5.loop(c5.br_if(1, c5.i32_eq(c5.getLocal("i"), c5.getLocal("n"))), c5.call(opGtimesF, c5.getLocal("pFrom"), t3, c5.getLocal("pTo")), c5.setLocal("pFrom", c5.i32_add(c5.getLocal("pFrom"), c5.i32_const(sizeGIn))), c5.setLocal("pTo", c5.i32_add(c5.getLocal("pTo"), c5.i32_const(sizeGOut))), c5.call(frPrefix + "_mul", t3, c5.getLocal("pInc"), t3), c5.setLocal("i", c5.i32_add(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))));
  module.exportFunction(fnName);
};
var build_bn128 = function buildBN128(module, _prefix) {
  const prefix = _prefix || "bn128";
  if (module.modules[prefix])
    return prefix;
  const q = BigInteger("21888242871839275222246405745257275088696311157297823662689037894645226208583");
  const r3 = BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617");
  const n64 = Math.floor((q.minus(1).bitLength() - 1) / 64) + 1;
  const n8 = n64 * 8;
  const frsize = n8;
  const f1size = n8;
  const f2size = f1size * 2;
  const ftsize = f1size * 12;
  const pr = module.alloc(utils$3.bigInt2BytesLE(r3, frsize));
  const f1mPrefix = build_f1m(module, q, "f1m");
  build_f1(module, r3, "fr", "frm");
  const pG1b = module.alloc(utils$3.bigInt2BytesLE(toMontgomery(BigInteger(3)), f1size));
  const g1mPrefix = build_curve_jacobian_a0(module, "g1m", "f1m", pG1b);
  build_fft(module, "frm", "frm", "frm", "frm_mul");
  build_pol(module, "pol", "frm");
  build_qap(module, "qap", "frm");
  const f2mPrefix = build_f2m(module, "f1m_neg", "f2m", "f1m");
  const pG2b = module.alloc([
    ...utils$3.bigInt2BytesLE(toMontgomery(BigInteger("19485874751759354771024239261021720505790618469301721065564631296452457478373")), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(BigInteger("266929791119991161246907387137283842545076965332900288569378510910307636690")), f1size)
  ]);
  const g2mPrefix = build_curve_jacobian_a0(module, "g2m", "f2m", pG2b);
  function buildGTimesFr(fnName, opMul) {
    const f3 = module.addFunction(fnName);
    f3.addParam("pG", "i32");
    f3.addParam("pFr", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    const AUX = c5.i32_const(module.alloc(n8));
    f3.addCode(c5.call("frm_fromMontgomery", c5.getLocal("pFr"), AUX), c5.call(opMul, c5.getLocal("pG"), AUX, c5.i32_const(n8), c5.getLocal("pr")));
    module.exportFunction(fnName);
  }
  buildGTimesFr("g1m_timesFr", "g1m_timesScalar");
  build_fft(module, "g1m", "g1m", "frm", "g1m_timesFr");
  buildGTimesFr("g2m_timesFr", "g2m_timesScalar");
  build_fft(module, "g2m", "g2m", "frm", "g2m_timesFr");
  buildGTimesFr("g1m_timesFrAffine", "g1m_timesScalarAffine");
  buildGTimesFr("g2m_timesFrAffine", "g2m_timesScalarAffine");
  build_applykey(module, "frm_batchApplyKey", "fmr", "frm", n8, n8, n8, "frm_mul");
  build_applykey(module, "g1m_batchApplyKey", "g1m", "frm", n8 * 3, n8 * 3, n8, "g1m_timesFr");
  build_applykey(module, "g1m_batchApplyKeyMixed", "g1m", "frm", n8 * 2, n8 * 3, n8, "g1m_timesFrAffine");
  build_applykey(module, "g2m_batchApplyKey", "g2m", "frm", n8 * 2 * 3, n8 * 3 * 2, n8, "g2m_timesFr");
  build_applykey(module, "g2m_batchApplyKeyMixed", "g2m", "frm", n8 * 2 * 2, n8 * 3 * 2, n8, "g2m_timesFrAffine");
  function toMontgomery(a3) {
    return BigInteger(a3).times(BigInteger.one.shiftLeft(f1size * 8)).mod(q);
  }
  const G1gen = [
    BigInteger("1"),
    BigInteger("2"),
    BigInteger.one
  ];
  const pG1gen = module.alloc([
    ...utils$3.bigInt2BytesLE(toMontgomery(G1gen[0]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G1gen[1]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G1gen[2]), f1size)
  ]);
  const G1zero = [
    BigInteger.zero,
    BigInteger.one,
    BigInteger.zero
  ];
  const pG1zero = module.alloc([
    ...utils$3.bigInt2BytesLE(toMontgomery(G1zero[0]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G1zero[1]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G1zero[2]), f1size)
  ]);
  const G2gen = [
    [
      BigInteger("10857046999023057135944570762232829481370756359578518086990519993285655852781"),
      BigInteger("11559732032986387107991004021392285783925812861821192530917403151452391805634")
    ],
    [
      BigInteger("8495653923123431417604973247489272438418190587263600148770280649306958101930"),
      BigInteger("4082367875863433681332203403145435568316851327593401208105741076214120093531")
    ],
    [
      BigInteger.one,
      BigInteger.zero
    ]
  ];
  const pG2gen = module.alloc([
    ...utils$3.bigInt2BytesLE(toMontgomery(G2gen[0][0]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2gen[0][1]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2gen[1][0]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2gen[1][1]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2gen[2][0]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2gen[2][1]), f1size)
  ]);
  const G2zero = [
    [
      BigInteger.zero,
      BigInteger.zero
    ],
    [
      BigInteger.one,
      BigInteger.zero
    ],
    [
      BigInteger.zero,
      BigInteger.zero
    ]
  ];
  const pG2zero = module.alloc([
    ...utils$3.bigInt2BytesLE(toMontgomery(G2zero[0][0]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2zero[0][1]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2zero[1][0]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2zero[1][1]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2zero[2][0]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2zero[2][1]), f1size)
  ]);
  const pOneT = module.alloc([
    ...utils$3.bigInt2BytesLE(toMontgomery(1), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size)
  ]);
  const pNonResidueF6 = module.alloc([
    ...utils$3.bigInt2BytesLE(toMontgomery(9), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(1), f1size)
  ]);
  const pTwoInv = module.alloc([
    ...utils$3.bigInt2BytesLE(toMontgomery(BigInteger(2).modInv(q)), f1size),
    ...utils$3.bigInt2BytesLE(BigInteger(0), f1size)
  ]);
  const pAltBn128Twist = pNonResidueF6;
  const pTwistCoefB = module.alloc([
    ...utils$3.bigInt2BytesLE(toMontgomery("19485874751759354771024239261021720505790618469301721065564631296452457478373"), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery("266929791119991161246907387137283842545076965332900288569378510910307636690"), f1size)
  ]);
  function build_mulNR6() {
    const f3 = module.addFunction(prefix + "_mulNR6");
    f3.addParam("x", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(f2mPrefix + "_mul", c5.i32_const(pNonResidueF6), c5.getLocal("x"), c5.getLocal("pr")));
  }
  build_mulNR6();
  const f6mPrefix = build_f3m(module, prefix + "_mulNR6", "f6m", "f2m");
  function build_mulNR12() {
    const f3 = module.addFunction(prefix + "_mulNR12");
    f3.addParam("x", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(f2mPrefix + "_mul", c5.i32_const(pNonResidueF6), c5.i32_add(c5.getLocal("x"), c5.i32_const(n8 * 4)), c5.getLocal("pr")), c5.call(f2mPrefix + "_copy", c5.getLocal("x"), c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8 * 2))), c5.call(f2mPrefix + "_copy", c5.i32_add(c5.getLocal("x"), c5.i32_const(n8 * 2)), c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8 * 4))));
  }
  build_mulNR12();
  const ftmPrefix = build_f2m(module, prefix + "_mulNR12", "ftm", f6mPrefix);
  const ateLoopCount = BigInteger("29793968203157093288");
  const ateLoopBitBytes = bits2(ateLoopCount);
  const pAteLoopBitBytes = module.alloc(ateLoopBitBytes);
  const ateCoefSize = 3 * f2size;
  const ateNDblCoefs = ateLoopBitBytes.length - 1;
  const ateNAddCoefs = ateLoopBitBytes.reduce((acc, b3) => acc + (b3 != 0 ? 1 : 0), 0);
  const ateNCoefs = ateNAddCoefs + ateNDblCoefs + 1;
  const prePSize = 3 * 2 * n8;
  const preQSize = 3 * n8 * 2 + ateNCoefs * ateCoefSize;
  module.modules[prefix] = {
    n64,
    pG1gen,
    pG1zero,
    pG1b,
    pG2gen,
    pG2zero,
    pG2b,
    pq: module.modules["f1m"].pq,
    pr,
    pOneT,
    prePSize,
    preQSize,
    r: r3.toString(),
    q: q.toString()
  };
  const finalExpZ = BigInteger("4965661367192848881");
  function naf2(n2) {
    let E = n2;
    const res = [];
    while (E.gt(BigInteger.zero)) {
      if (E.isOdd()) {
        const z2 = 2 - E.mod(4).toJSNumber();
        res.push(z2);
        E = E.minus(z2);
      } else {
        res.push(0);
      }
      E = E.shiftRight(1);
    }
    return res;
  }
  function bits2(n2) {
    let E = n2;
    const res = [];
    while (E.gt(BigInteger.zero)) {
      if (E.isOdd()) {
        res.push(1);
      } else {
        res.push(0);
      }
      E = E.shiftRight(1);
    }
    return res;
  }
  function buildPrepareG1() {
    const f3 = module.addFunction(prefix + "_prepareG1");
    f3.addParam("pP", "i32");
    f3.addParam("ppreP", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(g1mPrefix + "_normalize", c5.getLocal("pP"), c5.getLocal("ppreP")));
  }
  function buildPrepAddStep() {
    const f3 = module.addFunction(prefix + "_prepAddStep");
    f3.addParam("pQ", "i32");
    f3.addParam("pR", "i32");
    f3.addParam("pCoef", "i32");
    const c5 = f3.getCodeBuilder();
    const X2 = c5.getLocal("pQ");
    const Y2 = c5.i32_add(c5.getLocal("pQ"), c5.i32_const(f2size));
    const X1 = c5.getLocal("pR");
    const Y1 = c5.i32_add(c5.getLocal("pR"), c5.i32_const(f2size));
    const Z1 = c5.i32_add(c5.getLocal("pR"), c5.i32_const(2 * f2size));
    const ELL_0 = c5.getLocal("pCoef");
    const ELL_VW = c5.i32_add(c5.getLocal("pCoef"), c5.i32_const(f2size));
    const ELL_VV = c5.i32_add(c5.getLocal("pCoef"), c5.i32_const(2 * f2size));
    const D2 = ELL_VW;
    const E = c5.i32_const(module.alloc(f2size));
    const F5 = c5.i32_const(module.alloc(f2size));
    const G = c5.i32_const(module.alloc(f2size));
    const H2 = c5.i32_const(module.alloc(f2size));
    const I2 = c5.i32_const(module.alloc(f2size));
    const J = c5.i32_const(module.alloc(f2size));
    const AUX = c5.i32_const(module.alloc(f2size));
    f3.addCode(c5.call(f2mPrefix + "_mul", X2, Z1, D2), c5.call(f2mPrefix + "_sub", X1, D2, D2), c5.call(f2mPrefix + "_mul", Y2, Z1, E), c5.call(f2mPrefix + "_sub", Y1, E, E), c5.call(f2mPrefix + "_square", D2, F5), c5.call(f2mPrefix + "_square", E, G), c5.call(f2mPrefix + "_mul", D2, F5, H2), c5.call(f2mPrefix + "_mul", X1, F5, I2), c5.call(f2mPrefix + "_add", I2, I2, AUX), c5.call(f2mPrefix + "_mul", Z1, G, J), c5.call(f2mPrefix + "_add", H2, J, J), c5.call(f2mPrefix + "_sub", J, AUX, J), c5.call(f2mPrefix + "_mul", D2, J, X1), c5.call(f2mPrefix + "_mul", H2, Y1, Y1), c5.call(f2mPrefix + "_sub", I2, J, AUX), c5.call(f2mPrefix + "_mul", E, AUX, AUX), c5.call(f2mPrefix + "_sub", AUX, Y1, Y1), c5.call(f2mPrefix + "_mul", Z1, H2, Z1), c5.call(f2mPrefix + "_mul", D2, Y2, AUX), c5.call(f2mPrefix + "_mul", E, X2, ELL_0), c5.call(f2mPrefix + "_sub", ELL_0, AUX, ELL_0), c5.call(f2mPrefix + "_mul", ELL_0, c5.i32_const(pAltBn128Twist), ELL_0), c5.call(f2mPrefix + "_neg", E, ELL_VV));
  }
  function buildPrepDoubleStep() {
    const f3 = module.addFunction(prefix + "_prepDblStep");
    f3.addParam("pR", "i32");
    f3.addParam("pCoef", "i32");
    const c5 = f3.getCodeBuilder();
    const X1 = c5.getLocal("pR");
    const Y1 = c5.i32_add(c5.getLocal("pR"), c5.i32_const(f2size));
    const Z1 = c5.i32_add(c5.getLocal("pR"), c5.i32_const(2 * f2size));
    const ELL_0 = c5.getLocal("pCoef");
    const ELL_VW = c5.i32_add(c5.getLocal("pCoef"), c5.i32_const(f2size));
    const ELL_VV = c5.i32_add(c5.getLocal("pCoef"), c5.i32_const(2 * f2size));
    const A = c5.i32_const(module.alloc(f2size));
    const B = c5.i32_const(module.alloc(f2size));
    const C3 = c5.i32_const(module.alloc(f2size));
    const D2 = c5.i32_const(module.alloc(f2size));
    const E = c5.i32_const(module.alloc(f2size));
    const F5 = c5.i32_const(module.alloc(f2size));
    const G = c5.i32_const(module.alloc(f2size));
    const H2 = c5.i32_const(module.alloc(f2size));
    const I2 = c5.i32_const(module.alloc(f2size));
    const J = c5.i32_const(module.alloc(f2size));
    const E2 = c5.i32_const(module.alloc(f2size));
    const AUX = c5.i32_const(module.alloc(f2size));
    f3.addCode(c5.call(f2mPrefix + "_mul", Y1, c5.i32_const(pTwoInv), A), c5.call(f2mPrefix + "_mul", X1, A, A), c5.call(f2mPrefix + "_square", Y1, B), c5.call(f2mPrefix + "_square", Z1, C3), c5.call(f2mPrefix + "_add", C3, C3, D2), c5.call(f2mPrefix + "_add", D2, C3, D2), c5.call(f2mPrefix + "_mul", c5.i32_const(pTwistCoefB), D2, E), c5.call(f2mPrefix + "_add", E, E, F5), c5.call(f2mPrefix + "_add", E, F5, F5), c5.call(f2mPrefix + "_add", B, F5, G), c5.call(f2mPrefix + "_mul", G, c5.i32_const(pTwoInv), G), c5.call(f2mPrefix + "_add", B, C3, AUX), c5.call(f2mPrefix + "_add", Y1, Z1, H2), c5.call(f2mPrefix + "_square", H2, H2), c5.call(f2mPrefix + "_sub", H2, AUX, H2), c5.call(f2mPrefix + "_sub", E, B, I2), c5.call(f2mPrefix + "_square", X1, J), c5.call(f2mPrefix + "_square", E, E2), c5.call(f2mPrefix + "_sub", B, F5, AUX), c5.call(f2mPrefix + "_mul", A, AUX, X1), c5.call(f2mPrefix + "_add", E2, E2, AUX), c5.call(f2mPrefix + "_add", E2, AUX, AUX), c5.call(f2mPrefix + "_square", G, Y1), c5.call(f2mPrefix + "_sub", Y1, AUX, Y1), c5.call(f2mPrefix + "_mul", B, H2, Z1), c5.call(f2mPrefix + "_mul", c5.i32_const(pAltBn128Twist), I2, ELL_0), c5.call(f2mPrefix + "_neg", H2, ELL_VW), c5.call(f2mPrefix + "_add", J, J, ELL_VV), c5.call(f2mPrefix + "_add", J, ELL_VV, ELL_VV));
  }
  function buildMulByQ() {
    const f3 = module.addFunction(prefix + "_mulByQ");
    f3.addParam("p1", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    const x3 = c5.getLocal("p1");
    const y3 = c5.i32_add(c5.getLocal("p1"), c5.i32_const(f2size));
    const z2 = c5.i32_add(c5.getLocal("p1"), c5.i32_const(f2size * 2));
    const x32 = c5.getLocal("pr");
    const y32 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(f2size));
    const z3 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(f2size * 2));
    const MulByQX = c5.i32_const(module.alloc([
      ...utils$3.bigInt2BytesLE(toMontgomery("21575463638280843010398324269430826099269044274347216827212613867836435027261"), f1size),
      ...utils$3.bigInt2BytesLE(toMontgomery("10307601595873709700152284273816112264069230130616436755625194854815875713954"), f1size)
    ]));
    const MulByQY = c5.i32_const(module.alloc([
      ...utils$3.bigInt2BytesLE(toMontgomery("2821565182194536844548159561693502659359617185244120367078079554186484126554"), f1size),
      ...utils$3.bigInt2BytesLE(toMontgomery("3505843767911556378687030309984248845540243509899259641013678093033130930403"), f1size)
    ]));
    f3.addCode(c5.call(f2mPrefix + "_conjugate", x3, x32), c5.call(f2mPrefix + "_mul", MulByQX, x32, x32), c5.call(f2mPrefix + "_conjugate", y3, y32), c5.call(f2mPrefix + "_mul", MulByQY, y32, y32), c5.call(f2mPrefix + "_conjugate", z2, z3));
  }
  function buildPrepareG2() {
    buildMulByQ();
    const f3 = module.addFunction(prefix + "_prepareG2");
    f3.addParam("pQ", "i32");
    f3.addParam("ppreQ", "i32");
    f3.addLocal("pCoef", "i32");
    f3.addLocal("i", "i32");
    const c5 = f3.getCodeBuilder();
    const QX = c5.getLocal("pQ");
    c5.i32_add(c5.getLocal("pQ"), c5.i32_const(f2size));
    c5.i32_add(c5.getLocal("pQ"), c5.i32_const(f2size * 2));
    const pR = module.alloc(f2size * 3);
    const R = c5.i32_const(pR);
    const RX = c5.i32_const(pR);
    const RY = c5.i32_const(pR + f2size);
    const RZ = c5.i32_const(pR + 2 * f2size);
    const cQX = c5.i32_add(c5.getLocal("ppreQ"), c5.i32_const(0));
    const cQY = c5.i32_add(c5.getLocal("ppreQ"), c5.i32_const(f2size));
    c5.i32_add(c5.getLocal("ppreQ"), c5.i32_const(f2size * 2));
    const pQ1 = module.alloc(f2size * 3);
    const Q1 = c5.i32_const(pQ1);
    const pQ2 = module.alloc(f2size * 3);
    const Q2 = c5.i32_const(pQ2);
    c5.i32_const(pQ2);
    const Q2Y = c5.i32_const(pQ2 + f2size);
    c5.i32_const(pQ2 + f2size * 2);
    f3.addCode(c5.call(g2mPrefix + "_normalize", QX, cQX), c5.call(f2mPrefix + "_copy", cQX, RX), c5.call(f2mPrefix + "_copy", cQY, RY), c5.call(f2mPrefix + "_one", RZ));
    f3.addCode(c5.setLocal("pCoef", c5.i32_add(c5.getLocal("ppreQ"), c5.i32_const(f2size * 3))), c5.setLocal("i", c5.i32_const(ateLoopBitBytes.length - 2)), c5.block(c5.loop(c5.call(prefix + "_prepDblStep", R, c5.getLocal("pCoef")), c5.setLocal("pCoef", c5.i32_add(c5.getLocal("pCoef"), c5.i32_const(ateCoefSize))), c5.if(c5.i32_load8_s(c5.getLocal("i"), pAteLoopBitBytes), [
      ...c5.call(prefix + "_prepAddStep", cQX, R, c5.getLocal("pCoef")),
      ...c5.setLocal("pCoef", c5.i32_add(c5.getLocal("pCoef"), c5.i32_const(ateCoefSize)))
    ]), c5.br_if(1, c5.i32_eqz(c5.getLocal("i"))), c5.setLocal("i", c5.i32_sub(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))));
    f3.addCode(c5.call(prefix + "_mulByQ", cQX, Q1), c5.call(prefix + "_mulByQ", Q1, Q2));
    f3.addCode(c5.call(f2mPrefix + "_neg", Q2Y, Q2Y), c5.call(prefix + "_prepAddStep", Q1, R, c5.getLocal("pCoef")), c5.setLocal("pCoef", c5.i32_add(c5.getLocal("pCoef"), c5.i32_const(ateCoefSize))), c5.call(prefix + "_prepAddStep", Q2, R, c5.getLocal("pCoef")), c5.setLocal("pCoef", c5.i32_add(c5.getLocal("pCoef"), c5.i32_const(ateCoefSize))));
  }
  function buildMulBy024Old() {
    const f3 = module.addFunction(prefix + "__mulBy024Old");
    f3.addParam("pEll0", "i32");
    f3.addParam("pEllVW", "i32");
    f3.addParam("pEllVV", "i32");
    f3.addParam("pR", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("pEll0");
    const x22 = c5.getLocal("pEllVV");
    const x4 = c5.getLocal("pEllVW");
    const z0 = c5.getLocal("pR");
    const pAUX12 = module.alloc(ftsize);
    const AUX12 = c5.i32_const(pAUX12);
    const AUX12_0 = c5.i32_const(pAUX12);
    const AUX12_2 = c5.i32_const(pAUX12 + f2size);
    const AUX12_4 = c5.i32_const(pAUX12 + f2size * 2);
    const AUX12_6 = c5.i32_const(pAUX12 + f2size * 3);
    const AUX12_8 = c5.i32_const(pAUX12 + f2size * 4);
    const AUX12_10 = c5.i32_const(pAUX12 + f2size * 5);
    f3.addCode(c5.call(f2mPrefix + "_copy", x0, AUX12_0), c5.call(f2mPrefix + "_zero", AUX12_2), c5.call(f2mPrefix + "_copy", x22, AUX12_4), c5.call(f2mPrefix + "_zero", AUX12_6), c5.call(f2mPrefix + "_copy", x4, AUX12_8), c5.call(f2mPrefix + "_zero", AUX12_10), c5.call(ftmPrefix + "_mul", AUX12, z0, z0));
  }
  function buildMulBy024() {
    const f3 = module.addFunction(prefix + "__mulBy024");
    f3.addParam("pEll0", "i32");
    f3.addParam("pEllVW", "i32");
    f3.addParam("pEllVV", "i32");
    f3.addParam("pR", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("pEll0");
    const x22 = c5.getLocal("pEllVV");
    const x4 = c5.getLocal("pEllVW");
    const z0 = c5.getLocal("pR");
    const z1 = c5.i32_add(c5.getLocal("pR"), c5.i32_const(2 * n8));
    const z2 = c5.i32_add(c5.getLocal("pR"), c5.i32_const(4 * n8));
    const z3 = c5.i32_add(c5.getLocal("pR"), c5.i32_const(6 * n8));
    const z4 = c5.i32_add(c5.getLocal("pR"), c5.i32_const(8 * n8));
    const z5 = c5.i32_add(c5.getLocal("pR"), c5.i32_const(10 * n8));
    const t0 = c5.i32_const(module.alloc(f2size));
    const t1 = c5.i32_const(module.alloc(f2size));
    const t22 = c5.i32_const(module.alloc(f2size));
    const s0 = c5.i32_const(module.alloc(f2size));
    const T3 = c5.i32_const(module.alloc(f2size));
    const T4 = c5.i32_const(module.alloc(f2size));
    const D0 = c5.i32_const(module.alloc(f2size));
    const D2 = c5.i32_const(module.alloc(f2size));
    const D4 = c5.i32_const(module.alloc(f2size));
    const S1 = c5.i32_const(module.alloc(f2size));
    const AUX = c5.i32_const(module.alloc(f2size));
    f3.addCode(c5.call(f2mPrefix + "_mul", z0, x0, D0), c5.call(f2mPrefix + "_mul", z2, x22, D2), c5.call(f2mPrefix + "_mul", z4, x4, D4), c5.call(f2mPrefix + "_add", z0, z4, t22), c5.call(f2mPrefix + "_add", z0, z2, t1), c5.call(f2mPrefix + "_add", z1, z3, s0), c5.call(f2mPrefix + "_add", s0, z5, s0), c5.call(f2mPrefix + "_mul", z1, x22, S1), c5.call(f2mPrefix + "_add", S1, D4, T3), c5.call(f2mPrefix + "_mul", c5.i32_const(pNonResidueF6), T3, T4), c5.call(f2mPrefix + "_add", T4, D0, z0), c5.call(f2mPrefix + "_mul", z5, x4, T3), c5.call(f2mPrefix + "_add", S1, T3, S1), c5.call(f2mPrefix + "_add", T3, D2, T3), c5.call(f2mPrefix + "_mul", c5.i32_const(pNonResidueF6), T3, T4), c5.call(f2mPrefix + "_mul", z1, x0, T3), c5.call(f2mPrefix + "_add", S1, T3, S1), c5.call(f2mPrefix + "_add", T4, T3, z1), c5.call(f2mPrefix + "_add", x0, x22, t0), c5.call(f2mPrefix + "_mul", t1, t0, T3), c5.call(f2mPrefix + "_add", D0, D2, AUX), c5.call(f2mPrefix + "_sub", T3, AUX, T3), c5.call(f2mPrefix + "_mul", z3, x4, T4), c5.call(f2mPrefix + "_add", S1, T4, S1), c5.call(f2mPrefix + "_add", z2, z4, t0), c5.call(f2mPrefix + "_add", T3, T4, z2), c5.call(f2mPrefix + "_add", x22, x4, t1), c5.call(f2mPrefix + "_mul", t1, t0, T3), c5.call(f2mPrefix + "_add", D2, D4, AUX), c5.call(f2mPrefix + "_sub", T3, AUX, T3), c5.call(f2mPrefix + "_mul", c5.i32_const(pNonResidueF6), T3, T4), c5.call(f2mPrefix + "_mul", z3, x0, T3), c5.call(f2mPrefix + "_add", S1, T3, S1), c5.call(f2mPrefix + "_add", T4, T3, z3), c5.call(f2mPrefix + "_mul", z5, x22, T3), c5.call(f2mPrefix + "_add", S1, T3, S1), c5.call(f2mPrefix + "_mul", c5.i32_const(pNonResidueF6), T3, T4), c5.call(f2mPrefix + "_add", x0, x4, t0), c5.call(f2mPrefix + "_mul", t22, t0, T3), c5.call(f2mPrefix + "_add", D0, D4, AUX), c5.call(f2mPrefix + "_sub", T3, AUX, T3), c5.call(f2mPrefix + "_add", T4, T3, z4), c5.call(f2mPrefix + "_add", x0, x22, t0), c5.call(f2mPrefix + "_add", t0, x4, t0), c5.call(f2mPrefix + "_mul", s0, t0, T3), c5.call(f2mPrefix + "_sub", T3, S1, z5));
  }
  function buildMillerLoop() {
    const f3 = module.addFunction(prefix + "_millerLoop");
    f3.addParam("ppreP", "i32");
    f3.addParam("ppreQ", "i32");
    f3.addParam("r", "i32");
    f3.addLocal("pCoef", "i32");
    f3.addLocal("i", "i32");
    const c5 = f3.getCodeBuilder();
    const preP_PX = c5.getLocal("ppreP");
    const preP_PY = c5.i32_add(c5.getLocal("ppreP"), c5.i32_const(f1size));
    const ELL_0 = c5.getLocal("pCoef");
    const ELL_VW = c5.i32_add(c5.getLocal("pCoef"), c5.i32_const(f2size));
    const ELL_VV = c5.i32_add(c5.getLocal("pCoef"), c5.i32_const(2 * f2size));
    const pVW = module.alloc(f2size);
    const VW = c5.i32_const(pVW);
    const pVV = module.alloc(f2size);
    const VV = c5.i32_const(pVV);
    const F5 = c5.getLocal("r");
    f3.addCode(c5.call(ftmPrefix + "_one", F5), c5.setLocal("pCoef", c5.i32_add(c5.getLocal("ppreQ"), c5.i32_const(f2size * 3))), c5.setLocal("i", c5.i32_const(ateLoopBitBytes.length - 2)), c5.block(c5.loop(c5.call(ftmPrefix + "_square", F5, F5), c5.call(f2mPrefix + "_mul1", ELL_VW, preP_PY, VW), c5.call(f2mPrefix + "_mul1", ELL_VV, preP_PX, VV), c5.call(prefix + "__mulBy024", ELL_0, VW, VV, F5), c5.setLocal("pCoef", c5.i32_add(c5.getLocal("pCoef"), c5.i32_const(ateCoefSize))), c5.if(c5.i32_load8_s(c5.getLocal("i"), pAteLoopBitBytes), [
      ...c5.call(f2mPrefix + "_mul1", ELL_VW, preP_PY, VW),
      ...c5.call(f2mPrefix + "_mul1", ELL_VV, preP_PX, VV),
      ...c5.call(prefix + "__mulBy024", ELL_0, VW, VV, F5),
      ...c5.setLocal("pCoef", c5.i32_add(c5.getLocal("pCoef"), c5.i32_const(ateCoefSize)))
    ]), c5.br_if(1, c5.i32_eqz(c5.getLocal("i"))), c5.setLocal("i", c5.i32_sub(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))));
    f3.addCode(c5.call(f2mPrefix + "_mul1", ELL_VW, preP_PY, VW), c5.call(f2mPrefix + "_mul1", ELL_VV, preP_PX, VV), c5.call(prefix + "__mulBy024", ELL_0, VW, VV, F5), c5.setLocal("pCoef", c5.i32_add(c5.getLocal("pCoef"), c5.i32_const(ateCoefSize))), c5.call(f2mPrefix + "_mul1", ELL_VW, preP_PY, VW), c5.call(f2mPrefix + "_mul1", ELL_VV, preP_PX, VV), c5.call(prefix + "__mulBy024", ELL_0, VW, VV, F5), c5.setLocal("pCoef", c5.i32_add(c5.getLocal("pCoef"), c5.i32_const(ateCoefSize))));
  }
  function buildFrobeniusMap(n2) {
    const F12 = [
      [
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")]
      ],
      [
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("8376118865763821496583973867626364092589906065868298776909617916018768340080"), BigInteger("16469823323077808223889137241176536799009286646108169935659301613961712198316")],
        [BigInteger("21888242871839275220042445260109153167277707414472061641714758635765020556617"), BigInteger("0")],
        [BigInteger("11697423496358154304825782922584725312912383441159505038794027105778954184319"), BigInteger("303847389135065887422783454877609941456349188919719272345083954437860409601")],
        [BigInteger("21888242871839275220042445260109153167277707414472061641714758635765020556616"), BigInteger("0")],
        [BigInteger("3321304630594332808241809054958361220322477375291206261884409189760185844239"), BigInteger("5722266937896532885780051958958348231143373700109372999374820235121374419868")],
        [BigInteger("21888242871839275222246405745257275088696311157297823662689037894645226208582"), BigInteger("0")],
        [BigInteger("13512124006075453725662431877630910996106405091429524885779419978626457868503"), BigInteger("5418419548761466998357268504080738289687024511189653727029736280683514010267")],
        [BigInteger("2203960485148121921418603742825762020974279258880205651966"), BigInteger("0")],
        [BigInteger("10190819375481120917420622822672549775783927716138318623895010788866272024264"), BigInteger("21584395482704209334823622290379665147239961968378104390343953940207365798982")],
        [BigInteger("2203960485148121921418603742825762020974279258880205651967"), BigInteger("0")],
        [BigInteger("18566938241244942414004596690298913868373833782006617400804628704885040364344"), BigInteger("16165975933942742336466353786298926857552937457188450663314217659523851788715")]
      ]
    ];
    const F6 = [
      [
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")]
      ],
      [
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("21575463638280843010398324269430826099269044274347216827212613867836435027261"), BigInteger("10307601595873709700152284273816112264069230130616436755625194854815875713954")],
        [BigInteger("21888242871839275220042445260109153167277707414472061641714758635765020556616"), BigInteger("0")],
        [BigInteger("3772000881919853776433695186713858239009073593817195771773381919316419345261"), BigInteger("2236595495967245188281701248203181795121068902605861227855261137820944008926")],
        [BigInteger("2203960485148121921418603742825762020974279258880205651966"), BigInteger("0")],
        [BigInteger("18429021223477853657660792034369865839114504446431234726392080002137598044644"), BigInteger("9344045779998320333812420223237981029506012124075525679208581902008406485703")]
      ],
      [
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("2581911344467009335267311115468803099551665605076196740867805258568234346338"), BigInteger("19937756971775647987995932169929341994314640652964949448313374472400716661030")],
        [BigInteger("2203960485148121921418603742825762020974279258880205651966"), BigInteger("0")],
        [BigInteger("5324479202449903542726783395506214481928257762400643279780343368557297135718"), BigInteger("16208900380737693084919495127334387981393726419856888799917914180988844123039")],
        [BigInteger("21888242871839275220042445260109153167277707414472061641714758635765020556616"), BigInteger("0")],
        [BigInteger("13981852324922362344252311234282257507216387789820983642040889267519694726527"), BigInteger("7629828391165209371577384193250820201684255241773809077146787135900891633097")]
      ]
    ];
    const f3 = module.addFunction(prefix + "__frobeniusMap" + n2);
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    for (let i3 = 0; i3 < 6; i3++) {
      const X = i3 == 0 ? c5.getLocal("x") : c5.i32_add(c5.getLocal("x"), c5.i32_const(i3 * f2size));
      const Xc0 = X;
      const Xc1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(i3 * f2size + f1size));
      const R = i3 == 0 ? c5.getLocal("r") : c5.i32_add(c5.getLocal("r"), c5.i32_const(i3 * f2size));
      const Rc0 = R;
      const Rc1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(i3 * f2size + f1size));
      const coef = mul22(F12[Math.floor(i3 / 3)][n2 % 12], F6[i3 % 3][n2 % 6]);
      const pCoef = module.alloc([
        ...utils$3.bigInt2BytesLE(toMontgomery(coef[0]), 32),
        ...utils$3.bigInt2BytesLE(toMontgomery(coef[1]), 32)
      ]);
      if (n2 % 2 == 1) {
        f3.addCode(c5.call(f1mPrefix + "_copy", Xc0, Rc0), c5.call(f1mPrefix + "_neg", Xc1, Rc1), c5.call(f2mPrefix + "_mul", R, c5.i32_const(pCoef), R));
      } else {
        f3.addCode(c5.call(f2mPrefix + "_mul", X, c5.i32_const(pCoef), R));
      }
    }
    function mul22(a3, b3) {
      const ac0 = BigInteger(a3[0]);
      const ac1 = BigInteger(a3[1]);
      const bc0 = BigInteger(b3[0]);
      const bc1 = BigInteger(b3[1]);
      const res = [
        ac0.times(bc0).minus(ac1.times(bc1)).mod(q),
        ac0.times(bc1).add(ac1.times(bc0)).mod(q)
      ];
      if (res[0].isNegative())
        res[0] = res[0].add(q);
      return res;
    }
  }
  function buildFinalExponentiationFirstChunk() {
    const f3 = module.addFunction(prefix + "__finalExponentiationFirstChunk");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const elt = c5.getLocal("x");
    const eltC0 = elt;
    const eltC1 = c5.i32_add(elt, c5.i32_const(n8 * 6));
    const r4 = c5.getLocal("r");
    const pA = module.alloc(ftsize);
    const A = c5.i32_const(pA);
    const Ac0 = A;
    const Ac1 = c5.i32_const(pA + n8 * 6);
    const B = c5.i32_const(module.alloc(ftsize));
    const C3 = c5.i32_const(module.alloc(ftsize));
    const D2 = c5.i32_const(module.alloc(ftsize));
    f3.addCode(c5.call(f6mPrefix + "_copy", eltC0, Ac0), c5.call(f6mPrefix + "_neg", eltC1, Ac1), c5.call(ftmPrefix + "_inverse", elt, B), c5.call(ftmPrefix + "_mul", A, B, C3), c5.call(prefix + "__frobeniusMap2", C3, D2), c5.call(ftmPrefix + "_mul", C3, D2, r4));
  }
  function buildCyclotomicSquare() {
    const f3 = module.addFunction(prefix + "__cyclotomicSquare");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x4 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f2size));
    const x3 = c5.i32_add(c5.getLocal("x"), c5.i32_const(2 * f2size));
    const x22 = c5.i32_add(c5.getLocal("x"), c5.i32_const(3 * f2size));
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(4 * f2size));
    const x5 = c5.i32_add(c5.getLocal("x"), c5.i32_const(5 * f2size));
    const r0 = c5.getLocal("r");
    const r4 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f2size));
    const r32 = c5.i32_add(c5.getLocal("r"), c5.i32_const(2 * f2size));
    const r22 = c5.i32_add(c5.getLocal("r"), c5.i32_const(3 * f2size));
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(4 * f2size));
    const r5 = c5.i32_add(c5.getLocal("r"), c5.i32_const(5 * f2size));
    const t0 = c5.i32_const(module.alloc(f2size));
    const t1 = c5.i32_const(module.alloc(f2size));
    const t22 = c5.i32_const(module.alloc(f2size));
    const t3 = c5.i32_const(module.alloc(f2size));
    const t4 = c5.i32_const(module.alloc(f2size));
    const t5 = c5.i32_const(module.alloc(f2size));
    const tmp = c5.i32_const(module.alloc(f2size));
    const AUX = c5.i32_const(module.alloc(f2size));
    f3.addCode(c5.call(f2mPrefix + "_mul", x0, x1, tmp), c5.call(f2mPrefix + "_mul", x1, c5.i32_const(pNonResidueF6), t0), c5.call(f2mPrefix + "_add", x0, t0, t0), c5.call(f2mPrefix + "_add", x0, x1, AUX), c5.call(f2mPrefix + "_mul", AUX, t0, t0), c5.call(f2mPrefix + "_mul", c5.i32_const(pNonResidueF6), tmp, AUX), c5.call(f2mPrefix + "_add", tmp, AUX, AUX), c5.call(f2mPrefix + "_sub", t0, AUX, t0), c5.call(f2mPrefix + "_add", tmp, tmp, t1), c5.call(f2mPrefix + "_mul", x22, x3, tmp), c5.call(f2mPrefix + "_mul", x3, c5.i32_const(pNonResidueF6), t22), c5.call(f2mPrefix + "_add", x22, t22, t22), c5.call(f2mPrefix + "_add", x22, x3, AUX), c5.call(f2mPrefix + "_mul", AUX, t22, t22), c5.call(f2mPrefix + "_mul", c5.i32_const(pNonResidueF6), tmp, AUX), c5.call(f2mPrefix + "_add", tmp, AUX, AUX), c5.call(f2mPrefix + "_sub", t22, AUX, t22), c5.call(f2mPrefix + "_add", tmp, tmp, t3), c5.call(f2mPrefix + "_mul", x4, x5, tmp), c5.call(f2mPrefix + "_mul", x5, c5.i32_const(pNonResidueF6), t4), c5.call(f2mPrefix + "_add", x4, t4, t4), c5.call(f2mPrefix + "_add", x4, x5, AUX), c5.call(f2mPrefix + "_mul", AUX, t4, t4), c5.call(f2mPrefix + "_mul", c5.i32_const(pNonResidueF6), tmp, AUX), c5.call(f2mPrefix + "_add", tmp, AUX, AUX), c5.call(f2mPrefix + "_sub", t4, AUX, t4), c5.call(f2mPrefix + "_add", tmp, tmp, t5), c5.call(f2mPrefix + "_sub", t0, x0, r0), c5.call(f2mPrefix + "_add", r0, r0, r0), c5.call(f2mPrefix + "_add", t0, r0, r0), c5.call(f2mPrefix + "_add", t1, x1, r1), c5.call(f2mPrefix + "_add", r1, r1, r1), c5.call(f2mPrefix + "_add", t1, r1, r1), c5.call(f2mPrefix + "_mul", t5, c5.i32_const(pAltBn128Twist), AUX), c5.call(f2mPrefix + "_add", AUX, x22, r22), c5.call(f2mPrefix + "_add", r22, r22, r22), c5.call(f2mPrefix + "_add", AUX, r22, r22), c5.call(f2mPrefix + "_sub", t4, x3, r32), c5.call(f2mPrefix + "_add", r32, r32, r32), c5.call(f2mPrefix + "_add", t4, r32, r32), c5.call(f2mPrefix + "_sub", t22, x4, r4), c5.call(f2mPrefix + "_add", r4, r4, r4), c5.call(f2mPrefix + "_add", t22, r4, r4), c5.call(f2mPrefix + "_add", t3, x5, r5), c5.call(f2mPrefix + "_add", r5, r5, r5), c5.call(f2mPrefix + "_add", t3, r5, r5));
  }
  function buildCyclotomicExp(exponent, fnName) {
    const exponentNafBytes = naf2(exponent).map((b3) => b3 == -1 ? 255 : b3);
    const pExponentNafBytes = module.alloc(exponentNafBytes);
    module.alloc(utils$3.bigInt2BytesLE(exponent, 32));
    const f3 = module.addFunction(prefix + "__cyclotomicExp_" + fnName);
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    f3.addLocal("bit", "i32");
    f3.addLocal("i", "i32");
    const c5 = f3.getCodeBuilder();
    const x3 = c5.getLocal("x");
    const res = c5.getLocal("r");
    const inverse = c5.i32_const(module.alloc(ftsize));
    f3.addCode(c5.call(ftmPrefix + "_conjugate", x3, inverse), c5.call(ftmPrefix + "_one", res), c5.if(c5.teeLocal("bit", c5.i32_load8_s(c5.i32_const(exponentNafBytes.length - 1), pExponentNafBytes)), c5.if(c5.i32_eq(c5.getLocal("bit"), c5.i32_const(1)), c5.call(ftmPrefix + "_mul", res, x3, res), c5.call(ftmPrefix + "_mul", res, inverse, res))), c5.setLocal("i", c5.i32_const(exponentNafBytes.length - 2)), c5.block(c5.loop(c5.call(prefix + "__cyclotomicSquare", res, res), c5.if(c5.teeLocal("bit", c5.i32_load8_s(c5.getLocal("i"), pExponentNafBytes)), c5.if(c5.i32_eq(c5.getLocal("bit"), c5.i32_const(1)), c5.call(ftmPrefix + "_mul", res, x3, res), c5.call(ftmPrefix + "_mul", res, inverse, res))), c5.br_if(1, c5.i32_eqz(c5.getLocal("i"))), c5.setLocal("i", c5.i32_sub(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))));
  }
  function buildFinalExponentiationLastChunk() {
    buildCyclotomicSquare();
    buildCyclotomicExp(finalExpZ, "w0");
    const f3 = module.addFunction(prefix + "__finalExponentiationLastChunk");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const elt = c5.getLocal("x");
    const result = c5.getLocal("r");
    const A = c5.i32_const(module.alloc(ftsize));
    const B = c5.i32_const(module.alloc(ftsize));
    const C3 = c5.i32_const(module.alloc(ftsize));
    const D2 = c5.i32_const(module.alloc(ftsize));
    const E = c5.i32_const(module.alloc(ftsize));
    const F5 = c5.i32_const(module.alloc(ftsize));
    const G = c5.i32_const(module.alloc(ftsize));
    const H2 = c5.i32_const(module.alloc(ftsize));
    const I2 = c5.i32_const(module.alloc(ftsize));
    const J = c5.i32_const(module.alloc(ftsize));
    const K = c5.i32_const(module.alloc(ftsize));
    const L2 = c5.i32_const(module.alloc(ftsize));
    const M3 = c5.i32_const(module.alloc(ftsize));
    const N3 = c5.i32_const(module.alloc(ftsize));
    const O2 = c5.i32_const(module.alloc(ftsize));
    const P2 = c5.i32_const(module.alloc(ftsize));
    const Q = c5.i32_const(module.alloc(ftsize));
    const R = c5.i32_const(module.alloc(ftsize));
    const S2 = c5.i32_const(module.alloc(ftsize));
    const T2 = c5.i32_const(module.alloc(ftsize));
    const U = c5.i32_const(module.alloc(ftsize));
    f3.addCode(c5.call(prefix + "__cyclotomicExp_w0", elt, A), c5.call(ftmPrefix + "_conjugate", A, A), c5.call(prefix + "__cyclotomicSquare", A, B), c5.call(prefix + "__cyclotomicSquare", B, C3), c5.call(ftmPrefix + "_mul", C3, B, D2), c5.call(prefix + "__cyclotomicExp_w0", D2, E), c5.call(ftmPrefix + "_conjugate", E, E), c5.call(prefix + "__cyclotomicSquare", E, F5), c5.call(prefix + "__cyclotomicExp_w0", F5, G), c5.call(ftmPrefix + "_conjugate", G, G), c5.call(ftmPrefix + "_conjugate", D2, H2), c5.call(ftmPrefix + "_conjugate", G, I2), c5.call(ftmPrefix + "_mul", I2, E, J), c5.call(ftmPrefix + "_mul", J, H2, K), c5.call(ftmPrefix + "_mul", K, B, L2), c5.call(ftmPrefix + "_mul", K, E, M3), c5.call(ftmPrefix + "_mul", M3, elt, N3), c5.call(prefix + "__frobeniusMap1", L2, O2), c5.call(ftmPrefix + "_mul", O2, N3, P2), c5.call(prefix + "__frobeniusMap2", K, Q), c5.call(ftmPrefix + "_mul", Q, P2, R), c5.call(ftmPrefix + "_conjugate", elt, S2), c5.call(ftmPrefix + "_mul", S2, L2, T2), c5.call(prefix + "__frobeniusMap3", T2, U), c5.call(ftmPrefix + "_mul", U, R, result));
  }
  function buildFinalExponentiation() {
    buildFinalExponentiationFirstChunk();
    buildFinalExponentiationLastChunk();
    const f3 = module.addFunction(prefix + "_finalExponentiation");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const elt = c5.getLocal("x");
    const result = c5.getLocal("r");
    const eltToFirstChunk = c5.i32_const(module.alloc(ftsize));
    f3.addCode(c5.call(prefix + "__finalExponentiationFirstChunk", elt, eltToFirstChunk), c5.call(prefix + "__finalExponentiationLastChunk", eltToFirstChunk, result));
  }
  function buildFinalExponentiationOld() {
    const f3 = module.addFunction(prefix + "_finalExponentiationOld");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const exponent = BigInteger("552484233613224096312617126783173147097382103762957654188882734314196910839907541213974502761540629817009608548654680343627701153829446747810907373256841551006201639677726139946029199968412598804882391702273019083653272047566316584365559776493027495458238373902875937659943504873220554161550525926302303331747463515644711876653177129578303191095900909191624817826566688241804408081892785725967931714097716709526092261278071952560171111444072049229123565057483750161460024353346284167282452756217662335528813519139808291170539072125381230815729071544861602750936964829313608137325426383735122175229541155376346436093930287402089517426973178917569713384748081827255472576937471496195752727188261435633271238710131736096299798168852925540549342330775279877006784354801422249722573783561685179618816480037695005515426162362431072245638324744480");
    const pExponent = module.alloc(utils$3.bigInt2BytesLE(exponent, 352));
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(ftmPrefix + "_exp", c5.getLocal("x"), c5.i32_const(pExponent), c5.i32_const(352), c5.getLocal("r")));
  }
  const pPreP = module.alloc(prePSize);
  const pPreQ = module.alloc(preQSize);
  function buildPairingEquation(nPairings) {
    const f3 = module.addFunction(prefix + "_pairingEq" + nPairings);
    for (let i3 = 0; i3 < nPairings; i3++) {
      f3.addParam("p_" + i3, "i32");
      f3.addParam("q_" + i3, "i32");
    }
    f3.addParam("c", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const resT = c5.i32_const(module.alloc(ftsize));
    const auxT = c5.i32_const(module.alloc(ftsize));
    f3.addCode(c5.call(ftmPrefix + "_one", resT));
    for (let i3 = 0; i3 < nPairings; i3++) {
      f3.addCode(c5.call(prefix + "_prepareG1", c5.getLocal("p_" + i3), c5.i32_const(pPreP)));
      f3.addCode(c5.call(prefix + "_prepareG2", c5.getLocal("q_" + i3), c5.i32_const(pPreQ)));
      f3.addCode(c5.call(prefix + "_millerLoop", c5.i32_const(pPreP), c5.i32_const(pPreQ), auxT));
      f3.addCode(c5.call(ftmPrefix + "_mul", resT, auxT, resT));
    }
    f3.addCode(c5.call(prefix + "_finalExponentiation", resT, resT));
    f3.addCode(c5.call(ftmPrefix + "_eq", resT, c5.getLocal("c")));
  }
  function buildPairing2() {
    const f3 = module.addFunction(prefix + "_pairing");
    f3.addParam("p", "i32");
    f3.addParam("q", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const resT = c5.i32_const(module.alloc(ftsize));
    f3.addCode(c5.call(prefix + "_prepareG1", c5.getLocal("p"), c5.i32_const(pPreP)));
    f3.addCode(c5.call(prefix + "_prepareG2", c5.getLocal("q"), c5.i32_const(pPreQ)));
    f3.addCode(c5.call(prefix + "_millerLoop", c5.i32_const(pPreP), c5.i32_const(pPreQ), resT));
    f3.addCode(c5.call(prefix + "_finalExponentiation", resT, c5.getLocal("r")));
  }
  buildPrepAddStep();
  buildPrepDoubleStep();
  buildPrepareG1();
  buildPrepareG2();
  buildMulBy024();
  buildMulBy024Old();
  buildMillerLoop();
  for (let i3 = 0; i3 < 10; i3++) {
    buildFrobeniusMap(i3);
    module.exportFunction(prefix + "__frobeniusMap" + i3);
  }
  buildFinalExponentiationOld();
  buildFinalExponentiation();
  for (let i3 = 1; i3 <= 5; i3++) {
    buildPairingEquation(i3);
    module.exportFunction(prefix + "_pairingEq" + i3);
  }
  buildPairing2();
  module.exportFunction(prefix + "_pairing");
  module.exportFunction(prefix + "_prepareG1");
  module.exportFunction(prefix + "_prepareG2");
  module.exportFunction(prefix + "_millerLoop");
  module.exportFunction(prefix + "_finalExponentiation");
  module.exportFunction(prefix + "_finalExponentiationOld");
  module.exportFunction(prefix + "__mulBy024");
  module.exportFunction(prefix + "__mulBy024Old");
  module.exportFunction(prefix + "__cyclotomicSquare");
  module.exportFunction(prefix + "__cyclotomicExp_w0");
};
var build_bls12381 = function buildBLS12381(module, _prefix) {
  const prefix = _prefix || "bls12381";
  if (module.modules[prefix])
    return prefix;
  const q = BigInteger("1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab", 16);
  const r3 = BigInteger("73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001", 16);
  const n64q = Math.floor((q.minus(1).bitLength() - 1) / 64) + 1;
  const n8q = n64q * 8;
  const f1size = n8q;
  const f2size = f1size * 2;
  const ftsize = f1size * 12;
  const n64r = Math.floor((r3.minus(1).bitLength() - 1) / 64) + 1;
  const n8r = n64r * 8;
  const frsize = n8r;
  const pr = module.alloc(utils$3.bigInt2BytesLE(r3, frsize));
  const f1mPrefix = build_f1m(module, q, "f1m", "intq");
  build_f1(module, r3, "fr", "frm", "intr");
  const pG1b = module.alloc(utils$3.bigInt2BytesLE(toMontgomery(BigInteger(4)), f1size));
  const g1mPrefix = build_curve_jacobian_a0(module, "g1m", "f1m", pG1b);
  build_fft(module, "frm", "frm", "frm", "frm_mul");
  build_pol(module, "pol", "frm");
  build_qap(module, "qap", "frm");
  const f2mPrefix = build_f2m(module, "f1m_neg", "f2m", "f1m");
  const pG2b = module.alloc([
    ...utils$3.bigInt2BytesLE(toMontgomery(BigInteger("4")), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(BigInteger("4")), f1size)
  ]);
  const g2mPrefix = build_curve_jacobian_a0(module, "g2m", "f2m", pG2b);
  function buildGTimesFr(fnName, opMul) {
    const f3 = module.addFunction(fnName);
    f3.addParam("pG", "i32");
    f3.addParam("pFr", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    const AUX = c5.i32_const(module.alloc(n8r));
    f3.addCode(c5.call("frm_fromMontgomery", c5.getLocal("pFr"), AUX), c5.call(opMul, c5.getLocal("pG"), AUX, c5.i32_const(n8r), c5.getLocal("pr")));
    module.exportFunction(fnName);
  }
  buildGTimesFr("g1m_timesFr", "g1m_timesScalar");
  build_fft(module, "g1m", "g1m", "frm", "g1m_timesFr");
  buildGTimesFr("g2m_timesFr", "g2m_timesScalar");
  build_fft(module, "g2m", "g2m", "frm", "g2m_timesFr");
  buildGTimesFr("g1m_timesFrAffine", "g1m_timesScalarAffine");
  buildGTimesFr("g2m_timesFrAffine", "g2m_timesScalarAffine");
  build_applykey(module, "frm_batchApplyKey", "fmr", "frm", n8r, n8r, n8r, "frm_mul");
  build_applykey(module, "g1m_batchApplyKey", "g1m", "frm", n8q * 3, n8q * 3, n8r, "g1m_timesFr");
  build_applykey(module, "g1m_batchApplyKeyMixed", "g1m", "frm", n8q * 2, n8q * 3, n8r, "g1m_timesFrAffine");
  build_applykey(module, "g2m_batchApplyKey", "g2m", "frm", n8q * 2 * 3, n8q * 3 * 2, n8r, "g2m_timesFr");
  build_applykey(module, "g2m_batchApplyKeyMixed", "g2m", "frm", n8q * 2 * 2, n8q * 3 * 2, n8r, "g2m_timesFrAffine");
  function toMontgomery(a3) {
    return BigInteger(a3).times(BigInteger.one.shiftLeft(f1size * 8)).mod(q);
  }
  const G1gen = [
    BigInteger("3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507"),
    BigInteger("1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569"),
    BigInteger.one
  ];
  const pG1gen = module.alloc([
    ...utils$3.bigInt2BytesLE(toMontgomery(G1gen[0]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G1gen[1]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G1gen[2]), f1size)
  ]);
  const G1zero = [
    BigInteger.zero,
    BigInteger.one,
    BigInteger.zero
  ];
  const pG1zero = module.alloc([
    ...utils$3.bigInt2BytesLE(toMontgomery(G1zero[0]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G1zero[1]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G1zero[2]), f1size)
  ]);
  const G2gen = [
    [
      BigInteger("352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160"),
      BigInteger("3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758")
    ],
    [
      BigInteger("1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905"),
      BigInteger("927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582")
    ],
    [
      BigInteger.one,
      BigInteger.zero
    ]
  ];
  const pG2gen = module.alloc([
    ...utils$3.bigInt2BytesLE(toMontgomery(G2gen[0][0]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2gen[0][1]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2gen[1][0]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2gen[1][1]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2gen[2][0]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2gen[2][1]), f1size)
  ]);
  const G2zero = [
    [
      BigInteger.zero,
      BigInteger.zero
    ],
    [
      BigInteger.one,
      BigInteger.zero
    ],
    [
      BigInteger.zero,
      BigInteger.zero
    ]
  ];
  const pG2zero = module.alloc([
    ...utils$3.bigInt2BytesLE(toMontgomery(G2zero[0][0]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2zero[0][1]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2zero[1][0]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2zero[1][1]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2zero[2][0]), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(G2zero[2][1]), f1size)
  ]);
  const pOneT = module.alloc([
    ...utils$3.bigInt2BytesLE(toMontgomery(1), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(0), f1size)
  ]);
  module.alloc([
    ...utils$3.bigInt2BytesLE(toMontgomery(BigInteger(2).modInv(q)), f1size),
    ...utils$3.bigInt2BytesLE(BigInteger(0), f1size)
  ]);
  const pBls12381Twist = module.alloc([
    ...utils$3.bigInt2BytesLE(toMontgomery(1), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery(1), f1size)
  ]);
  module.alloc([
    ...utils$3.bigInt2BytesLE(toMontgomery("4"), f1size),
    ...utils$3.bigInt2BytesLE(toMontgomery("4"), f1size)
  ]);
  function build_mulNR2() {
    const f3 = module.addFunction(f2mPrefix + "_mulNR");
    f3.addParam("x", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    const x0c = c5.i32_const(module.alloc(f1size));
    const x0 = c5.getLocal("x");
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f1size));
    const r0 = c5.getLocal("pr");
    const r1 = c5.i32_add(c5.getLocal("pr"), c5.i32_const(f1size));
    f3.addCode(c5.call(f1mPrefix + "_copy", x0, x0c), c5.call(f1mPrefix + "_sub", x0, x1, r0), c5.call(f1mPrefix + "_add", x0c, x1, r1));
  }
  build_mulNR2();
  const f6mPrefix = build_f3m(module, f2mPrefix + "_mulNR", "f6m", "f2m");
  function build_mulNR6() {
    const f3 = module.addFunction(f6mPrefix + "_mulNR");
    f3.addParam("x", "i32");
    f3.addParam("pr", "i32");
    const c5 = f3.getCodeBuilder();
    const c0copy = c5.i32_const(module.alloc(f1size * 2));
    f3.addCode(c5.call(f2mPrefix + "_copy", c5.getLocal("x"), c0copy), c5.call(f2mPrefix + "_mulNR", c5.i32_add(c5.getLocal("x"), c5.i32_const(n8q * 4)), c5.getLocal("pr")), c5.call(f2mPrefix + "_copy", c5.i32_add(c5.getLocal("x"), c5.i32_const(n8q * 2)), c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8q * 4))), c5.call(f2mPrefix + "_copy", c0copy, c5.i32_add(c5.getLocal("pr"), c5.i32_const(n8q * 2))));
  }
  build_mulNR6();
  const ftmPrefix = build_f2m(module, f6mPrefix + "_mulNR", "ftm", f6mPrefix);
  const ateLoopCount = BigInteger("d201000000010000", 16);
  const ateLoopBitBytes = bits2(ateLoopCount);
  const pAteLoopBitBytes = module.alloc(ateLoopBitBytes);
  const ateCoefSize = 3 * f2size;
  const ateNDblCoefs = ateLoopBitBytes.length - 1;
  const ateNAddCoefs = ateLoopBitBytes.reduce((acc, b3) => acc + (b3 != 0 ? 1 : 0), 0);
  const ateNCoefs = ateNAddCoefs + ateNDblCoefs + 1;
  const prePSize = 3 * 2 * n8q;
  const preQSize = 3 * n8q * 2 + ateNCoefs * ateCoefSize;
  const finalExpIsNegative = true;
  const finalExpZ = BigInteger("15132376222941642752");
  module.modules[prefix] = {
    n64q,
    n64r,
    n8q,
    n8r,
    pG1gen,
    pG1zero,
    pG1b,
    pG2gen,
    pG2zero,
    pG2b,
    pq: module.modules["f1m"].pq,
    pr,
    pOneT,
    r: r3,
    q,
    prePSize,
    preQSize
  };
  function naf2(n2) {
    let E = n2;
    const res = [];
    while (E.gt(BigInteger.zero)) {
      if (E.isOdd()) {
        const z2 = 2 - E.mod(4).toJSNumber();
        res.push(z2);
        E = E.minus(z2);
      } else {
        res.push(0);
      }
      E = E.shiftRight(1);
    }
    return res;
  }
  function bits2(n2) {
    let E = n2;
    const res = [];
    while (E.gt(BigInteger.zero)) {
      if (E.isOdd()) {
        res.push(1);
      } else {
        res.push(0);
      }
      E = E.shiftRight(1);
    }
    return res;
  }
  function buildPrepareG1() {
    const f3 = module.addFunction(prefix + "_prepareG1");
    f3.addParam("pP", "i32");
    f3.addParam("ppreP", "i32");
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(g1mPrefix + "_normalize", c5.getLocal("pP"), c5.getLocal("ppreP")));
  }
  function buildPrepDoubleStep() {
    const f3 = module.addFunction(prefix + "_prepDblStep");
    f3.addParam("R", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const Rx = c5.getLocal("R");
    const Ry = c5.i32_add(c5.getLocal("R"), c5.i32_const(2 * n8q));
    const Rz = c5.i32_add(c5.getLocal("R"), c5.i32_const(4 * n8q));
    const t0 = c5.getLocal("r");
    const t3 = c5.i32_add(c5.getLocal("r"), c5.i32_const(2 * n8q));
    const t6 = c5.i32_add(c5.getLocal("r"), c5.i32_const(4 * n8q));
    const zsquared = c5.i32_const(module.alloc(f2size));
    const t1 = c5.i32_const(module.alloc(f2size));
    const t22 = c5.i32_const(module.alloc(f2size));
    const t4 = c5.i32_const(module.alloc(f2size));
    const t5 = c5.i32_const(module.alloc(f2size));
    f3.addCode(c5.call(f2mPrefix + "_square", Rx, t0), c5.call(f2mPrefix + "_square", Ry, t1), c5.call(f2mPrefix + "_square", t1, t22), c5.call(f2mPrefix + "_add", t1, Rx, t3), c5.call(f2mPrefix + "_square", t3, t3), c5.call(f2mPrefix + "_sub", t3, t0, t3), c5.call(f2mPrefix + "_sub", t3, t22, t3), c5.call(f2mPrefix + "_add", t3, t3, t3), c5.call(f2mPrefix + "_add", t0, t0, t4), c5.call(f2mPrefix + "_add", t4, t0, t4), c5.call(f2mPrefix + "_add", Rx, t4, t6), c5.call(f2mPrefix + "_square", t4, t5), c5.call(f2mPrefix + "_square", Rz, zsquared), c5.call(f2mPrefix + "_sub", t5, t3, Rx), c5.call(f2mPrefix + "_sub", Rx, t3, Rx), c5.call(f2mPrefix + "_add", Rz, Ry, Rz), c5.call(f2mPrefix + "_square", Rz, Rz), c5.call(f2mPrefix + "_sub", Rz, t1, Rz), c5.call(f2mPrefix + "_sub", Rz, zsquared, Rz), c5.call(f2mPrefix + "_sub", t3, Rx, Ry), c5.call(f2mPrefix + "_mul", Ry, t4, Ry), c5.call(f2mPrefix + "_add", t22, t22, t22), c5.call(f2mPrefix + "_add", t22, t22, t22), c5.call(f2mPrefix + "_add", t22, t22, t22), c5.call(f2mPrefix + "_sub", Ry, t22, Ry), c5.call(f2mPrefix + "_mul", t4, zsquared, t3), c5.call(f2mPrefix + "_add", t3, t3, t3), c5.call(f2mPrefix + "_neg", t3, t3), c5.call(f2mPrefix + "_square", t6, t6), c5.call(f2mPrefix + "_sub", t6, t0, t6), c5.call(f2mPrefix + "_sub", t6, t5, t6), c5.call(f2mPrefix + "_add", t1, t1, t1), c5.call(f2mPrefix + "_add", t1, t1, t1), c5.call(f2mPrefix + "_sub", t6, t1, t6), c5.call(f2mPrefix + "_mul", Rz, zsquared, t0), c5.call(f2mPrefix + "_add", t0, t0, t0));
  }
  function buildPrepAddStep() {
    const f3 = module.addFunction(prefix + "_prepAddStep");
    f3.addParam("R", "i32");
    f3.addParam("Q", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const Rx = c5.getLocal("R");
    const Ry = c5.i32_add(c5.getLocal("R"), c5.i32_const(2 * n8q));
    const Rz = c5.i32_add(c5.getLocal("R"), c5.i32_const(4 * n8q));
    const Qx = c5.getLocal("Q");
    const Qy = c5.i32_add(c5.getLocal("Q"), c5.i32_const(2 * n8q));
    const t10 = c5.getLocal("r");
    const t1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(2 * n8q));
    const t9 = c5.i32_add(c5.getLocal("r"), c5.i32_const(4 * n8q));
    const zsquared = c5.i32_const(module.alloc(f2size));
    const ysquared = c5.i32_const(module.alloc(f2size));
    const ztsquared = c5.i32_const(module.alloc(f2size));
    const t0 = c5.i32_const(module.alloc(f2size));
    const t22 = c5.i32_const(module.alloc(f2size));
    const t3 = c5.i32_const(module.alloc(f2size));
    const t4 = c5.i32_const(module.alloc(f2size));
    const t5 = c5.i32_const(module.alloc(f2size));
    const t6 = c5.i32_const(module.alloc(f2size));
    const t7 = c5.i32_const(module.alloc(f2size));
    const t8 = c5.i32_const(module.alloc(f2size));
    f3.addCode(c5.call(f2mPrefix + "_square", Rz, zsquared), c5.call(f2mPrefix + "_square", Qy, ysquared), c5.call(f2mPrefix + "_mul", zsquared, Qx, t0), c5.call(f2mPrefix + "_add", Qy, Rz, t1), c5.call(f2mPrefix + "_square", t1, t1), c5.call(f2mPrefix + "_sub", t1, ysquared, t1), c5.call(f2mPrefix + "_sub", t1, zsquared, t1), c5.call(f2mPrefix + "_mul", t1, zsquared, t1), c5.call(f2mPrefix + "_sub", t0, Rx, t22), c5.call(f2mPrefix + "_square", t22, t3), c5.call(f2mPrefix + "_add", t3, t3, t4), c5.call(f2mPrefix + "_add", t4, t4, t4), c5.call(f2mPrefix + "_mul", t4, t22, t5), c5.call(f2mPrefix + "_sub", t1, Ry, t6), c5.call(f2mPrefix + "_sub", t6, Ry, t6), c5.call(f2mPrefix + "_mul", t6, Qx, t9), c5.call(f2mPrefix + "_mul", t4, Rx, t7), c5.call(f2mPrefix + "_square", t6, Rx), c5.call(f2mPrefix + "_sub", Rx, t5, Rx), c5.call(f2mPrefix + "_sub", Rx, t7, Rx), c5.call(f2mPrefix + "_sub", Rx, t7, Rx), c5.call(f2mPrefix + "_add", Rz, t22, Rz), c5.call(f2mPrefix + "_square", Rz, Rz), c5.call(f2mPrefix + "_sub", Rz, zsquared, Rz), c5.call(f2mPrefix + "_sub", Rz, t3, Rz), c5.call(f2mPrefix + "_add", Qy, Rz, t10), c5.call(f2mPrefix + "_sub", t7, Rx, t8), c5.call(f2mPrefix + "_mul", t8, t6, t8), c5.call(f2mPrefix + "_mul", Ry, t5, t0), c5.call(f2mPrefix + "_add", t0, t0, t0), c5.call(f2mPrefix + "_sub", t8, t0, Ry), c5.call(f2mPrefix + "_square", t10, t10), c5.call(f2mPrefix + "_sub", t10, ysquared, t10), c5.call(f2mPrefix + "_square", Rz, ztsquared), c5.call(f2mPrefix + "_sub", t10, ztsquared, t10), c5.call(f2mPrefix + "_add", t9, t9, t9), c5.call(f2mPrefix + "_sub", t9, t10, t9), c5.call(f2mPrefix + "_add", Rz, Rz, t10), c5.call(f2mPrefix + "_neg", t6, t6), c5.call(f2mPrefix + "_add", t6, t6, t1));
  }
  function buildPrepareG2() {
    const f3 = module.addFunction(prefix + "_prepareG2");
    f3.addParam("pQ", "i32");
    f3.addParam("ppreQ", "i32");
    f3.addLocal("pCoef", "i32");
    f3.addLocal("i", "i32");
    const c5 = f3.getCodeBuilder();
    const Q = c5.getLocal("pQ");
    const pR = module.alloc(f2size * 3);
    const R = c5.i32_const(pR);
    const base2 = c5.getLocal("ppreQ");
    f3.addCode(c5.call(g2mPrefix + "_normalize", Q, base2), c5.if(c5.call(g2mPrefix + "_isZero", base2), c5.ret([])), c5.call(g2mPrefix + "_copy", base2, R), c5.setLocal("pCoef", c5.i32_add(c5.getLocal("ppreQ"), c5.i32_const(f2size * 3))));
    f3.addCode(c5.setLocal("i", c5.i32_const(ateLoopBitBytes.length - 2)), c5.block(c5.loop(c5.call(prefix + "_prepDblStep", R, c5.getLocal("pCoef")), c5.setLocal("pCoef", c5.i32_add(c5.getLocal("pCoef"), c5.i32_const(ateCoefSize))), c5.if(c5.i32_load8_s(c5.getLocal("i"), pAteLoopBitBytes), [
      ...c5.call(prefix + "_prepAddStep", R, base2, c5.getLocal("pCoef")),
      ...c5.setLocal("pCoef", c5.i32_add(c5.getLocal("pCoef"), c5.i32_const(ateCoefSize)))
    ]), c5.br_if(1, c5.i32_eqz(c5.getLocal("i"))), c5.setLocal("i", c5.i32_sub(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))));
  }
  function buildF6Mul1() {
    const f3 = module.addFunction(f6mPrefix + "_mul1");
    f3.addParam("pA", "i32");
    f3.addParam("pC1", "i32");
    f3.addParam("pR", "i32");
    const c5 = f3.getCodeBuilder();
    const A_c0 = c5.getLocal("pA");
    const A_c1 = c5.i32_add(c5.getLocal("pA"), c5.i32_const(f1size * 2));
    const A_c2 = c5.i32_add(c5.getLocal("pA"), c5.i32_const(f1size * 4));
    const c1 = c5.getLocal("pC1");
    const t1 = c5.getLocal("pR");
    const t22 = c5.i32_add(c5.getLocal("pR"), c5.i32_const(f1size * 2));
    const b_b = c5.i32_add(c5.getLocal("pR"), c5.i32_const(f1size * 4));
    const Ac0_Ac1 = c5.i32_const(module.alloc(f1size * 2));
    const Ac1_Ac2 = c5.i32_const(module.alloc(f1size * 2));
    f3.addCode(c5.call(f2mPrefix + "_add", A_c0, A_c1, Ac0_Ac1), c5.call(f2mPrefix + "_add", A_c1, A_c2, Ac1_Ac2), c5.call(f2mPrefix + "_mul", A_c1, c1, b_b), c5.call(f2mPrefix + "_mul", Ac1_Ac2, c1, t1), c5.call(f2mPrefix + "_sub", t1, b_b, t1), c5.call(f2mPrefix + "_mulNR", t1, t1), c5.call(f2mPrefix + "_mul", Ac0_Ac1, c1, t22), c5.call(f2mPrefix + "_sub", t22, b_b, t22));
  }
  buildF6Mul1();
  function buildF6Mul01() {
    const f3 = module.addFunction(f6mPrefix + "_mul01");
    f3.addParam("pA", "i32");
    f3.addParam("pC0", "i32");
    f3.addParam("pC1", "i32");
    f3.addParam("pR", "i32");
    const c5 = f3.getCodeBuilder();
    const A_c0 = c5.getLocal("pA");
    const A_c1 = c5.i32_add(c5.getLocal("pA"), c5.i32_const(f1size * 2));
    const A_c2 = c5.i32_add(c5.getLocal("pA"), c5.i32_const(f1size * 4));
    const c0 = c5.getLocal("pC0");
    const c1 = c5.getLocal("pC1");
    const t1 = c5.getLocal("pR");
    const t22 = c5.i32_add(c5.getLocal("pR"), c5.i32_const(f1size * 2));
    const t3 = c5.i32_add(c5.getLocal("pR"), c5.i32_const(f1size * 4));
    const a_a = c5.i32_const(module.alloc(f1size * 2));
    const b_b = c5.i32_const(module.alloc(f1size * 2));
    const Ac0_Ac1 = c5.i32_const(module.alloc(f1size * 2));
    const Ac0_Ac2 = c5.i32_const(module.alloc(f1size * 2));
    f3.addCode(c5.call(f2mPrefix + "_mul", A_c0, c0, a_a), c5.call(f2mPrefix + "_mul", A_c1, c1, b_b), c5.call(f2mPrefix + "_add", A_c0, A_c1, Ac0_Ac1), c5.call(f2mPrefix + "_add", A_c0, A_c2, Ac0_Ac2), c5.call(f2mPrefix + "_add", A_c1, A_c2, t1), c5.call(f2mPrefix + "_mul", t1, c1, t1), c5.call(f2mPrefix + "_sub", t1, b_b, t1), c5.call(f2mPrefix + "_mulNR", t1, t1), c5.call(f2mPrefix + "_add", t1, a_a, t1), c5.call(f2mPrefix + "_add", c0, c1, t22), c5.call(f2mPrefix + "_mul", t22, Ac0_Ac1, t22), c5.call(f2mPrefix + "_sub", t22, a_a, t22), c5.call(f2mPrefix + "_sub", t22, b_b, t22), c5.call(f2mPrefix + "_mul", Ac0_Ac2, c0, t3), c5.call(f2mPrefix + "_sub", t3, a_a, t3), c5.call(f2mPrefix + "_add", t3, b_b, t3));
  }
  buildF6Mul01();
  function buildF12Mul014() {
    const f3 = module.addFunction(ftmPrefix + "_mul014");
    f3.addParam("pA", "i32");
    f3.addParam("pC0", "i32");
    f3.addParam("pC1", "i32");
    f3.addParam("pC4", "i32");
    f3.addParam("pR", "i32");
    const c5 = f3.getCodeBuilder();
    const A_c0 = c5.getLocal("pA");
    const A_c1 = c5.i32_add(c5.getLocal("pA"), c5.i32_const(f1size * 6));
    const c0 = c5.getLocal("pC0");
    const c1 = c5.getLocal("pC1");
    const c42 = c5.getLocal("pC4");
    const aa = c5.i32_const(module.alloc(f1size * 6));
    const bb = c5.i32_const(module.alloc(f1size * 6));
    const o3 = c5.i32_const(module.alloc(f1size * 2));
    const R_c0 = c5.getLocal("pR");
    const R_c1 = c5.i32_add(c5.getLocal("pR"), c5.i32_const(f1size * 6));
    f3.addCode(c5.call(f6mPrefix + "_mul01", A_c0, c0, c1, aa), c5.call(f6mPrefix + "_mul1", A_c1, c42, bb), c5.call(f2mPrefix + "_add", c1, c42, o3), c5.call(f6mPrefix + "_add", A_c1, A_c0, R_c1), c5.call(f6mPrefix + "_mul01", R_c1, c0, o3, R_c1), c5.call(f6mPrefix + "_sub", R_c1, aa, R_c1), c5.call(f6mPrefix + "_sub", R_c1, bb, R_c1), c5.call(f6mPrefix + "_copy", bb, R_c0), c5.call(f6mPrefix + "_mulNR", R_c0, R_c0), c5.call(f6mPrefix + "_add", R_c0, aa, R_c0));
  }
  buildF12Mul014();
  function buildELL() {
    const f3 = module.addFunction(prefix + "_ell");
    f3.addParam("pP", "i32");
    f3.addParam("pCoefs", "i32");
    f3.addParam("pF", "i32");
    const c5 = f3.getCodeBuilder();
    const Px = c5.getLocal("pP");
    const Py = c5.i32_add(c5.getLocal("pP"), c5.i32_const(n8q));
    const F5 = c5.getLocal("pF");
    const coef0_0 = c5.getLocal("pCoefs");
    const coef0_1 = c5.i32_add(c5.getLocal("pCoefs"), c5.i32_const(f1size));
    const coef1_0 = c5.i32_add(c5.getLocal("pCoefs"), c5.i32_const(f1size * 2));
    const coef1_1 = c5.i32_add(c5.getLocal("pCoefs"), c5.i32_const(f1size * 3));
    const coef2 = c5.i32_add(c5.getLocal("pCoefs"), c5.i32_const(f1size * 4));
    const pc0 = module.alloc(f1size * 2);
    const c0 = c5.i32_const(pc0);
    const c0_c0 = c5.i32_const(pc0);
    const c0_c1 = c5.i32_const(pc0 + f1size);
    const pc1 = module.alloc(f1size * 2);
    const c1 = c5.i32_const(pc1);
    const c1_c0 = c5.i32_const(pc1);
    const c1_c1 = c5.i32_const(pc1 + f1size);
    f3.addCode(c5.call(f1mPrefix + "_mul", coef0_0, Py, c0_c0), c5.call(f1mPrefix + "_mul", coef0_1, Py, c0_c1), c5.call(f1mPrefix + "_mul", coef1_0, Px, c1_c0), c5.call(f1mPrefix + "_mul", coef1_1, Px, c1_c1), c5.call(ftmPrefix + "_mul014", F5, coef2, c1, c0, F5));
  }
  buildELL();
  function buildMillerLoop() {
    const f3 = module.addFunction(prefix + "_millerLoop");
    f3.addParam("ppreP", "i32");
    f3.addParam("ppreQ", "i32");
    f3.addParam("r", "i32");
    f3.addLocal("pCoef", "i32");
    f3.addLocal("i", "i32");
    const c5 = f3.getCodeBuilder();
    const preP = c5.getLocal("ppreP");
    c5.getLocal("ppreQ");
    const coefs = c5.getLocal("pCoef");
    const F5 = c5.getLocal("r");
    f3.addCode(c5.call(ftmPrefix + "_one", F5), c5.if(c5.call(g1mPrefix + "_isZero", preP), c5.ret([])), c5.if(c5.call(g1mPrefix + "_isZero", c5.getLocal("ppreQ")), c5.ret([])), c5.setLocal("pCoef", c5.i32_add(c5.getLocal("ppreQ"), c5.i32_const(f2size * 3))), c5.setLocal("i", c5.i32_const(ateLoopBitBytes.length - 2)), c5.block(c5.loop(c5.call(prefix + "_ell", preP, coefs, F5), c5.setLocal("pCoef", c5.i32_add(c5.getLocal("pCoef"), c5.i32_const(ateCoefSize))), c5.if(c5.i32_load8_s(c5.getLocal("i"), pAteLoopBitBytes), [
      ...c5.call(prefix + "_ell", preP, coefs, F5),
      ...c5.setLocal("pCoef", c5.i32_add(c5.getLocal("pCoef"), c5.i32_const(ateCoefSize)))
    ]), c5.call(ftmPrefix + "_square", F5, F5), c5.br_if(1, c5.i32_eq(c5.getLocal("i"), c5.i32_const(1))), c5.setLocal("i", c5.i32_sub(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))), c5.call(prefix + "_ell", preP, coefs, F5));
    {
      f3.addCode(c5.call(ftmPrefix + "_conjugate", F5, F5));
    }
  }
  function buildFrobeniusMap(n2) {
    const F12 = [
      [
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")]
      ],
      [
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("3850754370037169011952147076051364057158807420970682438676050522613628423219637725072182697113062777891589506424760"), BigInteger("151655185184498381465642749684540099398075398968325446656007613510403227271200139370504932015952886146304766135027")],
        [BigInteger("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620351"), BigInteger("0")],
        [BigInteger("2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530"), BigInteger("1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257")],
        [BigInteger("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350"), BigInteger("0")],
        [BigInteger("3125332594171059424908108096204648978570118281977575435832422631601824034463382777937621250592425535493320683825557"), BigInteger("877076961050607968509681729531255177986764537961432449499635504522207616027455086505066378536590128544573588734230")],
        [BigInteger("4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559786"), BigInteger("0")],
        [BigInteger("151655185184498381465642749684540099398075398968325446656007613510403227271200139370504932015952886146304766135027"), BigInteger("3850754370037169011952147076051364057158807420970682438676050522613628423219637725072182697113062777891589506424760")],
        [BigInteger("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436"), BigInteger("0")],
        [BigInteger("1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257"), BigInteger("2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530")],
        [BigInteger("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939437"), BigInteger("0")],
        [BigInteger("877076961050607968509681729531255177986764537961432449499635504522207616027455086505066378536590128544573588734230"), BigInteger("3125332594171059424908108096204648978570118281977575435832422631601824034463382777937621250592425535493320683825557")]
      ]
    ];
    const F6 = [
      [
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("1"), BigInteger("0")]
      ],
      [
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("0"), BigInteger("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436")],
        [BigInteger("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350"), BigInteger("0")],
        [BigInteger("0"), BigInteger("1")],
        [BigInteger("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436"), BigInteger("0")],
        [BigInteger("0"), BigInteger("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350")]
      ],
      [
        [BigInteger("1"), BigInteger("0")],
        [BigInteger("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939437"), BigInteger("0")],
        [BigInteger("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436"), BigInteger("0")],
        [BigInteger("4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559786"), BigInteger("0")],
        [BigInteger("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350"), BigInteger("0")],
        [BigInteger("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620351"), BigInteger("0")]
      ]
    ];
    const f3 = module.addFunction(ftmPrefix + "_frobeniusMap" + n2);
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    for (let i3 = 0; i3 < 6; i3++) {
      const X = i3 == 0 ? c5.getLocal("x") : c5.i32_add(c5.getLocal("x"), c5.i32_const(i3 * f2size));
      const Xc0 = X;
      const Xc1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(i3 * f2size + f1size));
      const R = i3 == 0 ? c5.getLocal("r") : c5.i32_add(c5.getLocal("r"), c5.i32_const(i3 * f2size));
      const Rc0 = R;
      const Rc1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(i3 * f2size + f1size));
      const coef = mul22(F12[Math.floor(i3 / 3)][n2 % 12], F6[i3 % 3][n2 % 6]);
      const pCoef = module.alloc([
        ...utils$3.bigInt2BytesLE(toMontgomery(coef[0]), n8q),
        ...utils$3.bigInt2BytesLE(toMontgomery(coef[1]), n8q)
      ]);
      if (n2 % 2 == 1) {
        f3.addCode(c5.call(f1mPrefix + "_copy", Xc0, Rc0), c5.call(f1mPrefix + "_neg", Xc1, Rc1), c5.call(f2mPrefix + "_mul", R, c5.i32_const(pCoef), R));
      } else {
        f3.addCode(c5.call(f2mPrefix + "_mul", X, c5.i32_const(pCoef), R));
      }
    }
    function mul22(a3, b3) {
      const ac0 = BigInteger(a3[0]);
      const ac1 = BigInteger(a3[1]);
      const bc0 = BigInteger(b3[0]);
      const bc1 = BigInteger(b3[1]);
      const res = [
        ac0.times(bc0).minus(ac1.times(bc1)).mod(q),
        ac0.times(bc1).add(ac1.times(bc0)).mod(q)
      ];
      if (res[0].isNegative())
        res[0] = res[0].add(q);
      return res;
    }
  }
  function buildCyclotomicSquare() {
    const f3 = module.addFunction(prefix + "__cyclotomicSquare");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const x0 = c5.getLocal("x");
    const x4 = c5.i32_add(c5.getLocal("x"), c5.i32_const(f2size));
    const x3 = c5.i32_add(c5.getLocal("x"), c5.i32_const(2 * f2size));
    const x22 = c5.i32_add(c5.getLocal("x"), c5.i32_const(3 * f2size));
    const x1 = c5.i32_add(c5.getLocal("x"), c5.i32_const(4 * f2size));
    const x5 = c5.i32_add(c5.getLocal("x"), c5.i32_const(5 * f2size));
    const r0 = c5.getLocal("r");
    const r4 = c5.i32_add(c5.getLocal("r"), c5.i32_const(f2size));
    const r32 = c5.i32_add(c5.getLocal("r"), c5.i32_const(2 * f2size));
    const r22 = c5.i32_add(c5.getLocal("r"), c5.i32_const(3 * f2size));
    const r1 = c5.i32_add(c5.getLocal("r"), c5.i32_const(4 * f2size));
    const r5 = c5.i32_add(c5.getLocal("r"), c5.i32_const(5 * f2size));
    const t0 = c5.i32_const(module.alloc(f2size));
    const t1 = c5.i32_const(module.alloc(f2size));
    const t22 = c5.i32_const(module.alloc(f2size));
    const t3 = c5.i32_const(module.alloc(f2size));
    const t4 = c5.i32_const(module.alloc(f2size));
    const t5 = c5.i32_const(module.alloc(f2size));
    const tmp = c5.i32_const(module.alloc(f2size));
    const AUX = c5.i32_const(module.alloc(f2size));
    f3.addCode(c5.call(f2mPrefix + "_mul", x0, x1, tmp), c5.call(f2mPrefix + "_mulNR", x1, t0), c5.call(f2mPrefix + "_add", x0, t0, t0), c5.call(f2mPrefix + "_add", x0, x1, AUX), c5.call(f2mPrefix + "_mul", AUX, t0, t0), c5.call(f2mPrefix + "_mulNR", tmp, AUX), c5.call(f2mPrefix + "_add", tmp, AUX, AUX), c5.call(f2mPrefix + "_sub", t0, AUX, t0), c5.call(f2mPrefix + "_add", tmp, tmp, t1), c5.call(f2mPrefix + "_mul", x22, x3, tmp), c5.call(f2mPrefix + "_mulNR", x3, t22), c5.call(f2mPrefix + "_add", x22, t22, t22), c5.call(f2mPrefix + "_add", x22, x3, AUX), c5.call(f2mPrefix + "_mul", AUX, t22, t22), c5.call(f2mPrefix + "_mulNR", tmp, AUX), c5.call(f2mPrefix + "_add", tmp, AUX, AUX), c5.call(f2mPrefix + "_sub", t22, AUX, t22), c5.call(f2mPrefix + "_add", tmp, tmp, t3), c5.call(f2mPrefix + "_mul", x4, x5, tmp), c5.call(f2mPrefix + "_mulNR", x5, t4), c5.call(f2mPrefix + "_add", x4, t4, t4), c5.call(f2mPrefix + "_add", x4, x5, AUX), c5.call(f2mPrefix + "_mul", AUX, t4, t4), c5.call(f2mPrefix + "_mulNR", tmp, AUX), c5.call(f2mPrefix + "_add", tmp, AUX, AUX), c5.call(f2mPrefix + "_sub", t4, AUX, t4), c5.call(f2mPrefix + "_add", tmp, tmp, t5), c5.call(f2mPrefix + "_sub", t0, x0, r0), c5.call(f2mPrefix + "_add", r0, r0, r0), c5.call(f2mPrefix + "_add", t0, r0, r0), c5.call(f2mPrefix + "_add", t1, x1, r1), c5.call(f2mPrefix + "_add", r1, r1, r1), c5.call(f2mPrefix + "_add", t1, r1, r1), c5.call(f2mPrefix + "_mul", t5, c5.i32_const(pBls12381Twist), AUX), c5.call(f2mPrefix + "_add", AUX, x22, r22), c5.call(f2mPrefix + "_add", r22, r22, r22), c5.call(f2mPrefix + "_add", AUX, r22, r22), c5.call(f2mPrefix + "_sub", t4, x3, r32), c5.call(f2mPrefix + "_add", r32, r32, r32), c5.call(f2mPrefix + "_add", t4, r32, r32), c5.call(f2mPrefix + "_sub", t22, x4, r4), c5.call(f2mPrefix + "_add", r4, r4, r4), c5.call(f2mPrefix + "_add", t22, r4, r4), c5.call(f2mPrefix + "_add", t3, x5, r5), c5.call(f2mPrefix + "_add", r5, r5, r5), c5.call(f2mPrefix + "_add", t3, r5, r5));
  }
  function buildCyclotomicExp(exponent, isExpNegative, fnName) {
    const exponentNafBytes = naf2(exponent).map((b3) => b3 == -1 ? 255 : b3);
    const pExponentNafBytes = module.alloc(exponentNafBytes);
    const f3 = module.addFunction(prefix + "__cyclotomicExp_" + fnName);
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    f3.addLocal("bit", "i32");
    f3.addLocal("i", "i32");
    const c5 = f3.getCodeBuilder();
    const x3 = c5.getLocal("x");
    const res = c5.getLocal("r");
    const inverse = c5.i32_const(module.alloc(ftsize));
    f3.addCode(c5.call(ftmPrefix + "_conjugate", x3, inverse), c5.call(ftmPrefix + "_one", res), c5.if(c5.teeLocal("bit", c5.i32_load8_s(c5.i32_const(exponentNafBytes.length - 1), pExponentNafBytes)), c5.if(c5.i32_eq(c5.getLocal("bit"), c5.i32_const(1)), c5.call(ftmPrefix + "_mul", res, x3, res), c5.call(ftmPrefix + "_mul", res, inverse, res))), c5.setLocal("i", c5.i32_const(exponentNafBytes.length - 2)), c5.block(c5.loop(c5.call(prefix + "__cyclotomicSquare", res, res), c5.if(c5.teeLocal("bit", c5.i32_load8_s(c5.getLocal("i"), pExponentNafBytes)), c5.if(c5.i32_eq(c5.getLocal("bit"), c5.i32_const(1)), c5.call(ftmPrefix + "_mul", res, x3, res), c5.call(ftmPrefix + "_mul", res, inverse, res))), c5.br_if(1, c5.i32_eqz(c5.getLocal("i"))), c5.setLocal("i", c5.i32_sub(c5.getLocal("i"), c5.i32_const(1))), c5.br(0))));
    if (isExpNegative) {
      f3.addCode(c5.call(ftmPrefix + "_conjugate", res, res));
    }
  }
  function buildFinalExponentiation() {
    buildCyclotomicSquare();
    buildCyclotomicExp(finalExpZ, finalExpIsNegative, "w0");
    const f3 = module.addFunction(prefix + "_finalExponentiation");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const elt = c5.getLocal("x");
    const res = c5.getLocal("r");
    const t0 = c5.i32_const(module.alloc(ftsize));
    const t1 = c5.i32_const(module.alloc(ftsize));
    const t22 = c5.i32_const(module.alloc(ftsize));
    const t3 = c5.i32_const(module.alloc(ftsize));
    const t4 = c5.i32_const(module.alloc(ftsize));
    const t5 = c5.i32_const(module.alloc(ftsize));
    const t6 = c5.i32_const(module.alloc(ftsize));
    f3.addCode(c5.call(ftmPrefix + "_frobeniusMap6", elt, t0), c5.call(ftmPrefix + "_inverse", elt, t1), c5.call(ftmPrefix + "_mul", t0, t1, t22), c5.call(ftmPrefix + "_copy", t22, t1), c5.call(ftmPrefix + "_frobeniusMap2", t22, t22), c5.call(ftmPrefix + "_mul", t22, t1, t22), c5.call(prefix + "__cyclotomicSquare", t22, t1), c5.call(ftmPrefix + "_conjugate", t1, t1), c5.call(prefix + "__cyclotomicExp_w0", t22, t3), c5.call(prefix + "__cyclotomicSquare", t3, t4), c5.call(ftmPrefix + "_mul", t1, t3, t5), c5.call(prefix + "__cyclotomicExp_w0", t5, t1), c5.call(prefix + "__cyclotomicExp_w0", t1, t0), c5.call(prefix + "__cyclotomicExp_w0", t0, t6), c5.call(ftmPrefix + "_mul", t6, t4, t6), c5.call(prefix + "__cyclotomicExp_w0", t6, t4), c5.call(ftmPrefix + "_conjugate", t5, t5), c5.call(ftmPrefix + "_mul", t4, t5, t4), c5.call(ftmPrefix + "_mul", t4, t22, t4), c5.call(ftmPrefix + "_conjugate", t22, t5), c5.call(ftmPrefix + "_mul", t1, t22, t1), c5.call(ftmPrefix + "_frobeniusMap3", t1, t1), c5.call(ftmPrefix + "_mul", t6, t5, t6), c5.call(ftmPrefix + "_frobeniusMap1", t6, t6), c5.call(ftmPrefix + "_mul", t3, t0, t3), c5.call(ftmPrefix + "_frobeniusMap2", t3, t3), c5.call(ftmPrefix + "_mul", t3, t1, t3), c5.call(ftmPrefix + "_mul", t3, t6, t3), c5.call(ftmPrefix + "_mul", t3, t4, res));
  }
  function buildFinalExponentiationOld() {
    const f3 = module.addFunction(prefix + "_finalExponentiationOld");
    f3.addParam("x", "i32");
    f3.addParam("r", "i32");
    const exponent = BigInteger("322277361516934140462891564586510139908379969514828494218366688025288661041104682794998680497580008899973249814104447692778988208376779573819485263026159588510513834876303014016798809919343532899164848730280942609956670917565618115867287399623286813270357901731510188149934363360381614501334086825442271920079363289954510565375378443704372994881406797882676971082200626541916413184642520269678897559532260949334760604962086348898118982248842634379637598665468817769075878555493752214492790122785850202957575200176084204422751485957336465472324810982833638490904279282696134323072515220044451592646885410572234451732790590013479358343841220074174848221722017083597872017638514103174122784843925578370430843522959600095676285723737049438346544753168912974976791528535276317256904336520179281145394686565050419250614107803233314658825463117900250701199181529205942363159325765991819433914303908860460720581408201373164047773794825411011922305820065611121544561808414055302212057471395719432072209245600258134364584636810093520285711072578721435517884103526483832733289802426157301542744476740008494780363354305116978805620671467071400711358839553375340724899735460480144599782014906586543813292157922220645089192130209334926661588737007768565838519456601560804957985667880395221049249803753582637708560");
    const pExponent = module.alloc(utils$3.bigInt2BytesLE(exponent, 544));
    const c5 = f3.getCodeBuilder();
    f3.addCode(c5.call(ftmPrefix + "_exp", c5.getLocal("x"), c5.i32_const(pExponent), c5.i32_const(544), c5.getLocal("r")));
  }
  const pPreP = module.alloc(prePSize);
  const pPreQ = module.alloc(preQSize);
  function buildPairingEquation(nPairings) {
    const f3 = module.addFunction(prefix + "_pairingEq" + nPairings);
    for (let i3 = 0; i3 < nPairings; i3++) {
      f3.addParam("p_" + i3, "i32");
      f3.addParam("q_" + i3, "i32");
    }
    f3.addParam("c", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const resT = c5.i32_const(module.alloc(ftsize));
    const auxT = c5.i32_const(module.alloc(ftsize));
    f3.addCode(c5.call(ftmPrefix + "_one", resT));
    for (let i3 = 0; i3 < nPairings; i3++) {
      f3.addCode(c5.call(prefix + "_prepareG1", c5.getLocal("p_" + i3), c5.i32_const(pPreP)));
      f3.addCode(c5.call(prefix + "_prepareG2", c5.getLocal("q_" + i3), c5.i32_const(pPreQ)));
      f3.addCode(c5.if(c5.i32_eqz(c5.call(g1mPrefix + "_inGroupAffine", c5.i32_const(pPreP))), c5.ret(c5.i32_const(0))), c5.if(c5.i32_eqz(c5.call(g2mPrefix + "_inGroupAffine", c5.i32_const(pPreQ))), c5.ret(c5.i32_const(0))));
      f3.addCode(c5.call(prefix + "_millerLoop", c5.i32_const(pPreP), c5.i32_const(pPreQ), auxT));
      f3.addCode(c5.call(ftmPrefix + "_mul", resT, auxT, resT));
    }
    f3.addCode(c5.call(prefix + "_finalExponentiation", resT, resT));
    f3.addCode(c5.call(ftmPrefix + "_eq", resT, c5.getLocal("c")));
  }
  function buildPairing2() {
    const f3 = module.addFunction(prefix + "_pairing");
    f3.addParam("p", "i32");
    f3.addParam("q", "i32");
    f3.addParam("r", "i32");
    const c5 = f3.getCodeBuilder();
    const resT = c5.i32_const(module.alloc(ftsize));
    f3.addCode(c5.call(prefix + "_prepareG1", c5.getLocal("p"), c5.i32_const(pPreP)));
    f3.addCode(c5.call(prefix + "_prepareG2", c5.getLocal("q"), c5.i32_const(pPreQ)));
    f3.addCode(c5.call(prefix + "_millerLoop", c5.i32_const(pPreP), c5.i32_const(pPreQ), resT));
    f3.addCode(c5.call(prefix + "_finalExponentiation", resT, c5.getLocal("r")));
  }
  function buildInGroupG2() {
    const f3 = module.addFunction(g2mPrefix + "_inGroupAffine");
    f3.addParam("p", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const WINV = [
      BigInteger("2001204777610833696708894912867952078278441409969503942666029068062015825245418932221343814564507832018947136279894"),
      BigInteger("2001204777610833696708894912867952078278441409969503942666029068062015825245418932221343814564507832018947136279893")
    ];
    const FROB2X = BigInteger("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436");
    const FROB3Y = [
      BigInteger("2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530"),
      BigInteger("2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530")
    ];
    const wInv = c5.i32_const(module.alloc([
      ...utils$3.bigInt2BytesLE(toMontgomery(WINV[0]), n8q),
      ...utils$3.bigInt2BytesLE(toMontgomery(WINV[1]), n8q)
    ]));
    const frob2X = c5.i32_const(module.alloc(utils$3.bigInt2BytesLE(toMontgomery(FROB2X), n8q)));
    const frob3Y = c5.i32_const(module.alloc([
      ...utils$3.bigInt2BytesLE(toMontgomery(FROB3Y[0]), n8q),
      ...utils$3.bigInt2BytesLE(toMontgomery(FROB3Y[1]), n8q)
    ]));
    const z2 = c5.i32_const(module.alloc(utils$3.bigInt2BytesLE(finalExpZ, 8)));
    const px = c5.getLocal("p");
    const py = c5.i32_add(c5.getLocal("p"), c5.i32_const(f2size));
    const aux = c5.i32_const(module.alloc(f1size));
    const x_winv = c5.i32_const(module.alloc(f2size));
    const y_winv = c5.i32_const(module.alloc(f2size));
    const pf2 = module.alloc(f2size * 2);
    const f22 = c5.i32_const(pf2);
    const f2x = c5.i32_const(pf2);
    const f2x_c1 = c5.i32_const(pf2);
    const f2x_c2 = c5.i32_const(pf2 + f1size);
    const f2y = c5.i32_const(pf2 + f2size);
    const f2y_c1 = c5.i32_const(pf2 + f2size);
    const f2y_c2 = c5.i32_const(pf2 + f2size + f1size);
    const pf3 = module.alloc(f2size * 3);
    const f32 = c5.i32_const(pf3);
    const f3x = c5.i32_const(pf3);
    const f3x_c1 = c5.i32_const(pf3);
    const f3x_c2 = c5.i32_const(pf3 + f1size);
    const f3y = c5.i32_const(pf3 + f2size);
    const f3y_c1 = c5.i32_const(pf3 + f2size);
    const f3y_c2 = c5.i32_const(pf3 + f2size + f1size);
    const f3z = c5.i32_const(pf3 + f2size * 2);
    f3.addCode(c5.if(c5.call(g2mPrefix + "_isZeroAffine", c5.getLocal("p")), c5.ret(c5.i32_const(1))), c5.if(c5.i32_eqz(c5.call(g2mPrefix + "_inCurveAffine", c5.getLocal("p"))), c5.ret(c5.i32_const(0))), c5.call(f2mPrefix + "_mul", px, wInv, x_winv), c5.call(f2mPrefix + "_mul", py, wInv, y_winv), c5.call(f2mPrefix + "_mul1", x_winv, frob2X, f2x), c5.call(f2mPrefix + "_neg", y_winv, f2y), c5.call(f2mPrefix + "_neg", x_winv, f3x), c5.call(f2mPrefix + "_mul", y_winv, frob3Y, f3y), c5.call(f1mPrefix + "_sub", f2x_c1, f2x_c2, aux), c5.call(f1mPrefix + "_add", f2x_c1, f2x_c2, f2x_c2), c5.call(f1mPrefix + "_copy", aux, f2x_c1), c5.call(f1mPrefix + "_sub", f2y_c1, f2y_c2, aux), c5.call(f1mPrefix + "_add", f2y_c1, f2y_c2, f2y_c2), c5.call(f1mPrefix + "_copy", aux, f2y_c1), c5.call(f1mPrefix + "_add", f3x_c1, f3x_c2, aux), c5.call(f1mPrefix + "_sub", f3x_c1, f3x_c2, f3x_c2), c5.call(f1mPrefix + "_copy", aux, f3x_c1), c5.call(f1mPrefix + "_sub", f3y_c2, f3y_c1, aux), c5.call(f1mPrefix + "_add", f3y_c1, f3y_c2, f3y_c2), c5.call(f1mPrefix + "_copy", aux, f3y_c1), c5.call(f2mPrefix + "_one", f3z), c5.call(g2mPrefix + "_timesScalar", f32, z2, c5.i32_const(8), f32), c5.call(g2mPrefix + "_addMixed", f32, f22, f32), c5.ret(c5.call(g2mPrefix + "_eqMixed", f32, c5.getLocal("p"))));
    const fInGroup = module.addFunction(g2mPrefix + "_inGroup");
    fInGroup.addParam("pIn", "i32");
    fInGroup.setReturnType("i32");
    const c22 = fInGroup.getCodeBuilder();
    const aux2 = c22.i32_const(module.alloc(f2size * 2));
    fInGroup.addCode(c22.call(g2mPrefix + "_toAffine", c22.getLocal("pIn"), aux2), c22.ret(c22.call(g2mPrefix + "_inGroupAffine", aux2)));
  }
  function buildInGroupG1() {
    const f3 = module.addFunction(g1mPrefix + "_inGroupAffine");
    f3.addParam("p", "i32");
    f3.setReturnType("i32");
    const c5 = f3.getCodeBuilder();
    const BETA = BigInteger("4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436");
    const BETA2 = BigInteger("793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350");
    const Z2M1D3 = finalExpZ.times(finalExpZ).minus(BigInteger.one).divide(BigInteger(3));
    const beta = c5.i32_const(module.alloc(utils$3.bigInt2BytesLE(toMontgomery(BETA), n8q)));
    const beta2 = c5.i32_const(module.alloc(utils$3.bigInt2BytesLE(toMontgomery(BETA2), n8q)));
    const z2m1d3 = c5.i32_const(module.alloc(utils$3.bigInt2BytesLE(Z2M1D3, 16)));
    const px = c5.getLocal("p");
    const py = c5.i32_add(c5.getLocal("p"), c5.i32_const(f1size));
    const psp = module.alloc(f1size * 3);
    const sp = c5.i32_const(psp);
    const spx = c5.i32_const(psp);
    const spy = c5.i32_const(psp + f1size);
    c5.i32_const(psp + 2 * f1size);
    const ps2p = module.alloc(f1size * 2);
    const s2p = c5.i32_const(ps2p);
    const s2px = c5.i32_const(ps2p);
    const s2py = c5.i32_const(ps2p + f1size);
    f3.addCode(c5.if(c5.call(g1mPrefix + "_isZeroAffine", c5.getLocal("p")), c5.ret(c5.i32_const(1))), c5.if(c5.i32_eqz(c5.call(g1mPrefix + "_inCurveAffine", c5.getLocal("p"))), c5.ret(c5.i32_const(0))), c5.call(f1mPrefix + "_mul", px, beta, spx), c5.call(f1mPrefix + "_copy", py, spy), c5.call(f1mPrefix + "_mul", px, beta2, s2px), c5.call(f1mPrefix + "_copy", py, s2py), c5.call(g1mPrefix + "_doubleAffine", sp, sp), c5.call(g1mPrefix + "_subMixed", sp, c5.getLocal("p"), sp), c5.call(g1mPrefix + "_subMixed", sp, s2p, sp), c5.call(g1mPrefix + "_timesScalar", sp, z2m1d3, c5.i32_const(16), sp), c5.ret(c5.call(g1mPrefix + "_eqMixed", sp, s2p)));
    const fInGroup = module.addFunction(g1mPrefix + "_inGroup");
    fInGroup.addParam("pIn", "i32");
    fInGroup.setReturnType("i32");
    const c22 = fInGroup.getCodeBuilder();
    const aux2 = c22.i32_const(module.alloc(f1size * 2));
    fInGroup.addCode(c22.call(g1mPrefix + "_toAffine", c22.getLocal("pIn"), aux2), c22.ret(c22.call(g1mPrefix + "_inGroupAffine", aux2)));
  }
  for (let i3 = 0; i3 < 10; i3++) {
    buildFrobeniusMap(i3);
    module.exportFunction(ftmPrefix + "_frobeniusMap" + i3);
  }
  buildInGroupG1();
  buildInGroupG2();
  buildPrepAddStep();
  buildPrepDoubleStep();
  buildPrepareG1();
  buildPrepareG2();
  buildMillerLoop();
  buildFinalExponentiationOld();
  buildFinalExponentiation();
  for (let i3 = 1; i3 <= 5; i3++) {
    buildPairingEquation(i3);
    module.exportFunction(prefix + "_pairingEq" + i3);
  }
  buildPairing2();
  module.exportFunction(prefix + "_pairing");
  module.exportFunction(prefix + "_prepareG1");
  module.exportFunction(prefix + "_prepareG2");
  module.exportFunction(prefix + "_millerLoop");
  module.exportFunction(prefix + "_finalExponentiation");
  module.exportFunction(prefix + "_finalExponentiationOld");
  module.exportFunction(prefix + "__cyclotomicSquare");
  module.exportFunction(prefix + "__cyclotomicExp_w0");
  module.exportFunction(f6mPrefix + "_mul1");
  module.exportFunction(f6mPrefix + "_mul01");
  module.exportFunction(ftmPrefix + "_mul014");
  module.exportFunction(g1mPrefix + "_inGroupAffine");
  module.exportFunction(g1mPrefix + "_inGroup");
  module.exportFunction(g2mPrefix + "_inGroupAffine");
  module.exportFunction(g2mPrefix + "_inGroup");
};
var buildBn128$1 = build_bn128;
var buildBls12381$1 = build_bls12381;
function stringifyBigInts$6(o3) {
  if (typeof o3 == "bigint" || o3.eq !== void 0) {
    return o3.toString(10);
  } else if (o3 instanceof Uint8Array) {
    return fromRprLE(o3, 0);
  } else if (Array.isArray(o3)) {
    return o3.map(stringifyBigInts$6);
  } else if (typeof o3 == "object") {
    const res = {};
    const keys = Object.keys(o3);
    keys.forEach((k3) => {
      res[k3] = stringifyBigInts$6(o3[k3]);
    });
    return res;
  } else {
    return o3;
  }
}
function unstringifyBigInts$4(o3) {
  if (typeof o3 == "string" && /^[0-9]+$/.test(o3)) {
    return BigInt(o3);
  } else if (typeof o3 == "string" && /^0x[0-9a-fA-F]+$/.test(o3)) {
    return BigInt(o3);
  } else if (Array.isArray(o3)) {
    return o3.map(unstringifyBigInts$4);
  } else if (typeof o3 == "object") {
    if (o3 === null)
      return null;
    const res = {};
    const keys = Object.keys(o3);
    keys.forEach((k3) => {
      res[k3] = unstringifyBigInts$4(o3[k3]);
    });
    return res;
  } else {
    return o3;
  }
}
function beBuff2int$2(buff) {
  let res = BigInt(0);
  let i3 = buff.length;
  let offset = 0;
  const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);
  while (i3 > 0) {
    if (i3 >= 4) {
      i3 -= 4;
      res += BigInt(buffV.getUint32(i3)) << BigInt(offset * 8);
      offset += 4;
    } else if (i3 >= 2) {
      i3 -= 2;
      res += BigInt(buffV.getUint16(i3)) << BigInt(offset * 8);
      offset += 2;
    } else {
      i3 -= 1;
      res += BigInt(buffV.getUint8(i3)) << BigInt(offset * 8);
      offset += 1;
    }
  }
  return res;
}
function beInt2Buff$2(n2, len) {
  let r3 = n2;
  const buff = new Uint8Array(len);
  const buffV = new DataView(buff.buffer);
  let o3 = len;
  while (o3 > 0) {
    if (o3 - 4 >= 0) {
      o3 -= 4;
      buffV.setUint32(o3, Number(r3 & BigInt(4294967295)));
      r3 = r3 >> BigInt(32);
    } else if (o3 - 2 >= 0) {
      o3 -= 2;
      buffV.setUint16(o3, Number(r3 & BigInt(65535)));
      r3 = r3 >> BigInt(16);
    } else {
      o3 -= 1;
      buffV.setUint8(o3, Number(r3 & BigInt(255)));
      r3 = r3 >> BigInt(8);
    }
  }
  if (r3) {
    throw new Error("Number does not fit in this length");
  }
  return buff;
}
function leBuff2int$2(buff) {
  let res = BigInt(0);
  let i3 = 0;
  const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);
  while (i3 < buff.length) {
    if (i3 + 4 <= buff.length) {
      res += BigInt(buffV.getUint32(i3, true)) << BigInt(i3 * 8);
      i3 += 4;
    } else if (i3 + 4 <= buff.length) {
      res += BigInt(buffV.getUint16(i3, true)) << BigInt(i3 * 8);
      i3 += 2;
    } else {
      res += BigInt(buffV.getUint8(i3, true)) << BigInt(i3 * 8);
      i3 += 1;
    }
  }
  return res;
}
function leInt2Buff$2(n2, len) {
  let r3 = n2;
  if (typeof len === "undefined") {
    len = Math.floor((bitLength(n2) - 1) / 8) + 1;
    if (len == 0)
      len = 1;
  }
  const buff = new Uint8Array(len);
  const buffV = new DataView(buff.buffer);
  let o3 = 0;
  while (o3 < len) {
    if (o3 + 4 <= len) {
      buffV.setUint32(o3, Number(r3 & BigInt(4294967295)), true);
      o3 += 4;
      r3 = r3 >> BigInt(32);
    } else if (o3 + 2 <= len) {
      buffV.setUint16(Number(o3, r3 & BigInt(65535)), true);
      o3 += 2;
      r3 = r3 >> BigInt(16);
    } else {
      buffV.setUint8(Number(o3, r3 & BigInt(255)), true);
      o3 += 1;
      r3 = r3 >> BigInt(8);
    }
  }
  if (r3) {
    throw new Error("Number does not fit in this length");
  }
  return buff;
}
function stringifyFElements$1(F5, o3) {
  if (typeof o3 == "bigint" || o3.eq !== void 0) {
    return o3.toString(10);
  } else if (o3 instanceof Uint8Array) {
    return F5.toString(F5.e(o3));
  } else if (Array.isArray(o3)) {
    return o3.map(stringifyFElements$1.bind(this, F5));
  } else if (typeof o3 == "object") {
    const res = {};
    const keys = Object.keys(o3);
    keys.forEach((k3) => {
      res[k3] = stringifyFElements$1(F5, o3[k3]);
    });
    return res;
  } else {
    return o3;
  }
}
function unstringifyFElements$1(F5, o3) {
  if (typeof o3 == "string" && /^[0-9]+$/.test(o3)) {
    return F5.e(o3);
  } else if (typeof o3 == "string" && /^0x[0-9a-fA-F]+$/.test(o3)) {
    return F5.e(o3);
  } else if (Array.isArray(o3)) {
    return o3.map(unstringifyFElements$1.bind(this, F5));
  } else if (typeof o3 == "object") {
    if (o3 === null)
      return null;
    const res = {};
    const keys = Object.keys(o3);
    keys.forEach((k3) => {
      res[k3] = unstringifyFElements$1(F5, o3[k3]);
    });
    return res;
  } else {
    return o3;
  }
}
var utils_native = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  stringifyBigInts: stringifyBigInts$6,
  unstringifyBigInts: unstringifyBigInts$4,
  beBuff2int: beBuff2int$2,
  beInt2Buff: beInt2Buff$2,
  leBuff2int: leBuff2int$2,
  leInt2Buff: leInt2Buff$2,
  stringifyFElements: stringifyFElements$1,
  unstringifyFElements: unstringifyFElements$1
});
function stringifyBigInts$5(o3) {
  if (typeof o3 == "bigint" || o3.eq !== void 0) {
    return o3.toString(10);
  } else if (Array.isArray(o3)) {
    return o3.map(stringifyBigInts$5);
  } else if (typeof o3 == "object") {
    const res = {};
    const keys = Object.keys(o3);
    keys.forEach((k3) => {
      res[k3] = stringifyBigInts$5(o3[k3]);
    });
    return res;
  } else {
    return o3;
  }
}
function unstringifyBigInts$3(o3) {
  if (typeof o3 == "string" && /^[0-9]+$/.test(o3)) {
    return BigInteger(o3);
  } else if (typeof o3 == "string" && /^0x[0-9a-fA-F]+$/.test(o3)) {
    return BigInteger(o3);
  } else if (Array.isArray(o3)) {
    return o3.map(unstringifyBigInts$3);
  } else if (typeof o3 == "object") {
    const res = {};
    const keys = Object.keys(o3);
    keys.forEach((k3) => {
      res[k3] = unstringifyBigInts$3(o3[k3]);
    });
    return res;
  } else {
    return o3;
  }
}
function beBuff2int$1(buff) {
  let res = BigInteger.zero;
  for (let i3 = 0; i3 < buff.length; i3++) {
    const n2 = BigInteger(buff[buff.length - i3 - 1]);
    res = res.add(n2.shiftLeft(i3 * 8));
  }
  return res;
}
function beInt2Buff$1(n2, len) {
  let r3 = n2;
  let o3 = len - 1;
  const buff = new Uint8Array(len);
  while (r3.gt(BigInteger.zero) && o3 >= 0) {
    let c5 = Number(r3.and(BigInteger("255")));
    buff[o3] = c5;
    o3--;
    r3 = r3.shiftRight(8);
  }
  if (!r3.eq(BigInteger.zero)) {
    throw new Error("Number does not fit in this length");
  }
  return buff;
}
function leBuff2int$1(buff) {
  let res = BigInteger.zero;
  for (let i3 = 0; i3 < buff.length; i3++) {
    const n2 = BigInteger(buff[i3]);
    res = res.add(n2.shiftLeft(i3 * 8));
  }
  return res;
}
function leInt2Buff$1(n2, len) {
  let r3 = n2;
  let o3 = 0;
  const buff = new Uint8Array(len);
  while (r3.gt(BigInteger.zero) && o3 < buff.length) {
    let c5 = Number(r3.and(BigInteger(255)));
    buff[o3] = c5;
    o3++;
    r3 = r3.shiftRight(8);
  }
  if (!r3.eq(BigInteger.zero)) {
    throw new Error("Number does not fit in this length");
  }
  return buff;
}
var utils_bigint = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  stringifyBigInts: stringifyBigInts$5,
  unstringifyBigInts: unstringifyBigInts$3,
  beBuff2int: beBuff2int$1,
  beInt2Buff: beInt2Buff$1,
  leBuff2int: leBuff2int$1,
  leInt2Buff: leInt2Buff$1
});
var utils$2 = {};
var supportsNativeBigInt = typeof BigInt === "function";
if (supportsNativeBigInt) {
  Object.assign(utils$2, utils_native);
} else {
  Object.assign(utils$2, utils_bigint);
}
var _revTable$1 = [];
for (let i3 = 0; i3 < 256; i3++) {
  _revTable$1[i3] = _revSlow$1(i3, 8);
}
function _revSlow$1(idx, bits2) {
  let res = 0;
  let a3 = idx;
  for (let i3 = 0; i3 < bits2; i3++) {
    res <<= 1;
    res = res | a3 & 1;
    a3 >>= 1;
  }
  return res;
}
utils$2.bitReverse = function bitReverse(idx, bits2) {
  return (_revTable$1[idx >>> 24] | _revTable$1[idx >>> 16 & 255] << 8 | _revTable$1[idx >>> 8 & 255] << 16 | _revTable$1[idx & 255] << 24) >>> 32 - bits2;
};
utils$2.log2 = function log2(V) {
  return ((V & 4294901760) !== 0 ? (V &= 4294901760, 16) : 0) | ((V & 4278255360) !== 0 ? (V &= 4278255360, 8) : 0) | ((V & 4042322160) !== 0 ? (V &= 4042322160, 4) : 0) | ((V & 3435973836) !== 0 ? (V &= 3435973836, 2) : 0) | (V & 2863311530) !== 0;
};
utils$2.buffReverseBits = function buffReverseBits(buff, eSize) {
  const n2 = buff.byteLength / eSize;
  const bits2 = utils$2.log2(n2);
  if (n2 != 1 << bits2) {
    throw new Error("Invalid number of pointers");
  }
  for (let i3 = 0; i3 < n2; i3++) {
    const r3 = utils$2.bitReverse(i3, bits2);
    if (i3 > r3) {
      const tmp = buff.slice(i3 * eSize, (i3 + 1) * eSize);
      buff.set(buff.slice(r3 * eSize, (r3 + 1) * eSize), i3 * eSize);
      buff.set(tmp, r3 * eSize);
    }
  }
};
utils$2.array2buffer = function(arr, sG) {
  const buff = new Uint8Array(sG * arr.length);
  for (let i3 = 0; i3 < arr.length; i3++) {
    buff.set(arr[i3], i3 * sG);
  }
  return buff;
};
utils$2.buffer2array = function(buff, sG) {
  const n2 = buff.byteLength / sG;
  const arr = new Array(n2);
  for (let i3 = 0; i3 < n2; i3++) {
    arr[i3] = buff.slice(i3 * sG, i3 * sG + sG);
  }
  return arr;
};
var {
  bitReverse: bitReverse2,
  log2: log2$1,
  buffReverseBits: buffReverseBits2,
  stringifyBigInts: stringifyBigInts$4,
  unstringifyBigInts: unstringifyBigInts$2,
  beBuff2int,
  beInt2Buff,
  leBuff2int,
  leInt2Buff,
  array2buffer,
  buffer2array,
  stringifyFElements,
  unstringifyFElements
} = utils$2;
var _utils = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  bitReverse: bitReverse2,
  log2: log2$1,
  buffReverseBits: buffReverseBits2,
  stringifyBigInts: stringifyBigInts$4,
  unstringifyBigInts: unstringifyBigInts$2,
  beBuff2int,
  beInt2Buff,
  leBuff2int,
  leInt2Buff,
  array2buffer,
  buffer2array,
  stringifyFElements,
  unstringifyFElements
});
var PAGE_SIZE$1 = 1 << 30;
var BigBuffer = class {
  constructor(size) {
    this.buffers = [];
    this.byteLength = size;
    for (let i3 = 0; i3 < size; i3 += PAGE_SIZE$1) {
      const n2 = Math.min(size - i3, PAGE_SIZE$1);
      this.buffers.push(new Uint8Array(n2));
    }
  }
  slice(fr, to) {
    if (to === void 0)
      to = this.byteLength;
    if (fr === void 0)
      fr = 0;
    const len = to - fr;
    const firstPage = Math.floor(fr / PAGE_SIZE$1);
    const lastPage = Math.floor((fr + len - 1) / PAGE_SIZE$1);
    if (firstPage == lastPage || len == 0)
      return this.buffers[firstPage].slice(fr % PAGE_SIZE$1, fr % PAGE_SIZE$1 + len);
    let buff;
    let p2 = firstPage;
    let o3 = fr % PAGE_SIZE$1;
    let r3 = len;
    while (r3 > 0) {
      const l3 = o3 + r3 > PAGE_SIZE$1 ? PAGE_SIZE$1 - o3 : r3;
      const srcView = new Uint8Array(this.buffers[p2].buffer, this.buffers[p2].byteOffset + o3, l3);
      if (l3 == len)
        return srcView.slice();
      if (!buff) {
        if (len <= PAGE_SIZE$1) {
          buff = new Uint8Array(len);
        } else {
          buff = new BigBuffer(len);
        }
      }
      buff.set(srcView, len - r3);
      r3 = r3 - l3;
      p2++;
      o3 = 0;
    }
    return buff;
  }
  set(buff, offset) {
    if (offset === void 0)
      offset = 0;
    const len = buff.byteLength;
    if (len == 0)
      return;
    const firstPage = Math.floor(offset / PAGE_SIZE$1);
    const lastPage = Math.floor((offset + len - 1) / PAGE_SIZE$1);
    if (firstPage == lastPage) {
      if (buff instanceof BigBuffer && buff.buffers.length == 1) {
        return this.buffers[firstPage].set(buff.buffers[0], offset % PAGE_SIZE$1);
      } else {
        return this.buffers[firstPage].set(buff, offset % PAGE_SIZE$1);
      }
    }
    let p2 = firstPage;
    let o3 = offset % PAGE_SIZE$1;
    let r3 = len;
    while (r3 > 0) {
      const l3 = o3 + r3 > PAGE_SIZE$1 ? PAGE_SIZE$1 - o3 : r3;
      const srcView = buff.slice(len - r3, len - r3 + l3);
      const dstView = new Uint8Array(this.buffers[p2].buffer, this.buffers[p2].byteOffset + o3, l3);
      dstView.set(srcView);
      r3 = r3 - l3;
      p2++;
      o3 = 0;
    }
  }
};
function buildBatchConvert(tm, fnName, sIn, sOut) {
  return async function batchConvert(buffIn) {
    const nPoints = Math.floor(buffIn.byteLength / sIn);
    if (nPoints * sIn !== buffIn.byteLength) {
      throw new Error("Invalid buffer size");
    }
    const pointsPerChunk = Math.floor(nPoints / tm.concurrency);
    const opPromises = [];
    for (let i3 = 0; i3 < tm.concurrency; i3++) {
      let n2;
      if (i3 < tm.concurrency - 1) {
        n2 = pointsPerChunk;
      } else {
        n2 = nPoints - i3 * pointsPerChunk;
      }
      if (n2 == 0)
        continue;
      const buffChunk = buffIn.slice(i3 * pointsPerChunk * sIn, i3 * pointsPerChunk * sIn + n2 * sIn);
      const task = [
        { cmd: "ALLOCSET", var: 0, buff: buffChunk },
        { cmd: "ALLOC", var: 1, len: sOut * n2 },
        {
          cmd: "CALL",
          fnName,
          params: [
            { var: 0 },
            { val: n2 },
            { var: 1 }
          ]
        },
        { cmd: "GET", out: 0, var: 1, len: sOut * n2 }
      ];
      opPromises.push(tm.queueAction(task));
    }
    const result = await Promise.all(opPromises);
    let fullBuffOut;
    if (buffIn instanceof BigBuffer) {
      fullBuffOut = new BigBuffer(nPoints * sOut);
    } else {
      fullBuffOut = new Uint8Array(nPoints * sOut);
    }
    let p2 = 0;
    for (let i3 = 0; i3 < result.length; i3++) {
      fullBuffOut.set(result[i3][0], p2);
      p2 += result[i3][0].byteLength;
    }
    return fullBuffOut;
  };
}
var WasmField1 = class {
  constructor(tm, prefix, n8, p2) {
    this.tm = tm;
    this.prefix = prefix;
    this.p = p2;
    this.n8 = n8;
    this.type = "F1";
    this.m = 1;
    this.half = shiftRight(p2, one);
    this.bitLength = bitLength(p2);
    this.mask = sub(shiftLeft(one, this.bitLength), one);
    this.pOp1 = tm.alloc(n8);
    this.pOp2 = tm.alloc(n8);
    this.pOp3 = tm.alloc(n8);
    this.tm.instance.exports[prefix + "_zero"](this.pOp1);
    this.zero = this.tm.getBuff(this.pOp1, this.n8);
    this.tm.instance.exports[prefix + "_one"](this.pOp1);
    this.one = this.tm.getBuff(this.pOp1, this.n8);
    this.negone = this.neg(this.one);
    this.two = this.add(this.one, this.one);
    this.n64 = Math.floor(n8 / 8);
    this.n32 = Math.floor(n8 / 4);
    if (this.n64 * 8 != this.n8) {
      throw new Error("n8 must be a multiple of 8");
    }
    this.half = shiftRight(this.p, one);
    this.nqr = this.two;
    let r3 = this.exp(this.nqr, this.half);
    while (!this.eq(r3, this.negone)) {
      this.nqr = this.add(this.nqr, this.one);
      r3 = this.exp(this.nqr, this.half);
    }
    this.shift = this.mul(this.nqr, this.nqr);
    this.shiftInv = this.inv(this.shift);
    this.s = 0;
    let t3 = sub(this.p, one);
    while (!isOdd(t3)) {
      this.s = this.s + 1;
      t3 = shiftRight(t3, one);
    }
    this.w = [];
    this.w[this.s] = this.exp(this.nqr, t3);
    for (let i3 = this.s - 1; i3 >= 0; i3--) {
      this.w[i3] = this.square(this.w[i3 + 1]);
    }
    if (!this.eq(this.w[0], this.one)) {
      throw new Error("Error calculating roots of unity");
    }
    this.batchToMontgomery = buildBatchConvert(tm, prefix + "_batchToMontgomery", this.n8, this.n8);
    this.batchFromMontgomery = buildBatchConvert(tm, prefix + "_batchFromMontgomery", this.n8, this.n8);
  }
  op2(opName, a3, b3) {
    this.tm.setBuff(this.pOp1, a3);
    this.tm.setBuff(this.pOp2, b3);
    this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);
    return this.tm.getBuff(this.pOp3, this.n8);
  }
  op2Bool(opName, a3, b3) {
    this.tm.setBuff(this.pOp1, a3);
    this.tm.setBuff(this.pOp2, b3);
    return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);
  }
  op1(opName, a3) {
    this.tm.setBuff(this.pOp1, a3);
    this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);
    return this.tm.getBuff(this.pOp3, this.n8);
  }
  op1Bool(opName, a3) {
    this.tm.setBuff(this.pOp1, a3);
    return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);
  }
  add(a3, b3) {
    return this.op2("_add", a3, b3);
  }
  eq(a3, b3) {
    return this.op2Bool("_eq", a3, b3);
  }
  isZero(a3) {
    return this.op1Bool("_isZero", a3);
  }
  sub(a3, b3) {
    return this.op2("_sub", a3, b3);
  }
  neg(a3) {
    return this.op1("_neg", a3);
  }
  inv(a3) {
    return this.op1("_inverse", a3);
  }
  toMontgomery(a3) {
    return this.op1("_toMontgomery", a3);
  }
  fromMontgomery(a3) {
    return this.op1("_fromMontgomery", a3);
  }
  mul(a3, b3) {
    return this.op2("_mul", a3, b3);
  }
  div(a3, b3) {
    this.tm.setBuff(this.pOp1, a3);
    this.tm.setBuff(this.pOp2, b3);
    this.tm.instance.exports[this.prefix + "_inverse"](this.pOp2, this.pOp2);
    this.tm.instance.exports[this.prefix + "_mul"](this.pOp1, this.pOp2, this.pOp3);
    return this.tm.getBuff(this.pOp3, this.n8);
  }
  square(a3) {
    return this.op1("_square", a3);
  }
  isSquare(a3) {
    return this.op1Bool("_isSquare", a3);
  }
  sqrt(a3) {
    return this.op1("_sqrt", a3);
  }
  exp(a3, b3) {
    if (!(b3 instanceof Uint8Array)) {
      b3 = toLEBuff2(e3(b3));
    }
    this.tm.setBuff(this.pOp1, a3);
    this.tm.setBuff(this.pOp2, b3);
    this.tm.instance.exports[this.prefix + "_exp"](this.pOp1, this.pOp2, b3.byteLength, this.pOp3);
    return this.tm.getBuff(this.pOp3, this.n8);
  }
  isNegative(a3) {
    return this.op1Bool("_isNegative", a3);
  }
  e(a3, b3) {
    if (a3 instanceof Uint8Array)
      return a3;
    let ra = e3(a3, b3);
    if (isNegative(ra)) {
      ra = neg(ra);
      if (gt(ra, this.p)) {
        ra = mod(ra, this.p);
      }
      ra = sub(this.p, ra);
    } else {
      if (gt(ra, this.p)) {
        ra = mod(ra, this.p);
      }
    }
    const buff = leInt2Buff(ra, this.n8);
    return this.toMontgomery(buff);
  }
  toString(a3, radix) {
    const an = this.fromMontgomery(a3);
    const s2 = fromRprLE(an, 0);
    return toString$6(s2, radix);
  }
  fromRng(rng) {
    let v3;
    const buff = new Uint8Array(this.n8);
    do {
      v3 = zero;
      for (let i3 = 0; i3 < this.n64; i3++) {
        v3 = add(v3, shiftLeft(rng.nextU64(), 64 * i3));
      }
      v3 = band(v3, this.mask);
    } while (geq(v3, this.p));
    toRprLE(buff, 0, v3, this.n8);
    return buff;
  }
  random() {
    return this.fromRng(getThreadRng());
  }
  toObject(a3) {
    const an = this.fromMontgomery(a3);
    return fromRprLE(an, 0);
  }
  fromObject(a3) {
    const buff = new Uint8Array(this.n8);
    toRprLE(buff, 0, a3, this.n8);
    return this.toMontgomery(buff);
  }
  toRprLE(buff, offset, a3) {
    buff.set(this.fromMontgomery(a3), offset);
  }
  toRprBE(buff, offset, a3) {
    const buff2 = this.fromMontgomery(a3);
    for (let i3 = 0; i3 < this.n8 / 2; i3++) {
      const aux = buff2[i3];
      buff2[i3] = buff2[this.n8 - 1 - i3];
      buff2[this.n8 - 1 - i3] = aux;
    }
    buff.set(buff2, offset);
  }
  fromRprLE(buff, offset) {
    offset = offset || 0;
    const res = buff.slice(offset, offset + this.n8);
    return this.toMontgomery(res);
  }
  async batchInverse(buffIn) {
    let returnArray = false;
    const sIn = this.n8;
    const sOut = this.n8;
    if (Array.isArray(buffIn)) {
      buffIn = array2buffer(buffIn, sIn);
      returnArray = true;
    } else {
      buffIn = buffIn.slice(0, buffIn.byteLength);
    }
    const nPoints = Math.floor(buffIn.byteLength / sIn);
    if (nPoints * sIn !== buffIn.byteLength) {
      throw new Error("Invalid buffer size");
    }
    const pointsPerChunk = Math.floor(nPoints / this.tm.concurrency);
    const opPromises = [];
    for (let i3 = 0; i3 < this.tm.concurrency; i3++) {
      let n2;
      if (i3 < this.tm.concurrency - 1) {
        n2 = pointsPerChunk;
      } else {
        n2 = nPoints - i3 * pointsPerChunk;
      }
      if (n2 == 0)
        continue;
      const buffChunk = buffIn.slice(i3 * pointsPerChunk * sIn, i3 * pointsPerChunk * sIn + n2 * sIn);
      const task = [
        { cmd: "ALLOCSET", var: 0, buff: buffChunk },
        { cmd: "ALLOC", var: 1, len: sOut * n2 },
        {
          cmd: "CALL",
          fnName: this.prefix + "_batchInverse",
          params: [
            { var: 0 },
            { val: sIn },
            { val: n2 },
            { var: 1 },
            { val: sOut }
          ]
        },
        { cmd: "GET", out: 0, var: 1, len: sOut * n2 }
      ];
      opPromises.push(this.tm.queueAction(task));
    }
    const result = await Promise.all(opPromises);
    let fullBuffOut;
    if (buffIn instanceof BigBuffer) {
      fullBuffOut = new BigBuffer(nPoints * sOut);
    } else {
      fullBuffOut = new Uint8Array(nPoints * sOut);
    }
    let p2 = 0;
    for (let i3 = 0; i3 < result.length; i3++) {
      fullBuffOut.set(result[i3][0], p2);
      p2 += result[i3][0].byteLength;
    }
    if (returnArray) {
      return buffer2array(fullBuffOut, sOut);
    } else {
      return fullBuffOut;
    }
  }
};
var WasmField2 = class {
  constructor(tm, prefix, F5) {
    this.tm = tm;
    this.prefix = prefix;
    this.F = F5;
    this.type = "F2";
    this.m = F5.m * 2;
    this.n8 = this.F.n8 * 2;
    this.n32 = this.F.n32 * 2;
    this.n64 = this.F.n64 * 2;
    this.pOp1 = tm.alloc(F5.n8 * 2);
    this.pOp2 = tm.alloc(F5.n8 * 2);
    this.pOp3 = tm.alloc(F5.n8 * 2);
    this.tm.instance.exports[prefix + "_zero"](this.pOp1);
    this.zero = tm.getBuff(this.pOp1, this.n8);
    this.tm.instance.exports[prefix + "_one"](this.pOp1);
    this.one = tm.getBuff(this.pOp1, this.n8);
    this.negone = this.neg(this.one);
    this.two = this.add(this.one, this.one);
  }
  op2(opName, a3, b3) {
    this.tm.setBuff(this.pOp1, a3);
    this.tm.setBuff(this.pOp2, b3);
    this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);
    return this.tm.getBuff(this.pOp3, this.n8);
  }
  op2Bool(opName, a3, b3) {
    this.tm.setBuff(this.pOp1, a3);
    this.tm.setBuff(this.pOp2, b3);
    return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);
  }
  op1(opName, a3) {
    this.tm.setBuff(this.pOp1, a3);
    this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);
    return this.tm.getBuff(this.pOp3, this.n8);
  }
  op1Bool(opName, a3) {
    this.tm.setBuff(this.pOp1, a3);
    return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);
  }
  add(a3, b3) {
    return this.op2("_add", a3, b3);
  }
  eq(a3, b3) {
    return this.op2Bool("_eq", a3, b3);
  }
  isZero(a3) {
    return this.op1Bool("_isZero", a3);
  }
  sub(a3, b3) {
    return this.op2("_sub", a3, b3);
  }
  neg(a3) {
    return this.op1("_neg", a3);
  }
  inv(a3) {
    return this.op1("_inverse", a3);
  }
  isNegative(a3) {
    return this.op1Bool("_isNegative", a3);
  }
  toMontgomery(a3) {
    return this.op1("_toMontgomery", a3);
  }
  fromMontgomery(a3) {
    return this.op1("_fromMontgomery", a3);
  }
  mul(a3, b3) {
    return this.op2("_mul", a3, b3);
  }
  mul1(a3, b3) {
    return this.op2("_mul1", a3, b3);
  }
  div(a3, b3) {
    this.tm.setBuff(this.pOp1, a3);
    this.tm.setBuff(this.pOp2, b3);
    this.tm.instance.exports[this.prefix + "_inverse"](this.pOp2, this.pOp2);
    this.tm.instance.exports[this.prefix + "_mul"](this.pOp1, this.pOp2, this.pOp3);
    return this.tm.getBuff(this.pOp3, this.n8);
  }
  square(a3) {
    return this.op1("_square", a3);
  }
  isSquare(a3) {
    return this.op1Bool("_isSquare", a3);
  }
  sqrt(a3) {
    return this.op1("_sqrt", a3);
  }
  exp(a3, b3) {
    if (!(b3 instanceof Uint8Array)) {
      b3 = toLEBuff2(e3(b3));
    }
    this.tm.setBuff(this.pOp1, a3);
    this.tm.setBuff(this.pOp2, b3);
    this.tm.instance.exports[this.prefix + "_exp"](this.pOp1, this.pOp2, b3.byteLength, this.pOp3);
    return this.tm.getBuff(this.pOp3, this.n8);
  }
  e(a3, b3) {
    if (a3 instanceof Uint8Array)
      return a3;
    if (Array.isArray(a3) && a3.length == 2) {
      const c1 = this.F.e(a3[0], b3);
      const c22 = this.F.e(a3[1], b3);
      const res = new Uint8Array(this.F.n8 * 2);
      res.set(c1);
      res.set(c22, this.F.n8 * 2);
      return res;
    } else {
      throw new Error("invalid F2");
    }
  }
  toString(a3, radix) {
    const s1 = this.F.toString(a3.slice(0, this.F.n8), radix);
    const s2 = this.F.toString(a3.slice(this.F.n8), radix);
    return `[${s1}, ${s2}]`;
  }
  fromRng(rng) {
    const c1 = this.F.fromRng(rng);
    const c22 = this.F.fromRng(rng);
    const res = new Uint8Array(this.F.n8 * 2);
    res.set(c1);
    res.set(c22, this.F.n8);
    return res;
  }
  random() {
    return this.fromRng(getThreadRng());
  }
  toObject(a3) {
    const c1 = this.F.toObject(a3.slice(0, this.F.n8));
    const c22 = this.F.toObject(a3.slice(this.F.n8, this.F.n8 * 2));
    return [c1, c22];
  }
  fromObject(a3) {
    const buff = new Uint8Array(this.F.n8 * 2);
    const b1 = this.F.fromObject(a3[0]);
    const b22 = this.F.fromObject(a3[1]);
    buff.set(b1);
    buff.set(b22, this.F.n8);
    return buff;
  }
  c1(a3) {
    return a3.slice(0, this.F.n8);
  }
  c2(a3) {
    return a3.slice(this.F.n8);
  }
};
var WasmField3 = class {
  constructor(tm, prefix, F5) {
    this.tm = tm;
    this.prefix = prefix;
    this.F = F5;
    this.type = "F3";
    this.m = F5.m * 3;
    this.n8 = this.F.n8 * 3;
    this.n32 = this.F.n32 * 3;
    this.n64 = this.F.n64 * 3;
    this.pOp1 = tm.alloc(F5.n8 * 3);
    this.pOp2 = tm.alloc(F5.n8 * 3);
    this.pOp3 = tm.alloc(F5.n8 * 3);
    this.tm.instance.exports[prefix + "_zero"](this.pOp1);
    this.zero = tm.getBuff(this.pOp1, this.n8);
    this.tm.instance.exports[prefix + "_one"](this.pOp1);
    this.one = tm.getBuff(this.pOp1, this.n8);
    this.negone = this.neg(this.one);
    this.two = this.add(this.one, this.one);
  }
  op2(opName, a3, b3) {
    this.tm.setBuff(this.pOp1, a3);
    this.tm.setBuff(this.pOp2, b3);
    this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);
    return this.tm.getBuff(this.pOp3, this.n8);
  }
  op2Bool(opName, a3, b3) {
    this.tm.setBuff(this.pOp1, a3);
    this.tm.setBuff(this.pOp2, b3);
    return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);
  }
  op1(opName, a3) {
    this.tm.setBuff(this.pOp1, a3);
    this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);
    return this.tm.getBuff(this.pOp3, this.n8);
  }
  op1Bool(opName, a3) {
    this.tm.setBuff(this.pOp1, a3);
    return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);
  }
  eq(a3, b3) {
    return this.op2Bool("_eq", a3, b3);
  }
  isZero(a3) {
    return this.op1Bool("_isZero", a3);
  }
  add(a3, b3) {
    return this.op2("_add", a3, b3);
  }
  sub(a3, b3) {
    return this.op2("_sub", a3, b3);
  }
  neg(a3) {
    return this.op1("_neg", a3);
  }
  inv(a3) {
    return this.op1("_inverse", a3);
  }
  isNegative(a3) {
    return this.op1Bool("_isNegative", a3);
  }
  toMontgomery(a3) {
    return this.op1("_toMontgomery", a3);
  }
  fromMontgomery(a3) {
    return this.op1("_fromMontgomery", a3);
  }
  mul(a3, b3) {
    return this.op2("_mul", a3, b3);
  }
  div(a3, b3) {
    this.tm.setBuff(this.pOp1, a3);
    this.tm.setBuff(this.pOp2, b3);
    this.tm.instance.exports[this.prefix + "_inverse"](this.pOp2, this.pOp2);
    this.tm.instance.exports[this.prefix + "_mul"](this.pOp1, this.pOp2, this.pOp3);
    return this.tm.getBuff(this.pOp3, this.n8);
  }
  square(a3) {
    return this.op1("_square", a3);
  }
  isSquare(a3) {
    return this.op1Bool("_isSquare", a3);
  }
  sqrt(a3) {
    return this.op1("_sqrt", a3);
  }
  exp(a3, b3) {
    if (!(b3 instanceof Uint8Array)) {
      b3 = toLEBuff2(e3(b3));
    }
    this.tm.setBuff(this.pOp1, a3);
    this.tm.setBuff(this.pOp2, b3);
    this.tm.instance.exports[this.prefix + "_exp"](this.pOp1, this.pOp2, b3.byteLength, this.pOp3);
    return this.getBuff(this.pOp3, this.n8);
  }
  e(a3, b3) {
    if (a3 instanceof Uint8Array)
      return a3;
    if (Array.isArray(a3) && a3.length == 3) {
      const c1 = this.F.e(a3[0], b3);
      const c22 = this.F.e(a3[1], b3);
      const c32 = this.F.e(a3[2], b3);
      const res = new Uint8Array(this.F.n8 * 3);
      res.set(c1);
      res.set(c22, this.F.n8);
      res.set(c32, this.F.n8 * 2);
      return res;
    } else {
      throw new Error("invalid F3");
    }
  }
  toString(a3, radix) {
    const s1 = this.F.toString(a3.slice(0, this.F.n8), radix);
    const s2 = this.F.toString(a3.slice(this.F.n8, this.F.n8 * 2), radix);
    const s3 = this.F.toString(a3.slice(this.F.n8 * 2), radix);
    return `[${s1}, ${s2}, ${s3}]`;
  }
  fromRng(rng) {
    const c1 = this.F.fromRng(rng);
    const c22 = this.F.fromRng(rng);
    const c32 = this.F.fromRng(rng);
    const res = new Uint8Array(this.F.n8 * 3);
    res.set(c1);
    res.set(c22, this.F.n8);
    res.set(c32, this.F.n8 * 2);
    return res;
  }
  random() {
    return this.fromRng(getThreadRng());
  }
  toObject(a3) {
    const c1 = this.F.toObject(a3.slice(0, this.F.n8));
    const c22 = this.F.toObject(a3.slice(this.F.n8, this.F.n8 * 2));
    const c32 = this.F.toObject(a3.slice(this.F.n8 * 2, this.F.n8 * 3));
    return [c1, c22, c32];
  }
  fromObject(a3) {
    const buff = new Uint8Array(this.F.n8 * 3);
    const b1 = this.F.fromObject(a3[0]);
    const b22 = this.F.fromObject(a3[1]);
    const b3 = this.F.fromObject(a3[2]);
    buff.set(b1);
    buff.set(b22, this.F.n8);
    buff.set(b3, this.F.n8 * 2);
    return buff;
  }
  c1(a3) {
    return a3.slice(0, this.F.n8);
  }
  c2(a3) {
    return a3.slice(this.F.n8, this.F.n8 * 2);
  }
  c3(a3) {
    return a3.slice(this.F.n8 * 2);
  }
};
var WasmCurve = class {
  constructor(tm, prefix, F5, pGen, pGb, cofactor) {
    this.tm = tm;
    this.prefix = prefix;
    this.F = F5;
    this.pOp1 = tm.alloc(F5.n8 * 3);
    this.pOp2 = tm.alloc(F5.n8 * 3);
    this.pOp3 = tm.alloc(F5.n8 * 3);
    this.tm.instance.exports[prefix + "_zero"](this.pOp1);
    this.zero = this.tm.getBuff(this.pOp1, F5.n8 * 3);
    this.tm.instance.exports[prefix + "_zeroAffine"](this.pOp1);
    this.zeroAffine = this.tm.getBuff(this.pOp1, F5.n8 * 2);
    this.one = this.tm.getBuff(pGen, F5.n8 * 3);
    this.g = this.one;
    this.oneAffine = this.tm.getBuff(pGen, F5.n8 * 2);
    this.gAffine = this.oneAffine;
    this.b = this.tm.getBuff(pGb, F5.n8);
    if (cofactor) {
      this.cofactor = toLEBuff2(cofactor);
    }
    this.negone = this.neg(this.one);
    this.two = this.add(this.one, this.one);
    this.batchLEMtoC = buildBatchConvert(tm, prefix + "_batchLEMtoC", F5.n8 * 2, F5.n8);
    this.batchLEMtoU = buildBatchConvert(tm, prefix + "_batchLEMtoU", F5.n8 * 2, F5.n8 * 2);
    this.batchCtoLEM = buildBatchConvert(tm, prefix + "_batchCtoLEM", F5.n8, F5.n8 * 2);
    this.batchUtoLEM = buildBatchConvert(tm, prefix + "_batchUtoLEM", F5.n8 * 2, F5.n8 * 2);
    this.batchToJacobian = buildBatchConvert(tm, prefix + "_batchToJacobian", F5.n8 * 2, F5.n8 * 3);
    this.batchToAffine = buildBatchConvert(tm, prefix + "_batchToAffine", F5.n8 * 3, F5.n8 * 2);
  }
  op2(opName, a3, b3) {
    this.tm.setBuff(this.pOp1, a3);
    this.tm.setBuff(this.pOp2, b3);
    this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);
    return this.tm.getBuff(this.pOp3, this.F.n8 * 3);
  }
  op2bool(opName, a3, b3) {
    this.tm.setBuff(this.pOp1, a3);
    this.tm.setBuff(this.pOp2, b3);
    return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);
  }
  op1(opName, a3) {
    this.tm.setBuff(this.pOp1, a3);
    this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);
    return this.tm.getBuff(this.pOp3, this.F.n8 * 3);
  }
  op1Affine(opName, a3) {
    this.tm.setBuff(this.pOp1, a3);
    this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);
    return this.tm.getBuff(this.pOp3, this.F.n8 * 2);
  }
  op1Bool(opName, a3) {
    this.tm.setBuff(this.pOp1, a3);
    return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);
  }
  add(a3, b3) {
    if (a3.byteLength == this.F.n8 * 3) {
      if (b3.byteLength == this.F.n8 * 3) {
        return this.op2("_add", a3, b3);
      } else if (b3.byteLength == this.F.n8 * 2) {
        return this.op2("_addMixed", a3, b3);
      } else {
        throw new Error("invalid point size");
      }
    } else if (a3.byteLength == this.F.n8 * 2) {
      if (b3.byteLength == this.F.n8 * 3) {
        return this.op2("_addMixed", b3, a3);
      } else if (b3.byteLength == this.F.n8 * 2) {
        return this.op2("_addAffine", a3, b3);
      } else {
        throw new Error("invalid point size");
      }
    } else {
      throw new Error("invalid point size");
    }
  }
  sub(a3, b3) {
    if (a3.byteLength == this.F.n8 * 3) {
      if (b3.byteLength == this.F.n8 * 3) {
        return this.op2("_sub", a3, b3);
      } else if (b3.byteLength == this.F.n8 * 2) {
        return this.op2("_subMixed", a3, b3);
      } else {
        throw new Error("invalid point size");
      }
    } else if (a3.byteLength == this.F.n8 * 2) {
      if (b3.byteLength == this.F.n8 * 3) {
        return this.op2("_subMixed", b3, a3);
      } else if (b3.byteLength == this.F.n8 * 2) {
        return this.op2("_subAffine", a3, b3);
      } else {
        throw new Error("invalid point size");
      }
    } else {
      throw new Error("invalid point size");
    }
  }
  neg(a3) {
    if (a3.byteLength == this.F.n8 * 3) {
      return this.op1("_neg", a3);
    } else if (a3.byteLength == this.F.n8 * 2) {
      return this.op1Affine("_negAffine", a3);
    } else {
      throw new Error("invalid point size");
    }
  }
  double(a3) {
    if (a3.byteLength == this.F.n8 * 3) {
      return this.op1("_double", a3);
    } else if (a3.byteLength == this.F.n8 * 2) {
      return this.op1("_doubleAffine", a3);
    } else {
      throw new Error("invalid point size");
    }
  }
  isZero(a3) {
    if (a3.byteLength == this.F.n8 * 3) {
      return this.op1Bool("_isZero", a3);
    } else if (a3.byteLength == this.F.n8 * 2) {
      return this.op1Bool("_isZeroAffine", a3);
    } else {
      throw new Error("invalid point size");
    }
  }
  timesScalar(a3, s2) {
    if (!(s2 instanceof Uint8Array)) {
      s2 = toLEBuff2(e3(s2));
    }
    let fnName;
    if (a3.byteLength == this.F.n8 * 3) {
      fnName = this.prefix + "_timesScalar";
    } else if (a3.byteLength == this.F.n8 * 2) {
      fnName = this.prefix + "_timesScalarAffine";
    } else {
      throw new Error("invalid point size");
    }
    this.tm.setBuff(this.pOp1, a3);
    this.tm.setBuff(this.pOp2, s2);
    this.tm.instance.exports[fnName](this.pOp1, this.pOp2, s2.byteLength, this.pOp3);
    return this.tm.getBuff(this.pOp3, this.F.n8 * 3);
  }
  timesFr(a3, s2) {
    let fnName;
    if (a3.byteLength == this.F.n8 * 3) {
      fnName = this.prefix + "_timesFr";
    } else if (a3.byteLength == this.F.n8 * 2) {
      fnName = this.prefix + "_timesFrAffine";
    } else {
      throw new Error("invalid point size");
    }
    this.tm.setBuff(this.pOp1, a3);
    this.tm.setBuff(this.pOp2, s2);
    this.tm.instance.exports[fnName](this.pOp1, this.pOp2, this.pOp3);
    return this.tm.getBuff(this.pOp3, this.F.n8 * 3);
  }
  eq(a3, b3) {
    if (a3.byteLength == this.F.n8 * 3) {
      if (b3.byteLength == this.F.n8 * 3) {
        return this.op2bool("_eq", a3, b3);
      } else if (b3.byteLength == this.F.n8 * 2) {
        return this.op2bool("_eqMixed", a3, b3);
      } else {
        throw new Error("invalid point size");
      }
    } else if (a3.byteLength == this.F.n8 * 2) {
      if (b3.byteLength == this.F.n8 * 3) {
        return this.op2bool("_eqMixed", b3, a3);
      } else if (b3.byteLength == this.F.n8 * 2) {
        return this.op2bool("_eqAffine", a3, b3);
      } else {
        throw new Error("invalid point size");
      }
    } else {
      throw new Error("invalid point size");
    }
  }
  toAffine(a3) {
    if (a3.byteLength == this.F.n8 * 3) {
      return this.op1Affine("_toAffine", a3);
    } else if (a3.byteLength == this.F.n8 * 2) {
      return a3;
    } else {
      throw new Error("invalid point size");
    }
  }
  toJacobian(a3) {
    if (a3.byteLength == this.F.n8 * 3) {
      return a3;
    } else if (a3.byteLength == this.F.n8 * 2) {
      return this.op1("_toJacobian", a3);
    } else {
      throw new Error("invalid point size");
    }
  }
  toRprUncompressed(arr, offset, a3) {
    this.tm.setBuff(this.pOp1, a3);
    if (a3.byteLength == this.F.n8 * 3) {
      this.tm.instance.exports[this.prefix + "_toAffine"](this.pOp1, this.pOp1);
    } else if (a3.byteLength != this.F.n8 * 2) {
      throw new Error("invalid point size");
    }
    this.tm.instance.exports[this.prefix + "_LEMtoU"](this.pOp1, this.pOp1);
    const res = this.tm.getBuff(this.pOp1, this.F.n8 * 2);
    arr.set(res, offset);
  }
  fromRprUncompressed(arr, offset) {
    const buff = arr.slice(offset, offset + this.F.n8 * 2);
    this.tm.setBuff(this.pOp1, buff);
    this.tm.instance.exports[this.prefix + "_UtoLEM"](this.pOp1, this.pOp1);
    return this.tm.getBuff(this.pOp1, this.F.n8 * 2);
  }
  toRprCompressed(arr, offset, a3) {
    this.tm.setBuff(this.pOp1, a3);
    if (a3.byteLength == this.F.n8 * 3) {
      this.tm.instance.exports[this.prefix + "_toAffine"](this.pOp1, this.pOp1);
    } else if (a3.byteLength != this.F.n8 * 2) {
      throw new Error("invalid point size");
    }
    this.tm.instance.exports[this.prefix + "_LEMtoC"](this.pOp1, this.pOp1);
    const res = this.tm.getBuff(this.pOp1, this.F.n8);
    arr.set(res, offset);
  }
  fromRprCompressed(arr, offset) {
    const buff = arr.slice(offset, offset + this.F.n8);
    this.tm.setBuff(this.pOp1, buff);
    this.tm.instance.exports[this.prefix + "_CtoLEM"](this.pOp1, this.pOp2);
    return this.tm.getBuff(this.pOp2, this.F.n8 * 2);
  }
  toUncompressed(a3) {
    const buff = new Uint8Array(this.F.n8 * 2);
    this.toRprUncompressed(buff, 0, a3);
    return buff;
  }
  toRprLEM(arr, offset, a3) {
    if (a3.byteLength == this.F.n8 * 2) {
      arr.set(a3, offset);
      return;
    } else if (a3.byteLength == this.F.n8 * 3) {
      this.tm.setBuff(this.pOp1, a3);
      this.tm.instance.exports[this.prefix + "_toAffine"](this.pOp1, this.pOp1);
      const res = this.tm.getBuff(this.pOp1, this.F.n8 * 2);
      arr.set(res, offset);
    } else {
      throw new Error("invalid point size");
    }
  }
  fromRprLEM(arr, offset) {
    offset = offset || 0;
    return arr.slice(offset, offset + this.F.n8 * 2);
  }
  toString(a3, radix) {
    if (a3.byteLength == this.F.n8 * 3) {
      const x3 = this.F.toString(a3.slice(0, this.F.n8), radix);
      const y3 = this.F.toString(a3.slice(this.F.n8, this.F.n8 * 2), radix);
      const z2 = this.F.toString(a3.slice(this.F.n8 * 2), radix);
      return `[ ${x3}, ${y3}, ${z2} ]`;
    } else if (a3.byteLength == this.F.n8 * 2) {
      const x3 = this.F.toString(a3.slice(0, this.F.n8), radix);
      const y3 = this.F.toString(a3.slice(this.F.n8), radix);
      return `[ ${x3}, ${y3} ]`;
    } else {
      throw new Error("invalid point size");
    }
  }
  isValid(a3) {
    if (this.isZero(a3))
      return true;
    const F5 = this.F;
    const aa = this.toAffine(a3);
    const x3 = aa.slice(0, this.F.n8);
    const y3 = aa.slice(this.F.n8, this.F.n8 * 2);
    const x3b = F5.add(F5.mul(F5.square(x3), x3), this.b);
    const y22 = F5.square(y3);
    return F5.eq(x3b, y22);
  }
  fromRng(rng) {
    const F5 = this.F;
    let P2 = [];
    let greatest;
    let x3b;
    do {
      P2[0] = F5.fromRng(rng);
      greatest = rng.nextBool();
      x3b = F5.add(F5.mul(F5.square(P2[0]), P2[0]), this.b);
    } while (!F5.isSquare(x3b));
    P2[1] = F5.sqrt(x3b);
    const s2 = F5.isNegative(P2[1]);
    if (greatest ^ s2)
      P2[1] = F5.neg(P2[1]);
    let Pbuff = new Uint8Array(this.F.n8 * 2);
    Pbuff.set(P2[0]);
    Pbuff.set(P2[1], this.F.n8);
    if (this.cofactor) {
      Pbuff = this.timesScalar(Pbuff, this.cofactor);
    }
    return Pbuff;
  }
  toObject(a3) {
    if (this.isZero(a3)) {
      return [
        this.F.toObject(this.F.zero),
        this.F.toObject(this.F.one),
        this.F.toObject(this.F.zero)
      ];
    }
    const x3 = this.F.toObject(a3.slice(0, this.F.n8));
    const y3 = this.F.toObject(a3.slice(this.F.n8, this.F.n8 * 2));
    let z2;
    if (a3.byteLength == this.F.n8 * 3) {
      z2 = this.F.toObject(a3.slice(this.F.n8 * 2, this.F.n8 * 3));
    } else {
      z2 = this.F.toObject(this.F.one);
    }
    return [x3, y3, z2];
  }
  fromObject(a3) {
    const x3 = this.F.fromObject(a3[0]);
    const y3 = this.F.fromObject(a3[1]);
    let z2;
    if (a3.length == 3) {
      z2 = this.F.fromObject(a3[2]);
    } else {
      z2 = this.F.one;
    }
    if (this.F.isZero(z2, this.F.one)) {
      return this.zeroAffine;
    } else if (this.F.eq(z2, this.F.one)) {
      const buff = new Uint8Array(this.F.n8 * 2);
      buff.set(x3);
      buff.set(y3, this.F.n8);
      return buff;
    } else {
      const buff = new Uint8Array(this.F.n8 * 3);
      buff.set(x3);
      buff.set(y3, this.F.n8);
      buff.set(z2, this.F.n8 * 2);
      return buff;
    }
  }
  e(a3) {
    if (a3 instanceof Uint8Array)
      return a3;
    return this.fromObject(a3);
  }
  x(a3) {
    const tmp = this.toAffine(a3);
    return tmp.slice(0, this.F.n8);
  }
  y(a3) {
    const tmp = this.toAffine(a3);
    return tmp.slice(this.F.n8);
  }
};
function thread(self2) {
  const MAXMEM = 32767;
  let instance;
  let memory;
  if (self2) {
    self2.onmessage = function(e4) {
      let data;
      if (e4.data) {
        data = e4.data;
      } else {
        data = e4;
      }
      if (data[0].cmd == "INIT") {
        init2(data[0]).then(function() {
          self2.postMessage(data.result);
        });
      } else if (data[0].cmd == "TERMINATE") {
        self2.close();
      } else {
        const res = runTask(data);
        self2.postMessage(res);
      }
    };
  }
  async function init2(data) {
    const code = new Uint8Array(data.code);
    const wasmModule = await WebAssembly.compile(code);
    memory = new WebAssembly.Memory({ initial: data.init, maximum: MAXMEM });
    instance = await WebAssembly.instantiate(wasmModule, {
      env: {
        "memory": memory
      }
    });
  }
  function alloc2(length) {
    const u322 = new Uint32Array(memory.buffer, 0, 1);
    while (u322[0] & 3)
      u322[0]++;
    const res = u322[0];
    u322[0] += length;
    if (u322[0] + length > memory.buffer.byteLength) {
      const currentPages = memory.buffer.byteLength / 65536;
      let requiredPages = Math.floor((u322[0] + length) / 65536) + 1;
      if (requiredPages > MAXMEM)
        requiredPages = MAXMEM;
      memory.grow(requiredPages - currentPages);
    }
    return res;
  }
  function allocBuffer(buffer) {
    const p2 = alloc2(buffer.byteLength);
    setBuffer(p2, buffer);
    return p2;
  }
  function getBuffer(pointer, length) {
    const u8 = new Uint8Array(memory.buffer);
    return new Uint8Array(u8.buffer, u8.byteOffset + pointer, length);
  }
  function setBuffer(pointer, buffer) {
    const u8 = new Uint8Array(memory.buffer);
    u8.set(new Uint8Array(buffer), pointer);
  }
  function runTask(task) {
    if (task[0].cmd == "INIT") {
      return init2(task[0]);
    }
    const ctx = {
      vars: [],
      out: []
    };
    const u32a = new Uint32Array(memory.buffer, 0, 1);
    const oldAlloc = u32a[0];
    for (let i3 = 0; i3 < task.length; i3++) {
      switch (task[i3].cmd) {
        case "ALLOCSET":
          ctx.vars[task[i3].var] = allocBuffer(task[i3].buff);
          break;
        case "ALLOC":
          ctx.vars[task[i3].var] = alloc2(task[i3].len);
          break;
        case "SET":
          setBuffer(ctx.vars[task[i3].var], task[i3].buff);
          break;
        case "CALL": {
          const params = [];
          for (let j3 = 0; j3 < task[i3].params.length; j3++) {
            const p2 = task[i3].params[j3];
            if (typeof p2.var !== "undefined") {
              params.push(ctx.vars[p2.var] + (p2.offset || 0));
            } else if (typeof p2.val != "undefined") {
              params.push(p2.val);
            }
          }
          instance.exports[task[i3].fnName](...params);
          break;
        }
        case "GET":
          ctx.out[task[i3].out] = getBuffer(ctx.vars[task[i3].var], task[i3].len).slice();
          break;
        default:
          throw new Error("Invalid cmd");
      }
    }
    const u32b = new Uint32Array(memory.buffer, 0, 1);
    u32b[0] = oldAlloc;
    return ctx.out;
  }
  return runTask;
}
var os = {};
var browser$1 = Worker;
var MEM_SIZE = 25;
var Deferred = class {
  constructor() {
    this.promise = new Promise((resolve, reject) => {
      this.reject = reject;
      this.resolve = resolve;
    });
  }
};
function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
function stringToBase64(str) {
  {
    return globalThis.btoa(str);
  }
}
var threadSource = stringToBase64("(" + thread.toString() + ")(self)");
var workerSource = "data:application/javascript;base64," + threadSource;
async function buildThreadManager(wasm, singleThread) {
  const tm = new ThreadManager();
  tm.memory = new WebAssembly.Memory({ initial: MEM_SIZE });
  tm.u8 = new Uint8Array(tm.memory.buffer);
  tm.u32 = new Uint32Array(tm.memory.buffer);
  const wasmModule = await WebAssembly.compile(wasm.code);
  tm.instance = await WebAssembly.instantiate(wasmModule, {
    env: {
      "memory": tm.memory
    }
  });
  tm.singleThread = singleThread;
  tm.initalPFree = tm.u32[0];
  tm.pq = wasm.pq;
  tm.pr = wasm.pr;
  tm.pG1gen = wasm.pG1gen;
  tm.pG1zero = wasm.pG1zero;
  tm.pG2gen = wasm.pG2gen;
  tm.pG2zero = wasm.pG2zero;
  tm.pOneT = wasm.pOneT;
  if (singleThread) {
    tm.code = wasm.code;
    tm.taskManager = thread();
    await tm.taskManager([{
      cmd: "INIT",
      init: MEM_SIZE,
      code: tm.code.slice()
    }]);
    tm.concurrency = 1;
  } else {
    tm.workers = [];
    tm.pendingDeferreds = [];
    tm.working = [];
    let concurrency;
    if (typeof navigator === "object" && navigator.hardwareConcurrency) {
      concurrency = navigator.hardwareConcurrency;
    } else {
      concurrency = os.cpus().length;
    }
    if (concurrency == 0) {
      concurrency = 2;
    }
    if (concurrency > 64)
      concurrency = 64;
    tm.concurrency = concurrency;
    for (let i3 = 0; i3 < concurrency; i3++) {
      tm.workers[i3] = new browser$1(workerSource);
      tm.workers[i3].addEventListener("message", getOnMsg(i3));
      tm.working[i3] = false;
    }
    const initPromises = [];
    for (let i3 = 0; i3 < tm.workers.length; i3++) {
      const copyCode = wasm.code.slice();
      initPromises.push(tm.postAction(i3, [{
        cmd: "INIT",
        init: MEM_SIZE,
        code: copyCode
      }], [copyCode.buffer]));
    }
    await Promise.all(initPromises);
  }
  return tm;
  function getOnMsg(i3) {
    return function(e4) {
      let data;
      if (e4 && e4.data) {
        data = e4.data;
      } else {
        data = e4;
      }
      tm.working[i3] = false;
      tm.pendingDeferreds[i3].resolve(data);
      tm.processWorks();
    };
  }
}
var ThreadManager = class {
  constructor() {
    this.actionQueue = [];
    this.oldPFree = 0;
  }
  startSyncOp() {
    if (this.oldPFree != 0)
      throw new Error("Sync operation in progress");
    this.oldPFree = this.u32[0];
  }
  endSyncOp() {
    if (this.oldPFree == 0)
      throw new Error("No sync operation in progress");
    this.u32[0] = this.oldPFree;
    this.oldPFree = 0;
  }
  postAction(workerId, e4, transfers, _deferred) {
    if (this.working[workerId]) {
      throw new Error("Posting a job t a working worker");
    }
    this.working[workerId] = true;
    this.pendingDeferreds[workerId] = _deferred ? _deferred : new Deferred();
    this.workers[workerId].postMessage(e4, transfers);
    return this.pendingDeferreds[workerId].promise;
  }
  processWorks() {
    for (let i3 = 0; i3 < this.workers.length && this.actionQueue.length > 0; i3++) {
      if (this.working[i3] == false) {
        const work = this.actionQueue.shift();
        this.postAction(i3, work.data, work.transfers, work.deferred);
      }
    }
  }
  queueAction(actionData, transfers) {
    const d2 = new Deferred();
    if (this.singleThread) {
      const res = this.taskManager(actionData);
      d2.resolve(res);
    } else {
      this.actionQueue.push({
        data: actionData,
        transfers,
        deferred: d2
      });
      this.processWorks();
    }
    return d2.promise;
  }
  resetMemory() {
    this.u32[0] = this.initalPFree;
  }
  allocBuff(buff) {
    const pointer = this.alloc(buff.byteLength);
    this.setBuff(pointer, buff);
    return pointer;
  }
  getBuff(pointer, length) {
    return this.u8.slice(pointer, pointer + length);
  }
  setBuff(pointer, buffer) {
    this.u8.set(new Uint8Array(buffer), pointer);
  }
  alloc(length) {
    while (this.u32[0] & 3)
      this.u32[0]++;
    const res = this.u32[0];
    this.u32[0] += length;
    return res;
  }
  async terminate() {
    for (let i3 = 0; i3 < this.workers.length; i3++) {
      this.workers[i3].postMessage([{ cmd: "TERMINATE" }]);
    }
    await sleep(200);
  }
};
function buildBatchApplyKey(curve, groupName) {
  const G = curve[groupName];
  const Fr = curve.Fr;
  const tm = curve.tm;
  curve[groupName].batchApplyKey = async function(buff, first, inc, inType, outType) {
    inType = inType || "affine";
    outType = outType || "affine";
    let fnName, fnAffine;
    let sGin, sGmid, sGout;
    if (groupName == "G1") {
      if (inType == "jacobian") {
        sGin = G.F.n8 * 3;
        fnName = "g1m_batchApplyKey";
      } else {
        sGin = G.F.n8 * 2;
        fnName = "g1m_batchApplyKeyMixed";
      }
      sGmid = G.F.n8 * 3;
      if (outType == "jacobian") {
        sGout = G.F.n8 * 3;
      } else {
        fnAffine = "g1m_batchToAffine";
        sGout = G.F.n8 * 2;
      }
    } else if (groupName == "G2") {
      if (inType == "jacobian") {
        sGin = G.F.n8 * 3;
        fnName = "g2m_batchApplyKey";
      } else {
        sGin = G.F.n8 * 2;
        fnName = "g2m_batchApplyKeyMixed";
      }
      sGmid = G.F.n8 * 3;
      if (outType == "jacobian") {
        sGout = G.F.n8 * 3;
      } else {
        fnAffine = "g2m_batchToAffine";
        sGout = G.F.n8 * 2;
      }
    } else if (groupName == "Fr") {
      fnName = "frm_batchApplyKey";
      sGin = G.n8;
      sGmid = G.n8;
      sGout = G.n8;
    } else {
      throw new Error("Invalid group: " + groupName);
    }
    const nPoints = Math.floor(buff.byteLength / sGin);
    const pointsPerChunk = Math.floor(nPoints / tm.concurrency);
    const opPromises = [];
    inc = Fr.e(inc);
    let t3 = Fr.e(first);
    for (let i3 = 0; i3 < tm.concurrency; i3++) {
      let n2;
      if (i3 < tm.concurrency - 1) {
        n2 = pointsPerChunk;
      } else {
        n2 = nPoints - i3 * pointsPerChunk;
      }
      if (n2 == 0)
        continue;
      const task = [];
      task.push({
        cmd: "ALLOCSET",
        var: 0,
        buff: buff.slice(i3 * pointsPerChunk * sGin, i3 * pointsPerChunk * sGin + n2 * sGin)
      });
      task.push({ cmd: "ALLOCSET", var: 1, buff: t3 });
      task.push({ cmd: "ALLOCSET", var: 2, buff: inc });
      task.push({ cmd: "ALLOC", var: 3, len: n2 * Math.max(sGmid, sGout) });
      task.push({
        cmd: "CALL",
        fnName,
        params: [
          { var: 0 },
          { val: n2 },
          { var: 1 },
          { var: 2 },
          { var: 3 }
        ]
      });
      if (fnAffine) {
        task.push({
          cmd: "CALL",
          fnName: fnAffine,
          params: [
            { var: 3 },
            { val: n2 },
            { var: 3 }
          ]
        });
      }
      task.push({ cmd: "GET", out: 0, var: 3, len: n2 * sGout });
      opPromises.push(tm.queueAction(task));
      t3 = Fr.mul(t3, Fr.exp(inc, n2));
    }
    const result = await Promise.all(opPromises);
    let outBuff;
    if (buff instanceof BigBuffer) {
      outBuff = new BigBuffer(nPoints * sGout);
    } else {
      outBuff = new Uint8Array(nPoints * sGout);
    }
    let p2 = 0;
    for (let i3 = 0; i3 < result.length; i3++) {
      outBuff.set(result[i3][0], p2);
      p2 += result[i3][0].byteLength;
    }
    return outBuff;
  };
}
function buildPairing(curve) {
  const tm = curve.tm;
  curve.pairing = function pairing(a3, b3) {
    tm.startSyncOp();
    const pA = tm.allocBuff(curve.G1.toJacobian(a3));
    const pB = tm.allocBuff(curve.G2.toJacobian(b3));
    const pRes = tm.alloc(curve.Gt.n8);
    tm.instance.exports[curve.name + "_pairing"](pA, pB, pRes);
    const res = tm.getBuff(pRes, curve.Gt.n8);
    tm.endSyncOp();
    return res;
  };
  curve.pairingEq = async function pairingEq() {
    let buffCt;
    let nEqs;
    if (arguments.length % 2 == 1) {
      buffCt = arguments[arguments.length - 1];
      nEqs = (arguments.length - 1) / 2;
    } else {
      buffCt = curve.Gt.one;
      nEqs = arguments.length / 2;
    }
    const opPromises = [];
    for (let i3 = 0; i3 < nEqs; i3++) {
      const task = [];
      const g1Buff = curve.G1.toJacobian(arguments[i3 * 2]);
      task.push({ cmd: "ALLOCSET", var: 0, buff: g1Buff });
      task.push({ cmd: "ALLOC", var: 1, len: curve.prePSize });
      const g2Buff = curve.G2.toJacobian(arguments[i3 * 2 + 1]);
      task.push({ cmd: "ALLOCSET", var: 2, buff: g2Buff });
      task.push({ cmd: "ALLOC", var: 3, len: curve.preQSize });
      task.push({ cmd: "ALLOC", var: 4, len: curve.Gt.n8 });
      task.push({
        cmd: "CALL",
        fnName: curve.name + "_prepareG1",
        params: [
          { var: 0 },
          { var: 1 }
        ]
      });
      task.push({
        cmd: "CALL",
        fnName: curve.name + "_prepareG2",
        params: [
          { var: 2 },
          { var: 3 }
        ]
      });
      task.push({
        cmd: "CALL",
        fnName: curve.name + "_millerLoop",
        params: [
          { var: 1 },
          { var: 3 },
          { var: 4 }
        ]
      });
      task.push({ cmd: "GET", out: 0, var: 4, len: curve.Gt.n8 });
      opPromises.push(tm.queueAction(task));
    }
    const result = await Promise.all(opPromises);
    tm.startSyncOp();
    const pRes = tm.alloc(curve.Gt.n8);
    tm.instance.exports.ftm_one(pRes);
    for (let i3 = 0; i3 < result.length; i3++) {
      const pMR = tm.allocBuff(result[i3][0]);
      tm.instance.exports.ftm_mul(pRes, pMR, pRes);
    }
    tm.instance.exports[curve.name + "_finalExponentiation"](pRes, pRes);
    const pCt = tm.allocBuff(buffCt);
    const r3 = !!tm.instance.exports.ftm_eq(pRes, pCt);
    tm.endSyncOp();
    return r3;
  };
  curve.prepareG1 = function(p2) {
    this.tm.startSyncOp();
    const pP = this.tm.allocBuff(p2);
    const pPrepP = this.tm.alloc(this.prePSize);
    this.tm.instance.exports[this.name + "_prepareG1"](pP, pPrepP);
    const res = this.tm.getBuff(pPrepP, this.prePSize);
    this.tm.endSyncOp();
    return res;
  };
  curve.prepareG2 = function(q) {
    this.tm.startSyncOp();
    const pQ = this.tm.allocBuff(q);
    const pPrepQ = this.tm.alloc(this.preQSize);
    this.tm.instance.exports[this.name + "_prepareG2"](pQ, pPrepQ);
    const res = this.tm.getBuff(pPrepQ, this.preQSize);
    this.tm.endSyncOp();
    return res;
  };
  curve.millerLoop = function(preP, preQ) {
    this.tm.startSyncOp();
    const pPreP = this.tm.allocBuff(preP);
    const pPreQ = this.tm.allocBuff(preQ);
    const pRes = this.tm.alloc(this.Gt.n8);
    this.tm.instance.exports[this.name + "_millerLoop"](pPreP, pPreQ, pRes);
    const res = this.tm.getBuff(pRes, this.Gt.n8);
    this.tm.endSyncOp();
    return res;
  };
  curve.finalExponentiation = function(a3) {
    this.tm.startSyncOp();
    const pA = this.tm.allocBuff(a3);
    const pRes = this.tm.alloc(this.Gt.n8);
    this.tm.instance.exports[this.name + "_finalExponentiation"](pA, pRes);
    const res = this.tm.getBuff(pRes, this.Gt.n8);
    this.tm.endSyncOp();
    return res;
  };
}
var pTSizes = [
  1,
  1,
  1,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  13,
  14,
  15,
  16,
  16,
  17,
  17,
  17,
  17,
  17,
  17,
  17,
  17,
  17,
  17
];
function buildMultiexp2(curve, groupName) {
  const G = curve[groupName];
  const tm = G.tm;
  async function _multiExpChunk(buffBases, buffScalars, inType, logger52, logText) {
    if (!(buffBases instanceof Uint8Array)) {
      if (logger52)
        logger52.error(`${logText} _multiExpChunk buffBases is not Uint8Array`);
      throw new Error(`${logText} _multiExpChunk buffBases is not Uint8Array`);
    }
    if (!(buffScalars instanceof Uint8Array)) {
      if (logger52)
        logger52.error(`${logText} _multiExpChunk buffScalars is not Uint8Array`);
      throw new Error(`${logText} _multiExpChunk buffScalars is not Uint8Array`);
    }
    inType = inType || "affine";
    let sGIn;
    let fnName;
    if (groupName == "G1") {
      if (inType == "affine") {
        fnName = "g1m_multiexpAffine_chunk";
        sGIn = G.F.n8 * 2;
      } else {
        fnName = "g1m_multiexp_chunk";
        sGIn = G.F.n8 * 3;
      }
    } else if (groupName == "G2") {
      if (inType == "affine") {
        fnName = "g2m_multiexpAffine_chunk";
        sGIn = G.F.n8 * 2;
      } else {
        fnName = "g2m_multiexp_chunk";
        sGIn = G.F.n8 * 3;
      }
    } else {
      throw new Error("Invalid group");
    }
    const nPoints = Math.floor(buffBases.byteLength / sGIn);
    if (nPoints == 0)
      return G.zero;
    const sScalar = Math.floor(buffScalars.byteLength / nPoints);
    if (sScalar * nPoints != buffScalars.byteLength) {
      throw new Error("Scalar size does not match");
    }
    const bitChunkSize = pTSizes[log2$1(nPoints)];
    const nChunks = Math.floor((sScalar * 8 - 1) / bitChunkSize) + 1;
    const opPromises = [];
    for (let i3 = 0; i3 < nChunks; i3++) {
      const task = [
        { cmd: "ALLOCSET", var: 0, buff: buffBases },
        { cmd: "ALLOCSET", var: 1, buff: buffScalars },
        { cmd: "ALLOC", var: 2, len: G.F.n8 * 3 },
        {
          cmd: "CALL",
          fnName,
          params: [
            { var: 0 },
            { var: 1 },
            { val: sScalar },
            { val: nPoints },
            { val: i3 * bitChunkSize },
            { val: Math.min(sScalar * 8 - i3 * bitChunkSize, bitChunkSize) },
            { var: 2 }
          ]
        },
        { cmd: "GET", out: 0, var: 2, len: G.F.n8 * 3 }
      ];
      opPromises.push(G.tm.queueAction(task));
    }
    const result = await Promise.all(opPromises);
    let res = G.zero;
    for (let i3 = result.length - 1; i3 >= 0; i3--) {
      if (!G.isZero(res)) {
        for (let j3 = 0; j3 < bitChunkSize; j3++)
          res = G.double(res);
      }
      res = G.add(res, result[i3][0]);
    }
    return res;
  }
  async function _multiExp(buffBases, buffScalars, inType, logger52, logText) {
    const MAX_CHUNK_SIZE = 1 << 22;
    const MIN_CHUNK_SIZE = 1 << 10;
    let sGIn;
    if (groupName == "G1") {
      if (inType == "affine") {
        sGIn = G.F.n8 * 2;
      } else {
        sGIn = G.F.n8 * 3;
      }
    } else if (groupName == "G2") {
      if (inType == "affine") {
        sGIn = G.F.n8 * 2;
      } else {
        sGIn = G.F.n8 * 3;
      }
    } else {
      throw new Error("Invalid group");
    }
    const nPoints = Math.floor(buffBases.byteLength / sGIn);
    const sScalar = Math.floor(buffScalars.byteLength / nPoints);
    if (sScalar * nPoints != buffScalars.byteLength) {
      throw new Error("Scalar size does not match");
    }
    const bitChunkSize = pTSizes[log2$1(nPoints)];
    const nChunks = Math.floor((sScalar * 8 - 1) / bitChunkSize) + 1;
    let chunkSize;
    chunkSize = Math.floor(nPoints / (tm.concurrency / nChunks));
    if (chunkSize > MAX_CHUNK_SIZE)
      chunkSize = MAX_CHUNK_SIZE;
    if (chunkSize < MIN_CHUNK_SIZE)
      chunkSize = MIN_CHUNK_SIZE;
    const opPromises = [];
    for (let i3 = 0; i3 < nPoints; i3 += chunkSize) {
      if (logger52)
        logger52.debug(`Multiexp start: ${logText}: ${i3}/${nPoints}`);
      const n2 = Math.min(nPoints - i3, chunkSize);
      const buffBasesChunk = buffBases.slice(i3 * sGIn, (i3 + n2) * sGIn);
      const buffScalarsChunk = buffScalars.slice(i3 * sScalar, (i3 + n2) * sScalar);
      opPromises.push(_multiExpChunk(buffBasesChunk, buffScalarsChunk, inType, logger52, logText).then((r3) => {
        if (logger52)
          logger52.debug(`Multiexp end: ${logText}: ${i3}/${nPoints}`);
        return r3;
      }));
    }
    const result = await Promise.all(opPromises);
    let res = G.zero;
    for (let i3 = result.length - 1; i3 >= 0; i3--) {
      res = G.add(res, result[i3]);
    }
    return res;
  }
  G.multiExp = async function multiExpAffine(buffBases, buffScalars, logger52, logText) {
    return await _multiExp(buffBases, buffScalars, "jacobian", logger52, logText);
  };
  G.multiExpAffine = async function multiExpAffine(buffBases, buffScalars, logger52, logText) {
    return await _multiExp(buffBases, buffScalars, "affine", logger52, logText);
  };
}
function buildFFT2(curve, groupName) {
  const G = curve[groupName];
  const Fr = curve.Fr;
  const tm = G.tm;
  async function _fft(buff, inverse, inType, outType, logger52, loggerTxt) {
    inType = inType || "affine";
    outType = outType || "affine";
    const MAX_BITS_THREAD = 14;
    let sIn, sMid, sOut, fnIn2Mid, fnMid2Out, fnFFTMix, fnFFTJoin, fnFFTFinal;
    if (groupName == "G1") {
      if (inType == "affine") {
        sIn = G.F.n8 * 2;
        fnIn2Mid = "g1m_batchToJacobian";
      } else {
        sIn = G.F.n8 * 3;
      }
      sMid = G.F.n8 * 3;
      if (inverse) {
        fnFFTFinal = "g1m_fftFinal";
      }
      fnFFTJoin = "g1m_fftJoin";
      fnFFTMix = "g1m_fftMix";
      if (outType == "affine") {
        sOut = G.F.n8 * 2;
        fnMid2Out = "g1m_batchToAffine";
      } else {
        sOut = G.F.n8 * 3;
      }
    } else if (groupName == "G2") {
      if (inType == "affine") {
        sIn = G.F.n8 * 2;
        fnIn2Mid = "g2m_batchToJacobian";
      } else {
        sIn = G.F.n8 * 3;
      }
      sMid = G.F.n8 * 3;
      if (inverse) {
        fnFFTFinal = "g2m_fftFinal";
      }
      fnFFTJoin = "g2m_fftJoin";
      fnFFTMix = "g2m_fftMix";
      if (outType == "affine") {
        sOut = G.F.n8 * 2;
        fnMid2Out = "g2m_batchToAffine";
      } else {
        sOut = G.F.n8 * 3;
      }
    } else if (groupName == "Fr") {
      sIn = G.n8;
      sMid = G.n8;
      sOut = G.n8;
      if (inverse) {
        fnFFTFinal = "frm_fftFinal";
      }
      fnFFTMix = "frm_fftMix";
      fnFFTJoin = "frm_fftJoin";
    }
    let returnArray = false;
    if (Array.isArray(buff)) {
      buff = array2buffer(buff, sIn);
      returnArray = true;
    } else {
      buff = buff.slice(0, buff.byteLength);
    }
    const nPoints = buff.byteLength / sIn;
    const bits2 = log2$1(nPoints);
    if (1 << bits2 != nPoints) {
      throw new Error("fft must be multiple of 2");
    }
    if (bits2 == Fr.s + 1) {
      let buffOut2;
      if (inverse) {
        buffOut2 = await _fftExtInv(buff, inType, outType, logger52, loggerTxt);
      } else {
        buffOut2 = await _fftExt(buff, inType, outType, logger52, loggerTxt);
      }
      if (returnArray) {
        return buffer2array(buffOut2, sOut);
      } else {
        return buffOut2;
      }
    }
    let inv;
    if (inverse) {
      inv = Fr.inv(Fr.e(nPoints));
    }
    let buffOut;
    buffReverseBits2(buff, sIn);
    let chunks;
    let pointsInChunk = Math.min(1 << MAX_BITS_THREAD, nPoints);
    let nChunks = nPoints / pointsInChunk;
    while (nChunks < tm.concurrency && pointsInChunk >= 16) {
      nChunks *= 2;
      pointsInChunk /= 2;
    }
    const l2Chunk = log2$1(pointsInChunk);
    const promises = [];
    for (let i3 = 0; i3 < nChunks; i3++) {
      if (logger52)
        logger52.debug(`${loggerTxt}: fft ${bits2} mix start: ${i3}/${nChunks}`);
      const task = [];
      task.push({ cmd: "ALLOC", var: 0, len: sMid * pointsInChunk });
      const buffChunk = buff.slice(pointsInChunk * i3 * sIn, pointsInChunk * (i3 + 1) * sIn);
      task.push({ cmd: "SET", var: 0, buff: buffChunk });
      if (fnIn2Mid) {
        task.push({ cmd: "CALL", fnName: fnIn2Mid, params: [{ var: 0 }, { val: pointsInChunk }, { var: 0 }] });
      }
      for (let j3 = 1; j3 <= l2Chunk; j3++) {
        task.push({ cmd: "CALL", fnName: fnFFTMix, params: [{ var: 0 }, { val: pointsInChunk }, { val: j3 }] });
      }
      if (l2Chunk == bits2) {
        if (fnFFTFinal) {
          task.push({ cmd: "ALLOCSET", var: 1, buff: inv });
          task.push({
            cmd: "CALL",
            fnName: fnFFTFinal,
            params: [
              { var: 0 },
              { val: pointsInChunk },
              { var: 1 }
            ]
          });
        }
        if (fnMid2Out) {
          task.push({ cmd: "CALL", fnName: fnMid2Out, params: [{ var: 0 }, { val: pointsInChunk }, { var: 0 }] });
        }
        task.push({ cmd: "GET", out: 0, var: 0, len: pointsInChunk * sOut });
      } else {
        task.push({ cmd: "GET", out: 0, var: 0, len: sMid * pointsInChunk });
      }
      promises.push(tm.queueAction(task).then((r3) => {
        if (logger52)
          logger52.debug(`${loggerTxt}: fft ${bits2} mix end: ${i3}/${nChunks}`);
        return r3;
      }));
    }
    chunks = await Promise.all(promises);
    for (let i3 = 0; i3 < nChunks; i3++)
      chunks[i3] = chunks[i3][0];
    for (let i3 = l2Chunk + 1; i3 <= bits2; i3++) {
      if (logger52)
        logger52.debug(`${loggerTxt}: fft  ${bits2}  join: ${i3}/${bits2}`);
      const nGroups = 1 << bits2 - i3;
      const nChunksPerGroup = nChunks / nGroups;
      const opPromises = [];
      for (let j3 = 0; j3 < nGroups; j3++) {
        for (let k3 = 0; k3 < nChunksPerGroup / 2; k3++) {
          const first = Fr.exp(Fr.w[i3], k3 * pointsInChunk);
          const inc = Fr.w[i3];
          const o1 = j3 * nChunksPerGroup + k3;
          const o22 = j3 * nChunksPerGroup + k3 + nChunksPerGroup / 2;
          const task = [];
          task.push({ cmd: "ALLOCSET", var: 0, buff: chunks[o1] });
          task.push({ cmd: "ALLOCSET", var: 1, buff: chunks[o22] });
          task.push({ cmd: "ALLOCSET", var: 2, buff: first });
          task.push({ cmd: "ALLOCSET", var: 3, buff: inc });
          task.push({
            cmd: "CALL",
            fnName: fnFFTJoin,
            params: [
              { var: 0 },
              { var: 1 },
              { val: pointsInChunk },
              { var: 2 },
              { var: 3 }
            ]
          });
          if (i3 == bits2) {
            if (fnFFTFinal) {
              task.push({ cmd: "ALLOCSET", var: 4, buff: inv });
              task.push({
                cmd: "CALL",
                fnName: fnFFTFinal,
                params: [
                  { var: 0 },
                  { val: pointsInChunk },
                  { var: 4 }
                ]
              });
              task.push({
                cmd: "CALL",
                fnName: fnFFTFinal,
                params: [
                  { var: 1 },
                  { val: pointsInChunk },
                  { var: 4 }
                ]
              });
            }
            if (fnMid2Out) {
              task.push({ cmd: "CALL", fnName: fnMid2Out, params: [{ var: 0 }, { val: pointsInChunk }, { var: 0 }] });
              task.push({ cmd: "CALL", fnName: fnMid2Out, params: [{ var: 1 }, { val: pointsInChunk }, { var: 1 }] });
            }
            task.push({ cmd: "GET", out: 0, var: 0, len: pointsInChunk * sOut });
            task.push({ cmd: "GET", out: 1, var: 1, len: pointsInChunk * sOut });
          } else {
            task.push({ cmd: "GET", out: 0, var: 0, len: pointsInChunk * sMid });
            task.push({ cmd: "GET", out: 1, var: 1, len: pointsInChunk * sMid });
          }
          opPromises.push(tm.queueAction(task).then((r3) => {
            if (logger52)
              logger52.debug(`${loggerTxt}: fft ${bits2} join  ${i3}/${bits2}  ${j3 + 1}/${nGroups} ${k3}/${nChunksPerGroup / 2}`);
            return r3;
          }));
        }
      }
      const res = await Promise.all(opPromises);
      for (let j3 = 0; j3 < nGroups; j3++) {
        for (let k3 = 0; k3 < nChunksPerGroup / 2; k3++) {
          const o1 = j3 * nChunksPerGroup + k3;
          const o22 = j3 * nChunksPerGroup + k3 + nChunksPerGroup / 2;
          const resChunk = res.shift();
          chunks[o1] = resChunk[0];
          chunks[o22] = resChunk[1];
        }
      }
    }
    if (buff instanceof BigBuffer) {
      buffOut = new BigBuffer(nPoints * sOut);
    } else {
      buffOut = new Uint8Array(nPoints * sOut);
    }
    if (inverse) {
      buffOut.set(chunks[0].slice((pointsInChunk - 1) * sOut));
      let p2 = sOut;
      for (let i3 = nChunks - 1; i3 > 0; i3--) {
        buffOut.set(chunks[i3], p2);
        p2 += pointsInChunk * sOut;
        delete chunks[i3];
      }
      buffOut.set(chunks[0].slice(0, (pointsInChunk - 1) * sOut), p2);
      delete chunks[0];
    } else {
      for (let i3 = 0; i3 < nChunks; i3++) {
        buffOut.set(chunks[i3], pointsInChunk * sOut * i3);
        delete chunks[i3];
      }
    }
    if (returnArray) {
      return buffer2array(buffOut, sOut);
    } else {
      return buffOut;
    }
  }
  async function _fftExt(buff, inType, outType, logger52, loggerTxt) {
    let b1, b22;
    b1 = buff.slice(0, buff.byteLength / 2);
    b22 = buff.slice(buff.byteLength / 2, buff.byteLength);
    const promises = [];
    [b1, b22] = await _fftJoinExt(b1, b22, "fftJoinExt", Fr.one, Fr.shift, inType, "jacobian", logger52, loggerTxt);
    promises.push(_fft(b1, false, "jacobian", outType, logger52, loggerTxt));
    promises.push(_fft(b22, false, "jacobian", outType, logger52, loggerTxt));
    const res1 = await Promise.all(promises);
    let buffOut;
    if (res1[0].byteLength > 1 << 28) {
      buffOut = new BigBuffer(res1[0].byteLength * 2);
    } else {
      buffOut = new Uint8Array(res1[0].byteLength * 2);
    }
    buffOut.set(res1[0]);
    buffOut.set(res1[1], res1[0].byteLength);
    return buffOut;
  }
  async function _fftExtInv(buff, inType, outType, logger52, loggerTxt) {
    let b1, b22;
    b1 = buff.slice(0, buff.byteLength / 2);
    b22 = buff.slice(buff.byteLength / 2, buff.byteLength);
    const promises = [];
    promises.push(_fft(b1, true, inType, "jacobian", logger52, loggerTxt));
    promises.push(_fft(b22, true, inType, "jacobian", logger52, loggerTxt));
    [b1, b22] = await Promise.all(promises);
    const res1 = await _fftJoinExt(b1, b22, "fftJoinExtInv", Fr.one, Fr.shiftInv, "jacobian", outType, logger52, loggerTxt);
    let buffOut;
    if (res1[0].byteLength > 1 << 28) {
      buffOut = new BigBuffer(res1[0].byteLength * 2);
    } else {
      buffOut = new Uint8Array(res1[0].byteLength * 2);
    }
    buffOut.set(res1[0]);
    buffOut.set(res1[1], res1[0].byteLength);
    return buffOut;
  }
  async function _fftJoinExt(buff1, buff2, fn, first, inc, inType, outType, logger52, loggerTxt) {
    const MAX_CHUNK_SIZE = 1 << 16;
    const MIN_CHUNK_SIZE = 1 << 4;
    let fnName;
    let fnIn2Mid, fnMid2Out;
    let sOut, sIn, sMid;
    if (groupName == "G1") {
      if (inType == "affine") {
        sIn = G.F.n8 * 2;
        fnIn2Mid = "g1m_batchToJacobian";
      } else {
        sIn = G.F.n8 * 3;
      }
      sMid = G.F.n8 * 3;
      fnName = "g1m_" + fn;
      if (outType == "affine") {
        fnMid2Out = "g1m_batchToAffine";
        sOut = G.F.n8 * 2;
      } else {
        sOut = G.F.n8 * 3;
      }
    } else if (groupName == "G2") {
      if (inType == "affine") {
        sIn = G.F.n8 * 2;
        fnIn2Mid = "g2m_batchToJacobian";
      } else {
        sIn = G.F.n8 * 3;
      }
      fnName = "g2m_" + fn;
      sMid = G.F.n8 * 3;
      if (outType == "affine") {
        fnMid2Out = "g2m_batchToAffine";
        sOut = G.F.n8 * 2;
      } else {
        sOut = G.F.n8 * 3;
      }
    } else if (groupName == "Fr") {
      sIn = Fr.n8;
      sOut = Fr.n8;
      sMid = Fr.n8;
      fnName = "frm_" + fn;
    } else {
      throw new Error("Invalid group");
    }
    if (buff1.byteLength != buff2.byteLength) {
      throw new Error("Invalid buffer size");
    }
    const nPoints = Math.floor(buff1.byteLength / sIn);
    if (nPoints != 1 << log2$1(nPoints)) {
      throw new Error("Invalid number of points");
    }
    let chunkSize = Math.floor(nPoints / tm.concurrency);
    if (chunkSize < MIN_CHUNK_SIZE)
      chunkSize = MIN_CHUNK_SIZE;
    if (chunkSize > MAX_CHUNK_SIZE)
      chunkSize = MAX_CHUNK_SIZE;
    const opPromises = [];
    for (let i3 = 0; i3 < nPoints; i3 += chunkSize) {
      if (logger52)
        logger52.debug(`${loggerTxt}: fftJoinExt Start: ${i3}/${nPoints}`);
      const n2 = Math.min(nPoints - i3, chunkSize);
      const firstChunk = Fr.mul(first, Fr.exp(inc, i3));
      const task = [];
      const b1 = buff1.slice(i3 * sIn, (i3 + n2) * sIn);
      const b22 = buff2.slice(i3 * sIn, (i3 + n2) * sIn);
      task.push({ cmd: "ALLOC", var: 0, len: sMid * n2 });
      task.push({ cmd: "SET", var: 0, buff: b1 });
      task.push({ cmd: "ALLOC", var: 1, len: sMid * n2 });
      task.push({ cmd: "SET", var: 1, buff: b22 });
      task.push({ cmd: "ALLOCSET", var: 2, buff: firstChunk });
      task.push({ cmd: "ALLOCSET", var: 3, buff: inc });
      if (fnIn2Mid) {
        task.push({ cmd: "CALL", fnName: fnIn2Mid, params: [{ var: 0 }, { val: n2 }, { var: 0 }] });
        task.push({ cmd: "CALL", fnName: fnIn2Mid, params: [{ var: 1 }, { val: n2 }, { var: 1 }] });
      }
      task.push({
        cmd: "CALL",
        fnName,
        params: [
          { var: 0 },
          { var: 1 },
          { val: n2 },
          { var: 2 },
          { var: 3 },
          { val: Fr.s }
        ]
      });
      if (fnMid2Out) {
        task.push({ cmd: "CALL", fnName: fnMid2Out, params: [{ var: 0 }, { val: n2 }, { var: 0 }] });
        task.push({ cmd: "CALL", fnName: fnMid2Out, params: [{ var: 1 }, { val: n2 }, { var: 1 }] });
      }
      task.push({ cmd: "GET", out: 0, var: 0, len: n2 * sOut });
      task.push({ cmd: "GET", out: 1, var: 1, len: n2 * sOut });
      opPromises.push(tm.queueAction(task).then((r3) => {
        if (logger52)
          logger52.debug(`${loggerTxt}: fftJoinExt End: ${i3}/${nPoints}`);
        return r3;
      }));
    }
    const result = await Promise.all(opPromises);
    let fullBuffOut1;
    let fullBuffOut2;
    if (nPoints * sOut > 1 << 28) {
      fullBuffOut1 = new BigBuffer(nPoints * sOut);
      fullBuffOut2 = new BigBuffer(nPoints * sOut);
    } else {
      fullBuffOut1 = new Uint8Array(nPoints * sOut);
      fullBuffOut2 = new Uint8Array(nPoints * sOut);
    }
    let p2 = 0;
    for (let i3 = 0; i3 < result.length; i3++) {
      fullBuffOut1.set(result[i3][0], p2);
      fullBuffOut2.set(result[i3][1], p2);
      p2 += result[i3][0].byteLength;
    }
    return [fullBuffOut1, fullBuffOut2];
  }
  G.fft = async function(buff, inType, outType, logger52, loggerTxt) {
    return await _fft(buff, false, inType, outType, logger52, loggerTxt);
  };
  G.ifft = async function(buff, inType, outType, logger52, loggerTxt) {
    return await _fft(buff, true, inType, outType, logger52, loggerTxt);
  };
  G.lagrangeEvaluations = async function(buff, inType, outType, logger52, loggerTxt) {
    inType = inType || "affine";
    outType = outType || "affine";
    let sIn;
    if (groupName == "G1") {
      if (inType == "affine") {
        sIn = G.F.n8 * 2;
      } else {
        sIn = G.F.n8 * 3;
      }
    } else if (groupName == "G2") {
      if (inType == "affine") {
        sIn = G.F.n8 * 2;
      } else {
        sIn = G.F.n8 * 3;
      }
    } else if (groupName == "Fr") {
      sIn = Fr.n8;
    } else {
      throw new Error("Invalid group");
    }
    const nPoints = buff.byteLength / sIn;
    const bits2 = log2$1(nPoints);
    if (2 ** bits2 * sIn != buff.byteLength) {
      if (logger52)
        logger52.error("lagrangeEvaluations iinvalid input size");
      throw new Error("lagrangeEvaluations invalid Input size");
    }
    if (bits2 <= Fr.s) {
      return await G.ifft(buff, inType, outType, logger52, loggerTxt);
    }
    if (bits2 > Fr.s + 1) {
      if (logger52)
        logger52.error("lagrangeEvaluations input too big");
      throw new Error("lagrangeEvaluations input too big");
    }
    let t0 = buff.slice(0, buff.byteLength / 2);
    let t1 = buff.slice(buff.byteLength / 2, buff.byteLength);
    const shiftToSmallM = Fr.exp(Fr.shift, nPoints / 2);
    const sConst = Fr.inv(Fr.sub(Fr.one, shiftToSmallM));
    [t0, t1] = await _fftJoinExt(t0, t1, "prepareLagrangeEvaluation", sConst, Fr.shiftInv, inType, "jacobian", logger52, loggerTxt + " prep");
    const promises = [];
    promises.push(_fft(t0, true, "jacobian", outType, logger52, loggerTxt + " t0"));
    promises.push(_fft(t1, true, "jacobian", outType, logger52, loggerTxt + " t1"));
    [t0, t1] = await Promise.all(promises);
    let buffOut;
    if (t0.byteLength > 1 << 28) {
      buffOut = new BigBuffer(t0.byteLength * 2);
    } else {
      buffOut = new Uint8Array(t0.byteLength * 2);
    }
    buffOut.set(t0);
    buffOut.set(t1, t0.byteLength);
    return buffOut;
  };
  G.fftMix = async function fftMix(buff) {
    const sG = G.F.n8 * 3;
    let fnName, fnFFTJoin;
    if (groupName == "G1") {
      fnName = "g1m_fftMix";
      fnFFTJoin = "g1m_fftJoin";
    } else if (groupName == "G2") {
      fnName = "g2m_fftMix";
      fnFFTJoin = "g2m_fftJoin";
    } else if (groupName == "Fr") {
      fnName = "frm_fftMix";
      fnFFTJoin = "frm_fftJoin";
    } else {
      throw new Error("Invalid group");
    }
    const nPoints = Math.floor(buff.byteLength / sG);
    const power = log2$1(nPoints);
    let nChunks = 1 << log2$1(tm.concurrency);
    if (nPoints <= nChunks * 2)
      nChunks = 1;
    const pointsPerChunk = nPoints / nChunks;
    const powerChunk = log2$1(pointsPerChunk);
    const opPromises = [];
    for (let i3 = 0; i3 < nChunks; i3++) {
      const task = [];
      const b3 = buff.slice(i3 * pointsPerChunk * sG, (i3 + 1) * pointsPerChunk * sG);
      task.push({ cmd: "ALLOCSET", var: 0, buff: b3 });
      for (let j3 = 1; j3 <= powerChunk; j3++) {
        task.push({
          cmd: "CALL",
          fnName,
          params: [
            { var: 0 },
            { val: pointsPerChunk },
            { val: j3 }
          ]
        });
      }
      task.push({ cmd: "GET", out: 0, var: 0, len: pointsPerChunk * sG });
      opPromises.push(tm.queueAction(task));
    }
    const result = await Promise.all(opPromises);
    const chunks = [];
    for (let i3 = 0; i3 < result.length; i3++)
      chunks[i3] = result[i3][0];
    for (let i3 = powerChunk + 1; i3 <= power; i3++) {
      const nGroups = 1 << power - i3;
      const nChunksPerGroup = nChunks / nGroups;
      const opPromises2 = [];
      for (let j3 = 0; j3 < nGroups; j3++) {
        for (let k3 = 0; k3 < nChunksPerGroup / 2; k3++) {
          const first = Fr.exp(Fr.w[i3], k3 * pointsPerChunk);
          const inc = Fr.w[i3];
          const o1 = j3 * nChunksPerGroup + k3;
          const o22 = j3 * nChunksPerGroup + k3 + nChunksPerGroup / 2;
          const task = [];
          task.push({ cmd: "ALLOCSET", var: 0, buff: chunks[o1] });
          task.push({ cmd: "ALLOCSET", var: 1, buff: chunks[o22] });
          task.push({ cmd: "ALLOCSET", var: 2, buff: first });
          task.push({ cmd: "ALLOCSET", var: 3, buff: inc });
          task.push({
            cmd: "CALL",
            fnName: fnFFTJoin,
            params: [
              { var: 0 },
              { var: 1 },
              { val: pointsPerChunk },
              { var: 2 },
              { var: 3 }
            ]
          });
          task.push({ cmd: "GET", out: 0, var: 0, len: pointsPerChunk * sG });
          task.push({ cmd: "GET", out: 1, var: 1, len: pointsPerChunk * sG });
          opPromises2.push(tm.queueAction(task));
        }
      }
      const res = await Promise.all(opPromises2);
      for (let j3 = 0; j3 < nGroups; j3++) {
        for (let k3 = 0; k3 < nChunksPerGroup / 2; k3++) {
          const o1 = j3 * nChunksPerGroup + k3;
          const o22 = j3 * nChunksPerGroup + k3 + nChunksPerGroup / 2;
          const resChunk = res.shift();
          chunks[o1] = resChunk[0];
          chunks[o22] = resChunk[1];
        }
      }
    }
    let fullBuffOut;
    if (buff instanceof BigBuffer) {
      fullBuffOut = new BigBuffer(nPoints * sG);
    } else {
      fullBuffOut = new Uint8Array(nPoints * sG);
    }
    let p2 = 0;
    for (let i3 = 0; i3 < nChunks; i3++) {
      fullBuffOut.set(chunks[i3], p2);
      p2 += chunks[i3].byteLength;
    }
    return fullBuffOut;
  };
  G.fftJoin = async function fftJoin(buff1, buff2, first, inc) {
    const sG = G.F.n8 * 3;
    let fnName;
    if (groupName == "G1") {
      fnName = "g1m_fftJoin";
    } else if (groupName == "G2") {
      fnName = "g2m_fftJoin";
    } else if (groupName == "Fr") {
      fnName = "frm_fftJoin";
    } else {
      throw new Error("Invalid group");
    }
    if (buff1.byteLength != buff2.byteLength) {
      throw new Error("Invalid buffer size");
    }
    const nPoints = Math.floor(buff1.byteLength / sG);
    if (nPoints != 1 << log2$1(nPoints)) {
      throw new Error("Invalid number of points");
    }
    let nChunks = 1 << log2$1(tm.concurrency);
    if (nPoints <= nChunks * 2)
      nChunks = 1;
    const pointsPerChunk = nPoints / nChunks;
    const opPromises = [];
    for (let i3 = 0; i3 < nChunks; i3++) {
      const task = [];
      const firstChunk = Fr.mul(first, Fr.exp(inc, i3 * pointsPerChunk));
      const b1 = buff1.slice(i3 * pointsPerChunk * sG, (i3 + 1) * pointsPerChunk * sG);
      const b22 = buff2.slice(i3 * pointsPerChunk * sG, (i3 + 1) * pointsPerChunk * sG);
      task.push({ cmd: "ALLOCSET", var: 0, buff: b1 });
      task.push({ cmd: "ALLOCSET", var: 1, buff: b22 });
      task.push({ cmd: "ALLOCSET", var: 2, buff: firstChunk });
      task.push({ cmd: "ALLOCSET", var: 3, buff: inc });
      task.push({
        cmd: "CALL",
        fnName,
        params: [
          { var: 0 },
          { var: 1 },
          { val: pointsPerChunk },
          { var: 2 },
          { var: 3 }
        ]
      });
      task.push({ cmd: "GET", out: 0, var: 0, len: pointsPerChunk * sG });
      task.push({ cmd: "GET", out: 1, var: 1, len: pointsPerChunk * sG });
      opPromises.push(tm.queueAction(task));
    }
    const result = await Promise.all(opPromises);
    let fullBuffOut1;
    let fullBuffOut2;
    if (buff1 instanceof BigBuffer) {
      fullBuffOut1 = new BigBuffer(nPoints * sG);
      fullBuffOut2 = new BigBuffer(nPoints * sG);
    } else {
      fullBuffOut1 = new Uint8Array(nPoints * sG);
      fullBuffOut2 = new Uint8Array(nPoints * sG);
    }
    let p2 = 0;
    for (let i3 = 0; i3 < result.length; i3++) {
      fullBuffOut1.set(result[i3][0], p2);
      fullBuffOut2.set(result[i3][1], p2);
      p2 += result[i3][0].byteLength;
    }
    return [fullBuffOut1, fullBuffOut2];
  };
  G.fftFinal = async function fftFinal(buff, factor) {
    const sG = G.F.n8 * 3;
    const sGout = G.F.n8 * 2;
    let fnName, fnToAffine;
    if (groupName == "G1") {
      fnName = "g1m_fftFinal";
      fnToAffine = "g1m_batchToAffine";
    } else if (groupName == "G2") {
      fnName = "g2m_fftFinal";
      fnToAffine = "g2m_batchToAffine";
    } else {
      throw new Error("Invalid group");
    }
    const nPoints = Math.floor(buff.byteLength / sG);
    if (nPoints != 1 << log2$1(nPoints)) {
      throw new Error("Invalid number of points");
    }
    const pointsPerChunk = Math.floor(nPoints / tm.concurrency);
    const opPromises = [];
    for (let i3 = 0; i3 < tm.concurrency; i3++) {
      let n2;
      if (i3 < tm.concurrency - 1) {
        n2 = pointsPerChunk;
      } else {
        n2 = nPoints - i3 * pointsPerChunk;
      }
      if (n2 == 0)
        continue;
      const task = [];
      const b3 = buff.slice(i3 * pointsPerChunk * sG, (i3 * pointsPerChunk + n2) * sG);
      task.push({ cmd: "ALLOCSET", var: 0, buff: b3 });
      task.push({ cmd: "ALLOCSET", var: 1, buff: factor });
      task.push({
        cmd: "CALL",
        fnName,
        params: [
          { var: 0 },
          { val: n2 },
          { var: 1 }
        ]
      });
      task.push({
        cmd: "CALL",
        fnName: fnToAffine,
        params: [
          { var: 0 },
          { val: n2 },
          { var: 0 }
        ]
      });
      task.push({ cmd: "GET", out: 0, var: 0, len: n2 * sGout });
      opPromises.push(tm.queueAction(task));
    }
    const result = await Promise.all(opPromises);
    let fullBuffOut;
    if (buff instanceof BigBuffer) {
      fullBuffOut = new BigBuffer(nPoints * sGout);
    } else {
      fullBuffOut = new Uint8Array(nPoints * sGout);
    }
    let p2 = 0;
    for (let i3 = result.length - 1; i3 >= 0; i3--) {
      fullBuffOut.set(result[i3][0], p2);
      p2 += result[i3][0].byteLength;
    }
    return fullBuffOut;
  };
}
async function buildEngine(params) {
  const tm = await buildThreadManager(params.wasm, params.singleThread);
  const curve = {};
  curve.q = e3(params.wasm.q);
  curve.r = e3(params.wasm.r);
  curve.name = params.name;
  curve.tm = tm;
  curve.prePSize = params.wasm.prePSize;
  curve.preQSize = params.wasm.preQSize;
  curve.Fr = new WasmField1(tm, "frm", params.n8r, params.r);
  curve.F1 = new WasmField1(tm, "f1m", params.n8q, params.q);
  curve.F2 = new WasmField2(tm, "f2m", curve.F1);
  curve.G1 = new WasmCurve(tm, "g1m", curve.F1, params.wasm.pG1gen, params.wasm.pG1b, params.cofactorG1);
  curve.G2 = new WasmCurve(tm, "g2m", curve.F2, params.wasm.pG2gen, params.wasm.pG2b, params.cofactorG2);
  curve.F6 = new WasmField3(tm, "f6m", curve.F2);
  curve.F12 = new WasmField2(tm, "ftm", curve.F6);
  curve.Gt = curve.F12;
  buildBatchApplyKey(curve, "G1");
  buildBatchApplyKey(curve, "G2");
  buildBatchApplyKey(curve, "Fr");
  buildMultiexp2(curve, "G1");
  buildMultiexp2(curve, "G2");
  buildFFT2(curve, "G1");
  buildFFT2(curve, "G2");
  buildFFT2(curve, "Fr");
  buildPairing(curve);
  curve.array2buffer = function(arr, sG) {
    const buff = new Uint8Array(sG * arr.length);
    for (let i3 = 0; i3 < arr.length; i3++) {
      buff.set(arr[i3], i3 * sG);
    }
    return buff;
  };
  curve.buffer2array = function(buff, sG) {
    const n2 = buff.byteLength / sG;
    const arr = new Array(n2);
    for (let i3 = 0; i3 < n2; i3++) {
      arr[i3] = buff.slice(i3 * sG, i3 * sG + sG);
    }
    return arr;
  };
  return curve;
}
function toNumber(n2) {
  let v3;
  if (typeof n2 == "string") {
    if (n2.slice(0, 2).toLowerCase() == "0x") {
      v3 = BigInteger(n2.slice(2), 16);
    } else {
      v3 = BigInteger(n2);
    }
  } else {
    v3 = BigInteger(n2);
  }
  return v3;
}
function u32(n2) {
  const b3 = [];
  const v3 = toNumber(n2);
  b3.push(v3.and(255).toJSNumber());
  b3.push(v3.shiftRight(8).and(255).toJSNumber());
  b3.push(v3.shiftRight(16).and(255).toJSNumber());
  b3.push(v3.shiftRight(24).and(255).toJSNumber());
  return b3;
}
function u64(n2) {
  const b3 = [];
  const v3 = toNumber(n2);
  b3.push(v3.and(255).toJSNumber());
  b3.push(v3.shiftRight(8).and(255).toJSNumber());
  b3.push(v3.shiftRight(16).and(255).toJSNumber());
  b3.push(v3.shiftRight(24).and(255).toJSNumber());
  b3.push(v3.shiftRight(32).and(255).toJSNumber());
  b3.push(v3.shiftRight(40).and(255).toJSNumber());
  b3.push(v3.shiftRight(48).and(255).toJSNumber());
  b3.push(v3.shiftRight(56).and(255).toJSNumber());
  return b3;
}
function toUTF8Array(str) {
  var utf82 = [];
  for (var i3 = 0; i3 < str.length; i3++) {
    var charcode = str.charCodeAt(i3);
    if (charcode < 128)
      utf82.push(charcode);
    else if (charcode < 2048) {
      utf82.push(192 | charcode >> 6, 128 | charcode & 63);
    } else if (charcode < 55296 || charcode >= 57344) {
      utf82.push(224 | charcode >> 12, 128 | charcode >> 6 & 63, 128 | charcode & 63);
    } else {
      i3++;
      charcode = 65536 + ((charcode & 1023) << 10 | str.charCodeAt(i3) & 1023);
      utf82.push(240 | charcode >> 18, 128 | charcode >> 12 & 63, 128 | charcode >> 6 & 63, 128 | charcode & 63);
    }
  }
  return utf82;
}
function string(str) {
  const bytes3 = toUTF8Array(str);
  return [...varuint32(bytes3.length), ...bytes3];
}
function varuint(n2) {
  const code = [];
  let v3 = toNumber(n2);
  if (v3.isNegative())
    throw new Error("Number cannot be negative");
  while (!v3.isZero()) {
    code.push(v3.and(127).toJSNumber());
    v3 = v3.shiftRight(7);
  }
  if (code.length == 0)
    code.push(0);
  for (let i3 = 0; i3 < code.length - 1; i3++) {
    code[i3] = code[i3] | 128;
  }
  return code;
}
function varint(_n) {
  let n2, sign3;
  const bits2 = _n.bitLength().toJSNumber();
  if (_n < 0) {
    sign3 = true;
    n2 = BigInteger.one.shiftLeft(bits2).add(_n);
  } else {
    sign3 = false;
    n2 = toNumber(_n);
  }
  const paddingBits = 7 - bits2 % 7;
  const padding2 = BigInteger.one.shiftLeft(paddingBits).minus(1).shiftLeft(bits2);
  const paddingMask = (1 << 7 - paddingBits) - 1 | 128;
  const code = varuint(n2.add(padding2));
  if (!sign3) {
    code[code.length - 1] = code[code.length - 1] & paddingMask;
  }
  return code;
}
function varint32(n2) {
  let v3 = toNumber(n2);
  if (v3.greater(BigInteger("FFFFFFFF", 16)))
    throw new Error("Number too big");
  if (v3.greater(BigInteger("7FFFFFFF", 16)))
    v3 = v3.minus(BigInteger("100000000", 16));
  if (v3.lesser(BigInteger("-80000000", 16)))
    throw new Error("Number too small");
  return varint(v3);
}
function varint64(n2) {
  let v3 = toNumber(n2);
  if (v3.greater(BigInteger("FFFFFFFFFFFFFFFF", 16)))
    throw new Error("Number too big");
  if (v3.greater(BigInteger("7FFFFFFFFFFFFFFF", 16)))
    v3 = v3.minus(BigInteger("10000000000000000", 16));
  if (v3.lesser(BigInteger("-8000000000000000", 16)))
    throw new Error("Number too small");
  return varint(v3);
}
function varuint32(n2) {
  let v3 = toNumber(n2);
  if (v3.greater(BigInteger("FFFFFFFF", 16)))
    throw new Error("Number too big");
  return varuint(v3);
}
function varuint64(n2) {
  let v3 = toNumber(n2);
  if (v3.greater(BigInteger("FFFFFFFFFFFFFFFF", 16)))
    throw new Error("Number too big");
  return varuint(v3);
}
function toHexString(byteArray) {
  return Array.from(byteArray, function(byte) {
    return ("0" + (byte & 255).toString(16)).slice(-2);
  }).join("");
}
function ident(text) {
  if (typeof text === "string") {
    let lines = text.split("\n");
    for (let i3 = 0; i3 < lines.length; i3++) {
      if (lines[i3])
        lines[i3] = "    " + lines[i3];
    }
    return lines.join("\n");
  } else if (Array.isArray(text)) {
    for (let i3 = 0; i3 < text.length; i3++) {
      text[i3] = ident(text[i3]);
    }
    return text;
  }
}
var toNumber_1 = toNumber;
var u32_1 = u32;
var u64_1 = u64;
var varuint32_1 = varuint32;
var varuint64_1 = varuint64;
var varint32_1 = varint32;
var varint64_1 = varint64;
var string_1 = string;
var toHexString_1 = toHexString;
var ident_1 = ident;
var utils$1 = {
  toNumber: toNumber_1,
  u32: u32_1,
  u64: u64_1,
  varuint32: varuint32_1,
  varuint64: varuint64_1,
  varint32: varint32_1,
  varint64: varint64_1,
  string: string_1,
  toHexString: toHexString_1,
  ident: ident_1
};
var CodeBuilder = class {
  constructor(func) {
    this.func = func;
    this.functionName = func.functionName;
    this.module = func.module;
  }
  setLocal(localName, valCode) {
    const idx = this.func.localIdxByName[localName];
    if (idx === void 0)
      throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);
    return [...valCode, 33, ...utils$1.varuint32(idx)];
  }
  teeLocal(localName, valCode) {
    const idx = this.func.localIdxByName[localName];
    if (idx === void 0)
      throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);
    return [...valCode, 34, ...utils$1.varuint32(idx)];
  }
  getLocal(localName) {
    const idx = this.func.localIdxByName[localName];
    if (idx === void 0)
      throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);
    return [32, ...utils$1.varuint32(idx)];
  }
  i64_load8_s(idxCode, _offset, _align) {
    const offset = _offset || 0;
    const align = _align === void 0 ? 0 : _align;
    return [...idxCode, 48, align, ...utils$1.varuint32(offset)];
  }
  i64_load8_u(idxCode, _offset, _align) {
    const offset = _offset || 0;
    const align = _align === void 0 ? 0 : _align;
    return [...idxCode, 49, align, ...utils$1.varuint32(offset)];
  }
  i64_load16_s(idxCode, _offset, _align) {
    const offset = _offset || 0;
    const align = _align === void 0 ? 1 : _align;
    return [...idxCode, 50, align, ...utils$1.varuint32(offset)];
  }
  i64_load16_u(idxCode, _offset, _align) {
    const offset = _offset || 0;
    const align = _align === void 0 ? 1 : _align;
    return [...idxCode, 51, align, ...utils$1.varuint32(offset)];
  }
  i64_load32_s(idxCode, _offset, _align) {
    const offset = _offset || 0;
    const align = _align === void 0 ? 2 : _align;
    return [...idxCode, 52, align, ...utils$1.varuint32(offset)];
  }
  i64_load32_u(idxCode, _offset, _align) {
    const offset = _offset || 0;
    const align = _align === void 0 ? 2 : _align;
    return [...idxCode, 53, align, ...utils$1.varuint32(offset)];
  }
  i64_load(idxCode, _offset, _align) {
    const offset = _offset || 0;
    const align = _align === void 0 ? 3 : _align;
    return [...idxCode, 41, align, ...utils$1.varuint32(offset)];
  }
  i64_store(idxCode, _offset, _align, _codeVal) {
    let offset, align, codeVal;
    if (Array.isArray(_offset)) {
      offset = 0;
      align = 3;
      codeVal = _offset;
    } else if (Array.isArray(_align)) {
      offset = _offset;
      align = 3;
      codeVal = _align;
    } else if (Array.isArray(_codeVal)) {
      offset = _offset;
      align = _align;
      codeVal = _codeVal;
    }
    return [...idxCode, ...codeVal, 55, align, ...utils$1.varuint32(offset)];
  }
  i64_store32(idxCode, _offset, _align, _codeVal) {
    let offset, align, codeVal;
    if (Array.isArray(_offset)) {
      offset = 0;
      align = 2;
      codeVal = _offset;
    } else if (Array.isArray(_align)) {
      offset = _offset;
      align = 2;
      codeVal = _align;
    } else if (Array.isArray(_codeVal)) {
      offset = _offset;
      align = _align;
      codeVal = _codeVal;
    }
    return [...idxCode, ...codeVal, 62, align, ...utils$1.varuint32(offset)];
  }
  i64_store16(idxCode, _offset, _align, _codeVal) {
    let offset, align, codeVal;
    if (Array.isArray(_offset)) {
      offset = 0;
      align = 1;
      codeVal = _offset;
    } else if (Array.isArray(_align)) {
      offset = _offset;
      align = 1;
      codeVal = _align;
    } else if (Array.isArray(_codeVal)) {
      offset = _offset;
      align = _align;
      codeVal = _codeVal;
    }
    return [...idxCode, ...codeVal, 61, align, ...utils$1.varuint32(offset)];
  }
  i64_store8(idxCode, _offset, _align, _codeVal) {
    let offset, align, codeVal;
    if (Array.isArray(_offset)) {
      offset = 0;
      align = 0;
      codeVal = _offset;
    } else if (Array.isArray(_align)) {
      offset = _offset;
      align = 0;
      codeVal = _align;
    } else if (Array.isArray(_codeVal)) {
      offset = _offset;
      align = _align;
      codeVal = _codeVal;
    }
    return [...idxCode, ...codeVal, 60, align, ...utils$1.varuint32(offset)];
  }
  i32_load8_s(idxCode, _offset, _align) {
    const offset = _offset || 0;
    const align = _align === void 0 ? 0 : _align;
    return [...idxCode, 44, align, ...utils$1.varuint32(offset)];
  }
  i32_load8_u(idxCode, _offset, _align) {
    const offset = _offset || 0;
    const align = _align === void 0 ? 0 : _align;
    return [...idxCode, 45, align, ...utils$1.varuint32(offset)];
  }
  i32_load16_s(idxCode, _offset, _align) {
    const offset = _offset || 0;
    const align = _align === void 0 ? 1 : _align;
    return [...idxCode, 46, align, ...utils$1.varuint32(offset)];
  }
  i32_load16_u(idxCode, _offset, _align) {
    const offset = _offset || 0;
    const align = _align === void 0 ? 1 : _align;
    return [...idxCode, 47, align, ...utils$1.varuint32(offset)];
  }
  i32_load(idxCode, _offset, _align) {
    const offset = _offset || 0;
    const align = _align === void 0 ? 2 : _align;
    return [...idxCode, 40, align, ...utils$1.varuint32(offset)];
  }
  i32_store(idxCode, _offset, _align, _codeVal) {
    let offset, align, codeVal;
    if (Array.isArray(_offset)) {
      offset = 0;
      align = 2;
      codeVal = _offset;
    } else if (Array.isArray(_align)) {
      offset = _offset;
      align = 2;
      codeVal = _align;
    } else if (Array.isArray(_codeVal)) {
      offset = _offset;
      align = _align;
      codeVal = _codeVal;
    }
    return [...idxCode, ...codeVal, 54, align, ...utils$1.varuint32(offset)];
  }
  i32_store16(idxCode, _offset, _align, _codeVal) {
    let offset, align, codeVal;
    if (Array.isArray(_offset)) {
      offset = 0;
      align = 1;
      codeVal = _offset;
    } else if (Array.isArray(_align)) {
      offset = _offset;
      align = 1;
      codeVal = _align;
    } else if (Array.isArray(_codeVal)) {
      offset = _offset;
      align = _align;
      codeVal = _codeVal;
    }
    return [...idxCode, ...codeVal, 59, align, ...utils$1.varuint32(offset)];
  }
  i32_store8(idxCode, _offset, _align, _codeVal) {
    let offset, align, codeVal;
    if (Array.isArray(_offset)) {
      offset = 0;
      align = 0;
      codeVal = _offset;
    } else if (Array.isArray(_align)) {
      offset = _offset;
      align = 0;
      codeVal = _align;
    } else if (Array.isArray(_codeVal)) {
      offset = _offset;
      align = _align;
      codeVal = _codeVal;
    }
    return [...idxCode, ...codeVal, 58, align, ...utils$1.varuint32(offset)];
  }
  call(fnName, ...args) {
    const idx = this.module.functionIdxByName[fnName];
    if (idx === void 0)
      throw new Error(`Function not defined: Function: ${fnName}`);
    return [...[].concat(...args), 16, ...utils$1.varuint32(idx)];
  }
  call_indirect(fnIdx, ...args) {
    return [...[].concat(...args), ...fnIdx, 17, 0, 0];
  }
  if(condCode, thenCode, elseCode) {
    if (elseCode) {
      return [...condCode, 4, 64, ...thenCode, 5, ...elseCode, 11];
    } else {
      return [...condCode, 4, 64, ...thenCode, 11];
    }
  }
  block(bCode) {
    return [2, 64, ...bCode, 11];
  }
  loop(...args) {
    return [3, 64, ...[].concat(...[...args]), 11];
  }
  br_if(relPath, condCode) {
    return [...condCode, 13, ...utils$1.varuint32(relPath)];
  }
  br(relPath) {
    return [12, ...utils$1.varuint32(relPath)];
  }
  ret(rCode) {
    return [...rCode, 15];
  }
  drop(dCode) {
    return [...dCode, 26];
  }
  i64_const(num) {
    return [66, ...utils$1.varint64(num)];
  }
  i32_const(num) {
    return [65, ...utils$1.varint32(num)];
  }
  i64_eqz(opcode) {
    return [...opcode, 80];
  }
  i64_eq(op1code, op2code) {
    return [...op1code, ...op2code, 81];
  }
  i64_ne(op1code, op2code) {
    return [...op1code, ...op2code, 82];
  }
  i64_lt_s(op1code, op2code) {
    return [...op1code, ...op2code, 83];
  }
  i64_lt_u(op1code, op2code) {
    return [...op1code, ...op2code, 84];
  }
  i64_gt_s(op1code, op2code) {
    return [...op1code, ...op2code, 85];
  }
  i64_gt_u(op1code, op2code) {
    return [...op1code, ...op2code, 86];
  }
  i64_le_s(op1code, op2code) {
    return [...op1code, ...op2code, 87];
  }
  i64_le_u(op1code, op2code) {
    return [...op1code, ...op2code, 88];
  }
  i64_ge_s(op1code, op2code) {
    return [...op1code, ...op2code, 89];
  }
  i64_ge_u(op1code, op2code) {
    return [...op1code, ...op2code, 90];
  }
  i64_add(op1code, op2code) {
    return [...op1code, ...op2code, 124];
  }
  i64_sub(op1code, op2code) {
    return [...op1code, ...op2code, 125];
  }
  i64_mul(op1code, op2code) {
    return [...op1code, ...op2code, 126];
  }
  i64_div_s(op1code, op2code) {
    return [...op1code, ...op2code, 127];
  }
  i64_div_u(op1code, op2code) {
    return [...op1code, ...op2code, 128];
  }
  i64_rem_s(op1code, op2code) {
    return [...op1code, ...op2code, 129];
  }
  i64_rem_u(op1code, op2code) {
    return [...op1code, ...op2code, 130];
  }
  i64_and(op1code, op2code) {
    return [...op1code, ...op2code, 131];
  }
  i64_or(op1code, op2code) {
    return [...op1code, ...op2code, 132];
  }
  i64_xor(op1code, op2code) {
    return [...op1code, ...op2code, 133];
  }
  i64_shl(op1code, op2code) {
    return [...op1code, ...op2code, 134];
  }
  i64_shr_s(op1code, op2code) {
    return [...op1code, ...op2code, 135];
  }
  i64_shr_u(op1code, op2code) {
    return [...op1code, ...op2code, 136];
  }
  i64_extend_i32_s(op1code) {
    return [...op1code, 172];
  }
  i64_extend_i32_u(op1code) {
    return [...op1code, 173];
  }
  i64_clz(op1code) {
    return [...op1code, 121];
  }
  i64_ctz(op1code) {
    return [...op1code, 122];
  }
  i32_eqz(op1code) {
    return [...op1code, 69];
  }
  i32_eq(op1code, op2code) {
    return [...op1code, ...op2code, 70];
  }
  i32_ne(op1code, op2code) {
    return [...op1code, ...op2code, 71];
  }
  i32_lt_s(op1code, op2code) {
    return [...op1code, ...op2code, 72];
  }
  i32_lt_u(op1code, op2code) {
    return [...op1code, ...op2code, 73];
  }
  i32_gt_s(op1code, op2code) {
    return [...op1code, ...op2code, 74];
  }
  i32_gt_u(op1code, op2code) {
    return [...op1code, ...op2code, 75];
  }
  i32_le_s(op1code, op2code) {
    return [...op1code, ...op2code, 76];
  }
  i32_le_u(op1code, op2code) {
    return [...op1code, ...op2code, 77];
  }
  i32_ge_s(op1code, op2code) {
    return [...op1code, ...op2code, 78];
  }
  i32_ge_u(op1code, op2code) {
    return [...op1code, ...op2code, 79];
  }
  i32_add(op1code, op2code) {
    return [...op1code, ...op2code, 106];
  }
  i32_sub(op1code, op2code) {
    return [...op1code, ...op2code, 107];
  }
  i32_mul(op1code, op2code) {
    return [...op1code, ...op2code, 108];
  }
  i32_div_s(op1code, op2code) {
    return [...op1code, ...op2code, 109];
  }
  i32_div_u(op1code, op2code) {
    return [...op1code, ...op2code, 110];
  }
  i32_rem_s(op1code, op2code) {
    return [...op1code, ...op2code, 111];
  }
  i32_rem_u(op1code, op2code) {
    return [...op1code, ...op2code, 112];
  }
  i32_and(op1code, op2code) {
    return [...op1code, ...op2code, 113];
  }
  i32_or(op1code, op2code) {
    return [...op1code, ...op2code, 114];
  }
  i32_xor(op1code, op2code) {
    return [...op1code, ...op2code, 115];
  }
  i32_shl(op1code, op2code) {
    return [...op1code, ...op2code, 116];
  }
  i32_shr_s(op1code, op2code) {
    return [...op1code, ...op2code, 117];
  }
  i32_shr_u(op1code, op2code) {
    return [...op1code, ...op2code, 118];
  }
  i32_rotl(op1code, op2code) {
    return [...op1code, ...op2code, 119];
  }
  i32_rotr(op1code, op2code) {
    return [...op1code, ...op2code, 120];
  }
  i32_wrap_i64(op1code) {
    return [...op1code, 167];
  }
  i32_clz(op1code) {
    return [...op1code, 103];
  }
  i32_ctz(op1code) {
    return [...op1code, 104];
  }
  unreachable() {
    return [0];
  }
  current_memory() {
    return [63, 0];
  }
  comment() {
    return [];
  }
};
var codebuilder = CodeBuilder;
var typeCodes = {
  "i32": 127,
  "i64": 126,
  "f32": 125,
  "f64": 124,
  "anyfunc": 112,
  "func": 96,
  "emptyblock": 64
};
var FunctionBuilder = class {
  constructor(module, fnName, fnType, moduleName, fieldName) {
    if (fnType == "import") {
      this.fnType = "import";
      this.moduleName = moduleName;
      this.fieldName = fieldName;
    } else if (fnType == "internal") {
      this.fnType = "internal";
    } else {
      throw new Error("Invalid function fnType: " + fnType);
    }
    this.module = module;
    this.fnName = fnName;
    this.params = [];
    this.locals = [];
    this.localIdxByName = {};
    this.code = [];
    this.returnType = null;
    this.nextLocal = 0;
  }
  addParam(paramName, paramType) {
    if (this.localIdxByName[paramName])
      throw new Error(`param already exists. Function: ${this.fnName}, Param: ${paramName} `);
    const idx = this.nextLocal++;
    this.localIdxByName[paramName] = idx;
    this.params.push({
      type: paramType
    });
  }
  addLocal(localName, localType, _length) {
    const length = _length || 1;
    if (this.localIdxByName[localName])
      throw new Error(`local already exists. Function: ${this.fnName}, Param: ${localName} `);
    const idx = this.nextLocal++;
    this.localIdxByName[localName] = idx;
    this.locals.push({
      type: localType,
      length
    });
  }
  setReturnType(returnType) {
    if (this.returnType)
      throw new Error(`returnType already defined. Function: ${this.fnName}`);
    this.returnType = returnType;
  }
  getSignature() {
    const params = [...utils$1.varuint32(this.params.length), ...this.params.map((p2) => typeCodes[p2.type])];
    const returns = this.returnType ? [1, typeCodes[this.returnType]] : [0];
    return [96, ...params, ...returns];
  }
  getBody() {
    const locals = this.locals.map((l3) => [
      ...utils$1.varuint32(l3.length),
      typeCodes[l3.type]
    ]);
    const body = [
      ...utils$1.varuint32(this.locals.length),
      ...[].concat(...locals),
      ...this.code,
      11
    ];
    return [
      ...utils$1.varuint32(body.length),
      ...body
    ];
  }
  addCode(...code) {
    this.code.push(...[].concat(...[...code]));
  }
  getCodeBuilder() {
    return new codebuilder(this);
  }
};
var functionbuilder = FunctionBuilder;
var ModuleBuilder$1 = class {
  constructor() {
    this.functions = [];
    this.functionIdxByName = {};
    this.nImportFunctions = 0;
    this.nInternalFunctions = 0;
    this.memory = {
      pagesSize: 1,
      moduleName: "env",
      fieldName: "memory"
    };
    this.free = 8;
    this.datas = [];
    this.modules = {};
    this.exports = [];
    this.functionsTable = [];
  }
  build() {
    this._setSignatures();
    return new Uint8Array([
      ...utils$1.u32(1836278016),
      ...utils$1.u32(1),
      ...this._buildType(),
      ...this._buildImport(),
      ...this._buildFunctionDeclarations(),
      ...this._buildFunctionsTable(),
      ...this._buildExports(),
      ...this._buildElements(),
      ...this._buildCode(),
      ...this._buildData()
    ]);
  }
  addFunction(fnName) {
    if (typeof this.functionIdxByName[fnName] !== "undefined")
      throw new Error(`Function already defined: ${fnName}`);
    const idx = this.functions.length;
    this.functionIdxByName[fnName] = idx;
    this.functions.push(new functionbuilder(this, fnName, "internal"));
    this.nInternalFunctions++;
    return this.functions[idx];
  }
  addIimportFunction(fnName, moduleName, _fieldName) {
    if (typeof this.functionIdxByName[fnName] !== "undefined")
      throw new Error(`Function already defined: ${fnName}`);
    if (this.functions.length > 0 && this.functions[this.functions.length - 1].type == "internal")
      throw new Error(`Import functions must be declared before internal: ${fnName}`);
    let fieldName = _fieldName || fnName;
    const idx = this.functions.length;
    this.functionIdxByName[fnName] = idx;
    this.functions.push(new functionbuilder(this, fnName, "import", moduleName, fieldName));
    this.nImportFunctions++;
    return this.functions[idx];
  }
  setMemory(pagesSize, moduleName, fieldName) {
    this.memory = {
      pagesSize,
      moduleName: moduleName || "env",
      fieldName: fieldName || "memory"
    };
  }
  exportFunction(fnName, _exportName) {
    const exportName = _exportName || fnName;
    if (typeof this.functionIdxByName[fnName] === "undefined")
      throw new Error(`Function not defined: ${fnName}`);
    const idx = this.functionIdxByName[fnName];
    if (exportName != fnName) {
      this.functionIdxByName[exportName] = idx;
    }
    this.exports.push({
      exportName,
      idx
    });
  }
  addFunctionToTable(fnName) {
    const idx = this.functionIdxByName[fnName];
    this.functionsTable.push(idx);
  }
  addData(offset, bytes3) {
    this.datas.push({
      offset,
      bytes: bytes3
    });
  }
  alloc(a3, b3) {
    let size;
    let bytes3;
    if ((Array.isArray(a3) || ArrayBuffer.isView(a3)) && typeof b3 === "undefined") {
      size = a3.length;
      bytes3 = a3;
    } else {
      size = a3;
      bytes3 = b3;
    }
    size = (size - 1 >> 3) + 1 << 3;
    const p2 = this.free;
    this.free += size;
    if (bytes3) {
      this.addData(p2, bytes3);
    }
    return p2;
  }
  allocString(s2) {
    const encoder = new globalThis.TextEncoder();
    const uint8array = encoder.encode(s2);
    return this.alloc([...uint8array, 0]);
  }
  _setSignatures() {
    this.signatures = [];
    const signatureIdxByName = {};
    if (this.functionsTable.length > 0) {
      const signature2 = this.functions[this.functionsTable[0]].getSignature();
      const signatureName = "s_" + utils$1.toHexString(signature2);
      signatureIdxByName[signatureName] = 0;
      this.signatures.push(signature2);
    }
    for (let i3 = 0; i3 < this.functions.length; i3++) {
      const signature2 = this.functions[i3].getSignature();
      const signatureName = "s_" + utils$1.toHexString(signature2);
      if (typeof signatureIdxByName[signatureName] === "undefined") {
        signatureIdxByName[signatureName] = this.signatures.length;
        this.signatures.push(signature2);
      }
      this.functions[i3].signatureIdx = signatureIdxByName[signatureName];
    }
  }
  _buildSection(sectionType, section) {
    return [sectionType, ...utils$1.varuint32(section.length), ...section];
  }
  _buildType() {
    return this._buildSection(1, [
      ...utils$1.varuint32(this.signatures.length),
      ...[].concat(...this.signatures)
    ]);
  }
  _buildImport() {
    const entries = [];
    entries.push([
      ...utils$1.string(this.memory.moduleName),
      ...utils$1.string(this.memory.fieldName),
      2,
      0,
      ...utils$1.varuint32(this.memory.pagesSize)
    ]);
    for (let i3 = 0; i3 < this.nImportFunctions; i3++) {
      entries.push([
        ...utils$1.string(this.functions[i3].moduleName),
        ...utils$1.string(this.functions[i3].fieldName),
        0,
        ...utils$1.varuint32(this.functions[i3].signatureIdx)
      ]);
    }
    return this._buildSection(2, utils$1.varuint32(entries.length).concat(...entries));
  }
  _buildFunctionDeclarations() {
    const entries = [];
    for (let i3 = this.nImportFunctions; i3 < this.nImportFunctions + this.nInternalFunctions; i3++) {
      entries.push(...utils$1.varuint32(this.functions[i3].signatureIdx));
    }
    return this._buildSection(3, [
      ...utils$1.varuint32(entries.length),
      ...[...entries]
    ]);
  }
  _buildFunctionsTable() {
    if (this.functionsTable.length == 0)
      return [];
    return this._buildSection(4, [
      ...utils$1.varuint32(1),
      112,
      0,
      ...utils$1.varuint32(this.functionsTable.length)
    ]);
  }
  _buildElements() {
    if (this.functionsTable.length == 0)
      return [];
    const entries = [];
    for (let i3 = 0; i3 < this.functionsTable.length; i3++) {
      entries.push(...utils$1.varuint32(this.functionsTable[i3]));
    }
    return this._buildSection(9, [
      ...utils$1.varuint32(1),
      ...utils$1.varuint32(0),
      65,
      ...utils$1.varint32(0),
      11,
      ...utils$1.varuint32(this.functionsTable.length),
      ...[...entries]
    ]);
  }
  _buildExports() {
    const entries = [];
    for (let i3 = 0; i3 < this.exports.length; i3++) {
      entries.push([
        ...utils$1.string(this.exports[i3].exportName),
        0,
        ...utils$1.varuint32(this.exports[i3].idx)
      ]);
    }
    return this._buildSection(7, utils$1.varuint32(entries.length).concat(...entries));
  }
  _buildCode() {
    const entries = [];
    for (let i3 = this.nImportFunctions; i3 < this.nImportFunctions + this.nInternalFunctions; i3++) {
      entries.push(this.functions[i3].getBody());
    }
    return this._buildSection(10, utils$1.varuint32(entries.length).concat(...entries));
  }
  _buildData() {
    const entries = [];
    entries.push([
      0,
      65,
      0,
      11,
      4,
      ...utils$1.u32(this.free)
    ]);
    for (let i3 = 0; i3 < this.datas.length; i3++) {
      entries.push([
        0,
        65,
        ...utils$1.varint32(this.datas[i3].offset),
        11,
        ...utils$1.varuint32(this.datas[i3].bytes.length),
        ...this.datas[i3].bytes
      ]);
    }
    return this._buildSection(11, utils$1.varuint32(entries.length).concat(...entries));
  }
};
var modulebuilder = ModuleBuilder$1;
var ModuleBuilder = modulebuilder;
globalThis.curve_bn128 = null;
async function buildBn128(singleThread, plugins) {
  const moduleBuilder = new ModuleBuilder();
  moduleBuilder.setMemory(25);
  buildBn128$1(moduleBuilder);
  if (plugins)
    plugins(moduleBuilder);
  const bn128wasm = {};
  bn128wasm.code = moduleBuilder.build();
  bn128wasm.pq = moduleBuilder.modules.f1m.pq;
  bn128wasm.pr = moduleBuilder.modules.frm.pq;
  bn128wasm.pG1gen = moduleBuilder.modules.bn128.pG1gen;
  bn128wasm.pG1zero = moduleBuilder.modules.bn128.pG1zero;
  bn128wasm.pG1b = moduleBuilder.modules.bn128.pG1b;
  bn128wasm.pG2gen = moduleBuilder.modules.bn128.pG2gen;
  bn128wasm.pG2zero = moduleBuilder.modules.bn128.pG2zero;
  bn128wasm.pG2b = moduleBuilder.modules.bn128.pG2b;
  bn128wasm.pOneT = moduleBuilder.modules.bn128.pOneT;
  bn128wasm.prePSize = moduleBuilder.modules.bn128.prePSize;
  bn128wasm.preQSize = moduleBuilder.modules.bn128.preQSize;
  bn128wasm.n8q = 32;
  bn128wasm.n8r = 32;
  bn128wasm.q = moduleBuilder.modules.bn128.q;
  bn128wasm.r = moduleBuilder.modules.bn128.r;
  if (!singleThread && globalThis.curve_bn128)
    return globalThis.curve_bn128;
  const params = {
    name: "bn128",
    wasm: bn128wasm,
    q: e3("21888242871839275222246405745257275088696311157297823662689037894645226208583"),
    r: e3("21888242871839275222246405745257275088548364400416034343698204186575808495617"),
    n8q: 32,
    n8r: 32,
    cofactorG2: e3("30644e72e131a029b85045b68181585e06ceecda572a2489345f2299c0f9fa8d", 16),
    singleThread: singleThread ? true : false
  };
  const curve = await buildEngine(params);
  curve.terminate = async function() {
    if (!params.singleThread) {
      globalThis.curve_bn128 = null;
      await this.tm.terminate();
    }
  };
  if (!singleThread) {
    globalThis.curve_bn128 = curve;
  }
  return curve;
}
globalThis.curve_bls12381 = null;
async function buildBls12381(singleThread, plugins) {
  const moduleBuilder = new ModuleBuilder();
  moduleBuilder.setMemory(25);
  buildBls12381$1(moduleBuilder);
  if (plugins)
    plugins(moduleBuilder);
  const bls12381wasm = {};
  bls12381wasm.code = moduleBuilder.build();
  bls12381wasm.pq = moduleBuilder.modules.f1m.pq;
  bls12381wasm.pr = moduleBuilder.modules.frm.pq;
  bls12381wasm.pG1gen = moduleBuilder.modules.bls12381.pG1gen;
  bls12381wasm.pG1zero = moduleBuilder.modules.bls12381.pG1zero;
  bls12381wasm.pG1b = moduleBuilder.modules.bls12381.pG1b;
  bls12381wasm.pG2gen = moduleBuilder.modules.bls12381.pG2gen;
  bls12381wasm.pG2zero = moduleBuilder.modules.bls12381.pG2zero;
  bls12381wasm.pG2b = moduleBuilder.modules.bls12381.pG2b;
  bls12381wasm.pOneT = moduleBuilder.modules.bls12381.pOneT;
  bls12381wasm.prePSize = moduleBuilder.modules.bls12381.prePSize;
  bls12381wasm.preQSize = moduleBuilder.modules.bls12381.preQSize;
  bls12381wasm.n8q = 48;
  bls12381wasm.n8r = 32;
  bls12381wasm.q = moduleBuilder.modules.bn128.q;
  bls12381wasm.r = moduleBuilder.modules.bn128.r;
  if (!singleThread && globalThis.curve_bls12381)
    return globalThis.curve_bls12381;
  const params = {
    name: "bls12381",
    wasm: bls12381wasm,
    q: e3("1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab", 16),
    r: e3("73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001", 16),
    n8q: 48,
    n8r: 32,
    cofactorG1: e3("0x396c8c005555e1568c00aaab0000aaab", 16),
    cofactorG2: e3("0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5", 16),
    singleThread: singleThread ? true : false
  };
  const curve = await buildEngine(params);
  curve.terminate = async function() {
    if (!params.singleThread) {
      globalThis.curve_bls12381 = null;
      await this.tm.terminate();
    }
  };
  if (!singleThread) {
    globalThis.curve_bls12381 = curve;
  }
  return curve;
}
var bls12381r$1 = e3("73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001", 16);
var bn128r$1 = e3("21888242871839275222246405745257275088548364400416034343698204186575808495617");
e3("1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab", 16);
e3("21888242871839275222246405745257275088696311157297823662689037894645226208583");
var Scalar2 = _Scalar;
var utils2 = _utils;
var fs = {};
async function open(fileName, openFlags, cacheSize, pageSize) {
  cacheSize = cacheSize || 4096 * 64;
  if (["w+", "wx+", "r", "ax+", "a+"].indexOf(openFlags) < 0)
    throw new Error("Invalid open option");
  const fd = await fs.promises.open(fileName, openFlags);
  const stats = await fd.stat();
  return new FastFile(fd, stats, cacheSize, pageSize, fileName);
}
var FastFile = class {
  constructor(fd, stats, cacheSize, pageSize, fileName) {
    this.fileName = fileName;
    this.fd = fd;
    this.pos = 0;
    this.pageSize = pageSize || 1 << 8;
    while (this.pageSize < stats.blksize) {
      this.pageSize *= 2;
    }
    this.totalSize = stats.size;
    this.totalPages = Math.floor((stats.size - 1) / this.pageSize) + 1;
    this.maxPagesLoaded = Math.floor(cacheSize / this.pageSize) + 1;
    this.pages = {};
    this.pendingLoads = [];
    this.writing = false;
    this.reading = false;
    this.avBuffs = [];
    this.history = {};
  }
  _loadPage(p2) {
    const self2 = this;
    const P2 = new Promise((resolve, reject) => {
      self2.pendingLoads.push({
        page: p2,
        resolve,
        reject
      });
    });
    self2.__statusPage("After Load request: ", p2);
    return P2;
  }
  __statusPage(s2, p2) {
    const logEntry = [];
    const self2 = this;
    if (!self2.logHistory)
      return;
    logEntry.push("==" + s2 + " " + p2);
    let S2 = "";
    for (let i3 = 0; i3 < self2.pendingLoads.length; i3++) {
      if (self2.pendingLoads[i3].page == p2)
        S2 = S2 + " " + i3;
    }
    if (S2)
      logEntry.push("Pending loads:" + S2);
    if (typeof self2.pages[p2] != "undefined") {
      const page = self2.pages[p2];
      logEntry.push("Loaded");
      logEntry.push("pendingOps: " + page.pendingOps);
      if (page.loading)
        logEntry.push("loading: " + page.loading);
      if (page.writing)
        logEntry.push("writing");
      if (page.dirty)
        logEntry.push("dirty");
    }
    logEntry.push("==");
    if (!self2.history[p2])
      self2.history[p2] = [];
    self2.history[p2].push(logEntry);
  }
  __printHistory(p2) {
    const self2 = this;
    if (!self2.history[p2])
      console.log("Empty History ", p2);
    console.log("History " + p2);
    for (let i3 = 0; i3 < self2.history[p2].length; i3++) {
      for (let j3 = 0; j3 < self2.history[p2][i3].length; j3++) {
        console.log("-> " + self2.history[p2][i3][j3]);
      }
    }
  }
  _triggerLoad() {
    const self2 = this;
    if (self2.reading)
      return;
    if (self2.pendingLoads.length == 0)
      return;
    const pageIdxs = Object.keys(self2.pages);
    const deletablePages = [];
    for (let i3 = 0; i3 < pageIdxs.length; i3++) {
      const page = self2.pages[parseInt(pageIdxs[i3])];
      if (page.dirty == false && page.pendingOps == 0 && !page.writing && !page.loading)
        deletablePages.push(parseInt(pageIdxs[i3]));
    }
    let freePages = self2.maxPagesLoaded - pageIdxs.length;
    const ops = [];
    while (self2.pendingLoads.length > 0 && (typeof self2.pages[self2.pendingLoads[0].page] != "undefined" || (freePages > 0 || deletablePages.length > 0))) {
      const load = self2.pendingLoads.shift();
      if (typeof self2.pages[load.page] != "undefined") {
        self2.pages[load.page].pendingOps++;
        const idx = deletablePages.indexOf(load.page);
        if (idx >= 0)
          deletablePages.splice(idx, 1);
        if (self2.pages[load.page].loading) {
          self2.pages[load.page].loading.push(load);
        } else {
          load.resolve();
        }
        self2.__statusPage("After Load (cached): ", load.page);
      } else {
        if (freePages) {
          freePages--;
        } else {
          const fp = deletablePages.shift();
          self2.__statusPage("Before Unload: ", fp);
          self2.avBuffs.unshift(self2.pages[fp]);
          delete self2.pages[fp];
          self2.__statusPage("After Unload: ", fp);
        }
        if (load.page >= self2.totalPages) {
          self2.pages[load.page] = getNewPage();
          load.resolve();
          self2.__statusPage("After Load (new): ", load.page);
        } else {
          self2.reading = true;
          self2.pages[load.page] = getNewPage();
          self2.pages[load.page].loading = [load];
          ops.push(self2.fd.read(self2.pages[load.page].buff, 0, self2.pageSize, load.page * self2.pageSize).then((res) => {
            self2.pages[load.page].size = res.bytesRead;
            const loading = self2.pages[load.page].loading;
            delete self2.pages[load.page].loading;
            for (let i3 = 0; i3 < loading.length; i3++) {
              loading[i3].resolve();
            }
            self2.__statusPage("After Load (loaded): ", load.page);
            return res;
          }, (err) => {
            load.reject(err);
          }));
          self2.__statusPage("After Load (loading): ", load.page);
        }
      }
    }
    Promise.all(ops).then(() => {
      self2.reading = false;
      if (self2.pendingLoads.length > 0)
        setImmediate(self2._triggerLoad.bind(self2));
      self2._tryClose();
    });
    function getNewPage() {
      if (self2.avBuffs.length > 0) {
        const p2 = self2.avBuffs.shift();
        p2.dirty = false;
        p2.pendingOps = 1;
        p2.size = 0;
        return p2;
      } else {
        return {
          dirty: false,
          buff: new Uint8Array(self2.pageSize),
          pendingOps: 1,
          size: 0
        };
      }
    }
  }
  _triggerWrite() {
    const self2 = this;
    if (self2.writing)
      return;
    const pageIdxs = Object.keys(self2.pages);
    const ops = [];
    for (let i3 = 0; i3 < pageIdxs.length; i3++) {
      const page = self2.pages[parseInt(pageIdxs[i3])];
      if (page.dirty) {
        page.dirty = false;
        page.writing = true;
        self2.writing = true;
        ops.push(self2.fd.write(page.buff, 0, page.size, parseInt(pageIdxs[i3]) * self2.pageSize).then(() => {
          page.writing = false;
          return;
        }, (err) => {
          console.log("ERROR Writing: " + err);
          self2.error = err;
          self2._tryClose();
        }));
      }
    }
    if (self2.writing) {
      Promise.all(ops).then(() => {
        self2.writing = false;
        setImmediate(self2._triggerWrite.bind(self2));
        self2._tryClose();
        if (self2.pendingLoads.length > 0)
          setImmediate(self2._triggerLoad.bind(self2));
      });
    }
  }
  _getDirtyPage() {
    for (let p2 in this.pages) {
      if (this.pages[p2].dirty)
        return p2;
    }
    return -1;
  }
  async write(buff, pos) {
    if (buff.byteLength == 0)
      return;
    const self2 = this;
    if (typeof pos == "undefined")
      pos = self2.pos;
    self2.pos = pos + buff.byteLength;
    if (self2.totalSize < pos + buff.byteLength)
      self2.totalSize = pos + buff.byteLength;
    if (self2.pendingClose)
      throw new Error("Writing a closing file");
    const firstPage = Math.floor(pos / self2.pageSize);
    const lastPage = Math.floor((pos + buff.byteLength - 1) / self2.pageSize);
    const pagePromises = [];
    for (let i3 = firstPage; i3 <= lastPage; i3++)
      pagePromises.push(self2._loadPage(i3));
    self2._triggerLoad();
    let p2 = firstPage;
    let o3 = pos % self2.pageSize;
    let r3 = buff.byteLength;
    while (r3 > 0) {
      await pagePromises[p2 - firstPage];
      const l3 = o3 + r3 > self2.pageSize ? self2.pageSize - o3 : r3;
      const srcView = buff.slice(buff.byteLength - r3, buff.byteLength - r3 + l3);
      const dstView = new Uint8Array(self2.pages[p2].buff.buffer, o3, l3);
      dstView.set(srcView);
      self2.pages[p2].dirty = true;
      self2.pages[p2].pendingOps--;
      self2.pages[p2].size = Math.max(o3 + l3, self2.pages[p2].size);
      if (p2 >= self2.totalPages) {
        self2.totalPages = p2 + 1;
      }
      r3 = r3 - l3;
      p2++;
      o3 = 0;
      if (!self2.writing)
        setImmediate(self2._triggerWrite.bind(self2));
    }
  }
  async read(len, pos) {
    const self2 = this;
    let buff = new Uint8Array(len);
    await self2.readToBuffer(buff, 0, len, pos);
    return buff;
  }
  async readToBuffer(buffDst, offset, len, pos) {
    if (len == 0) {
      return;
    }
    const self2 = this;
    if (len > self2.pageSize * self2.maxPagesLoaded * 0.8) {
      const cacheSize = Math.floor(len * 1.1);
      this.maxPagesLoaded = Math.floor(cacheSize / self2.pageSize) + 1;
    }
    if (typeof pos == "undefined")
      pos = self2.pos;
    self2.pos = pos + len;
    if (self2.pendingClose)
      throw new Error("Reading a closing file");
    const firstPage = Math.floor(pos / self2.pageSize);
    const lastPage = Math.floor((pos + len - 1) / self2.pageSize);
    const pagePromises = [];
    for (let i3 = firstPage; i3 <= lastPage; i3++)
      pagePromises.push(self2._loadPage(i3));
    self2._triggerLoad();
    let p2 = firstPage;
    let o3 = pos % self2.pageSize;
    let r3 = pos + len > self2.totalSize ? len - (pos + len - self2.totalSize) : len;
    while (r3 > 0) {
      await pagePromises[p2 - firstPage];
      self2.__statusPage("After Await (read): ", p2);
      const l3 = o3 + r3 > self2.pageSize ? self2.pageSize - o3 : r3;
      const srcView = new Uint8Array(self2.pages[p2].buff.buffer, self2.pages[p2].buff.byteOffset + o3, l3);
      buffDst.set(srcView, offset + len - r3);
      self2.pages[p2].pendingOps--;
      self2.__statusPage("After Op done: ", p2);
      r3 = r3 - l3;
      p2++;
      o3 = 0;
      if (self2.pendingLoads.length > 0)
        setImmediate(self2._triggerLoad.bind(self2));
    }
    this.pos = pos + len;
  }
  _tryClose() {
    const self2 = this;
    if (!self2.pendingClose)
      return;
    if (self2.error) {
      self2.pendingCloseReject(self2.error);
    }
    const p2 = self2._getDirtyPage();
    if (p2 >= 0 || self2.writing || self2.reading || self2.pendingLoads.length > 0)
      return;
    self2.pendingClose();
  }
  close() {
    const self2 = this;
    if (self2.pendingClose)
      throw new Error("Closing the file twice");
    return new Promise((resolve, reject) => {
      self2.pendingClose = resolve;
      self2.pendingCloseReject = reject;
      self2._tryClose();
    }).then(() => {
      self2.fd.close();
    }, (err) => {
      self2.fd.close();
      throw err;
    });
  }
  async discard() {
    const self2 = this;
    await self2.close();
    await fs.promises.unlink(this.fileName);
  }
  async writeULE32(v3, pos) {
    const self2 = this;
    const tmpBuff322 = new Uint8Array(4);
    const tmpBuff32v2 = new DataView(tmpBuff322.buffer);
    tmpBuff32v2.setUint32(0, v3, true);
    await self2.write(tmpBuff322, pos);
  }
  async writeUBE32(v3, pos) {
    const self2 = this;
    const tmpBuff322 = new Uint8Array(4);
    const tmpBuff32v2 = new DataView(tmpBuff322.buffer);
    tmpBuff32v2.setUint32(0, v3, false);
    await self2.write(tmpBuff322, pos);
  }
  async writeULE64(v3, pos) {
    const self2 = this;
    const tmpBuff642 = new Uint8Array(8);
    const tmpBuff64v2 = new DataView(tmpBuff642.buffer);
    tmpBuff64v2.setUint32(0, v3 & 4294967295, true);
    tmpBuff64v2.setUint32(4, Math.floor(v3 / 4294967296), true);
    await self2.write(tmpBuff642, pos);
  }
  async readULE32(pos) {
    const self2 = this;
    const b3 = await self2.read(4, pos);
    const view = new Uint32Array(b3.buffer);
    return view[0];
  }
  async readUBE32(pos) {
    const self2 = this;
    const b3 = await self2.read(4, pos);
    const view = new DataView(b3.buffer);
    return view.getUint32(0, false);
  }
  async readULE64(pos) {
    const self2 = this;
    const b3 = await self2.read(8, pos);
    const view = new Uint32Array(b3.buffer);
    return view[1] * 4294967296 + view[0];
  }
};
function createNew$1(o3) {
  const initialSize = o3.initialSize || 1 << 20;
  const fd = new MemFile();
  fd.o = o3;
  fd.o.data = new Uint8Array(initialSize);
  fd.allocSize = initialSize;
  fd.totalSize = 0;
  fd.readOnly = false;
  fd.pos = 0;
  return fd;
}
function readExisting$2(o3) {
  const fd = new MemFile();
  fd.o = o3;
  fd.allocSize = o3.data.byteLength;
  fd.totalSize = o3.data.byteLength;
  fd.readOnly = true;
  fd.pos = 0;
  return fd;
}
var tmpBuff32$1 = new Uint8Array(4);
var tmpBuff32v$1 = new DataView(tmpBuff32$1.buffer);
var tmpBuff64$1 = new Uint8Array(8);
var tmpBuff64v$1 = new DataView(tmpBuff64$1.buffer);
var MemFile = class {
  constructor() {
    this.pageSize = 1 << 14;
  }
  _resizeIfNeeded(newLen) {
    if (newLen > this.allocSize) {
      const newAllocSize = Math.max(this.allocSize + (1 << 20), Math.floor(this.allocSize * 1.1), newLen);
      const newData = new Uint8Array(newAllocSize);
      newData.set(this.o.data);
      this.o.data = newData;
      this.allocSize = newAllocSize;
    }
  }
  async write(buff, pos) {
    const self2 = this;
    if (typeof pos == "undefined")
      pos = self2.pos;
    if (this.readOnly)
      throw new Error("Writing a read only file");
    this._resizeIfNeeded(pos + buff.byteLength);
    this.o.data.set(buff.slice(), pos);
    if (pos + buff.byteLength > this.totalSize)
      this.totalSize = pos + buff.byteLength;
    this.pos = pos + buff.byteLength;
  }
  async readToBuffer(buffDest, offset, len, pos) {
    const self2 = this;
    if (typeof pos == "undefined")
      pos = self2.pos;
    if (this.readOnly) {
      if (pos + len > this.totalSize)
        throw new Error("Reading out of bounds");
    }
    this._resizeIfNeeded(pos + len);
    const buffSrc = new Uint8Array(this.o.data.buffer, this.o.data.byteOffset + pos, len);
    buffDest.set(buffSrc, offset);
    this.pos = pos + len;
  }
  async read(len, pos) {
    const self2 = this;
    const buff = new Uint8Array(len);
    await self2.readToBuffer(buff, 0, len, pos);
    return buff;
  }
  close() {
    if (this.o.data.byteLength != this.totalSize) {
      this.o.data = this.o.data.slice(0, this.totalSize);
    }
  }
  async discard() {
  }
  async writeULE32(v3, pos) {
    const self2 = this;
    tmpBuff32v$1.setUint32(0, v3, true);
    await self2.write(tmpBuff32$1, pos);
  }
  async writeUBE32(v3, pos) {
    const self2 = this;
    tmpBuff32v$1.setUint32(0, v3, false);
    await self2.write(tmpBuff32$1, pos);
  }
  async writeULE64(v3, pos) {
    const self2 = this;
    tmpBuff64v$1.setUint32(0, v3 & 4294967295, true);
    tmpBuff64v$1.setUint32(4, Math.floor(v3 / 4294967296), true);
    await self2.write(tmpBuff64$1, pos);
  }
  async readULE32(pos) {
    const self2 = this;
    const b3 = await self2.read(4, pos);
    const view = new Uint32Array(b3.buffer);
    return view[0];
  }
  async readUBE32(pos) {
    const self2 = this;
    const b3 = await self2.read(4, pos);
    const view = new DataView(b3.buffer);
    return view.getUint32(0, false);
  }
  async readULE64(pos) {
    const self2 = this;
    const b3 = await self2.read(8, pos);
    const view = new Uint32Array(b3.buffer);
    return view[1] * 4294967296 + view[0];
  }
};
var PAGE_SIZE = 1 << 22;
function createNew(o3) {
  const initialSize = o3.initialSize || 0;
  const fd = new BigMemFile();
  fd.o = o3;
  const nPages = initialSize ? Math.floor((initialSize - 1) / PAGE_SIZE) + 1 : 0;
  fd.o.data = [];
  for (let i3 = 0; i3 < nPages - 1; i3++) {
    fd.o.data.push(new Uint8Array(PAGE_SIZE));
  }
  if (nPages)
    fd.o.data.push(new Uint8Array(initialSize - PAGE_SIZE * (nPages - 1)));
  fd.totalSize = 0;
  fd.readOnly = false;
  fd.pos = 0;
  return fd;
}
function readExisting$1(o3) {
  const fd = new BigMemFile();
  fd.o = o3;
  fd.totalSize = (o3.data.length - 1) * PAGE_SIZE + o3.data[o3.data.length - 1].byteLength;
  fd.readOnly = true;
  fd.pos = 0;
  return fd;
}
var tmpBuff32 = new Uint8Array(4);
var tmpBuff32v = new DataView(tmpBuff32.buffer);
var tmpBuff64 = new Uint8Array(8);
var tmpBuff64v = new DataView(tmpBuff64.buffer);
var BigMemFile = class {
  constructor() {
    this.pageSize = 1 << 14;
  }
  _resizeIfNeeded(newLen) {
    if (newLen <= this.totalSize)
      return;
    if (this.readOnly)
      throw new Error("Reading out of file bounds");
    const nPages = Math.floor((newLen - 1) / PAGE_SIZE) + 1;
    for (let i3 = Math.max(this.o.data.length - 1, 0); i3 < nPages; i3++) {
      const newSize = i3 < nPages - 1 ? PAGE_SIZE : newLen - (nPages - 1) * PAGE_SIZE;
      const p2 = new Uint8Array(newSize);
      if (i3 == this.o.data.length - 1)
        p2.set(this.o.data[i3]);
      this.o.data[i3] = p2;
    }
    this.totalSize = newLen;
  }
  async write(buff, pos) {
    const self2 = this;
    if (typeof pos == "undefined")
      pos = self2.pos;
    if (this.readOnly)
      throw new Error("Writing a read only file");
    this._resizeIfNeeded(pos + buff.byteLength);
    const firstPage = Math.floor(pos / PAGE_SIZE);
    let p2 = firstPage;
    let o3 = pos % PAGE_SIZE;
    let r3 = buff.byteLength;
    while (r3 > 0) {
      const l3 = o3 + r3 > PAGE_SIZE ? PAGE_SIZE - o3 : r3;
      const srcView = buff.slice(buff.byteLength - r3, buff.byteLength - r3 + l3);
      const dstView = new Uint8Array(self2.o.data[p2].buffer, o3, l3);
      dstView.set(srcView);
      r3 = r3 - l3;
      p2++;
      o3 = 0;
    }
    this.pos = pos + buff.byteLength;
  }
  async readToBuffer(buffDst, offset, len, pos) {
    const self2 = this;
    if (typeof pos == "undefined")
      pos = self2.pos;
    if (this.readOnly) {
      if (pos + len > this.totalSize)
        throw new Error("Reading out of bounds");
    }
    this._resizeIfNeeded(pos + len);
    const firstPage = Math.floor(pos / PAGE_SIZE);
    let p2 = firstPage;
    let o3 = pos % PAGE_SIZE;
    let r3 = len;
    while (r3 > 0) {
      const l3 = o3 + r3 > PAGE_SIZE ? PAGE_SIZE - o3 : r3;
      const srcView = new Uint8Array(self2.o.data[p2].buffer, o3, l3);
      buffDst.set(srcView, offset + len - r3);
      r3 = r3 - l3;
      p2++;
      o3 = 0;
    }
    this.pos = pos + len;
  }
  async read(len, pos) {
    const self2 = this;
    const buff = new Uint8Array(len);
    await self2.readToBuffer(buff, 0, len, pos);
    return buff;
  }
  close() {
  }
  async discard() {
  }
  async writeULE32(v3, pos) {
    const self2 = this;
    tmpBuff32v.setUint32(0, v3, true);
    await self2.write(tmpBuff32, pos);
  }
  async writeUBE32(v3, pos) {
    const self2 = this;
    tmpBuff32v.setUint32(0, v3, false);
    await self2.write(tmpBuff32, pos);
  }
  async writeULE64(v3, pos) {
    const self2 = this;
    tmpBuff64v.setUint32(0, v3 & 4294967295, true);
    tmpBuff64v.setUint32(4, Math.floor(v3 / 4294967296), true);
    await self2.write(tmpBuff64, pos);
  }
  async readULE32(pos) {
    const self2 = this;
    const b3 = await self2.read(4, pos);
    const view = new Uint32Array(b3.buffer);
    return view[0];
  }
  async readUBE32(pos) {
    const self2 = this;
    const b3 = await self2.read(4, pos);
    const view = new DataView(b3.buffer);
    return view.getUint32(0, false);
  }
  async readULE64(pos) {
    const self2 = this;
    const b3 = await self2.read(8, pos);
    const view = new Uint32Array(b3.buffer);
    return view[1] * 4294967296 + view[0];
  }
};
var DEFAULT_CACHE_SIZE = 1 << 16;
var DEFAULT_PAGE_SIZE = 1 << 13;
async function createOverride(o3, b3, c5) {
  if (typeof o3 === "string") {
    o3 = {
      type: "file",
      fileName: o3,
      cacheSize: b3 || DEFAULT_CACHE_SIZE,
      pageSize: c5 || DEFAULT_PAGE_SIZE
    };
  }
  if (o3.type == "file") {
    return await open(o3.fileName, "w+", o3.cacheSize, o3.pageSize);
  } else if (o3.type == "mem") {
    return createNew$1(o3);
  } else if (o3.type == "bigMem") {
    return createNew(o3);
  } else {
    throw new Error("Invalid FastFile type: " + o3.type);
  }
}
async function readExisting(o3, b3, c5) {
  if (o3 instanceof Uint8Array) {
    o3 = {
      type: "mem",
      data: o3
    };
  }
  {
    if (typeof o3 === "string") {
      const buff = await fetch(o3).then(function(res) {
        return res.arrayBuffer();
      }).then(function(ab) {
        return new Uint8Array(ab);
      });
      o3 = {
        type: "mem",
        data: buff
      };
    }
  }
  if (o3.type == "file") {
    return await open(o3.fileName, "r", o3.cacheSize, o3.pageSize);
  } else if (o3.type == "mem") {
    return await readExisting$2(o3);
  } else if (o3.type == "bigMem") {
    return await readExisting$1(o3);
  } else {
    throw new Error("Invalid FastFile type: " + o3.type);
  }
}
async function readBinFile(fileName, type, maxVersion, cacheSize, pageSize) {
  const fd = await readExisting(fileName);
  const b3 = await fd.read(4);
  let readedType = "";
  for (let i3 = 0; i3 < 4; i3++)
    readedType += String.fromCharCode(b3[i3]);
  if (readedType != type)
    throw new Error(fileName + ": Invalid File format");
  let v3 = await fd.readULE32();
  if (v3 > maxVersion)
    throw new Error("Version not supported");
  const nSections = await fd.readULE32();
  let sections = [];
  for (let i3 = 0; i3 < nSections; i3++) {
    let ht = await fd.readULE32();
    let hl = await fd.readULE64();
    if (typeof sections[ht] == "undefined")
      sections[ht] = [];
    sections[ht].push({
      p: fd.pos,
      size: hl
    });
    fd.pos += hl;
  }
  return { fd, sections };
}
async function createBinFile(fileName, type, version28, nSections, cacheSize, pageSize) {
  const fd = await createOverride(fileName, cacheSize, pageSize);
  const buff = new Uint8Array(4);
  for (let i3 = 0; i3 < 4; i3++)
    buff[i3] = type.charCodeAt(i3);
  await fd.write(buff, 0);
  await fd.writeULE32(version28);
  await fd.writeULE32(nSections);
  return fd;
}
async function startWriteSection(fd, idSection) {
  if (typeof fd.writingSection !== "undefined")
    throw new Error("Already writing a section");
  await fd.writeULE32(idSection);
  fd.writingSection = {
    pSectionSize: fd.pos
  };
  await fd.writeULE64(0);
}
async function endWriteSection(fd) {
  if (typeof fd.writingSection === "undefined")
    throw new Error("Not writing a section");
  const sectionSize = fd.pos - fd.writingSection.pSectionSize - 8;
  const oldPos = fd.pos;
  fd.pos = fd.writingSection.pSectionSize;
  await fd.writeULE64(sectionSize);
  fd.pos = oldPos;
  delete fd.writingSection;
}
async function startReadUniqueSection(fd, sections, idSection) {
  if (typeof fd.readingSection !== "undefined")
    throw new Error("Already reading a section");
  if (!sections[idSection])
    throw new Error(fd.fileName + ": Missing section " + idSection);
  if (sections[idSection].length > 1)
    throw new Error(fd.fileName + ": Section Duplicated " + idSection);
  fd.pos = sections[idSection][0].p;
  fd.readingSection = sections[idSection][0];
}
async function endReadSection(fd, noCheck) {
  if (typeof fd.readingSection === "undefined")
    throw new Error("Not reading a section");
  if (!noCheck) {
    if (fd.pos - fd.readingSection.p != fd.readingSection.size)
      throw new Error("Invalid section size reading");
  }
  delete fd.readingSection;
}
async function writeBigInt(fd, n2, n8, pos) {
  const buff = new Uint8Array(n8);
  Scalar2.toRprLE(buff, 0, n2, n8);
  await fd.write(buff, pos);
}
async function readBigInt(fd, n8, pos) {
  const buff = await fd.read(n8, pos);
  return Scalar2.fromRprLE(buff, 0, n8);
}
async function readSection(fd, sections, idSection, offset, length) {
  offset = typeof offset === "undefined" ? 0 : offset;
  length = typeof length === "undefined" ? sections[idSection][0].size - offset : length;
  if (offset + length > sections[idSection][0].size) {
    throw new Error("Reading out of the range of the section");
  }
  let buff;
  if (length < 1 << 30) {
    buff = new Uint8Array(length);
  } else {
    buff = new BigBuffer(length);
  }
  await fd.readToBuffer(buff, 0, length, sections[idSection][0].p + offset);
  return buff;
}
Scalar2.e("73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001", 16);
Scalar2.e("21888242871839275222246405745257275088548364400416034343698204186575808495617");
var bls12381q = Scalar2.e("1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab", 16);
var bn128q = Scalar2.e("21888242871839275222246405745257275088696311157297823662689037894645226208583");
async function getCurveFromQ(q) {
  let curve;
  if (Scalar2.eq(q, bn128q)) {
    curve = await buildBn128();
  } else if (Scalar2.eq(q, bls12381q)) {
    curve = await buildBls12381();
  } else {
    throw new Error(`Curve not supported: ${Scalar2.toString(q)}`);
  }
  return curve;
}
async function getCurveFromName(name2) {
  let curve;
  const normName = normalizeName(name2);
  if (["BN128", "BN254", "ALTBN128"].indexOf(normName) >= 0) {
    curve = await buildBn128();
  } else if (["BLS12381"].indexOf(normName) >= 0) {
    curve = await buildBls12381();
  } else {
    throw new Error(`Curve not supported: ${name2}`);
  }
  return curve;
  function normalizeName(n2) {
    return n2.toUpperCase().match(/[A-Za-z0-9]+/g).join("");
  }
}
var nanoassert = assert2;
var AssertionError = class extends Error {
};
AssertionError.prototype.name = "AssertionError";
function assert2(t3, m3) {
  if (!t3) {
    var err = new AssertionError(m3);
    if (Error.captureStackTrace)
      Error.captureStackTrace(err, assert2);
    throw err;
  }
}
function byteLength$5(string2) {
  return string2.length;
}
function toString$5(buffer) {
  const len = buffer.byteLength;
  let result = "";
  for (let i3 = 0; i3 < len; i3++) {
    result += String.fromCharCode(buffer[i3]);
  }
  return result;
}
function write$6(buffer, string2, offset = 0, length = byteLength$5(string2)) {
  const len = Math.min(length, buffer.byteLength - offset);
  for (let i3 = 0; i3 < len; i3++) {
    buffer[offset + i3] = string2.charCodeAt(i3);
  }
  return len;
}
var ascii = {
  byteLength: byteLength$5,
  toString: toString$5,
  write: write$6
};
var alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var codes = new Uint8Array(256);
for (let i3 = 0; i3 < alphabet.length; i3++) {
  codes[alphabet.charCodeAt(i3)] = i3;
}
codes[45] = 62;
codes[95] = 63;
function byteLength$4(string2) {
  let len = string2.length;
  if (string2.charCodeAt(len - 1) === 61)
    len--;
  if (len > 1 && string2.charCodeAt(len - 1) === 61)
    len--;
  return len * 3 >>> 2;
}
function toString$4(buffer) {
  const len = buffer.byteLength;
  let result = "";
  for (let i3 = 0; i3 < len; i3 += 3) {
    result += alphabet[buffer[i3] >> 2] + alphabet[(buffer[i3] & 3) << 4 | buffer[i3 + 1] >> 4] + alphabet[(buffer[i3 + 1] & 15) << 2 | buffer[i3 + 2] >> 6] + alphabet[buffer[i3 + 2] & 63];
  }
  if (len % 3 === 2) {
    result = result.substring(0, result.length - 1) + "=";
  } else if (len % 3 === 1) {
    result = result.substring(0, result.length - 2) + "==";
  }
  return result;
}
function write$5(buffer, string2, offset = 0, length = byteLength$4(string2)) {
  const len = Math.min(length, buffer.byteLength - offset);
  for (let i3 = 0, j3 = 0; i3 < len; i3 += 4) {
    const a3 = codes[string2.charCodeAt(i3)];
    const b3 = codes[string2.charCodeAt(i3 + 1)];
    const c5 = codes[string2.charCodeAt(i3 + 2)];
    const d2 = codes[string2.charCodeAt(i3 + 3)];
    buffer[j3++] = a3 << 2 | b3 >> 4;
    buffer[j3++] = (b3 & 15) << 4 | c5 >> 2;
    buffer[j3++] = (c5 & 3) << 6 | d2 & 63;
  }
  return len;
}
var base64 = {
  byteLength: byteLength$4,
  toString: toString$4,
  write: write$5
};
function byteLength$3(string2) {
  return string2.length >>> 1;
}
function toString$3(buffer) {
  const len = buffer.byteLength;
  buffer = new DataView(buffer.buffer, buffer.byteOffset, len);
  let result = "";
  let i3 = 0;
  for (let n2 = len - len % 4; i3 < n2; i3 += 4) {
    result += buffer.getUint32(i3).toString(16).padStart(8, "0");
  }
  for (; i3 < len; i3++) {
    result += buffer.getUint8(i3).toString(16).padStart(2, "0");
  }
  return result;
}
function write$4(buffer, string2, offset = 0, length = byteLength$3(string2)) {
  const len = Math.min(length, buffer.byteLength - offset);
  for (let i3 = 0; i3 < len; i3++) {
    const a3 = hexValue(string2.charCodeAt(i3 * 2));
    const b3 = hexValue(string2.charCodeAt(i3 * 2 + 1));
    if (a3 === void 0 || b3 === void 0) {
      return buffer.subarray(0, i3);
    }
    buffer[offset + i3] = a3 << 4 | b3;
  }
  return len;
}
var hex = {
  byteLength: byteLength$3,
  toString: toString$3,
  write: write$4
};
function hexValue(char) {
  if (char >= 48 && char <= 57)
    return char - 48;
  if (char >= 65 && char <= 70)
    return char - 65 + 10;
  if (char >= 97 && char <= 102)
    return char - 97 + 10;
}
function byteLength$2(string2) {
  let length = 0;
  for (let i3 = 0, n2 = string2.length; i3 < n2; i3++) {
    const code = string2.charCodeAt(i3);
    if (code >= 55296 && code <= 56319 && i3 + 1 < n2) {
      const code2 = string2.charCodeAt(i3 + 1);
      if (code2 >= 56320 && code2 <= 57343) {
        length += 4;
        i3++;
        continue;
      }
    }
    if (code <= 127)
      length += 1;
    else if (code <= 2047)
      length += 2;
    else
      length += 3;
  }
  return length;
}
var toString$2;
if (typeof TextDecoder !== "undefined") {
  const decoder = new TextDecoder();
  toString$2 = function toString3(buffer) {
    return decoder.decode(buffer);
  };
} else {
  toString$2 = function toString3(buffer) {
    const len = buffer.byteLength;
    let output = "";
    let i3 = 0;
    while (i3 < len) {
      let byte = buffer[i3];
      if (byte <= 127) {
        output += String.fromCharCode(byte);
        i3++;
        continue;
      }
      let bytesNeeded = 0;
      let codePoint = 0;
      if (byte <= 223) {
        bytesNeeded = 1;
        codePoint = byte & 31;
      } else if (byte <= 239) {
        bytesNeeded = 2;
        codePoint = byte & 15;
      } else if (byte <= 244) {
        bytesNeeded = 3;
        codePoint = byte & 7;
      }
      if (len - i3 - bytesNeeded > 0) {
        let k3 = 0;
        while (k3 < bytesNeeded) {
          byte = buffer[i3 + k3 + 1];
          codePoint = codePoint << 6 | byte & 63;
          k3 += 1;
        }
      } else {
        codePoint = 65533;
        bytesNeeded = len - i3;
      }
      output += String.fromCodePoint(codePoint);
      i3 += bytesNeeded + 1;
    }
    return output;
  };
}
var write$3;
if (typeof TextEncoder !== "undefined") {
  const encoder = new TextEncoder();
  write$3 = function write(buffer, string2, offset = 0, length = byteLength$2(string2)) {
    const len = Math.min(length, buffer.byteLength - offset);
    encoder.encodeInto(string2, buffer.subarray(offset, offset + len));
    return len;
  };
} else {
  write$3 = function write(buffer, string2, offset = 0, length = byteLength$2(string2)) {
    const len = Math.min(length, buffer.byteLength - offset);
    buffer = buffer.subarray(offset, offset + len);
    let i3 = 0;
    let j3 = 0;
    while (i3 < string2.length) {
      const code = string2.codePointAt(i3);
      if (code <= 127) {
        buffer[j3++] = code;
        i3++;
        continue;
      }
      let count = 0;
      let bits2 = 0;
      if (code <= 2047) {
        count = 6;
        bits2 = 192;
      } else if (code <= 65535) {
        count = 12;
        bits2 = 224;
      } else if (code <= 2097151) {
        count = 18;
        bits2 = 240;
      }
      buffer[j3++] = bits2 | code >> count;
      count -= 6;
      while (count >= 0) {
        buffer[j3++] = 128 | code >> count & 63;
        count -= 6;
      }
      i3 += code >= 65536 ? 2 : 1;
    }
    return len;
  };
}
var utf8 = {
  byteLength: byteLength$2,
  toString: toString$2,
  write: write$3
};
function byteLength$1(string2) {
  return string2.length * 2;
}
function toString$1(buffer) {
  const len = buffer.byteLength;
  let result = "";
  for (let i3 = 0; i3 < len - 1; i3 += 2) {
    result += String.fromCharCode(buffer[i3] + buffer[i3 + 1] * 256);
  }
  return result;
}
function write$2(buffer, string2, offset = 0, length = byteLength$1(string2)) {
  const len = Math.min(length, buffer.byteLength - offset);
  let units = len;
  for (let i3 = 0; i3 < string2.length; ++i3) {
    if ((units -= 2) < 0)
      break;
    const c5 = string2.charCodeAt(i3);
    const hi = c5 >> 8;
    const lo = c5 % 256;
    buffer[offset + i3 * 2] = lo;
    buffer[offset + i3 * 2 + 1] = hi;
  }
  return len;
}
var utf16le = {
  byteLength: byteLength$1,
  toString: toString$1,
  write: write$2
};
function codecFor(encoding) {
  switch (encoding) {
    case "ascii":
      return ascii;
    case "base64":
      return base64;
    case "hex":
      return hex;
    case "utf8":
    case "utf-8":
    case void 0:
      return utf8;
    case "ucs2":
    case "ucs-2":
    case "utf16le":
    case "utf-16le":
      return utf16le;
    default:
      throw new Error(`Unknown encoding: ${encoding}`);
  }
}
function isBuffer(value) {
  return value instanceof Uint8Array;
}
function alloc(size, fill2, encoding) {
  const buffer = new Uint8Array(size);
  if (fill2 !== void 0)
    fill2(buffer, fill2, 0, buffer.byteLength, encoding);
  return buffer;
}
function allocUnsafe(size) {
  return new Uint8Array(size);
}
function allocUnsafeSlow(size) {
  return new Uint8Array(size);
}
function byteLength(string2, encoding) {
  return codecFor(encoding).byteLength(string2);
}
function compare(a3, b3) {
  if (a3 === b3)
    return 0;
  const len = Math.min(a3.byteLength, b3.byteLength);
  a3 = new DataView(a3.buffer, a3.byteOffset, a3.byteLength);
  b3 = new DataView(b3.buffer, b3.byteOffset, b3.byteLength);
  let i3 = 0;
  for (let n2 = len - len % 4; i3 < n2; i3 += 4) {
    const x3 = a3.getUint32(i3);
    const y3 = b3.getUint32(i3);
    if (x3 < y3)
      return -1;
    if (x3 > y3)
      return 1;
  }
  for (; i3 < len; i3++) {
    const x3 = a3.getUint8(i3);
    const y3 = b3.getUint8(i3);
    if (x3 < y3)
      return -1;
    if (x3 > y3)
      return 1;
  }
  return a3.byteLength > b3.byteLength ? 1 : a3.byteLength < b3.byteLength ? -1 : 0;
}
function concat(buffers, totalLength) {
  if (totalLength === void 0) {
    totalLength = buffers.reduce((len, buffer) => len + buffer.byteLength, 0);
  }
  const result = new Uint8Array(totalLength);
  buffers.reduce((offset, buffer) => {
    result.set(buffer, offset);
    return offset + buffer.byteLength;
  }, 0);
  return result;
}
function copy(source, target, targetStart = 0, start = 0, end = source.byteLength) {
  if (end > 0 && end < start)
    return 0;
  if (end === start)
    return 0;
  if (source.byteLength === 0 || target.byteLength === 0)
    return 0;
  if (targetStart < 0)
    throw new RangeError("targetStart is out of range");
  if (start < 0 || start >= source.byteLength)
    throw new RangeError("sourceStart is out of range");
  if (end < 0)
    throw new RangeError("sourceEnd is out of range");
  if (targetStart >= target.byteLength)
    targetStart = target.byteLength;
  if (end > source.byteLength)
    end = source.byteLength;
  if (target.byteLength - targetStart < end - start) {
    end = target.length - targetStart + start;
  }
  const len = end - start;
  if (source === target) {
    target.copyWithin(targetStart, start, end);
  } else {
    target.set(source.subarray(start, end), targetStart);
  }
  return len;
}
function equals(a3, b3) {
  if (a3 === b3)
    return true;
  if (a3.byteLength !== b3.byteLength)
    return false;
  const len = a3.byteLength;
  a3 = new DataView(a3.buffer, a3.byteOffset, a3.byteLength);
  b3 = new DataView(b3.buffer, b3.byteOffset, b3.byteLength);
  let i3 = 0;
  for (let n2 = len - len % 4; i3 < n2; i3 += 4) {
    if (a3.getUint32(i3) !== b3.getUint32(i3))
      return false;
  }
  for (; i3 < len; i3++) {
    if (a3.getUint8(i3) !== b3.getUint8(i3))
      return false;
  }
  return true;
}
function fill(buffer, value, offset, end, encoding) {
  if (typeof value === "string") {
    if (typeof offset === "string") {
      encoding = offset;
      offset = 0;
      end = buffer.byteLength;
    } else if (typeof end === "string") {
      encoding = end;
      end = buffer.byteLength;
    }
  } else if (typeof val === "number") {
    value = value & 255;
  } else if (typeof val === "boolean") {
    value = +value;
  }
  if (offset < 0 || buffer.byteLength < offset || buffer.byteLength < end) {
    throw new RangeError("Out of range index");
  }
  if (offset === void 0)
    offset = 0;
  if (end === void 0)
    end = buffer.byteLength;
  if (end <= offset)
    return buffer;
  if (!value)
    value = 0;
  if (typeof value === "number") {
    for (let i3 = offset; i3 < end; ++i3) {
      buffer[i3] = value;
    }
  } else {
    value = isBuffer(value) ? value : from(value, encoding);
    const len = value.byteLength;
    for (let i3 = 0; i3 < end - offset; ++i3) {
      buffer[i3 + offset] = value[i3 % len];
    }
  }
  return buffer;
}
function from(value, encodingOrOffset, length) {
  if (typeof value === "string")
    return fromString(value, encodingOrOffset);
  if (Array.isArray(value))
    return fromArray(value);
  if (ArrayBuffer.isView(value))
    return fromBuffer(value);
  return fromArrayBuffer(value, encodingOrOffset, length);
}
function fromString(string2, encoding) {
  const codec = codecFor(encoding);
  const buffer = new Uint8Array(codec.byteLength(string2));
  codec.write(buffer, string2, 0, buffer.byteLength);
  return buffer;
}
function fromArray(array) {
  const buffer = new Uint8Array(array.length);
  buffer.set(array);
  return buffer;
}
function fromBuffer(buffer) {
  const copy2 = new Uint8Array(buffer.byteLength);
  copy2.set(buffer);
  return copy2;
}
function fromArrayBuffer(arrayBuffer, byteOffset, length) {
  return new Uint8Array(arrayBuffer, byteOffset, length);
}
function swap(buffer, n2, m3) {
  const i3 = buffer[n2];
  buffer[n2] = buffer[m3];
  buffer[m3] = i3;
}
function swap16(buffer) {
  const len = buffer.byteLength;
  if (len % 2 !== 0)
    throw new RangeError("Buffer size must be a multiple of 16-bits");
  for (let i3 = 0; i3 < len; i3 += 2)
    swap(buffer, i3, i3 + 1);
  return buffer;
}
function swap32(buffer) {
  const len = buffer.byteLength;
  if (len % 4 !== 0)
    throw new RangeError("Buffer size must be a multiple of 32-bits");
  for (let i3 = 0; i3 < len; i3 += 4) {
    swap(buffer, i3, i3 + 3);
    swap(buffer, i3 + 1, i3 + 2);
  }
  return buffer;
}
function swap64(buffer) {
  const len = buffer.byteLength;
  if (len % 8 !== 0)
    throw new RangeError("Buffer size must be a multiple of 64-bits");
  for (let i3 = 0; i3 < len; i3 += 8) {
    swap(buffer, i3, i3 + 7);
    swap(buffer, i3 + 1, i3 + 6);
    swap(buffer, i3 + 2, i3 + 5);
    swap(buffer, i3 + 3, i3 + 4);
  }
  return buffer;
}
function toBuffer(buffer) {
  return buffer;
}
function toString2(buffer, encoding, start = 0, end = buffer.byteLength) {
  const len = buffer.byteLength;
  if (start >= len)
    return "";
  if (end <= start)
    return "";
  if (start < 0)
    start = 0;
  if (end > len)
    end = len;
  if (start !== 0 || end < len)
    buffer = buffer.subarray(start, end);
  return codecFor(encoding).toString(buffer);
}
function write$1(buffer, string2, offset, length, encoding) {
  if (offset === void 0) {
    encoding = "utf8";
  } else if (length === void 0 && typeof offset === "string") {
    encoding = offset;
    offset = void 0;
  } else if (encoding === void 0 && typeof length === "string") {
    encoding = length;
    length = void 0;
  }
  return codecFor(encoding).write(buffer, string2, offset, length);
}
var browser = {
  isBuffer,
  alloc,
  allocUnsafe,
  allocUnsafeSlow,
  byteLength,
  compare,
  concat,
  copy,
  equals,
  fill,
  from,
  swap16,
  swap32,
  swap64,
  toBuffer,
  toString: toString2,
  write: write$1
};
var __commonJS2 = (cb, mod2) => function __require() {
  return mod2 || (0, cb[Object.keys(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __toBinary = /* @__PURE__ */ (() => {
  var table = new Uint8Array(128);
  for (var i3 = 0; i3 < 64; i3++)
    table[i3 < 26 ? i3 + 65 : i3 < 52 ? i3 + 71 : i3 < 62 ? i3 - 4 : i3 * 4 - 205] = i3;
  return (base642) => {
    var n2 = base642.length, bytes22 = new Uint8Array((n2 - (base642[n2 - 1] == "=") - (base642[n2 - 2] == "=")) * 3 / 4 | 0);
    for (var i22 = 0, j3 = 0; i22 < n2; ) {
      var c0 = table[base642.charCodeAt(i22++)], c1 = table[base642.charCodeAt(i22++)];
      var c22 = table[base642.charCodeAt(i22++)], c32 = table[base642.charCodeAt(i22++)];
      bytes22[j3++] = c0 << 2 | c1 >> 4;
      bytes22[j3++] = c1 << 4 | c22 >> 2;
      bytes22[j3++] = c22 << 6 | c32;
    }
    return bytes22;
  };
})();
var require_blake2b = __commonJS2({
  "wasm-binary:./blake2b.wat"(exports2, module2) {
    module2.exports = __toBinary("");
  }
});
var bytes = require_blake2b();
var compiled = WebAssembly.compile(bytes);
var blake2b = async (imports) => {
  const instance = await WebAssembly.instantiate(await compiled, imports);
  return instance.exports;
};
var blake2bWasm = createCommonjsModule(function(module) {
  var wasm = null;
  var wasmPromise = typeof WebAssembly !== "undefined" && blake2b().then((mod2) => {
    wasm = mod2;
  });
  var head = 64;
  var freeList = [];
  module.exports = Blake2b;
  var BYTES_MIN = module.exports.BYTES_MIN = 16;
  var BYTES_MAX = module.exports.BYTES_MAX = 64;
  module.exports.BYTES = 32;
  var KEYBYTES_MIN = module.exports.KEYBYTES_MIN = 16;
  var KEYBYTES_MAX = module.exports.KEYBYTES_MAX = 64;
  module.exports.KEYBYTES = 32;
  var SALTBYTES = module.exports.SALTBYTES = 16;
  var PERSONALBYTES = module.exports.PERSONALBYTES = 16;
  function Blake2b(digestLength, key2, salt, personal, noAssert) {
    if (!(this instanceof Blake2b))
      return new Blake2b(digestLength, key2, salt, personal, noAssert);
    if (!wasm)
      throw new Error("WASM not loaded. Wait for Blake2b.ready(cb)");
    if (!digestLength)
      digestLength = 32;
    if (noAssert !== true) {
      nanoassert(digestLength >= BYTES_MIN, "digestLength must be at least " + BYTES_MIN + ", was given " + digestLength);
      nanoassert(digestLength <= BYTES_MAX, "digestLength must be at most " + BYTES_MAX + ", was given " + digestLength);
      if (key2 != null) {
        nanoassert(key2 instanceof Uint8Array, "key must be Uint8Array or Buffer");
        nanoassert(key2.length >= KEYBYTES_MIN, "key must be at least " + KEYBYTES_MIN + ", was given " + key2.length);
        nanoassert(key2.length <= KEYBYTES_MAX, "key must be at least " + KEYBYTES_MAX + ", was given " + key2.length);
      }
      if (salt != null) {
        nanoassert(salt instanceof Uint8Array, "salt must be Uint8Array or Buffer");
        nanoassert(salt.length === SALTBYTES, "salt must be exactly " + SALTBYTES + ", was given " + salt.length);
      }
      if (personal != null) {
        nanoassert(personal instanceof Uint8Array, "personal must be Uint8Array or Buffer");
        nanoassert(personal.length === PERSONALBYTES, "personal must be exactly " + PERSONALBYTES + ", was given " + personal.length);
      }
    }
    if (!freeList.length) {
      freeList.push(head);
      head += 216;
    }
    this.digestLength = digestLength;
    this.finalized = false;
    this.pointer = freeList.pop();
    this._memory = new Uint8Array(wasm.memory.buffer);
    this._memory.fill(0, 0, 64);
    this._memory[0] = this.digestLength;
    this._memory[1] = key2 ? key2.length : 0;
    this._memory[2] = 1;
    this._memory[3] = 1;
    if (salt)
      this._memory.set(salt, 32);
    if (personal)
      this._memory.set(personal, 48);
    if (this.pointer + 216 > this._memory.length)
      this._realloc(this.pointer + 216);
    wasm.blake2b_init(this.pointer, this.digestLength);
    if (key2) {
      this.update(key2);
      this._memory.fill(0, head, head + key2.length);
      this._memory[this.pointer + 200] = 128;
    }
  }
  Blake2b.prototype._realloc = function(size) {
    wasm.memory.grow(Math.max(0, Math.ceil(Math.abs(size - this._memory.length) / 65536)));
    this._memory = new Uint8Array(wasm.memory.buffer);
  };
  Blake2b.prototype.update = function(input) {
    nanoassert(this.finalized === false, "Hash instance finalized");
    nanoassert(input instanceof Uint8Array, "input must be Uint8Array or Buffer");
    if (head + input.length > this._memory.length)
      this._realloc(head + input.length);
    this._memory.set(input, head);
    wasm.blake2b_update(this.pointer, head, head + input.length);
    return this;
  };
  Blake2b.prototype.digest = function(enc) {
    nanoassert(this.finalized === false, "Hash instance finalized");
    this.finalized = true;
    freeList.push(this.pointer);
    wasm.blake2b_final(this.pointer);
    if (!enc || enc === "binary") {
      return this._memory.slice(this.pointer + 128, this.pointer + 128 + this.digestLength);
    }
    if (typeof enc === "string") {
      return browser.toString(this._memory, enc, this.pointer + 128, this.pointer + 128 + this.digestLength);
    }
    nanoassert(enc instanceof Uint8Array && enc.length >= this.digestLength, "input must be Uint8Array or Buffer");
    for (var i3 = 0; i3 < this.digestLength; i3++) {
      enc[i3] = this._memory[this.pointer + 128 + i3];
    }
    return enc;
  };
  Blake2b.prototype.final = Blake2b.prototype.digest;
  Blake2b.WASM = wasm;
  Blake2b.SUPPORTED = typeof WebAssembly !== "undefined";
  Blake2b.ready = function(cb) {
    if (!cb)
      cb = noop;
    if (!wasmPromise)
      return cb(new Error("WebAssembly not supported"));
    return wasmPromise.then(() => cb(), cb);
  };
  Blake2b.prototype.ready = Blake2b.ready;
  Blake2b.prototype.getPartialHash = function() {
    return this._memory.slice(this.pointer, this.pointer + 216);
  };
  Blake2b.prototype.setPartialHash = function(ph) {
    this._memory.set(ph, this.pointer);
  };
  function noop() {
  }
});
var _revTable = [];
for (let i3 = 0; i3 < 256; i3++) {
  _revTable[i3] = _revSlow(i3, 8);
}
function _revSlow(idx, bits2) {
  let res = 0;
  let a3 = idx;
  for (let i3 = 0; i3 < bits2; i3++) {
    res <<= 1;
    res = res | a3 & 1;
    a3 >>= 1;
  }
  return res;
}
function log22(V) {
  return ((V & 4294901760) !== 0 ? (V &= 4294901760, 16) : 0) | ((V & 4278255360) !== 0 ? (V &= 4278255360, 8) : 0) | ((V & 4042322160) !== 0 ? (V &= 4042322160, 4) : 0) | ((V & 3435973836) !== 0 ? (V &= 3435973836, 2) : 0) | (V & 2863311530) !== 0;
}
async function readG1(fd, curve, toObject) {
  const buff = await fd.read(curve.G1.F.n8 * 2);
  const res = curve.G1.fromRprLEM(buff, 0);
  return toObject ? curve.G1.toObject(res) : res;
}
async function readG2(fd, curve, toObject) {
  const buff = await fd.read(curve.G2.F.n8 * 2);
  const res = curve.G2.fromRprLEM(buff, 0);
  return toObject ? curve.G2.toObject(res) : res;
}
async function readHeader$1(fd, sections, toObject) {
  await startReadUniqueSection(fd, sections, 1);
  const protocolId = await fd.readULE32();
  await endReadSection(fd);
  if (protocolId == 1) {
    return await readHeaderGroth16(fd, sections, toObject);
  } else if (protocolId == 2) {
    return await readHeaderPlonk(fd, sections);
  } else {
    throw new Error("Protocol not supported: ");
  }
}
async function readHeaderGroth16(fd, sections, toObject) {
  const zkey = {};
  zkey.protocol = "groth16";
  await startReadUniqueSection(fd, sections, 2);
  const n8q = await fd.readULE32();
  zkey.n8q = n8q;
  zkey.q = await readBigInt(fd, n8q);
  const n8r = await fd.readULE32();
  zkey.n8r = n8r;
  zkey.r = await readBigInt(fd, n8r);
  let curve = await getCurveFromQ(zkey.q);
  zkey.nVars = await fd.readULE32();
  zkey.nPublic = await fd.readULE32();
  zkey.domainSize = await fd.readULE32();
  zkey.power = log22(zkey.domainSize);
  zkey.vk_alpha_1 = await readG1(fd, curve, toObject);
  zkey.vk_beta_1 = await readG1(fd, curve, toObject);
  zkey.vk_beta_2 = await readG2(fd, curve, toObject);
  zkey.vk_gamma_2 = await readG2(fd, curve, toObject);
  zkey.vk_delta_1 = await readG1(fd, curve, toObject);
  zkey.vk_delta_2 = await readG2(fd, curve, toObject);
  await endReadSection(fd);
  return zkey;
}
async function readHeaderPlonk(fd, sections, protocol, toObject) {
  const zkey = {};
  zkey.protocol = "plonk";
  await startReadUniqueSection(fd, sections, 2);
  const n8q = await fd.readULE32();
  zkey.n8q = n8q;
  zkey.q = await readBigInt(fd, n8q);
  const n8r = await fd.readULE32();
  zkey.n8r = n8r;
  zkey.r = await readBigInt(fd, n8r);
  let curve = await getCurveFromQ(zkey.q);
  zkey.nVars = await fd.readULE32();
  zkey.nPublic = await fd.readULE32();
  zkey.domainSize = await fd.readULE32();
  zkey.power = log22(zkey.domainSize);
  zkey.nAdditions = await fd.readULE32();
  zkey.nConstrains = await fd.readULE32();
  zkey.k1 = await fd.read(n8r);
  zkey.k2 = await fd.read(n8r);
  zkey.Qm = await readG1(fd, curve, toObject);
  zkey.Ql = await readG1(fd, curve, toObject);
  zkey.Qr = await readG1(fd, curve, toObject);
  zkey.Qo = await readG1(fd, curve, toObject);
  zkey.Qc = await readG1(fd, curve, toObject);
  zkey.S1 = await readG1(fd, curve, toObject);
  zkey.S2 = await readG1(fd, curve, toObject);
  zkey.S3 = await readG1(fd, curve, toObject);
  zkey.X_2 = await readG2(fd, curve, toObject);
  await endReadSection(fd);
  return zkey;
}
async function writeBin(fd, witnessBin, prime) {
  await startWriteSection(fd, 1);
  const n8 = (Math.floor((Scalar2.bitLength(prime) - 1) / 64) + 1) * 8;
  await fd.writeULE32(n8);
  await writeBigInt(fd, prime, n8);
  if (witnessBin.byteLength % n8 != 0) {
    throw new Error("Invalid witness length");
  }
  await fd.writeULE32(witnessBin.byteLength / n8);
  await endWriteSection(fd);
  await startWriteSection(fd, 2);
  await fd.write(witnessBin);
  await endWriteSection(fd);
}
async function readHeader(fd, sections) {
  await startReadUniqueSection(fd, sections, 1);
  const n8 = await fd.readULE32();
  const q = await readBigInt(fd, n8);
  const nWitness = await fd.readULE32();
  await endReadSection(fd);
  return { n8, q, nWitness };
}
var { stringifyBigInts: stringifyBigInts$3 } = utils2;
async function groth16Prove(zkeyFileName, witnessFileName, logger52) {
  const { fd: fdWtns, sections: sectionsWtns } = await readBinFile(witnessFileName, "wtns", 2);
  const wtns = await readHeader(fdWtns, sectionsWtns);
  const { fd: fdZKey, sections: sectionsZKey } = await readBinFile(zkeyFileName, "zkey", 2);
  const zkey = await readHeader$1(fdZKey, sectionsZKey);
  if (zkey.protocol != "groth16") {
    throw new Error("zkey file is not groth16");
  }
  if (!Scalar2.eq(zkey.r, wtns.q)) {
    throw new Error("Curve of the witness does not match the curve of the proving key");
  }
  if (wtns.nWitness != zkey.nVars) {
    throw new Error(`Invalid witness length. Circuit: ${zkey.nVars}, witness: ${wtns.nWitness}`);
  }
  const curve = await getCurveFromQ(zkey.q);
  const Fr = curve.Fr;
  const G1 = curve.G1;
  const G2 = curve.G2;
  const power = log22(zkey.domainSize);
  if (logger52)
    logger52.debug("Reading Wtns");
  const buffWitness = await readSection(fdWtns, sectionsWtns, 2);
  if (logger52)
    logger52.debug("Reading Coeffs");
  const buffCoeffs = await readSection(fdZKey, sectionsZKey, 4);
  if (logger52)
    logger52.debug("Building ABC");
  const [buffA_T, buffB_T, buffC_T] = await buildABC1(curve, zkey, buffWitness, buffCoeffs, logger52);
  const inc = power == Fr.s ? curve.Fr.shift : curve.Fr.w[power + 1];
  const buffA = await Fr.ifft(buffA_T, "", "", logger52, "IFFT_A");
  const buffAodd = await Fr.batchApplyKey(buffA, Fr.e(1), inc);
  const buffAodd_T = await Fr.fft(buffAodd, "", "", logger52, "FFT_A");
  const buffB = await Fr.ifft(buffB_T, "", "", logger52, "IFFT_B");
  const buffBodd = await Fr.batchApplyKey(buffB, Fr.e(1), inc);
  const buffBodd_T = await Fr.fft(buffBodd, "", "", logger52, "FFT_B");
  const buffC = await Fr.ifft(buffC_T, "", "", logger52, "IFFT_C");
  const buffCodd = await Fr.batchApplyKey(buffC, Fr.e(1), inc);
  const buffCodd_T = await Fr.fft(buffCodd, "", "", logger52, "FFT_C");
  if (logger52)
    logger52.debug("Join ABC");
  const buffPodd_T = await joinABC(curve, zkey, buffAodd_T, buffBodd_T, buffCodd_T, logger52);
  let proof = {};
  if (logger52)
    logger52.debug("Reading A Points");
  const buffBasesA = await readSection(fdZKey, sectionsZKey, 5);
  proof.pi_a = await curve.G1.multiExpAffine(buffBasesA, buffWitness, logger52, "multiexp A");
  if (logger52)
    logger52.debug("Reading B1 Points");
  const buffBasesB1 = await readSection(fdZKey, sectionsZKey, 6);
  let pib1 = await curve.G1.multiExpAffine(buffBasesB1, buffWitness, logger52, "multiexp B1");
  if (logger52)
    logger52.debug("Reading B2 Points");
  const buffBasesB2 = await readSection(fdZKey, sectionsZKey, 7);
  proof.pi_b = await curve.G2.multiExpAffine(buffBasesB2, buffWitness, logger52, "multiexp B2");
  if (logger52)
    logger52.debug("Reading C Points");
  const buffBasesC = await readSection(fdZKey, sectionsZKey, 8);
  proof.pi_c = await curve.G1.multiExpAffine(buffBasesC, buffWitness.slice((zkey.nPublic + 1) * curve.Fr.n8), logger52, "multiexp C");
  if (logger52)
    logger52.debug("Reading H Points");
  const buffBasesH = await readSection(fdZKey, sectionsZKey, 9);
  const resH = await curve.G1.multiExpAffine(buffBasesH, buffPodd_T, logger52, "multiexp H");
  const r3 = curve.Fr.random();
  const s2 = curve.Fr.random();
  proof.pi_a = G1.add(proof.pi_a, zkey.vk_alpha_1);
  proof.pi_a = G1.add(proof.pi_a, G1.timesFr(zkey.vk_delta_1, r3));
  proof.pi_b = G2.add(proof.pi_b, zkey.vk_beta_2);
  proof.pi_b = G2.add(proof.pi_b, G2.timesFr(zkey.vk_delta_2, s2));
  pib1 = G1.add(pib1, zkey.vk_beta_1);
  pib1 = G1.add(pib1, G1.timesFr(zkey.vk_delta_1, s2));
  proof.pi_c = G1.add(proof.pi_c, resH);
  proof.pi_c = G1.add(proof.pi_c, G1.timesFr(proof.pi_a, s2));
  proof.pi_c = G1.add(proof.pi_c, G1.timesFr(pib1, r3));
  proof.pi_c = G1.add(proof.pi_c, G1.timesFr(zkey.vk_delta_1, Fr.neg(Fr.mul(r3, s2))));
  let publicSignals = [];
  for (let i3 = 1; i3 <= zkey.nPublic; i3++) {
    const b3 = buffWitness.slice(i3 * Fr.n8, i3 * Fr.n8 + Fr.n8);
    publicSignals.push(Scalar2.fromRprLE(b3));
  }
  proof.pi_a = G1.toObject(G1.toAffine(proof.pi_a));
  proof.pi_b = G2.toObject(G2.toAffine(proof.pi_b));
  proof.pi_c = G1.toObject(G1.toAffine(proof.pi_c));
  proof.protocol = "groth16";
  proof.curve = curve.name;
  await fdZKey.close();
  await fdWtns.close();
  proof = stringifyBigInts$3(proof);
  publicSignals = stringifyBigInts$3(publicSignals);
  return { proof, publicSignals };
}
async function buildABC1(curve, zkey, witness, coeffs, logger52) {
  const n8 = curve.Fr.n8;
  const sCoef = 4 * 3 + zkey.n8r;
  const nCoef = (coeffs.byteLength - 4) / sCoef;
  const outBuffA = new BigBuffer(zkey.domainSize * n8);
  const outBuffB = new BigBuffer(zkey.domainSize * n8);
  const outBuffC = new BigBuffer(zkey.domainSize * n8);
  const outBuf = [outBuffA, outBuffB];
  for (let i3 = 0; i3 < nCoef; i3++) {
    if (logger52 && i3 % 1e6 == 0)
      logger52.debug(`QAP AB: ${i3}/${nCoef}`);
    const buffCoef = coeffs.slice(4 + i3 * sCoef, 4 + i3 * sCoef + sCoef);
    const buffCoefV = new DataView(buffCoef.buffer);
    const m3 = buffCoefV.getUint32(0, true);
    const c5 = buffCoefV.getUint32(4, true);
    const s2 = buffCoefV.getUint32(8, true);
    const coef = buffCoef.slice(12, 12 + n8);
    outBuf[m3].set(curve.Fr.add(outBuf[m3].slice(c5 * n8, c5 * n8 + n8), curve.Fr.mul(coef, witness.slice(s2 * n8, s2 * n8 + n8))), c5 * n8);
  }
  for (let i3 = 0; i3 < zkey.domainSize; i3++) {
    if (logger52 && i3 % 1e6 == 0)
      logger52.debug(`QAP C: ${i3}/${zkey.domainSize}`);
    outBuffC.set(curve.Fr.mul(outBuffA.slice(i3 * n8, i3 * n8 + n8), outBuffB.slice(i3 * n8, i3 * n8 + n8)), i3 * n8);
  }
  return [outBuffA, outBuffB, outBuffC];
}
async function joinABC(curve, zkey, a3, b3, c5, logger52) {
  const MAX_CHUNK_SIZE = 1 << 22;
  const n8 = curve.Fr.n8;
  const nElements = Math.floor(a3.byteLength / curve.Fr.n8);
  const promises = [];
  for (let i3 = 0; i3 < nElements; i3 += MAX_CHUNK_SIZE) {
    if (logger52)
      logger52.debug(`JoinABC: ${i3}/${nElements}`);
    const n2 = Math.min(nElements - i3, MAX_CHUNK_SIZE);
    const task = [];
    const aChunk = a3.slice(i3 * n8, (i3 + n2) * n8);
    const bChunk = b3.slice(i3 * n8, (i3 + n2) * n8);
    const cChunk = c5.slice(i3 * n8, (i3 + n2) * n8);
    task.push({ cmd: "ALLOCSET", var: 0, buff: aChunk });
    task.push({ cmd: "ALLOCSET", var: 1, buff: bChunk });
    task.push({ cmd: "ALLOCSET", var: 2, buff: cChunk });
    task.push({ cmd: "ALLOC", var: 3, len: n2 * n8 });
    task.push({
      cmd: "CALL",
      fnName: "qap_joinABC",
      params: [
        { var: 0 },
        { var: 1 },
        { var: 2 },
        { val: n2 },
        { var: 3 }
      ]
    });
    task.push({
      cmd: "CALL",
      fnName: "frm_batchFromMontgomery",
      params: [
        { var: 3 },
        { val: n2 },
        { var: 3 }
      ]
    });
    task.push({ cmd: "GET", out: 0, var: 3, len: n2 * n8 });
    promises.push(curve.tm.queueAction(task));
  }
  const result = await Promise.all(promises);
  let outBuff;
  if (a3 instanceof BigBuffer) {
    outBuff = new BigBuffer(a3.byteLength);
  } else {
    outBuff = new Uint8Array(a3.byteLength);
  }
  let p2 = 0;
  for (let i3 = 0; i3 < result.length; i3++) {
    outBuff.set(result[i3][0], p2);
    p2 += result[i3][0].byteLength;
  }
  return outBuff;
}
function flatArray(a3) {
  var res = [];
  fillArray(res, a3);
  return res;
  function fillArray(res2, a4) {
    if (Array.isArray(a4)) {
      for (let i3 = 0; i3 < a4.length; i3++) {
        fillArray(res2, a4[i3]);
      }
    } else {
      res2.push(a4);
    }
  }
}
function fnvHash(str) {
  const uint64_max = BigInt(2) ** BigInt(64);
  let hash3 = BigInt("0xCBF29CE484222325");
  for (var i3 = 0; i3 < str.length; i3++) {
    hash3 ^= BigInt(str[i3].charCodeAt());
    hash3 *= BigInt(1099511628211);
    hash3 %= uint64_max;
  }
  let shash = hash3.toString(16);
  let n2 = 16 - shash.length;
  shash = "0".repeat(n2).concat(shash);
  return shash;
}
function toArray32(s2, size) {
  const res = [];
  let rem = BigInt(s2);
  const radix = BigInt(4294967296);
  while (rem) {
    res.unshift(Number(rem % radix));
    rem = rem / radix;
  }
  if (size) {
    var i3 = size - res.length;
    while (i3 > 0) {
      res.unshift(0);
      i3--;
    }
  }
  return res;
}
async function builder(code, options) {
  options = options || {};
  let memorySize = 32767;
  let memory;
  let memoryAllocated = false;
  while (!memoryAllocated) {
    try {
      memory = new WebAssembly.Memory({ initial: memorySize });
      memoryAllocated = true;
    } catch (err) {
      if (memorySize === 1) {
        throw err;
      }
      console.warn("Could not allocate " + memorySize * 1024 * 64 + " bytes. This may cause severe instability. Trying with " + memorySize * 1024 * 64 / 2 + " bytes");
      memorySize = Math.floor(memorySize / 2);
    }
  }
  const wasmModule = await WebAssembly.compile(code);
  let wc;
  const instance = await WebAssembly.instantiate(wasmModule, {
    env: {
      "memory": memory
    },
    runtime: {
      exceptionHandler: function(code2) {
        let errStr;
        if (code2 == 1) {
          errStr = "Signal not found. ";
        } else if (code2 == 2) {
          errStr = "Too many signals set. ";
        } else if (code2 == 3) {
          errStr = "Signal already set. ";
        } else if (code2 == 4) {
          errStr = "Assert Failed. ";
        } else if (code2 == 5) {
          errStr = "Not enough memory. ";
        } else {
          errStr = "Unknown error.";
        }
        console.log("ERROR: ", code2, errStr);
        throw new Error(errStr);
      },
      showSharedRWMemory: function() {
        const shared_rw_memory_size = instance.exports.getFieldNumLen32();
        const arr = new Uint32Array(shared_rw_memory_size);
        for (let j3 = 0; j3 < shared_rw_memory_size; j3++) {
          arr[shared_rw_memory_size - 1 - j3] = instance.exports.readSharedRWMemory(j3);
        }
        console.log(Scalar2.fromArray(arr, 4294967296));
      },
      error: function(code2, pstr, a3, b3, c5, d2) {
        let errStr;
        if (code2 == 7) {
          errStr = p2str(pstr) + " " + wc.getFr(b3).toString() + " != " + wc.getFr(c5).toString() + " " + p2str(d2);
        } else if (code2 == 9) {
          errStr = p2str(pstr) + " " + wc.getFr(b3).toString() + " " + p2str(c5);
        } else if (code2 == 5 && options.sym) {
          errStr = p2str(pstr) + " " + options.sym.labelIdx2Name[c5];
        } else {
          errStr = p2str(pstr) + " " + a3 + " " + b3 + " " + c5 + " " + d2;
        }
        console.log("ERROR: ", code2, errStr);
        throw new Error(errStr);
      },
      log: function(a3) {
        console.log(wc.getFr(a3).toString());
      },
      logGetSignal: function(signal, pVal) {
        if (options.logGetSignal) {
          options.logGetSignal(signal, wc.getFr(pVal));
        }
      },
      logSetSignal: function(signal, pVal) {
        if (options.logSetSignal) {
          options.logSetSignal(signal, wc.getFr(pVal));
        }
      },
      logStartComponent: function(cIdx) {
        if (options.logStartComponent) {
          options.logStartComponent(cIdx);
        }
      },
      logFinishComponent: function(cIdx) {
        if (options.logFinishComponent) {
          options.logFinishComponent(cIdx);
        }
      }
    }
  });
  const sanityCheck = options && (options.sanityCheck || options.logGetSignal || options.logSetSignal || options.logStartComponent || options.logFinishComponent);
  if (typeof instance.exports.getVersion == "function") {
    wc = new WitnessCalculatorCircom2(instance, sanityCheck);
  } else {
    wc = new WitnessCalculatorCircom1(memory, instance, sanityCheck);
  }
  return wc;
  function p2str(p2) {
    const i8 = new Uint8Array(memory.buffer);
    const bytes3 = [];
    for (let i3 = 0; i8[p2 + i3] > 0; i3++)
      bytes3.push(i8[p2 + i3]);
    return String.fromCharCode.apply(null, bytes3);
  }
}
var WitnessCalculatorCircom1 = class {
  constructor(memory, instance, sanityCheck) {
    this.memory = memory;
    this.i32 = new Uint32Array(memory.buffer);
    this.instance = instance;
    this.n32 = (this.instance.exports.getFrLen() >> 2) - 2;
    const pRawPrime = this.instance.exports.getPRawPrime();
    const arr = new Array(this.n32);
    for (let i3 = 0; i3 < this.n32; i3++) {
      arr[this.n32 - 1 - i3] = this.i32[(pRawPrime >> 2) + i3];
    }
    this.prime = Scalar2.fromArray(arr, 4294967296);
    this.Fr = new F1Field(this.prime);
    this.mask32 = Scalar2.fromString("FFFFFFFF", 16);
    this.NVars = this.instance.exports.getNVars();
    this.n64 = Math.floor((this.Fr.bitLength - 1) / 64) + 1;
    this.R = this.Fr.e(Scalar2.shiftLeft(1, this.n64 * 64));
    this.RInv = this.Fr.inv(this.R);
    this.sanityCheck = sanityCheck;
  }
  circom_version() {
    return 1;
  }
  async _doCalculateWitness(input, sanityCheck) {
    this.instance.exports.init(this.sanityCheck || sanityCheck ? 1 : 0);
    const pSigOffset = this.allocInt();
    const pFr = this.allocFr();
    const keys = Object.keys(input);
    keys.forEach((k3) => {
      const h3 = fnvHash(k3);
      const hMSB = parseInt(h3.slice(0, 8), 16);
      const hLSB = parseInt(h3.slice(8, 16), 16);
      try {
        this.instance.exports.getSignalOffset32(pSigOffset, 0, hMSB, hLSB);
      } catch (err) {
        throw new Error(`Signal ${k3} is not an input of the circuit.`);
      }
      const sigOffset = this.getInt(pSigOffset);
      const fArr = flatArray(input[k3]);
      for (let i3 = 0; i3 < fArr.length; i3++) {
        this.setFr(pFr, fArr[i3]);
        this.instance.exports.setSignal(0, 0, sigOffset + i3, pFr);
      }
    });
  }
  async calculateWitness(input, sanityCheck) {
    const self2 = this;
    const old0 = self2.i32[0];
    const w3 = [];
    await self2._doCalculateWitness(input, sanityCheck);
    for (let i3 = 0; i3 < self2.NVars; i3++) {
      const pWitness = self2.instance.exports.getPWitness(i3);
      w3.push(self2.getFr(pWitness));
    }
    self2.i32[0] = old0;
    return w3;
  }
  async calculateBinWitness(input, sanityCheck) {
    const self2 = this;
    const old0 = self2.i32[0];
    await self2._doCalculateWitness(input, sanityCheck);
    const pWitnessBuffer = self2.instance.exports.getWitnessBuffer();
    self2.i32[0] = old0;
    const buff = self2.memory.buffer.slice(pWitnessBuffer, pWitnessBuffer + self2.NVars * self2.n64 * 8);
    return new Uint8Array(buff);
  }
  allocInt() {
    const p2 = this.i32[0];
    this.i32[0] = p2 + 8;
    return p2;
  }
  allocFr() {
    const p2 = this.i32[0];
    this.i32[0] = p2 + this.n32 * 4 + 8;
    return p2;
  }
  getInt(p2) {
    return this.i32[p2 >> 2];
  }
  setInt(p2, v3) {
    this.i32[p2 >> 2] = v3;
  }
  getFr(p2) {
    const self2 = this;
    const idx = p2 >> 2;
    if (self2.i32[idx + 1] & 2147483648) {
      const arr = new Array(self2.n32);
      for (let i3 = 0; i3 < self2.n32; i3++) {
        arr[self2.n32 - 1 - i3] = self2.i32[idx + 2 + i3];
      }
      const res = self2.Fr.e(Scalar2.fromArray(arr, 4294967296));
      if (self2.i32[idx + 1] & 1073741824) {
        return fromMontgomery(res);
      } else {
        return res;
      }
    } else {
      if (self2.i32[idx] & 2147483648) {
        return self2.Fr.e(self2.i32[idx] - 4294967296);
      } else {
        return self2.Fr.e(self2.i32[idx]);
      }
    }
    function fromMontgomery(n2) {
      return self2.Fr.mul(self2.RInv, n2);
    }
  }
  setFr(p2, v3) {
    const self2 = this;
    v3 = self2.Fr.e(v3);
    const minShort = self2.Fr.neg(self2.Fr.e("80000000", 16));
    const maxShort = self2.Fr.e("7FFFFFFF", 16);
    if (self2.Fr.geq(v3, minShort) && self2.Fr.leq(v3, maxShort)) {
      let a3;
      if (self2.Fr.geq(v3, self2.Fr.zero)) {
        a3 = Scalar2.toNumber(v3);
      } else {
        a3 = Scalar2.toNumber(self2.Fr.sub(v3, minShort));
        a3 = a3 - 2147483648;
        a3 = 4294967296 + a3;
      }
      self2.i32[p2 >> 2] = a3;
      self2.i32[(p2 >> 2) + 1] = 0;
      return;
    }
    self2.i32[p2 >> 2] = 0;
    self2.i32[(p2 >> 2) + 1] = 2147483648;
    const arr = Scalar2.toArray(v3, 4294967296);
    for (let i3 = 0; i3 < self2.n32; i3++) {
      const idx = arr.length - 1 - i3;
      if (idx >= 0) {
        self2.i32[(p2 >> 2) + 2 + i3] = arr[idx];
      } else {
        self2.i32[(p2 >> 2) + 2 + i3] = 0;
      }
    }
  }
};
var WitnessCalculatorCircom2 = class {
  constructor(instance, sanityCheck) {
    this.instance = instance;
    this.version = this.instance.exports.getVersion();
    this.n32 = this.instance.exports.getFieldNumLen32();
    this.instance.exports.getRawPrime();
    const arr = new Array(this.n32);
    for (let i3 = 0; i3 < this.n32; i3++) {
      arr[this.n32 - 1 - i3] = this.instance.exports.readSharedRWMemory(i3);
    }
    this.prime = Scalar2.fromArray(arr, 4294967296);
    this.witnessSize = this.instance.exports.getWitnessSize();
    this.sanityCheck = sanityCheck;
  }
  circom_version() {
    return this.instance.exports.getVersion();
  }
  async _doCalculateWitness(input, sanityCheck) {
    this.instance.exports.init(this.sanityCheck || sanityCheck ? 1 : 0);
    const keys = Object.keys(input);
    var input_counter = 0;
    keys.forEach((k3) => {
      const h3 = fnvHash(k3);
      const hMSB = parseInt(h3.slice(0, 8), 16);
      const hLSB = parseInt(h3.slice(8, 16), 16);
      const fArr = flatArray(input[k3]);
      for (let i3 = 0; i3 < fArr.length; i3++) {
        const arrFr = toArray32(fArr[i3], this.n32);
        for (let j3 = 0; j3 < this.n32; j3++) {
          this.instance.exports.writeSharedRWMemory(j3, arrFr[this.n32 - 1 - j3]);
        }
        try {
          this.instance.exports.setInputSignal(hMSB, hLSB, i3);
          input_counter++;
        } catch (err) {
          throw new Error(err);
        }
      }
    });
    if (input_counter < this.instance.exports.getInputSize()) {
      throw new Error(`Not all inputs have been set. Only ${input_counter} out of ${this.instance.exports.getInputSize()}`);
    }
  }
  async calculateWitness(input, sanityCheck) {
    const w3 = [];
    await this._doCalculateWitness(input, sanityCheck);
    for (let i3 = 0; i3 < this.witnessSize; i3++) {
      this.instance.exports.getWitness(i3);
      const arr = new Uint32Array(this.n32);
      for (let j3 = 0; j3 < this.n32; j3++) {
        arr[this.n32 - 1 - j3] = this.instance.exports.readSharedRWMemory(j3);
      }
      w3.push(fromArray32(arr));
    }
    return w3;
  }
  async calculateWTNSBin(input, sanityCheck) {
    const buff32 = new Uint32Array(this.witnessSize * this.n32 + this.n32 + 11);
    const buff = new Uint8Array(buff32.buffer);
    await this._doCalculateWitness(input, sanityCheck);
    buff[0] = "w".charCodeAt(0);
    buff[1] = "t".charCodeAt(0);
    buff[2] = "n".charCodeAt(0);
    buff[3] = "s".charCodeAt(0);
    buff32[1] = 2;
    buff32[2] = 2;
    buff32[3] = 1;
    const n8 = this.n32 * 4;
    const idSection1length = 8 + n8;
    const idSection1lengthHex = idSection1length.toString(16);
    buff32[4] = parseInt(idSection1lengthHex.slice(0, 8), 16);
    buff32[5] = parseInt(idSection1lengthHex.slice(8, 16), 16);
    buff32[6] = n8;
    this.instance.exports.getRawPrime();
    var pos = 7;
    for (let j3 = 0; j3 < this.n32; j3++) {
      buff32[pos + j3] = this.instance.exports.readSharedRWMemory(j3);
    }
    pos += this.n32;
    buff32[pos] = this.witnessSize;
    pos++;
    buff32[pos] = 2;
    pos++;
    const idSection2length = n8 * this.witnessSize;
    const idSection2lengthHex = idSection2length.toString(16);
    buff32[pos] = parseInt(idSection2lengthHex.slice(0, 8), 16);
    buff32[pos + 1] = parseInt(idSection2lengthHex.slice(8, 16), 16);
    pos += 2;
    for (let i3 = 0; i3 < this.witnessSize; i3++) {
      this.instance.exports.getWitness(i3);
      for (let j3 = 0; j3 < this.n32; j3++) {
        buff32[pos + j3] = this.instance.exports.readSharedRWMemory(j3);
      }
      pos += this.n32;
    }
    return buff;
  }
};
async function wtnsCalculate(input, wasmFileName, wtnsFileName, options) {
  const fdWasm = await readExisting(wasmFileName);
  const wasm = await fdWasm.read(fdWasm.totalSize);
  await fdWasm.close();
  const wc = await builder(wasm);
  if (wc.circom_version() == 1) {
    const w3 = await wc.calculateBinWitness(input);
    const fdWtns = await createBinFile(wtnsFileName, "wtns", 2, 2);
    await writeBin(fdWtns, w3, wc.prime);
    await fdWtns.close();
  } else {
    const fdWtns = await createOverride(wtnsFileName);
    const w3 = await wc.calculateWTNSBin(input);
    await fdWtns.write(w3);
    await fdWtns.close();
  }
}
async function groth16FullProve(input, wasmFile, zkeyFileName, logger52) {
  const wtns = {
    type: "mem"
  };
  await wtnsCalculate(input, wasmFile, wtns);
  return await groth16Prove(zkeyFileName, wtns, logger52);
}
var { unstringifyBigInts: unstringifyBigInts$1 } = utils2;
async function groth16Verify(vk_verifier, publicSignals, proof, logger52) {
  vk_verifier = unstringifyBigInts$1(vk_verifier);
  proof = unstringifyBigInts$1(proof);
  publicSignals = unstringifyBigInts$1(publicSignals);
  const curve = await getCurveFromName(vk_verifier.curve);
  const IC0 = curve.G1.fromObject(vk_verifier.IC[0]);
  const IC = new Uint8Array(curve.G1.F.n8 * 2 * publicSignals.length);
  const w3 = new Uint8Array(curve.Fr.n8 * publicSignals.length);
  for (let i3 = 0; i3 < publicSignals.length; i3++) {
    const buffP = curve.G1.fromObject(vk_verifier.IC[i3 + 1]);
    IC.set(buffP, i3 * curve.G1.F.n8 * 2);
    Scalar2.toRprLE(w3, curve.Fr.n8 * i3, publicSignals[i3], curve.Fr.n8);
  }
  let cpub = await curve.G1.multiExpAffine(IC, w3);
  cpub = curve.G1.add(cpub, IC0);
  const pi_a = curve.G1.fromObject(proof.pi_a);
  const pi_b = curve.G2.fromObject(proof.pi_b);
  const pi_c = curve.G1.fromObject(proof.pi_c);
  const vk_gamma_2 = curve.G2.fromObject(vk_verifier.vk_gamma_2);
  const vk_delta_2 = curve.G2.fromObject(vk_verifier.vk_delta_2);
  const vk_alpha_1 = curve.G1.fromObject(vk_verifier.vk_alpha_1);
  const vk_beta_2 = curve.G2.fromObject(vk_verifier.vk_beta_2);
  const res = await curve.pairingEq(curve.G1.neg(pi_a), pi_b, cpub, vk_gamma_2, pi_c, vk_delta_2, vk_alpha_1, vk_beta_2);
  if (!res) {
    if (logger52)
      logger52.error("Invalid proof");
    return false;
  }
  if (logger52)
    logger52.info("OK!");
  return true;
}
function p256$1(n2) {
  let nstr = n2.toString(16);
  while (nstr.length < 64)
    nstr = "0" + nstr;
  nstr = `"0x${nstr}"`;
  return nstr;
}
async function groth16ExportSolidityCallData(proof, pub) {
  let inputs = "";
  for (let i3 = 0; i3 < pub.length; i3++) {
    if (inputs != "")
      inputs = inputs + ",";
    inputs = inputs + p256$1(pub[i3]);
  }
  let S2;
  S2 = `[${p256$1(proof.pi_a[0])}, ${p256$1(proof.pi_a[1])}],[[${p256$1(proof.pi_b[0][1])}, ${p256$1(proof.pi_b[0][0])}],[${p256$1(proof.pi_b[1][1])}, ${p256$1(proof.pi_b[1][0])}]],[${p256$1(proof.pi_c[0])}, ${p256$1(proof.pi_c[1])}],[${inputs}]`;
  return S2;
}
var groth16 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  fullProve: groth16FullProve,
  prove: groth16Prove,
  verify: groth16Verify,
  exportSolidityCallData: groth16ExportSolidityCallData
});
var bls12381r = Scalar2.e("73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001", 16);
var bn128r = Scalar2.e("21888242871839275222246405745257275088548364400416034343698204186575808495617");
var sha3 = createCommonjsModule(function(module) {
  (function() {
    var INPUT_ERROR = "input is invalid type";
    var FINALIZE_ERROR = "finalize already called";
    var WINDOW = typeof window === "object";
    var root = WINDOW ? window : {};
    if (root.JS_SHA3_NO_WINDOW) {
      WINDOW = false;
    }
    var WEB_WORKER = !WINDOW && typeof self === "object";
    var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
    if (NODE_JS) {
      root = commonjsGlobal;
    } else if (WEB_WORKER) {
      root = self;
    }
    var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && true && module.exports;
    var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
    var HEX_CHARS = "0123456789abcdef".split("");
    var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
    var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
    var KECCAK_PADDING = [1, 256, 65536, 16777216];
    var PADDING = [6, 1536, 393216, 100663296];
    var SHIFT = [0, 8, 16, 24];
    var RC = [
      1,
      0,
      32898,
      0,
      32906,
      2147483648,
      2147516416,
      2147483648,
      32907,
      0,
      2147483649,
      0,
      2147516545,
      2147483648,
      32777,
      2147483648,
      138,
      0,
      136,
      0,
      2147516425,
      0,
      2147483658,
      0,
      2147516555,
      0,
      139,
      2147483648,
      32905,
      2147483648,
      32771,
      2147483648,
      32770,
      2147483648,
      128,
      2147483648,
      32778,
      0,
      2147483658,
      2147483648,
      2147516545,
      2147483648,
      32896,
      2147483648,
      2147483649,
      0,
      2147516424,
      2147483648
    ];
    var BITS = [224, 256, 384, 512];
    var SHAKE_BITS = [128, 256];
    var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
    var CSHAKE_BYTEPAD = {
      "128": 168,
      "256": 136
    };
    if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
      Array.isArray = function(obj) {
        return Object.prototype.toString.call(obj) === "[object Array]";
      };
    }
    if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
      ArrayBuffer.isView = function(obj) {
        return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
      };
    }
    var createOutputMethod = function(bits3, padding2, outputType) {
      return function(message) {
        return new Keccak(bits3, padding2, bits3).update(message)[outputType]();
      };
    };
    var createShakeOutputMethod = function(bits3, padding2, outputType) {
      return function(message, outputBits) {
        return new Keccak(bits3, padding2, outputBits).update(message)[outputType]();
      };
    };
    var createCshakeOutputMethod = function(bits3, padding2, outputType) {
      return function(message, outputBits, n2, s2) {
        return methods["cshake" + bits3].update(message, outputBits, n2, s2)[outputType]();
      };
    };
    var createKmacOutputMethod = function(bits3, padding2, outputType) {
      return function(key2, message, outputBits, s2) {
        return methods["kmac" + bits3].update(key2, message, outputBits, s2)[outputType]();
      };
    };
    var createOutputMethods = function(method, createMethod2, bits3, padding2) {
      for (var i4 = 0; i4 < OUTPUT_TYPES.length; ++i4) {
        var type = OUTPUT_TYPES[i4];
        method[type] = createMethod2(bits3, padding2, type);
      }
      return method;
    };
    var createMethod = function(bits3, padding2) {
      var method = createOutputMethod(bits3, padding2, "hex");
      method.create = function() {
        return new Keccak(bits3, padding2, bits3);
      };
      method.update = function(message) {
        return method.create().update(message);
      };
      return createOutputMethods(method, createOutputMethod, bits3, padding2);
    };
    var createShakeMethod = function(bits3, padding2) {
      var method = createShakeOutputMethod(bits3, padding2, "hex");
      method.create = function(outputBits) {
        return new Keccak(bits3, padding2, outputBits);
      };
      method.update = function(message, outputBits) {
        return method.create(outputBits).update(message);
      };
      return createOutputMethods(method, createShakeOutputMethod, bits3, padding2);
    };
    var createCshakeMethod = function(bits3, padding2) {
      var w3 = CSHAKE_BYTEPAD[bits3];
      var method = createCshakeOutputMethod(bits3, padding2, "hex");
      method.create = function(outputBits, n2, s2) {
        if (!n2 && !s2) {
          return methods["shake" + bits3].create(outputBits);
        } else {
          return new Keccak(bits3, padding2, outputBits).bytepad([n2, s2], w3);
        }
      };
      method.update = function(message, outputBits, n2, s2) {
        return method.create(outputBits, n2, s2).update(message);
      };
      return createOutputMethods(method, createCshakeOutputMethod, bits3, padding2);
    };
    var createKmacMethod = function(bits3, padding2) {
      var w3 = CSHAKE_BYTEPAD[bits3];
      var method = createKmacOutputMethod(bits3, padding2, "hex");
      method.create = function(key2, outputBits, s2) {
        return new Kmac(bits3, padding2, outputBits).bytepad(["KMAC", s2], w3).bytepad([key2], w3);
      };
      method.update = function(key2, message, outputBits, s2) {
        return method.create(key2, outputBits, s2).update(message);
      };
      return createOutputMethods(method, createKmacOutputMethod, bits3, padding2);
    };
    var algorithms = [
      { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
      { name: "sha3", padding: PADDING, bits: BITS, createMethod },
      { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
      { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
      { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
    ];
    var methods = {}, methodNames = [];
    for (var i3 = 0; i3 < algorithms.length; ++i3) {
      var algorithm = algorithms[i3];
      var bits2 = algorithm.bits;
      for (var j3 = 0; j3 < bits2.length; ++j3) {
        var methodName = algorithm.name + "_" + bits2[j3];
        methodNames.push(methodName);
        methods[methodName] = algorithm.createMethod(bits2[j3], algorithm.padding);
        if (algorithm.name !== "sha3") {
          var newMethodName = algorithm.name + bits2[j3];
          methodNames.push(newMethodName);
          methods[newMethodName] = methods[methodName];
        }
      }
    }
    function Keccak(bits3, padding2, outputBits) {
      this.blocks = [];
      this.s = [];
      this.padding = padding2;
      this.outputBits = outputBits;
      this.reset = true;
      this.finalized = false;
      this.block = 0;
      this.start = 0;
      this.blockCount = 1600 - (bits3 << 1) >> 5;
      this.byteCount = this.blockCount << 2;
      this.outputBlocks = outputBits >> 5;
      this.extraBytes = (outputBits & 31) >> 3;
      for (var i4 = 0; i4 < 50; ++i4) {
        this.s[i4] = 0;
      }
    }
    Keccak.prototype.update = function(message) {
      if (this.finalized) {
        throw new Error(FINALIZE_ERROR);
      }
      var notString, type = typeof message;
      if (type !== "string") {
        if (type === "object") {
          if (message === null) {
            throw new Error(INPUT_ERROR);
          } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
            message = new Uint8Array(message);
          } else if (!Array.isArray(message)) {
            if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
              throw new Error(INPUT_ERROR);
            }
          }
        } else {
          throw new Error(INPUT_ERROR);
        }
        notString = true;
      }
      var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s2 = this.s, i4, code;
      while (index < length) {
        if (this.reset) {
          this.reset = false;
          blocks[0] = this.block;
          for (i4 = 1; i4 < blockCount + 1; ++i4) {
            blocks[i4] = 0;
          }
        }
        if (notString) {
          for (i4 = this.start; index < length && i4 < byteCount; ++index) {
            blocks[i4 >> 2] |= message[index] << SHIFT[i4++ & 3];
          }
        } else {
          for (i4 = this.start; index < length && i4 < byteCount; ++index) {
            code = message.charCodeAt(index);
            if (code < 128) {
              blocks[i4 >> 2] |= code << SHIFT[i4++ & 3];
            } else if (code < 2048) {
              blocks[i4 >> 2] |= (192 | code >> 6) << SHIFT[i4++ & 3];
              blocks[i4 >> 2] |= (128 | code & 63) << SHIFT[i4++ & 3];
            } else if (code < 55296 || code >= 57344) {
              blocks[i4 >> 2] |= (224 | code >> 12) << SHIFT[i4++ & 3];
              blocks[i4 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i4++ & 3];
              blocks[i4 >> 2] |= (128 | code & 63) << SHIFT[i4++ & 3];
            } else {
              code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
              blocks[i4 >> 2] |= (240 | code >> 18) << SHIFT[i4++ & 3];
              blocks[i4 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i4++ & 3];
              blocks[i4 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i4++ & 3];
              blocks[i4 >> 2] |= (128 | code & 63) << SHIFT[i4++ & 3];
            }
          }
        }
        this.lastByteIndex = i4;
        if (i4 >= byteCount) {
          this.start = i4 - byteCount;
          this.block = blocks[blockCount];
          for (i4 = 0; i4 < blockCount; ++i4) {
            s2[i4] ^= blocks[i4];
          }
          f3(s2);
          this.reset = true;
        } else {
          this.start = i4;
        }
      }
      return this;
    };
    Keccak.prototype.encode = function(x3, right) {
      var o3 = x3 & 255, n2 = 1;
      var bytes3 = [o3];
      x3 = x3 >> 8;
      o3 = x3 & 255;
      while (o3 > 0) {
        bytes3.unshift(o3);
        x3 = x3 >> 8;
        o3 = x3 & 255;
        ++n2;
      }
      if (right) {
        bytes3.push(n2);
      } else {
        bytes3.unshift(n2);
      }
      this.update(bytes3);
      return bytes3.length;
    };
    Keccak.prototype.encodeString = function(str) {
      var notString, type = typeof str;
      if (type !== "string") {
        if (type === "object") {
          if (str === null) {
            throw new Error(INPUT_ERROR);
          } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
            str = new Uint8Array(str);
          } else if (!Array.isArray(str)) {
            if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
              throw new Error(INPUT_ERROR);
            }
          }
        } else {
          throw new Error(INPUT_ERROR);
        }
        notString = true;
      }
      var bytes3 = 0, length = str.length;
      if (notString) {
        bytes3 = length;
      } else {
        for (var i4 = 0; i4 < str.length; ++i4) {
          var code = str.charCodeAt(i4);
          if (code < 128) {
            bytes3 += 1;
          } else if (code < 2048) {
            bytes3 += 2;
          } else if (code < 55296 || code >= 57344) {
            bytes3 += 3;
          } else {
            code = 65536 + ((code & 1023) << 10 | str.charCodeAt(++i4) & 1023);
            bytes3 += 4;
          }
        }
      }
      bytes3 += this.encode(bytes3 * 8);
      this.update(str);
      return bytes3;
    };
    Keccak.prototype.bytepad = function(strs, w3) {
      var bytes3 = this.encode(w3);
      for (var i4 = 0; i4 < strs.length; ++i4) {
        bytes3 += this.encodeString(strs[i4]);
      }
      var paddingBytes = w3 - bytes3 % w3;
      var zeros2 = [];
      zeros2.length = paddingBytes;
      this.update(zeros2);
      return this;
    };
    Keccak.prototype.finalize = function() {
      if (this.finalized) {
        return;
      }
      this.finalized = true;
      var blocks = this.blocks, i4 = this.lastByteIndex, blockCount = this.blockCount, s2 = this.s;
      blocks[i4 >> 2] |= this.padding[i4 & 3];
      if (this.lastByteIndex === this.byteCount) {
        blocks[0] = blocks[blockCount];
        for (i4 = 1; i4 < blockCount + 1; ++i4) {
          blocks[i4] = 0;
        }
      }
      blocks[blockCount - 1] |= 2147483648;
      for (i4 = 0; i4 < blockCount; ++i4) {
        s2[i4] ^= blocks[i4];
      }
      f3(s2);
    };
    Keccak.prototype.toString = Keccak.prototype.hex = function() {
      this.finalize();
      var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i4 = 0, j4 = 0;
      var hex2 = "", block;
      while (j4 < outputBlocks) {
        for (i4 = 0; i4 < blockCount && j4 < outputBlocks; ++i4, ++j4) {
          block = s2[i4];
          hex2 += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
        }
        if (j4 % blockCount === 0) {
          f3(s2);
          i4 = 0;
        }
      }
      if (extraBytes) {
        block = s2[i4];
        hex2 += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
        if (extraBytes > 1) {
          hex2 += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
        }
        if (extraBytes > 2) {
          hex2 += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
        }
      }
      return hex2;
    };
    Keccak.prototype.arrayBuffer = function() {
      this.finalize();
      var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i4 = 0, j4 = 0;
      var bytes3 = this.outputBits >> 3;
      var buffer;
      if (extraBytes) {
        buffer = new ArrayBuffer(outputBlocks + 1 << 2);
      } else {
        buffer = new ArrayBuffer(bytes3);
      }
      var array = new Uint32Array(buffer);
      while (j4 < outputBlocks) {
        for (i4 = 0; i4 < blockCount && j4 < outputBlocks; ++i4, ++j4) {
          array[j4] = s2[i4];
        }
        if (j4 % blockCount === 0) {
          f3(s2);
        }
      }
      if (extraBytes) {
        array[i4] = s2[i4];
        buffer = buffer.slice(0, bytes3);
      }
      return buffer;
    };
    Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
    Keccak.prototype.digest = Keccak.prototype.array = function() {
      this.finalize();
      var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i4 = 0, j4 = 0;
      var array = [], offset, block;
      while (j4 < outputBlocks) {
        for (i4 = 0; i4 < blockCount && j4 < outputBlocks; ++i4, ++j4) {
          offset = j4 << 2;
          block = s2[i4];
          array[offset] = block & 255;
          array[offset + 1] = block >> 8 & 255;
          array[offset + 2] = block >> 16 & 255;
          array[offset + 3] = block >> 24 & 255;
        }
        if (j4 % blockCount === 0) {
          f3(s2);
        }
      }
      if (extraBytes) {
        offset = j4 << 2;
        block = s2[i4];
        array[offset] = block & 255;
        if (extraBytes > 1) {
          array[offset + 1] = block >> 8 & 255;
        }
        if (extraBytes > 2) {
          array[offset + 2] = block >> 16 & 255;
        }
      }
      return array;
    };
    function Kmac(bits3, padding2, outputBits) {
      Keccak.call(this, bits3, padding2, outputBits);
    }
    Kmac.prototype = new Keccak();
    Kmac.prototype.finalize = function() {
      this.encode(this.outputBits, true);
      return Keccak.prototype.finalize.call(this);
    };
    var f3 = function(s2) {
      var h3, l3, n2, c0, c1, c22, c32, c42, c5, c6, c7, c8, c9, b0, b1, b22, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b222, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
      for (n2 = 0; n2 < 48; n2 += 2) {
        c0 = s2[0] ^ s2[10] ^ s2[20] ^ s2[30] ^ s2[40];
        c1 = s2[1] ^ s2[11] ^ s2[21] ^ s2[31] ^ s2[41];
        c22 = s2[2] ^ s2[12] ^ s2[22] ^ s2[32] ^ s2[42];
        c32 = s2[3] ^ s2[13] ^ s2[23] ^ s2[33] ^ s2[43];
        c42 = s2[4] ^ s2[14] ^ s2[24] ^ s2[34] ^ s2[44];
        c5 = s2[5] ^ s2[15] ^ s2[25] ^ s2[35] ^ s2[45];
        c6 = s2[6] ^ s2[16] ^ s2[26] ^ s2[36] ^ s2[46];
        c7 = s2[7] ^ s2[17] ^ s2[27] ^ s2[37] ^ s2[47];
        c8 = s2[8] ^ s2[18] ^ s2[28] ^ s2[38] ^ s2[48];
        c9 = s2[9] ^ s2[19] ^ s2[29] ^ s2[39] ^ s2[49];
        h3 = c8 ^ (c22 << 1 | c32 >>> 31);
        l3 = c9 ^ (c32 << 1 | c22 >>> 31);
        s2[0] ^= h3;
        s2[1] ^= l3;
        s2[10] ^= h3;
        s2[11] ^= l3;
        s2[20] ^= h3;
        s2[21] ^= l3;
        s2[30] ^= h3;
        s2[31] ^= l3;
        s2[40] ^= h3;
        s2[41] ^= l3;
        h3 = c0 ^ (c42 << 1 | c5 >>> 31);
        l3 = c1 ^ (c5 << 1 | c42 >>> 31);
        s2[2] ^= h3;
        s2[3] ^= l3;
        s2[12] ^= h3;
        s2[13] ^= l3;
        s2[22] ^= h3;
        s2[23] ^= l3;
        s2[32] ^= h3;
        s2[33] ^= l3;
        s2[42] ^= h3;
        s2[43] ^= l3;
        h3 = c22 ^ (c6 << 1 | c7 >>> 31);
        l3 = c32 ^ (c7 << 1 | c6 >>> 31);
        s2[4] ^= h3;
        s2[5] ^= l3;
        s2[14] ^= h3;
        s2[15] ^= l3;
        s2[24] ^= h3;
        s2[25] ^= l3;
        s2[34] ^= h3;
        s2[35] ^= l3;
        s2[44] ^= h3;
        s2[45] ^= l3;
        h3 = c42 ^ (c8 << 1 | c9 >>> 31);
        l3 = c5 ^ (c9 << 1 | c8 >>> 31);
        s2[6] ^= h3;
        s2[7] ^= l3;
        s2[16] ^= h3;
        s2[17] ^= l3;
        s2[26] ^= h3;
        s2[27] ^= l3;
        s2[36] ^= h3;
        s2[37] ^= l3;
        s2[46] ^= h3;
        s2[47] ^= l3;
        h3 = c6 ^ (c0 << 1 | c1 >>> 31);
        l3 = c7 ^ (c1 << 1 | c0 >>> 31);
        s2[8] ^= h3;
        s2[9] ^= l3;
        s2[18] ^= h3;
        s2[19] ^= l3;
        s2[28] ^= h3;
        s2[29] ^= l3;
        s2[38] ^= h3;
        s2[39] ^= l3;
        s2[48] ^= h3;
        s2[49] ^= l3;
        b0 = s2[0];
        b1 = s2[1];
        b32 = s2[11] << 4 | s2[10] >>> 28;
        b33 = s2[10] << 4 | s2[11] >>> 28;
        b14 = s2[20] << 3 | s2[21] >>> 29;
        b15 = s2[21] << 3 | s2[20] >>> 29;
        b46 = s2[31] << 9 | s2[30] >>> 23;
        b47 = s2[30] << 9 | s2[31] >>> 23;
        b28 = s2[40] << 18 | s2[41] >>> 14;
        b29 = s2[41] << 18 | s2[40] >>> 14;
        b20 = s2[2] << 1 | s2[3] >>> 31;
        b21 = s2[3] << 1 | s2[2] >>> 31;
        b22 = s2[13] << 12 | s2[12] >>> 20;
        b3 = s2[12] << 12 | s2[13] >>> 20;
        b34 = s2[22] << 10 | s2[23] >>> 22;
        b35 = s2[23] << 10 | s2[22] >>> 22;
        b16 = s2[33] << 13 | s2[32] >>> 19;
        b17 = s2[32] << 13 | s2[33] >>> 19;
        b48 = s2[42] << 2 | s2[43] >>> 30;
        b49 = s2[43] << 2 | s2[42] >>> 30;
        b40 = s2[5] << 30 | s2[4] >>> 2;
        b41 = s2[4] << 30 | s2[5] >>> 2;
        b222 = s2[14] << 6 | s2[15] >>> 26;
        b23 = s2[15] << 6 | s2[14] >>> 26;
        b4 = s2[25] << 11 | s2[24] >>> 21;
        b5 = s2[24] << 11 | s2[25] >>> 21;
        b36 = s2[34] << 15 | s2[35] >>> 17;
        b37 = s2[35] << 15 | s2[34] >>> 17;
        b18 = s2[45] << 29 | s2[44] >>> 3;
        b19 = s2[44] << 29 | s2[45] >>> 3;
        b10 = s2[6] << 28 | s2[7] >>> 4;
        b11 = s2[7] << 28 | s2[6] >>> 4;
        b42 = s2[17] << 23 | s2[16] >>> 9;
        b43 = s2[16] << 23 | s2[17] >>> 9;
        b24 = s2[26] << 25 | s2[27] >>> 7;
        b25 = s2[27] << 25 | s2[26] >>> 7;
        b6 = s2[36] << 21 | s2[37] >>> 11;
        b7 = s2[37] << 21 | s2[36] >>> 11;
        b38 = s2[47] << 24 | s2[46] >>> 8;
        b39 = s2[46] << 24 | s2[47] >>> 8;
        b30 = s2[8] << 27 | s2[9] >>> 5;
        b31 = s2[9] << 27 | s2[8] >>> 5;
        b12 = s2[18] << 20 | s2[19] >>> 12;
        b13 = s2[19] << 20 | s2[18] >>> 12;
        b44 = s2[29] << 7 | s2[28] >>> 25;
        b45 = s2[28] << 7 | s2[29] >>> 25;
        b26 = s2[38] << 8 | s2[39] >>> 24;
        b27 = s2[39] << 8 | s2[38] >>> 24;
        b8 = s2[48] << 14 | s2[49] >>> 18;
        b9 = s2[49] << 14 | s2[48] >>> 18;
        s2[0] = b0 ^ ~b22 & b4;
        s2[1] = b1 ^ ~b3 & b5;
        s2[10] = b10 ^ ~b12 & b14;
        s2[11] = b11 ^ ~b13 & b15;
        s2[20] = b20 ^ ~b222 & b24;
        s2[21] = b21 ^ ~b23 & b25;
        s2[30] = b30 ^ ~b32 & b34;
        s2[31] = b31 ^ ~b33 & b35;
        s2[40] = b40 ^ ~b42 & b44;
        s2[41] = b41 ^ ~b43 & b45;
        s2[2] = b22 ^ ~b4 & b6;
        s2[3] = b3 ^ ~b5 & b7;
        s2[12] = b12 ^ ~b14 & b16;
        s2[13] = b13 ^ ~b15 & b17;
        s2[22] = b222 ^ ~b24 & b26;
        s2[23] = b23 ^ ~b25 & b27;
        s2[32] = b32 ^ ~b34 & b36;
        s2[33] = b33 ^ ~b35 & b37;
        s2[42] = b42 ^ ~b44 & b46;
        s2[43] = b43 ^ ~b45 & b47;
        s2[4] = b4 ^ ~b6 & b8;
        s2[5] = b5 ^ ~b7 & b9;
        s2[14] = b14 ^ ~b16 & b18;
        s2[15] = b15 ^ ~b17 & b19;
        s2[24] = b24 ^ ~b26 & b28;
        s2[25] = b25 ^ ~b27 & b29;
        s2[34] = b34 ^ ~b36 & b38;
        s2[35] = b35 ^ ~b37 & b39;
        s2[44] = b44 ^ ~b46 & b48;
        s2[45] = b45 ^ ~b47 & b49;
        s2[6] = b6 ^ ~b8 & b0;
        s2[7] = b7 ^ ~b9 & b1;
        s2[16] = b16 ^ ~b18 & b10;
        s2[17] = b17 ^ ~b19 & b11;
        s2[26] = b26 ^ ~b28 & b20;
        s2[27] = b27 ^ ~b29 & b21;
        s2[36] = b36 ^ ~b38 & b30;
        s2[37] = b37 ^ ~b39 & b31;
        s2[46] = b46 ^ ~b48 & b40;
        s2[47] = b47 ^ ~b49 & b41;
        s2[8] = b8 ^ ~b0 & b22;
        s2[9] = b9 ^ ~b1 & b3;
        s2[18] = b18 ^ ~b10 & b12;
        s2[19] = b19 ^ ~b11 & b13;
        s2[28] = b28 ^ ~b20 & b222;
        s2[29] = b29 ^ ~b21 & b23;
        s2[38] = b38 ^ ~b30 & b32;
        s2[39] = b39 ^ ~b31 & b33;
        s2[48] = b48 ^ ~b40 & b42;
        s2[49] = b49 ^ ~b41 & b43;
        s2[0] ^= RC[n2];
        s2[1] ^= RC[n2 + 1];
      }
    };
    if (COMMON_JS) {
      module.exports = methods;
    } else {
      for (i3 = 0; i3 < methodNames.length; ++i3) {
        root[methodNames[i3]] = methods[methodNames[i3]];
      }
    }
  })();
});

// client/plugin/helpers/snarks.ts
async function getListProof(inputs) {
  console.log("asynchronously fetching proof");
  const { proof, publicSignals } = await groth16.fullProve(inputs, LIST_WASM_URL, LIST_ZKEY_URL);
  const callArgs = buildListContractCallArgs(proof, [
    inputs.listing_id,
    inputs.nonce,
    inputs.key_commitment,
    inputs.planet_id,
    inputs.biomebase
  ]);
  return callArgs;
}
async function getSaleProof(inputs) {
  const { proof, publicSignals } = await groth16.fullProve(inputs, SALE_WASM_URL, SALE_ZKEY_URL);
  const callArgs = buildSaleContractCallArgs(proof, [
    inputs.receipt_id,
    inputs.nonce
  ]);
  return callArgs;
}
function buildListContractCallArgs(proof, publicSignals) {
  return [
    [
      BigNumber.from(proof.pi_a[0]),
      BigNumber.from(proof.pi_a[1]),
      BigNumber.from(proof.pi_b[0][1]),
      BigNumber.from(proof.pi_b[0][0]),
      BigNumber.from(proof.pi_b[1][1]),
      BigNumber.from(proof.pi_b[1][0]),
      BigNumber.from(proof.pi_c[0]),
      BigNumber.from(proof.pi_c[1])
    ],
    [
      BigNumber.from(publicSignals[0][0]),
      BigNumber.from(publicSignals[0][1]),
      BigNumber.from(publicSignals[0][2]),
      BigNumber.from(publicSignals[0][3])
    ],
    BigNumber.from(publicSignals[1]),
    BigNumber.from(publicSignals[2]),
    BigNumber.from(publicSignals[3]),
    BigNumber.from(publicSignals[4])
  ];
}
function buildSaleContractCallArgs(proof, publicSignals) {
  return [
    [
      BigNumber.from(proof.pi_a[0]),
      BigNumber.from(proof.pi_a[1]),
      BigNumber.from(proof.pi_b[0][1]),
      BigNumber.from(proof.pi_b[0][0]),
      BigNumber.from(proof.pi_b[1][1]),
      BigNumber.from(proof.pi_b[1][0]),
      BigNumber.from(proof.pi_c[0]),
      BigNumber.from(proof.pi_c[1])
    ],
    [
      BigNumber.from(publicSignals[0][0]),
      BigNumber.from(publicSignals[0][1]),
      BigNumber.from(publicSignals[0][2]),
      BigNumber.from(publicSignals[0][3])
    ],
    BigNumber.from(publicSignals[1])
  ];
}

// client/plugin/hooks/use-market.ts
function useMarket() {
  const { market } = useContract();
  const { myTransactions, setTransactions } = useTransactions();
  const list = (proof, price, escrowTime, password) => {
    console.log("useMarket hook: listing coordinate with args: ");
    console.log(proof);
    console.log("price");
    console.log(price);
    console.log("escrowTime");
    console.log(escrowTime);
    return market.list(...proof, price, escrowTime, {
      gasLimit: 1e6
    }).then((res) => {
      console.log("contract.list response");
      console.log(res);
      console.log("Updated: myTransactins context");
    }).catch((e4) => {
      console.log("useMarket hook: there is a problem");
      console.log(e4);
    });
  };
  const delist = (listingId) => {
    return market.functions.delist(listingId, {
      gasLimit: 1e6
    }).then((tx) => console.log(`Delisting ${listingId}`)).catch((e4) => console.log(`Error delisting ${listingId}, ${e4}`));
  };
  const sale = async (listingId, orderId, key2, sharedKey, nonce, keyCommitment, sharedKeyCommitment) => {
    const receiptId = encrypt(key2, [sharedKey.x, sharedKey.y], nonce);
    const saleProofArgs = {
      receipt_id: receiptId,
      nonce: nonce.toString(),
      key_commitment: keyCommitment.toString(),
      shared_key_commitment: sharedKeyCommitment.toString(),
      shared_key: [sharedKey.x, sharedKey.y],
      key: key2
    };
    const saleProof = await getSaleProof(saleProofArgs);
    const sale2 = await market.sale(...saleProof, listingId, orderId, {
      gasLimit: 1e6
    });
    console.log(`sale tx: `, sale2);
  };
  return {
    list,
    delist,
    sale
  };
}

// client/plugin/helpers/genProofArgs.ts
var import_hashing = __toModule(require_dist8());
import { Scalar as Scalar3, ZqField as ZqField3 } from "https://cdn.skypack.dev/ffjavascript-browser@0.0.3";
var F3 = new ZqField3(Scalar3.fromString("21888242871839275222246405745257275088548364400416034343698204186575808495617"));
function genListProofArgs(planet, nonce, key2) {
  console.log("generating list prof args...");
  const c5 = df.getContractConstants();
  const loc = df.getLocationOfPlanet(planet.locationId);
  const [x3, y3] = [F3.e(loc?.coords.x), F3.e(loc?.coords.y)];
  const biomebase = loc?.coords ? df.biomebasePerlin(loc?.coords, true) : 999;
  const listing_id = encrypt([x3, y3], key2, nonce);
  const key_commitment = (0, import_hashing.mimcHash)(0)(F3.e(key2[0]), F3.e(key2[1])).toString();
  const planet_id = planet.locationId.replace(/^0+/, "0x");
  const inputs = {
    PLANETHASH_KEY: c5.PLANETHASH_KEY,
    BIOMEBASE_KEY: c5.BIOMEBASE_KEY,
    SPACETYPE_KEY: c5.SPACETYPE_KEY,
    SCALE: c5.PERLIN_LENGTH_SCALE,
    xMirror: c5.PERLIN_MIRROR_X ? 1 : 0,
    yMirror: c5.PERLIN_MIRROR_Y ? 1 : 0,
    listing_id,
    nonce,
    key_commitment,
    planet_id,
    biomebase,
    seller_address: df.getAccount(),
    x: x3,
    y: y3,
    key: key2
  };
  console.log(inputs);
  return inputs;
}

// client/plugin/helpers/utils.ts
import { mimcHash as mimcHash2 } from "https://cdn.skypack.dev/@darkforest_eth/hashing";
import { hashToInt } from "https://cdn.skypack.dev/@darkforest_eth/serde";
import { utils as utils3, BigNumber as BigNumber2 } from "https://cdn.skypack.dev/ethers";
function genRandomNonce() {
  const max = BigNumber2.from(2).pow(128).sub(1);
  const nonce = BigNumber2.from(utils3.randomBytes(32)).mod(max);
  return nonce.toString();
}
function passwordToKey(pw) {
  const pwHash = utils3.keccak256(utils3.toUtf8Bytes(pw)).toString();
  const password = hashToInt(pwHash.substr(2));
  const keypair = [mimcHash2(0)(password).toString(), mimcHash2(1)(password).toString()];
  return keypair;
}
var sortListings = (listings, sortBy) => {
  let sortedListings;
  if (sortBy.current === "escrow") {
    sortedListings = listings.sort((listingA, listingB) => listingA.escrowTime - listingB.escrowTime);
  } else if (sortBy.current === "id") {
    sortedListings = listings.sort((listingA, listingB) => listingA.listingId - listingB.listingId);
  } else if (sortBy.current === "price") {
    sortedListings = listings.sort((listingA, listingB) => listingA.price - listingB.price);
  } else if (sortBy.current === "numorders") {
    sortedListings = listings.sort((listingA, listingB) => listingA.numOrders - listingB.numOrders);
  } else if (sortBy.current === "active") {
    sortedListings = listings.sort((listingA, listingB) => Number(listingB.isActive) - Number(listingA.isActive));
  }
  return sortedListings;
};

// client/plugin/views/SellPlanetView.tsx
function SellPlanetView({ planet, setActivePlanet }) {
  console.log("In SellPlanetView");
  const { list } = useMarket();
  const didMount = h2(false);
  const nonce = h2(genRandomNonce());
  const [proof, setProof] = m2([]);
  const [price, setPrice] = m2(0);
  const [escrowTime, setEscrowTime] = m2(0);
  const [confirm, setConfirm] = m2(false);
  const [error, setError] = m2();
  const [password, setPassword] = m2("");
  const [key2, setKey] = m2([]);
  y2(() => {
    setKey(passwordToKey(password));
  }, [password]);
  y2(() => {
    if (!didMount.current) {
      didMount.current = true;
      return;
    }
    const proofArgs = genListProofArgs(planet, nonce.current, key2);
    const fetchProof = async () => {
      const listProof = await getListProof(proofArgs);
      setProof(listProof);
    };
    fetchProof().catch(console.error);
  }, [confirm]);
  const onClickConfirm = () => setConfirm(true);
  const onClickList = () => {
    list(proof, price, escrowTime, password).then(() => setActivePlanet(false)).catch(setError);
    console.log("Clicked list, sending trx!");
  };
  const validateForm = () => {
    if (confirm) {
      return proof.length > 1 ? true : false;
    } else {
      return true;
    }
  };
  return /* @__PURE__ */ v("div", {
    style: {}
  }, /* @__PURE__ */ v("div", null, /* @__PURE__ */ v("label", {
    for: "price"
  }, "Price (in Eth):")), /* @__PURE__ */ v("div", null, /* @__PURE__ */ v(NumInput, {
    name: "price",
    type: "number",
    value: price,
    onChange: setPrice
  })), /* @__PURE__ */ v("div", null, /* @__PURE__ */ v("label", null, "Escrow time (in blocks)")), /* @__PURE__ */ v("div", null, /* @__PURE__ */ v(NumInput, {
    name: "escrowTime",
    type: "number",
    value: escrowTime,
    onChange: setEscrowTime
  })), /* @__PURE__ */ v("div", null, /* @__PURE__ */ v("label", null, "A unique password (write it down and dont re-use!!)")), /* @__PURE__ */ v("div", null, /* @__PURE__ */ v(TextInput, {
    name: "password",
    type: "string",
    value: password,
    placeholder: "your password",
    onChange: setPassword
  })), /* @__PURE__ */ v("div", null, /* @__PURE__ */ v(Button, {
    children: confirm ? "confirm list" : "generate proof",
    theme: confirm ? "green" : "default",
    style: { width: "128px", marginRight: "4px", marginTop: "4px" },
    onClick: confirm ? onClickList : onClickConfirm,
    disabled: !validateForm()
  }), /* @__PURE__ */ v(Button, {
    theme: "red",
    style: { width: "128px", marginTop: "4px" },
    children: "cancel",
    onClick: () => setActivePlanet(false)
  })), /* @__PURE__ */ v("div", null, "Listing proof parameters:"), /* @__PURE__ */ v("div", {
    style: listingStyles.longText
  }, "Proof: ", JSON.stringify(proof)), /* @__PURE__ */ v("div", null, "Nonce: ", nonce.current), /* @__PURE__ */ v("div", {
    style: listingStyles.longText
  }, "Key: ", JSON.stringify(key2)));
}

// client/plugin/views/MyPlanetsView.tsx
function MyPlanetsView() {
  console.log("MyPlanetsView");
  const { myPlanets, loading, error } = useMyPlanets();
  const [activePlanet, setActivePlanet] = m2(false);
  if (error)
    return /* @__PURE__ */ v(ErrorLabel, {
      error
    });
  if (loading)
    return /* @__PURE__ */ v(Loading, null);
  if (activePlanet) {
    console.log("Active Planet Mode");
    console.log(activePlanet);
    return /* @__PURE__ */ v(SellPlanetView, {
      planet: activePlanet,
      setActivePlanet
    });
  }
  return /* @__PURE__ */ v("div", null, /* @__PURE__ */ v("title", null, "My known coordinates"), /* @__PURE__ */ v(MyPlanets, {
    emptyState: "I don't know of any planet coordinates.",
    planets: myPlanets,
    setActivePlanet: (planet) => {
      return /* @__PURE__ */ v(Button, {
        children: "sell",
        style: { width: "100%" },
        onClick: () => setActivePlanet(planet)
      });
    }
  }));
}

// client/plugin/components/MyListingsContext.tsx
var ListingsContext = D({ listings: [], setListings: null });
var ListingsProvider = (props) => {
  const [listings, setListings] = m2(props.listings);
  return /* @__PURE__ */ v(ListingsContext.Provider, {
    value: { listings, setListings },
    children: props.children
  });
};

// client/plugin/hooks/use-listings.ts
var useListings = () => F(ListingsContext);

// client/plugin/helpers/transactions.ts
var getOrders = async (market, listingId, numOrders) => {
  const orders = [];
  for (let orderId = 0; orderId < numOrders; orderId++) {
    let orderInfo = await market.getOrder(listingId, orderId);
    const order = { ...orderInfo, orderId };
    orders.push(order);
  }
  return orders;
};
var getListings = async (market, addEvent) => {
  const nListings = (await market.numListings()).toNumber();
  const listings = [];
  for (let listingId = 0; listingId < nListings; listingId++) {
    let contractListing = await market.listings(listingId);
    let listing = {
      listingId,
      seller: contractListing.seller,
      keyCommitment: contractListing.keyCommitment,
      price: contractListing.price,
      escrowTime: contractListing.escrowTime,
      numOrders: contractListing.numOrders,
      isActive: contractListing.isActive
    };
    let listingEvent;
    if (addEvent) {
      [listingEvent] = await market.queryFilter(market.filters.Listed(null, listingId));
    }
    const locationId = addEvent ? listingEvent.args.locationId.toString() : "NA";
    const biomebase = addEvent ? listingEvent.args.biombase.toString() : "NA";
    const txHash = addEvent ? listingEvent.args.transactionHash : "NA";
    const tx = addEvent ? await listingEvent.getTransaction() : "NA";
    const nonce = addEvent ? listingEvent.args.nonce : 0;
    const orders = listing.numOrders > 0 ? await getOrders(market, listingId, listing.numOrders) : void 0;
    listing = {
      ...listing,
      locationId,
      biomebase,
      txHash,
      tx,
      nonce,
      orders
    };
    listings.push(listing);
  }
  return await Promise.all(listings);
};
var getListingsForAddress = (listings, address) => {
  return listings.filter((listing) => listing.seller == address);
};
var getListingsWithOrdersFromAddress = (listings, address) => {
  let allOrders = [];
  listings.forEach((listing) => {
    if (listing.numOrders > 0) {
      const orders = listing.orders.filter((order) => order.buyer == address);
      if (orders.length > 0) {
        const addressOrders = {
          listing,
          orders
        };
        allOrders.push(addressOrders);
      }
    }
  });
  return allOrders;
};
var getTxs = async (market, signer) => {
  const address = await signer.getAddress();
  const listedTxEvents = await market.queryFilter(market.filters.Listed(address));
  return listedTxEvents;
};

// client/plugin/components/ListingItem.tsx
var ListingItem = (props) => {
  const [disabledButton, setdisabledButton] = m2(props.buttonDisabled);
  const onClickAction = async () => {
    if (props.buttonChildren == "confirm") {
      setdisabledButton(true);
      await props.onClickAction();
    } else {
      props.onClickAction();
    }
  };
  return /* @__PURE__ */ v("div", {
    style: listingStyles.listing
  }, [
    /* @__PURE__ */ v("div", null, " ", /* @__PURE__ */ v("a", {
      target: "_blank",
      href: props.url
    }, props.listing.listingId)),
    /* @__PURE__ */ v("div", {
      style: listingStyles.longText
    }, " ", props.listing.locationId, " "),
    /* @__PURE__ */ v("div", {
      style: listingStyles.longText
    }, " ", props.listing.biomebase, " "),
    /* @__PURE__ */ v("div", {
      style: listingStyles.longText
    }, " ", props.listing.escrowTime.toString(), " "),
    /* @__PURE__ */ v("div", {
      style: listingStyles.longText
    }, " ", props.listing.price.toString(), " "),
    /* @__PURE__ */ v("div", {
      style: props.linkMultipleOrder,
      onClick: props.onClickOrders
    }, " ", props.listing.numOrders.toString(), " "),
    /* @__PURE__ */ v("div", {
      style: listingStyles.longText
    }, " ", props.listing.isActive.toString(), " "),
    /* @__PURE__ */ v(Button, {
      disabled: disabledButton,
      theme: props.actionButtonTheme,
      children: props.buttonChildren,
      style: { width: "100%" },
      onClick: async () => await onClickAction()
    })
  ]);
};
var ListingHeaderRow = (props) => {
  const clickableStyle = { cursor: "pointer" };
  return /* @__PURE__ */ v("div", {
    style: listingStyles.listing
  }, [
    /* @__PURE__ */ v("div", {
      style: clickableStyle,
      onClick: () => props.setSortBy({ previous: props.sortBy.current, current: "id" })
    }, " ListID \u25B2"),
    /* @__PURE__ */ v("div", null, "LocID"),
    /* @__PURE__ */ v("div", null, " Biomebase "),
    /* @__PURE__ */ v("div", {
      style: clickableStyle,
      onClick: () => props.setSortBy({ previous: props.sortBy.current, current: "escrow" })
    }, "Escrow \u25B2"),
    /* @__PURE__ */ v("div", {
      style: clickableStyle,
      onClick: () => props.setSortBy({ previous: props.sortBy.current, current: "price" })
    }, " Price \u25B2"),
    /* @__PURE__ */ v("div", {
      style: clickableStyle,
      onClick: () => props.setSortBy({ previous: props.sortBy.current, current: "numorders" })
    }, " Orders \u25B2"),
    /* @__PURE__ */ v("div", {
      style: clickableStyle,
      onClick: () => props.setSortBy({ previous: props.sortBy.current, current: "active" })
    }, " Active \u25B2")
  ]);
};
var ListingRow = (props) => {
  const { delist } = useMarket();
  const [confirmDelist, setConfirmDelist] = m2(false);
  const [delisted, setdelisted] = m2(false);
  const { listing } = props;
  const inMyListing = props.view === "mylistings";
  const delistListing = async () => {
    const tx = await delist(listing.listingId);
    listing.isActive = false;
    setdelisted(true);
  };
  const isActive = listing.isActive.toString();
  const url = `https://blockscout.com/xdai/mainnet/tx/${listing.txHash}`;
  const onClickAction = inMyListing ? confirmDelist ? async () => await delistListing() : () => setConfirmDelist(true) : () => props.orderview(listing);
  const buttonChildren = inMyListing ? confirmDelist ? delisted ? "delisted" : "confirm" : "delist" : "details";
  const actionButtonTheme = inMyListing ? confirmDelist ? delisted ? "red" : "green" : "default" : "default";
  const onClickOrders = () => props.listordersview(props.listing);
  const buttonDisabled = inMyListing ? !listing.isActive : false;
  const styleOrderDiv = listing.numOrders > 0 ? { ...listingStyles.longText, cursor: "pointer", textDecoration: "underline" } : listingStyles.longText;
  return /* @__PURE__ */ v(ListingItem, {
    listing,
    buttonDisabled,
    buttonChildren,
    url,
    linkMultipleOrder: styleOrderDiv,
    actionButtonTheme,
    onClickOrders,
    onClickAction
  });
};

// client/plugin/components/ConnectionContext.ts
var ConnectionContext = D();
var ConnectionProvider = ConnectionContext.Provider;

// client/plugin/hooks/use-connection.ts
var useConnection = () => F(ConnectionContext);

// node_modules/ethers/lib.esm/ethers.js
var ethers_exports = {};
__export(ethers_exports, {
  BaseContract: () => BaseContract,
  BigNumber: () => BigNumber3,
  Contract: () => Contract,
  ContractFactory: () => ContractFactory,
  FixedNumber: () => FixedNumber,
  Signer: () => Signer,
  VoidSigner: () => VoidSigner,
  Wallet: () => Wallet,
  Wordlist: () => Wordlist,
  constants: () => lib_exports2,
  errors: () => ErrorCode,
  getDefaultProvider: () => getDefaultProvider,
  logger: () => logger51,
  providers: () => lib_exports4,
  utils: () => utils_exports,
  version: () => version27,
  wordlists: () => wordlists
});

// node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
var import_bn = __toModule(require_bn());

// node_modules/@ethersproject/logger/lib.esm/_version.js
var version = "logger/5.6.0";

// node_modules/@ethersproject/logger/lib.esm/index.js
"use strict";
var _permanentCensorErrors = false;
var _censorErrors = false;
var LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
var _logLevel = LogLevels["default"];
var _globalLogger = null;
function _checkNormalize() {
  try {
    const missing = [];
    ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad normalize");
        }
        ;
      } catch (error) {
        missing.push(form);
      }
    });
    if (missing.length) {
      throw new Error("missing " + missing.join(", "));
    }
    if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
      throw new Error("broken implementation");
    }
  } catch (error) {
    return error.message;
  }
  return null;
}
var _normalizeError = _checkNormalize();
var LogLevel;
(function(LogLevel2) {
  LogLevel2["DEBUG"] = "DEBUG";
  LogLevel2["INFO"] = "INFO";
  LogLevel2["WARNING"] = "WARNING";
  LogLevel2["ERROR"] = "ERROR";
  LogLevel2["OFF"] = "OFF";
})(LogLevel || (LogLevel = {}));
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
  ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
  ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
  ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
  ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
  ErrorCode2["TIMEOUT"] = "TIMEOUT";
  ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
  ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
  ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
  ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
  ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
  ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
  ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
  ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
  ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
  ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
  ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
  ErrorCode2["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
})(ErrorCode || (ErrorCode = {}));
var HEX = "0123456789abcdef";
var Logger = class {
  constructor(version28) {
    Object.defineProperty(this, "version", {
      enumerable: true,
      value: version28,
      writable: false
    });
  }
  _log(logLevel, args) {
    const level = logLevel.toLowerCase();
    if (LogLevels[level] == null) {
      this.throwArgumentError("invalid log level name", "logLevel", logLevel);
    }
    if (_logLevel > LogLevels[level]) {
      return;
    }
    console.log.apply(console, args);
  }
  debug(...args) {
    this._log(Logger.levels.DEBUG, args);
  }
  info(...args) {
    this._log(Logger.levels.INFO, args);
  }
  warn(...args) {
    this._log(Logger.levels.WARNING, args);
  }
  makeError(message, code, params) {
    if (_censorErrors) {
      return this.makeError("censored error", code, {});
    }
    if (!code) {
      code = Logger.errors.UNKNOWN_ERROR;
    }
    if (!params) {
      params = {};
    }
    const messageDetails = [];
    Object.keys(params).forEach((key2) => {
      const value = params[key2];
      try {
        if (value instanceof Uint8Array) {
          let hex2 = "";
          for (let i3 = 0; i3 < value.length; i3++) {
            hex2 += HEX[value[i3] >> 4];
            hex2 += HEX[value[i3] & 15];
          }
          messageDetails.push(key2 + "=Uint8Array(0x" + hex2 + ")");
        } else {
          messageDetails.push(key2 + "=" + JSON.stringify(value));
        }
      } catch (error2) {
        messageDetails.push(key2 + "=" + JSON.stringify(params[key2].toString()));
      }
    });
    messageDetails.push(`code=${code}`);
    messageDetails.push(`version=${this.version}`);
    const reason = message;
    let url = "";
    switch (code) {
      case ErrorCode.NUMERIC_FAULT: {
        url = "NUMERIC_FAULT";
        const fault = message;
        switch (fault) {
          case "overflow":
          case "underflow":
          case "division-by-zero":
            url += "-" + fault;
            break;
          case "negative-power":
          case "negative-width":
            url += "-unsupported";
            break;
          case "unbound-bitwise-result":
            url += "-unbound-result";
            break;
        }
        break;
      }
      case ErrorCode.CALL_EXCEPTION:
      case ErrorCode.INSUFFICIENT_FUNDS:
      case ErrorCode.MISSING_NEW:
      case ErrorCode.NONCE_EXPIRED:
      case ErrorCode.REPLACEMENT_UNDERPRICED:
      case ErrorCode.TRANSACTION_REPLACED:
      case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
        url = code;
        break;
    }
    if (url) {
      message += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
    }
    if (messageDetails.length) {
      message += " (" + messageDetails.join(", ") + ")";
    }
    const error = new Error(message);
    error.reason = reason;
    error.code = code;
    Object.keys(params).forEach(function(key2) {
      error[key2] = params[key2];
    });
    return error;
  }
  throwError(message, code, params) {
    throw this.makeError(message, code, params);
  }
  throwArgumentError(message, name2, value) {
    return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
      argument: name2,
      value
    });
  }
  assert(condition, message, code, params) {
    if (!!condition) {
      return;
    }
    this.throwError(message, code, params);
  }
  assertArgument(condition, message, name2, value) {
    if (!!condition) {
      return;
    }
    this.throwArgumentError(message, name2, value);
  }
  checkNormalize(message) {
    if (message == null) {
      message = "platform missing String.prototype.normalize";
    }
    if (_normalizeError) {
      this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "String.prototype.normalize",
        form: _normalizeError
      });
    }
  }
  checkSafeUint53(value, message) {
    if (typeof value !== "number") {
      return;
    }
    if (message == null) {
      message = "value not safe";
    }
    if (value < 0 || value >= 9007199254740991) {
      this.throwError(message, Logger.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "out-of-safe-range",
        value
      });
    }
    if (value % 1) {
      this.throwError(message, Logger.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "non-integer",
        value
      });
    }
  }
  checkArgumentCount(count, expectedCount, message) {
    if (message) {
      message = ": " + message;
    } else {
      message = "";
    }
    if (count < expectedCount) {
      this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
        count,
        expectedCount
      });
    }
    if (count > expectedCount) {
      this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
        count,
        expectedCount
      });
    }
  }
  checkNew(target, kind) {
    if (target === Object || target == null) {
      this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
    }
  }
  checkAbstract(target, kind) {
    if (target === kind) {
      this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
    } else if (target === Object || target == null) {
      this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
    }
  }
  static globalLogger() {
    if (!_globalLogger) {
      _globalLogger = new Logger(version);
    }
    return _globalLogger;
  }
  static setCensorship(censorship, permanent) {
    if (!censorship && permanent) {
      this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    if (_permanentCensorErrors) {
      if (!censorship) {
        return;
      }
      this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    _censorErrors = !!censorship;
    _permanentCensorErrors = !!permanent;
  }
  static setLogLevel(logLevel) {
    const level = LogLevels[logLevel.toLowerCase()];
    if (level == null) {
      Logger.globalLogger().warn("invalid log level - " + logLevel);
      return;
    }
    _logLevel = level;
  }
  static from(version28) {
    return new Logger(version28);
  }
};
Logger.errors = ErrorCode;
Logger.levels = LogLevel;

// node_modules/@ethersproject/bytes/lib.esm/_version.js
var version2 = "bytes/5.6.1";

// node_modules/@ethersproject/bytes/lib.esm/index.js
"use strict";
var logger = new Logger(version2);
function isHexable(value) {
  return !!value.toHexString;
}
function addSlice(array) {
  if (array.slice) {
    return array;
  }
  array.slice = function() {
    const args = Array.prototype.slice.call(arguments);
    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
  };
  return array;
}
function isBytesLike(value) {
  return isHexString(value) && !(value.length % 2) || isBytes(value);
}
function isInteger(value) {
  return typeof value === "number" && value == value && value % 1 === 0;
}
function isBytes(value) {
  if (value == null) {
    return false;
  }
  if (value.constructor === Uint8Array) {
    return true;
  }
  if (typeof value === "string") {
    return false;
  }
  if (!isInteger(value.length) || value.length < 0) {
    return false;
  }
  for (let i3 = 0; i3 < value.length; i3++) {
    const v3 = value[i3];
    if (!isInteger(v3) || v3 < 0 || v3 >= 256) {
      return false;
    }
  }
  return true;
}
function arrayify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid arrayify value");
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value = parseInt(String(value / 256));
    }
    if (result.length === 0) {
      result.push(0);
    }
    return addSlice(new Uint8Array(result));
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    value = value.toHexString();
  }
  if (isHexString(value)) {
    let hex2 = value.substring(2);
    if (hex2.length % 2) {
      if (options.hexPad === "left") {
        hex2 = "0" + hex2;
      } else if (options.hexPad === "right") {
        hex2 += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    const result = [];
    for (let i3 = 0; i3 < hex2.length; i3 += 2) {
      result.push(parseInt(hex2.substring(i3, i3 + 2), 16));
    }
    return addSlice(new Uint8Array(result));
  }
  if (isBytes(value)) {
    return addSlice(new Uint8Array(value));
  }
  return logger.throwArgumentError("invalid arrayify value", "value", value);
}
function concat2(items) {
  const objects = items.map((item) => arrayify(item));
  const length = objects.reduce((accum, item) => accum + item.length, 0);
  const result = new Uint8Array(length);
  objects.reduce((offset, object) => {
    result.set(object, offset);
    return offset + object.length;
  }, 0);
  return addSlice(result);
}
function stripZeros(value) {
  let result = arrayify(value);
  if (result.length === 0) {
    return result;
  }
  let start = 0;
  while (start < result.length && result[start] === 0) {
    start++;
  }
  if (start) {
    result = result.slice(start);
  }
  return result;
}
function zeroPad(value, length) {
  value = arrayify(value);
  if (value.length > length) {
    logger.throwArgumentError("value out of range", "value", arguments[0]);
  }
  const result = new Uint8Array(length);
  result.set(value, length - value.length);
  return addSlice(result);
}
function isHexString(value, length) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length && value.length !== 2 + 2 * length) {
    return false;
  }
  return true;
}
var HexCharacters = "0123456789abcdef";
function hexlify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid hexlify value");
    let hex2 = "";
    while (value) {
      hex2 = HexCharacters[value & 15] + hex2;
      value = Math.floor(value / 16);
    }
    if (hex2.length) {
      if (hex2.length % 2) {
        hex2 = "0" + hex2;
      }
      return "0x" + hex2;
    }
    return "0x00";
  }
  if (typeof value === "bigint") {
    value = value.toString(16);
    if (value.length % 2) {
      return "0x0" + value;
    }
    return "0x" + value;
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    return value.toHexString();
  }
  if (isHexString(value)) {
    if (value.length % 2) {
      if (options.hexPad === "left") {
        value = "0x0" + value.substring(2);
      } else if (options.hexPad === "right") {
        value += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    return value.toLowerCase();
  }
  if (isBytes(value)) {
    let result = "0x";
    for (let i3 = 0; i3 < value.length; i3++) {
      let v3 = value[i3];
      result += HexCharacters[(v3 & 240) >> 4] + HexCharacters[v3 & 15];
    }
    return result;
  }
  return logger.throwArgumentError("invalid hexlify value", "value", value);
}
function hexDataLength(data) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    return null;
  }
  return (data.length - 2) / 2;
}
function hexDataSlice(data, offset, endOffset) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    logger.throwArgumentError("invalid hexData", "value", data);
  }
  offset = 2 + 2 * offset;
  if (endOffset != null) {
    return "0x" + data.substring(offset, 2 + 2 * endOffset);
  }
  return "0x" + data.substring(offset);
}
function hexConcat(items) {
  let result = "0x";
  items.forEach((item) => {
    result += hexlify(item).substring(2);
  });
  return result;
}
function hexValue2(value) {
  const trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
  if (trimmed === "0x") {
    return "0x0";
  }
  return trimmed;
}
function hexStripZeros(value) {
  if (typeof value !== "string") {
    value = hexlify(value);
  }
  if (!isHexString(value)) {
    logger.throwArgumentError("invalid hex string", "value", value);
  }
  value = value.substring(2);
  let offset = 0;
  while (offset < value.length && value[offset] === "0") {
    offset++;
  }
  return "0x" + value.substring(offset);
}
function hexZeroPad(value, length) {
  if (typeof value !== "string") {
    value = hexlify(value);
  } else if (!isHexString(value)) {
    logger.throwArgumentError("invalid hex string", "value", value);
  }
  if (value.length > 2 * length + 2) {
    logger.throwArgumentError("value out of range", "value", arguments[1]);
  }
  while (value.length < 2 * length + 2) {
    value = "0x0" + value.substring(2);
  }
  return value;
}
function splitSignature(signature2) {
  const result = {
    r: "0x",
    s: "0x",
    _vs: "0x",
    recoveryParam: 0,
    v: 0,
    yParityAndS: "0x",
    compact: "0x"
  };
  if (isBytesLike(signature2)) {
    let bytes3 = arrayify(signature2);
    if (bytes3.length === 64) {
      result.v = 27 + (bytes3[32] >> 7);
      bytes3[32] &= 127;
      result.r = hexlify(bytes3.slice(0, 32));
      result.s = hexlify(bytes3.slice(32, 64));
    } else if (bytes3.length === 65) {
      result.r = hexlify(bytes3.slice(0, 32));
      result.s = hexlify(bytes3.slice(32, 64));
      result.v = bytes3[64];
    } else {
      logger.throwArgumentError("invalid signature string", "signature", signature2);
    }
    if (result.v < 27) {
      if (result.v === 0 || result.v === 1) {
        result.v += 27;
      } else {
        logger.throwArgumentError("signature invalid v byte", "signature", signature2);
      }
    }
    result.recoveryParam = 1 - result.v % 2;
    if (result.recoveryParam) {
      bytes3[32] |= 128;
    }
    result._vs = hexlify(bytes3.slice(32, 64));
  } else {
    result.r = signature2.r;
    result.s = signature2.s;
    result.v = signature2.v;
    result.recoveryParam = signature2.recoveryParam;
    result._vs = signature2._vs;
    if (result._vs != null) {
      const vs2 = zeroPad(arrayify(result._vs), 32);
      result._vs = hexlify(vs2);
      const recoveryParam = vs2[0] >= 128 ? 1 : 0;
      if (result.recoveryParam == null) {
        result.recoveryParam = recoveryParam;
      } else if (result.recoveryParam !== recoveryParam) {
        logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature2);
      }
      vs2[0] &= 127;
      const s2 = hexlify(vs2);
      if (result.s == null) {
        result.s = s2;
      } else if (result.s !== s2) {
        logger.throwArgumentError("signature v mismatch _vs", "signature", signature2);
      }
    }
    if (result.recoveryParam == null) {
      if (result.v == null) {
        logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature2);
      } else if (result.v === 0 || result.v === 1) {
        result.recoveryParam = result.v;
      } else {
        result.recoveryParam = 1 - result.v % 2;
      }
    } else {
      if (result.v == null) {
        result.v = 27 + result.recoveryParam;
      } else {
        const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
        if (result.recoveryParam !== recId) {
          logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature2);
        }
      }
    }
    if (result.r == null || !isHexString(result.r)) {
      logger.throwArgumentError("signature missing or invalid r", "signature", signature2);
    } else {
      result.r = hexZeroPad(result.r, 32);
    }
    if (result.s == null || !isHexString(result.s)) {
      logger.throwArgumentError("signature missing or invalid s", "signature", signature2);
    } else {
      result.s = hexZeroPad(result.s, 32);
    }
    const vs = arrayify(result.s);
    if (vs[0] >= 128) {
      logger.throwArgumentError("signature s out of range", "signature", signature2);
    }
    if (result.recoveryParam) {
      vs[0] |= 128;
    }
    const _vs = hexlify(vs);
    if (result._vs) {
      if (!isHexString(result._vs)) {
        logger.throwArgumentError("signature invalid _vs", "signature", signature2);
      }
      result._vs = hexZeroPad(result._vs, 32);
    }
    if (result._vs == null) {
      result._vs = _vs;
    } else if (result._vs !== _vs) {
      logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature2);
    }
  }
  result.yParityAndS = result._vs;
  result.compact = result.r + result.yParityAndS.substring(2);
  return result;
}
function joinSignature(signature2) {
  signature2 = splitSignature(signature2);
  return hexlify(concat2([
    signature2.r,
    signature2.s,
    signature2.recoveryParam ? "0x1c" : "0x1b"
  ]));
}

// node_modules/@ethersproject/bignumber/lib.esm/_version.js
var version3 = "bignumber/5.6.0";

// node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
"use strict";
var BN = import_bn.default.BN;
var logger2 = new Logger(version3);
var _constructorGuard = {};
var MAX_SAFE = 9007199254740991;
function isBigNumberish(value) {
  return value != null && (BigNumber3.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === "bigint" || isBytes(value));
}
var _warnedToStringRadix = false;
var BigNumber3 = class {
  constructor(constructorGuard, hex2) {
    logger2.checkNew(new.target, BigNumber3);
    if (constructorGuard !== _constructorGuard) {
      logger2.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new (BigNumber)"
      });
    }
    this._hex = hex2;
    this._isBigNumber = true;
    Object.freeze(this);
  }
  fromTwos(value) {
    return toBigNumber(toBN(this).fromTwos(value));
  }
  toTwos(value) {
    return toBigNumber(toBN(this).toTwos(value));
  }
  abs() {
    if (this._hex[0] === "-") {
      return BigNumber3.from(this._hex.substring(1));
    }
    return this;
  }
  add(other) {
    return toBigNumber(toBN(this).add(toBN(other)));
  }
  sub(other) {
    return toBigNumber(toBN(this).sub(toBN(other)));
  }
  div(other) {
    const o3 = BigNumber3.from(other);
    if (o3.isZero()) {
      throwFault("division-by-zero", "div");
    }
    return toBigNumber(toBN(this).div(toBN(other)));
  }
  mul(other) {
    return toBigNumber(toBN(this).mul(toBN(other)));
  }
  mod(other) {
    const value = toBN(other);
    if (value.isNeg()) {
      throwFault("division-by-zero", "mod");
    }
    return toBigNumber(toBN(this).umod(value));
  }
  pow(other) {
    const value = toBN(other);
    if (value.isNeg()) {
      throwFault("negative-power", "pow");
    }
    return toBigNumber(toBN(this).pow(value));
  }
  and(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "and");
    }
    return toBigNumber(toBN(this).and(value));
  }
  or(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "or");
    }
    return toBigNumber(toBN(this).or(value));
  }
  xor(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "xor");
    }
    return toBigNumber(toBN(this).xor(value));
  }
  mask(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "mask");
    }
    return toBigNumber(toBN(this).maskn(value));
  }
  shl(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "shl");
    }
    return toBigNumber(toBN(this).shln(value));
  }
  shr(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "shr");
    }
    return toBigNumber(toBN(this).shrn(value));
  }
  eq(other) {
    return toBN(this).eq(toBN(other));
  }
  lt(other) {
    return toBN(this).lt(toBN(other));
  }
  lte(other) {
    return toBN(this).lte(toBN(other));
  }
  gt(other) {
    return toBN(this).gt(toBN(other));
  }
  gte(other) {
    return toBN(this).gte(toBN(other));
  }
  isNegative() {
    return this._hex[0] === "-";
  }
  isZero() {
    return toBN(this).isZero();
  }
  toNumber() {
    try {
      return toBN(this).toNumber();
    } catch (error) {
      throwFault("overflow", "toNumber", this.toString());
    }
    return null;
  }
  toBigInt() {
    try {
      return BigInt(this.toString());
    } catch (e4) {
    }
    return logger2.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
      value: this.toString()
    });
  }
  toString() {
    if (arguments.length > 0) {
      if (arguments[0] === 10) {
        if (!_warnedToStringRadix) {
          _warnedToStringRadix = true;
          logger2.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
        }
      } else if (arguments[0] === 16) {
        logger2.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
      } else {
        logger2.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
      }
    }
    return toBN(this).toString(10);
  }
  toHexString() {
    return this._hex;
  }
  toJSON(key2) {
    return { type: "BigNumber", hex: this.toHexString() };
  }
  static from(value) {
    if (value instanceof BigNumber3) {
      return value;
    }
    if (typeof value === "string") {
      if (value.match(/^-?0x[0-9a-f]+$/i)) {
        return new BigNumber3(_constructorGuard, toHex(value));
      }
      if (value.match(/^-?[0-9]+$/)) {
        return new BigNumber3(_constructorGuard, toHex(new BN(value)));
      }
      return logger2.throwArgumentError("invalid BigNumber string", "value", value);
    }
    if (typeof value === "number") {
      if (value % 1) {
        throwFault("underflow", "BigNumber.from", value);
      }
      if (value >= MAX_SAFE || value <= -MAX_SAFE) {
        throwFault("overflow", "BigNumber.from", value);
      }
      return BigNumber3.from(String(value));
    }
    const anyValue = value;
    if (typeof anyValue === "bigint") {
      return BigNumber3.from(anyValue.toString());
    }
    if (isBytes(anyValue)) {
      return BigNumber3.from(hexlify(anyValue));
    }
    if (anyValue) {
      if (anyValue.toHexString) {
        const hex2 = anyValue.toHexString();
        if (typeof hex2 === "string") {
          return BigNumber3.from(hex2);
        }
      } else {
        let hex2 = anyValue._hex;
        if (hex2 == null && anyValue.type === "BigNumber") {
          hex2 = anyValue.hex;
        }
        if (typeof hex2 === "string") {
          if (isHexString(hex2) || hex2[0] === "-" && isHexString(hex2.substring(1))) {
            return BigNumber3.from(hex2);
          }
        }
      }
    }
    return logger2.throwArgumentError("invalid BigNumber value", "value", value);
  }
  static isBigNumber(value) {
    return !!(value && value._isBigNumber);
  }
};
function toHex(value) {
  if (typeof value !== "string") {
    return toHex(value.toString(16));
  }
  if (value[0] === "-") {
    value = value.substring(1);
    if (value[0] === "-") {
      logger2.throwArgumentError("invalid hex", "value", value);
    }
    value = toHex(value);
    if (value === "0x00") {
      return value;
    }
    return "-" + value;
  }
  if (value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (value === "0x") {
    return "0x00";
  }
  if (value.length % 2) {
    value = "0x0" + value.substring(2);
  }
  while (value.length > 4 && value.substring(0, 4) === "0x00") {
    value = "0x" + value.substring(4);
  }
  return value;
}
function toBigNumber(value) {
  return BigNumber3.from(toHex(value));
}
function toBN(value) {
  const hex2 = BigNumber3.from(value).toHexString();
  if (hex2[0] === "-") {
    return new BN("-" + hex2.substring(3), 16);
  }
  return new BN(hex2.substring(2), 16);
}
function throwFault(fault, operation, value) {
  const params = { fault, operation };
  if (value != null) {
    params.value = value;
  }
  return logger2.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
}
function _base36To16(value) {
  return new BN(value, 36).toString(16);
}
function _base16To36(value) {
  return new BN(value, 16).toString(36);
}

// node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js
"use strict";
var logger3 = new Logger(version3);
var _constructorGuard2 = {};
var Zero = BigNumber3.from(0);
var NegativeOne = BigNumber3.from(-1);
function throwFault2(message, fault, operation, value) {
  const params = { fault, operation };
  if (value !== void 0) {
    params.value = value;
  }
  return logger3.throwError(message, Logger.errors.NUMERIC_FAULT, params);
}
var zeros = "0";
while (zeros.length < 256) {
  zeros += zeros;
}
function getMultiplier(decimals) {
  if (typeof decimals !== "number") {
    try {
      decimals = BigNumber3.from(decimals).toNumber();
    } catch (e4) {
    }
  }
  if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
    return "1" + zeros.substring(0, decimals);
  }
  return logger3.throwArgumentError("invalid decimal size", "decimals", decimals);
}
function formatFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  value = BigNumber3.from(value);
  const negative = value.lt(Zero);
  if (negative) {
    value = value.mul(NegativeOne);
  }
  let fraction = value.mod(multiplier).toString();
  while (fraction.length < multiplier.length - 1) {
    fraction = "0" + fraction;
  }
  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  const whole = value.div(multiplier).toString();
  if (multiplier.length === 1) {
    value = whole;
  } else {
    value = whole + "." + fraction;
  }
  if (negative) {
    value = "-" + value;
  }
  return value;
}
function parseFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
    logger3.throwArgumentError("invalid decimal value", "value", value);
  }
  const negative = value.substring(0, 1) === "-";
  if (negative) {
    value = value.substring(1);
  }
  if (value === ".") {
    logger3.throwArgumentError("missing value", "value", value);
  }
  const comps = value.split(".");
  if (comps.length > 2) {
    logger3.throwArgumentError("too many decimal points", "value", value);
  }
  let whole = comps[0], fraction = comps[1];
  if (!whole) {
    whole = "0";
  }
  if (!fraction) {
    fraction = "0";
  }
  while (fraction[fraction.length - 1] === "0") {
    fraction = fraction.substring(0, fraction.length - 1);
  }
  if (fraction.length > multiplier.length - 1) {
    throwFault2("fractional component exceeds decimals", "underflow", "parseFixed");
  }
  if (fraction === "") {
    fraction = "0";
  }
  while (fraction.length < multiplier.length - 1) {
    fraction += "0";
  }
  const wholeValue = BigNumber3.from(whole);
  const fractionValue = BigNumber3.from(fraction);
  let wei = wholeValue.mul(multiplier).add(fractionValue);
  if (negative) {
    wei = wei.mul(NegativeOne);
  }
  return wei;
}
var FixedFormat = class {
  constructor(constructorGuard, signed, width, decimals) {
    if (constructorGuard !== _constructorGuard2) {
      logger3.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.signed = signed;
    this.width = width;
    this.decimals = decimals;
    this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
    this._multiplier = getMultiplier(decimals);
    Object.freeze(this);
  }
  static from(value) {
    if (value instanceof FixedFormat) {
      return value;
    }
    if (typeof value === "number") {
      value = `fixed128x${value}`;
    }
    let signed = true;
    let width = 128;
    let decimals = 18;
    if (typeof value === "string") {
      if (value === "fixed") {
      } else if (value === "ufixed") {
        signed = false;
      } else {
        const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
        if (!match) {
          logger3.throwArgumentError("invalid fixed format", "format", value);
        }
        signed = match[1] !== "u";
        width = parseInt(match[2]);
        decimals = parseInt(match[3]);
      }
    } else if (value) {
      const check = (key2, type, defaultValue) => {
        if (value[key2] == null) {
          return defaultValue;
        }
        if (typeof value[key2] !== type) {
          logger3.throwArgumentError("invalid fixed format (" + key2 + " not " + type + ")", "format." + key2, value[key2]);
        }
        return value[key2];
      };
      signed = check("signed", "boolean", signed);
      width = check("width", "number", width);
      decimals = check("decimals", "number", decimals);
    }
    if (width % 8) {
      logger3.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
    }
    if (decimals > 80) {
      logger3.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
    }
    return new FixedFormat(_constructorGuard2, signed, width, decimals);
  }
};
var FixedNumber = class {
  constructor(constructorGuard, hex2, value, format) {
    logger3.checkNew(new.target, FixedNumber);
    if (constructorGuard !== _constructorGuard2) {
      logger3.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.format = format;
    this._hex = hex2;
    this._value = value;
    this._isFixedNumber = true;
    Object.freeze(this);
  }
  _checkFormat(other) {
    if (this.format.name !== other.format.name) {
      logger3.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
    }
  }
  addUnsafe(other) {
    this._checkFormat(other);
    const a3 = parseFixed(this._value, this.format.decimals);
    const b3 = parseFixed(other._value, other.format.decimals);
    return FixedNumber.fromValue(a3.add(b3), this.format.decimals, this.format);
  }
  subUnsafe(other) {
    this._checkFormat(other);
    const a3 = parseFixed(this._value, this.format.decimals);
    const b3 = parseFixed(other._value, other.format.decimals);
    return FixedNumber.fromValue(a3.sub(b3), this.format.decimals, this.format);
  }
  mulUnsafe(other) {
    this._checkFormat(other);
    const a3 = parseFixed(this._value, this.format.decimals);
    const b3 = parseFixed(other._value, other.format.decimals);
    return FixedNumber.fromValue(a3.mul(b3).div(this.format._multiplier), this.format.decimals, this.format);
  }
  divUnsafe(other) {
    this._checkFormat(other);
    const a3 = parseFixed(this._value, this.format.decimals);
    const b3 = parseFixed(other._value, other.format.decimals);
    return FixedNumber.fromValue(a3.mul(this.format._multiplier).div(b3), this.format.decimals, this.format);
  }
  floor() {
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    let result = FixedNumber.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);
    if (this.isNegative() && hasFraction) {
      result = result.subUnsafe(ONE.toFormat(result.format));
    }
    return result;
  }
  ceiling() {
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    let result = FixedNumber.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);
    if (!this.isNegative() && hasFraction) {
      result = result.addUnsafe(ONE.toFormat(result.format));
    }
    return result;
  }
  round(decimals) {
    if (decimals == null) {
      decimals = 0;
    }
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    if (decimals < 0 || decimals > 80 || decimals % 1) {
      logger3.throwArgumentError("invalid decimal count", "decimals", decimals);
    }
    if (comps[1].length <= decimals) {
      return this;
    }
    const factor = FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
    const bump = BUMP.toFormat(this.format);
    return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
  }
  isZero() {
    return this._value === "0.0" || this._value === "0";
  }
  isNegative() {
    return this._value[0] === "-";
  }
  toString() {
    return this._value;
  }
  toHexString(width) {
    if (width == null) {
      return this._hex;
    }
    if (width % 8) {
      logger3.throwArgumentError("invalid byte width", "width", width);
    }
    const hex2 = BigNumber3.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
    return hexZeroPad(hex2, width / 8);
  }
  toUnsafeFloat() {
    return parseFloat(this.toString());
  }
  toFormat(format) {
    return FixedNumber.fromString(this._value, format);
  }
  static fromValue(value, decimals, format) {
    if (format == null && decimals != null && !isBigNumberish(decimals)) {
      format = decimals;
      decimals = null;
    }
    if (decimals == null) {
      decimals = 0;
    }
    if (format == null) {
      format = "fixed";
    }
    return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
  }
  static fromString(value, format) {
    if (format == null) {
      format = "fixed";
    }
    const fixedFormat = FixedFormat.from(format);
    const numeric = parseFixed(value, fixedFormat.decimals);
    if (!fixedFormat.signed && numeric.lt(Zero)) {
      throwFault2("unsigned value cannot be negative", "overflow", "value", value);
    }
    let hex2 = null;
    if (fixedFormat.signed) {
      hex2 = numeric.toTwos(fixedFormat.width).toHexString();
    } else {
      hex2 = numeric.toHexString();
      hex2 = hexZeroPad(hex2, fixedFormat.width / 8);
    }
    const decimal = formatFixed(numeric, fixedFormat.decimals);
    return new FixedNumber(_constructorGuard2, hex2, decimal, fixedFormat);
  }
  static fromBytes(value, format) {
    if (format == null) {
      format = "fixed";
    }
    const fixedFormat = FixedFormat.from(format);
    if (arrayify(value).length > fixedFormat.width / 8) {
      throw new Error("overflow");
    }
    let numeric = BigNumber3.from(value);
    if (fixedFormat.signed) {
      numeric = numeric.fromTwos(fixedFormat.width);
    }
    const hex2 = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
    const decimal = formatFixed(numeric, fixedFormat.decimals);
    return new FixedNumber(_constructorGuard2, hex2, decimal, fixedFormat);
  }
  static from(value, format) {
    if (typeof value === "string") {
      return FixedNumber.fromString(value, format);
    }
    if (isBytes(value)) {
      return FixedNumber.fromBytes(value, format);
    }
    try {
      return FixedNumber.fromValue(value, 0, format);
    } catch (error) {
      if (error.code !== Logger.errors.INVALID_ARGUMENT) {
        throw error;
      }
    }
    return logger3.throwArgumentError("invalid FixedNumber value", "value", value);
  }
  static isFixedNumber(value) {
    return !!(value && value._isFixedNumber);
  }
};
var ONE = FixedNumber.from(1);
var BUMP = FixedNumber.from("0.5");

// node_modules/@ethersproject/properties/lib.esm/_version.js
var version4 = "properties/5.6.0";

// node_modules/@ethersproject/properties/lib.esm/index.js
"use strict";
var __awaiter = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e4) {
        reject(e4);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e4) {
        reject(e4);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger4 = new Logger(version4);
function defineReadOnly(object, name2, value) {
  Object.defineProperty(object, name2, {
    enumerable: true,
    value,
    writable: false
  });
}
function getStatic(ctor, key2) {
  for (let i3 = 0; i3 < 32; i3++) {
    if (ctor[key2]) {
      return ctor[key2];
    }
    if (!ctor.prototype || typeof ctor.prototype !== "object") {
      break;
    }
    ctor = Object.getPrototypeOf(ctor.prototype).constructor;
  }
  return null;
}
function resolveProperties(object) {
  return __awaiter(this, void 0, void 0, function* () {
    const promises = Object.keys(object).map((key2) => {
      const value = object[key2];
      return Promise.resolve(value).then((v3) => ({ key: key2, value: v3 }));
    });
    const results = yield Promise.all(promises);
    return results.reduce((accum, result) => {
      accum[result.key] = result.value;
      return accum;
    }, {});
  });
}
function checkProperties(object, properties) {
  if (!object || typeof object !== "object") {
    logger4.throwArgumentError("invalid object", "object", object);
  }
  Object.keys(object).forEach((key2) => {
    if (!properties[key2]) {
      logger4.throwArgumentError("invalid object key - " + key2, "transaction:" + key2, object);
    }
  });
}
function shallowCopy(object) {
  const result = {};
  for (const key2 in object) {
    result[key2] = object[key2];
  }
  return result;
}
var opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
function _isFrozen(object) {
  if (object === void 0 || object === null || opaque[typeof object]) {
    return true;
  }
  if (Array.isArray(object) || typeof object === "object") {
    if (!Object.isFrozen(object)) {
      return false;
    }
    const keys = Object.keys(object);
    for (let i3 = 0; i3 < keys.length; i3++) {
      let value = null;
      try {
        value = object[keys[i3]];
      } catch (error) {
        continue;
      }
      if (!_isFrozen(value)) {
        return false;
      }
    }
    return true;
  }
  return logger4.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
function _deepCopy(object) {
  if (_isFrozen(object)) {
    return object;
  }
  if (Array.isArray(object)) {
    return Object.freeze(object.map((item) => deepCopy(item)));
  }
  if (typeof object === "object") {
    const result = {};
    for (const key2 in object) {
      const value = object[key2];
      if (value === void 0) {
        continue;
      }
      defineReadOnly(result, key2, deepCopy(value));
    }
    return result;
  }
  return logger4.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
function deepCopy(object) {
  return _deepCopy(object);
}
var Description = class {
  constructor(info) {
    for (const key2 in info) {
      this[key2] = deepCopy(info[key2]);
    }
  }
};

// node_modules/@ethersproject/abi/lib.esm/_version.js
var version5 = "abi/5.6.0";

// node_modules/@ethersproject/abi/lib.esm/fragments.js
"use strict";
var logger5 = new Logger(version5);
var _constructorGuard3 = {};
var ModifiersBytes = { calldata: true, memory: true, storage: true };
var ModifiersNest = { calldata: true, memory: true };
function checkModifier(type, name2) {
  if (type === "bytes" || type === "string") {
    if (ModifiersBytes[name2]) {
      return true;
    }
  } else if (type === "address") {
    if (name2 === "payable") {
      return true;
    }
  } else if (type.indexOf("[") >= 0 || type === "tuple") {
    if (ModifiersNest[name2]) {
      return true;
    }
  }
  if (ModifiersBytes[name2] || name2 === "payable") {
    logger5.throwArgumentError("invalid modifier", "name", name2);
  }
  return false;
}
function parseParamType(param, allowIndexed) {
  let originalParam = param;
  function throwError(i3) {
    logger5.throwArgumentError(`unexpected character at position ${i3}`, "param", param);
  }
  param = param.replace(/\s/g, " ");
  function newNode(parent2) {
    let node2 = { type: "", name: "", parent: parent2, state: { allowType: true } };
    if (allowIndexed) {
      node2.indexed = false;
    }
    return node2;
  }
  let parent = { type: "", name: "", state: { allowType: true } };
  let node = parent;
  for (let i3 = 0; i3 < param.length; i3++) {
    let c5 = param[i3];
    switch (c5) {
      case "(":
        if (node.state.allowType && node.type === "") {
          node.type = "tuple";
        } else if (!node.state.allowParams) {
          throwError(i3);
        }
        node.state.allowType = false;
        node.type = verifyType(node.type);
        node.components = [newNode(node)];
        node = node.components[0];
        break;
      case ")":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i3);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        let child = node;
        node = node.parent;
        if (!node) {
          throwError(i3);
        }
        delete child.parent;
        node.state.allowParams = false;
        node.state.allowName = true;
        node.state.allowArray = true;
        break;
      case ",":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i3);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        let sibling = newNode(node.parent);
        node.parent.components.push(sibling);
        delete node.parent;
        node = sibling;
        break;
      case " ":
        if (node.state.allowType) {
          if (node.type !== "") {
            node.type = verifyType(node.type);
            delete node.state.allowType;
            node.state.allowName = true;
            node.state.allowParams = true;
          }
        }
        if (node.state.allowName) {
          if (node.name !== "") {
            if (node.name === "indexed") {
              if (!allowIndexed) {
                throwError(i3);
              }
              if (node.indexed) {
                throwError(i3);
              }
              node.indexed = true;
              node.name = "";
            } else if (checkModifier(node.type, node.name)) {
              node.name = "";
            } else {
              node.state.allowName = false;
            }
          }
        }
        break;
      case "[":
        if (!node.state.allowArray) {
          throwError(i3);
        }
        node.type += c5;
        node.state.allowArray = false;
        node.state.allowName = false;
        node.state.readArray = true;
        break;
      case "]":
        if (!node.state.readArray) {
          throwError(i3);
        }
        node.type += c5;
        node.state.readArray = false;
        node.state.allowArray = true;
        node.state.allowName = true;
        break;
      default:
        if (node.state.allowType) {
          node.type += c5;
          node.state.allowParams = true;
          node.state.allowArray = true;
        } else if (node.state.allowName) {
          node.name += c5;
          delete node.state.allowArray;
        } else if (node.state.readArray) {
          node.type += c5;
        } else {
          throwError(i3);
        }
    }
  }
  if (node.parent) {
    logger5.throwArgumentError("unexpected eof", "param", param);
  }
  delete parent.state;
  if (node.name === "indexed") {
    if (!allowIndexed) {
      throwError(originalParam.length - 7);
    }
    if (node.indexed) {
      throwError(originalParam.length - 7);
    }
    node.indexed = true;
    node.name = "";
  } else if (checkModifier(node.type, node.name)) {
    node.name = "";
  }
  parent.type = verifyType(parent.type);
  return parent;
}
function populate(object, params) {
  for (let key2 in params) {
    defineReadOnly(object, key2, params[key2]);
  }
}
var FormatTypes = Object.freeze({
  sighash: "sighash",
  minimal: "minimal",
  full: "full",
  json: "json"
});
var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
var ParamType = class {
  constructor(constructorGuard, params) {
    if (constructorGuard !== _constructorGuard3) {
      logger5.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new ParamType()"
      });
    }
    populate(this, params);
    let match = this.type.match(paramTypeArray);
    if (match) {
      populate(this, {
        arrayLength: parseInt(match[2] || "-1"),
        arrayChildren: ParamType.fromObject({
          type: match[1],
          components: this.components
        }),
        baseType: "array"
      });
    } else {
      populate(this, {
        arrayLength: null,
        arrayChildren: null,
        baseType: this.components != null ? "tuple" : this.type
      });
    }
    this._isParamType = true;
    Object.freeze(this);
  }
  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }
    if (!FormatTypes[format]) {
      logger5.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes.json) {
      let result2 = {
        type: this.baseType === "tuple" ? "tuple" : this.type,
        name: this.name || void 0
      };
      if (typeof this.indexed === "boolean") {
        result2.indexed = this.indexed;
      }
      if (this.components) {
        result2.components = this.components.map((comp) => JSON.parse(comp.format(format)));
      }
      return JSON.stringify(result2);
    }
    let result = "";
    if (this.baseType === "array") {
      result += this.arrayChildren.format(format);
      result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
    } else {
      if (this.baseType === "tuple") {
        if (format !== FormatTypes.sighash) {
          result += this.type;
        }
        result += "(" + this.components.map((comp) => comp.format(format)).join(format === FormatTypes.full ? ", " : ",") + ")";
      } else {
        result += this.type;
      }
    }
    if (format !== FormatTypes.sighash) {
      if (this.indexed === true) {
        result += " indexed";
      }
      if (format === FormatTypes.full && this.name) {
        result += " " + this.name;
      }
    }
    return result;
  }
  static from(value, allowIndexed) {
    if (typeof value === "string") {
      return ParamType.fromString(value, allowIndexed);
    }
    return ParamType.fromObject(value);
  }
  static fromObject(value) {
    if (ParamType.isParamType(value)) {
      return value;
    }
    return new ParamType(_constructorGuard3, {
      name: value.name || null,
      type: verifyType(value.type),
      indexed: value.indexed == null ? null : !!value.indexed,
      components: value.components ? value.components.map(ParamType.fromObject) : null
    });
  }
  static fromString(value, allowIndexed) {
    function ParamTypify(node) {
      return ParamType.fromObject({
        name: node.name,
        type: node.type,
        indexed: node.indexed,
        components: node.components
      });
    }
    return ParamTypify(parseParamType(value, !!allowIndexed));
  }
  static isParamType(value) {
    return !!(value != null && value._isParamType);
  }
};
function parseParams(value, allowIndex) {
  return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
}
var Fragment = class {
  constructor(constructorGuard, params) {
    if (constructorGuard !== _constructorGuard3) {
      logger5.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new Fragment()"
      });
    }
    populate(this, params);
    this._isFragment = true;
    Object.freeze(this);
  }
  static from(value) {
    if (Fragment.isFragment(value)) {
      return value;
    }
    if (typeof value === "string") {
      return Fragment.fromString(value);
    }
    return Fragment.fromObject(value);
  }
  static fromObject(value) {
    if (Fragment.isFragment(value)) {
      return value;
    }
    switch (value.type) {
      case "function":
        return FunctionFragment.fromObject(value);
      case "event":
        return EventFragment.fromObject(value);
      case "constructor":
        return ConstructorFragment.fromObject(value);
      case "error":
        return ErrorFragment.fromObject(value);
      case "fallback":
      case "receive":
        return null;
    }
    return logger5.throwArgumentError("invalid fragment object", "value", value);
  }
  static fromString(value) {
    value = value.replace(/\s/g, " ");
    value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
    value = value.trim();
    if (value.split(" ")[0] === "event") {
      return EventFragment.fromString(value.substring(5).trim());
    } else if (value.split(" ")[0] === "function") {
      return FunctionFragment.fromString(value.substring(8).trim());
    } else if (value.split("(")[0].trim() === "constructor") {
      return ConstructorFragment.fromString(value.trim());
    } else if (value.split(" ")[0] === "error") {
      return ErrorFragment.fromString(value.substring(5).trim());
    }
    return logger5.throwArgumentError("unsupported fragment", "value", value);
  }
  static isFragment(value) {
    return !!(value && value._isFragment);
  }
};
var EventFragment = class extends Fragment {
  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }
    if (!FormatTypes[format]) {
      logger5.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes.json) {
      return JSON.stringify({
        type: "event",
        anonymous: this.anonymous,
        name: this.name,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
      });
    }
    let result = "";
    if (format !== FormatTypes.sighash) {
      result += "event ";
    }
    result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
    if (format !== FormatTypes.sighash) {
      if (this.anonymous) {
        result += "anonymous ";
      }
    }
    return result.trim();
  }
  static from(value) {
    if (typeof value === "string") {
      return EventFragment.fromString(value);
    }
    return EventFragment.fromObject(value);
  }
  static fromObject(value) {
    if (EventFragment.isEventFragment(value)) {
      return value;
    }
    if (value.type !== "event") {
      logger5.throwArgumentError("invalid event object", "value", value);
    }
    const params = {
      name: verifyIdentifier(value.name),
      anonymous: value.anonymous,
      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
      type: "event"
    };
    return new EventFragment(_constructorGuard3, params);
  }
  static fromString(value) {
    let match = value.match(regexParen);
    if (!match) {
      logger5.throwArgumentError("invalid event string", "value", value);
    }
    let anonymous = false;
    match[3].split(" ").forEach((modifier) => {
      switch (modifier.trim()) {
        case "anonymous":
          anonymous = true;
          break;
        case "":
          break;
        default:
          logger5.warn("unknown modifier: " + modifier);
      }
    });
    return EventFragment.fromObject({
      name: match[1].trim(),
      anonymous,
      inputs: parseParams(match[2], true),
      type: "event"
    });
  }
  static isEventFragment(value) {
    return value && value._isFragment && value.type === "event";
  }
};
function parseGas(value, params) {
  params.gas = null;
  let comps = value.split("@");
  if (comps.length !== 1) {
    if (comps.length > 2) {
      logger5.throwArgumentError("invalid human-readable ABI signature", "value", value);
    }
    if (!comps[1].match(/^[0-9]+$/)) {
      logger5.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
    }
    params.gas = BigNumber3.from(comps[1]);
    return comps[0];
  }
  return value;
}
function parseModifiers(value, params) {
  params.constant = false;
  params.payable = false;
  params.stateMutability = "nonpayable";
  value.split(" ").forEach((modifier) => {
    switch (modifier.trim()) {
      case "constant":
        params.constant = true;
        break;
      case "payable":
        params.payable = true;
        params.stateMutability = "payable";
        break;
      case "nonpayable":
        params.payable = false;
        params.stateMutability = "nonpayable";
        break;
      case "pure":
        params.constant = true;
        params.stateMutability = "pure";
        break;
      case "view":
        params.constant = true;
        params.stateMutability = "view";
        break;
      case "external":
      case "public":
      case "":
        break;
      default:
        console.log("unknown modifier: " + modifier);
    }
  });
}
function verifyState(value) {
  let result = {
    constant: false,
    payable: true,
    stateMutability: "payable"
  };
  if (value.stateMutability != null) {
    result.stateMutability = value.stateMutability;
    result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
    if (value.constant != null) {
      if (!!value.constant !== result.constant) {
        logger5.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
      }
    }
    result.payable = result.stateMutability === "payable";
    if (value.payable != null) {
      if (!!value.payable !== result.payable) {
        logger5.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
      }
    }
  } else if (value.payable != null) {
    result.payable = !!value.payable;
    if (value.constant == null && !result.payable && value.type !== "constructor") {
      logger5.throwArgumentError("unable to determine stateMutability", "value", value);
    }
    result.constant = !!value.constant;
    if (result.constant) {
      result.stateMutability = "view";
    } else {
      result.stateMutability = result.payable ? "payable" : "nonpayable";
    }
    if (result.payable && result.constant) {
      logger5.throwArgumentError("cannot have constant payable function", "value", value);
    }
  } else if (value.constant != null) {
    result.constant = !!value.constant;
    result.payable = !result.constant;
    result.stateMutability = result.constant ? "view" : "payable";
  } else if (value.type !== "constructor") {
    logger5.throwArgumentError("unable to determine stateMutability", "value", value);
  }
  return result;
}
var ConstructorFragment = class extends Fragment {
  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }
    if (!FormatTypes[format]) {
      logger5.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes.json) {
      return JSON.stringify({
        type: "constructor",
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
        payable: this.payable,
        gas: this.gas ? this.gas.toNumber() : void 0,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
      });
    }
    if (format === FormatTypes.sighash) {
      logger5.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "format(sighash)"
      });
    }
    let result = "constructor(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
    if (this.stateMutability && this.stateMutability !== "nonpayable") {
      result += this.stateMutability + " ";
    }
    return result.trim();
  }
  static from(value) {
    if (typeof value === "string") {
      return ConstructorFragment.fromString(value);
    }
    return ConstructorFragment.fromObject(value);
  }
  static fromObject(value) {
    if (ConstructorFragment.isConstructorFragment(value)) {
      return value;
    }
    if (value.type !== "constructor") {
      logger5.throwArgumentError("invalid constructor object", "value", value);
    }
    let state = verifyState(value);
    if (state.constant) {
      logger5.throwArgumentError("constructor cannot be constant", "value", value);
    }
    const params = {
      name: null,
      type: value.type,
      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
      payable: state.payable,
      stateMutability: state.stateMutability,
      gas: value.gas ? BigNumber3.from(value.gas) : null
    };
    return new ConstructorFragment(_constructorGuard3, params);
  }
  static fromString(value) {
    let params = { type: "constructor" };
    value = parseGas(value, params);
    let parens = value.match(regexParen);
    if (!parens || parens[1].trim() !== "constructor") {
      logger5.throwArgumentError("invalid constructor string", "value", value);
    }
    params.inputs = parseParams(parens[2].trim(), false);
    parseModifiers(parens[3].trim(), params);
    return ConstructorFragment.fromObject(params);
  }
  static isConstructorFragment(value) {
    return value && value._isFragment && value.type === "constructor";
  }
};
var FunctionFragment = class extends ConstructorFragment {
  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }
    if (!FormatTypes[format]) {
      logger5.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes.json) {
      return JSON.stringify({
        type: "function",
        name: this.name,
        constant: this.constant,
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
        payable: this.payable,
        gas: this.gas ? this.gas.toNumber() : void 0,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
        outputs: this.outputs.map((output) => JSON.parse(output.format(format)))
      });
    }
    let result = "";
    if (format !== FormatTypes.sighash) {
      result += "function ";
    }
    result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
    if (format !== FormatTypes.sighash) {
      if (this.stateMutability) {
        if (this.stateMutability !== "nonpayable") {
          result += this.stateMutability + " ";
        }
      } else if (this.constant) {
        result += "view ";
      }
      if (this.outputs && this.outputs.length) {
        result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
      }
      if (this.gas != null) {
        result += "@" + this.gas.toString() + " ";
      }
    }
    return result.trim();
  }
  static from(value) {
    if (typeof value === "string") {
      return FunctionFragment.fromString(value);
    }
    return FunctionFragment.fromObject(value);
  }
  static fromObject(value) {
    if (FunctionFragment.isFunctionFragment(value)) {
      return value;
    }
    if (value.type !== "function") {
      logger5.throwArgumentError("invalid function object", "value", value);
    }
    let state = verifyState(value);
    const params = {
      type: value.type,
      name: verifyIdentifier(value.name),
      constant: state.constant,
      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
      outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],
      payable: state.payable,
      stateMutability: state.stateMutability,
      gas: value.gas ? BigNumber3.from(value.gas) : null
    };
    return new FunctionFragment(_constructorGuard3, params);
  }
  static fromString(value) {
    let params = { type: "function" };
    value = parseGas(value, params);
    let comps = value.split(" returns ");
    if (comps.length > 2) {
      logger5.throwArgumentError("invalid function string", "value", value);
    }
    let parens = comps[0].match(regexParen);
    if (!parens) {
      logger5.throwArgumentError("invalid function signature", "value", value);
    }
    params.name = parens[1].trim();
    if (params.name) {
      verifyIdentifier(params.name);
    }
    params.inputs = parseParams(parens[2], false);
    parseModifiers(parens[3].trim(), params);
    if (comps.length > 1) {
      let returns = comps[1].match(regexParen);
      if (returns[1].trim() != "" || returns[3].trim() != "") {
        logger5.throwArgumentError("unexpected tokens", "value", value);
      }
      params.outputs = parseParams(returns[2], false);
    } else {
      params.outputs = [];
    }
    return FunctionFragment.fromObject(params);
  }
  static isFunctionFragment(value) {
    return value && value._isFragment && value.type === "function";
  }
};
function checkForbidden(fragment) {
  const sig = fragment.format();
  if (sig === "Error(string)" || sig === "Panic(uint256)") {
    logger5.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
  }
  return fragment;
}
var ErrorFragment = class extends Fragment {
  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }
    if (!FormatTypes[format]) {
      logger5.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes.json) {
      return JSON.stringify({
        type: "error",
        name: this.name,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
      });
    }
    let result = "";
    if (format !== FormatTypes.sighash) {
      result += "error ";
    }
    result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
    return result.trim();
  }
  static from(value) {
    if (typeof value === "string") {
      return ErrorFragment.fromString(value);
    }
    return ErrorFragment.fromObject(value);
  }
  static fromObject(value) {
    if (ErrorFragment.isErrorFragment(value)) {
      return value;
    }
    if (value.type !== "error") {
      logger5.throwArgumentError("invalid error object", "value", value);
    }
    const params = {
      type: value.type,
      name: verifyIdentifier(value.name),
      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []
    };
    return checkForbidden(new ErrorFragment(_constructorGuard3, params));
  }
  static fromString(value) {
    let params = { type: "error" };
    let parens = value.match(regexParen);
    if (!parens) {
      logger5.throwArgumentError("invalid error signature", "value", value);
    }
    params.name = parens[1].trim();
    if (params.name) {
      verifyIdentifier(params.name);
    }
    params.inputs = parseParams(parens[2], false);
    return checkForbidden(ErrorFragment.fromObject(params));
  }
  static isErrorFragment(value) {
    return value && value._isFragment && value.type === "error";
  }
};
function verifyType(type) {
  if (type.match(/^uint($|[^1-9])/)) {
    type = "uint256" + type.substring(4);
  } else if (type.match(/^int($|[^1-9])/)) {
    type = "int256" + type.substring(3);
  }
  return type;
}
var regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
function verifyIdentifier(value) {
  if (!value || !value.match(regexIdentifier)) {
    logger5.throwArgumentError(`invalid identifier "${value}"`, "value", value);
  }
  return value;
}
var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
function splitNesting(value) {
  value = value.trim();
  let result = [];
  let accum = "";
  let depth = 0;
  for (let offset = 0; offset < value.length; offset++) {
    let c5 = value[offset];
    if (c5 === "," && depth === 0) {
      result.push(accum);
      accum = "";
    } else {
      accum += c5;
      if (c5 === "(") {
        depth++;
      } else if (c5 === ")") {
        depth--;
        if (depth === -1) {
          logger5.throwArgumentError("unbalanced parenthesis", "value", value);
        }
      }
    }
  }
  if (accum) {
    result.push(accum);
  }
  return result;
}

// node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js
"use strict";
var logger6 = new Logger(version5);
function checkResultErrors(result) {
  const errors = [];
  const checkErrors = function(path, object) {
    if (!Array.isArray(object)) {
      return;
    }
    for (let key2 in object) {
      const childPath = path.slice();
      childPath.push(key2);
      try {
        checkErrors(childPath, object[key2]);
      } catch (error) {
        errors.push({ path: childPath, error });
      }
    }
  };
  checkErrors([], result);
  return errors;
}
var Coder = class {
  constructor(name2, type, localName, dynamic) {
    this.name = name2;
    this.type = type;
    this.localName = localName;
    this.dynamic = dynamic;
  }
  _throwError(message, value) {
    logger6.throwArgumentError(message, this.localName, value);
  }
};
var Writer = class {
  constructor(wordSize) {
    defineReadOnly(this, "wordSize", wordSize || 32);
    this._data = [];
    this._dataLength = 0;
    this._padding = new Uint8Array(wordSize);
  }
  get data() {
    return hexConcat(this._data);
  }
  get length() {
    return this._dataLength;
  }
  _writeData(data) {
    this._data.push(data);
    this._dataLength += data.length;
    return data.length;
  }
  appendWriter(writer) {
    return this._writeData(concat2(writer._data));
  }
  writeBytes(value) {
    let bytes3 = arrayify(value);
    const paddingOffset = bytes3.length % this.wordSize;
    if (paddingOffset) {
      bytes3 = concat2([bytes3, this._padding.slice(paddingOffset)]);
    }
    return this._writeData(bytes3);
  }
  _getValue(value) {
    let bytes3 = arrayify(BigNumber3.from(value));
    if (bytes3.length > this.wordSize) {
      logger6.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
        length: this.wordSize,
        offset: bytes3.length
      });
    }
    if (bytes3.length % this.wordSize) {
      bytes3 = concat2([this._padding.slice(bytes3.length % this.wordSize), bytes3]);
    }
    return bytes3;
  }
  writeValue(value) {
    return this._writeData(this._getValue(value));
  }
  writeUpdatableValue() {
    const offset = this._data.length;
    this._data.push(this._padding);
    this._dataLength += this.wordSize;
    return (value) => {
      this._data[offset] = this._getValue(value);
    };
  }
};
var Reader = class {
  constructor(data, wordSize, coerceFunc, allowLoose) {
    defineReadOnly(this, "_data", arrayify(data));
    defineReadOnly(this, "wordSize", wordSize || 32);
    defineReadOnly(this, "_coerceFunc", coerceFunc);
    defineReadOnly(this, "allowLoose", allowLoose);
    this._offset = 0;
  }
  get data() {
    return hexlify(this._data);
  }
  get consumed() {
    return this._offset;
  }
  static coerce(name2, value) {
    let match = name2.match("^u?int([0-9]+)$");
    if (match && parseInt(match[1]) <= 48) {
      value = value.toNumber();
    }
    return value;
  }
  coerce(name2, value) {
    if (this._coerceFunc) {
      return this._coerceFunc(name2, value);
    }
    return Reader.coerce(name2, value);
  }
  _peekBytes(offset, length, loose) {
    let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
    if (this._offset + alignedLength > this._data.length) {
      if (this.allowLoose && loose && this._offset + length <= this._data.length) {
        alignedLength = length;
      } else {
        logger6.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
          length: this._data.length,
          offset: this._offset + alignedLength
        });
      }
    }
    return this._data.slice(this._offset, this._offset + alignedLength);
  }
  subReader(offset) {
    return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
  }
  readBytes(length, loose) {
    let bytes3 = this._peekBytes(0, length, !!loose);
    this._offset += bytes3.length;
    return bytes3.slice(0, length);
  }
  readValue() {
    return BigNumber3.from(this.readBytes(this.wordSize));
  }
};

// node_modules/@ethersproject/keccak256/lib.esm/index.js
var import_js_sha3 = __toModule(require_sha3());
"use strict";
function keccak256(data) {
  return "0x" + import_js_sha3.default.keccak_256(arrayify(data));
}

// node_modules/@ethersproject/rlp/lib.esm/index.js
var lib_exports = {};
__export(lib_exports, {
  decode: () => decode,
  encode: () => encode
});

// node_modules/@ethersproject/rlp/lib.esm/_version.js
var version6 = "rlp/5.6.0";

// node_modules/@ethersproject/rlp/lib.esm/index.js
"use strict";
var logger7 = new Logger(version6);
function arrayifyInteger(value) {
  const result = [];
  while (value) {
    result.unshift(value & 255);
    value >>= 8;
  }
  return result;
}
function unarrayifyInteger(data, offset, length) {
  let result = 0;
  for (let i3 = 0; i3 < length; i3++) {
    result = result * 256 + data[offset + i3];
  }
  return result;
}
function _encode(object) {
  if (Array.isArray(object)) {
    let payload = [];
    object.forEach(function(child) {
      payload = payload.concat(_encode(child));
    });
    if (payload.length <= 55) {
      payload.unshift(192 + payload.length);
      return payload;
    }
    const length2 = arrayifyInteger(payload.length);
    length2.unshift(247 + length2.length);
    return length2.concat(payload);
  }
  if (!isBytesLike(object)) {
    logger7.throwArgumentError("RLP object must be BytesLike", "object", object);
  }
  const data = Array.prototype.slice.call(arrayify(object));
  if (data.length === 1 && data[0] <= 127) {
    return data;
  } else if (data.length <= 55) {
    data.unshift(128 + data.length);
    return data;
  }
  const length = arrayifyInteger(data.length);
  length.unshift(183 + length.length);
  return length.concat(data);
}
function encode(object) {
  return hexlify(_encode(object));
}
function _decodeChildren(data, offset, childOffset, length) {
  const result = [];
  while (childOffset < offset + 1 + length) {
    const decoded = _decode(data, childOffset);
    result.push(decoded.result);
    childOffset += decoded.consumed;
    if (childOffset > offset + 1 + length) {
      logger7.throwError("child data too short", Logger.errors.BUFFER_OVERRUN, {});
    }
  }
  return { consumed: 1 + length, result };
}
function _decode(data, offset) {
  if (data.length === 0) {
    logger7.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
  }
  if (data[offset] >= 248) {
    const lengthLength = data[offset] - 247;
    if (offset + 1 + lengthLength > data.length) {
      logger7.throwError("data short segment too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const length = unarrayifyInteger(data, offset + 1, lengthLength);
    if (offset + 1 + lengthLength + length > data.length) {
      logger7.throwError("data long segment too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
  } else if (data[offset] >= 192) {
    const length = data[offset] - 192;
    if (offset + 1 + length > data.length) {
      logger7.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    return _decodeChildren(data, offset, offset + 1, length);
  } else if (data[offset] >= 184) {
    const lengthLength = data[offset] - 183;
    if (offset + 1 + lengthLength > data.length) {
      logger7.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const length = unarrayifyInteger(data, offset + 1, lengthLength);
    if (offset + 1 + lengthLength + length > data.length) {
      logger7.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
    return { consumed: 1 + lengthLength + length, result };
  } else if (data[offset] >= 128) {
    const length = data[offset] - 128;
    if (offset + 1 + length > data.length) {
      logger7.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const result = hexlify(data.slice(offset + 1, offset + 1 + length));
    return { consumed: 1 + length, result };
  }
  return { consumed: 1, result: hexlify(data[offset]) };
}
function decode(data) {
  const bytes3 = arrayify(data);
  const decoded = _decode(bytes3, 0);
  if (decoded.consumed !== bytes3.length) {
    logger7.throwArgumentError("invalid rlp data", "data", data);
  }
  return decoded.result;
}

// node_modules/@ethersproject/address/lib.esm/_version.js
var version7 = "address/5.6.0";

// node_modules/@ethersproject/address/lib.esm/index.js
"use strict";
var logger8 = new Logger(version7);
function getChecksumAddress(address) {
  if (!isHexString(address, 20)) {
    logger8.throwArgumentError("invalid address", "address", address);
  }
  address = address.toLowerCase();
  const chars = address.substring(2).split("");
  const expanded = new Uint8Array(40);
  for (let i3 = 0; i3 < 40; i3++) {
    expanded[i3] = chars[i3].charCodeAt(0);
  }
  const hashed = arrayify(keccak256(expanded));
  for (let i3 = 0; i3 < 40; i3 += 2) {
    if (hashed[i3 >> 1] >> 4 >= 8) {
      chars[i3] = chars[i3].toUpperCase();
    }
    if ((hashed[i3 >> 1] & 15) >= 8) {
      chars[i3 + 1] = chars[i3 + 1].toUpperCase();
    }
  }
  return "0x" + chars.join("");
}
var MAX_SAFE_INTEGER = 9007199254740991;
function log10(x3) {
  if (Math.log10) {
    return Math.log10(x3);
  }
  return Math.log(x3) / Math.LN10;
}
var ibanLookup = {};
for (let i3 = 0; i3 < 10; i3++) {
  ibanLookup[String(i3)] = String(i3);
}
for (let i3 = 0; i3 < 26; i3++) {
  ibanLookup[String.fromCharCode(65 + i3)] = String(10 + i3);
}
var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
function ibanChecksum(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  let expanded = address.split("").map((c5) => {
    return ibanLookup[c5];
  }).join("");
  while (expanded.length >= safeDigits) {
    let block = expanded.substring(0, safeDigits);
    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
  }
  let checksum = String(98 - parseInt(expanded, 10) % 97);
  while (checksum.length < 2) {
    checksum = "0" + checksum;
  }
  return checksum;
}
function getAddress(address) {
  let result = null;
  if (typeof address !== "string") {
    logger8.throwArgumentError("invalid address", "address", address);
  }
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    if (address.substring(0, 2) !== "0x") {
      address = "0x" + address;
    }
    result = getChecksumAddress(address);
    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
      logger8.throwArgumentError("bad address checksum", "address", address);
    }
  } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    if (address.substring(2, 4) !== ibanChecksum(address)) {
      logger8.throwArgumentError("bad icap checksum", "address", address);
    }
    result = _base36To16(address.substring(4));
    while (result.length < 40) {
      result = "0" + result;
    }
    result = getChecksumAddress("0x" + result);
  } else {
    logger8.throwArgumentError("invalid address", "address", address);
  }
  return result;
}
function isAddress(address) {
  try {
    getAddress(address);
    return true;
  } catch (error) {
  }
  return false;
}
function getIcapAddress(address) {
  let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
  while (base36.length < 30) {
    base36 = "0" + base36;
  }
  return "XE" + ibanChecksum("XE00" + base36) + base36;
}
function getContractAddress(transaction) {
  let from2 = null;
  try {
    from2 = getAddress(transaction.from);
  } catch (error) {
    logger8.throwArgumentError("missing from address", "transaction", transaction);
  }
  const nonce = stripZeros(arrayify(BigNumber3.from(transaction.nonce).toHexString()));
  return getAddress(hexDataSlice(keccak256(encode([from2, nonce])), 12));
}
function getCreate2Address(from2, salt, initCodeHash) {
  if (hexDataLength(salt) !== 32) {
    logger8.throwArgumentError("salt must be 32 bytes", "salt", salt);
  }
  if (hexDataLength(initCodeHash) !== 32) {
    logger8.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
  }
  return getAddress(hexDataSlice(keccak256(concat2(["0xff", getAddress(from2), salt, initCodeHash])), 12));
}

// node_modules/@ethersproject/abi/lib.esm/coders/address.js
"use strict";
var AddressCoder = class extends Coder {
  constructor(localName) {
    super("address", "address", localName, false);
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000";
  }
  encode(writer, value) {
    try {
      value = getAddress(value);
    } catch (error) {
      this._throwError(error.message, value);
    }
    return writer.writeValue(value);
  }
  decode(reader) {
    return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js
"use strict";
var AnonymousCoder = class extends Coder {
  constructor(coder) {
    super(coder.name, coder.type, void 0, coder.dynamic);
    this.coder = coder;
  }
  defaultValue() {
    return this.coder.defaultValue();
  }
  encode(writer, value) {
    return this.coder.encode(writer, value);
  }
  decode(reader) {
    return this.coder.decode(reader);
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/array.js
"use strict";
var logger9 = new Logger(version5);
function pack(writer, coders, values) {
  let arrayValues = null;
  if (Array.isArray(values)) {
    arrayValues = values;
  } else if (values && typeof values === "object") {
    let unique = {};
    arrayValues = coders.map((coder) => {
      const name2 = coder.localName;
      if (!name2) {
        logger9.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      if (unique[name2]) {
        logger9.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      unique[name2] = true;
      return values[name2];
    });
  } else {
    logger9.throwArgumentError("invalid tuple value", "tuple", values);
  }
  if (coders.length !== arrayValues.length) {
    logger9.throwArgumentError("types/value length mismatch", "tuple", values);
  }
  let staticWriter = new Writer(writer.wordSize);
  let dynamicWriter = new Writer(writer.wordSize);
  let updateFuncs = [];
  coders.forEach((coder, index) => {
    let value = arrayValues[index];
    if (coder.dynamic) {
      let dynamicOffset = dynamicWriter.length;
      coder.encode(dynamicWriter, value);
      let updateFunc = staticWriter.writeUpdatableValue();
      updateFuncs.push((baseOffset) => {
        updateFunc(baseOffset + dynamicOffset);
      });
    } else {
      coder.encode(staticWriter, value);
    }
  });
  updateFuncs.forEach((func) => {
    func(staticWriter.length);
  });
  let length = writer.appendWriter(staticWriter);
  length += writer.appendWriter(dynamicWriter);
  return length;
}
function unpack(reader, coders) {
  let values = [];
  let baseReader = reader.subReader(0);
  coders.forEach((coder) => {
    let value = null;
    if (coder.dynamic) {
      let offset = reader.readValue();
      let offsetReader = baseReader.subReader(offset.toNumber());
      try {
        value = coder.decode(offsetReader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    } else {
      try {
        value = coder.decode(reader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    }
    if (value != void 0) {
      values.push(value);
    }
  });
  const uniqueNames = coders.reduce((accum, coder) => {
    const name2 = coder.localName;
    if (name2) {
      if (!accum[name2]) {
        accum[name2] = 0;
      }
      accum[name2]++;
    }
    return accum;
  }, {});
  coders.forEach((coder, index) => {
    let name2 = coder.localName;
    if (!name2 || uniqueNames[name2] !== 1) {
      return;
    }
    if (name2 === "length") {
      name2 = "_length";
    }
    if (values[name2] != null) {
      return;
    }
    const value = values[index];
    if (value instanceof Error) {
      Object.defineProperty(values, name2, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    } else {
      values[name2] = value;
    }
  });
  for (let i3 = 0; i3 < values.length; i3++) {
    const value = values[i3];
    if (value instanceof Error) {
      Object.defineProperty(values, i3, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    }
  }
  return Object.freeze(values);
}
var ArrayCoder = class extends Coder {
  constructor(coder, length, localName) {
    const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
    const dynamic = length === -1 || coder.dynamic;
    super("array", type, localName, dynamic);
    this.coder = coder;
    this.length = length;
  }
  defaultValue() {
    const defaultChild = this.coder.defaultValue();
    const result = [];
    for (let i3 = 0; i3 < this.length; i3++) {
      result.push(defaultChild);
    }
    return result;
  }
  encode(writer, value) {
    if (!Array.isArray(value)) {
      this._throwError("expected array value", value);
    }
    let count = this.length;
    if (count === -1) {
      count = value.length;
      writer.writeValue(value.length);
    }
    logger9.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
    let coders = [];
    for (let i3 = 0; i3 < value.length; i3++) {
      coders.push(this.coder);
    }
    return pack(writer, coders, value);
  }
  decode(reader) {
    let count = this.length;
    if (count === -1) {
      count = reader.readValue().toNumber();
      if (count * 32 > reader._data.length) {
        logger9.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
          length: reader._data.length,
          count
        });
      }
    }
    let coders = [];
    for (let i3 = 0; i3 < count; i3++) {
      coders.push(new AnonymousCoder(this.coder));
    }
    return reader.coerce(this.name, unpack(reader, coders));
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/boolean.js
"use strict";
var BooleanCoder = class extends Coder {
  constructor(localName) {
    super("bool", "bool", localName, false);
  }
  defaultValue() {
    return false;
  }
  encode(writer, value) {
    return writer.writeValue(value ? 1 : 0);
  }
  decode(reader) {
    return reader.coerce(this.type, !reader.readValue().isZero());
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/bytes.js
"use strict";
var DynamicBytesCoder = class extends Coder {
  constructor(type, localName) {
    super(type, type, localName, true);
  }
  defaultValue() {
    return "0x";
  }
  encode(writer, value) {
    value = arrayify(value);
    let length = writer.writeValue(value.length);
    length += writer.writeBytes(value);
    return length;
  }
  decode(reader) {
    return reader.readBytes(reader.readValue().toNumber(), true);
  }
};
var BytesCoder = class extends DynamicBytesCoder {
  constructor(localName) {
    super("bytes", localName);
  }
  decode(reader) {
    return reader.coerce(this.name, hexlify(super.decode(reader)));
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js
"use strict";
var FixedBytesCoder = class extends Coder {
  constructor(size, localName) {
    let name2 = "bytes" + String(size);
    super(name2, name2, localName, false);
    this.size = size;
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
  }
  encode(writer, value) {
    let data = arrayify(value);
    if (data.length !== this.size) {
      this._throwError("incorrect data length", value);
    }
    return writer.writeBytes(data);
  }
  decode(reader) {
    return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/null.js
"use strict";
var NullCoder = class extends Coder {
  constructor(localName) {
    super("null", "", localName, false);
  }
  defaultValue() {
    return null;
  }
  encode(writer, value) {
    if (value != null) {
      this._throwError("not null", value);
    }
    return writer.writeBytes([]);
  }
  decode(reader) {
    reader.readBytes(0);
    return reader.coerce(this.name, null);
  }
};

// node_modules/@ethersproject/constants/lib.esm/index.js
var lib_exports2 = {};
__export(lib_exports2, {
  AddressZero: () => AddressZero,
  EtherSymbol: () => EtherSymbol,
  HashZero: () => HashZero,
  MaxInt256: () => MaxInt256,
  MaxUint256: () => MaxUint256,
  MinInt256: () => MinInt256,
  NegativeOne: () => NegativeOne2,
  One: () => One,
  Two: () => Two,
  WeiPerEther: () => WeiPerEther,
  Zero: () => Zero2
});

// node_modules/@ethersproject/constants/lib.esm/addresses.js
var AddressZero = "0x0000000000000000000000000000000000000000";

// node_modules/@ethersproject/constants/lib.esm/bignumbers.js
var NegativeOne2 = /* @__PURE__ */ BigNumber3.from(-1);
var Zero2 = /* @__PURE__ */ BigNumber3.from(0);
var One = /* @__PURE__ */ BigNumber3.from(1);
var Two = /* @__PURE__ */ BigNumber3.from(2);
var WeiPerEther = /* @__PURE__ */ BigNumber3.from("1000000000000000000");
var MaxUint256 = /* @__PURE__ */ BigNumber3.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var MinInt256 = /* @__PURE__ */ BigNumber3.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
var MaxInt256 = /* @__PURE__ */ BigNumber3.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");

// node_modules/@ethersproject/constants/lib.esm/hashes.js
var HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";

// node_modules/@ethersproject/constants/lib.esm/strings.js
var EtherSymbol = "\u039E";

// node_modules/@ethersproject/constants/lib.esm/index.js
"use strict";

// node_modules/@ethersproject/abi/lib.esm/coders/number.js
"use strict";
var NumberCoder = class extends Coder {
  constructor(size, signed, localName) {
    const name2 = (signed ? "int" : "uint") + size * 8;
    super(name2, name2, localName, false);
    this.size = size;
    this.signed = signed;
  }
  defaultValue() {
    return 0;
  }
  encode(writer, value) {
    let v3 = BigNumber3.from(value);
    let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
    if (this.signed) {
      let bounds = maxUintValue.mask(this.size * 8 - 1);
      if (v3.gt(bounds) || v3.lt(bounds.add(One).mul(NegativeOne2))) {
        this._throwError("value out-of-bounds", value);
      }
    } else if (v3.lt(Zero2) || v3.gt(maxUintValue.mask(this.size * 8))) {
      this._throwError("value out-of-bounds", value);
    }
    v3 = v3.toTwos(this.size * 8).mask(this.size * 8);
    if (this.signed) {
      v3 = v3.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
    }
    return writer.writeValue(v3);
  }
  decode(reader) {
    let value = reader.readValue().mask(this.size * 8);
    if (this.signed) {
      value = value.fromTwos(this.size * 8);
    }
    return reader.coerce(this.name, value);
  }
};

// node_modules/@ethersproject/strings/lib.esm/_version.js
var version8 = "strings/5.6.0";

// node_modules/@ethersproject/strings/lib.esm/utf8.js
"use strict";
var logger10 = new Logger(version8);
var UnicodeNormalizationForm;
(function(UnicodeNormalizationForm2) {
  UnicodeNormalizationForm2["current"] = "";
  UnicodeNormalizationForm2["NFC"] = "NFC";
  UnicodeNormalizationForm2["NFD"] = "NFD";
  UnicodeNormalizationForm2["NFKC"] = "NFKC";
  UnicodeNormalizationForm2["NFKD"] = "NFKD";
})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
var Utf8ErrorReason;
(function(Utf8ErrorReason2) {
  Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
  Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
  Utf8ErrorReason2["OVERRUN"] = "string overrun";
  Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
  Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
  Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
  Utf8ErrorReason2["OVERLONG"] = "overlong representation";
})(Utf8ErrorReason || (Utf8ErrorReason = {}));
function errorFunc(reason, offset, bytes3, output, badCodepoint) {
  return logger10.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes3);
}
function ignoreFunc(reason, offset, bytes3, output, badCodepoint) {
  if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
    let i3 = 0;
    for (let o3 = offset + 1; o3 < bytes3.length; o3++) {
      if (bytes3[o3] >> 6 !== 2) {
        break;
      }
      i3++;
    }
    return i3;
  }
  if (reason === Utf8ErrorReason.OVERRUN) {
    return bytes3.length - offset - 1;
  }
  return 0;
}
function replaceFunc(reason, offset, bytes3, output, badCodepoint) {
  if (reason === Utf8ErrorReason.OVERLONG) {
    output.push(badCodepoint);
    return 0;
  }
  output.push(65533);
  return ignoreFunc(reason, offset, bytes3, output, badCodepoint);
}
var Utf8ErrorFuncs = Object.freeze({
  error: errorFunc,
  ignore: ignoreFunc,
  replace: replaceFunc
});
function getUtf8CodePoints(bytes3, onError) {
  if (onError == null) {
    onError = Utf8ErrorFuncs.error;
  }
  bytes3 = arrayify(bytes3);
  const result = [];
  let i3 = 0;
  while (i3 < bytes3.length) {
    const c5 = bytes3[i3++];
    if (c5 >> 7 === 0) {
      result.push(c5);
      continue;
    }
    let extraLength = null;
    let overlongMask = null;
    if ((c5 & 224) === 192) {
      extraLength = 1;
      overlongMask = 127;
    } else if ((c5 & 240) === 224) {
      extraLength = 2;
      overlongMask = 2047;
    } else if ((c5 & 248) === 240) {
      extraLength = 3;
      overlongMask = 65535;
    } else {
      if ((c5 & 192) === 128) {
        i3 += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i3 - 1, bytes3, result);
      } else {
        i3 += onError(Utf8ErrorReason.BAD_PREFIX, i3 - 1, bytes3, result);
      }
      continue;
    }
    if (i3 - 1 + extraLength >= bytes3.length) {
      i3 += onError(Utf8ErrorReason.OVERRUN, i3 - 1, bytes3, result);
      continue;
    }
    let res = c5 & (1 << 8 - extraLength - 1) - 1;
    for (let j3 = 0; j3 < extraLength; j3++) {
      let nextChar = bytes3[i3];
      if ((nextChar & 192) != 128) {
        i3 += onError(Utf8ErrorReason.MISSING_CONTINUE, i3, bytes3, result);
        res = null;
        break;
      }
      ;
      res = res << 6 | nextChar & 63;
      i3++;
    }
    if (res === null) {
      continue;
    }
    if (res > 1114111) {
      i3 += onError(Utf8ErrorReason.OUT_OF_RANGE, i3 - 1 - extraLength, bytes3, result, res);
      continue;
    }
    if (res >= 55296 && res <= 57343) {
      i3 += onError(Utf8ErrorReason.UTF16_SURROGATE, i3 - 1 - extraLength, bytes3, result, res);
      continue;
    }
    if (res <= overlongMask) {
      i3 += onError(Utf8ErrorReason.OVERLONG, i3 - 1 - extraLength, bytes3, result, res);
      continue;
    }
    result.push(res);
  }
  return result;
}
function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
  if (form != UnicodeNormalizationForm.current) {
    logger10.checkNormalize();
    str = str.normalize(form);
  }
  let result = [];
  for (let i3 = 0; i3 < str.length; i3++) {
    const c5 = str.charCodeAt(i3);
    if (c5 < 128) {
      result.push(c5);
    } else if (c5 < 2048) {
      result.push(c5 >> 6 | 192);
      result.push(c5 & 63 | 128);
    } else if ((c5 & 64512) == 55296) {
      i3++;
      const c22 = str.charCodeAt(i3);
      if (i3 >= str.length || (c22 & 64512) !== 56320) {
        throw new Error("invalid utf-8 string");
      }
      const pair = 65536 + ((c5 & 1023) << 10) + (c22 & 1023);
      result.push(pair >> 18 | 240);
      result.push(pair >> 12 & 63 | 128);
      result.push(pair >> 6 & 63 | 128);
      result.push(pair & 63 | 128);
    } else {
      result.push(c5 >> 12 | 224);
      result.push(c5 >> 6 & 63 | 128);
      result.push(c5 & 63 | 128);
    }
  }
  return arrayify(result);
}
function escapeChar(value) {
  const hex2 = "0000" + value.toString(16);
  return "\\u" + hex2.substring(hex2.length - 4);
}
function _toEscapedUtf8String(bytes3, onError) {
  return '"' + getUtf8CodePoints(bytes3, onError).map((codePoint) => {
    if (codePoint < 256) {
      switch (codePoint) {
        case 8:
          return "\\b";
        case 9:
          return "\\t";
        case 10:
          return "\\n";
        case 13:
          return "\\r";
        case 34:
          return '\\"';
        case 92:
          return "\\\\";
      }
      if (codePoint >= 32 && codePoint < 127) {
        return String.fromCharCode(codePoint);
      }
    }
    if (codePoint <= 65535) {
      return escapeChar(codePoint);
    }
    codePoint -= 65536;
    return escapeChar((codePoint >> 10 & 1023) + 55296) + escapeChar((codePoint & 1023) + 56320);
  }).join("") + '"';
}
function _toUtf8String(codePoints) {
  return codePoints.map((codePoint) => {
    if (codePoint <= 65535) {
      return String.fromCharCode(codePoint);
    }
    codePoint -= 65536;
    return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
  }).join("");
}
function toUtf8String(bytes3, onError) {
  return _toUtf8String(getUtf8CodePoints(bytes3, onError));
}
function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
  return getUtf8CodePoints(toUtf8Bytes(str, form));
}

// node_modules/@ethersproject/strings/lib.esm/bytes32.js
"use strict";
function formatBytes32String(text) {
  const bytes3 = toUtf8Bytes(text);
  if (bytes3.length > 31) {
    throw new Error("bytes32 string must be less than 32 bytes");
  }
  return hexlify(concat2([bytes3, HashZero]).slice(0, 32));
}
function parseBytes32String(bytes3) {
  const data = arrayify(bytes3);
  if (data.length !== 32) {
    throw new Error("invalid bytes32 - not 32 bytes long");
  }
  if (data[31] !== 0) {
    throw new Error("invalid bytes32 string - no null terminator");
  }
  let length = 31;
  while (data[length - 1] === 0) {
    length--;
  }
  return toUtf8String(data.slice(0, length));
}

// node_modules/@ethersproject/strings/lib.esm/idna.js
"use strict";
function bytes2(data) {
  if (data.length % 4 !== 0) {
    throw new Error("bad data");
  }
  let result = [];
  for (let i3 = 0; i3 < data.length; i3 += 4) {
    result.push(parseInt(data.substring(i3, i3 + 4), 16));
  }
  return result;
}
function createTable(data, func) {
  if (!func) {
    func = function(value) {
      return [parseInt(value, 16)];
    };
  }
  let lo = 0;
  let result = {};
  data.split(",").forEach((pair) => {
    let comps = pair.split(":");
    lo += parseInt(comps[0], 16);
    result[lo] = func(comps[1]);
  });
  return result;
}
function createRangeTable(data) {
  let hi = 0;
  return data.split(",").map((v3) => {
    let comps = v3.split("-");
    if (comps.length === 1) {
      comps[1] = "0";
    } else if (comps[1] === "") {
      comps[1] = "1";
    }
    let lo = hi + parseInt(comps[0], 16);
    hi = parseInt(comps[1], 16);
    return { l: lo, h: hi };
  });
}
function matchMap(value, ranges) {
  let lo = 0;
  for (let i3 = 0; i3 < ranges.length; i3++) {
    let range = ranges[i3];
    lo += range.l;
    if (value >= lo && value <= lo + range.h && (value - lo) % (range.d || 1) === 0) {
      if (range.e && range.e.indexOf(value - lo) !== -1) {
        continue;
      }
      return range;
    }
  }
  return null;
}
var Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
var Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v3) => parseInt(v3, 16));
var Table_B_2_ranges = [
  { h: 25, s: 32, l: 65 },
  { h: 30, s: 32, e: [23], l: 127 },
  { h: 54, s: 1, e: [48], l: 64, d: 2 },
  { h: 14, s: 1, l: 57, d: 2 },
  { h: 44, s: 1, l: 17, d: 2 },
  { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },
  { h: 16, s: 1, l: 68, d: 2 },
  { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },
  { h: 26, s: 32, e: [17], l: 435 },
  { h: 22, s: 1, l: 71, d: 2 },
  { h: 15, s: 80, l: 40 },
  { h: 31, s: 32, l: 16 },
  { h: 32, s: 1, l: 80, d: 2 },
  { h: 52, s: 1, l: 42, d: 2 },
  { h: 12, s: 1, l: 55, d: 2 },
  { h: 40, s: 1, e: [38], l: 15, d: 2 },
  { h: 14, s: 1, l: 48, d: 2 },
  { h: 37, s: 48, l: 49 },
  { h: 148, s: 1, l: 6351, d: 2 },
  { h: 88, s: 1, l: 160, d: 2 },
  { h: 15, s: 16, l: 704 },
  { h: 25, s: 26, l: 854 },
  { h: 25, s: 32, l: 55915 },
  { h: 37, s: 40, l: 1247 },
  { h: 25, s: -119711, l: 53248 },
  { h: 25, s: -119763, l: 52 },
  { h: 25, s: -119815, l: 52 },
  { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },
  { h: 25, s: -119919, l: 52 },
  { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },
  { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },
  { h: 25, s: -120075, l: 52 },
  { h: 25, s: -120127, l: 52 },
  { h: 25, s: -120179, l: 52 },
  { h: 25, s: -120231, l: 52 },
  { h: 25, s: -120283, l: 52 },
  { h: 25, s: -120335, l: 52 },
  { h: 24, s: -119543, e: [17], l: 56 },
  { h: 24, s: -119601, e: [17], l: 58 },
  { h: 24, s: -119659, e: [17], l: 58 },
  { h: 24, s: -119717, e: [17], l: 58 },
  { h: 24, s: -119775, e: [17], l: 58 }
];
var Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
var Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
var Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
var Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
function flatten(values) {
  return values.reduce((accum, value) => {
    value.forEach((value2) => {
      accum.push(value2);
    });
    return accum;
  }, []);
}
function _nameprepTableA1(codepoint) {
  return !!matchMap(codepoint, Table_A_1_ranges);
}
function _nameprepTableB2(codepoint) {
  let range = matchMap(codepoint, Table_B_2_ranges);
  if (range) {
    return [codepoint + range.s];
  }
  let codes2 = Table_B_2_lut_abs[codepoint];
  if (codes2) {
    return codes2;
  }
  let shift = Table_B_2_lut_rel[codepoint];
  if (shift) {
    return [codepoint + shift[0]];
  }
  let complex = Table_B_2_complex[codepoint];
  if (complex) {
    return complex;
  }
  return null;
}
function _nameprepTableC(codepoint) {
  return !!matchMap(codepoint, Table_C_ranges);
}
function nameprep(value) {
  if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
    return value.toLowerCase();
  }
  let codes2 = toUtf8CodePoints(value);
  codes2 = flatten(codes2.map((code) => {
    if (Table_B_1_flags.indexOf(code) >= 0) {
      return [];
    }
    if (code >= 65024 && code <= 65039) {
      return [];
    }
    let codesTableB2 = _nameprepTableB2(code);
    if (codesTableB2) {
      return codesTableB2;
    }
    return [code];
  }));
  codes2 = toUtf8CodePoints(_toUtf8String(codes2), UnicodeNormalizationForm.NFKC);
  codes2.forEach((code) => {
    if (_nameprepTableC(code)) {
      throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
    }
  });
  codes2.forEach((code) => {
    if (_nameprepTableA1(code)) {
      throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
    }
  });
  let name2 = _toUtf8String(codes2);
  if (name2.substring(0, 1) === "-" || name2.substring(2, 4) === "--" || name2.substring(name2.length - 1) === "-") {
    throw new Error("invalid hyphen");
  }
  if (name2.length > 63) {
    throw new Error("too long");
  }
  return name2;
}

// node_modules/@ethersproject/strings/lib.esm/index.js
"use strict";

// node_modules/@ethersproject/abi/lib.esm/coders/string.js
"use strict";
var StringCoder = class extends DynamicBytesCoder {
  constructor(localName) {
    super("string", localName);
  }
  defaultValue() {
    return "";
  }
  encode(writer, value) {
    return super.encode(writer, toUtf8Bytes(value));
  }
  decode(reader) {
    return toUtf8String(super.decode(reader));
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/tuple.js
"use strict";
var TupleCoder = class extends Coder {
  constructor(coders, localName) {
    let dynamic = false;
    const types = [];
    coders.forEach((coder) => {
      if (coder.dynamic) {
        dynamic = true;
      }
      types.push(coder.type);
    });
    const type = "tuple(" + types.join(",") + ")";
    super("tuple", type, localName, dynamic);
    this.coders = coders;
  }
  defaultValue() {
    const values = [];
    this.coders.forEach((coder) => {
      values.push(coder.defaultValue());
    });
    const uniqueNames = this.coders.reduce((accum, coder) => {
      const name2 = coder.localName;
      if (name2) {
        if (!accum[name2]) {
          accum[name2] = 0;
        }
        accum[name2]++;
      }
      return accum;
    }, {});
    this.coders.forEach((coder, index) => {
      let name2 = coder.localName;
      if (!name2 || uniqueNames[name2] !== 1) {
        return;
      }
      if (name2 === "length") {
        name2 = "_length";
      }
      if (values[name2] != null) {
        return;
      }
      values[name2] = values[index];
    });
    return Object.freeze(values);
  }
  encode(writer, value) {
    return pack(writer, this.coders, value);
  }
  decode(reader) {
    return reader.coerce(this.name, unpack(reader, this.coders));
  }
};

// node_modules/@ethersproject/abi/lib.esm/abi-coder.js
"use strict";
var logger11 = new Logger(version5);
var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
var AbiCoder = class {
  constructor(coerceFunc) {
    logger11.checkNew(new.target, AbiCoder);
    defineReadOnly(this, "coerceFunc", coerceFunc || null);
  }
  _getCoder(param) {
    switch (param.baseType) {
      case "address":
        return new AddressCoder(param.name);
      case "bool":
        return new BooleanCoder(param.name);
      case "string":
        return new StringCoder(param.name);
      case "bytes":
        return new BytesCoder(param.name);
      case "array":
        return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
      case "tuple":
        return new TupleCoder((param.components || []).map((component) => {
          return this._getCoder(component);
        }), param.name);
      case "":
        return new NullCoder(param.name);
    }
    let match = param.type.match(paramTypeNumber);
    if (match) {
      let size = parseInt(match[2] || "256");
      if (size === 0 || size > 256 || size % 8 !== 0) {
        logger11.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
      }
      return new NumberCoder(size / 8, match[1] === "int", param.name);
    }
    match = param.type.match(paramTypeBytes);
    if (match) {
      let size = parseInt(match[1]);
      if (size === 0 || size > 32) {
        logger11.throwArgumentError("invalid bytes length", "param", param);
      }
      return new FixedBytesCoder(size, param.name);
    }
    return logger11.throwArgumentError("invalid type", "type", param.type);
  }
  _getWordSize() {
    return 32;
  }
  _getReader(data, allowLoose) {
    return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
  }
  _getWriter() {
    return new Writer(this._getWordSize());
  }
  getDefaultValue(types) {
    const coders = types.map((type) => this._getCoder(ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    return coder.defaultValue();
  }
  encode(types, values) {
    if (types.length !== values.length) {
      logger11.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
        count: { types: types.length, values: values.length },
        value: { types, values }
      });
    }
    const coders = types.map((type) => this._getCoder(ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    const writer = this._getWriter();
    coder.encode(writer, values);
    return writer.data;
  }
  decode(types, data, loose) {
    const coders = types.map((type) => this._getCoder(ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    return coder.decode(this._getReader(arrayify(data), loose));
  }
};
var defaultAbiCoder = new AbiCoder();

// node_modules/@ethersproject/hash/lib.esm/id.js
function id(text) {
  return keccak256(toUtf8Bytes(text));
}

// node_modules/@ethersproject/hash/lib.esm/_version.js
var version9 = "hash/5.6.0";

// node_modules/@ethersproject/hash/lib.esm/namehash.js
var logger12 = new Logger(version9);
var Zeros = new Uint8Array(32);
Zeros.fill(0);
var Partition = new RegExp("^((.*)\\.)?([^.]+)$");
function isValidName(name2) {
  try {
    const comps = name2.split(".");
    for (let i3 = 0; i3 < comps.length; i3++) {
      if (nameprep(comps[i3]).length === 0) {
        throw new Error("empty");
      }
    }
    return true;
  } catch (error) {
  }
  return false;
}
function namehash(name2) {
  if (typeof name2 !== "string") {
    logger12.throwArgumentError("invalid ENS name; not a string", "name", name2);
  }
  let current = name2;
  let result = Zeros;
  while (current.length) {
    const partition = current.match(Partition);
    if (partition == null || partition[2] === "") {
      logger12.throwArgumentError("invalid ENS address; missing component", "name", name2);
    }
    const label = toUtf8Bytes(nameprep(partition[3]));
    result = keccak256(concat2([result, keccak256(label)]));
    current = partition[2] || "";
  }
  return hexlify(result);
}
function dnsEncode(name2) {
  return hexlify(concat2(name2.split(".").map((comp) => {
    const bytes3 = toUtf8Bytes("_" + nameprep(comp));
    bytes3[0] = bytes3.length - 1;
    return bytes3;
  }))) + "00";
}

// node_modules/@ethersproject/hash/lib.esm/message.js
var messagePrefix = "Ethereum Signed Message:\n";
function hashMessage(message) {
  if (typeof message === "string") {
    message = toUtf8Bytes(message);
  }
  return keccak256(concat2([
    toUtf8Bytes(messagePrefix),
    toUtf8Bytes(String(message.length)),
    message
  ]));
}

// node_modules/@ethersproject/hash/lib.esm/typed-data.js
var __awaiter2 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e4) {
        reject(e4);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e4) {
        reject(e4);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger13 = new Logger(version9);
var padding = new Uint8Array(32);
padding.fill(0);
var NegativeOne3 = BigNumber3.from(-1);
var Zero3 = BigNumber3.from(0);
var One2 = BigNumber3.from(1);
var MaxUint2562 = BigNumber3.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
function hexPadRight(value) {
  const bytes3 = arrayify(value);
  const padOffset = bytes3.length % 32;
  if (padOffset) {
    return hexConcat([bytes3, padding.slice(padOffset)]);
  }
  return hexlify(bytes3);
}
var hexTrue = hexZeroPad(One2.toHexString(), 32);
var hexFalse = hexZeroPad(Zero3.toHexString(), 32);
var domainFieldTypes = {
  name: "string",
  version: "string",
  chainId: "uint256",
  verifyingContract: "address",
  salt: "bytes32"
};
var domainFieldNames = [
  "name",
  "version",
  "chainId",
  "verifyingContract",
  "salt"
];
function checkString(key2) {
  return function(value) {
    if (typeof value !== "string") {
      logger13.throwArgumentError(`invalid domain value for ${JSON.stringify(key2)}`, `domain.${key2}`, value);
    }
    return value;
  };
}
var domainChecks = {
  name: checkString("name"),
  version: checkString("version"),
  chainId: function(value) {
    try {
      return BigNumber3.from(value).toString();
    } catch (error) {
    }
    return logger13.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
  },
  verifyingContract: function(value) {
    try {
      return getAddress(value).toLowerCase();
    } catch (error) {
    }
    return logger13.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
  },
  salt: function(value) {
    try {
      const bytes3 = arrayify(value);
      if (bytes3.length !== 32) {
        throw new Error("bad length");
      }
      return hexlify(bytes3);
    } catch (error) {
    }
    return logger13.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
  }
};
function getBaseEncoder(type) {
  {
    const match = type.match(/^(u?)int(\d*)$/);
    if (match) {
      const signed = match[1] === "";
      const width = parseInt(match[2] || "256");
      if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {
        logger13.throwArgumentError("invalid numeric width", "type", type);
      }
      const boundsUpper = MaxUint2562.mask(signed ? width - 1 : width);
      const boundsLower = signed ? boundsUpper.add(One2).mul(NegativeOne3) : Zero3;
      return function(value) {
        const v3 = BigNumber3.from(value);
        if (v3.lt(boundsLower) || v3.gt(boundsUpper)) {
          logger13.throwArgumentError(`value out-of-bounds for ${type}`, "value", value);
        }
        return hexZeroPad(v3.toTwos(256).toHexString(), 32);
      };
    }
  }
  {
    const match = type.match(/^bytes(\d+)$/);
    if (match) {
      const width = parseInt(match[1]);
      if (width === 0 || width > 32 || match[1] !== String(width)) {
        logger13.throwArgumentError("invalid bytes width", "type", type);
      }
      return function(value) {
        const bytes3 = arrayify(value);
        if (bytes3.length !== width) {
          logger13.throwArgumentError(`invalid length for ${type}`, "value", value);
        }
        return hexPadRight(value);
      };
    }
  }
  switch (type) {
    case "address":
      return function(value) {
        return hexZeroPad(getAddress(value), 32);
      };
    case "bool":
      return function(value) {
        return !value ? hexFalse : hexTrue;
      };
    case "bytes":
      return function(value) {
        return keccak256(value);
      };
    case "string":
      return function(value) {
        return id(value);
      };
  }
  return null;
}
function encodeType(name2, fields) {
  return `${name2}(${fields.map(({ name: name3, type }) => type + " " + name3).join(",")})`;
}
var TypedDataEncoder = class {
  constructor(types) {
    defineReadOnly(this, "types", Object.freeze(deepCopy(types)));
    defineReadOnly(this, "_encoderCache", {});
    defineReadOnly(this, "_types", {});
    const links = {};
    const parents = {};
    const subtypes = {};
    Object.keys(types).forEach((type) => {
      links[type] = {};
      parents[type] = [];
      subtypes[type] = {};
    });
    for (const name2 in types) {
      const uniqueNames = {};
      types[name2].forEach((field) => {
        if (uniqueNames[field.name]) {
          logger13.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name2)}`, "types", types);
        }
        uniqueNames[field.name] = true;
        const baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
        if (baseType === name2) {
          logger13.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, "types", types);
        }
        const encoder = getBaseEncoder(baseType);
        if (encoder) {
          return;
        }
        if (!parents[baseType]) {
          logger13.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, "types", types);
        }
        parents[baseType].push(name2);
        links[name2][baseType] = true;
      });
    }
    const primaryTypes = Object.keys(parents).filter((n2) => parents[n2].length === 0);
    if (primaryTypes.length === 0) {
      logger13.throwArgumentError("missing primary type", "types", types);
    } else if (primaryTypes.length > 1) {
      logger13.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t3) => JSON.stringify(t3)).join(", ")}`, "types", types);
    }
    defineReadOnly(this, "primaryType", primaryTypes[0]);
    function checkCircular(type, found) {
      if (found[type]) {
        logger13.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, "types", types);
      }
      found[type] = true;
      Object.keys(links[type]).forEach((child) => {
        if (!parents[child]) {
          return;
        }
        checkCircular(child, found);
        Object.keys(found).forEach((subtype) => {
          subtypes[subtype][child] = true;
        });
      });
      delete found[type];
    }
    checkCircular(this.primaryType, {});
    for (const name2 in subtypes) {
      const st = Object.keys(subtypes[name2]);
      st.sort();
      this._types[name2] = encodeType(name2, types[name2]) + st.map((t3) => encodeType(t3, types[t3])).join("");
    }
  }
  getEncoder(type) {
    let encoder = this._encoderCache[type];
    if (!encoder) {
      encoder = this._encoderCache[type] = this._getEncoder(type);
    }
    return encoder;
  }
  _getEncoder(type) {
    {
      const encoder = getBaseEncoder(type);
      if (encoder) {
        return encoder;
      }
    }
    const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
    if (match) {
      const subtype = match[1];
      const subEncoder = this.getEncoder(subtype);
      const length = parseInt(match[3]);
      return (value) => {
        if (length >= 0 && value.length !== length) {
          logger13.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
        }
        let result = value.map(subEncoder);
        if (this._types[subtype]) {
          result = result.map(keccak256);
        }
        return keccak256(hexConcat(result));
      };
    }
    const fields = this.types[type];
    if (fields) {
      const encodedType = id(this._types[type]);
      return (value) => {
        const values = fields.map(({ name: name2, type: type2 }) => {
          const result = this.getEncoder(type2)(value[name2]);
          if (this._types[type2]) {
            return keccak256(result);
          }
          return result;
        });
        values.unshift(encodedType);
        return hexConcat(values);
      };
    }
    return logger13.throwArgumentError(`unknown type: ${type}`, "type", type);
  }
  encodeType(name2) {
    const result = this._types[name2];
    if (!result) {
      logger13.throwArgumentError(`unknown type: ${JSON.stringify(name2)}`, "name", name2);
    }
    return result;
  }
  encodeData(type, value) {
    return this.getEncoder(type)(value);
  }
  hashStruct(name2, value) {
    return keccak256(this.encodeData(name2, value));
  }
  encode(value) {
    return this.encodeData(this.primaryType, value);
  }
  hash(value) {
    return this.hashStruct(this.primaryType, value);
  }
  _visit(type, value, callback) {
    {
      const encoder = getBaseEncoder(type);
      if (encoder) {
        return callback(type, value);
      }
    }
    const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
    if (match) {
      const subtype = match[1];
      const length = parseInt(match[3]);
      if (length >= 0 && value.length !== length) {
        logger13.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
      }
      return value.map((v3) => this._visit(subtype, v3, callback));
    }
    const fields = this.types[type];
    if (fields) {
      return fields.reduce((accum, { name: name2, type: type2 }) => {
        accum[name2] = this._visit(type2, value[name2], callback);
        return accum;
      }, {});
    }
    return logger13.throwArgumentError(`unknown type: ${type}`, "type", type);
  }
  visit(value, callback) {
    return this._visit(this.primaryType, value, callback);
  }
  static from(types) {
    return new TypedDataEncoder(types);
  }
  static getPrimaryType(types) {
    return TypedDataEncoder.from(types).primaryType;
  }
  static hashStruct(name2, types, value) {
    return TypedDataEncoder.from(types).hashStruct(name2, value);
  }
  static hashDomain(domain) {
    const domainFields = [];
    for (const name2 in domain) {
      const type = domainFieldTypes[name2];
      if (!type) {
        logger13.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name2)}`, "domain", domain);
      }
      domainFields.push({ name: name2, type });
    }
    domainFields.sort((a3, b3) => {
      return domainFieldNames.indexOf(a3.name) - domainFieldNames.indexOf(b3.name);
    });
    return TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
  }
  static encode(domain, types, value) {
    return hexConcat([
      "0x1901",
      TypedDataEncoder.hashDomain(domain),
      TypedDataEncoder.from(types).hash(value)
    ]);
  }
  static hash(domain, types, value) {
    return keccak256(TypedDataEncoder.encode(domain, types, value));
  }
  static resolveNames(domain, types, value, resolveName2) {
    return __awaiter2(this, void 0, void 0, function* () {
      domain = shallowCopy(domain);
      const ensCache = {};
      if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {
        ensCache[domain.verifyingContract] = "0x";
      }
      const encoder = TypedDataEncoder.from(types);
      encoder.visit(value, (type, value2) => {
        if (type === "address" && !isHexString(value2, 20)) {
          ensCache[value2] = "0x";
        }
        return value2;
      });
      for (const name2 in ensCache) {
        ensCache[name2] = yield resolveName2(name2);
      }
      if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
        domain.verifyingContract = ensCache[domain.verifyingContract];
      }
      value = encoder.visit(value, (type, value2) => {
        if (type === "address" && ensCache[value2]) {
          return ensCache[value2];
        }
        return value2;
      });
      return { domain, value };
    });
  }
  static getPayload(domain, types, value) {
    TypedDataEncoder.hashDomain(domain);
    const domainValues = {};
    const domainTypes = [];
    domainFieldNames.forEach((name2) => {
      const value2 = domain[name2];
      if (value2 == null) {
        return;
      }
      domainValues[name2] = domainChecks[name2](value2);
      domainTypes.push({ name: name2, type: domainFieldTypes[name2] });
    });
    const encoder = TypedDataEncoder.from(types);
    const typesWithDomain = shallowCopy(types);
    if (typesWithDomain.EIP712Domain) {
      logger13.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
    } else {
      typesWithDomain.EIP712Domain = domainTypes;
    }
    encoder.encode(value);
    return {
      types: typesWithDomain,
      domain: domainValues,
      primaryType: encoder.primaryType,
      message: encoder.visit(value, (type, value2) => {
        if (type.match(/^bytes(\d*)/)) {
          return hexlify(arrayify(value2));
        }
        if (type.match(/^u?int/)) {
          return BigNumber3.from(value2).toString();
        }
        switch (type) {
          case "address":
            return value2.toLowerCase();
          case "bool":
            return !!value2;
          case "string":
            if (typeof value2 !== "string") {
              logger13.throwArgumentError(`invalid string`, "value", value2);
            }
            return value2;
        }
        return logger13.throwArgumentError("unsupported type", "type", type);
      })
    };
  }
};

// node_modules/@ethersproject/hash/lib.esm/index.js
"use strict";

// node_modules/@ethersproject/abi/lib.esm/interface.js
"use strict";
var logger14 = new Logger(version5);
var LogDescription = class extends Description {
};
var TransactionDescription = class extends Description {
};
var ErrorDescription = class extends Description {
};
var Indexed = class extends Description {
  static isIndexed(value) {
    return !!(value && value._isIndexed);
  }
};
var BuiltinErrors = {
  "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
  "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
};
function wrapAccessError(property, error) {
  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
  wrap.error = error;
  return wrap;
}
var Interface = class {
  constructor(fragments) {
    logger14.checkNew(new.target, Interface);
    let abi3 = [];
    if (typeof fragments === "string") {
      abi3 = JSON.parse(fragments);
    } else {
      abi3 = fragments;
    }
    defineReadOnly(this, "fragments", abi3.map((fragment) => {
      return Fragment.from(fragment);
    }).filter((fragment) => fragment != null));
    defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
    defineReadOnly(this, "functions", {});
    defineReadOnly(this, "errors", {});
    defineReadOnly(this, "events", {});
    defineReadOnly(this, "structs", {});
    this.fragments.forEach((fragment) => {
      let bucket = null;
      switch (fragment.type) {
        case "constructor":
          if (this.deploy) {
            logger14.warn("duplicate definition - constructor");
            return;
          }
          defineReadOnly(this, "deploy", fragment);
          return;
        case "function":
          bucket = this.functions;
          break;
        case "event":
          bucket = this.events;
          break;
        case "error":
          bucket = this.errors;
          break;
        default:
          return;
      }
      let signature2 = fragment.format();
      if (bucket[signature2]) {
        logger14.warn("duplicate definition - " + signature2);
        return;
      }
      bucket[signature2] = fragment;
    });
    if (!this.deploy) {
      defineReadOnly(this, "deploy", ConstructorFragment.from({
        payable: false,
        type: "constructor"
      }));
    }
    defineReadOnly(this, "_isInterface", true);
  }
  format(format) {
    if (!format) {
      format = FormatTypes.full;
    }
    if (format === FormatTypes.sighash) {
      logger14.throwArgumentError("interface does not support formatting sighash", "format", format);
    }
    const abi3 = this.fragments.map((fragment) => fragment.format(format));
    if (format === FormatTypes.json) {
      return JSON.stringify(abi3.map((j3) => JSON.parse(j3)));
    }
    return abi3;
  }
  static getAbiCoder() {
    return defaultAbiCoder;
  }
  static getAddress(address) {
    return getAddress(address);
  }
  static getSighash(fragment) {
    return hexDataSlice(id(fragment.format()), 0, 4);
  }
  static getEventTopic(eventFragment) {
    return id(eventFragment.format());
  }
  getFunction(nameOrSignatureOrSighash) {
    if (isHexString(nameOrSignatureOrSighash)) {
      for (const name2 in this.functions) {
        if (nameOrSignatureOrSighash === this.getSighash(name2)) {
          return this.functions[name2];
        }
      }
      logger14.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
    }
    if (nameOrSignatureOrSighash.indexOf("(") === -1) {
      const name2 = nameOrSignatureOrSighash.trim();
      const matching = Object.keys(this.functions).filter((f3) => f3.split("(")[0] === name2);
      if (matching.length === 0) {
        logger14.throwArgumentError("no matching function", "name", name2);
      } else if (matching.length > 1) {
        logger14.throwArgumentError("multiple matching functions", "name", name2);
      }
      return this.functions[matching[0]];
    }
    const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
    if (!result) {
      logger14.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
    }
    return result;
  }
  getEvent(nameOrSignatureOrTopic) {
    if (isHexString(nameOrSignatureOrTopic)) {
      const topichash = nameOrSignatureOrTopic.toLowerCase();
      for (const name2 in this.events) {
        if (topichash === this.getEventTopic(name2)) {
          return this.events[name2];
        }
      }
      logger14.throwArgumentError("no matching event", "topichash", topichash);
    }
    if (nameOrSignatureOrTopic.indexOf("(") === -1) {
      const name2 = nameOrSignatureOrTopic.trim();
      const matching = Object.keys(this.events).filter((f3) => f3.split("(")[0] === name2);
      if (matching.length === 0) {
        logger14.throwArgumentError("no matching event", "name", name2);
      } else if (matching.length > 1) {
        logger14.throwArgumentError("multiple matching events", "name", name2);
      }
      return this.events[matching[0]];
    }
    const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
    if (!result) {
      logger14.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
    }
    return result;
  }
  getError(nameOrSignatureOrSighash) {
    if (isHexString(nameOrSignatureOrSighash)) {
      const getSighash = getStatic(this.constructor, "getSighash");
      for (const name2 in this.errors) {
        const error = this.errors[name2];
        if (nameOrSignatureOrSighash === getSighash(error)) {
          return this.errors[name2];
        }
      }
      logger14.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
    }
    if (nameOrSignatureOrSighash.indexOf("(") === -1) {
      const name2 = nameOrSignatureOrSighash.trim();
      const matching = Object.keys(this.errors).filter((f3) => f3.split("(")[0] === name2);
      if (matching.length === 0) {
        logger14.throwArgumentError("no matching error", "name", name2);
      } else if (matching.length > 1) {
        logger14.throwArgumentError("multiple matching errors", "name", name2);
      }
      return this.errors[matching[0]];
    }
    const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
    if (!result) {
      logger14.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
    }
    return result;
  }
  getSighash(fragment) {
    if (typeof fragment === "string") {
      try {
        fragment = this.getFunction(fragment);
      } catch (error) {
        try {
          fragment = this.getError(fragment);
        } catch (_3) {
          throw error;
        }
      }
    }
    return getStatic(this.constructor, "getSighash")(fragment);
  }
  getEventTopic(eventFragment) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }
    return getStatic(this.constructor, "getEventTopic")(eventFragment);
  }
  _decodeParams(params, data) {
    return this._abiCoder.decode(params, data);
  }
  _encodeParams(params, values) {
    return this._abiCoder.encode(params, values);
  }
  encodeDeploy(values) {
    return this._encodeParams(this.deploy.inputs, values || []);
  }
  decodeErrorResult(fragment, data) {
    if (typeof fragment === "string") {
      fragment = this.getError(fragment);
    }
    const bytes3 = arrayify(data);
    if (hexlify(bytes3.slice(0, 4)) !== this.getSighash(fragment)) {
      logger14.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify(bytes3));
    }
    return this._decodeParams(fragment.inputs, bytes3.slice(4));
  }
  encodeErrorResult(fragment, values) {
    if (typeof fragment === "string") {
      fragment = this.getError(fragment);
    }
    return hexlify(concat2([
      this.getSighash(fragment),
      this._encodeParams(fragment.inputs, values || [])
    ]));
  }
  decodeFunctionData(functionFragment, data) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }
    const bytes3 = arrayify(data);
    if (hexlify(bytes3.slice(0, 4)) !== this.getSighash(functionFragment)) {
      logger14.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes3));
    }
    return this._decodeParams(functionFragment.inputs, bytes3.slice(4));
  }
  encodeFunctionData(functionFragment, values) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }
    return hexlify(concat2([
      this.getSighash(functionFragment),
      this._encodeParams(functionFragment.inputs, values || [])
    ]));
  }
  decodeFunctionResult(functionFragment, data) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }
    let bytes3 = arrayify(data);
    let reason = null;
    let errorArgs = null;
    let errorName = null;
    let errorSignature = null;
    switch (bytes3.length % this._abiCoder._getWordSize()) {
      case 0:
        try {
          return this._abiCoder.decode(functionFragment.outputs, bytes3);
        } catch (error) {
        }
        break;
      case 4: {
        const selector = hexlify(bytes3.slice(0, 4));
        const builtin = BuiltinErrors[selector];
        if (builtin) {
          errorArgs = this._abiCoder.decode(builtin.inputs, bytes3.slice(4));
          errorName = builtin.name;
          errorSignature = builtin.signature;
          if (builtin.reason) {
            reason = errorArgs[0];
          }
        } else {
          try {
            const error = this.getError(selector);
            errorArgs = this._abiCoder.decode(error.inputs, bytes3.slice(4));
            errorName = error.name;
            errorSignature = error.format();
          } catch (error) {
          }
        }
        break;
      }
    }
    return logger14.throwError("call revert exception", Logger.errors.CALL_EXCEPTION, {
      method: functionFragment.format(),
      errorArgs,
      errorName,
      errorSignature,
      reason
    });
  }
  encodeFunctionResult(functionFragment, values) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }
    return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
  }
  encodeFilterTopics(eventFragment, values) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }
    if (values.length > eventFragment.inputs.length) {
      logger14.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
        argument: "values",
        value: values
      });
    }
    let topics = [];
    if (!eventFragment.anonymous) {
      topics.push(this.getEventTopic(eventFragment));
    }
    const encodeTopic = (param, value) => {
      if (param.type === "string") {
        return id(value);
      } else if (param.type === "bytes") {
        return keccak256(hexlify(value));
      }
      if (param.type === "address") {
        this._abiCoder.encode(["address"], [value]);
      }
      return hexZeroPad(hexlify(value), 32);
    };
    values.forEach((value, index) => {
      let param = eventFragment.inputs[index];
      if (!param.indexed) {
        if (value != null) {
          logger14.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
        }
        return;
      }
      if (value == null) {
        topics.push(null);
      } else if (param.baseType === "array" || param.baseType === "tuple") {
        logger14.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
      } else if (Array.isArray(value)) {
        topics.push(value.map((value2) => encodeTopic(param, value2)));
      } else {
        topics.push(encodeTopic(param, value));
      }
    });
    while (topics.length && topics[topics.length - 1] === null) {
      topics.pop();
    }
    return topics;
  }
  encodeEventLog(eventFragment, values) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }
    const topics = [];
    const dataTypes = [];
    const dataValues = [];
    if (!eventFragment.anonymous) {
      topics.push(this.getEventTopic(eventFragment));
    }
    if (values.length !== eventFragment.inputs.length) {
      logger14.throwArgumentError("event arguments/values mismatch", "values", values);
    }
    eventFragment.inputs.forEach((param, index) => {
      const value = values[index];
      if (param.indexed) {
        if (param.type === "string") {
          topics.push(id(value));
        } else if (param.type === "bytes") {
          topics.push(keccak256(value));
        } else if (param.baseType === "tuple" || param.baseType === "array") {
          throw new Error("not implemented");
        } else {
          topics.push(this._abiCoder.encode([param.type], [value]));
        }
      } else {
        dataTypes.push(param);
        dataValues.push(value);
      }
    });
    return {
      data: this._abiCoder.encode(dataTypes, dataValues),
      topics
    };
  }
  decodeEventLog(eventFragment, data, topics) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }
    if (topics != null && !eventFragment.anonymous) {
      let topicHash = this.getEventTopic(eventFragment);
      if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
        logger14.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
      }
      topics = topics.slice(1);
    }
    let indexed = [];
    let nonIndexed = [];
    let dynamic = [];
    eventFragment.inputs.forEach((param, index) => {
      if (param.indexed) {
        if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
          indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
          dynamic.push(true);
        } else {
          indexed.push(param);
          dynamic.push(false);
        }
      } else {
        nonIndexed.push(param);
        dynamic.push(false);
      }
    });
    let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat2(topics)) : null;
    let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
    let result = [];
    let nonIndexedIndex = 0, indexedIndex = 0;
    eventFragment.inputs.forEach((param, index) => {
      if (param.indexed) {
        if (resultIndexed == null) {
          result[index] = new Indexed({ _isIndexed: true, hash: null });
        } else if (dynamic[index]) {
          result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
        } else {
          try {
            result[index] = resultIndexed[indexedIndex++];
          } catch (error) {
            result[index] = error;
          }
        }
      } else {
        try {
          result[index] = resultNonIndexed[nonIndexedIndex++];
        } catch (error) {
          result[index] = error;
        }
      }
      if (param.name && result[param.name] == null) {
        const value = result[index];
        if (value instanceof Error) {
          Object.defineProperty(result, param.name, {
            enumerable: true,
            get: () => {
              throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);
            }
          });
        } else {
          result[param.name] = value;
        }
      }
    });
    for (let i3 = 0; i3 < result.length; i3++) {
      const value = result[i3];
      if (value instanceof Error) {
        Object.defineProperty(result, i3, {
          enumerable: true,
          get: () => {
            throw wrapAccessError(`index ${i3}`, value);
          }
        });
      }
    }
    return Object.freeze(result);
  }
  parseTransaction(tx) {
    let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
    if (!fragment) {
      return null;
    }
    return new TransactionDescription({
      args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
      functionFragment: fragment,
      name: fragment.name,
      signature: fragment.format(),
      sighash: this.getSighash(fragment),
      value: BigNumber3.from(tx.value || "0")
    });
  }
  parseLog(log) {
    let fragment = this.getEvent(log.topics[0]);
    if (!fragment || fragment.anonymous) {
      return null;
    }
    return new LogDescription({
      eventFragment: fragment,
      name: fragment.name,
      signature: fragment.format(),
      topic: this.getEventTopic(fragment),
      args: this.decodeEventLog(fragment, log.data, log.topics)
    });
  }
  parseError(data) {
    const hexData = hexlify(data);
    let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
    if (!fragment) {
      return null;
    }
    return new ErrorDescription({
      args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
      errorFragment: fragment,
      name: fragment.name,
      signature: fragment.format(),
      sighash: this.getSighash(fragment)
    });
  }
  static isInterface(value) {
    return !!(value && value._isInterface);
  }
};

// node_modules/@ethersproject/abi/lib.esm/index.js
"use strict";

// node_modules/@ethersproject/abstract-provider/lib.esm/_version.js
var version10 = "abstract-provider/5.6.0";

// node_modules/@ethersproject/abstract-provider/lib.esm/index.js
"use strict";
var __awaiter3 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e4) {
        reject(e4);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e4) {
        reject(e4);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger15 = new Logger(version10);
var ForkEvent = class extends Description {
  static isForkEvent(value) {
    return !!(value && value._isForkEvent);
  }
};
var Provider = class {
  constructor() {
    logger15.checkAbstract(new.target, Provider);
    defineReadOnly(this, "_isProvider", true);
  }
  getFeeData() {
    return __awaiter3(this, void 0, void 0, function* () {
      const { block, gasPrice } = yield resolveProperties({
        block: this.getBlock("latest"),
        gasPrice: this.getGasPrice().catch((error) => {
          return null;
        })
      });
      let maxFeePerGas = null, maxPriorityFeePerGas = null;
      if (block && block.baseFeePerGas) {
        maxPriorityFeePerGas = BigNumber3.from("1500000000");
        maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
      }
      return { maxFeePerGas, maxPriorityFeePerGas, gasPrice };
    });
  }
  addListener(eventName, listener) {
    return this.on(eventName, listener);
  }
  removeListener(eventName, listener) {
    return this.off(eventName, listener);
  }
  static isProvider(value) {
    return !!(value && value._isProvider);
  }
};

// node_modules/@ethersproject/abstract-signer/lib.esm/_version.js
var version11 = "abstract-signer/5.6.0";

// node_modules/@ethersproject/abstract-signer/lib.esm/index.js
"use strict";
var __awaiter4 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e4) {
        reject(e4);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e4) {
        reject(e4);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger16 = new Logger(version11);
var allowedTransactionKeys = [
  "accessList",
  "ccipReadEnabled",
  "chainId",
  "customData",
  "data",
  "from",
  "gasLimit",
  "gasPrice",
  "maxFeePerGas",
  "maxPriorityFeePerGas",
  "nonce",
  "to",
  "type",
  "value"
];
var forwardErrors = [
  Logger.errors.INSUFFICIENT_FUNDS,
  Logger.errors.NONCE_EXPIRED,
  Logger.errors.REPLACEMENT_UNDERPRICED
];
var Signer = class {
  constructor() {
    logger16.checkAbstract(new.target, Signer);
    defineReadOnly(this, "_isSigner", true);
  }
  getBalance(blockTag) {
    return __awaiter4(this, void 0, void 0, function* () {
      this._checkProvider("getBalance");
      return yield this.provider.getBalance(this.getAddress(), blockTag);
    });
  }
  getTransactionCount(blockTag) {
    return __awaiter4(this, void 0, void 0, function* () {
      this._checkProvider("getTransactionCount");
      return yield this.provider.getTransactionCount(this.getAddress(), blockTag);
    });
  }
  estimateGas(transaction) {
    return __awaiter4(this, void 0, void 0, function* () {
      this._checkProvider("estimateGas");
      const tx = yield resolveProperties(this.checkTransaction(transaction));
      return yield this.provider.estimateGas(tx);
    });
  }
  call(transaction, blockTag) {
    return __awaiter4(this, void 0, void 0, function* () {
      this._checkProvider("call");
      const tx = yield resolveProperties(this.checkTransaction(transaction));
      return yield this.provider.call(tx, blockTag);
    });
  }
  sendTransaction(transaction) {
    return __awaiter4(this, void 0, void 0, function* () {
      this._checkProvider("sendTransaction");
      const tx = yield this.populateTransaction(transaction);
      const signedTx = yield this.signTransaction(tx);
      return yield this.provider.sendTransaction(signedTx);
    });
  }
  getChainId() {
    return __awaiter4(this, void 0, void 0, function* () {
      this._checkProvider("getChainId");
      const network = yield this.provider.getNetwork();
      return network.chainId;
    });
  }
  getGasPrice() {
    return __awaiter4(this, void 0, void 0, function* () {
      this._checkProvider("getGasPrice");
      return yield this.provider.getGasPrice();
    });
  }
  getFeeData() {
    return __awaiter4(this, void 0, void 0, function* () {
      this._checkProvider("getFeeData");
      return yield this.provider.getFeeData();
    });
  }
  resolveName(name2) {
    return __awaiter4(this, void 0, void 0, function* () {
      this._checkProvider("resolveName");
      return yield this.provider.resolveName(name2);
    });
  }
  checkTransaction(transaction) {
    for (const key2 in transaction) {
      if (allowedTransactionKeys.indexOf(key2) === -1) {
        logger16.throwArgumentError("invalid transaction key: " + key2, "transaction", transaction);
      }
    }
    const tx = shallowCopy(transaction);
    if (tx.from == null) {
      tx.from = this.getAddress();
    } else {
      tx.from = Promise.all([
        Promise.resolve(tx.from),
        this.getAddress()
      ]).then((result) => {
        if (result[0].toLowerCase() !== result[1].toLowerCase()) {
          logger16.throwArgumentError("from address mismatch", "transaction", transaction);
        }
        return result[0];
      });
    }
    return tx;
  }
  populateTransaction(transaction) {
    return __awaiter4(this, void 0, void 0, function* () {
      const tx = yield resolveProperties(this.checkTransaction(transaction));
      if (tx.to != null) {
        tx.to = Promise.resolve(tx.to).then((to) => __awaiter4(this, void 0, void 0, function* () {
          if (to == null) {
            return null;
          }
          const address = yield this.resolveName(to);
          if (address == null) {
            logger16.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
          }
          return address;
        }));
        tx.to.catch((error) => {
        });
      }
      const hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;
      if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
        logger16.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
      } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
        logger16.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
      }
      if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {
        tx.type = 2;
      } else if (tx.type === 0 || tx.type === 1) {
        if (tx.gasPrice == null) {
          tx.gasPrice = this.getGasPrice();
        }
      } else {
        const feeData = yield this.getFeeData();
        if (tx.type == null) {
          if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
            tx.type = 2;
            if (tx.gasPrice != null) {
              const gasPrice = tx.gasPrice;
              delete tx.gasPrice;
              tx.maxFeePerGas = gasPrice;
              tx.maxPriorityFeePerGas = gasPrice;
            } else {
              if (tx.maxFeePerGas == null) {
                tx.maxFeePerGas = feeData.maxFeePerGas;
              }
              if (tx.maxPriorityFeePerGas == null) {
                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
              }
            }
          } else if (feeData.gasPrice != null) {
            if (hasEip1559) {
              logger16.throwError("network does not support EIP-1559", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "populateTransaction"
              });
            }
            if (tx.gasPrice == null) {
              tx.gasPrice = feeData.gasPrice;
            }
            tx.type = 0;
          } else {
            logger16.throwError("failed to get consistent fee data", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "signer.getFeeData"
            });
          }
        } else if (tx.type === 2) {
          if (tx.maxFeePerGas == null) {
            tx.maxFeePerGas = feeData.maxFeePerGas;
          }
          if (tx.maxPriorityFeePerGas == null) {
            tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
          }
        }
      }
      if (tx.nonce == null) {
        tx.nonce = this.getTransactionCount("pending");
      }
      if (tx.gasLimit == null) {
        tx.gasLimit = this.estimateGas(tx).catch((error) => {
          if (forwardErrors.indexOf(error.code) >= 0) {
            throw error;
          }
          return logger16.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
            error,
            tx
          });
        });
      }
      if (tx.chainId == null) {
        tx.chainId = this.getChainId();
      } else {
        tx.chainId = Promise.all([
          Promise.resolve(tx.chainId),
          this.getChainId()
        ]).then((results) => {
          if (results[1] !== 0 && results[0] !== results[1]) {
            logger16.throwArgumentError("chainId address mismatch", "transaction", transaction);
          }
          return results[0];
        });
      }
      return yield resolveProperties(tx);
    });
  }
  _checkProvider(operation) {
    if (!this.provider) {
      logger16.throwError("missing provider", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: operation || "_checkProvider"
      });
    }
  }
  static isSigner(value) {
    return !!(value && value._isSigner);
  }
};
var VoidSigner = class extends Signer {
  constructor(address, provider) {
    logger16.checkNew(new.target, VoidSigner);
    super();
    defineReadOnly(this, "address", address);
    defineReadOnly(this, "provider", provider || null);
  }
  getAddress() {
    return Promise.resolve(this.address);
  }
  _fail(message, operation) {
    return Promise.resolve().then(() => {
      logger16.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation });
    });
  }
  signMessage(message) {
    return this._fail("VoidSigner cannot sign messages", "signMessage");
  }
  signTransaction(transaction) {
    return this._fail("VoidSigner cannot sign transactions", "signTransaction");
  }
  _signTypedData(domain, types, value) {
    return this._fail("VoidSigner cannot sign typed data", "signTypedData");
  }
  connect(provider) {
    return new VoidSigner(this.address, provider);
  }
};

// node_modules/@ethersproject/signing-key/lib.esm/elliptic.js
var import_bn2 = __toModule(require_bn());
var import_hash2 = __toModule(require_hash());
var commonjsGlobal2 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function createCommonjsModule2(fn, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn(module, module.exports), module.exports;
}
function commonjsRequire() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var minimalisticAssert = assert3;
function assert3(val2, msg) {
  if (!val2)
    throw new Error(msg || "Assertion failed");
}
assert3.equal = function assertEqual(l3, r3, msg) {
  if (l3 != r3)
    throw new Error(msg || "Assertion failed: " + l3 + " != " + r3);
};
var utils_1 = createCommonjsModule2(function(module, exports) {
  "use strict";
  var utils5 = exports;
  function toArray2(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg !== "string") {
      for (var i3 = 0; i3 < msg.length; i3++)
        res[i3] = msg[i3] | 0;
      return res;
    }
    if (enc === "hex") {
      msg = msg.replace(/[^a-z0-9]+/ig, "");
      if (msg.length % 2 !== 0)
        msg = "0" + msg;
      for (var i3 = 0; i3 < msg.length; i3 += 2)
        res.push(parseInt(msg[i3] + msg[i3 + 1], 16));
    } else {
      for (var i3 = 0; i3 < msg.length; i3++) {
        var c5 = msg.charCodeAt(i3);
        var hi = c5 >> 8;
        var lo = c5 & 255;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    }
    return res;
  }
  utils5.toArray = toArray2;
  function zero2(word) {
    if (word.length === 1)
      return "0" + word;
    else
      return word;
  }
  utils5.zero2 = zero2;
  function toHex2(msg) {
    var res = "";
    for (var i3 = 0; i3 < msg.length; i3++)
      res += zero2(msg[i3].toString(16));
    return res;
  }
  utils5.toHex = toHex2;
  utils5.encode = function encode4(arr, enc) {
    if (enc === "hex")
      return toHex2(arr);
    else
      return arr;
  };
});
var utils_1$1 = createCommonjsModule2(function(module, exports) {
  "use strict";
  var utils5 = exports;
  utils5.assert = minimalisticAssert;
  utils5.toArray = utils_1.toArray;
  utils5.zero2 = utils_1.zero2;
  utils5.toHex = utils_1.toHex;
  utils5.encode = utils_1.encode;
  function getNAF2(num, w3, bits2) {
    var naf2 = new Array(Math.max(num.bitLength(), bits2) + 1);
    naf2.fill(0);
    var ws = 1 << w3 + 1;
    var k3 = num.clone();
    for (var i3 = 0; i3 < naf2.length; i3++) {
      var z2;
      var mod2 = k3.andln(ws - 1);
      if (k3.isOdd()) {
        if (mod2 > (ws >> 1) - 1)
          z2 = (ws >> 1) - mod2;
        else
          z2 = mod2;
        k3.isubn(z2);
      } else {
        z2 = 0;
      }
      naf2[i3] = z2;
      k3.iushrn(1);
    }
    return naf2;
  }
  utils5.getNAF = getNAF2;
  function getJSF2(k1, k22) {
    var jsf = [
      [],
      []
    ];
    k1 = k1.clone();
    k22 = k22.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while (k1.cmpn(-d1) > 0 || k22.cmpn(-d2) > 0) {
      var m14 = k1.andln(3) + d1 & 3;
      var m24 = k22.andln(3) + d2 & 3;
      if (m14 === 3)
        m14 = -1;
      if (m24 === 3)
        m24 = -1;
      var u1;
      if ((m14 & 1) === 0) {
        u1 = 0;
      } else {
        m8 = k1.andln(7) + d1 & 7;
        if ((m8 === 3 || m8 === 5) && m24 === 2)
          u1 = -m14;
        else
          u1 = m14;
      }
      jsf[0].push(u1);
      var u22;
      if ((m24 & 1) === 0) {
        u22 = 0;
      } else {
        m8 = k22.andln(7) + d2 & 7;
        if ((m8 === 3 || m8 === 5) && m14 === 2)
          u22 = -m24;
        else
          u22 = m24;
      }
      jsf[1].push(u22);
      if (2 * d1 === u1 + 1)
        d1 = 1 - d1;
      if (2 * d2 === u22 + 1)
        d2 = 1 - d2;
      k1.iushrn(1);
      k22.iushrn(1);
    }
    return jsf;
  }
  utils5.getJSF = getJSF2;
  function cachedProperty(obj, name2, computer) {
    var key2 = "_" + name2;
    obj.prototype[name2] = function cachedProperty2() {
      return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
    };
  }
  utils5.cachedProperty = cachedProperty;
  function parseBytes(bytes3) {
    return typeof bytes3 === "string" ? utils5.toArray(bytes3, "hex") : bytes3;
  }
  utils5.parseBytes = parseBytes;
  function intFromLE(bytes3) {
    return new import_bn2.default(bytes3, "hex", "le");
  }
  utils5.intFromLE = intFromLE;
});
var getNAF = utils_1$1.getNAF;
var getJSF = utils_1$1.getJSF;
var assert$1 = utils_1$1.assert;
function BaseCurve(type, conf) {
  this.type = type;
  this.p = new import_bn2.default(conf.p, 16);
  this.red = conf.prime ? import_bn2.default.red(conf.prime) : import_bn2.default.mont(this.p);
  this.zero = new import_bn2.default(0).toRed(this.red);
  this.one = new import_bn2.default(1).toRed(this.red);
  this.two = new import_bn2.default(2).toRed(this.red);
  this.n = conf.n && new import_bn2.default(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);
  this._bitLength = this.n ? this.n.bitLength() : 0;
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
var base = BaseCurve;
BaseCurve.prototype.point = function point() {
  throw new Error("Not implemented");
};
BaseCurve.prototype.validate = function validate() {
  throw new Error("Not implemented");
};
BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p2, k3) {
  assert$1(p2.precomputed);
  var doubles = p2._getDoubles();
  var naf2 = getNAF(k3, 1, this._bitLength);
  var I2 = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
  I2 /= 3;
  var repr = [];
  var j3;
  var nafW;
  for (j3 = 0; j3 < naf2.length; j3 += doubles.step) {
    nafW = 0;
    for (var l3 = j3 + doubles.step - 1; l3 >= j3; l3--)
      nafW = (nafW << 1) + naf2[l3];
    repr.push(nafW);
  }
  var a3 = this.jpoint(null, null, null);
  var b3 = this.jpoint(null, null, null);
  for (var i3 = I2; i3 > 0; i3--) {
    for (j3 = 0; j3 < repr.length; j3++) {
      nafW = repr[j3];
      if (nafW === i3)
        b3 = b3.mixedAdd(doubles.points[j3]);
      else if (nafW === -i3)
        b3 = b3.mixedAdd(doubles.points[j3].neg());
    }
    a3 = a3.add(b3);
  }
  return a3.toP();
};
BaseCurve.prototype._wnafMul = function _wnafMul(p2, k3) {
  var w3 = 4;
  var nafPoints = p2._getNAFPoints(w3);
  w3 = nafPoints.wnd;
  var wnd = nafPoints.points;
  var naf2 = getNAF(k3, w3, this._bitLength);
  var acc = this.jpoint(null, null, null);
  for (var i3 = naf2.length - 1; i3 >= 0; i3--) {
    for (var l3 = 0; i3 >= 0 && naf2[i3] === 0; i3--)
      l3++;
    if (i3 >= 0)
      l3++;
    acc = acc.dblp(l3);
    if (i3 < 0)
      break;
    var z2 = naf2[i3];
    assert$1(z2 !== 0);
    if (p2.type === "affine") {
      if (z2 > 0)
        acc = acc.mixedAdd(wnd[z2 - 1 >> 1]);
      else
        acc = acc.mixedAdd(wnd[-z2 - 1 >> 1].neg());
    } else {
      if (z2 > 0)
        acc = acc.add(wnd[z2 - 1 >> 1]);
      else
        acc = acc.add(wnd[-z2 - 1 >> 1].neg());
    }
  }
  return p2.type === "affine" ? acc.toP() : acc;
};
BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf2 = this._wnafT3;
  var max = 0;
  var i3;
  var j3;
  var p2;
  for (i3 = 0; i3 < len; i3++) {
    p2 = points[i3];
    var nafPoints = p2._getNAFPoints(defW);
    wndWidth[i3] = nafPoints.wnd;
    wnd[i3] = nafPoints.points;
  }
  for (i3 = len - 1; i3 >= 1; i3 -= 2) {
    var a3 = i3 - 1;
    var b3 = i3;
    if (wndWidth[a3] !== 1 || wndWidth[b3] !== 1) {
      naf2[a3] = getNAF(coeffs[a3], wndWidth[a3], this._bitLength);
      naf2[b3] = getNAF(coeffs[b3], wndWidth[b3], this._bitLength);
      max = Math.max(naf2[a3].length, max);
      max = Math.max(naf2[b3].length, max);
      continue;
    }
    var comb = [
      points[a3],
      null,
      null,
      points[b3]
    ];
    if (points[a3].y.cmp(points[b3].y) === 0) {
      comb[1] = points[a3].add(points[b3]);
      comb[2] = points[a3].toJ().mixedAdd(points[b3].neg());
    } else if (points[a3].y.cmp(points[b3].y.redNeg()) === 0) {
      comb[1] = points[a3].toJ().mixedAdd(points[b3]);
      comb[2] = points[a3].add(points[b3].neg());
    } else {
      comb[1] = points[a3].toJ().mixedAdd(points[b3]);
      comb[2] = points[a3].toJ().mixedAdd(points[b3].neg());
    }
    var index = [
      -3,
      -1,
      -5,
      -7,
      0,
      7,
      5,
      1,
      3
    ];
    var jsf = getJSF(coeffs[a3], coeffs[b3]);
    max = Math.max(jsf[0].length, max);
    naf2[a3] = new Array(max);
    naf2[b3] = new Array(max);
    for (j3 = 0; j3 < max; j3++) {
      var ja = jsf[0][j3] | 0;
      var jb = jsf[1][j3] | 0;
      naf2[a3][j3] = index[(ja + 1) * 3 + (jb + 1)];
      naf2[b3][j3] = 0;
      wnd[a3] = comb;
    }
  }
  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (i3 = max; i3 >= 0; i3--) {
    var k3 = 0;
    while (i3 >= 0) {
      var zero2 = true;
      for (j3 = 0; j3 < len; j3++) {
        tmp[j3] = naf2[j3][i3] | 0;
        if (tmp[j3] !== 0)
          zero2 = false;
      }
      if (!zero2)
        break;
      k3++;
      i3--;
    }
    if (i3 >= 0)
      k3++;
    acc = acc.dblp(k3);
    if (i3 < 0)
      break;
    for (j3 = 0; j3 < len; j3++) {
      var z2 = tmp[j3];
      p2;
      if (z2 === 0)
        continue;
      else if (z2 > 0)
        p2 = wnd[j3][z2 - 1 >> 1];
      else if (z2 < 0)
        p2 = wnd[j3][-z2 - 1 >> 1].neg();
      if (p2.type === "affine")
        acc = acc.mixedAdd(p2);
      else
        acc = acc.add(p2);
    }
  }
  for (i3 = 0; i3 < len; i3++)
    wnd[i3] = null;
  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};
function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;
BasePoint.prototype.eq = function eq2() {
  throw new Error("Not implemented");
};
BasePoint.prototype.validate = function validate2() {
  return this.curve.validate(this);
};
BaseCurve.prototype.decodePoint = function decodePoint(bytes3, enc) {
  bytes3 = utils_1$1.toArray(bytes3, enc);
  var len = this.p.byteLength();
  if ((bytes3[0] === 4 || bytes3[0] === 6 || bytes3[0] === 7) && bytes3.length - 1 === 2 * len) {
    if (bytes3[0] === 6)
      assert$1(bytes3[bytes3.length - 1] % 2 === 0);
    else if (bytes3[0] === 7)
      assert$1(bytes3[bytes3.length - 1] % 2 === 1);
    var res = this.point(bytes3.slice(1, 1 + len), bytes3.slice(1 + len, 1 + 2 * len));
    return res;
  } else if ((bytes3[0] === 2 || bytes3[0] === 3) && bytes3.length - 1 === len) {
    return this.pointFromX(bytes3.slice(1, 1 + len), bytes3[0] === 3);
  }
  throw new Error("Unknown point format");
};
BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};
BasePoint.prototype._encode = function _encode2(compact) {
  var len = this.curve.p.byteLength();
  var x3 = this.getX().toArray("be", len);
  if (compact)
    return [this.getY().isEven() ? 2 : 3].concat(x3);
  return [4].concat(x3, this.getY().toArray("be", len));
};
BasePoint.prototype.encode = function encode2(enc, compact) {
  return utils_1$1.encode(this._encode(compact), enc);
};
BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;
  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;
  return this;
};
BasePoint.prototype._hasDoubles = function _hasDoubles(k3) {
  if (!this.precomputed)
    return false;
  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;
  return doubles.points.length >= Math.ceil((k3.bitLength() + 1) / doubles.step);
};
BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;
  var doubles = [this];
  var acc = this;
  for (var i3 = 0; i3 < power; i3 += step) {
    for (var j3 = 0; j3 < step; j3++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step,
    points: doubles
  };
};
BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;
  var res = [this];
  var max = (1 << wnd) - 1;
  var dbl3 = max === 1 ? null : this.dbl();
  for (var i3 = 1; i3 < max; i3++)
    res[i3] = res[i3 - 1].add(dbl3);
  return {
    wnd,
    points: res
  };
};
BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};
BasePoint.prototype.dblp = function dblp(k3) {
  var r3 = this;
  for (var i3 = 0; i3 < k3; i3++)
    r3 = r3.dbl();
  return r3;
};
var inherits_browser = createCommonjsModule2(function(module) {
  if (typeof Object.create === "function") {
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
});
var assert$2 = utils_1$1.assert;
function ShortCurve(conf) {
  base.call(this, "short", conf);
  this.a = new import_bn2.default(conf.a, 16).toRed(this.red);
  this.b = new import_bn2.default(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();
  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits_browser(ShortCurve, base);
var short_1 = ShortCurve;
ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new import_bn2.default(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new import_bn2.default(conf.lambda, 16);
  } else {
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new import_bn2.default(vec.a, 16),
        b: new import_bn2.default(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }
  return {
    beta,
    lambda,
    basis
  };
};
ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  var red = num === this.p ? this.red : import_bn2.default.mont(num);
  var tinv = new import_bn2.default(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();
  var s2 = new import_bn2.default(3).toRed(red).redNeg().redSqrt().redMul(tinv);
  var l1 = ntinv.redAdd(s2).fromRed();
  var l22 = ntinv.redSub(s2).fromRed();
  return [l1, l22];
};
ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
  var u3 = lambda;
  var v3 = this.n.clone();
  var x1 = new import_bn2.default(1);
  var y1 = new import_bn2.default(0);
  var x22 = new import_bn2.default(0);
  var y22 = new import_bn2.default(1);
  var a0;
  var b0;
  var a1;
  var b1;
  var a22;
  var b22;
  var prevR;
  var i3 = 0;
  var r3;
  var x3;
  while (u3.cmpn(0) !== 0) {
    var q = v3.div(u3);
    r3 = v3.sub(q.mul(u3));
    x3 = x22.sub(q.mul(x1));
    var y3 = y22.sub(q.mul(y1));
    if (!a1 && r3.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r3.neg();
      b1 = x3;
    } else if (a1 && ++i3 === 2) {
      break;
    }
    prevR = r3;
    v3 = u3;
    u3 = r3;
    x22 = x1;
    x1 = x3;
    y22 = y1;
    y1 = y3;
  }
  a22 = r3.neg();
  b22 = x3;
  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a22.sqr().add(b22.sqr());
  if (len2.cmp(len1) >= 0) {
    a22 = a0;
    b22 = b0;
  }
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a22.negative) {
    a22 = a22.neg();
    b22 = b22.neg();
  }
  return [
    { a: a1, b: b1 },
    { a: a22, b: b22 }
  ];
};
ShortCurve.prototype._endoSplit = function _endoSplit(k3) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v22 = basis[1];
  var c1 = v22.b.mul(k3).divRound(this.n);
  var c22 = v1.b.neg().mul(k3).divRound(this.n);
  var p1 = c1.mul(v1.a);
  var p2 = c22.mul(v22.a);
  var q1 = c1.mul(v1.b);
  var q2 = c22.mul(v22.b);
  var k1 = k3.sub(p1).sub(p2);
  var k22 = q1.add(q2).neg();
  return { k1, k2: k22 };
};
ShortCurve.prototype.pointFromX = function pointFromX(x3, odd) {
  x3 = new import_bn2.default(x3, 16);
  if (!x3.red)
    x3 = x3.toRed(this.red);
  var y22 = x3.redSqr().redMul(x3).redIAdd(x3.redMul(this.a)).redIAdd(this.b);
  var y3 = y22.redSqrt();
  if (y3.redSqr().redSub(y22).cmp(this.zero) !== 0)
    throw new Error("invalid point");
  var isOdd2 = y3.fromRed().isOdd();
  if (odd && !isOdd2 || !odd && isOdd2)
    y3 = y3.redNeg();
  return this.point(x3, y3);
};
ShortCurve.prototype.validate = function validate3(point3) {
  if (point3.inf)
    return true;
  var x3 = point3.x;
  var y3 = point3.y;
  var ax = this.a.redMul(x3);
  var rhs = x3.redSqr().redMul(x3).redIAdd(ax).redIAdd(this.b);
  return y3.redSqr().redISub(rhs).cmpn(0) === 0;
};
ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i3 = 0; i3 < points.length; i3++) {
    var split = this._endoSplit(coeffs[i3]);
    var p2 = points[i3];
    var beta = p2._getBeta();
    if (split.k1.negative) {
      split.k1.ineg();
      p2 = p2.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }
    npoints[i3 * 2] = p2;
    npoints[i3 * 2 + 1] = beta;
    ncoeffs[i3 * 2] = split.k1;
    ncoeffs[i3 * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i3 * 2, jacobianResult);
  for (var j3 = 0; j3 < i3 * 2; j3++) {
    npoints[j3] = null;
    ncoeffs[j3] = null;
  }
  return res;
};
function Point(curve, x3, y3, isRed) {
  base.BasePoint.call(this, curve, "affine");
  if (x3 === null && y3 === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new import_bn2.default(x3, 16);
    this.y = new import_bn2.default(y3, 16);
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits_browser(Point, base.BasePoint);
ShortCurve.prototype.point = function point2(x3, y3, isRed) {
  return new Point(this, x3, y3, isRed);
};
ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};
Point.prototype._getBeta = function _getBeta2() {
  if (!this.curve.endo)
    return;
  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;
  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p2) {
      return curve.point(p2.x.redMul(curve.endo.beta), p2.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};
Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [this.x, this.y];
  return [this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  }];
};
Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === "string")
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;
  function obj2point(obj2) {
    return curve.point(obj2[0], obj2[1], red);
  }
  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [res].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [res].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};
Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return "<EC Point Infinity>";
  return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
};
Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};
Point.prototype.add = function add2(p2) {
  if (this.inf)
    return p2;
  if (p2.inf)
    return this;
  if (this.eq(p2))
    return this.dbl();
  if (this.neg().eq(p2))
    return this.curve.point(null, null);
  if (this.x.cmp(p2.x) === 0)
    return this.curve.point(null, null);
  var c5 = this.y.redSub(p2.y);
  if (c5.cmpn(0) !== 0)
    c5 = c5.redMul(this.x.redSub(p2.x).redInvm());
  var nx = c5.redSqr().redISub(this.x).redISub(p2.x);
  var ny = c5.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};
Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);
  var a3 = this.curve.a;
  var x22 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c5 = x22.redAdd(x22).redIAdd(x22).redIAdd(a3).redMul(dyinv);
  var nx = c5.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c5.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};
Point.prototype.getX = function getX() {
  return this.x.fromRed();
};
Point.prototype.getY = function getY() {
  return this.y.fromRed();
};
Point.prototype.mul = function mul2(k3) {
  k3 = new import_bn2.default(k3, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k3))
    return this.curve._fixedNafMul(this, k3);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([this], [k3]);
  else
    return this.curve._wnafMul(this, k3);
};
Point.prototype.mulAdd = function mulAdd(k1, p2, k22) {
  var points = [this, p2];
  var coeffs = [k1, k22];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p2, k22) {
  var points = [this, p2];
  var coeffs = [k1, k22];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
Point.prototype.eq = function eq3(p2) {
  return this === p2 || this.inf === p2.inf && (this.inf || this.x.cmp(p2.x) === 0 && this.y.cmp(p2.y) === 0);
};
Point.prototype.neg = function neg2(_precompute) {
  if (this.inf)
    return this;
  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p2) {
      return p2.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};
Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);
  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};
function JPoint(curve, x3, y3, z2) {
  base.BasePoint.call(this, curve, "jacobian");
  if (x3 === null && y3 === null && z2 === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new import_bn2.default(0);
  } else {
    this.x = new import_bn2.default(x3, 16);
    this.y = new import_bn2.default(y3, 16);
    this.z = new import_bn2.default(z2, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);
  this.zOne = this.z === this.curve.one;
}
inherits_browser(JPoint, base.BasePoint);
ShortCurve.prototype.jpoint = function jpoint(x3, y3, z2) {
  return new JPoint(this, x3, y3, z2);
};
JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);
  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);
  return this.curve.point(ax, ay);
};
JPoint.prototype.neg = function neg3() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
JPoint.prototype.add = function add3(p2) {
  if (this.isInfinity())
    return p2;
  if (p2.isInfinity())
    return this;
  var pz2 = p2.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u22 = p2.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p2.z));
  var s2 = p2.y.redMul(z2.redMul(this.z));
  var h3 = u1.redSub(u22);
  var r3 = s1.redSub(s2);
  if (h3.cmpn(0) === 0) {
    if (r3.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }
  var h22 = h3.redSqr();
  var h32 = h22.redMul(h3);
  var v3 = u1.redMul(h22);
  var nx = r3.redSqr().redIAdd(h32).redISub(v3).redISub(v3);
  var ny = r3.redMul(v3.redISub(nx)).redISub(s1.redMul(h32));
  var nz = this.z.redMul(p2.z).redMul(h3);
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mixedAdd = function mixedAdd(p2) {
  if (this.isInfinity())
    return p2.toJ();
  if (p2.isInfinity())
    return this;
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u22 = p2.x.redMul(z2);
  var s1 = this.y;
  var s2 = p2.y.redMul(z2).redMul(this.z);
  var h3 = u1.redSub(u22);
  var r3 = s1.redSub(s2);
  if (h3.cmpn(0) === 0) {
    if (r3.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }
  var h22 = h3.redSqr();
  var h32 = h22.redMul(h3);
  var v3 = u1.redMul(h22);
  var nx = r3.redSqr().redIAdd(h32).redISub(v3).redISub(v3);
  var ny = r3.redMul(v3.redISub(nx)).redISub(s1.redMul(h32));
  var nz = this.z.redMul(h3);
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.dblp = function dblp2(pow2) {
  if (pow2 === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow2)
    return this.dbl();
  var i3;
  if (this.curve.zeroA || this.curve.threeA) {
    var r3 = this;
    for (i3 = 0; i3 < pow2; i3++)
      r3 = r3.dbl();
    return r3;
  }
  var a3 = this.curve.a;
  var tinv = this.curve.tinv;
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();
  var jyd = jy.redAdd(jy);
  for (i3 = 0; i3 < pow2; i3++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c5 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a3.redMul(jz4));
    var t1 = jx.redMul(jyd2);
    var nx = c5.redSqr().redISub(t1.redAdd(t1));
    var t22 = t1.redISub(nx);
    var dny = c5.redMul(t22);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i3 + 1 < pow2)
      jz4 = jz4.redMul(jyd4);
    jx = nx;
    jz = nz;
    jyd = dny;
  }
  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
JPoint.prototype.dbl = function dbl2() {
  if (this.isInfinity())
    return this;
  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};
JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  if (this.zOne) {
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var yyyy = yy.redSqr();
    var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s2 = s2.redIAdd(s2);
    var m3 = xx.redAdd(xx).redIAdd(xx);
    var t3 = m3.redSqr().redISub(s2).redISub(s2);
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    nx = t3;
    ny = m3.redMul(s2.redISub(t3)).redISub(yyyy8);
    nz = this.y.redAdd(this.y);
  } else {
    var a3 = this.x.redSqr();
    var b3 = this.y.redSqr();
    var c5 = b3.redSqr();
    var d2 = this.x.redAdd(b3).redSqr().redISub(a3).redISub(c5);
    d2 = d2.redIAdd(d2);
    var e4 = a3.redAdd(a3).redIAdd(a3);
    var f3 = e4.redSqr();
    var c8 = c5.redIAdd(c5);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);
    nx = f3.redISub(d2).redISub(d2);
    ny = e4.redMul(d2.redISub(nx)).redISub(c8);
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  if (this.zOne) {
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var yyyy = yy.redSqr();
    var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s2 = s2.redIAdd(s2);
    var m3 = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    var t3 = m3.redSqr().redISub(s2).redISub(s2);
    nx = t3;
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m3.redMul(s2.redISub(t3)).redISub(yyyy8);
    nz = this.y.redAdd(this.y);
  } else {
    var delta = this.z.redSqr();
    var gamma = this.y.redSqr();
    var beta = this.x.redMul(gamma);
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._dbl = function _dbl() {
  var a3 = this.curve.a;
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();
  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();
  var c5 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a3.redMul(jz4));
  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c5.redSqr().redISub(t1.redAdd(t1));
  var t22 = t1.redISub(nx);
  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c5.redMul(t22).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);
  var xx = this.x.redSqr();
  var yy = this.y.redSqr();
  var zz = this.z.redSqr();
  var yyyy = yy.redSqr();
  var m3 = xx.redAdd(xx).redIAdd(xx);
  var mm = m3.redSqr();
  var e4 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e4 = e4.redIAdd(e4);
  e4 = e4.redAdd(e4).redIAdd(e4);
  e4 = e4.redISub(mm);
  var ee = e4.redSqr();
  var t3 = yyyy.redIAdd(yyyy);
  t3 = t3.redIAdd(t3);
  t3 = t3.redIAdd(t3);
  t3 = t3.redIAdd(t3);
  var u3 = m3.redIAdd(e4).redSqr().redISub(mm).redISub(ee).redISub(t3);
  var yyu4 = yy.redMul(u3);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  var ny = this.y.redMul(u3.redMul(t3.redISub(u3)).redISub(e4.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  var nz = this.z.redAdd(e4).redSqr().redISub(zz).redISub(ee);
  return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mul = function mul3(k3, kbase) {
  k3 = new import_bn2.default(k3, kbase);
  return this.curve._wnafMul(this, k3);
};
JPoint.prototype.eq = function eq4(p2) {
  if (p2.type === "affine")
    return this.eq(p2.toJ());
  if (this === p2)
    return true;
  var z2 = this.z.redSqr();
  var pz2 = p2.z.redSqr();
  if (this.x.redMul(pz2).redISub(p2.x.redMul(z2)).cmpn(0) !== 0)
    return false;
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p2.z);
  return this.y.redMul(pz3).redISub(p2.y.redMul(z3)).cmpn(0) === 0;
};
JPoint.prototype.eqXToP = function eqXToP(x3) {
  var zs = this.z.redSqr();
  var rx = x3.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;
  var xc = x3.clone();
  var t3 = this.curve.redN.redMul(zs);
  for (; ; ) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;
    rx.redIAdd(t3);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};
JPoint.prototype.inspect = function inspect2() {
  if (this.isInfinity())
    return "<EC JPoint Infinity>";
  return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
};
JPoint.prototype.isInfinity = function isInfinity2() {
  return this.z.cmpn(0) === 0;
};
var curve_1 = createCommonjsModule2(function(module, exports) {
  "use strict";
  var curve = exports;
  curve.base = base;
  curve.short = short_1;
  curve.mont = null;
  curve.edwards = null;
});
var curves_1 = createCommonjsModule2(function(module, exports) {
  "use strict";
  var curves = exports;
  var assert4 = utils_1$1.assert;
  function PresetCurve(options) {
    if (options.type === "short")
      this.curve = new curve_1.short(options);
    else if (options.type === "edwards")
      this.curve = new curve_1.edwards(options);
    else
      this.curve = new curve_1.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert4(this.g.validate(), "Invalid curve");
    assert4(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
  }
  curves.PresetCurve = PresetCurve;
  function defineCurve(name2, options) {
    Object.defineProperty(curves, name2, {
      configurable: true,
      enumerable: true,
      get: function() {
        var curve = new PresetCurve(options);
        Object.defineProperty(curves, name2, {
          configurable: true,
          enumerable: true,
          value: curve
        });
        return curve;
      }
    });
  }
  defineCurve("p192", {
    type: "short",
    prime: "p192",
    p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
    b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
    n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
    hash: import_hash2.default.sha256,
    gRed: false,
    g: [
      "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
      "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
    ]
  });
  defineCurve("p224", {
    type: "short",
    prime: "p224",
    p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
    b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
    n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
    hash: import_hash2.default.sha256,
    gRed: false,
    g: [
      "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
      "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
    ]
  });
  defineCurve("p256", {
    type: "short",
    prime: null,
    p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
    a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
    b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
    n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
    hash: import_hash2.default.sha256,
    gRed: false,
    g: [
      "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
      "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
    ]
  });
  defineCurve("p384", {
    type: "short",
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: import_hash2.default.sha384,
    gRed: false,
    g: [
      "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
      "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
    ]
  });
  defineCurve("p521", {
    type: "short",
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: import_hash2.default.sha512,
    gRed: false,
    g: [
      "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
      "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
    ]
  });
  defineCurve("curve25519", {
    type: "mont",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "76d06",
    b: "1",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: import_hash2.default.sha256,
    gRed: false,
    g: [
      "9"
    ]
  });
  defineCurve("ed25519", {
    type: "edwards",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "-1",
    c: "1",
    d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: import_hash2.default.sha256,
    gRed: false,
    g: [
      "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
      "6666666666666666666666666666666666666666666666666666666666666658"
    ]
  });
  var pre;
  try {
    pre = null.crash();
  } catch (e4) {
    pre = void 0;
  }
  defineCurve("secp256k1", {
    type: "short",
    prime: "k256",
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
    a: "0",
    b: "7",
    n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
    h: "1",
    hash: import_hash2.default.sha256,
    beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
    lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
    basis: [
      {
        a: "3086d221a7d46bcde86c90e49284eb15",
        b: "-e4437ed6010e88286f547fa90abfe4c3"
      },
      {
        a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
        b: "3086d221a7d46bcde86c90e49284eb15"
      }
    ],
    gRed: false,
    g: [
      "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
      "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
      pre
    ]
  });
});
function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;
  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;
  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;
  var entropy = utils_1.toArray(options.entropy, options.entropyEnc || "hex");
  var nonce = utils_1.toArray(options.nonce, options.nonceEnc || "hex");
  var pers = utils_1.toArray(options.pers, options.persEnc || "hex");
  minimalisticAssert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
  this._init(entropy, nonce, pers);
}
var hmacDrbg = HmacDRBG;
HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);
  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i3 = 0; i3 < this.V.length; i3++) {
    this.K[i3] = 0;
    this.V[i3] = 1;
  }
  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 281474976710656;
};
HmacDRBG.prototype._hmac = function hmac() {
  return new import_hash2.default.hmac(this.hash, this.K);
};
HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac().update(this.V).update([0]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;
  this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
  this.V = this._hmac().update(this.V).digest();
};
HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add4, addEnc) {
  if (typeof entropyEnc !== "string") {
    addEnc = add4;
    add4 = entropyEnc;
    entropyEnc = null;
  }
  entropy = utils_1.toArray(entropy, entropyEnc);
  add4 = utils_1.toArray(add4, addEnc);
  minimalisticAssert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
  this._update(entropy.concat(add4 || []));
  this._reseed = 1;
};
HmacDRBG.prototype.generate = function generate(len, enc, add4, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error("Reseed is required");
  if (typeof enc !== "string") {
    addEnc = add4;
    add4 = enc;
    enc = null;
  }
  if (add4) {
    add4 = utils_1.toArray(add4, addEnc || "hex");
    this._update(add4);
  }
  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }
  var res = temp.slice(0, len);
  this._update(add4);
  this._reseed++;
  return utils_1.encode(res, enc);
};
var assert$3 = utils_1$1.assert;
function KeyPair(ec2, options) {
  this.ec = ec2;
  this.priv = null;
  this.pub = null;
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
var key = KeyPair;
KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(ec2, {
    pub,
    pubEnc: enc
  });
};
KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;
  return new KeyPair(ec2, {
    priv,
    privEnc: enc
  });
};
KeyPair.prototype.validate = function validate4() {
  var pub = this.getPublic();
  if (pub.isInfinity())
    return { result: false, reason: "Invalid public key" };
  if (!pub.validate())
    return { result: false, reason: "Public key is not a point" };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: "Public key * N != O" };
  return { result: true, reason: null };
};
KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  if (typeof compact === "string") {
    enc = compact;
    compact = null;
  }
  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);
  if (!enc)
    return this.pub;
  return this.pub.encode(enc, compact);
};
KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === "hex")
    return this.priv.toString(16, 2);
  else
    return this.priv;
};
KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
  this.priv = new import_bn2.default(key2, enc || 16);
  this.priv = this.priv.umod(this.ec.curve.n);
};
KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
  if (key2.x || key2.y) {
    if (this.ec.curve.type === "mont") {
      assert$3(key2.x, "Need x coordinate");
    } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
      assert$3(key2.x && key2.y, "Need both x and y coordinate");
    }
    this.pub = this.ec.curve.point(key2.x, key2.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key2, enc);
};
KeyPair.prototype.derive = function derive(pub) {
  if (!pub.validate()) {
    assert$3(pub.validate(), "public point not validated");
  }
  return pub.mul(this.priv).getX();
};
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};
KeyPair.prototype.verify = function verify(msg, signature2) {
  return this.ec.verify(msg, signature2, this);
};
KeyPair.prototype.inspect = function inspect3() {
  return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
};
var assert$4 = utils_1$1.assert;
function Signature(options, enc) {
  if (options instanceof Signature)
    return options;
  if (this._importDER(options, enc))
    return;
  assert$4(options.r && options.s, "Signature without r or s");
  this.r = new import_bn2.default(options.r, 16);
  this.s = new import_bn2.default(options.s, 16);
  if (options.recoveryParam === void 0)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
var signature = Signature;
function Position() {
  this.place = 0;
}
function getLength(buf, p2) {
  var initial = buf[p2.place++];
  if (!(initial & 128)) {
    return initial;
  }
  var octetLen = initial & 15;
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }
  var val2 = 0;
  for (var i3 = 0, off = p2.place; i3 < octetLen; i3++, off++) {
    val2 <<= 8;
    val2 |= buf[off];
    val2 >>>= 0;
  }
  if (val2 <= 127) {
    return false;
  }
  p2.place = off;
  return val2;
}
function rmPadding(buf) {
  var i3 = 0;
  var len = buf.length - 1;
  while (!buf[i3] && !(buf[i3 + 1] & 128) && i3 < len) {
    i3++;
  }
  if (i3 === 0) {
    return buf;
  }
  return buf.slice(i3);
}
Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils_1$1.toArray(data, enc);
  var p2 = new Position();
  if (data[p2.place++] !== 48) {
    return false;
  }
  var len = getLength(data, p2);
  if (len === false) {
    return false;
  }
  if (len + p2.place !== data.length) {
    return false;
  }
  if (data[p2.place++] !== 2) {
    return false;
  }
  var rlen = getLength(data, p2);
  if (rlen === false) {
    return false;
  }
  var r3 = data.slice(p2.place, rlen + p2.place);
  p2.place += rlen;
  if (data[p2.place++] !== 2) {
    return false;
  }
  var slen = getLength(data, p2);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p2.place) {
    return false;
  }
  var s2 = data.slice(p2.place, slen + p2.place);
  if (r3[0] === 0) {
    if (r3[1] & 128) {
      r3 = r3.slice(1);
    } else {
      return false;
    }
  }
  if (s2[0] === 0) {
    if (s2[1] & 128) {
      s2 = s2.slice(1);
    } else {
      return false;
    }
  }
  this.r = new import_bn2.default(r3);
  this.s = new import_bn2.default(s2);
  this.recoveryParam = null;
  return true;
};
function constructLength(arr, len) {
  if (len < 128) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 128);
  while (--octets) {
    arr.push(len >>> (octets << 3) & 255);
  }
  arr.push(len);
}
Signature.prototype.toDER = function toDER(enc) {
  var r3 = this.r.toArray();
  var s2 = this.s.toArray();
  if (r3[0] & 128)
    r3 = [0].concat(r3);
  if (s2[0] & 128)
    s2 = [0].concat(s2);
  r3 = rmPadding(r3);
  s2 = rmPadding(s2);
  while (!s2[0] && !(s2[1] & 128)) {
    s2 = s2.slice(1);
  }
  var arr = [2];
  constructLength(arr, r3.length);
  arr = arr.concat(r3);
  arr.push(2);
  constructLength(arr, s2.length);
  var backHalf = arr.concat(s2);
  var res = [48];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils_1$1.encode(res, enc);
};
var rand = function() {
  throw new Error("unsupported");
};
var assert$5 = utils_1$1.assert;
function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);
  if (typeof options === "string") {
    assert$5(Object.prototype.hasOwnProperty.call(curves_1, options), "Unknown curve " + options);
    options = curves_1[options];
  }
  if (options instanceof curves_1.PresetCurve)
    options = { curve: options };
  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);
  this.hash = options.hash || options.curve.hash;
}
var ec = EC;
EC.prototype.keyPair = function keyPair(options) {
  return new key(this, options);
};
EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return key.fromPrivate(this, priv, enc);
};
EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return key.fromPublic(this, pub, enc);
};
EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};
  var drbg = new hmacDrbg({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || "utf8",
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || "utf8",
    nonce: this.n.toArray()
  });
  var bytes3 = this.n.byteLength();
  var ns2 = this.n.sub(new import_bn2.default(2));
  for (; ; ) {
    var priv = new import_bn2.default(drbg.generate(bytes3));
    if (priv.cmp(ns2) > 0)
      continue;
    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  }
};
EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};
EC.prototype.sign = function sign2(msg, key2, enc, options) {
  if (typeof enc === "object") {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};
  key2 = this.keyFromPrivate(key2, enc);
  msg = this._truncateToN(new import_bn2.default(msg, 16));
  var bytes3 = this.n.byteLength();
  var bkey = key2.getPrivate().toArray("be", bytes3);
  var nonce = msg.toArray("be", bytes3);
  var drbg = new hmacDrbg({
    hash: this.hash,
    entropy: bkey,
    nonce,
    pers: options.pers,
    persEnc: options.persEnc || "utf8"
  });
  var ns1 = this.n.sub(new import_bn2.default(1));
  for (var iter = 0; ; iter++) {
    var k3 = options.k ? options.k(iter) : new import_bn2.default(drbg.generate(this.n.byteLength()));
    k3 = this._truncateToN(k3, true);
    if (k3.cmpn(1) <= 0 || k3.cmp(ns1) >= 0)
      continue;
    var kp = this.g.mul(k3);
    if (kp.isInfinity())
      continue;
    var kpX = kp.getX();
    var r3 = kpX.umod(this.n);
    if (r3.cmpn(0) === 0)
      continue;
    var s2 = k3.invm(this.n).mul(r3.mul(key2.getPrivate()).iadd(msg));
    s2 = s2.umod(this.n);
    if (s2.cmpn(0) === 0)
      continue;
    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r3) !== 0 ? 2 : 0);
    if (options.canonical && s2.cmp(this.nh) > 0) {
      s2 = this.n.sub(s2);
      recoveryParam ^= 1;
    }
    return new signature({ r: r3, s: s2, recoveryParam });
  }
};
EC.prototype.verify = function verify2(msg, signature$1, key2, enc) {
  msg = this._truncateToN(new import_bn2.default(msg, 16));
  key2 = this.keyFromPublic(key2, enc);
  signature$1 = new signature(signature$1, "hex");
  var r3 = signature$1.r;
  var s2 = signature$1.s;
  if (r3.cmpn(1) < 0 || r3.cmp(this.n) >= 0)
    return false;
  if (s2.cmpn(1) < 0 || s2.cmp(this.n) >= 0)
    return false;
  var sinv = s2.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u22 = sinv.mul(r3).umod(this.n);
  var p2;
  if (!this.curve._maxwellTrick) {
    p2 = this.g.mulAdd(u1, key2.getPublic(), u22);
    if (p2.isInfinity())
      return false;
    return p2.getX().umod(this.n).cmp(r3) === 0;
  }
  p2 = this.g.jmulAdd(u1, key2.getPublic(), u22);
  if (p2.isInfinity())
    return false;
  return p2.eqXToP(r3);
};
EC.prototype.recoverPubKey = function(msg, signature$1, j3, enc) {
  assert$5((3 & j3) === j3, "The recovery param is more than two bits");
  signature$1 = new signature(signature$1, enc);
  var n2 = this.n;
  var e4 = new import_bn2.default(msg);
  var r3 = signature$1.r;
  var s2 = signature$1.s;
  var isYOdd = j3 & 1;
  var isSecondKey = j3 >> 1;
  if (r3.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error("Unable to find sencond key candinate");
  if (isSecondKey)
    r3 = this.curve.pointFromX(r3.add(this.curve.n), isYOdd);
  else
    r3 = this.curve.pointFromX(r3, isYOdd);
  var rInv = signature$1.r.invm(n2);
  var s1 = n2.sub(e4).mul(rInv).umod(n2);
  var s22 = s2.mul(rInv).umod(n2);
  return this.g.mulAdd(s1, r3, s22);
};
EC.prototype.getKeyRecoveryParam = function(e4, signature$1, Q, enc) {
  signature$1 = new signature(signature$1, enc);
  if (signature$1.recoveryParam !== null)
    return signature$1.recoveryParam;
  for (var i3 = 0; i3 < 4; i3++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e4, signature$1, i3);
    } catch (e5) {
      continue;
    }
    if (Qprime.eq(Q))
      return i3;
  }
  throw new Error("Unable to find valid recovery factor");
};
var elliptic_1 = createCommonjsModule2(function(module, exports) {
  "use strict";
  var elliptic = exports;
  elliptic.version = { version: "6.5.4" }.version;
  elliptic.utils = utils_1$1;
  elliptic.rand = function() {
    throw new Error("unsupported");
  };
  elliptic.curve = curve_1;
  elliptic.curves = curves_1;
  elliptic.ec = ec;
  elliptic.eddsa = null;
});
var EC$1 = elliptic_1.ec;

// node_modules/@ethersproject/signing-key/lib.esm/_version.js
var version12 = "signing-key/5.6.0";

// node_modules/@ethersproject/signing-key/lib.esm/index.js
"use strict";
var logger17 = new Logger(version12);
var _curve = null;
function getCurve() {
  if (!_curve) {
    _curve = new EC$1("secp256k1");
  }
  return _curve;
}
var SigningKey = class {
  constructor(privateKey) {
    defineReadOnly(this, "curve", "secp256k1");
    defineReadOnly(this, "privateKey", hexlify(privateKey));
    const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
    defineReadOnly(this, "publicKey", "0x" + keyPair2.getPublic(false, "hex"));
    defineReadOnly(this, "compressedPublicKey", "0x" + keyPair2.getPublic(true, "hex"));
    defineReadOnly(this, "_isSigningKey", true);
  }
  _addPoint(other) {
    const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
    const p1 = getCurve().keyFromPublic(arrayify(other));
    return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
  }
  signDigest(digest) {
    const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
    const digestBytes = arrayify(digest);
    if (digestBytes.length !== 32) {
      logger17.throwArgumentError("bad digest length", "digest", digest);
    }
    const signature2 = keyPair2.sign(digestBytes, { canonical: true });
    return splitSignature({
      recoveryParam: signature2.recoveryParam,
      r: hexZeroPad("0x" + signature2.r.toString(16), 32),
      s: hexZeroPad("0x" + signature2.s.toString(16), 32)
    });
  }
  computeSharedSecret(otherKey) {
    const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
    const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
    return hexZeroPad("0x" + keyPair2.derive(otherKeyPair.getPublic()).toString(16), 32);
  }
  static isSigningKey(value) {
    return !!(value && value._isSigningKey);
  }
};
function recoverPublicKey(digest, signature2) {
  const sig = splitSignature(signature2);
  const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };
  return "0x" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode("hex", false);
}
function computePublicKey(key2, compressed) {
  const bytes3 = arrayify(key2);
  if (bytes3.length === 32) {
    const signingKey = new SigningKey(bytes3);
    if (compressed) {
      return "0x" + getCurve().keyFromPrivate(bytes3).getPublic(true, "hex");
    }
    return signingKey.publicKey;
  } else if (bytes3.length === 33) {
    if (compressed) {
      return hexlify(bytes3);
    }
    return "0x" + getCurve().keyFromPublic(bytes3).getPublic(false, "hex");
  } else if (bytes3.length === 65) {
    if (!compressed) {
      return hexlify(bytes3);
    }
    return "0x" + getCurve().keyFromPublic(bytes3).getPublic(true, "hex");
  }
  return logger17.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
}

// node_modules/@ethersproject/transactions/lib.esm/_version.js
var version13 = "transactions/5.6.0";

// node_modules/@ethersproject/transactions/lib.esm/index.js
"use strict";
var logger18 = new Logger(version13);
var TransactionTypes;
(function(TransactionTypes2) {
  TransactionTypes2[TransactionTypes2["legacy"] = 0] = "legacy";
  TransactionTypes2[TransactionTypes2["eip2930"] = 1] = "eip2930";
  TransactionTypes2[TransactionTypes2["eip1559"] = 2] = "eip1559";
})(TransactionTypes || (TransactionTypes = {}));
function handleAddress(value) {
  if (value === "0x") {
    return null;
  }
  return getAddress(value);
}
function handleNumber(value) {
  if (value === "0x") {
    return Zero2;
  }
  return BigNumber3.from(value);
}
var transactionFields = [
  { name: "nonce", maxLength: 32, numeric: true },
  { name: "gasPrice", maxLength: 32, numeric: true },
  { name: "gasLimit", maxLength: 32, numeric: true },
  { name: "to", length: 20 },
  { name: "value", maxLength: 32, numeric: true },
  { name: "data" }
];
var allowedTransactionKeys2 = {
  chainId: true,
  data: true,
  gasLimit: true,
  gasPrice: true,
  nonce: true,
  to: true,
  type: true,
  value: true
};
function computeAddress(key2) {
  const publicKey = computePublicKey(key2);
  return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));
}
function recoverAddress(digest, signature2) {
  return computeAddress(recoverPublicKey(arrayify(digest), signature2));
}
function formatNumber(value, name2) {
  const result = stripZeros(BigNumber3.from(value).toHexString());
  if (result.length > 32) {
    logger18.throwArgumentError("invalid length for " + name2, "transaction:" + name2, value);
  }
  return result;
}
function accessSetify(addr, storageKeys) {
  return {
    address: getAddress(addr),
    storageKeys: (storageKeys || []).map((storageKey, index) => {
      if (hexDataLength(storageKey) !== 32) {
        logger18.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index}]`, storageKey);
      }
      return storageKey.toLowerCase();
    })
  };
}
function accessListify(value) {
  if (Array.isArray(value)) {
    return value.map((set, index) => {
      if (Array.isArray(set)) {
        if (set.length > 2) {
          logger18.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index}]`, set);
        }
        return accessSetify(set[0], set[1]);
      }
      return accessSetify(set.address, set.storageKeys);
    });
  }
  const result = Object.keys(value).map((addr) => {
    const storageKeys = value[addr].reduce((accum, storageKey) => {
      accum[storageKey] = true;
      return accum;
    }, {});
    return accessSetify(addr, Object.keys(storageKeys).sort());
  });
  result.sort((a3, b3) => a3.address.localeCompare(b3.address));
  return result;
}
function formatAccessList(value) {
  return accessListify(value).map((set) => [set.address, set.storageKeys]);
}
function _serializeEip1559(transaction, signature2) {
  if (transaction.gasPrice != null) {
    const gasPrice = BigNumber3.from(transaction.gasPrice);
    const maxFeePerGas = BigNumber3.from(transaction.maxFeePerGas || 0);
    if (!gasPrice.eq(maxFeePerGas)) {
      logger18.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
        gasPrice,
        maxFeePerGas
      });
    }
  }
  const fields = [
    formatNumber(transaction.chainId || 0, "chainId"),
    formatNumber(transaction.nonce || 0, "nonce"),
    formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
    formatNumber(transaction.gasLimit || 0, "gasLimit"),
    transaction.to != null ? getAddress(transaction.to) : "0x",
    formatNumber(transaction.value || 0, "value"),
    transaction.data || "0x",
    formatAccessList(transaction.accessList || [])
  ];
  if (signature2) {
    const sig = splitSignature(signature2);
    fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
    fields.push(stripZeros(sig.r));
    fields.push(stripZeros(sig.s));
  }
  return hexConcat(["0x02", encode(fields)]);
}
function _serializeEip2930(transaction, signature2) {
  const fields = [
    formatNumber(transaction.chainId || 0, "chainId"),
    formatNumber(transaction.nonce || 0, "nonce"),
    formatNumber(transaction.gasPrice || 0, "gasPrice"),
    formatNumber(transaction.gasLimit || 0, "gasLimit"),
    transaction.to != null ? getAddress(transaction.to) : "0x",
    formatNumber(transaction.value || 0, "value"),
    transaction.data || "0x",
    formatAccessList(transaction.accessList || [])
  ];
  if (signature2) {
    const sig = splitSignature(signature2);
    fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
    fields.push(stripZeros(sig.r));
    fields.push(stripZeros(sig.s));
  }
  return hexConcat(["0x01", encode(fields)]);
}
function _serialize(transaction, signature2) {
  checkProperties(transaction, allowedTransactionKeys2);
  const raw = [];
  transactionFields.forEach(function(fieldInfo) {
    let value = transaction[fieldInfo.name] || [];
    const options = {};
    if (fieldInfo.numeric) {
      options.hexPad = "left";
    }
    value = arrayify(hexlify(value, options));
    if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
      logger18.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
    }
    if (fieldInfo.maxLength) {
      value = stripZeros(value);
      if (value.length > fieldInfo.maxLength) {
        logger18.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
      }
    }
    raw.push(hexlify(value));
  });
  let chainId = 0;
  if (transaction.chainId != null) {
    chainId = transaction.chainId;
    if (typeof chainId !== "number") {
      logger18.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
    }
  } else if (signature2 && !isBytesLike(signature2) && signature2.v > 28) {
    chainId = Math.floor((signature2.v - 35) / 2);
  }
  if (chainId !== 0) {
    raw.push(hexlify(chainId));
    raw.push("0x");
    raw.push("0x");
  }
  if (!signature2) {
    return encode(raw);
  }
  const sig = splitSignature(signature2);
  let v3 = 27 + sig.recoveryParam;
  if (chainId !== 0) {
    raw.pop();
    raw.pop();
    raw.pop();
    v3 += chainId * 2 + 8;
    if (sig.v > 28 && sig.v !== v3) {
      logger18.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature2);
    }
  } else if (sig.v !== v3) {
    logger18.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature2);
  }
  raw.push(hexlify(v3));
  raw.push(stripZeros(arrayify(sig.r)));
  raw.push(stripZeros(arrayify(sig.s)));
  return encode(raw);
}
function serialize(transaction, signature2) {
  if (transaction.type == null || transaction.type === 0) {
    if (transaction.accessList != null) {
      logger18.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
    }
    return _serialize(transaction, signature2);
  }
  switch (transaction.type) {
    case 1:
      return _serializeEip2930(transaction, signature2);
    case 2:
      return _serializeEip1559(transaction, signature2);
    default:
      break;
  }
  return logger18.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {
    operation: "serializeTransaction",
    transactionType: transaction.type
  });
}
function _parseEipSignature(tx, fields, serialize3) {
  try {
    const recid = handleNumber(fields[0]).toNumber();
    if (recid !== 0 && recid !== 1) {
      throw new Error("bad recid");
    }
    tx.v = recid;
  } catch (error) {
    logger18.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
  }
  tx.r = hexZeroPad(fields[1], 32);
  tx.s = hexZeroPad(fields[2], 32);
  try {
    const digest = keccak256(serialize3(tx));
    tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });
  } catch (error) {
    console.log(error);
  }
}
function _parseEip1559(payload) {
  const transaction = decode(payload.slice(1));
  if (transaction.length !== 9 && transaction.length !== 12) {
    logger18.throwArgumentError("invalid component count for transaction type: 2", "payload", hexlify(payload));
  }
  const maxPriorityFeePerGas = handleNumber(transaction[2]);
  const maxFeePerGas = handleNumber(transaction[3]);
  const tx = {
    type: 2,
    chainId: handleNumber(transaction[0]).toNumber(),
    nonce: handleNumber(transaction[1]).toNumber(),
    maxPriorityFeePerGas,
    maxFeePerGas,
    gasPrice: null,
    gasLimit: handleNumber(transaction[4]),
    to: handleAddress(transaction[5]),
    value: handleNumber(transaction[6]),
    data: transaction[7],
    accessList: accessListify(transaction[8])
  };
  if (transaction.length === 9) {
    return tx;
  }
  tx.hash = keccak256(payload);
  _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
  return tx;
}
function _parseEip2930(payload) {
  const transaction = decode(payload.slice(1));
  if (transaction.length !== 8 && transaction.length !== 11) {
    logger18.throwArgumentError("invalid component count for transaction type: 1", "payload", hexlify(payload));
  }
  const tx = {
    type: 1,
    chainId: handleNumber(transaction[0]).toNumber(),
    nonce: handleNumber(transaction[1]).toNumber(),
    gasPrice: handleNumber(transaction[2]),
    gasLimit: handleNumber(transaction[3]),
    to: handleAddress(transaction[4]),
    value: handleNumber(transaction[5]),
    data: transaction[6],
    accessList: accessListify(transaction[7])
  };
  if (transaction.length === 8) {
    return tx;
  }
  tx.hash = keccak256(payload);
  _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
  return tx;
}
function _parse(rawTransaction) {
  const transaction = decode(rawTransaction);
  if (transaction.length !== 9 && transaction.length !== 6) {
    logger18.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
  }
  const tx = {
    nonce: handleNumber(transaction[0]).toNumber(),
    gasPrice: handleNumber(transaction[1]),
    gasLimit: handleNumber(transaction[2]),
    to: handleAddress(transaction[3]),
    value: handleNumber(transaction[4]),
    data: transaction[5],
    chainId: 0
  };
  if (transaction.length === 6) {
    return tx;
  }
  try {
    tx.v = BigNumber3.from(transaction[6]).toNumber();
  } catch (error) {
    console.log(error);
    return tx;
  }
  tx.r = hexZeroPad(transaction[7], 32);
  tx.s = hexZeroPad(transaction[8], 32);
  if (BigNumber3.from(tx.r).isZero() && BigNumber3.from(tx.s).isZero()) {
    tx.chainId = tx.v;
    tx.v = 0;
  } else {
    tx.chainId = Math.floor((tx.v - 35) / 2);
    if (tx.chainId < 0) {
      tx.chainId = 0;
    }
    let recoveryParam = tx.v - 27;
    const raw = transaction.slice(0, 6);
    if (tx.chainId !== 0) {
      raw.push(hexlify(tx.chainId));
      raw.push("0x");
      raw.push("0x");
      recoveryParam -= tx.chainId * 2 + 8;
    }
    const digest = keccak256(encode(raw));
    try {
      tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam });
    } catch (error) {
      console.log(error);
    }
    tx.hash = keccak256(rawTransaction);
  }
  tx.type = null;
  return tx;
}
function parse(rawTransaction) {
  const payload = arrayify(rawTransaction);
  if (payload[0] > 127) {
    return _parse(payload);
  }
  switch (payload[0]) {
    case 1:
      return _parseEip2930(payload);
    case 2:
      return _parseEip1559(payload);
    default:
      break;
  }
  return logger18.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {
    operation: "parseTransaction",
    transactionType: payload[0]
  });
}

// node_modules/@ethersproject/contracts/lib.esm/_version.js
var version14 = "contracts/5.6.0";

// node_modules/@ethersproject/contracts/lib.esm/index.js
"use strict";
var __awaiter5 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e4) {
        reject(e4);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e4) {
        reject(e4);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger19 = new Logger(version14);
var allowedTransactionKeys3 = {
  chainId: true,
  data: true,
  from: true,
  gasLimit: true,
  gasPrice: true,
  nonce: true,
  to: true,
  value: true,
  type: true,
  accessList: true,
  maxFeePerGas: true,
  maxPriorityFeePerGas: true,
  customData: true,
  ccipReadEnabled: true
};
function resolveName(resolver, nameOrPromise) {
  return __awaiter5(this, void 0, void 0, function* () {
    const name2 = yield nameOrPromise;
    if (typeof name2 !== "string") {
      logger19.throwArgumentError("invalid address or ENS name", "name", name2);
    }
    try {
      return getAddress(name2);
    } catch (error) {
    }
    if (!resolver) {
      logger19.throwError("a provider or signer is needed to resolve ENS names", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "resolveName"
      });
    }
    const address = yield resolver.resolveName(name2);
    if (address == null) {
      logger19.throwArgumentError("resolver or addr is not configured for ENS name", "name", name2);
    }
    return address;
  });
}
function resolveAddresses(resolver, value, paramType) {
  return __awaiter5(this, void 0, void 0, function* () {
    if (Array.isArray(paramType)) {
      return yield Promise.all(paramType.map((paramType2, index) => {
        return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType2.name], paramType2);
      }));
    }
    if (paramType.type === "address") {
      return yield resolveName(resolver, value);
    }
    if (paramType.type === "tuple") {
      return yield resolveAddresses(resolver, value, paramType.components);
    }
    if (paramType.baseType === "array") {
      if (!Array.isArray(value)) {
        return Promise.reject(logger19.makeError("invalid value for array", Logger.errors.INVALID_ARGUMENT, {
          argument: "value",
          value
        }));
      }
      return yield Promise.all(value.map((v3) => resolveAddresses(resolver, v3, paramType.arrayChildren)));
    }
    return value;
  });
}
function populateTransaction(contract, fragment, args) {
  return __awaiter5(this, void 0, void 0, function* () {
    let overrides = {};
    if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
      overrides = shallowCopy(args.pop());
    }
    logger19.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
    if (contract.signer) {
      if (overrides.from) {
        overrides.from = resolveProperties({
          override: resolveName(contract.signer, overrides.from),
          signer: contract.signer.getAddress()
        }).then((check) => __awaiter5(this, void 0, void 0, function* () {
          if (getAddress(check.signer) !== check.override) {
            logger19.throwError("Contract with a Signer cannot override from", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "overrides.from"
            });
          }
          return check.override;
        }));
      } else {
        overrides.from = contract.signer.getAddress();
      }
    } else if (overrides.from) {
      overrides.from = resolveName(contract.provider, overrides.from);
    }
    const resolved = yield resolveProperties({
      args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
      address: contract.resolvedAddress,
      overrides: resolveProperties(overrides) || {}
    });
    const data = contract.interface.encodeFunctionData(fragment, resolved.args);
    const tx = {
      data,
      to: resolved.address
    };
    const ro = resolved.overrides;
    if (ro.nonce != null) {
      tx.nonce = BigNumber3.from(ro.nonce).toNumber();
    }
    if (ro.gasLimit != null) {
      tx.gasLimit = BigNumber3.from(ro.gasLimit);
    }
    if (ro.gasPrice != null) {
      tx.gasPrice = BigNumber3.from(ro.gasPrice);
    }
    if (ro.maxFeePerGas != null) {
      tx.maxFeePerGas = BigNumber3.from(ro.maxFeePerGas);
    }
    if (ro.maxPriorityFeePerGas != null) {
      tx.maxPriorityFeePerGas = BigNumber3.from(ro.maxPriorityFeePerGas);
    }
    if (ro.from != null) {
      tx.from = ro.from;
    }
    if (ro.type != null) {
      tx.type = ro.type;
    }
    if (ro.accessList != null) {
      tx.accessList = accessListify(ro.accessList);
    }
    if (tx.gasLimit == null && fragment.gas != null) {
      let intrinsic = 21e3;
      const bytes3 = arrayify(data);
      for (let i3 = 0; i3 < bytes3.length; i3++) {
        intrinsic += 4;
        if (bytes3[i3]) {
          intrinsic += 64;
        }
      }
      tx.gasLimit = BigNumber3.from(fragment.gas).add(intrinsic);
    }
    if (ro.value) {
      const roValue = BigNumber3.from(ro.value);
      if (!roValue.isZero() && !fragment.payable) {
        logger19.throwError("non-payable method cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "overrides.value",
          value: overrides.value
        });
      }
      tx.value = roValue;
    }
    if (ro.customData) {
      tx.customData = shallowCopy(ro.customData);
    }
    if (ro.ccipReadEnabled) {
      tx.ccipReadEnabled = !!ro.ccipReadEnabled;
    }
    delete overrides.nonce;
    delete overrides.gasLimit;
    delete overrides.gasPrice;
    delete overrides.from;
    delete overrides.value;
    delete overrides.type;
    delete overrides.accessList;
    delete overrides.maxFeePerGas;
    delete overrides.maxPriorityFeePerGas;
    delete overrides.customData;
    delete overrides.ccipReadEnabled;
    const leftovers = Object.keys(overrides).filter((key2) => overrides[key2] != null);
    if (leftovers.length) {
      logger19.throwError(`cannot override ${leftovers.map((l3) => JSON.stringify(l3)).join(",")}`, Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "overrides",
        overrides: leftovers
      });
    }
    return tx;
  });
}
function buildPopulate(contract, fragment) {
  return function(...args) {
    return populateTransaction(contract, fragment, args);
  };
}
function buildEstimate(contract, fragment) {
  const signerOrProvider = contract.signer || contract.provider;
  return function(...args) {
    return __awaiter5(this, void 0, void 0, function* () {
      if (!signerOrProvider) {
        logger19.throwError("estimate require a provider or signer", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "estimateGas"
        });
      }
      const tx = yield populateTransaction(contract, fragment, args);
      return yield signerOrProvider.estimateGas(tx);
    });
  };
}
function addContractWait(contract, tx) {
  const wait = tx.wait.bind(tx);
  tx.wait = (confirmations) => {
    return wait(confirmations).then((receipt) => {
      receipt.events = receipt.logs.map((log) => {
        let event = deepCopy(log);
        let parsed = null;
        try {
          parsed = contract.interface.parseLog(log);
        } catch (e4) {
        }
        if (parsed) {
          event.args = parsed.args;
          event.decode = (data, topics) => {
            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
          };
          event.event = parsed.name;
          event.eventSignature = parsed.signature;
        }
        event.removeListener = () => {
          return contract.provider;
        };
        event.getBlock = () => {
          return contract.provider.getBlock(receipt.blockHash);
        };
        event.getTransaction = () => {
          return contract.provider.getTransaction(receipt.transactionHash);
        };
        event.getTransactionReceipt = () => {
          return Promise.resolve(receipt);
        };
        return event;
      });
      return receipt;
    });
  };
}
function buildCall(contract, fragment, collapseSimple) {
  const signerOrProvider = contract.signer || contract.provider;
  return function(...args) {
    return __awaiter5(this, void 0, void 0, function* () {
      let blockTag = void 0;
      if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
        const overrides = shallowCopy(args.pop());
        if (overrides.blockTag != null) {
          blockTag = yield overrides.blockTag;
        }
        delete overrides.blockTag;
        args.push(overrides);
      }
      if (contract.deployTransaction != null) {
        yield contract._deployed(blockTag);
      }
      const tx = yield populateTransaction(contract, fragment, args);
      const result = yield signerOrProvider.call(tx, blockTag);
      try {
        let value = contract.interface.decodeFunctionResult(fragment, result);
        if (collapseSimple && fragment.outputs.length === 1) {
          value = value[0];
        }
        return value;
      } catch (error) {
        if (error.code === Logger.errors.CALL_EXCEPTION) {
          error.address = contract.address;
          error.args = args;
          error.transaction = tx;
        }
        throw error;
      }
    });
  };
}
function buildSend(contract, fragment) {
  return function(...args) {
    return __awaiter5(this, void 0, void 0, function* () {
      if (!contract.signer) {
        logger19.throwError("sending a transaction requires a signer", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "sendTransaction"
        });
      }
      if (contract.deployTransaction != null) {
        yield contract._deployed();
      }
      const txRequest = yield populateTransaction(contract, fragment, args);
      const tx = yield contract.signer.sendTransaction(txRequest);
      addContractWait(contract, tx);
      return tx;
    });
  };
}
function buildDefault(contract, fragment, collapseSimple) {
  if (fragment.constant) {
    return buildCall(contract, fragment, collapseSimple);
  }
  return buildSend(contract, fragment);
}
function getEventTag(filter) {
  if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
    return "*";
  }
  return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map((topic) => {
    if (Array.isArray(topic)) {
      return topic.join("|");
    }
    return topic;
  }).join(":") : "");
}
var RunningEvent = class {
  constructor(tag, filter) {
    defineReadOnly(this, "tag", tag);
    defineReadOnly(this, "filter", filter);
    this._listeners = [];
  }
  addListener(listener, once) {
    this._listeners.push({ listener, once });
  }
  removeListener(listener) {
    let done = false;
    this._listeners = this._listeners.filter((item) => {
      if (done || item.listener !== listener) {
        return true;
      }
      done = true;
      return false;
    });
  }
  removeAllListeners() {
    this._listeners = [];
  }
  listeners() {
    return this._listeners.map((i3) => i3.listener);
  }
  listenerCount() {
    return this._listeners.length;
  }
  run(args) {
    const listenerCount = this.listenerCount();
    this._listeners = this._listeners.filter((item) => {
      const argsCopy = args.slice();
      setTimeout(() => {
        item.listener.apply(this, argsCopy);
      }, 0);
      return !item.once;
    });
    return listenerCount;
  }
  prepareEvent(event) {
  }
  getEmit(event) {
    return [event];
  }
};
var ErrorRunningEvent = class extends RunningEvent {
  constructor() {
    super("error", null);
  }
};
var FragmentRunningEvent = class extends RunningEvent {
  constructor(address, contractInterface, fragment, topics) {
    const filter = {
      address
    };
    let topic = contractInterface.getEventTopic(fragment);
    if (topics) {
      if (topic !== topics[0]) {
        logger19.throwArgumentError("topic mismatch", "topics", topics);
      }
      filter.topics = topics.slice();
    } else {
      filter.topics = [topic];
    }
    super(getEventTag(filter), filter);
    defineReadOnly(this, "address", address);
    defineReadOnly(this, "interface", contractInterface);
    defineReadOnly(this, "fragment", fragment);
  }
  prepareEvent(event) {
    super.prepareEvent(event);
    event.event = this.fragment.name;
    event.eventSignature = this.fragment.format();
    event.decode = (data, topics) => {
      return this.interface.decodeEventLog(this.fragment, data, topics);
    };
    try {
      event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
    } catch (error) {
      event.args = null;
      event.decodeError = error;
    }
  }
  getEmit(event) {
    const errors = checkResultErrors(event.args);
    if (errors.length) {
      throw errors[0].error;
    }
    const args = (event.args || []).slice();
    args.push(event);
    return args;
  }
};
var WildcardRunningEvent = class extends RunningEvent {
  constructor(address, contractInterface) {
    super("*", { address });
    defineReadOnly(this, "address", address);
    defineReadOnly(this, "interface", contractInterface);
  }
  prepareEvent(event) {
    super.prepareEvent(event);
    try {
      const parsed = this.interface.parseLog(event);
      event.event = parsed.name;
      event.eventSignature = parsed.signature;
      event.decode = (data, topics) => {
        return this.interface.decodeEventLog(parsed.eventFragment, data, topics);
      };
      event.args = parsed.args;
    } catch (error) {
    }
  }
};
var BaseContract = class {
  constructor(addressOrName, contractInterface, signerOrProvider) {
    logger19.checkNew(new.target, Contract);
    defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
    if (signerOrProvider == null) {
      defineReadOnly(this, "provider", null);
      defineReadOnly(this, "signer", null);
    } else if (Signer.isSigner(signerOrProvider)) {
      defineReadOnly(this, "provider", signerOrProvider.provider || null);
      defineReadOnly(this, "signer", signerOrProvider);
    } else if (Provider.isProvider(signerOrProvider)) {
      defineReadOnly(this, "provider", signerOrProvider);
      defineReadOnly(this, "signer", null);
    } else {
      logger19.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
    }
    defineReadOnly(this, "callStatic", {});
    defineReadOnly(this, "estimateGas", {});
    defineReadOnly(this, "functions", {});
    defineReadOnly(this, "populateTransaction", {});
    defineReadOnly(this, "filters", {});
    {
      const uniqueFilters = {};
      Object.keys(this.interface.events).forEach((eventSignature) => {
        const event = this.interface.events[eventSignature];
        defineReadOnly(this.filters, eventSignature, (...args) => {
          return {
            address: this.address,
            topics: this.interface.encodeFilterTopics(event, args)
          };
        });
        if (!uniqueFilters[event.name]) {
          uniqueFilters[event.name] = [];
        }
        uniqueFilters[event.name].push(eventSignature);
      });
      Object.keys(uniqueFilters).forEach((name2) => {
        const filters = uniqueFilters[name2];
        if (filters.length === 1) {
          defineReadOnly(this.filters, name2, this.filters[filters[0]]);
        } else {
          logger19.warn(`Duplicate definition of ${name2} (${filters.join(", ")})`);
        }
      });
    }
    defineReadOnly(this, "_runningEvents", {});
    defineReadOnly(this, "_wrappedEmits", {});
    if (addressOrName == null) {
      logger19.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
    }
    defineReadOnly(this, "address", addressOrName);
    if (this.provider) {
      defineReadOnly(this, "resolvedAddress", resolveName(this.provider, addressOrName));
    } else {
      try {
        defineReadOnly(this, "resolvedAddress", Promise.resolve(getAddress(addressOrName)));
      } catch (error) {
        logger19.throwError("provider is required to use ENS name as contract address", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new Contract"
        });
      }
    }
    this.resolvedAddress.catch((e4) => {
    });
    const uniqueNames = {};
    const uniqueSignatures = {};
    Object.keys(this.interface.functions).forEach((signature2) => {
      const fragment = this.interface.functions[signature2];
      if (uniqueSignatures[signature2]) {
        logger19.warn(`Duplicate ABI entry for ${JSON.stringify(signature2)}`);
        return;
      }
      uniqueSignatures[signature2] = true;
      {
        const name2 = fragment.name;
        if (!uniqueNames[`%${name2}`]) {
          uniqueNames[`%${name2}`] = [];
        }
        uniqueNames[`%${name2}`].push(signature2);
      }
      if (this[signature2] == null) {
        defineReadOnly(this, signature2, buildDefault(this, fragment, true));
      }
      if (this.functions[signature2] == null) {
        defineReadOnly(this.functions, signature2, buildDefault(this, fragment, false));
      }
      if (this.callStatic[signature2] == null) {
        defineReadOnly(this.callStatic, signature2, buildCall(this, fragment, true));
      }
      if (this.populateTransaction[signature2] == null) {
        defineReadOnly(this.populateTransaction, signature2, buildPopulate(this, fragment));
      }
      if (this.estimateGas[signature2] == null) {
        defineReadOnly(this.estimateGas, signature2, buildEstimate(this, fragment));
      }
    });
    Object.keys(uniqueNames).forEach((name2) => {
      const signatures = uniqueNames[name2];
      if (signatures.length > 1) {
        return;
      }
      name2 = name2.substring(1);
      const signature2 = signatures[0];
      try {
        if (this[name2] == null) {
          defineReadOnly(this, name2, this[signature2]);
        }
      } catch (e4) {
      }
      if (this.functions[name2] == null) {
        defineReadOnly(this.functions, name2, this.functions[signature2]);
      }
      if (this.callStatic[name2] == null) {
        defineReadOnly(this.callStatic, name2, this.callStatic[signature2]);
      }
      if (this.populateTransaction[name2] == null) {
        defineReadOnly(this.populateTransaction, name2, this.populateTransaction[signature2]);
      }
      if (this.estimateGas[name2] == null) {
        defineReadOnly(this.estimateGas, name2, this.estimateGas[signature2]);
      }
    });
  }
  static getContractAddress(transaction) {
    return getContractAddress(transaction);
  }
  static getInterface(contractInterface) {
    if (Interface.isInterface(contractInterface)) {
      return contractInterface;
    }
    return new Interface(contractInterface);
  }
  deployed() {
    return this._deployed();
  }
  _deployed(blockTag) {
    if (!this._deployedPromise) {
      if (this.deployTransaction) {
        this._deployedPromise = this.deployTransaction.wait().then(() => {
          return this;
        });
      } else {
        this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {
          if (code === "0x") {
            logger19.throwError("contract not deployed", Logger.errors.UNSUPPORTED_OPERATION, {
              contractAddress: this.address,
              operation: "getDeployed"
            });
          }
          return this;
        });
      }
    }
    return this._deployedPromise;
  }
  fallback(overrides) {
    if (!this.signer) {
      logger19.throwError("sending a transactions require a signer", Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
    }
    const tx = shallowCopy(overrides || {});
    ["from", "to"].forEach(function(key2) {
      if (tx[key2] == null) {
        return;
      }
      logger19.throwError("cannot override " + key2, Logger.errors.UNSUPPORTED_OPERATION, { operation: key2 });
    });
    tx.to = this.resolvedAddress;
    return this.deployed().then(() => {
      return this.signer.sendTransaction(tx);
    });
  }
  connect(signerOrProvider) {
    if (typeof signerOrProvider === "string") {
      signerOrProvider = new VoidSigner(signerOrProvider, this.provider);
    }
    const contract = new this.constructor(this.address, this.interface, signerOrProvider);
    if (this.deployTransaction) {
      defineReadOnly(contract, "deployTransaction", this.deployTransaction);
    }
    return contract;
  }
  attach(addressOrName) {
    return new this.constructor(addressOrName, this.interface, this.signer || this.provider);
  }
  static isIndexed(value) {
    return Indexed.isIndexed(value);
  }
  _normalizeRunningEvent(runningEvent) {
    if (this._runningEvents[runningEvent.tag]) {
      return this._runningEvents[runningEvent.tag];
    }
    return runningEvent;
  }
  _getRunningEvent(eventName) {
    if (typeof eventName === "string") {
      if (eventName === "error") {
        return this._normalizeRunningEvent(new ErrorRunningEvent());
      }
      if (eventName === "event") {
        return this._normalizeRunningEvent(new RunningEvent("event", null));
      }
      if (eventName === "*") {
        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
      }
      const fragment = this.interface.getEvent(eventName);
      return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
    }
    if (eventName.topics && eventName.topics.length > 0) {
      try {
        const topic = eventName.topics[0];
        if (typeof topic !== "string") {
          throw new Error("invalid topic");
        }
        const fragment = this.interface.getEvent(topic);
        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
      } catch (error) {
      }
      const filter = {
        address: this.address,
        topics: eventName.topics
      };
      return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));
    }
    return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
  }
  _checkRunningEvents(runningEvent) {
    if (runningEvent.listenerCount() === 0) {
      delete this._runningEvents[runningEvent.tag];
      const emit = this._wrappedEmits[runningEvent.tag];
      if (emit && runningEvent.filter) {
        this.provider.off(runningEvent.filter, emit);
        delete this._wrappedEmits[runningEvent.tag];
      }
    }
  }
  _wrapEvent(runningEvent, log, listener) {
    const event = deepCopy(log);
    event.removeListener = () => {
      if (!listener) {
        return;
      }
      runningEvent.removeListener(listener);
      this._checkRunningEvents(runningEvent);
    };
    event.getBlock = () => {
      return this.provider.getBlock(log.blockHash);
    };
    event.getTransaction = () => {
      return this.provider.getTransaction(log.transactionHash);
    };
    event.getTransactionReceipt = () => {
      return this.provider.getTransactionReceipt(log.transactionHash);
    };
    runningEvent.prepareEvent(event);
    return event;
  }
  _addEventListener(runningEvent, listener, once) {
    if (!this.provider) {
      logger19.throwError("events require a provider or a signer with a provider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "once" });
    }
    runningEvent.addListener(listener, once);
    this._runningEvents[runningEvent.tag] = runningEvent;
    if (!this._wrappedEmits[runningEvent.tag]) {
      const wrappedEmit = (log) => {
        let event = this._wrapEvent(runningEvent, log, listener);
        if (event.decodeError == null) {
          try {
            const args = runningEvent.getEmit(event);
            this.emit(runningEvent.filter, ...args);
          } catch (error) {
            event.decodeError = error.error;
          }
        }
        if (runningEvent.filter != null) {
          this.emit("event", event);
        }
        if (event.decodeError != null) {
          this.emit("error", event.decodeError, event);
        }
      };
      this._wrappedEmits[runningEvent.tag] = wrappedEmit;
      if (runningEvent.filter != null) {
        this.provider.on(runningEvent.filter, wrappedEmit);
      }
    }
  }
  queryFilter(event, fromBlockOrBlockhash, toBlock) {
    const runningEvent = this._getRunningEvent(event);
    const filter = shallowCopy(runningEvent.filter);
    if (typeof fromBlockOrBlockhash === "string" && isHexString(fromBlockOrBlockhash, 32)) {
      if (toBlock != null) {
        logger19.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
      }
      filter.blockHash = fromBlockOrBlockhash;
    } else {
      filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;
      filter.toBlock = toBlock != null ? toBlock : "latest";
    }
    return this.provider.getLogs(filter).then((logs) => {
      return logs.map((log) => this._wrapEvent(runningEvent, log, null));
    });
  }
  on(event, listener) {
    this._addEventListener(this._getRunningEvent(event), listener, false);
    return this;
  }
  once(event, listener) {
    this._addEventListener(this._getRunningEvent(event), listener, true);
    return this;
  }
  emit(eventName, ...args) {
    if (!this.provider) {
      return false;
    }
    const runningEvent = this._getRunningEvent(eventName);
    const result = runningEvent.run(args) > 0;
    this._checkRunningEvents(runningEvent);
    return result;
  }
  listenerCount(eventName) {
    if (!this.provider) {
      return 0;
    }
    if (eventName == null) {
      return Object.keys(this._runningEvents).reduce((accum, key2) => {
        return accum + this._runningEvents[key2].listenerCount();
      }, 0);
    }
    return this._getRunningEvent(eventName).listenerCount();
  }
  listeners(eventName) {
    if (!this.provider) {
      return [];
    }
    if (eventName == null) {
      const result = [];
      for (let tag in this._runningEvents) {
        this._runningEvents[tag].listeners().forEach((listener) => {
          result.push(listener);
        });
      }
      return result;
    }
    return this._getRunningEvent(eventName).listeners();
  }
  removeAllListeners(eventName) {
    if (!this.provider) {
      return this;
    }
    if (eventName == null) {
      for (const tag in this._runningEvents) {
        const runningEvent2 = this._runningEvents[tag];
        runningEvent2.removeAllListeners();
        this._checkRunningEvents(runningEvent2);
      }
      return this;
    }
    const runningEvent = this._getRunningEvent(eventName);
    runningEvent.removeAllListeners();
    this._checkRunningEvents(runningEvent);
    return this;
  }
  off(eventName, listener) {
    if (!this.provider) {
      return this;
    }
    const runningEvent = this._getRunningEvent(eventName);
    runningEvent.removeListener(listener);
    this._checkRunningEvents(runningEvent);
    return this;
  }
  removeListener(eventName, listener) {
    return this.off(eventName, listener);
  }
};
var Contract = class extends BaseContract {
};
var ContractFactory = class {
  constructor(contractInterface, bytecode3, signer) {
    let bytecodeHex = null;
    if (typeof bytecode3 === "string") {
      bytecodeHex = bytecode3;
    } else if (isBytes(bytecode3)) {
      bytecodeHex = hexlify(bytecode3);
    } else if (bytecode3 && typeof bytecode3.object === "string") {
      bytecodeHex = bytecode3.object;
    } else {
      bytecodeHex = "!";
    }
    if (bytecodeHex.substring(0, 2) !== "0x") {
      bytecodeHex = "0x" + bytecodeHex;
    }
    if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {
      logger19.throwArgumentError("invalid bytecode", "bytecode", bytecode3);
    }
    if (signer && !Signer.isSigner(signer)) {
      logger19.throwArgumentError("invalid signer", "signer", signer);
    }
    defineReadOnly(this, "bytecode", bytecodeHex);
    defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
    defineReadOnly(this, "signer", signer || null);
  }
  getDeployTransaction(...args) {
    let tx = {};
    if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === "object") {
      tx = shallowCopy(args.pop());
      for (const key2 in tx) {
        if (!allowedTransactionKeys3[key2]) {
          throw new Error("unknown transaction override " + key2);
        }
      }
    }
    ["data", "from", "to"].forEach((key2) => {
      if (tx[key2] == null) {
        return;
      }
      logger19.throwError("cannot override " + key2, Logger.errors.UNSUPPORTED_OPERATION, { operation: key2 });
    });
    if (tx.value) {
      const value = BigNumber3.from(tx.value);
      if (!value.isZero() && !this.interface.deploy.payable) {
        logger19.throwError("non-payable constructor cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "overrides.value",
          value: tx.value
        });
      }
    }
    logger19.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
    tx.data = hexlify(concat2([
      this.bytecode,
      this.interface.encodeDeploy(args)
    ]));
    return tx;
  }
  deploy(...args) {
    return __awaiter5(this, void 0, void 0, function* () {
      let overrides = {};
      if (args.length === this.interface.deploy.inputs.length + 1) {
        overrides = args.pop();
      }
      logger19.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
      const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);
      params.push(overrides);
      const unsignedTx = this.getDeployTransaction(...params);
      const tx = yield this.signer.sendTransaction(unsignedTx);
      const address = getStatic(this.constructor, "getContractAddress")(tx);
      const contract = getStatic(this.constructor, "getContract")(address, this.interface, this.signer);
      addContractWait(contract, tx);
      defineReadOnly(contract, "deployTransaction", tx);
      return contract;
    });
  }
  attach(address) {
    return this.constructor.getContract(address, this.interface, this.signer);
  }
  connect(signer) {
    return new this.constructor(this.interface, this.bytecode, signer);
  }
  static fromSolidity(compilerOutput, signer) {
    if (compilerOutput == null) {
      logger19.throwError("missing compiler output", Logger.errors.MISSING_ARGUMENT, { argument: "compilerOutput" });
    }
    if (typeof compilerOutput === "string") {
      compilerOutput = JSON.parse(compilerOutput);
    }
    const abi3 = compilerOutput.abi;
    let bytecode3 = null;
    if (compilerOutput.bytecode) {
      bytecode3 = compilerOutput.bytecode;
    } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
      bytecode3 = compilerOutput.evm.bytecode;
    }
    return new this(abi3, bytecode3, signer);
  }
  static getInterface(contractInterface) {
    return Contract.getInterface(contractInterface);
  }
  static getContractAddress(tx) {
    return getContractAddress(tx);
  }
  static getContract(address, contractInterface, signer) {
    return new Contract(address, contractInterface, signer);
  }
};

// node_modules/@ethersproject/basex/lib.esm/index.js
var BaseX = class {
  constructor(alphabet2) {
    defineReadOnly(this, "alphabet", alphabet2);
    defineReadOnly(this, "base", alphabet2.length);
    defineReadOnly(this, "_alphabetMap", {});
    defineReadOnly(this, "_leader", alphabet2.charAt(0));
    for (let i3 = 0; i3 < alphabet2.length; i3++) {
      this._alphabetMap[alphabet2.charAt(i3)] = i3;
    }
  }
  encode(value) {
    let source = arrayify(value);
    if (source.length === 0) {
      return "";
    }
    let digits = [0];
    for (let i3 = 0; i3 < source.length; ++i3) {
      let carry = source[i3];
      for (let j3 = 0; j3 < digits.length; ++j3) {
        carry += digits[j3] << 8;
        digits[j3] = carry % this.base;
        carry = carry / this.base | 0;
      }
      while (carry > 0) {
        digits.push(carry % this.base);
        carry = carry / this.base | 0;
      }
    }
    let string2 = "";
    for (let k3 = 0; source[k3] === 0 && k3 < source.length - 1; ++k3) {
      string2 += this._leader;
    }
    for (let q = digits.length - 1; q >= 0; --q) {
      string2 += this.alphabet[digits[q]];
    }
    return string2;
  }
  decode(value) {
    if (typeof value !== "string") {
      throw new TypeError("Expected String");
    }
    let bytes3 = [];
    if (value.length === 0) {
      return new Uint8Array(bytes3);
    }
    bytes3.push(0);
    for (let i3 = 0; i3 < value.length; i3++) {
      let byte = this._alphabetMap[value[i3]];
      if (byte === void 0) {
        throw new Error("Non-base" + this.base + " character");
      }
      let carry = byte;
      for (let j3 = 0; j3 < bytes3.length; ++j3) {
        carry += bytes3[j3] * this.base;
        bytes3[j3] = carry & 255;
        carry >>= 8;
      }
      while (carry > 0) {
        bytes3.push(carry & 255);
        carry >>= 8;
      }
    }
    for (let k3 = 0; value[k3] === this._leader && k3 < value.length - 1; ++k3) {
      bytes3.push(0);
    }
    return arrayify(new Uint8Array(bytes3.reverse()));
  }
};
var Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
var Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");

// node_modules/@ethersproject/sha2/lib.esm/sha2.js
var import_hash3 = __toModule(require_hash());

// node_modules/@ethersproject/sha2/lib.esm/types.js
var SupportedAlgorithm;
(function(SupportedAlgorithm2) {
  SupportedAlgorithm2["sha256"] = "sha256";
  SupportedAlgorithm2["sha512"] = "sha512";
})(SupportedAlgorithm || (SupportedAlgorithm = {}));

// node_modules/@ethersproject/sha2/lib.esm/_version.js
var version15 = "sha2/5.6.0";

// node_modules/@ethersproject/sha2/lib.esm/sha2.js
"use strict";
var logger20 = new Logger(version15);
function ripemd160(data) {
  return "0x" + import_hash3.default.ripemd160().update(arrayify(data)).digest("hex");
}
function sha256(data) {
  return "0x" + import_hash3.default.sha256().update(arrayify(data)).digest("hex");
}
function sha512(data) {
  return "0x" + import_hash3.default.sha512().update(arrayify(data)).digest("hex");
}
function computeHmac(algorithm, key2, data) {
  if (!SupportedAlgorithm[algorithm]) {
    logger20.throwError("unsupported algorithm " + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "hmac",
      algorithm
    });
  }
  return "0x" + import_hash3.default.hmac(import_hash3.default[algorithm], arrayify(key2)).update(arrayify(data)).digest("hex");
}

// node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js
"use strict";
function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
  password = arrayify(password);
  salt = arrayify(salt);
  let hLen;
  let l3 = 1;
  const DK = new Uint8Array(keylen);
  const block1 = new Uint8Array(salt.length + 4);
  block1.set(salt);
  let r3;
  let T2;
  for (let i3 = 1; i3 <= l3; i3++) {
    block1[salt.length] = i3 >> 24 & 255;
    block1[salt.length + 1] = i3 >> 16 & 255;
    block1[salt.length + 2] = i3 >> 8 & 255;
    block1[salt.length + 3] = i3 & 255;
    let U = arrayify(computeHmac(hashAlgorithm, password, block1));
    if (!hLen) {
      hLen = U.length;
      T2 = new Uint8Array(hLen);
      l3 = Math.ceil(keylen / hLen);
      r3 = keylen - (l3 - 1) * hLen;
    }
    T2.set(U);
    for (let j3 = 1; j3 < iterations; j3++) {
      U = arrayify(computeHmac(hashAlgorithm, password, U));
      for (let k3 = 0; k3 < hLen; k3++)
        T2[k3] ^= U[k3];
    }
    const destPos = (i3 - 1) * hLen;
    const len = i3 === l3 ? r3 : hLen;
    DK.set(arrayify(T2).slice(0, len), destPos);
  }
  return hexlify(DK);
}

// node_modules/@ethersproject/wordlists/lib.esm/_version.js
var version16 = "wordlists/5.6.0";

// node_modules/@ethersproject/wordlists/lib.esm/wordlist.js
"use strict";
var exportWordlist = false;
var logger21 = new Logger(version16);
var Wordlist = class {
  constructor(locale) {
    logger21.checkAbstract(new.target, Wordlist);
    defineReadOnly(this, "locale", locale);
  }
  split(mnemonic) {
    return mnemonic.toLowerCase().split(/ +/g);
  }
  join(words2) {
    return words2.join(" ");
  }
  static check(wordlist2) {
    const words2 = [];
    for (let i3 = 0; i3 < 2048; i3++) {
      const word = wordlist2.getWord(i3);
      if (i3 !== wordlist2.getWordIndex(word)) {
        return "0x";
      }
      words2.push(word);
    }
    return id(words2.join("\n") + "\n");
  }
  static register(lang, name2) {
    if (!name2) {
      name2 = lang.locale;
    }
    if (exportWordlist) {
      try {
        const anyGlobal2 = window;
        if (anyGlobal2._ethers && anyGlobal2._ethers.wordlists) {
          if (!anyGlobal2._ethers.wordlists[name2]) {
            defineReadOnly(anyGlobal2._ethers.wordlists, name2, lang);
          }
        }
      } catch (error) {
      }
    }
  }
};

// node_modules/@ethersproject/wordlists/lib.esm/lang-en.js
"use strict";
var words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
var wordlist = null;
function loadWords(lang) {
  if (wordlist != null) {
    return;
  }
  wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
  if (Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
    wordlist = null;
    throw new Error("BIP39 Wordlist for en (English) FAILED");
  }
}
var LangEn = class extends Wordlist {
  constructor() {
    super("en");
  }
  getWord(index) {
    loadWords(this);
    return wordlist[index];
  }
  getWordIndex(word) {
    loadWords(this);
    return wordlist.indexOf(word);
  }
};
var langEn = new LangEn();
Wordlist.register(langEn);

// node_modules/@ethersproject/wordlists/lib.esm/wordlists.js
"use strict";
var wordlists = {
  en: langEn
};

// node_modules/@ethersproject/wordlists/lib.esm/index.js
"use strict";

// node_modules/@ethersproject/hdnode/lib.esm/_version.js
var version17 = "hdnode/5.6.0";

// node_modules/@ethersproject/hdnode/lib.esm/index.js
"use strict";
var logger22 = new Logger(version17);
var N2 = BigNumber3.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
var MasterSecret = toUtf8Bytes("Bitcoin seed");
var HardenedBit = 2147483648;
function getUpperMask(bits2) {
  return (1 << bits2) - 1 << 8 - bits2;
}
function getLowerMask(bits2) {
  return (1 << bits2) - 1;
}
function bytes32(value) {
  return hexZeroPad(hexlify(value), 32);
}
function base58check(data) {
  return Base58.encode(concat2([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));
}
function getWordlist(wordlist2) {
  if (wordlist2 == null) {
    return wordlists["en"];
  }
  if (typeof wordlist2 === "string") {
    const words2 = wordlists[wordlist2];
    if (words2 == null) {
      logger22.throwArgumentError("unknown locale", "wordlist", wordlist2);
    }
    return words2;
  }
  return wordlist2;
}
var _constructorGuard4 = {};
var defaultPath = "m/44'/60'/0'/0/0";
var HDNode = class {
  constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
    logger22.checkNew(new.target, HDNode);
    if (constructorGuard !== _constructorGuard4) {
      throw new Error("HDNode constructor cannot be called directly");
    }
    if (privateKey) {
      const signingKey = new SigningKey(privateKey);
      defineReadOnly(this, "privateKey", signingKey.privateKey);
      defineReadOnly(this, "publicKey", signingKey.compressedPublicKey);
    } else {
      defineReadOnly(this, "privateKey", null);
      defineReadOnly(this, "publicKey", hexlify(publicKey));
    }
    defineReadOnly(this, "parentFingerprint", parentFingerprint);
    defineReadOnly(this, "fingerprint", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));
    defineReadOnly(this, "address", computeAddress(this.publicKey));
    defineReadOnly(this, "chainCode", chainCode);
    defineReadOnly(this, "index", index);
    defineReadOnly(this, "depth", depth);
    if (mnemonicOrPath == null) {
      defineReadOnly(this, "mnemonic", null);
      defineReadOnly(this, "path", null);
    } else if (typeof mnemonicOrPath === "string") {
      defineReadOnly(this, "mnemonic", null);
      defineReadOnly(this, "path", mnemonicOrPath);
    } else {
      defineReadOnly(this, "mnemonic", mnemonicOrPath);
      defineReadOnly(this, "path", mnemonicOrPath.path);
    }
  }
  get extendedKey() {
    if (this.depth >= 256) {
      throw new Error("Depth too large!");
    }
    return base58check(concat2([
      this.privateKey != null ? "0x0488ADE4" : "0x0488B21E",
      hexlify(this.depth),
      this.parentFingerprint,
      hexZeroPad(hexlify(this.index), 4),
      this.chainCode,
      this.privateKey != null ? concat2(["0x00", this.privateKey]) : this.publicKey
    ]));
  }
  neuter() {
    return new HDNode(_constructorGuard4, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
  }
  _derive(index) {
    if (index > 4294967295) {
      throw new Error("invalid index - " + String(index));
    }
    let path = this.path;
    if (path) {
      path += "/" + (index & ~HardenedBit);
    }
    const data = new Uint8Array(37);
    if (index & HardenedBit) {
      if (!this.privateKey) {
        throw new Error("cannot derive child of neutered node");
      }
      data.set(arrayify(this.privateKey), 1);
      if (path) {
        path += "'";
      }
    } else {
      data.set(arrayify(this.publicKey));
    }
    for (let i3 = 24; i3 >= 0; i3 -= 8) {
      data[33 + (i3 >> 3)] = index >> 24 - i3 & 255;
    }
    const I2 = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));
    const IL = I2.slice(0, 32);
    const IR = I2.slice(32);
    let ki = null;
    let Ki = null;
    if (this.privateKey) {
      ki = bytes32(BigNumber3.from(IL).add(this.privateKey).mod(N2));
    } else {
      const ek = new SigningKey(hexlify(IL));
      Ki = ek._addPoint(this.publicKey);
    }
    let mnemonicOrPath = path;
    const srcMnemonic = this.mnemonic;
    if (srcMnemonic) {
      mnemonicOrPath = Object.freeze({
        phrase: srcMnemonic.phrase,
        path,
        locale: srcMnemonic.locale || "en"
      });
    }
    return new HDNode(_constructorGuard4, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
  }
  derivePath(path) {
    const components = path.split("/");
    if (components.length === 0 || components[0] === "m" && this.depth !== 0) {
      throw new Error("invalid path - " + path);
    }
    if (components[0] === "m") {
      components.shift();
    }
    let result = this;
    for (let i3 = 0; i3 < components.length; i3++) {
      const component = components[i3];
      if (component.match(/^[0-9]+'$/)) {
        const index = parseInt(component.substring(0, component.length - 1));
        if (index >= HardenedBit) {
          throw new Error("invalid path index - " + component);
        }
        result = result._derive(HardenedBit + index);
      } else if (component.match(/^[0-9]+$/)) {
        const index = parseInt(component);
        if (index >= HardenedBit) {
          throw new Error("invalid path index - " + component);
        }
        result = result._derive(index);
      } else {
        throw new Error("invalid path component - " + component);
      }
    }
    return result;
  }
  static _fromSeed(seed, mnemonic) {
    const seedArray = arrayify(seed);
    if (seedArray.length < 16 || seedArray.length > 64) {
      throw new Error("invalid seed");
    }
    const I2 = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));
    return new HDNode(_constructorGuard4, bytes32(I2.slice(0, 32)), null, "0x00000000", bytes32(I2.slice(32)), 0, 0, mnemonic);
  }
  static fromMnemonic(mnemonic, password, wordlist2) {
    wordlist2 = getWordlist(wordlist2);
    mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist2), wordlist2);
    return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
      phrase: mnemonic,
      path: "m",
      locale: wordlist2.locale
    });
  }
  static fromSeed(seed) {
    return HDNode._fromSeed(seed, null);
  }
  static fromExtendedKey(extendedKey) {
    const bytes3 = Base58.decode(extendedKey);
    if (bytes3.length !== 82 || base58check(bytes3.slice(0, 78)) !== extendedKey) {
      logger22.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
    }
    const depth = bytes3[4];
    const parentFingerprint = hexlify(bytes3.slice(5, 9));
    const index = parseInt(hexlify(bytes3.slice(9, 13)).substring(2), 16);
    const chainCode = hexlify(bytes3.slice(13, 45));
    const key2 = bytes3.slice(45, 78);
    switch (hexlify(bytes3.slice(0, 4))) {
      case "0x0488b21e":
      case "0x043587cf":
        return new HDNode(_constructorGuard4, null, hexlify(key2), parentFingerprint, chainCode, index, depth, null);
      case "0x0488ade4":
      case "0x04358394 ":
        if (key2[0] !== 0) {
          break;
        }
        return new HDNode(_constructorGuard4, hexlify(key2.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
    }
    return logger22.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
  }
};
function mnemonicToSeed(mnemonic, password) {
  if (!password) {
    password = "";
  }
  const salt = toUtf8Bytes("mnemonic" + password, UnicodeNormalizationForm.NFKD);
  return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
}
function mnemonicToEntropy(mnemonic, wordlist2) {
  wordlist2 = getWordlist(wordlist2);
  logger22.checkNormalize();
  const words2 = wordlist2.split(mnemonic);
  if (words2.length % 3 !== 0) {
    throw new Error("invalid mnemonic");
  }
  const entropy = arrayify(new Uint8Array(Math.ceil(11 * words2.length / 8)));
  let offset = 0;
  for (let i3 = 0; i3 < words2.length; i3++) {
    let index = wordlist2.getWordIndex(words2[i3].normalize("NFKD"));
    if (index === -1) {
      throw new Error("invalid mnemonic");
    }
    for (let bit = 0; bit < 11; bit++) {
      if (index & 1 << 10 - bit) {
        entropy[offset >> 3] |= 1 << 7 - offset % 8;
      }
      offset++;
    }
  }
  const entropyBits = 32 * words2.length / 3;
  const checksumBits = words2.length / 3;
  const checksumMask = getUpperMask(checksumBits);
  const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
    throw new Error("invalid checksum");
  }
  return hexlify(entropy.slice(0, entropyBits / 8));
}
function entropyToMnemonic(entropy, wordlist2) {
  wordlist2 = getWordlist(wordlist2);
  entropy = arrayify(entropy);
  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {
    throw new Error("invalid entropy");
  }
  const indices = [0];
  let remainingBits = 11;
  for (let i3 = 0; i3 < entropy.length; i3++) {
    if (remainingBits > 8) {
      indices[indices.length - 1] <<= 8;
      indices[indices.length - 1] |= entropy[i3];
      remainingBits -= 8;
    } else {
      indices[indices.length - 1] <<= remainingBits;
      indices[indices.length - 1] |= entropy[i3] >> 8 - remainingBits;
      indices.push(entropy[i3] & getLowerMask(8 - remainingBits));
      remainingBits += 3;
    }
  }
  const checksumBits = entropy.length / 4;
  const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);
  indices[indices.length - 1] <<= checksumBits;
  indices[indices.length - 1] |= checksum >> 8 - checksumBits;
  return wordlist2.join(indices.map((index) => wordlist2.getWord(index)));
}
function isValidMnemonic(mnemonic, wordlist2) {
  try {
    mnemonicToEntropy(mnemonic, wordlist2);
    return true;
  } catch (error) {
  }
  return false;
}
function getAccountPath(index) {
  if (typeof index !== "number" || index < 0 || index >= HardenedBit || index % 1) {
    logger22.throwArgumentError("invalid account index", "index", index);
  }
  return `m/44'/60'/${index}'/0/0`;
}

// node_modules/@ethersproject/random/lib.esm/_version.js
var version18 = "random/5.6.0";

// node_modules/@ethersproject/random/lib.esm/random.js
"use strict";
var logger23 = new Logger(version18);
function getGlobal() {
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw new Error("unable to locate global object");
}
var anyGlobal = getGlobal();
var crypto = anyGlobal.crypto || anyGlobal.msCrypto;
if (!crypto || !crypto.getRandomValues) {
  logger23.warn("WARNING: Missing strong random number source");
  crypto = {
    getRandomValues: function(buffer) {
      return logger23.throwError("no secure random source avaialble", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "crypto.getRandomValues"
      });
    }
  };
}
function randomBytes(length) {
  if (length <= 0 || length > 1024 || length % 1 || length != length) {
    logger23.throwArgumentError("invalid length", "length", length);
  }
  const result = new Uint8Array(length);
  crypto.getRandomValues(result);
  return arrayify(result);
}

// node_modules/@ethersproject/random/lib.esm/shuffle.js
"use strict";
function shuffled(array) {
  array = array.slice();
  for (let i3 = array.length - 1; i3 > 0; i3--) {
    const j3 = Math.floor(Math.random() * (i3 + 1));
    const tmp = array[i3];
    array[i3] = array[j3];
    array[j3] = tmp;
  }
  return array;
}

// node_modules/@ethersproject/random/lib.esm/index.js
"use strict";

// node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js
var import_aes_js = __toModule(require_aes_js());

// node_modules/@ethersproject/json-wallets/lib.esm/_version.js
var version19 = "json-wallets/5.6.0";

// node_modules/@ethersproject/json-wallets/lib.esm/utils.js
"use strict";
function looseArrayify(hexString) {
  if (typeof hexString === "string" && hexString.substring(0, 2) !== "0x") {
    hexString = "0x" + hexString;
  }
  return arrayify(hexString);
}
function zpad(value, length) {
  value = String(value);
  while (value.length < length) {
    value = "0" + value;
  }
  return value;
}
function getPassword(password) {
  if (typeof password === "string") {
    return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);
  }
  return arrayify(password);
}
function searchPath(object, path) {
  let currentChild = object;
  const comps = path.toLowerCase().split("/");
  for (let i3 = 0; i3 < comps.length; i3++) {
    let matchingChild = null;
    for (const key2 in currentChild) {
      if (key2.toLowerCase() === comps[i3]) {
        matchingChild = currentChild[key2];
        break;
      }
    }
    if (matchingChild === null) {
      return null;
    }
    currentChild = matchingChild;
  }
  return currentChild;
}
function uuidV4(randomBytes2) {
  const bytes3 = arrayify(randomBytes2);
  bytes3[6] = bytes3[6] & 15 | 64;
  bytes3[8] = bytes3[8] & 63 | 128;
  const value = hexlify(bytes3);
  return [
    value.substring(2, 10),
    value.substring(10, 14),
    value.substring(14, 18),
    value.substring(18, 22),
    value.substring(22, 34)
  ].join("-");
}

// node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js
"use strict";
var logger24 = new Logger(version19);
var CrowdsaleAccount = class extends Description {
  isCrowdsaleAccount(value) {
    return !!(value && value._isCrowdsaleAccount);
  }
};
function decrypt2(json, password) {
  const data = JSON.parse(json);
  password = getPassword(password);
  const ethaddr = getAddress(searchPath(data, "ethaddr"));
  const encseed = looseArrayify(searchPath(data, "encseed"));
  if (!encseed || encseed.length % 16 !== 0) {
    logger24.throwArgumentError("invalid encseed", "json", json);
  }
  const key2 = arrayify(pbkdf2(password, password, 2e3, 32, "sha256")).slice(0, 16);
  const iv = encseed.slice(0, 16);
  const encryptedSeed = encseed.slice(16);
  const aesCbc = new import_aes_js.default.ModeOfOperation.cbc(key2, iv);
  const seed = import_aes_js.default.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));
  let seedHex = "";
  for (let i3 = 0; i3 < seed.length; i3++) {
    seedHex += String.fromCharCode(seed[i3]);
  }
  const seedHexBytes = toUtf8Bytes(seedHex);
  const privateKey = keccak256(seedHexBytes);
  return new CrowdsaleAccount({
    _isCrowdsaleAccount: true,
    address: ethaddr,
    privateKey
  });
}

// node_modules/@ethersproject/json-wallets/lib.esm/inspect.js
"use strict";
function isCrowdsaleWallet(json) {
  let data = null;
  try {
    data = JSON.parse(json);
  } catch (error) {
    return false;
  }
  return data.encseed && data.ethaddr;
}
function isKeystoreWallet(json) {
  let data = null;
  try {
    data = JSON.parse(json);
  } catch (error) {
    return false;
  }
  if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
    return false;
  }
  return true;
}
function getJsonWalletAddress(json) {
  if (isCrowdsaleWallet(json)) {
    try {
      return getAddress(JSON.parse(json).ethaddr);
    } catch (error) {
      return null;
    }
  }
  if (isKeystoreWallet(json)) {
    try {
      return getAddress(JSON.parse(json).address);
    } catch (error) {
      return null;
    }
  }
  return null;
}

// node_modules/@ethersproject/json-wallets/lib.esm/keystore.js
var import_aes_js2 = __toModule(require_aes_js());
var import_scrypt_js = __toModule(require_scrypt());
"use strict";
var __awaiter6 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e4) {
        reject(e4);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e4) {
        reject(e4);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger25 = new Logger(version19);
function hasMnemonic(value) {
  return value != null && value.mnemonic && value.mnemonic.phrase;
}
var KeystoreAccount = class extends Description {
  isKeystoreAccount(value) {
    return !!(value && value._isKeystoreAccount);
  }
};
function _decrypt(data, key2, ciphertext) {
  const cipher = searchPath(data, "crypto/cipher");
  if (cipher === "aes-128-ctr") {
    const iv = looseArrayify(searchPath(data, "crypto/cipherparams/iv"));
    const counter = new import_aes_js2.default.Counter(iv);
    const aesCtr = new import_aes_js2.default.ModeOfOperation.ctr(key2, counter);
    return arrayify(aesCtr.decrypt(ciphertext));
  }
  return null;
}
function _getAccount(data, key2) {
  const ciphertext = looseArrayify(searchPath(data, "crypto/ciphertext"));
  const computedMAC = hexlify(keccak256(concat2([key2.slice(16, 32), ciphertext]))).substring(2);
  if (computedMAC !== searchPath(data, "crypto/mac").toLowerCase()) {
    throw new Error("invalid password");
  }
  const privateKey = _decrypt(data, key2.slice(0, 16), ciphertext);
  if (!privateKey) {
    logger25.throwError("unsupported cipher", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "decrypt"
    });
  }
  const mnemonicKey = key2.slice(32, 64);
  const address = computeAddress(privateKey);
  if (data.address) {
    let check = data.address.toLowerCase();
    if (check.substring(0, 2) !== "0x") {
      check = "0x" + check;
    }
    if (getAddress(check) !== address) {
      throw new Error("address mismatch");
    }
  }
  const account = {
    _isKeystoreAccount: true,
    address,
    privateKey: hexlify(privateKey)
  };
  if (searchPath(data, "x-ethers/version") === "0.1") {
    const mnemonicCiphertext = looseArrayify(searchPath(data, "x-ethers/mnemonicCiphertext"));
    const mnemonicIv = looseArrayify(searchPath(data, "x-ethers/mnemonicCounter"));
    const mnemonicCounter = new import_aes_js2.default.Counter(mnemonicIv);
    const mnemonicAesCtr = new import_aes_js2.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
    const path = searchPath(data, "x-ethers/path") || defaultPath;
    const locale = searchPath(data, "x-ethers/locale") || "en";
    const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));
    try {
      const mnemonic = entropyToMnemonic(entropy, locale);
      const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
      if (node.privateKey != account.privateKey) {
        throw new Error("mnemonic mismatch");
      }
      account.mnemonic = node.mnemonic;
    } catch (error) {
      if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
        throw error;
      }
    }
  }
  return new KeystoreAccount(account);
}
function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
  return arrayify(pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));
}
function pbkdf22(passwordBytes, salt, count, dkLen, prfFunc) {
  return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
}
function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
  const passwordBytes = getPassword(password);
  const kdf = searchPath(data, "crypto/kdf");
  if (kdf && typeof kdf === "string") {
    const throwError = function(name2, value) {
      return logger25.throwArgumentError("invalid key-derivation function parameters", name2, value);
    };
    if (kdf.toLowerCase() === "scrypt") {
      const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
      const N3 = parseInt(searchPath(data, "crypto/kdfparams/n"));
      const r3 = parseInt(searchPath(data, "crypto/kdfparams/r"));
      const p2 = parseInt(searchPath(data, "crypto/kdfparams/p"));
      if (!N3 || !r3 || !p2) {
        throwError("kdf", kdf);
      }
      if ((N3 & N3 - 1) !== 0) {
        throwError("N", N3);
      }
      const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
      if (dkLen !== 32) {
        throwError("dklen", dkLen);
      }
      return scryptFunc(passwordBytes, salt, N3, r3, p2, 64, progressCallback);
    } else if (kdf.toLowerCase() === "pbkdf2") {
      const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
      let prfFunc = null;
      const prf = searchPath(data, "crypto/kdfparams/prf");
      if (prf === "hmac-sha256") {
        prfFunc = "sha256";
      } else if (prf === "hmac-sha512") {
        prfFunc = "sha512";
      } else {
        throwError("prf", prf);
      }
      const count = parseInt(searchPath(data, "crypto/kdfparams/c"));
      const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
      if (dkLen !== 32) {
        throwError("dklen", dkLen);
      }
      return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
    }
  }
  return logger25.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
}
function decryptSync(json, password) {
  const data = JSON.parse(json);
  const key2 = _computeKdfKey(data, password, pbkdf2Sync, import_scrypt_js.default.syncScrypt);
  return _getAccount(data, key2);
}
function decrypt3(json, password, progressCallback) {
  return __awaiter6(this, void 0, void 0, function* () {
    const data = JSON.parse(json);
    const key2 = yield _computeKdfKey(data, password, pbkdf22, import_scrypt_js.default.scrypt, progressCallback);
    return _getAccount(data, key2);
  });
}
function encrypt2(account, password, options, progressCallback) {
  try {
    if (getAddress(account.address) !== computeAddress(account.privateKey)) {
      throw new Error("address/privateKey mismatch");
    }
    if (hasMnemonic(account)) {
      const mnemonic = account.mnemonic;
      const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);
      if (node.privateKey != account.privateKey) {
        throw new Error("mnemonic mismatch");
      }
    }
  } catch (e4) {
    return Promise.reject(e4);
  }
  if (typeof options === "function" && !progressCallback) {
    progressCallback = options;
    options = {};
  }
  if (!options) {
    options = {};
  }
  const privateKey = arrayify(account.privateKey);
  const passwordBytes = getPassword(password);
  let entropy = null;
  let path = null;
  let locale = null;
  if (hasMnemonic(account)) {
    const srcMnemonic = account.mnemonic;
    entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || "en"));
    path = srcMnemonic.path || defaultPath;
    locale = srcMnemonic.locale || "en";
  }
  let client = options.client;
  if (!client) {
    client = "ethers.js";
  }
  let salt = null;
  if (options.salt) {
    salt = arrayify(options.salt);
  } else {
    salt = randomBytes(32);
    ;
  }
  let iv = null;
  if (options.iv) {
    iv = arrayify(options.iv);
    if (iv.length !== 16) {
      throw new Error("invalid iv");
    }
  } else {
    iv = randomBytes(16);
  }
  let uuidRandom = null;
  if (options.uuid) {
    uuidRandom = arrayify(options.uuid);
    if (uuidRandom.length !== 16) {
      throw new Error("invalid uuid");
    }
  } else {
    uuidRandom = randomBytes(16);
  }
  let N3 = 1 << 17, r3 = 8, p2 = 1;
  if (options.scrypt) {
    if (options.scrypt.N) {
      N3 = options.scrypt.N;
    }
    if (options.scrypt.r) {
      r3 = options.scrypt.r;
    }
    if (options.scrypt.p) {
      p2 = options.scrypt.p;
    }
  }
  return import_scrypt_js.default.scrypt(passwordBytes, salt, N3, r3, p2, 64, progressCallback).then((key2) => {
    key2 = arrayify(key2);
    const derivedKey = key2.slice(0, 16);
    const macPrefix = key2.slice(16, 32);
    const mnemonicKey = key2.slice(32, 64);
    const counter = new import_aes_js2.default.Counter(iv);
    const aesCtr = new import_aes_js2.default.ModeOfOperation.ctr(derivedKey, counter);
    const ciphertext = arrayify(aesCtr.encrypt(privateKey));
    const mac = keccak256(concat2([macPrefix, ciphertext]));
    const data = {
      address: account.address.substring(2).toLowerCase(),
      id: uuidV4(uuidRandom),
      version: 3,
      Crypto: {
        cipher: "aes-128-ctr",
        cipherparams: {
          iv: hexlify(iv).substring(2)
        },
        ciphertext: hexlify(ciphertext).substring(2),
        kdf: "scrypt",
        kdfparams: {
          salt: hexlify(salt).substring(2),
          n: N3,
          dklen: 32,
          p: p2,
          r: r3
        },
        mac: mac.substring(2)
      }
    };
    if (entropy) {
      const mnemonicIv = randomBytes(16);
      const mnemonicCounter = new import_aes_js2.default.Counter(mnemonicIv);
      const mnemonicAesCtr = new import_aes_js2.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
      const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));
      const now2 = new Date();
      const timestamp = now2.getUTCFullYear() + "-" + zpad(now2.getUTCMonth() + 1, 2) + "-" + zpad(now2.getUTCDate(), 2) + "T" + zpad(now2.getUTCHours(), 2) + "-" + zpad(now2.getUTCMinutes(), 2) + "-" + zpad(now2.getUTCSeconds(), 2) + ".0Z";
      data["x-ethers"] = {
        client,
        gethFilename: "UTC--" + timestamp + "--" + data.address,
        mnemonicCounter: hexlify(mnemonicIv).substring(2),
        mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),
        path,
        locale,
        version: "0.1"
      };
    }
    return JSON.stringify(data);
  });
}

// node_modules/@ethersproject/json-wallets/lib.esm/index.js
"use strict";
function decryptJsonWallet(json, password, progressCallback) {
  if (isCrowdsaleWallet(json)) {
    if (progressCallback) {
      progressCallback(0);
    }
    const account = decrypt2(json, password);
    if (progressCallback) {
      progressCallback(1);
    }
    return Promise.resolve(account);
  }
  if (isKeystoreWallet(json)) {
    return decrypt3(json, password, progressCallback);
  }
  return Promise.reject(new Error("invalid JSON wallet"));
}
function decryptJsonWalletSync(json, password) {
  if (isCrowdsaleWallet(json)) {
    return decrypt2(json, password);
  }
  if (isKeystoreWallet(json)) {
    return decryptSync(json, password);
  }
  throw new Error("invalid JSON wallet");
}

// node_modules/@ethersproject/wallet/lib.esm/_version.js
var version20 = "wallet/5.6.0";

// node_modules/@ethersproject/wallet/lib.esm/index.js
"use strict";
var __awaiter7 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e4) {
        reject(e4);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e4) {
        reject(e4);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger26 = new Logger(version20);
function isAccount(value) {
  return value != null && isHexString(value.privateKey, 32) && value.address != null;
}
function hasMnemonic2(value) {
  const mnemonic = value.mnemonic;
  return mnemonic && mnemonic.phrase;
}
var Wallet = class extends Signer {
  constructor(privateKey, provider) {
    logger26.checkNew(new.target, Wallet);
    super();
    if (isAccount(privateKey)) {
      const signingKey = new SigningKey(privateKey.privateKey);
      defineReadOnly(this, "_signingKey", () => signingKey);
      defineReadOnly(this, "address", computeAddress(this.publicKey));
      if (this.address !== getAddress(privateKey.address)) {
        logger26.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
      }
      if (hasMnemonic2(privateKey)) {
        const srcMnemonic = privateKey.mnemonic;
        defineReadOnly(this, "_mnemonic", () => ({
          phrase: srcMnemonic.phrase,
          path: srcMnemonic.path || defaultPath,
          locale: srcMnemonic.locale || "en"
        }));
        const mnemonic = this.mnemonic;
        const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
        if (computeAddress(node.privateKey) !== this.address) {
          logger26.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
        }
      } else {
        defineReadOnly(this, "_mnemonic", () => null);
      }
    } else {
      if (SigningKey.isSigningKey(privateKey)) {
        if (privateKey.curve !== "secp256k1") {
          logger26.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
        }
        defineReadOnly(this, "_signingKey", () => privateKey);
      } else {
        if (typeof privateKey === "string") {
          if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
            privateKey = "0x" + privateKey;
          }
        }
        const signingKey = new SigningKey(privateKey);
        defineReadOnly(this, "_signingKey", () => signingKey);
      }
      defineReadOnly(this, "_mnemonic", () => null);
      defineReadOnly(this, "address", computeAddress(this.publicKey));
    }
    if (provider && !Provider.isProvider(provider)) {
      logger26.throwArgumentError("invalid provider", "provider", provider);
    }
    defineReadOnly(this, "provider", provider || null);
  }
  get mnemonic() {
    return this._mnemonic();
  }
  get privateKey() {
    return this._signingKey().privateKey;
  }
  get publicKey() {
    return this._signingKey().publicKey;
  }
  getAddress() {
    return Promise.resolve(this.address);
  }
  connect(provider) {
    return new Wallet(this, provider);
  }
  signTransaction(transaction) {
    return resolveProperties(transaction).then((tx) => {
      if (tx.from != null) {
        if (getAddress(tx.from) !== this.address) {
          logger26.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
        }
        delete tx.from;
      }
      const signature2 = this._signingKey().signDigest(keccak256(serialize(tx)));
      return serialize(tx, signature2);
    });
  }
  signMessage(message) {
    return __awaiter7(this, void 0, void 0, function* () {
      return joinSignature(this._signingKey().signDigest(hashMessage(message)));
    });
  }
  _signTypedData(domain, types, value) {
    return __awaiter7(this, void 0, void 0, function* () {
      const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name2) => {
        if (this.provider == null) {
          logger26.throwError("cannot resolve ENS names without a provider", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "resolveName",
            value: name2
          });
        }
        return this.provider.resolveName(name2);
      });
      return joinSignature(this._signingKey().signDigest(TypedDataEncoder.hash(populated.domain, types, populated.value)));
    });
  }
  encrypt(password, options, progressCallback) {
    if (typeof options === "function" && !progressCallback) {
      progressCallback = options;
      options = {};
    }
    if (progressCallback && typeof progressCallback !== "function") {
      throw new Error("invalid callback");
    }
    if (!options) {
      options = {};
    }
    return encrypt2(this, password, options, progressCallback);
  }
  static createRandom(options) {
    let entropy = randomBytes(16);
    if (!options) {
      options = {};
    }
    if (options.extraEntropy) {
      entropy = arrayify(hexDataSlice(keccak256(concat2([entropy, options.extraEntropy])), 0, 16));
    }
    const mnemonic = entropyToMnemonic(entropy, options.locale);
    return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
  }
  static fromEncryptedJson(json, password, progressCallback) {
    return decryptJsonWallet(json, password, progressCallback).then((account) => {
      return new Wallet(account);
    });
  }
  static fromEncryptedJsonSync(json, password) {
    return new Wallet(decryptJsonWalletSync(json, password));
  }
  static fromMnemonic(mnemonic, path, wordlist2) {
    if (!path) {
      path = defaultPath;
    }
    return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist2).derivePath(path));
  }
};
function verifyMessage(message, signature2) {
  return recoverAddress(hashMessage(message), signature2);
}
function verifyTypedData(domain, types, value, signature2) {
  return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature2);
}

// node_modules/@ethersproject/providers/lib.esm/index.js
var lib_exports4 = {};
__export(lib_exports4, {
  AlchemyProvider: () => AlchemyProvider,
  AlchemyWebSocketProvider: () => AlchemyWebSocketProvider,
  AnkrProvider: () => AnkrProvider,
  BaseProvider: () => BaseProvider,
  CloudflareProvider: () => CloudflareProvider,
  EtherscanProvider: () => EtherscanProvider,
  FallbackProvider: () => FallbackProvider,
  Formatter: () => Formatter,
  InfuraProvider: () => InfuraProvider,
  InfuraWebSocketProvider: () => InfuraWebSocketProvider,
  IpcProvider: () => IpcProvider,
  JsonRpcBatchProvider: () => JsonRpcBatchProvider,
  JsonRpcProvider: () => JsonRpcProvider,
  JsonRpcSigner: () => JsonRpcSigner,
  NodesmithProvider: () => NodesmithProvider,
  PocketProvider: () => PocketProvider,
  Provider: () => Provider,
  Resolver: () => Resolver,
  StaticJsonRpcProvider: () => StaticJsonRpcProvider,
  UrlJsonRpcProvider: () => UrlJsonRpcProvider,
  Web3Provider: () => Web3Provider,
  WebSocketProvider: () => WebSocketProvider,
  getDefaultProvider: () => getDefaultProvider,
  getNetwork: () => getNetwork,
  isCommunityResourcable: () => isCommunityResourcable,
  isCommunityResource: () => isCommunityResource,
  showThrottleMessage: () => showThrottleMessage
});

// node_modules/@ethersproject/networks/lib.esm/_version.js
var version21 = "networks/5.6.1";

// node_modules/@ethersproject/networks/lib.esm/index.js
"use strict";
var logger27 = new Logger(version21);
function isRenetworkable(value) {
  return value && typeof value.renetwork === "function";
}
function ethDefaultProvider(network) {
  const func = function(providers, options) {
    if (options == null) {
      options = {};
    }
    const providerList = [];
    if (providers.InfuraProvider && options.infura !== "-") {
      try {
        providerList.push(new providers.InfuraProvider(network, options.infura));
      } catch (error) {
      }
    }
    if (providers.EtherscanProvider && options.etherscan !== "-") {
      try {
        providerList.push(new providers.EtherscanProvider(network, options.etherscan));
      } catch (error) {
      }
    }
    if (providers.AlchemyProvider && options.alchemy !== "-") {
      try {
        providerList.push(new providers.AlchemyProvider(network, options.alchemy));
      } catch (error) {
      }
    }
    if (providers.PocketProvider && options.pocket !== "-") {
      const skip = ["goerli", "ropsten", "rinkeby"];
      try {
        const provider = new providers.PocketProvider(network);
        if (provider.network && skip.indexOf(provider.network.name) === -1) {
          providerList.push(provider);
        }
      } catch (error) {
      }
    }
    if (providers.CloudflareProvider && options.cloudflare !== "-") {
      try {
        providerList.push(new providers.CloudflareProvider(network));
      } catch (error) {
      }
    }
    if (providers.AnkrProvider && options.ankr !== "-") {
      try {
        providerList.push(new providers.AnkrProvider(network, options.ankr));
      } catch (error) {
      }
    }
    if (providerList.length === 0) {
      return null;
    }
    if (providers.FallbackProvider) {
      let quorum = 1;
      if (options.quorum != null) {
        quorum = options.quorum;
      } else if (network === "homestead") {
        quorum = 2;
      }
      return new providers.FallbackProvider(providerList, quorum);
    }
    return providerList[0];
  };
  func.renetwork = function(network2) {
    return ethDefaultProvider(network2);
  };
  return func;
}
function etcDefaultProvider(url, network) {
  const func = function(providers, options) {
    if (providers.JsonRpcProvider) {
      return new providers.JsonRpcProvider(url, network);
    }
    return null;
  };
  func.renetwork = function(network2) {
    return etcDefaultProvider(url, network2);
  };
  return func;
}
var homestead = {
  chainId: 1,
  ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
  name: "homestead",
  _defaultProvider: ethDefaultProvider("homestead")
};
var ropsten = {
  chainId: 3,
  ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
  name: "ropsten",
  _defaultProvider: ethDefaultProvider("ropsten")
};
var classicMordor = {
  chainId: 63,
  name: "classicMordor",
  _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
};
var networks = {
  unspecified: { chainId: 0, name: "unspecified" },
  homestead,
  mainnet: homestead,
  morden: { chainId: 2, name: "morden" },
  ropsten,
  testnet: ropsten,
  rinkeby: {
    chainId: 4,
    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    name: "rinkeby",
    _defaultProvider: ethDefaultProvider("rinkeby")
  },
  kovan: {
    chainId: 42,
    name: "kovan",
    _defaultProvider: ethDefaultProvider("kovan")
  },
  goerli: {
    chainId: 5,
    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    name: "goerli",
    _defaultProvider: ethDefaultProvider("goerli")
  },
  kintsugi: { chainId: 1337702, name: "kintsugi" },
  classic: {
    chainId: 61,
    name: "classic",
    _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/etc", "classic")
  },
  classicMorden: { chainId: 62, name: "classicMorden" },
  classicMordor,
  classicTestnet: classicMordor,
  classicKotti: {
    chainId: 6,
    name: "classicKotti",
    _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/kotti", "classicKotti")
  },
  xdai: { chainId: 100, name: "xdai" },
  matic: { chainId: 137, name: "matic" },
  maticmum: { chainId: 80001, name: "maticmum" },
  optimism: { chainId: 10, name: "optimism" },
  "optimism-kovan": { chainId: 69, name: "optimism-kovan" },
  "optimism-goerli": { chainId: 420, name: "optimism-goerli" },
  arbitrum: { chainId: 42161, name: "arbitrum" },
  "arbitrum-rinkeby": { chainId: 421611, name: "arbitrum-rinkeby" },
  bnb: { chainId: 56, name: "bnb" },
  bnbt: { chainId: 97, name: "bnbt" }
};
function getNetwork(network) {
  if (network == null) {
    return null;
  }
  if (typeof network === "number") {
    for (const name2 in networks) {
      const standard2 = networks[name2];
      if (standard2.chainId === network) {
        return {
          name: standard2.name,
          chainId: standard2.chainId,
          ensAddress: standard2.ensAddress || null,
          _defaultProvider: standard2._defaultProvider || null
        };
      }
    }
    return {
      chainId: network,
      name: "unknown"
    };
  }
  if (typeof network === "string") {
    const standard2 = networks[network];
    if (standard2 == null) {
      return null;
    }
    return {
      name: standard2.name,
      chainId: standard2.chainId,
      ensAddress: standard2.ensAddress,
      _defaultProvider: standard2._defaultProvider || null
    };
  }
  const standard = networks[network.name];
  if (!standard) {
    if (typeof network.chainId !== "number") {
      logger27.throwArgumentError("invalid network chainId", "network", network);
    }
    return network;
  }
  if (network.chainId !== 0 && network.chainId !== standard.chainId) {
    logger27.throwArgumentError("network chainId mismatch", "network", network);
  }
  let defaultProvider = network._defaultProvider || null;
  if (defaultProvider == null && standard._defaultProvider) {
    if (isRenetworkable(standard._defaultProvider)) {
      defaultProvider = standard._defaultProvider.renetwork(network);
    } else {
      defaultProvider = standard._defaultProvider;
    }
  }
  return {
    name: network.name,
    chainId: standard.chainId,
    ensAddress: network.ensAddress || standard.ensAddress || null,
    _defaultProvider: defaultProvider
  };
}

// node_modules/@ethersproject/base64/lib.esm/index.js
var lib_exports3 = {};
__export(lib_exports3, {
  decode: () => decode2,
  encode: () => encode3
});

// node_modules/@ethersproject/base64/lib.esm/base64.js
"use strict";
function decode2(textData) {
  textData = atob(textData);
  const data = [];
  for (let i3 = 0; i3 < textData.length; i3++) {
    data.push(textData.charCodeAt(i3));
  }
  return arrayify(data);
}
function encode3(data) {
  data = arrayify(data);
  let textData = "";
  for (let i3 = 0; i3 < data.length; i3++) {
    textData += String.fromCharCode(data[i3]);
  }
  return btoa(textData);
}

// node_modules/@ethersproject/base64/lib.esm/index.js
"use strict";

// node_modules/@ethersproject/web/lib.esm/_version.js
var version22 = "web/5.6.0";

// node_modules/@ethersproject/web/lib.esm/geturl.js
"use strict";
var __awaiter8 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e4) {
        reject(e4);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e4) {
        reject(e4);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
function getUrl(href, options) {
  return __awaiter8(this, void 0, void 0, function* () {
    if (options == null) {
      options = {};
    }
    const request = {
      method: options.method || "GET",
      headers: options.headers || {},
      body: options.body || void 0
    };
    if (options.skipFetchSetup !== true) {
      request.mode = "cors";
      request.cache = "no-cache";
      request.credentials = "same-origin";
      request.redirect = "follow";
      request.referrer = "client";
    }
    ;
    const response = yield fetch(href, request);
    const body = yield response.arrayBuffer();
    const headers = {};
    if (response.headers.forEach) {
      response.headers.forEach((value, key2) => {
        headers[key2.toLowerCase()] = value;
      });
    } else {
      response.headers.keys().forEach((key2) => {
        headers[key2.toLowerCase()] = response.headers.get(key2);
      });
    }
    return {
      headers,
      statusCode: response.status,
      statusMessage: response.statusText,
      body: arrayify(new Uint8Array(body))
    };
  });
}

// node_modules/@ethersproject/web/lib.esm/index.js
"use strict";
var __awaiter9 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e4) {
        reject(e4);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e4) {
        reject(e4);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger28 = new Logger(version22);
function staller(duration) {
  return new Promise((resolve) => {
    setTimeout(resolve, duration);
  });
}
function bodyify(value, type) {
  if (value == null) {
    return null;
  }
  if (typeof value === "string") {
    return value;
  }
  if (isBytesLike(value)) {
    if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
      try {
        return toUtf8String(value);
      } catch (error) {
      }
      ;
    }
    return hexlify(value);
  }
  return value;
}
function _fetchData(connection, body, processFunc) {
  const attemptLimit = typeof connection === "object" && connection.throttleLimit != null ? connection.throttleLimit : 12;
  logger28.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
  const throttleCallback = typeof connection === "object" ? connection.throttleCallback : null;
  const throttleSlotInterval = typeof connection === "object" && typeof connection.throttleSlotInterval === "number" ? connection.throttleSlotInterval : 100;
  logger28.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
  const errorPassThrough = typeof connection === "object" ? !!connection.errorPassThrough : false;
  const headers = {};
  let url = null;
  const options = {
    method: "GET"
  };
  let allow304 = false;
  let timeout = 2 * 60 * 1e3;
  if (typeof connection === "string") {
    url = connection;
  } else if (typeof connection === "object") {
    if (connection == null || connection.url == null) {
      logger28.throwArgumentError("missing URL", "connection.url", connection);
    }
    url = connection.url;
    if (typeof connection.timeout === "number" && connection.timeout > 0) {
      timeout = connection.timeout;
    }
    if (connection.headers) {
      for (const key2 in connection.headers) {
        headers[key2.toLowerCase()] = { key: key2, value: String(connection.headers[key2]) };
        if (["if-none-match", "if-modified-since"].indexOf(key2.toLowerCase()) >= 0) {
          allow304 = true;
        }
      }
    }
    options.allowGzip = !!connection.allowGzip;
    if (connection.user != null && connection.password != null) {
      if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
        logger28.throwError("basic authentication requires a secure https url", Logger.errors.INVALID_ARGUMENT, { argument: "url", url, user: connection.user, password: "[REDACTED]" });
      }
      const authorization = connection.user + ":" + connection.password;
      headers["authorization"] = {
        key: "Authorization",
        value: "Basic " + encode3(toUtf8Bytes(authorization))
      };
    }
    if (connection.skipFetchSetup != null) {
      options.skipFetchSetup = !!connection.skipFetchSetup;
    }
  }
  const reData = new RegExp("^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$", "i");
  const dataMatch = url ? url.match(reData) : null;
  if (dataMatch) {
    try {
      const response = {
        statusCode: 200,
        statusMessage: "OK",
        headers: { "content-type": dataMatch[1] },
        body: decode2(dataMatch[2])
      };
      let result = response.body;
      if (processFunc) {
        result = processFunc(response.body, response);
      }
      return Promise.resolve(result);
    } catch (error) {
      logger28.throwError("processing response error", Logger.errors.SERVER_ERROR, {
        body: bodyify(dataMatch[1], dataMatch[2]),
        error,
        requestBody: null,
        requestMethod: "GET",
        url
      });
    }
  }
  if (body) {
    options.method = "POST";
    options.body = body;
    if (headers["content-type"] == null) {
      headers["content-type"] = { key: "Content-Type", value: "application/octet-stream" };
    }
    if (headers["content-length"] == null) {
      headers["content-length"] = { key: "Content-Length", value: String(body.length) };
    }
  }
  const flatHeaders = {};
  Object.keys(headers).forEach((key2) => {
    const header = headers[key2];
    flatHeaders[header.key] = header.value;
  });
  options.headers = flatHeaders;
  const runningTimeout = function() {
    let timer2 = null;
    const promise = new Promise(function(resolve, reject) {
      if (timeout) {
        timer2 = setTimeout(() => {
          if (timer2 == null) {
            return;
          }
          timer2 = null;
          reject(logger28.makeError("timeout", Logger.errors.TIMEOUT, {
            requestBody: bodyify(options.body, flatHeaders["content-type"]),
            requestMethod: options.method,
            timeout,
            url
          }));
        }, timeout);
      }
    });
    const cancel = function() {
      if (timer2 == null) {
        return;
      }
      clearTimeout(timer2);
      timer2 = null;
    };
    return { promise, cancel };
  }();
  const runningFetch = function() {
    return __awaiter9(this, void 0, void 0, function* () {
      for (let attempt = 0; attempt < attemptLimit; attempt++) {
        let response = null;
        try {
          response = yield getUrl(url, options);
          if (attempt < attemptLimit) {
            if (response.statusCode === 301 || response.statusCode === 302) {
              const location = response.headers.location || "";
              if (options.method === "GET" && location.match(/^https:/)) {
                url = response.headers.location;
                continue;
              }
            } else if (response.statusCode === 429) {
              let tryAgain = true;
              if (throttleCallback) {
                tryAgain = yield throttleCallback(attempt, url);
              }
              if (tryAgain) {
                let stall3 = 0;
                const retryAfter = response.headers["retry-after"];
                if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                  stall3 = parseInt(retryAfter) * 1e3;
                } else {
                  stall3 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                }
                yield staller(stall3);
                continue;
              }
            }
          }
        } catch (error) {
          response = error.response;
          if (response == null) {
            runningTimeout.cancel();
            logger28.throwError("missing response", Logger.errors.SERVER_ERROR, {
              requestBody: bodyify(options.body, flatHeaders["content-type"]),
              requestMethod: options.method,
              serverError: error,
              url
            });
          }
        }
        let body2 = response.body;
        if (allow304 && response.statusCode === 304) {
          body2 = null;
        } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {
          runningTimeout.cancel();
          logger28.throwError("bad response", Logger.errors.SERVER_ERROR, {
            status: response.statusCode,
            headers: response.headers,
            body: bodyify(body2, response.headers ? response.headers["content-type"] : null),
            requestBody: bodyify(options.body, flatHeaders["content-type"]),
            requestMethod: options.method,
            url
          });
        }
        if (processFunc) {
          try {
            const result = yield processFunc(body2, response);
            runningTimeout.cancel();
            return result;
          } catch (error) {
            if (error.throttleRetry && attempt < attemptLimit) {
              let tryAgain = true;
              if (throttleCallback) {
                tryAgain = yield throttleCallback(attempt, url);
              }
              if (tryAgain) {
                const timeout2 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                yield staller(timeout2);
                continue;
              }
            }
            runningTimeout.cancel();
            logger28.throwError("processing response error", Logger.errors.SERVER_ERROR, {
              body: bodyify(body2, response.headers ? response.headers["content-type"] : null),
              error,
              requestBody: bodyify(options.body, flatHeaders["content-type"]),
              requestMethod: options.method,
              url
            });
          }
        }
        runningTimeout.cancel();
        return body2;
      }
      return logger28.throwError("failed response", Logger.errors.SERVER_ERROR, {
        requestBody: bodyify(options.body, flatHeaders["content-type"]),
        requestMethod: options.method,
        url
      });
    });
  }();
  return Promise.race([runningTimeout.promise, runningFetch]);
}
function fetchJson(connection, json, processFunc) {
  let processJsonFunc = (value, response) => {
    let result = null;
    if (value != null) {
      try {
        result = JSON.parse(toUtf8String(value));
      } catch (error) {
        logger28.throwError("invalid JSON", Logger.errors.SERVER_ERROR, {
          body: value,
          error
        });
      }
    }
    if (processFunc) {
      result = processFunc(result, response);
    }
    return result;
  };
  let body = null;
  if (json != null) {
    body = toUtf8Bytes(json);
    const updated = typeof connection === "string" ? { url: connection } : shallowCopy(connection);
    if (updated.headers) {
      const hasContentType = Object.keys(updated.headers).filter((k3) => k3.toLowerCase() === "content-type").length !== 0;
      if (!hasContentType) {
        updated.headers = shallowCopy(updated.headers);
        updated.headers["content-type"] = "application/json";
      }
    } else {
      updated.headers = { "content-type": "application/json" };
    }
    connection = updated;
  }
  return _fetchData(connection, body, processJsonFunc);
}
function poll(func, options) {
  if (!options) {
    options = {};
  }
  options = shallowCopy(options);
  if (options.floor == null) {
    options.floor = 0;
  }
  if (options.ceiling == null) {
    options.ceiling = 1e4;
  }
  if (options.interval == null) {
    options.interval = 250;
  }
  return new Promise(function(resolve, reject) {
    let timer2 = null;
    let done = false;
    const cancel = () => {
      if (done) {
        return false;
      }
      done = true;
      if (timer2) {
        clearTimeout(timer2);
      }
      return true;
    };
    if (options.timeout) {
      timer2 = setTimeout(() => {
        if (cancel()) {
          reject(new Error("timeout"));
        }
      }, options.timeout);
    }
    const retryLimit = options.retryLimit;
    let attempt = 0;
    function check() {
      return func().then(function(result) {
        if (result !== void 0) {
          if (cancel()) {
            resolve(result);
          }
        } else if (options.oncePoll) {
          options.oncePoll.once("poll", check);
        } else if (options.onceBlock) {
          options.onceBlock.once("block", check);
        } else if (!done) {
          attempt++;
          if (attempt > retryLimit) {
            if (cancel()) {
              reject(new Error("retry limit reached"));
            }
            return;
          }
          let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
          if (timeout < options.floor) {
            timeout = options.floor;
          }
          if (timeout > options.ceiling) {
            timeout = options.ceiling;
          }
          setTimeout(check, timeout);
        }
        return null;
      }, function(error) {
        if (cancel()) {
          reject(error);
        }
      });
    }
    check();
  });
}

// node_modules/@ethersproject/providers/lib.esm/base-provider.js
var import_bech32 = __toModule(require_bech32());

// node_modules/@ethersproject/providers/lib.esm/_version.js
var version23 = "providers/5.6.4";

// node_modules/@ethersproject/providers/lib.esm/formatter.js
"use strict";
var logger29 = new Logger(version23);
var Formatter = class {
  constructor() {
    logger29.checkNew(new.target, Formatter);
    this.formats = this.getDefaultFormats();
  }
  getDefaultFormats() {
    const formats = {};
    const address = this.address.bind(this);
    const bigNumber = this.bigNumber.bind(this);
    const blockTag = this.blockTag.bind(this);
    const data = this.data.bind(this);
    const hash3 = this.hash.bind(this);
    const hex2 = this.hex.bind(this);
    const number = this.number.bind(this);
    const type = this.type.bind(this);
    const strictData = (v3) => {
      return this.data(v3, true);
    };
    formats.transaction = {
      hash: hash3,
      type,
      accessList: Formatter.allowNull(this.accessList.bind(this), null),
      blockHash: Formatter.allowNull(hash3, null),
      blockNumber: Formatter.allowNull(number, null),
      transactionIndex: Formatter.allowNull(number, null),
      confirmations: Formatter.allowNull(number, null),
      from: address,
      gasPrice: Formatter.allowNull(bigNumber),
      maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
      maxFeePerGas: Formatter.allowNull(bigNumber),
      gasLimit: bigNumber,
      to: Formatter.allowNull(address, null),
      value: bigNumber,
      nonce: number,
      data,
      r: Formatter.allowNull(this.uint256),
      s: Formatter.allowNull(this.uint256),
      v: Formatter.allowNull(number),
      creates: Formatter.allowNull(address, null),
      raw: Formatter.allowNull(data)
    };
    formats.transactionRequest = {
      from: Formatter.allowNull(address),
      nonce: Formatter.allowNull(number),
      gasLimit: Formatter.allowNull(bigNumber),
      gasPrice: Formatter.allowNull(bigNumber),
      maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
      maxFeePerGas: Formatter.allowNull(bigNumber),
      to: Formatter.allowNull(address),
      value: Formatter.allowNull(bigNumber),
      data: Formatter.allowNull(strictData),
      type: Formatter.allowNull(number),
      accessList: Formatter.allowNull(this.accessList.bind(this), null)
    };
    formats.receiptLog = {
      transactionIndex: number,
      blockNumber: number,
      transactionHash: hash3,
      address,
      topics: Formatter.arrayOf(hash3),
      data,
      logIndex: number,
      blockHash: hash3
    };
    formats.receipt = {
      to: Formatter.allowNull(this.address, null),
      from: Formatter.allowNull(this.address, null),
      contractAddress: Formatter.allowNull(address, null),
      transactionIndex: number,
      root: Formatter.allowNull(hex2),
      gasUsed: bigNumber,
      logsBloom: Formatter.allowNull(data),
      blockHash: hash3,
      transactionHash: hash3,
      logs: Formatter.arrayOf(this.receiptLog.bind(this)),
      blockNumber: number,
      confirmations: Formatter.allowNull(number, null),
      cumulativeGasUsed: bigNumber,
      effectiveGasPrice: Formatter.allowNull(bigNumber),
      status: Formatter.allowNull(number),
      type
    };
    formats.block = {
      hash: Formatter.allowNull(hash3),
      parentHash: hash3,
      number,
      timestamp: number,
      nonce: Formatter.allowNull(hex2),
      difficulty: this.difficulty.bind(this),
      gasLimit: bigNumber,
      gasUsed: bigNumber,
      miner: Formatter.allowNull(address),
      extraData: data,
      transactions: Formatter.allowNull(Formatter.arrayOf(hash3)),
      baseFeePerGas: Formatter.allowNull(bigNumber)
    };
    formats.blockWithTransactions = shallowCopy(formats.block);
    formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
    formats.filter = {
      fromBlock: Formatter.allowNull(blockTag, void 0),
      toBlock: Formatter.allowNull(blockTag, void 0),
      blockHash: Formatter.allowNull(hash3, void 0),
      address: Formatter.allowNull(address, void 0),
      topics: Formatter.allowNull(this.topics.bind(this), void 0)
    };
    formats.filterLog = {
      blockNumber: Formatter.allowNull(number),
      blockHash: Formatter.allowNull(hash3),
      transactionIndex: number,
      removed: Formatter.allowNull(this.boolean.bind(this)),
      address,
      data: Formatter.allowFalsish(data, "0x"),
      topics: Formatter.arrayOf(hash3),
      transactionHash: hash3,
      logIndex: number
    };
    return formats;
  }
  accessList(accessList) {
    return accessListify(accessList || []);
  }
  number(number) {
    if (number === "0x") {
      return 0;
    }
    return BigNumber3.from(number).toNumber();
  }
  type(number) {
    if (number === "0x" || number == null) {
      return 0;
    }
    return BigNumber3.from(number).toNumber();
  }
  bigNumber(value) {
    return BigNumber3.from(value);
  }
  boolean(value) {
    if (typeof value === "boolean") {
      return value;
    }
    if (typeof value === "string") {
      value = value.toLowerCase();
      if (value === "true") {
        return true;
      }
      if (value === "false") {
        return false;
      }
    }
    throw new Error("invalid boolean - " + value);
  }
  hex(value, strict) {
    if (typeof value === "string") {
      if (!strict && value.substring(0, 2) !== "0x") {
        value = "0x" + value;
      }
      if (isHexString(value)) {
        return value.toLowerCase();
      }
    }
    return logger29.throwArgumentError("invalid hash", "value", value);
  }
  data(value, strict) {
    const result = this.hex(value, strict);
    if (result.length % 2 !== 0) {
      throw new Error("invalid data; odd-length - " + value);
    }
    return result;
  }
  address(value) {
    return getAddress(value);
  }
  callAddress(value) {
    if (!isHexString(value, 32)) {
      return null;
    }
    const address = getAddress(hexDataSlice(value, 12));
    return address === AddressZero ? null : address;
  }
  contractAddress(value) {
    return getContractAddress(value);
  }
  blockTag(blockTag) {
    if (blockTag == null) {
      return "latest";
    }
    if (blockTag === "earliest") {
      return "0x0";
    }
    if (blockTag === "latest" || blockTag === "pending") {
      return blockTag;
    }
    if (typeof blockTag === "number" || isHexString(blockTag)) {
      return hexValue2(blockTag);
    }
    throw new Error("invalid blockTag");
  }
  hash(value, strict) {
    const result = this.hex(value, strict);
    if (hexDataLength(result) !== 32) {
      return logger29.throwArgumentError("invalid hash", "value", value);
    }
    return result;
  }
  difficulty(value) {
    if (value == null) {
      return null;
    }
    const v3 = BigNumber3.from(value);
    try {
      return v3.toNumber();
    } catch (error) {
    }
    return null;
  }
  uint256(value) {
    if (!isHexString(value)) {
      throw new Error("invalid uint256");
    }
    return hexZeroPad(value, 32);
  }
  _block(value, format) {
    if (value.author != null && value.miner == null) {
      value.miner = value.author;
    }
    const difficulty = value._difficulty != null ? value._difficulty : value.difficulty;
    const result = Formatter.check(format, value);
    result._difficulty = difficulty == null ? null : BigNumber3.from(difficulty);
    return result;
  }
  block(value) {
    return this._block(value, this.formats.block);
  }
  blockWithTransactions(value) {
    return this._block(value, this.formats.blockWithTransactions);
  }
  transactionRequest(value) {
    return Formatter.check(this.formats.transactionRequest, value);
  }
  transactionResponse(transaction) {
    if (transaction.gas != null && transaction.gasLimit == null) {
      transaction.gasLimit = transaction.gas;
    }
    if (transaction.to && BigNumber3.from(transaction.to).isZero()) {
      transaction.to = "0x0000000000000000000000000000000000000000";
    }
    if (transaction.input != null && transaction.data == null) {
      transaction.data = transaction.input;
    }
    if (transaction.to == null && transaction.creates == null) {
      transaction.creates = this.contractAddress(transaction);
    }
    if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
      transaction.accessList = [];
    }
    const result = Formatter.check(this.formats.transaction, transaction);
    if (transaction.chainId != null) {
      let chainId = transaction.chainId;
      if (isHexString(chainId)) {
        chainId = BigNumber3.from(chainId).toNumber();
      }
      result.chainId = chainId;
    } else {
      let chainId = transaction.networkId;
      if (chainId == null && result.v == null) {
        chainId = transaction.chainId;
      }
      if (isHexString(chainId)) {
        chainId = BigNumber3.from(chainId).toNumber();
      }
      if (typeof chainId !== "number" && result.v != null) {
        chainId = (result.v - 35) / 2;
        if (chainId < 0) {
          chainId = 0;
        }
        chainId = parseInt(chainId);
      }
      if (typeof chainId !== "number") {
        chainId = 0;
      }
      result.chainId = chainId;
    }
    if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
      result.blockHash = null;
    }
    return result;
  }
  transaction(value) {
    return parse(value);
  }
  receiptLog(value) {
    return Formatter.check(this.formats.receiptLog, value);
  }
  receipt(value) {
    const result = Formatter.check(this.formats.receipt, value);
    if (result.root != null) {
      if (result.root.length <= 4) {
        const value2 = BigNumber3.from(result.root).toNumber();
        if (value2 === 0 || value2 === 1) {
          if (result.status != null && result.status !== value2) {
            logger29.throwArgumentError("alt-root-status/status mismatch", "value", { root: result.root, status: result.status });
          }
          result.status = value2;
          delete result.root;
        } else {
          logger29.throwArgumentError("invalid alt-root-status", "value.root", result.root);
        }
      } else if (result.root.length !== 66) {
        logger29.throwArgumentError("invalid root hash", "value.root", result.root);
      }
    }
    if (result.status != null) {
      result.byzantium = true;
    }
    return result;
  }
  topics(value) {
    if (Array.isArray(value)) {
      return value.map((v3) => this.topics(v3));
    } else if (value != null) {
      return this.hash(value, true);
    }
    return null;
  }
  filter(value) {
    return Formatter.check(this.formats.filter, value);
  }
  filterLog(value) {
    return Formatter.check(this.formats.filterLog, value);
  }
  static check(format, object) {
    const result = {};
    for (const key2 in format) {
      try {
        const value = format[key2](object[key2]);
        if (value !== void 0) {
          result[key2] = value;
        }
      } catch (error) {
        error.checkKey = key2;
        error.checkValue = object[key2];
        throw error;
      }
    }
    return result;
  }
  static allowNull(format, nullValue) {
    return function(value) {
      if (value == null) {
        return nullValue;
      }
      return format(value);
    };
  }
  static allowFalsish(format, replaceValue) {
    return function(value) {
      if (!value) {
        return replaceValue;
      }
      return format(value);
    };
  }
  static arrayOf(format) {
    return function(array) {
      if (!Array.isArray(array)) {
        throw new Error("not an array");
      }
      const result = [];
      array.forEach(function(value) {
        result.push(format(value));
      });
      return result;
    };
  }
};
function isCommunityResourcable(value) {
  return value && typeof value.isCommunityResource === "function";
}
function isCommunityResource(value) {
  return isCommunityResourcable(value) && value.isCommunityResource();
}
var throttleMessage = false;
function showThrottleMessage() {
  if (throttleMessage) {
    return;
  }
  throttleMessage = true;
  console.log("========= NOTICE =========");
  console.log("Request-Rate Exceeded  (this message will not be repeated)");
  console.log("");
  console.log("The default API keys for each service are provided as a highly-throttled,");
  console.log("community resource for low-traffic projects and early prototyping.");
  console.log("");
  console.log("While your application will continue to function, we highly recommended");
  console.log("signing up for your own API keys to improve performance, increase your");
  console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
  console.log("");
  console.log("For more details: https://docs.ethers.io/api-keys/");
  console.log("==========================");
}

// node_modules/@ethersproject/providers/lib.esm/base-provider.js
"use strict";
var __awaiter10 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e4) {
        reject(e4);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e4) {
        reject(e4);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger30 = new Logger(version23);
var MAX_CCIP_REDIRECTS = 10;
function checkTopic(topic) {
  if (topic == null) {
    return "null";
  }
  if (hexDataLength(topic) !== 32) {
    logger30.throwArgumentError("invalid topic", "topic", topic);
  }
  return topic.toLowerCase();
}
function serializeTopics(topics) {
  topics = topics.slice();
  while (topics.length > 0 && topics[topics.length - 1] == null) {
    topics.pop();
  }
  return topics.map((topic) => {
    if (Array.isArray(topic)) {
      const unique = {};
      topic.forEach((topic2) => {
        unique[checkTopic(topic2)] = true;
      });
      const sorted = Object.keys(unique);
      sorted.sort();
      return sorted.join("|");
    } else {
      return checkTopic(topic);
    }
  }).join("&");
}
function deserializeTopics(data) {
  if (data === "") {
    return [];
  }
  return data.split(/&/g).map((topic) => {
    if (topic === "") {
      return [];
    }
    const comps = topic.split("|").map((topic2) => {
      return topic2 === "null" ? null : topic2;
    });
    return comps.length === 1 ? comps[0] : comps;
  });
}
function getEventTag2(eventName) {
  if (typeof eventName === "string") {
    eventName = eventName.toLowerCase();
    if (hexDataLength(eventName) === 32) {
      return "tx:" + eventName;
    }
    if (eventName.indexOf(":") === -1) {
      return eventName;
    }
  } else if (Array.isArray(eventName)) {
    return "filter:*:" + serializeTopics(eventName);
  } else if (ForkEvent.isForkEvent(eventName)) {
    logger30.warn("not implemented");
    throw new Error("not implemented");
  } else if (eventName && typeof eventName === "object") {
    return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
  }
  throw new Error("invalid event - " + eventName);
}
function getTime() {
  return new Date().getTime();
}
function stall(duration) {
  return new Promise((resolve) => {
    setTimeout(resolve, duration);
  });
}
var PollableEvents = ["block", "network", "pending", "poll"];
var Event = class {
  constructor(tag, listener, once) {
    defineReadOnly(this, "tag", tag);
    defineReadOnly(this, "listener", listener);
    defineReadOnly(this, "once", once);
    this._lastBlockNumber = -2;
    this._inflight = false;
  }
  get event() {
    switch (this.type) {
      case "tx":
        return this.hash;
      case "filter":
        return this.filter;
    }
    return this.tag;
  }
  get type() {
    return this.tag.split(":")[0];
  }
  get hash() {
    const comps = this.tag.split(":");
    if (comps[0] !== "tx") {
      return null;
    }
    return comps[1];
  }
  get filter() {
    const comps = this.tag.split(":");
    if (comps[0] !== "filter") {
      return null;
    }
    const address = comps[1];
    const topics = deserializeTopics(comps[2]);
    const filter = {};
    if (topics.length > 0) {
      filter.topics = topics;
    }
    if (address && address !== "*") {
      filter.address = address;
    }
    return filter;
  }
  pollable() {
    return this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0;
  }
};
var coinInfos = {
  "0": { symbol: "btc", p2pkh: 0, p2sh: 5, prefix: "bc" },
  "2": { symbol: "ltc", p2pkh: 48, p2sh: 50, prefix: "ltc" },
  "3": { symbol: "doge", p2pkh: 30, p2sh: 22 },
  "60": { symbol: "eth", ilk: "eth" },
  "61": { symbol: "etc", ilk: "eth" },
  "700": { symbol: "xdai", ilk: "eth" }
};
function bytes32ify(value) {
  return hexZeroPad(BigNumber3.from(value).toHexString(), 32);
}
function base58Encode(data) {
  return Base58.encode(concat2([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));
}
var matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
var matchers = [
  new RegExp("^(https)://(.*)$", "i"),
  new RegExp("^(data):(.*)$", "i"),
  matcherIpfs,
  new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
];
function _parseString(result, start) {
  try {
    return toUtf8String(_parseBytes(result, start));
  } catch (error) {
  }
  return null;
}
function _parseBytes(result, start) {
  if (result === "0x") {
    return null;
  }
  const offset = BigNumber3.from(hexDataSlice(result, start, start + 32)).toNumber();
  const length = BigNumber3.from(hexDataSlice(result, offset, offset + 32)).toNumber();
  return hexDataSlice(result, offset + 32, offset + 32 + length);
}
function getIpfsLink(link) {
  if (link.match(/^ipfs:\/\/ipfs\//i)) {
    link = link.substring(12);
  } else if (link.match(/^ipfs:\/\//i)) {
    link = link.substring(7);
  } else {
    logger30.throwArgumentError("unsupported IPFS format", "link", link);
  }
  return `https://gateway.ipfs.io/ipfs/${link}`;
}
function numPad(value) {
  const result = arrayify(value);
  if (result.length > 32) {
    throw new Error("internal; should not happen");
  }
  const padded = new Uint8Array(32);
  padded.set(result, 32 - result.length);
  return padded;
}
function bytesPad(value) {
  if (value.length % 32 === 0) {
    return value;
  }
  const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
  result.set(value);
  return result;
}
function encodeBytes(datas) {
  const result = [];
  let byteCount = 0;
  for (let i3 = 0; i3 < datas.length; i3++) {
    result.push(null);
    byteCount += 32;
  }
  for (let i3 = 0; i3 < datas.length; i3++) {
    const data = arrayify(datas[i3]);
    result[i3] = numPad(byteCount);
    result.push(numPad(data.length));
    result.push(bytesPad(data));
    byteCount += 32 + Math.ceil(data.length / 32) * 32;
  }
  return hexConcat(result);
}
var Resolver = class {
  constructor(provider, address, name2, resolvedAddress) {
    defineReadOnly(this, "provider", provider);
    defineReadOnly(this, "name", name2);
    defineReadOnly(this, "address", provider.formatter.address(address));
    defineReadOnly(this, "_resolvedAddress", resolvedAddress);
  }
  supportsWildcard() {
    if (!this._supportsEip2544) {
      this._supportsEip2544 = this.provider.call({
        to: this.address,
        data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
      }).then((result) => {
        return BigNumber3.from(result).eq(1);
      }).catch((error) => {
        if (error.code === Logger.errors.CALL_EXCEPTION) {
          return false;
        }
        this._supportsEip2544 = null;
        throw error;
      });
    }
    return this._supportsEip2544;
  }
  _fetch(selector, parameters) {
    return __awaiter10(this, void 0, void 0, function* () {
      const tx = {
        to: this.address,
        ccipReadEnabled: true,
        data: hexConcat([selector, namehash(this.name), parameters || "0x"])
      };
      let parseBytes = false;
      if (yield this.supportsWildcard()) {
        parseBytes = true;
        tx.data = hexConcat(["0x9061b923", encodeBytes([dnsEncode(this.name), tx.data])]);
      }
      try {
        let result = yield this.provider.call(tx);
        if (arrayify(result).length % 32 === 4) {
          logger30.throwError("resolver threw error", Logger.errors.CALL_EXCEPTION, {
            transaction: tx,
            data: result
          });
        }
        if (parseBytes) {
          result = _parseBytes(result, 0);
        }
        return result;
      } catch (error) {
        if (error.code === Logger.errors.CALL_EXCEPTION) {
          return null;
        }
        throw error;
      }
    });
  }
  _fetchBytes(selector, parameters) {
    return __awaiter10(this, void 0, void 0, function* () {
      const result = yield this._fetch(selector, parameters);
      if (result != null) {
        return _parseBytes(result, 0);
      }
      return null;
    });
  }
  _getAddress(coinType, hexBytes) {
    const coinInfo = coinInfos[String(coinType)];
    if (coinInfo == null) {
      logger30.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {
        operation: `getAddress(${coinType})`
      });
    }
    if (coinInfo.ilk === "eth") {
      return this.provider.formatter.address(hexBytes);
    }
    const bytes3 = arrayify(hexBytes);
    if (coinInfo.p2pkh != null) {
      const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
      if (p2pkh) {
        const length = parseInt(p2pkh[1], 16);
        if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {
          return base58Encode(concat2([[coinInfo.p2pkh], "0x" + p2pkh[2]]));
        }
      }
    }
    if (coinInfo.p2sh != null) {
      const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
      if (p2sh) {
        const length = parseInt(p2sh[1], 16);
        if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {
          return base58Encode(concat2([[coinInfo.p2sh], "0x" + p2sh[2]]));
        }
      }
    }
    if (coinInfo.prefix != null) {
      const length = bytes3[1];
      let version28 = bytes3[0];
      if (version28 === 0) {
        if (length !== 20 && length !== 32) {
          version28 = -1;
        }
      } else {
        version28 = -1;
      }
      if (version28 >= 0 && bytes3.length === 2 + length && length >= 1 && length <= 75) {
        const words2 = import_bech32.default.toWords(bytes3.slice(2));
        words2.unshift(version28);
        return import_bech32.default.encode(coinInfo.prefix, words2);
      }
    }
    return null;
  }
  getAddress(coinType) {
    return __awaiter10(this, void 0, void 0, function* () {
      if (coinType == null) {
        coinType = 60;
      }
      if (coinType === 60) {
        try {
          const result = yield this._fetch("0x3b3b57de");
          if (result === "0x" || result === HashZero) {
            return null;
          }
          return this.provider.formatter.callAddress(result);
        } catch (error) {
          if (error.code === Logger.errors.CALL_EXCEPTION) {
            return null;
          }
          throw error;
        }
      }
      const hexBytes = yield this._fetchBytes("0xf1cb7e06", bytes32ify(coinType));
      if (hexBytes == null || hexBytes === "0x") {
        return null;
      }
      const address = this._getAddress(coinType, hexBytes);
      if (address == null) {
        logger30.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {
          operation: `getAddress(${coinType})`,
          coinType,
          data: hexBytes
        });
      }
      return address;
    });
  }
  getAvatar() {
    return __awaiter10(this, void 0, void 0, function* () {
      const linkage = [{ type: "name", content: this.name }];
      try {
        const avatar = yield this.getText("avatar");
        if (avatar == null) {
          return null;
        }
        for (let i3 = 0; i3 < matchers.length; i3++) {
          const match = avatar.match(matchers[i3]);
          if (match == null) {
            continue;
          }
          const scheme = match[1].toLowerCase();
          switch (scheme) {
            case "https":
              linkage.push({ type: "url", content: avatar });
              return { linkage, url: avatar };
            case "data":
              linkage.push({ type: "data", content: avatar });
              return { linkage, url: avatar };
            case "ipfs":
              linkage.push({ type: "ipfs", content: avatar });
              return { linkage, url: getIpfsLink(avatar) };
            case "erc721":
            case "erc1155": {
              const selector = scheme === "erc721" ? "0xc87b56dd" : "0x0e89341c";
              linkage.push({ type: scheme, content: avatar });
              const owner = this._resolvedAddress || (yield this.getAddress());
              const comps = (match[2] || "").split("/");
              if (comps.length !== 2) {
                return null;
              }
              const addr = yield this.provider.formatter.address(comps[0]);
              const tokenId = hexZeroPad(BigNumber3.from(comps[1]).toHexString(), 32);
              if (scheme === "erc721") {
                const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({
                  to: addr,
                  data: hexConcat(["0x6352211e", tokenId])
                }));
                if (owner !== tokenOwner) {
                  return null;
                }
                linkage.push({ type: "owner", content: tokenOwner });
              } else if (scheme === "erc1155") {
                const balance = BigNumber3.from(yield this.provider.call({
                  to: addr,
                  data: hexConcat(["0x00fdd58e", hexZeroPad(owner, 32), tokenId])
                }));
                if (balance.isZero()) {
                  return null;
                }
                linkage.push({ type: "balance", content: balance.toString() });
              }
              const tx = {
                to: this.provider.formatter.address(comps[0]),
                data: hexConcat([selector, tokenId])
              };
              let metadataUrl = _parseString(yield this.provider.call(tx), 0);
              if (metadataUrl == null) {
                return null;
              }
              linkage.push({ type: "metadata-url-base", content: metadataUrl });
              if (scheme === "erc1155") {
                metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                linkage.push({ type: "metadata-url-expanded", content: metadataUrl });
              }
              if (metadataUrl.match(/^ipfs:/i)) {
                metadataUrl = getIpfsLink(metadataUrl);
              }
              linkage.push({ type: "metadata-url", content: metadataUrl });
              const metadata = yield fetchJson(metadataUrl);
              if (!metadata) {
                return null;
              }
              linkage.push({ type: "metadata", content: JSON.stringify(metadata) });
              let imageUrl = metadata.image;
              if (typeof imageUrl !== "string") {
                return null;
              }
              if (imageUrl.match(/^(https:\/\/|data:)/i)) {
              } else {
                const ipfs = imageUrl.match(matcherIpfs);
                if (ipfs == null) {
                  return null;
                }
                linkage.push({ type: "url-ipfs", content: imageUrl });
                imageUrl = getIpfsLink(imageUrl);
              }
              linkage.push({ type: "url", content: imageUrl });
              return { linkage, url: imageUrl };
            }
          }
        }
      } catch (error) {
      }
      return null;
    });
  }
  getContentHash() {
    return __awaiter10(this, void 0, void 0, function* () {
      const hexBytes = yield this._fetchBytes("0xbc1c58d1");
      if (hexBytes == null || hexBytes === "0x") {
        return null;
      }
      const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
      if (ipfs) {
        const length = parseInt(ipfs[3], 16);
        if (ipfs[4].length === length * 2) {
          return "ipfs://" + Base58.encode("0x" + ipfs[1]);
        }
      }
      const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
      if (ipns) {
        const length = parseInt(ipns[3], 16);
        if (ipns[4].length === length * 2) {
          return "ipns://" + Base58.encode("0x" + ipns[1]);
        }
      }
      const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
      if (swarm) {
        if (swarm[1].length === 32 * 2) {
          return "bzz://" + swarm[1];
        }
      }
      return logger30.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "getContentHash()",
        data: hexBytes
      });
    });
  }
  getText(key2) {
    return __awaiter10(this, void 0, void 0, function* () {
      let keyBytes = toUtf8Bytes(key2);
      keyBytes = concat2([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
      if (keyBytes.length % 32 !== 0) {
        keyBytes = concat2([keyBytes, hexZeroPad("0x", 32 - key2.length % 32)]);
      }
      const hexBytes = yield this._fetchBytes("0x59d1d43c", hexlify(keyBytes));
      if (hexBytes == null || hexBytes === "0x") {
        return null;
      }
      return toUtf8String(hexBytes);
    });
  }
};
var defaultFormatter = null;
var nextPollId = 1;
var BaseProvider = class extends Provider {
  constructor(network) {
    logger30.checkNew(new.target, Provider);
    super();
    this._events = [];
    this._emitted = { block: -2 };
    this.disableCcipRead = false;
    this.formatter = new.target.getFormatter();
    defineReadOnly(this, "anyNetwork", network === "any");
    if (this.anyNetwork) {
      network = this.detectNetwork();
    }
    if (network instanceof Promise) {
      this._networkPromise = network;
      network.catch((error) => {
      });
      this._ready().catch((error) => {
      });
    } else {
      const knownNetwork = getStatic(new.target, "getNetwork")(network);
      if (knownNetwork) {
        defineReadOnly(this, "_network", knownNetwork);
        this.emit("network", knownNetwork, null);
      } else {
        logger30.throwArgumentError("invalid network", "network", network);
      }
    }
    this._maxInternalBlockNumber = -1024;
    this._lastBlockNumber = -2;
    this._maxFilterBlockRange = 10;
    this._pollingInterval = 4e3;
    this._fastQueryDate = 0;
  }
  _ready() {
    return __awaiter10(this, void 0, void 0, function* () {
      if (this._network == null) {
        let network = null;
        if (this._networkPromise) {
          try {
            network = yield this._networkPromise;
          } catch (error) {
          }
        }
        if (network == null) {
          network = yield this.detectNetwork();
        }
        if (!network) {
          logger30.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
        }
        if (this._network == null) {
          if (this.anyNetwork) {
            this._network = network;
          } else {
            defineReadOnly(this, "_network", network);
          }
          this.emit("network", network, null);
        }
      }
      return this._network;
    });
  }
  get ready() {
    return poll(() => {
      return this._ready().then((network) => {
        return network;
      }, (error) => {
        if (error.code === Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
          return void 0;
        }
        throw error;
      });
    });
  }
  static getFormatter() {
    if (defaultFormatter == null) {
      defaultFormatter = new Formatter();
    }
    return defaultFormatter;
  }
  static getNetwork(network) {
    return getNetwork(network == null ? "homestead" : network);
  }
  ccipReadFetch(tx, calldata, urls) {
    return __awaiter10(this, void 0, void 0, function* () {
      if (this.disableCcipRead || urls.length === 0) {
        return null;
      }
      const sender = tx.to.toLowerCase();
      const data = calldata.toLowerCase();
      const errorMessages = [];
      for (let i3 = 0; i3 < urls.length; i3++) {
        const url = urls[i3];
        const href = url.replace("{sender}", sender).replace("{data}", data);
        const json = url.indexOf("{data}") >= 0 ? null : JSON.stringify({ data, sender });
        const result = yield fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {
          value.status = response.statusCode;
          return value;
        });
        if (result.data) {
          return result.data;
        }
        const errorMessage = result.message || "unknown error";
        if (result.status >= 400 && result.status < 500) {
          return logger30.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, { url, errorMessage });
        }
        errorMessages.push(errorMessage);
      }
      return logger30.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m3) => JSON.stringify(m3)).join(", ")}`, Logger.errors.SERVER_ERROR, {
        urls,
        errorMessages
      });
    });
  }
  _getInternalBlockNumber(maxAge) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this._ready();
      if (maxAge > 0) {
        while (this._internalBlockNumber) {
          const internalBlockNumber = this._internalBlockNumber;
          try {
            const result = yield internalBlockNumber;
            if (getTime() - result.respTime <= maxAge) {
              return result.blockNumber;
            }
            break;
          } catch (error) {
            if (this._internalBlockNumber === internalBlockNumber) {
              break;
            }
          }
        }
      }
      const reqTime = getTime();
      const checkInternalBlockNumber = resolveProperties({
        blockNumber: this.perform("getBlockNumber", {}),
        networkError: this.getNetwork().then((network) => null, (error) => error)
      }).then(({ blockNumber, networkError }) => {
        if (networkError) {
          if (this._internalBlockNumber === checkInternalBlockNumber) {
            this._internalBlockNumber = null;
          }
          throw networkError;
        }
        const respTime = getTime();
        blockNumber = BigNumber3.from(blockNumber).toNumber();
        if (blockNumber < this._maxInternalBlockNumber) {
          blockNumber = this._maxInternalBlockNumber;
        }
        this._maxInternalBlockNumber = blockNumber;
        this._setFastBlockNumber(blockNumber);
        return { blockNumber, reqTime, respTime };
      });
      this._internalBlockNumber = checkInternalBlockNumber;
      checkInternalBlockNumber.catch((error) => {
        if (this._internalBlockNumber === checkInternalBlockNumber) {
          this._internalBlockNumber = null;
        }
      });
      return (yield checkInternalBlockNumber).blockNumber;
    });
  }
  poll() {
    return __awaiter10(this, void 0, void 0, function* () {
      const pollId = nextPollId++;
      const runners = [];
      let blockNumber = null;
      try {
        blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);
      } catch (error) {
        this.emit("error", error);
        return;
      }
      this._setFastBlockNumber(blockNumber);
      this.emit("poll", pollId, blockNumber);
      if (blockNumber === this._lastBlockNumber) {
        this.emit("didPoll", pollId);
        return;
      }
      if (this._emitted.block === -2) {
        this._emitted.block = blockNumber - 1;
      }
      if (Math.abs(this._emitted.block - blockNumber) > 1e3) {
        logger30.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);
        this.emit("error", logger30.makeError("network block skew detected", Logger.errors.NETWORK_ERROR, {
          blockNumber,
          event: "blockSkew",
          previousBlockNumber: this._emitted.block
        }));
        this.emit("block", blockNumber);
      } else {
        for (let i3 = this._emitted.block + 1; i3 <= blockNumber; i3++) {
          this.emit("block", i3);
        }
      }
      if (this._emitted.block !== blockNumber) {
        this._emitted.block = blockNumber;
        Object.keys(this._emitted).forEach((key2) => {
          if (key2 === "block") {
            return;
          }
          const eventBlockNumber = this._emitted[key2];
          if (eventBlockNumber === "pending") {
            return;
          }
          if (blockNumber - eventBlockNumber > 12) {
            delete this._emitted[key2];
          }
        });
      }
      if (this._lastBlockNumber === -2) {
        this._lastBlockNumber = blockNumber - 1;
      }
      this._events.forEach((event) => {
        switch (event.type) {
          case "tx": {
            const hash3 = event.hash;
            let runner = this.getTransactionReceipt(hash3).then((receipt) => {
              if (!receipt || receipt.blockNumber == null) {
                return null;
              }
              this._emitted["t:" + hash3] = receipt.blockNumber;
              this.emit(hash3, receipt);
              return null;
            }).catch((error) => {
              this.emit("error", error);
            });
            runners.push(runner);
            break;
          }
          case "filter": {
            if (!event._inflight) {
              event._inflight = true;
              const filter = event.filter;
              filter.fromBlock = event._lastBlockNumber + 1;
              filter.toBlock = blockNumber;
              if (filter.toBlock - this._maxFilterBlockRange > filter.fromBlock) {
                filter.fromBlock = filter.toBlock - this._maxFilterBlockRange;
              }
              const runner = this.getLogs(filter).then((logs) => {
                event._inflight = false;
                if (logs.length === 0) {
                  return;
                }
                logs.forEach((log) => {
                  if (log.blockNumber > event._lastBlockNumber) {
                    event._lastBlockNumber = log.blockNumber;
                  }
                  this._emitted["b:" + log.blockHash] = log.blockNumber;
                  this._emitted["t:" + log.transactionHash] = log.blockNumber;
                  this.emit(filter, log);
                });
              }).catch((error) => {
                this.emit("error", error);
                event._inflight = false;
              });
              runners.push(runner);
            }
            break;
          }
        }
      });
      this._lastBlockNumber = blockNumber;
      Promise.all(runners).then(() => {
        this.emit("didPoll", pollId);
      }).catch((error) => {
        this.emit("error", error);
      });
      return;
    });
  }
  resetEventsBlock(blockNumber) {
    this._lastBlockNumber = blockNumber - 1;
    if (this.polling) {
      this.poll();
    }
  }
  get network() {
    return this._network;
  }
  detectNetwork() {
    return __awaiter10(this, void 0, void 0, function* () {
      return logger30.throwError("provider does not support network detection", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "provider.detectNetwork"
      });
    });
  }
  getNetwork() {
    return __awaiter10(this, void 0, void 0, function* () {
      const network = yield this._ready();
      const currentNetwork = yield this.detectNetwork();
      if (network.chainId !== currentNetwork.chainId) {
        if (this.anyNetwork) {
          this._network = currentNetwork;
          this._lastBlockNumber = -2;
          this._fastBlockNumber = null;
          this._fastBlockNumberPromise = null;
          this._fastQueryDate = 0;
          this._emitted.block = -2;
          this._maxInternalBlockNumber = -1024;
          this._internalBlockNumber = null;
          this.emit("network", currentNetwork, network);
          yield stall(0);
          return this._network;
        }
        const error = logger30.makeError("underlying network changed", Logger.errors.NETWORK_ERROR, {
          event: "changed",
          network,
          detectedNetwork: currentNetwork
        });
        this.emit("error", error);
        throw error;
      }
      return network;
    });
  }
  get blockNumber() {
    this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {
      this._setFastBlockNumber(blockNumber);
    }, (error) => {
    });
    return this._fastBlockNumber != null ? this._fastBlockNumber : -1;
  }
  get polling() {
    return this._poller != null;
  }
  set polling(value) {
    if (value && !this._poller) {
      this._poller = setInterval(() => {
        this.poll();
      }, this.pollingInterval);
      if (!this._bootstrapPoll) {
        this._bootstrapPoll = setTimeout(() => {
          this.poll();
          this._bootstrapPoll = setTimeout(() => {
            if (!this._poller) {
              this.poll();
            }
            this._bootstrapPoll = null;
          }, this.pollingInterval);
        }, 0);
      }
    } else if (!value && this._poller) {
      clearInterval(this._poller);
      this._poller = null;
    }
  }
  get pollingInterval() {
    return this._pollingInterval;
  }
  set pollingInterval(value) {
    if (typeof value !== "number" || value <= 0 || parseInt(String(value)) != value) {
      throw new Error("invalid polling interval");
    }
    this._pollingInterval = value;
    if (this._poller) {
      clearInterval(this._poller);
      this._poller = setInterval(() => {
        this.poll();
      }, this._pollingInterval);
    }
  }
  _getFastBlockNumber() {
    const now2 = getTime();
    if (now2 - this._fastQueryDate > 2 * this._pollingInterval) {
      this._fastQueryDate = now2;
      this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {
        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
          this._fastBlockNumber = blockNumber;
        }
        return this._fastBlockNumber;
      });
    }
    return this._fastBlockNumberPromise;
  }
  _setFastBlockNumber(blockNumber) {
    if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
      return;
    }
    this._fastQueryDate = getTime();
    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
      this._fastBlockNumber = blockNumber;
      this._fastBlockNumberPromise = Promise.resolve(blockNumber);
    }
  }
  waitForTransaction(transactionHash, confirmations, timeout) {
    return __awaiter10(this, void 0, void 0, function* () {
      return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);
    });
  }
  _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {
    return __awaiter10(this, void 0, void 0, function* () {
      const receipt = yield this.getTransactionReceipt(transactionHash);
      if ((receipt ? receipt.confirmations : 0) >= confirmations) {
        return receipt;
      }
      return new Promise((resolve, reject) => {
        const cancelFuncs = [];
        let done = false;
        const alreadyDone = function() {
          if (done) {
            return true;
          }
          done = true;
          cancelFuncs.forEach((func) => {
            func();
          });
          return false;
        };
        const minedHandler = (receipt2) => {
          if (receipt2.confirmations < confirmations) {
            return;
          }
          if (alreadyDone()) {
            return;
          }
          resolve(receipt2);
        };
        this.on(transactionHash, minedHandler);
        cancelFuncs.push(() => {
          this.removeListener(transactionHash, minedHandler);
        });
        if (replaceable) {
          let lastBlockNumber = replaceable.startBlock;
          let scannedBlock = null;
          const replaceHandler = (blockNumber) => __awaiter10(this, void 0, void 0, function* () {
            if (done) {
              return;
            }
            yield stall(1e3);
            this.getTransactionCount(replaceable.from).then((nonce) => __awaiter10(this, void 0, void 0, function* () {
              if (done) {
                return;
              }
              if (nonce <= replaceable.nonce) {
                lastBlockNumber = blockNumber;
              } else {
                {
                  const mined = yield this.getTransaction(transactionHash);
                  if (mined && mined.blockNumber != null) {
                    return;
                  }
                }
                if (scannedBlock == null) {
                  scannedBlock = lastBlockNumber - 3;
                  if (scannedBlock < replaceable.startBlock) {
                    scannedBlock = replaceable.startBlock;
                  }
                }
                while (scannedBlock <= blockNumber) {
                  if (done) {
                    return;
                  }
                  const block = yield this.getBlockWithTransactions(scannedBlock);
                  for (let ti = 0; ti < block.transactions.length; ti++) {
                    const tx = block.transactions[ti];
                    if (tx.hash === transactionHash) {
                      return;
                    }
                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {
                      if (done) {
                        return;
                      }
                      const receipt2 = yield this.waitForTransaction(tx.hash, confirmations);
                      if (alreadyDone()) {
                        return;
                      }
                      let reason = "replaced";
                      if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
                        reason = "repriced";
                      } else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
                        reason = "cancelled";
                      }
                      reject(logger30.makeError("transaction was replaced", Logger.errors.TRANSACTION_REPLACED, {
                        cancelled: reason === "replaced" || reason === "cancelled",
                        reason,
                        replacement: this._wrapTransaction(tx),
                        hash: transactionHash,
                        receipt: receipt2
                      }));
                      return;
                    }
                  }
                  scannedBlock++;
                }
              }
              if (done) {
                return;
              }
              this.once("block", replaceHandler);
            }), (error) => {
              if (done) {
                return;
              }
              this.once("block", replaceHandler);
            });
          });
          if (done) {
            return;
          }
          this.once("block", replaceHandler);
          cancelFuncs.push(() => {
            this.removeListener("block", replaceHandler);
          });
        }
        if (typeof timeout === "number" && timeout > 0) {
          const timer2 = setTimeout(() => {
            if (alreadyDone()) {
              return;
            }
            reject(logger30.makeError("timeout exceeded", Logger.errors.TIMEOUT, { timeout }));
          }, timeout);
          if (timer2.unref) {
            timer2.unref();
          }
          cancelFuncs.push(() => {
            clearTimeout(timer2);
          });
        }
      });
    });
  }
  getBlockNumber() {
    return __awaiter10(this, void 0, void 0, function* () {
      return this._getInternalBlockNumber(0);
    });
  }
  getGasPrice() {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const result = yield this.perform("getGasPrice", {});
      try {
        return BigNumber3.from(result);
      } catch (error) {
        return logger30.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
          method: "getGasPrice",
          result,
          error
        });
      }
    });
  }
  getBalance(addressOrName, blockTag) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const params = yield resolveProperties({
        address: this._getAddress(addressOrName),
        blockTag: this._getBlockTag(blockTag)
      });
      const result = yield this.perform("getBalance", params);
      try {
        return BigNumber3.from(result);
      } catch (error) {
        return logger30.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
          method: "getBalance",
          params,
          result,
          error
        });
      }
    });
  }
  getTransactionCount(addressOrName, blockTag) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const params = yield resolveProperties({
        address: this._getAddress(addressOrName),
        blockTag: this._getBlockTag(blockTag)
      });
      const result = yield this.perform("getTransactionCount", params);
      try {
        return BigNumber3.from(result).toNumber();
      } catch (error) {
        return logger30.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
          method: "getTransactionCount",
          params,
          result,
          error
        });
      }
    });
  }
  getCode(addressOrName, blockTag) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const params = yield resolveProperties({
        address: this._getAddress(addressOrName),
        blockTag: this._getBlockTag(blockTag)
      });
      const result = yield this.perform("getCode", params);
      try {
        return hexlify(result);
      } catch (error) {
        return logger30.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
          method: "getCode",
          params,
          result,
          error
        });
      }
    });
  }
  getStorageAt(addressOrName, position, blockTag) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const params = yield resolveProperties({
        address: this._getAddress(addressOrName),
        blockTag: this._getBlockTag(blockTag),
        position: Promise.resolve(position).then((p2) => hexValue2(p2))
      });
      const result = yield this.perform("getStorageAt", params);
      try {
        return hexlify(result);
      } catch (error) {
        return logger30.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
          method: "getStorageAt",
          params,
          result,
          error
        });
      }
    });
  }
  _wrapTransaction(tx, hash3, startBlock) {
    if (hash3 != null && hexDataLength(hash3) !== 32) {
      throw new Error("invalid response - sendTransaction");
    }
    const result = tx;
    if (hash3 != null && tx.hash !== hash3) {
      logger30.throwError("Transaction hash mismatch from Provider.sendTransaction.", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash3 });
    }
    result.wait = (confirms, timeout) => __awaiter10(this, void 0, void 0, function* () {
      if (confirms == null) {
        confirms = 1;
      }
      if (timeout == null) {
        timeout = 0;
      }
      let replacement = void 0;
      if (confirms !== 0 && startBlock != null) {
        replacement = {
          data: tx.data,
          from: tx.from,
          nonce: tx.nonce,
          to: tx.to,
          value: tx.value,
          startBlock
        };
      }
      const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);
      if (receipt == null && confirms === 0) {
        return null;
      }
      this._emitted["t:" + tx.hash] = receipt.blockNumber;
      if (receipt.status === 0) {
        logger30.throwError("transaction failed", Logger.errors.CALL_EXCEPTION, {
          transactionHash: tx.hash,
          transaction: tx,
          receipt
        });
      }
      return receipt;
    });
    return result;
  }
  sendTransaction(signedTransaction) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const hexTx = yield Promise.resolve(signedTransaction).then((t3) => hexlify(t3));
      const tx = this.formatter.transaction(signedTransaction);
      if (tx.confirmations == null) {
        tx.confirmations = 0;
      }
      const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
      try {
        const hash3 = yield this.perform("sendTransaction", { signedTransaction: hexTx });
        return this._wrapTransaction(tx, hash3, blockNumber);
      } catch (error) {
        error.transaction = tx;
        error.transactionHash = tx.hash;
        throw error;
      }
    });
  }
  _getTransactionRequest(transaction) {
    return __awaiter10(this, void 0, void 0, function* () {
      const values = yield transaction;
      const tx = {};
      ["from", "to"].forEach((key2) => {
        if (values[key2] == null) {
          return;
        }
        tx[key2] = Promise.resolve(values[key2]).then((v3) => v3 ? this._getAddress(v3) : null);
      });
      ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach((key2) => {
        if (values[key2] == null) {
          return;
        }
        tx[key2] = Promise.resolve(values[key2]).then((v3) => v3 ? BigNumber3.from(v3) : null);
      });
      ["type"].forEach((key2) => {
        if (values[key2] == null) {
          return;
        }
        tx[key2] = Promise.resolve(values[key2]).then((v3) => v3 != null ? v3 : null);
      });
      if (values.accessList) {
        tx.accessList = this.formatter.accessList(values.accessList);
      }
      ["data"].forEach((key2) => {
        if (values[key2] == null) {
          return;
        }
        tx[key2] = Promise.resolve(values[key2]).then((v3) => v3 ? hexlify(v3) : null);
      });
      return this.formatter.transactionRequest(yield resolveProperties(tx));
    });
  }
  _getFilter(filter) {
    return __awaiter10(this, void 0, void 0, function* () {
      filter = yield filter;
      const result = {};
      if (filter.address != null) {
        result.address = this._getAddress(filter.address);
      }
      ["blockHash", "topics"].forEach((key2) => {
        if (filter[key2] == null) {
          return;
        }
        result[key2] = filter[key2];
      });
      ["fromBlock", "toBlock"].forEach((key2) => {
        if (filter[key2] == null) {
          return;
        }
        result[key2] = this._getBlockTag(filter[key2]);
      });
      return this.formatter.filter(yield resolveProperties(result));
    });
  }
  _call(transaction, blockTag, attempt) {
    return __awaiter10(this, void 0, void 0, function* () {
      if (attempt >= MAX_CCIP_REDIRECTS) {
        logger30.throwError("CCIP read exceeded maximum redirections", Logger.errors.SERVER_ERROR, {
          redirects: attempt,
          transaction
        });
      }
      const txSender = transaction.to;
      const result = yield this.perform("call", { transaction, blockTag });
      if (attempt >= 0 && blockTag === "latest" && txSender != null && result.substring(0, 10) === "0x556f1830" && hexDataLength(result) % 32 === 4) {
        try {
          const data = hexDataSlice(result, 4);
          const sender = hexDataSlice(data, 0, 32);
          if (!BigNumber3.from(sender).eq(txSender)) {
            logger30.throwError("CCIP Read sender did not match", Logger.errors.CALL_EXCEPTION, {
              name: "OffchainLookup",
              signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
              transaction,
              data: result
            });
          }
          const urls = [];
          const urlsOffset = BigNumber3.from(hexDataSlice(data, 32, 64)).toNumber();
          const urlsLength = BigNumber3.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();
          const urlsData = hexDataSlice(data, urlsOffset + 32);
          for (let u3 = 0; u3 < urlsLength; u3++) {
            const url = _parseString(urlsData, u3 * 32);
            if (url == null) {
              logger30.throwError("CCIP Read contained corrupt URL string", Logger.errors.CALL_EXCEPTION, {
                name: "OffchainLookup",
                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                transaction,
                data: result
              });
            }
            urls.push(url);
          }
          const calldata = _parseBytes(data, 64);
          if (!BigNumber3.from(hexDataSlice(data, 100, 128)).isZero()) {
            logger30.throwError("CCIP Read callback selector included junk", Logger.errors.CALL_EXCEPTION, {
              name: "OffchainLookup",
              signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
              transaction,
              data: result
            });
          }
          const callbackSelector = hexDataSlice(data, 96, 100);
          const extraData = _parseBytes(data, 128);
          const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);
          if (ccipResult == null) {
            logger30.throwError("CCIP Read disabled or provided no URLs", Logger.errors.CALL_EXCEPTION, {
              name: "OffchainLookup",
              signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
              transaction,
              data: result
            });
          }
          const tx = {
            to: txSender,
            data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])
          };
          return this._call(tx, blockTag, attempt + 1);
        } catch (error) {
          if (error.code === Logger.errors.SERVER_ERROR) {
            throw error;
          }
        }
      }
      try {
        return hexlify(result);
      } catch (error) {
        return logger30.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
          method: "call",
          params: { transaction, blockTag },
          result,
          error
        });
      }
    });
  }
  call(transaction, blockTag) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const resolved = yield resolveProperties({
        transaction: this._getTransactionRequest(transaction),
        blockTag: this._getBlockTag(blockTag),
        ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)
      });
      return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);
    });
  }
  estimateGas(transaction) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const params = yield resolveProperties({
        transaction: this._getTransactionRequest(transaction)
      });
      const result = yield this.perform("estimateGas", params);
      try {
        return BigNumber3.from(result);
      } catch (error) {
        return logger30.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
          method: "estimateGas",
          params,
          result,
          error
        });
      }
    });
  }
  _getAddress(addressOrName) {
    return __awaiter10(this, void 0, void 0, function* () {
      addressOrName = yield addressOrName;
      if (typeof addressOrName !== "string") {
        logger30.throwArgumentError("invalid address or ENS name", "name", addressOrName);
      }
      const address = yield this.resolveName(addressOrName);
      if (address == null) {
        logger30.throwError("ENS name not configured", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: `resolveName(${JSON.stringify(addressOrName)})`
        });
      }
      return address;
    });
  }
  _getBlock(blockHashOrBlockTag, includeTransactions) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      blockHashOrBlockTag = yield blockHashOrBlockTag;
      let blockNumber = -128;
      const params = {
        includeTransactions: !!includeTransactions
      };
      if (isHexString(blockHashOrBlockTag, 32)) {
        params.blockHash = blockHashOrBlockTag;
      } else {
        try {
          params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);
          if (isHexString(params.blockTag)) {
            blockNumber = parseInt(params.blockTag.substring(2), 16);
          }
        } catch (error) {
          logger30.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
        }
      }
      return poll(() => __awaiter10(this, void 0, void 0, function* () {
        const block = yield this.perform("getBlock", params);
        if (block == null) {
          if (params.blockHash != null) {
            if (this._emitted["b:" + params.blockHash] == null) {
              return null;
            }
          }
          if (params.blockTag != null) {
            if (blockNumber > this._emitted.block) {
              return null;
            }
          }
          return void 0;
        }
        if (includeTransactions) {
          let blockNumber2 = null;
          for (let i3 = 0; i3 < block.transactions.length; i3++) {
            const tx = block.transactions[i3];
            if (tx.blockNumber == null) {
              tx.confirmations = 0;
            } else if (tx.confirmations == null) {
              if (blockNumber2 == null) {
                blockNumber2 = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
              }
              let confirmations = blockNumber2 - tx.blockNumber + 1;
              if (confirmations <= 0) {
                confirmations = 1;
              }
              tx.confirmations = confirmations;
            }
          }
          const blockWithTxs = this.formatter.blockWithTransactions(block);
          blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));
          return blockWithTxs;
        }
        return this.formatter.block(block);
      }), { oncePoll: this });
    });
  }
  getBlock(blockHashOrBlockTag) {
    return this._getBlock(blockHashOrBlockTag, false);
  }
  getBlockWithTransactions(blockHashOrBlockTag) {
    return this._getBlock(blockHashOrBlockTag, true);
  }
  getTransaction(transactionHash) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      transactionHash = yield transactionHash;
      const params = { transactionHash: this.formatter.hash(transactionHash, true) };
      return poll(() => __awaiter10(this, void 0, void 0, function* () {
        const result = yield this.perform("getTransaction", params);
        if (result == null) {
          if (this._emitted["t:" + transactionHash] == null) {
            return null;
          }
          return void 0;
        }
        const tx = this.formatter.transactionResponse(result);
        if (tx.blockNumber == null) {
          tx.confirmations = 0;
        } else if (tx.confirmations == null) {
          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
          let confirmations = blockNumber - tx.blockNumber + 1;
          if (confirmations <= 0) {
            confirmations = 1;
          }
          tx.confirmations = confirmations;
        }
        return this._wrapTransaction(tx);
      }), { oncePoll: this });
    });
  }
  getTransactionReceipt(transactionHash) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      transactionHash = yield transactionHash;
      const params = { transactionHash: this.formatter.hash(transactionHash, true) };
      return poll(() => __awaiter10(this, void 0, void 0, function* () {
        const result = yield this.perform("getTransactionReceipt", params);
        if (result == null) {
          if (this._emitted["t:" + transactionHash] == null) {
            return null;
          }
          return void 0;
        }
        if (result.blockHash == null) {
          return void 0;
        }
        const receipt = this.formatter.receipt(result);
        if (receipt.blockNumber == null) {
          receipt.confirmations = 0;
        } else if (receipt.confirmations == null) {
          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
          let confirmations = blockNumber - receipt.blockNumber + 1;
          if (confirmations <= 0) {
            confirmations = 1;
          }
          receipt.confirmations = confirmations;
        }
        return receipt;
      }), { oncePoll: this });
    });
  }
  getLogs(filter) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const params = yield resolveProperties({ filter: this._getFilter(filter) });
      const logs = yield this.perform("getLogs", params);
      logs.forEach((log) => {
        if (log.removed == null) {
          log.removed = false;
        }
      });
      return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);
    });
  }
  getEtherPrice() {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      return this.perform("getEtherPrice", {});
    });
  }
  _getBlockTag(blockTag) {
    return __awaiter10(this, void 0, void 0, function* () {
      blockTag = yield blockTag;
      if (typeof blockTag === "number" && blockTag < 0) {
        if (blockTag % 1) {
          logger30.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
        }
        let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
        blockNumber += blockTag;
        if (blockNumber < 0) {
          blockNumber = 0;
        }
        return this.formatter.blockTag(blockNumber);
      }
      return this.formatter.blockTag(blockTag);
    });
  }
  getResolver(name2) {
    return __awaiter10(this, void 0, void 0, function* () {
      let currentName = name2;
      while (true) {
        if (currentName === "" || currentName === ".") {
          return null;
        }
        if (name2 !== "eth" && currentName === "eth") {
          return null;
        }
        const addr = yield this._getResolver(currentName, "getResolver");
        if (addr != null) {
          const resolver = new Resolver(this, addr, name2);
          if (currentName !== name2 && !(yield resolver.supportsWildcard())) {
            return null;
          }
          return resolver;
        }
        currentName = currentName.split(".").slice(1).join(".");
      }
    });
  }
  _getResolver(name2, operation) {
    return __awaiter10(this, void 0, void 0, function* () {
      if (operation == null) {
        operation = "ENS";
      }
      const network = yield this.getNetwork();
      if (!network.ensAddress) {
        logger30.throwError("network does not support ENS", Logger.errors.UNSUPPORTED_OPERATION, { operation, network: network.name });
      }
      try {
        const addrData = yield this.call({
          to: network.ensAddress,
          data: "0x0178b8bf" + namehash(name2).substring(2)
        });
        return this.formatter.callAddress(addrData);
      } catch (error) {
      }
      return null;
    });
  }
  resolveName(name2) {
    return __awaiter10(this, void 0, void 0, function* () {
      name2 = yield name2;
      try {
        return Promise.resolve(this.formatter.address(name2));
      } catch (error) {
        if (isHexString(name2)) {
          throw error;
        }
      }
      if (typeof name2 !== "string") {
        logger30.throwArgumentError("invalid ENS name", "name", name2);
      }
      const resolver = yield this.getResolver(name2);
      if (!resolver) {
        return null;
      }
      return yield resolver.getAddress();
    });
  }
  lookupAddress(address) {
    return __awaiter10(this, void 0, void 0, function* () {
      address = yield address;
      address = this.formatter.address(address);
      const node = address.substring(2).toLowerCase() + ".addr.reverse";
      const resolverAddr = yield this._getResolver(node, "lookupAddress");
      if (resolverAddr == null) {
        return null;
      }
      const name2 = _parseString(yield this.call({
        to: resolverAddr,
        data: "0x691f3431" + namehash(node).substring(2)
      }), 0);
      const addr = yield this.resolveName(name2);
      if (addr != address) {
        return null;
      }
      return name2;
    });
  }
  getAvatar(nameOrAddress) {
    return __awaiter10(this, void 0, void 0, function* () {
      let resolver = null;
      if (isHexString(nameOrAddress)) {
        const address = this.formatter.address(nameOrAddress);
        const node = address.substring(2).toLowerCase() + ".addr.reverse";
        const resolverAddress = yield this._getResolver(node, "getAvatar");
        if (!resolverAddress) {
          return null;
        }
        resolver = new Resolver(this, resolverAddress, node);
        try {
          const avatar2 = yield resolver.getAvatar();
          if (avatar2) {
            return avatar2.url;
          }
        } catch (error) {
          if (error.code !== Logger.errors.CALL_EXCEPTION) {
            throw error;
          }
        }
        try {
          const name2 = _parseString(yield this.call({
            to: resolverAddress,
            data: "0x691f3431" + namehash(node).substring(2)
          }), 0);
          resolver = yield this.getResolver(name2);
        } catch (error) {
          if (error.code !== Logger.errors.CALL_EXCEPTION) {
            throw error;
          }
          return null;
        }
      } else {
        resolver = yield this.getResolver(nameOrAddress);
        if (!resolver) {
          return null;
        }
      }
      const avatar = yield resolver.getAvatar();
      if (avatar == null) {
        return null;
      }
      return avatar.url;
    });
  }
  perform(method, params) {
    return logger30.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
  }
  _startEvent(event) {
    this.polling = this._events.filter((e4) => e4.pollable()).length > 0;
  }
  _stopEvent(event) {
    this.polling = this._events.filter((e4) => e4.pollable()).length > 0;
  }
  _addEventListener(eventName, listener, once) {
    const event = new Event(getEventTag2(eventName), listener, once);
    this._events.push(event);
    this._startEvent(event);
    return this;
  }
  on(eventName, listener) {
    return this._addEventListener(eventName, listener, false);
  }
  once(eventName, listener) {
    return this._addEventListener(eventName, listener, true);
  }
  emit(eventName, ...args) {
    let result = false;
    let stopped = [];
    let eventTag = getEventTag2(eventName);
    this._events = this._events.filter((event) => {
      if (event.tag !== eventTag) {
        return true;
      }
      setTimeout(() => {
        event.listener.apply(this, args);
      }, 0);
      result = true;
      if (event.once) {
        stopped.push(event);
        return false;
      }
      return true;
    });
    stopped.forEach((event) => {
      this._stopEvent(event);
    });
    return result;
  }
  listenerCount(eventName) {
    if (!eventName) {
      return this._events.length;
    }
    let eventTag = getEventTag2(eventName);
    return this._events.filter((event) => {
      return event.tag === eventTag;
    }).length;
  }
  listeners(eventName) {
    if (eventName == null) {
      return this._events.map((event) => event.listener);
    }
    let eventTag = getEventTag2(eventName);
    return this._events.filter((event) => event.tag === eventTag).map((event) => event.listener);
  }
  off(eventName, listener) {
    if (listener == null) {
      return this.removeAllListeners(eventName);
    }
    const stopped = [];
    let found = false;
    let eventTag = getEventTag2(eventName);
    this._events = this._events.filter((event) => {
      if (event.tag !== eventTag || event.listener != listener) {
        return true;
      }
      if (found) {
        return true;
      }
      found = true;
      stopped.push(event);
      return false;
    });
    stopped.forEach((event) => {
      this._stopEvent(event);
    });
    return this;
  }
  removeAllListeners(eventName) {
    let stopped = [];
    if (eventName == null) {
      stopped = this._events;
      this._events = [];
    } else {
      const eventTag = getEventTag2(eventName);
      this._events = this._events.filter((event) => {
        if (event.tag !== eventTag) {
          return true;
        }
        stopped.push(event);
        return false;
      });
    }
    stopped.forEach((event) => {
      this._stopEvent(event);
    });
    return this;
  }
};

// node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js
"use strict";
var __awaiter11 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e4) {
        reject(e4);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e4) {
        reject(e4);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger31 = new Logger(version23);
var errorGas = ["call", "estimateGas"];
function spelunk(value) {
  if (value == null) {
    return null;
  }
  if (typeof value.message === "string" && value.message.match("reverted") && isHexString(value.data)) {
    return { message: value.message, data: value.data };
  }
  if (typeof value === "object") {
    for (const key2 in value) {
      const result = spelunk(value[key2]);
      if (result) {
        return result;
      }
    }
    return null;
  }
  if (typeof value === "string") {
    try {
      return spelunk(JSON.parse(value));
    } catch (error) {
    }
  }
  return null;
}
function checkError(method, error, params) {
  if (method === "call") {
    const result = spelunk(error);
    if (result) {
      return result.data;
    }
    logger31.throwError("missing revert data in call exception; Transaction reverted without a reason string", Logger.errors.CALL_EXCEPTION, {
      error,
      data: "0x"
    });
  }
  let message = error.message;
  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === "string") {
    message = error.error.message;
  } else if (typeof error.body === "string") {
    message = error.body;
  } else if (typeof error.responseText === "string") {
    message = error.responseText;
  }
  message = (message || "").toLowerCase();
  const transaction = params.transaction || params.signedTransaction;
  if (message.match(/insufficient funds|base fee exceeds gas limit/)) {
    logger31.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/nonce (is )?too low/)) {
    logger31.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/replacement transaction underpriced/)) {
    logger31.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/only replay-protected/)) {
    logger31.throwError("legacy pre-eip-155 transactions not supported", Logger.errors.UNSUPPORTED_OPERATION, {
      error,
      method,
      transaction
    });
  }
  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {
    logger31.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
      error,
      method,
      transaction
    });
  }
  throw error;
}
function timer(timeout) {
  return new Promise(function(resolve) {
    setTimeout(resolve, timeout);
  });
}
function getResult(payload) {
  if (payload.error) {
    const error = new Error(payload.error.message);
    error.code = payload.error.code;
    error.data = payload.error.data;
    throw error;
  }
  return payload.result;
}
function getLowerCase(value) {
  if (value) {
    return value.toLowerCase();
  }
  return value;
}
var _constructorGuard5 = {};
var JsonRpcSigner = class extends Signer {
  constructor(constructorGuard, provider, addressOrIndex) {
    logger31.checkNew(new.target, JsonRpcSigner);
    super();
    if (constructorGuard !== _constructorGuard5) {
      throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
    }
    defineReadOnly(this, "provider", provider);
    if (addressOrIndex == null) {
      addressOrIndex = 0;
    }
    if (typeof addressOrIndex === "string") {
      defineReadOnly(this, "_address", this.provider.formatter.address(addressOrIndex));
      defineReadOnly(this, "_index", null);
    } else if (typeof addressOrIndex === "number") {
      defineReadOnly(this, "_index", addressOrIndex);
      defineReadOnly(this, "_address", null);
    } else {
      logger31.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
    }
  }
  connect(provider) {
    return logger31.throwError("cannot alter JSON-RPC Signer connection", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "connect"
    });
  }
  connectUnchecked() {
    return new UncheckedJsonRpcSigner(_constructorGuard5, this.provider, this._address || this._index);
  }
  getAddress() {
    if (this._address) {
      return Promise.resolve(this._address);
    }
    return this.provider.send("eth_accounts", []).then((accounts) => {
      if (accounts.length <= this._index) {
        logger31.throwError("unknown account #" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "getAddress"
        });
      }
      return this.provider.formatter.address(accounts[this._index]);
    });
  }
  sendUncheckedTransaction(transaction) {
    transaction = shallowCopy(transaction);
    const fromAddress = this.getAddress().then((address) => {
      if (address) {
        address = address.toLowerCase();
      }
      return address;
    });
    if (transaction.gasLimit == null) {
      const estimate = shallowCopy(transaction);
      estimate.from = fromAddress;
      transaction.gasLimit = this.provider.estimateGas(estimate);
    }
    if (transaction.to != null) {
      transaction.to = Promise.resolve(transaction.to).then((to) => __awaiter11(this, void 0, void 0, function* () {
        if (to == null) {
          return null;
        }
        const address = yield this.provider.resolveName(to);
        if (address == null) {
          logger31.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
        }
        return address;
      }));
    }
    return resolveProperties({
      tx: resolveProperties(transaction),
      sender: fromAddress
    }).then(({ tx, sender }) => {
      if (tx.from != null) {
        if (tx.from.toLowerCase() !== sender) {
          logger31.throwArgumentError("from address mismatch", "transaction", transaction);
        }
      } else {
        tx.from = sender;
      }
      const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });
      return this.provider.send("eth_sendTransaction", [hexTx]).then((hash3) => {
        return hash3;
      }, (error) => {
        return checkError("sendTransaction", error, hexTx);
      });
    });
  }
  signTransaction(transaction) {
    return logger31.throwError("signing transactions is unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "signTransaction"
    });
  }
  sendTransaction(transaction) {
    return __awaiter11(this, void 0, void 0, function* () {
      const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);
      const hash3 = yield this.sendUncheckedTransaction(transaction);
      try {
        return yield poll(() => __awaiter11(this, void 0, void 0, function* () {
          const tx = yield this.provider.getTransaction(hash3);
          if (tx === null) {
            return void 0;
          }
          return this.provider._wrapTransaction(tx, hash3, blockNumber);
        }), { oncePoll: this.provider });
      } catch (error) {
        error.transactionHash = hash3;
        throw error;
      }
    });
  }
  signMessage(message) {
    return __awaiter11(this, void 0, void 0, function* () {
      const data = typeof message === "string" ? toUtf8Bytes(message) : message;
      const address = yield this.getAddress();
      return yield this.provider.send("personal_sign", [hexlify(data), address.toLowerCase()]);
    });
  }
  _legacySignMessage(message) {
    return __awaiter11(this, void 0, void 0, function* () {
      const data = typeof message === "string" ? toUtf8Bytes(message) : message;
      const address = yield this.getAddress();
      return yield this.provider.send("eth_sign", [address.toLowerCase(), hexlify(data)]);
    });
  }
  _signTypedData(domain, types, value) {
    return __awaiter11(this, void 0, void 0, function* () {
      const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name2) => {
        return this.provider.resolveName(name2);
      });
      const address = yield this.getAddress();
      return yield this.provider.send("eth_signTypedData_v4", [
        address.toLowerCase(),
        JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))
      ]);
    });
  }
  unlock(password) {
    return __awaiter11(this, void 0, void 0, function* () {
      const provider = this.provider;
      const address = yield this.getAddress();
      return provider.send("personal_unlockAccount", [address.toLowerCase(), password, null]);
    });
  }
};
var UncheckedJsonRpcSigner = class extends JsonRpcSigner {
  sendTransaction(transaction) {
    return this.sendUncheckedTransaction(transaction).then((hash3) => {
      return {
        hash: hash3,
        nonce: null,
        gasLimit: null,
        gasPrice: null,
        data: null,
        value: null,
        chainId: null,
        confirmations: 0,
        from: null,
        wait: (confirmations) => {
          return this.provider.waitForTransaction(hash3, confirmations);
        }
      };
    });
  }
};
var allowedTransactionKeys4 = {
  chainId: true,
  data: true,
  gasLimit: true,
  gasPrice: true,
  nonce: true,
  to: true,
  value: true,
  type: true,
  accessList: true,
  maxFeePerGas: true,
  maxPriorityFeePerGas: true
};
var JsonRpcProvider = class extends BaseProvider {
  constructor(url, network) {
    logger31.checkNew(new.target, JsonRpcProvider);
    let networkOrReady = network;
    if (networkOrReady == null) {
      networkOrReady = new Promise((resolve, reject) => {
        setTimeout(() => {
          this.detectNetwork().then((network2) => {
            resolve(network2);
          }, (error) => {
            reject(error);
          });
        }, 0);
      });
    }
    super(networkOrReady);
    if (!url) {
      url = getStatic(this.constructor, "defaultUrl")();
    }
    if (typeof url === "string") {
      defineReadOnly(this, "connection", Object.freeze({
        url
      }));
    } else {
      defineReadOnly(this, "connection", Object.freeze(shallowCopy(url)));
    }
    this._nextId = 42;
  }
  get _cache() {
    if (this._eventLoopCache == null) {
      this._eventLoopCache = {};
    }
    return this._eventLoopCache;
  }
  static defaultUrl() {
    return "http://localhost:8545";
  }
  detectNetwork() {
    if (!this._cache["detectNetwork"]) {
      this._cache["detectNetwork"] = this._uncachedDetectNetwork();
      setTimeout(() => {
        this._cache["detectNetwork"] = null;
      }, 0);
    }
    return this._cache["detectNetwork"];
  }
  _uncachedDetectNetwork() {
    return __awaiter11(this, void 0, void 0, function* () {
      yield timer(0);
      let chainId = null;
      try {
        chainId = yield this.send("eth_chainId", []);
      } catch (error) {
        try {
          chainId = yield this.send("net_version", []);
        } catch (error2) {
        }
      }
      if (chainId != null) {
        const getNetwork2 = getStatic(this.constructor, "getNetwork");
        try {
          return getNetwork2(BigNumber3.from(chainId).toNumber());
        } catch (error) {
          return logger31.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
            chainId,
            event: "invalidNetwork",
            serverError: error
          });
        }
      }
      return logger31.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
        event: "noNetwork"
      });
    });
  }
  getSigner(addressOrIndex) {
    return new JsonRpcSigner(_constructorGuard5, this, addressOrIndex);
  }
  getUncheckedSigner(addressOrIndex) {
    return this.getSigner(addressOrIndex).connectUnchecked();
  }
  listAccounts() {
    return this.send("eth_accounts", []).then((accounts) => {
      return accounts.map((a3) => this.formatter.address(a3));
    });
  }
  send(method, params) {
    const request = {
      method,
      params,
      id: this._nextId++,
      jsonrpc: "2.0"
    };
    this.emit("debug", {
      action: "request",
      request: deepCopy(request),
      provider: this
    });
    const cache = ["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0;
    if (cache && this._cache[method]) {
      return this._cache[method];
    }
    const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result2) => {
      this.emit("debug", {
        action: "response",
        request,
        response: result2,
        provider: this
      });
      return result2;
    }, (error) => {
      this.emit("debug", {
        action: "response",
        error,
        request,
        provider: this
      });
      throw error;
    });
    if (cache) {
      this._cache[method] = result;
      setTimeout(() => {
        this._cache[method] = null;
      }, 0);
    }
    return result;
  }
  prepareRequest(method, params) {
    switch (method) {
      case "getBlockNumber":
        return ["eth_blockNumber", []];
      case "getGasPrice":
        return ["eth_gasPrice", []];
      case "getBalance":
        return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
      case "getTransactionCount":
        return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
      case "getCode":
        return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
      case "getStorageAt":
        return ["eth_getStorageAt", [getLowerCase(params.address), params.position, params.blockTag]];
      case "sendTransaction":
        return ["eth_sendRawTransaction", [params.signedTransaction]];
      case "getBlock":
        if (params.blockTag) {
          return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
        } else if (params.blockHash) {
          return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
        }
        return null;
      case "getTransaction":
        return ["eth_getTransactionByHash", [params.transactionHash]];
      case "getTransactionReceipt":
        return ["eth_getTransactionReceipt", [params.transactionHash]];
      case "call": {
        const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
        return ["eth_call", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];
      }
      case "estimateGas": {
        const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
        return ["eth_estimateGas", [hexlifyTransaction(params.transaction, { from: true })]];
      }
      case "getLogs":
        if (params.filter && params.filter.address != null) {
          params.filter.address = getLowerCase(params.filter.address);
        }
        return ["eth_getLogs", [params.filter]];
      default:
        break;
    }
    return null;
  }
  perform(method, params) {
    return __awaiter11(this, void 0, void 0, function* () {
      if (method === "call" || method === "estimateGas") {
        const tx = params.transaction;
        if (tx && tx.type != null && BigNumber3.from(tx.type).isZero()) {
          if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
            const feeData = yield this.getFeeData();
            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
              params = shallowCopy(params);
              params.transaction = shallowCopy(tx);
              delete params.transaction.type;
            }
          }
        }
      }
      const args = this.prepareRequest(method, params);
      if (args == null) {
        logger31.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
      }
      try {
        return yield this.send(args[0], args[1]);
      } catch (error) {
        return checkError(method, error, params);
      }
    });
  }
  _startEvent(event) {
    if (event.tag === "pending") {
      this._startPending();
    }
    super._startEvent(event);
  }
  _startPending() {
    if (this._pendingFilter != null) {
      return;
    }
    const self2 = this;
    const pendingFilter = this.send("eth_newPendingTransactionFilter", []);
    this._pendingFilter = pendingFilter;
    pendingFilter.then(function(filterId) {
      function poll2() {
        self2.send("eth_getFilterChanges", [filterId]).then(function(hashes) {
          if (self2._pendingFilter != pendingFilter) {
            return null;
          }
          let seq = Promise.resolve();
          hashes.forEach(function(hash3) {
            self2._emitted["t:" + hash3.toLowerCase()] = "pending";
            seq = seq.then(function() {
              return self2.getTransaction(hash3).then(function(tx) {
                self2.emit("pending", tx);
                return null;
              });
            });
          });
          return seq.then(function() {
            return timer(1e3);
          });
        }).then(function() {
          if (self2._pendingFilter != pendingFilter) {
            self2.send("eth_uninstallFilter", [filterId]);
            return;
          }
          setTimeout(function() {
            poll2();
          }, 0);
          return null;
        }).catch((error) => {
        });
      }
      poll2();
      return filterId;
    }).catch((error) => {
    });
  }
  _stopEvent(event) {
    if (event.tag === "pending" && this.listenerCount("pending") === 0) {
      this._pendingFilter = null;
    }
    super._stopEvent(event);
  }
  static hexlifyTransaction(transaction, allowExtra) {
    const allowed = shallowCopy(allowedTransactionKeys4);
    if (allowExtra) {
      for (const key2 in allowExtra) {
        if (allowExtra[key2]) {
          allowed[key2] = true;
        }
      }
    }
    checkProperties(transaction, allowed);
    const result = {};
    ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function(key2) {
      if (transaction[key2] == null) {
        return;
      }
      const value = hexValue2(transaction[key2]);
      if (key2 === "gasLimit") {
        key2 = "gas";
      }
      result[key2] = value;
    });
    ["from", "to", "data"].forEach(function(key2) {
      if (transaction[key2] == null) {
        return;
      }
      result[key2] = hexlify(transaction[key2]);
    });
    if (transaction.accessList) {
      result["accessList"] = accessListify(transaction.accessList);
    }
    return result;
  }
};

// node_modules/@ethersproject/providers/lib.esm/ws.js
"use strict";
var WS = null;
try {
  WS = WebSocket;
  if (WS == null) {
    throw new Error("inject please");
  }
} catch (error) {
  const logger52 = new Logger(version23);
  WS = function() {
    logger52.throwError("WebSockets not supported in this environment", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "new WebSocket()"
    });
  };
}

// node_modules/@ethersproject/providers/lib.esm/websocket-provider.js
"use strict";
var __awaiter12 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e4) {
        reject(e4);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e4) {
        reject(e4);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger32 = new Logger(version23);
var NextId = 1;
var WebSocketProvider = class extends JsonRpcProvider {
  constructor(url, network) {
    if (network === "any") {
      logger32.throwError("WebSocketProvider does not support 'any' network yet", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "network:any"
      });
    }
    if (typeof url === "string") {
      super(url, network);
    } else {
      super("_websocket", network);
    }
    this._pollingInterval = -1;
    this._wsReady = false;
    if (typeof url === "string") {
      defineReadOnly(this, "_websocket", new WS(this.connection.url));
    } else {
      defineReadOnly(this, "_websocket", url);
    }
    defineReadOnly(this, "_requests", {});
    defineReadOnly(this, "_subs", {});
    defineReadOnly(this, "_subIds", {});
    defineReadOnly(this, "_detectNetwork", super.detectNetwork());
    this.websocket.onopen = () => {
      this._wsReady = true;
      Object.keys(this._requests).forEach((id2) => {
        this.websocket.send(this._requests[id2].payload);
      });
    };
    this.websocket.onmessage = (messageEvent) => {
      const data = messageEvent.data;
      const result = JSON.parse(data);
      if (result.id != null) {
        const id2 = String(result.id);
        const request = this._requests[id2];
        delete this._requests[id2];
        if (result.result !== void 0) {
          request.callback(null, result.result);
          this.emit("debug", {
            action: "response",
            request: JSON.parse(request.payload),
            response: result.result,
            provider: this
          });
        } else {
          let error = null;
          if (result.error) {
            error = new Error(result.error.message || "unknown error");
            defineReadOnly(error, "code", result.error.code || null);
            defineReadOnly(error, "response", data);
          } else {
            error = new Error("unknown error");
          }
          request.callback(error, void 0);
          this.emit("debug", {
            action: "response",
            error,
            request: JSON.parse(request.payload),
            provider: this
          });
        }
      } else if (result.method === "eth_subscription") {
        const sub2 = this._subs[result.params.subscription];
        if (sub2) {
          sub2.processFunc(result.params.result);
        }
      } else {
        console.warn("this should not happen");
      }
    };
    const fauxPoll = setInterval(() => {
      this.emit("poll");
    }, 1e3);
    if (fauxPoll.unref) {
      fauxPoll.unref();
    }
  }
  get websocket() {
    return this._websocket;
  }
  detectNetwork() {
    return this._detectNetwork;
  }
  get pollingInterval() {
    return 0;
  }
  resetEventsBlock(blockNumber) {
    logger32.throwError("cannot reset events block on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "resetEventBlock"
    });
  }
  set pollingInterval(value) {
    logger32.throwError("cannot set polling interval on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "setPollingInterval"
    });
  }
  poll() {
    return __awaiter12(this, void 0, void 0, function* () {
      return null;
    });
  }
  set polling(value) {
    if (!value) {
      return;
    }
    logger32.throwError("cannot set polling on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "setPolling"
    });
  }
  send(method, params) {
    const rid = NextId++;
    return new Promise((resolve, reject) => {
      function callback(error, result) {
        if (error) {
          return reject(error);
        }
        return resolve(result);
      }
      const payload = JSON.stringify({
        method,
        params,
        id: rid,
        jsonrpc: "2.0"
      });
      this.emit("debug", {
        action: "request",
        request: JSON.parse(payload),
        provider: this
      });
      this._requests[String(rid)] = { callback, payload };
      if (this._wsReady) {
        this.websocket.send(payload);
      }
    });
  }
  static defaultUrl() {
    return "ws://localhost:8546";
  }
  _subscribe(tag, param, processFunc) {
    return __awaiter12(this, void 0, void 0, function* () {
      let subIdPromise = this._subIds[tag];
      if (subIdPromise == null) {
        subIdPromise = Promise.all(param).then((param2) => {
          return this.send("eth_subscribe", param2);
        });
        this._subIds[tag] = subIdPromise;
      }
      const subId = yield subIdPromise;
      this._subs[subId] = { tag, processFunc };
    });
  }
  _startEvent(event) {
    switch (event.type) {
      case "block":
        this._subscribe("block", ["newHeads"], (result) => {
          const blockNumber = BigNumber3.from(result.number).toNumber();
          this._emitted.block = blockNumber;
          this.emit("block", blockNumber);
        });
        break;
      case "pending":
        this._subscribe("pending", ["newPendingTransactions"], (result) => {
          this.emit("pending", result);
        });
        break;
      case "filter":
        this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], (result) => {
          if (result.removed == null) {
            result.removed = false;
          }
          this.emit(event.filter, this.formatter.filterLog(result));
        });
        break;
      case "tx": {
        const emitReceipt = (event2) => {
          const hash3 = event2.hash;
          this.getTransactionReceipt(hash3).then((receipt) => {
            if (!receipt) {
              return;
            }
            this.emit(hash3, receipt);
          });
        };
        emitReceipt(event);
        this._subscribe("tx", ["newHeads"], (result) => {
          this._events.filter((e4) => e4.type === "tx").forEach(emitReceipt);
        });
        break;
      }
      case "debug":
      case "poll":
      case "willPoll":
      case "didPoll":
      case "error":
        break;
      default:
        console.log("unhandled:", event);
        break;
    }
  }
  _stopEvent(event) {
    let tag = event.tag;
    if (event.type === "tx") {
      if (this._events.filter((e4) => e4.type === "tx").length) {
        return;
      }
      tag = "tx";
    } else if (this.listenerCount(event.event)) {
      return;
    }
    const subId = this._subIds[tag];
    if (!subId) {
      return;
    }
    delete this._subIds[tag];
    subId.then((subId2) => {
      if (!this._subs[subId2]) {
        return;
      }
      delete this._subs[subId2];
      this.send("eth_unsubscribe", [subId2]);
    });
  }
  destroy() {
    return __awaiter12(this, void 0, void 0, function* () {
      if (this.websocket.readyState === WS.CONNECTING) {
        yield new Promise((resolve) => {
          this.websocket.onopen = function() {
            resolve(true);
          };
          this.websocket.onerror = function() {
            resolve(false);
          };
        });
      }
      this.websocket.close(1e3);
    });
  }
};

// node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js
"use strict";
var __awaiter13 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e4) {
        reject(e4);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e4) {
        reject(e4);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger33 = new Logger(version23);
var StaticJsonRpcProvider = class extends JsonRpcProvider {
  detectNetwork() {
    const _super = Object.create(null, {
      detectNetwork: { get: () => super.detectNetwork }
    });
    return __awaiter13(this, void 0, void 0, function* () {
      let network = this.network;
      if (network == null) {
        network = yield _super.detectNetwork.call(this);
        if (!network) {
          logger33.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
        }
        if (this._network == null) {
          defineReadOnly(this, "_network", network);
          this.emit("network", network, null);
        }
      }
      return network;
    });
  }
};
var UrlJsonRpcProvider = class extends StaticJsonRpcProvider {
  constructor(network, apiKey) {
    logger33.checkAbstract(new.target, UrlJsonRpcProvider);
    network = getStatic(new.target, "getNetwork")(network);
    apiKey = getStatic(new.target, "getApiKey")(apiKey);
    const connection = getStatic(new.target, "getUrl")(network, apiKey);
    super(connection, network);
    if (typeof apiKey === "string") {
      defineReadOnly(this, "apiKey", apiKey);
    } else if (apiKey != null) {
      Object.keys(apiKey).forEach((key2) => {
        defineReadOnly(this, key2, apiKey[key2]);
      });
    }
  }
  _startPending() {
    logger33.warn("WARNING: API provider does not support pending filters");
  }
  isCommunityResource() {
    return false;
  }
  getSigner(address) {
    return logger33.throwError("API provider does not support signing", Logger.errors.UNSUPPORTED_OPERATION, { operation: "getSigner" });
  }
  listAccounts() {
    return Promise.resolve([]);
  }
  static getApiKey(apiKey) {
    return apiKey;
  }
  static getUrl(network, apiKey) {
    return logger33.throwError("not implemented; sub-classes must override getUrl", Logger.errors.NOT_IMPLEMENTED, {
      operation: "getUrl"
    });
  }
};

// node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js
"use strict";
var logger34 = new Logger(version23);
var defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
var AlchemyWebSocketProvider = class extends WebSocketProvider {
  constructor(network, apiKey) {
    const provider = new AlchemyProvider(network, apiKey);
    const url = provider.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi.");
    super(url, provider.network);
    defineReadOnly(this, "apiKey", provider.apiKey);
  }
  isCommunityResource() {
    return this.apiKey === defaultApiKey;
  }
};
var AlchemyProvider = class extends UrlJsonRpcProvider {
  static getWebSocketProvider(network, apiKey) {
    return new AlchemyWebSocketProvider(network, apiKey);
  }
  static getApiKey(apiKey) {
    if (apiKey == null) {
      return defaultApiKey;
    }
    if (apiKey && typeof apiKey !== "string") {
      logger34.throwArgumentError("invalid apiKey", "apiKey", apiKey);
    }
    return apiKey;
  }
  static getUrl(network, apiKey) {
    let host = null;
    switch (network.name) {
      case "homestead":
        host = "eth-mainnet.alchemyapi.io/v2/";
        break;
      case "ropsten":
        host = "eth-ropsten.alchemyapi.io/v2/";
        break;
      case "rinkeby":
        host = "eth-rinkeby.alchemyapi.io/v2/";
        break;
      case "goerli":
        host = "eth-goerli.alchemyapi.io/v2/";
        break;
      case "kovan":
        host = "eth-kovan.alchemyapi.io/v2/";
        break;
      case "matic":
        host = "polygon-mainnet.g.alchemy.com/v2/";
        break;
      case "maticmum":
        host = "polygon-mumbai.g.alchemy.com/v2/";
        break;
      case "arbitrum":
        host = "arb-mainnet.g.alchemy.com/v2/";
        break;
      case "arbitrum-rinkeby":
        host = "arb-rinkeby.g.alchemy.com/v2/";
        break;
      case "optimism":
        host = "opt-mainnet.g.alchemy.com/v2/";
        break;
      case "optimism-kovan":
        host = "opt-kovan.g.alchemy.com/v2/";
        break;
      default:
        logger34.throwArgumentError("unsupported network", "network", arguments[0]);
    }
    return {
      allowGzip: true,
      url: "https://" + host + apiKey,
      throttleCallback: (attempt, url) => {
        if (apiKey === defaultApiKey) {
          showThrottleMessage();
        }
        return Promise.resolve(true);
      }
    };
  }
  isCommunityResource() {
    return this.apiKey === defaultApiKey;
  }
};

// node_modules/@ethersproject/providers/lib.esm/ankr-provider.js
var logger35 = new Logger(version23);
var defaultApiKey2 = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
function getHost(name2) {
  switch (name2) {
    case "homestead":
      return "rpc.ankr.com/eth/";
    case "matic":
      return "rpc.ankr.com/polygon/";
    case "arbitrum":
      return "rpc.ankr.com/arbitrum/";
  }
  return logger35.throwArgumentError("unsupported network", "name", name2);
}
var AnkrProvider = class extends UrlJsonRpcProvider {
  isCommunityResource() {
    return this.apiKey === defaultApiKey2;
  }
  static getApiKey(apiKey) {
    if (apiKey == null) {
      return defaultApiKey2;
    }
    return apiKey;
  }
  static getUrl(network, apiKey) {
    if (apiKey == null) {
      apiKey = defaultApiKey2;
    }
    const connection = {
      allowGzip: true,
      url: "https://" + getHost(network.name) + apiKey,
      throttleCallback: (attempt, url) => {
        if (apiKey.apiKey === defaultApiKey2) {
          showThrottleMessage();
        }
        return Promise.resolve(true);
      }
    };
    if (apiKey.projectSecret != null) {
      connection.user = "";
      connection.password = apiKey.projectSecret;
    }
    return connection;
  }
};

// node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js
"use strict";
var __awaiter14 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e4) {
        reject(e4);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e4) {
        reject(e4);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger36 = new Logger(version23);
var CloudflareProvider = class extends UrlJsonRpcProvider {
  static getApiKey(apiKey) {
    if (apiKey != null) {
      logger36.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
    }
    return null;
  }
  static getUrl(network, apiKey) {
    let host = null;
    switch (network.name) {
      case "homestead":
        host = "https://cloudflare-eth.com/";
        break;
      default:
        logger36.throwArgumentError("unsupported network", "network", arguments[0]);
    }
    return host;
  }
  perform(method, params) {
    const _super = Object.create(null, {
      perform: { get: () => super.perform }
    });
    return __awaiter14(this, void 0, void 0, function* () {
      if (method === "getBlockNumber") {
        const block = yield _super.perform.call(this, "getBlock", { blockTag: "latest" });
        return block.number;
      }
      return _super.perform.call(this, method, params);
    });
  }
};

// node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js
"use strict";
var __awaiter15 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e4) {
        reject(e4);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e4) {
        reject(e4);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger37 = new Logger(version23);
function getTransactionPostData(transaction) {
  const result = {};
  for (let key2 in transaction) {
    if (transaction[key2] == null) {
      continue;
    }
    let value = transaction[key2];
    if (key2 === "type" && value === 0) {
      continue;
    }
    if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key2]) {
      value = hexValue2(hexlify(value));
    } else if (key2 === "accessList") {
      value = "[" + accessListify(value).map((set) => {
        return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
      }).join(",") + "]";
    } else {
      value = hexlify(value);
    }
    result[key2] = value;
  }
  return result;
}
function getResult2(result) {
  if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
    return result.result;
  }
  if (result.status != 1 || result.message != "OK") {
    const error = new Error("invalid response");
    error.result = JSON.stringify(result);
    if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
      error.throttleRetry = true;
    }
    throw error;
  }
  return result.result;
}
function getJsonResult(result) {
  if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
    const error = new Error("throttled response");
    error.result = JSON.stringify(result);
    error.throttleRetry = true;
    throw error;
  }
  if (result.jsonrpc != "2.0") {
    const error = new Error("invalid response");
    error.result = JSON.stringify(result);
    throw error;
  }
  if (result.error) {
    const error = new Error(result.error.message || "unknown error");
    if (result.error.code) {
      error.code = result.error.code;
    }
    if (result.error.data) {
      error.data = result.error.data;
    }
    throw error;
  }
  return result.result;
}
function checkLogTag(blockTag) {
  if (blockTag === "pending") {
    throw new Error("pending not supported");
  }
  if (blockTag === "latest") {
    return blockTag;
  }
  return parseInt(blockTag.substring(2), 16);
}
var defaultApiKey3 = "9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB";
function checkError2(method, error, transaction) {
  if (method === "call" && error.code === Logger.errors.SERVER_ERROR) {
    const e4 = error.error;
    if (e4 && (e4.message.match(/reverted/i) || e4.message.match(/VM execution error/i))) {
      let data = e4.data;
      if (data) {
        data = "0x" + data.replace(/^.*0x/i, "");
      }
      if (isHexString(data)) {
        return data;
      }
      logger37.throwError("missing revert data in call exception", Logger.errors.CALL_EXCEPTION, {
        error,
        data: "0x"
      });
    }
  }
  let message = error.message;
  if (error.code === Logger.errors.SERVER_ERROR) {
    if (error.error && typeof error.error.message === "string") {
      message = error.error.message;
    } else if (typeof error.body === "string") {
      message = error.body;
    } else if (typeof error.responseText === "string") {
      message = error.responseText;
    }
  }
  message = (message || "").toLowerCase();
  if (message.match(/insufficient funds/)) {
    logger37.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
    logger37.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/another transaction with same nonce/)) {
    logger37.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/execution failed due to an exception|execution reverted/)) {
    logger37.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
      error,
      method,
      transaction
    });
  }
  throw error;
}
var EtherscanProvider = class extends BaseProvider {
  constructor(network, apiKey) {
    logger37.checkNew(new.target, EtherscanProvider);
    super(network);
    defineReadOnly(this, "baseUrl", this.getBaseUrl());
    defineReadOnly(this, "apiKey", apiKey || defaultApiKey3);
  }
  getBaseUrl() {
    switch (this.network ? this.network.name : "invalid") {
      case "homestead":
        return "https://api.etherscan.io";
      case "ropsten":
        return "https://api-ropsten.etherscan.io";
      case "rinkeby":
        return "https://api-rinkeby.etherscan.io";
      case "kovan":
        return "https://api-kovan.etherscan.io";
      case "goerli":
        return "https://api-goerli.etherscan.io";
      default:
    }
    return logger37.throwArgumentError("unsupported network", "network", name);
  }
  getUrl(module, params) {
    const query = Object.keys(params).reduce((accum, key2) => {
      const value = params[key2];
      if (value != null) {
        accum += `&${key2}=${value}`;
      }
      return accum;
    }, "");
    const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : "";
    return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;
  }
  getPostUrl() {
    return `${this.baseUrl}/api`;
  }
  getPostData(module, params) {
    params.module = module;
    params.apikey = this.apiKey;
    return params;
  }
  fetch(module, params, post) {
    return __awaiter15(this, void 0, void 0, function* () {
      const url = post ? this.getPostUrl() : this.getUrl(module, params);
      const payload = post ? this.getPostData(module, params) : null;
      const procFunc = module === "proxy" ? getJsonResult : getResult2;
      this.emit("debug", {
        action: "request",
        request: url,
        provider: this
      });
      const connection = {
        url,
        throttleSlotInterval: 1e3,
        throttleCallback: (attempt, url2) => {
          if (this.isCommunityResource()) {
            showThrottleMessage();
          }
          return Promise.resolve(true);
        }
      };
      let payloadStr = null;
      if (payload) {
        connection.headers = { "content-type": "application/x-www-form-urlencoded; charset=UTF-8" };
        payloadStr = Object.keys(payload).map((key2) => {
          return `${key2}=${payload[key2]}`;
        }).join("&");
      }
      const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);
      this.emit("debug", {
        action: "response",
        request: url,
        response: deepCopy(result),
        provider: this
      });
      return result;
    });
  }
  detectNetwork() {
    return __awaiter15(this, void 0, void 0, function* () {
      return this.network;
    });
  }
  perform(method, params) {
    const _super = Object.create(null, {
      perform: { get: () => super.perform }
    });
    return __awaiter15(this, void 0, void 0, function* () {
      switch (method) {
        case "getBlockNumber":
          return this.fetch("proxy", { action: "eth_blockNumber" });
        case "getGasPrice":
          return this.fetch("proxy", { action: "eth_gasPrice" });
        case "getBalance":
          return this.fetch("account", {
            action: "balance",
            address: params.address,
            tag: params.blockTag
          });
        case "getTransactionCount":
          return this.fetch("proxy", {
            action: "eth_getTransactionCount",
            address: params.address,
            tag: params.blockTag
          });
        case "getCode":
          return this.fetch("proxy", {
            action: "eth_getCode",
            address: params.address,
            tag: params.blockTag
          });
        case "getStorageAt":
          return this.fetch("proxy", {
            action: "eth_getStorageAt",
            address: params.address,
            position: params.position,
            tag: params.blockTag
          });
        case "sendTransaction":
          return this.fetch("proxy", {
            action: "eth_sendRawTransaction",
            hex: params.signedTransaction
          }, true).catch((error) => {
            return checkError2("sendTransaction", error, params.signedTransaction);
          });
        case "getBlock":
          if (params.blockTag) {
            return this.fetch("proxy", {
              action: "eth_getBlockByNumber",
              tag: params.blockTag,
              boolean: params.includeTransactions ? "true" : "false"
            });
          }
          throw new Error("getBlock by blockHash not implemented");
        case "getTransaction":
          return this.fetch("proxy", {
            action: "eth_getTransactionByHash",
            txhash: params.transactionHash
          });
        case "getTransactionReceipt":
          return this.fetch("proxy", {
            action: "eth_getTransactionReceipt",
            txhash: params.transactionHash
          });
        case "call": {
          if (params.blockTag !== "latest") {
            throw new Error("EtherscanProvider does not support blockTag for call");
          }
          const postData = getTransactionPostData(params.transaction);
          postData.module = "proxy";
          postData.action = "eth_call";
          try {
            return yield this.fetch("proxy", postData, true);
          } catch (error) {
            return checkError2("call", error, params.transaction);
          }
        }
        case "estimateGas": {
          const postData = getTransactionPostData(params.transaction);
          postData.module = "proxy";
          postData.action = "eth_estimateGas";
          try {
            return yield this.fetch("proxy", postData, true);
          } catch (error) {
            return checkError2("estimateGas", error, params.transaction);
          }
        }
        case "getLogs": {
          const args = { action: "getLogs" };
          if (params.filter.fromBlock) {
            args.fromBlock = checkLogTag(params.filter.fromBlock);
          }
          if (params.filter.toBlock) {
            args.toBlock = checkLogTag(params.filter.toBlock);
          }
          if (params.filter.address) {
            args.address = params.filter.address;
          }
          if (params.filter.topics && params.filter.topics.length > 0) {
            if (params.filter.topics.length > 1) {
              logger37.throwError("unsupported topic count", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
            }
            if (params.filter.topics.length === 1) {
              const topic0 = params.filter.topics[0];
              if (typeof topic0 !== "string" || topic0.length !== 66) {
                logger37.throwError("unsupported topic format", Logger.errors.UNSUPPORTED_OPERATION, { topic0 });
              }
              args.topic0 = topic0;
            }
          }
          const logs = yield this.fetch("logs", args);
          let blocks = {};
          for (let i3 = 0; i3 < logs.length; i3++) {
            const log = logs[i3];
            if (log.blockHash != null) {
              continue;
            }
            if (blocks[log.blockNumber] == null) {
              const block = yield this.getBlock(log.blockNumber);
              if (block) {
                blocks[log.blockNumber] = block.hash;
              }
            }
            log.blockHash = blocks[log.blockNumber];
          }
          return logs;
        }
        case "getEtherPrice":
          if (this.network.name !== "homestead") {
            return 0;
          }
          return parseFloat((yield this.fetch("stats", { action: "ethprice" })).ethusd);
        default:
          break;
      }
      return _super.perform.call(this, method, params);
    });
  }
  getHistory(addressOrName, startBlock, endBlock) {
    return __awaiter15(this, void 0, void 0, function* () {
      const params = {
        action: "txlist",
        address: yield this.resolveName(addressOrName),
        startblock: startBlock == null ? 0 : startBlock,
        endblock: endBlock == null ? 99999999 : endBlock,
        sort: "asc"
      };
      const result = yield this.fetch("account", params);
      return result.map((tx) => {
        ["contractAddress", "to"].forEach(function(key2) {
          if (tx[key2] == "") {
            delete tx[key2];
          }
        });
        if (tx.creates == null && tx.contractAddress != null) {
          tx.creates = tx.contractAddress;
        }
        const item = this.formatter.transactionResponse(tx);
        if (tx.timeStamp) {
          item.timestamp = parseInt(tx.timeStamp);
        }
        return item;
      });
    });
  }
  isCommunityResource() {
    return this.apiKey === defaultApiKey3;
  }
};

// node_modules/@ethersproject/providers/lib.esm/fallback-provider.js
"use strict";
var __awaiter16 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e4) {
        reject(e4);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e4) {
        reject(e4);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger38 = new Logger(version23);
function now() {
  return new Date().getTime();
}
function checkNetworks(networks2) {
  let result = null;
  for (let i3 = 0; i3 < networks2.length; i3++) {
    const network = networks2[i3];
    if (network == null) {
      return null;
    }
    if (result) {
      if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {
        logger38.throwArgumentError("provider mismatch", "networks", networks2);
      }
    } else {
      result = network;
    }
  }
  return result;
}
function median(values, maxDelta) {
  values = values.slice().sort();
  const middle = Math.floor(values.length / 2);
  if (values.length % 2) {
    return values[middle];
  }
  const a3 = values[middle - 1], b3 = values[middle];
  if (maxDelta != null && Math.abs(a3 - b3) > maxDelta) {
    return null;
  }
  return (a3 + b3) / 2;
}
function serialize2(value) {
  if (value === null) {
    return "null";
  } else if (typeof value === "number" || typeof value === "boolean") {
    return JSON.stringify(value);
  } else if (typeof value === "string") {
    return value;
  } else if (BigNumber3.isBigNumber(value)) {
    return value.toString();
  } else if (Array.isArray(value)) {
    return JSON.stringify(value.map((i3) => serialize2(i3)));
  } else if (typeof value === "object") {
    const keys = Object.keys(value);
    keys.sort();
    return "{" + keys.map((key2) => {
      let v3 = value[key2];
      if (typeof v3 === "function") {
        v3 = "[function]";
      } else {
        v3 = serialize2(v3);
      }
      return JSON.stringify(key2) + ":" + v3;
    }).join(",") + "}";
  }
  throw new Error("unknown value type: " + typeof value);
}
var nextRid = 1;
function stall2(duration) {
  let cancel = null;
  let timer2 = null;
  let promise = new Promise((resolve) => {
    cancel = function() {
      if (timer2) {
        clearTimeout(timer2);
        timer2 = null;
      }
      resolve();
    };
    timer2 = setTimeout(cancel, duration);
  });
  const wait = (func) => {
    promise = promise.then(func);
    return promise;
  };
  function getPromise() {
    return promise;
  }
  return { cancel, getPromise, wait };
}
var ForwardErrors = [
  Logger.errors.CALL_EXCEPTION,
  Logger.errors.INSUFFICIENT_FUNDS,
  Logger.errors.NONCE_EXPIRED,
  Logger.errors.REPLACEMENT_UNDERPRICED,
  Logger.errors.UNPREDICTABLE_GAS_LIMIT
];
var ForwardProperties = [
  "address",
  "args",
  "errorArgs",
  "errorSignature",
  "method",
  "transaction"
];
function exposeDebugConfig(config, now2) {
  const result = {
    weight: config.weight
  };
  Object.defineProperty(result, "provider", { get: () => config.provider });
  if (config.start) {
    result.start = config.start;
  }
  if (now2) {
    result.duration = now2 - config.start;
  }
  if (config.done) {
    if (config.error) {
      result.error = config.error;
    } else {
      result.result = config.result || null;
    }
  }
  return result;
}
function normalizedTally(normalize, quorum) {
  return function(configs) {
    const tally = {};
    configs.forEach((c5) => {
      const value = normalize(c5.result);
      if (!tally[value]) {
        tally[value] = { count: 0, result: c5.result };
      }
      tally[value].count++;
    });
    const keys = Object.keys(tally);
    for (let i3 = 0; i3 < keys.length; i3++) {
      const check = tally[keys[i3]];
      if (check.count >= quorum) {
        return check.result;
      }
    }
    return void 0;
  };
}
function getProcessFunc(provider, method, params) {
  let normalize = serialize2;
  switch (method) {
    case "getBlockNumber":
      return function(configs) {
        const values = configs.map((c5) => c5.result);
        let blockNumber = median(configs.map((c5) => c5.result), 2);
        if (blockNumber == null) {
          return void 0;
        }
        blockNumber = Math.ceil(blockNumber);
        if (values.indexOf(blockNumber + 1) >= 0) {
          blockNumber++;
        }
        if (blockNumber >= provider._highestBlockNumber) {
          provider._highestBlockNumber = blockNumber;
        }
        return provider._highestBlockNumber;
      };
    case "getGasPrice":
      return function(configs) {
        const values = configs.map((c5) => c5.result);
        values.sort();
        return values[Math.floor(values.length / 2)];
      };
    case "getEtherPrice":
      return function(configs) {
        return median(configs.map((c5) => c5.result));
      };
    case "getBalance":
    case "getTransactionCount":
    case "getCode":
    case "getStorageAt":
    case "call":
    case "estimateGas":
    case "getLogs":
      break;
    case "getTransaction":
    case "getTransactionReceipt":
      normalize = function(tx) {
        if (tx == null) {
          return null;
        }
        tx = shallowCopy(tx);
        tx.confirmations = -1;
        return serialize2(tx);
      };
      break;
    case "getBlock":
      if (params.includeTransactions) {
        normalize = function(block) {
          if (block == null) {
            return null;
          }
          block = shallowCopy(block);
          block.transactions = block.transactions.map((tx) => {
            tx = shallowCopy(tx);
            tx.confirmations = -1;
            return tx;
          });
          return serialize2(block);
        };
      } else {
        normalize = function(block) {
          if (block == null) {
            return null;
          }
          return serialize2(block);
        };
      }
      break;
    default:
      throw new Error("unknown method: " + method);
  }
  return normalizedTally(normalize, provider.quorum);
}
function waitForSync(config, blockNumber) {
  return __awaiter16(this, void 0, void 0, function* () {
    const provider = config.provider;
    if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) {
      return provider;
    }
    return poll(() => {
      return new Promise((resolve, reject) => {
        setTimeout(function() {
          if (provider.blockNumber >= blockNumber) {
            return resolve(provider);
          }
          if (config.cancelled) {
            return resolve(null);
          }
          return resolve(void 0);
        }, 0);
      });
    }, { oncePoll: provider });
  });
}
function getRunner(config, currentBlockNumber, method, params) {
  return __awaiter16(this, void 0, void 0, function* () {
    let provider = config.provider;
    switch (method) {
      case "getBlockNumber":
      case "getGasPrice":
        return provider[method]();
      case "getEtherPrice":
        if (provider.getEtherPrice) {
          return provider.getEtherPrice();
        }
        break;
      case "getBalance":
      case "getTransactionCount":
      case "getCode":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider[method](params.address, params.blockTag || "latest");
      case "getStorageAt":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider.getStorageAt(params.address, params.position, params.blockTag || "latest");
      case "getBlock":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider[params.includeTransactions ? "getBlockWithTransactions" : "getBlock"](params.blockTag || params.blockHash);
      case "call":
      case "estimateGas":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider[method](params.transaction);
      case "getTransaction":
      case "getTransactionReceipt":
        return provider[method](params.transactionHash);
      case "getLogs": {
        let filter = params.filter;
        if (filter.fromBlock && isHexString(filter.fromBlock) || filter.toBlock && isHexString(filter.toBlock)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider.getLogs(filter);
      }
    }
    return logger38.throwError("unknown method error", Logger.errors.UNKNOWN_ERROR, {
      method,
      params
    });
  });
}
var FallbackProvider = class extends BaseProvider {
  constructor(providers, quorum) {
    logger38.checkNew(new.target, FallbackProvider);
    if (providers.length === 0) {
      logger38.throwArgumentError("missing providers", "providers", providers);
    }
    const providerConfigs = providers.map((configOrProvider, index) => {
      if (Provider.isProvider(configOrProvider)) {
        const stallTimeout = isCommunityResource(configOrProvider) ? 2e3 : 750;
        const priority = 1;
        return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });
      }
      const config = shallowCopy(configOrProvider);
      if (config.priority == null) {
        config.priority = 1;
      }
      if (config.stallTimeout == null) {
        config.stallTimeout = isCommunityResource(configOrProvider) ? 2e3 : 750;
      }
      if (config.weight == null) {
        config.weight = 1;
      }
      const weight = config.weight;
      if (weight % 1 || weight > 512 || weight < 1) {
        logger38.throwArgumentError("invalid weight; must be integer in [1, 512]", `providers[${index}].weight`, weight);
      }
      return Object.freeze(config);
    });
    const total = providerConfigs.reduce((accum, c5) => accum + c5.weight, 0);
    if (quorum == null) {
      quorum = total / 2;
    } else if (quorum > total) {
      logger38.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
    }
    let networkOrReady = checkNetworks(providerConfigs.map((c5) => c5.provider.network));
    if (networkOrReady == null) {
      networkOrReady = new Promise((resolve, reject) => {
        setTimeout(() => {
          this.detectNetwork().then(resolve, reject);
        }, 0);
      });
    }
    super(networkOrReady);
    defineReadOnly(this, "providerConfigs", Object.freeze(providerConfigs));
    defineReadOnly(this, "quorum", quorum);
    this._highestBlockNumber = -1;
  }
  detectNetwork() {
    return __awaiter16(this, void 0, void 0, function* () {
      const networks2 = yield Promise.all(this.providerConfigs.map((c5) => c5.provider.getNetwork()));
      return checkNetworks(networks2);
    });
  }
  perform(method, params) {
    return __awaiter16(this, void 0, void 0, function* () {
      if (method === "sendTransaction") {
        const results = yield Promise.all(this.providerConfigs.map((c5) => {
          return c5.provider.sendTransaction(params.signedTransaction).then((result) => {
            return result.hash;
          }, (error) => {
            return error;
          });
        }));
        for (let i4 = 0; i4 < results.length; i4++) {
          const result = results[i4];
          if (typeof result === "string") {
            return result;
          }
        }
        throw results[0];
      }
      if (this._highestBlockNumber === -1 && method !== "getBlockNumber") {
        yield this.getBlockNumber();
      }
      const processFunc = getProcessFunc(this, method, params);
      const configs = shuffled(this.providerConfigs.map(shallowCopy));
      configs.sort((a3, b3) => a3.priority - b3.priority);
      const currentBlockNumber = this._highestBlockNumber;
      let i3 = 0;
      let first = true;
      while (true) {
        const t0 = now();
        let inflightWeight = configs.filter((c5) => c5.runner && t0 - c5.start < c5.stallTimeout).reduce((accum, c5) => accum + c5.weight, 0);
        while (inflightWeight < this.quorum && i3 < configs.length) {
          const config = configs[i3++];
          const rid = nextRid++;
          config.start = now();
          config.staller = stall2(config.stallTimeout);
          config.staller.wait(() => {
            config.staller = null;
          });
          config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {
            config.done = true;
            config.result = result;
            if (this.listenerCount("debug")) {
              this.emit("debug", {
                action: "request",
                rid,
                backend: exposeDebugConfig(config, now()),
                request: { method, params: deepCopy(params) },
                provider: this
              });
            }
          }, (error) => {
            config.done = true;
            config.error = error;
            if (this.listenerCount("debug")) {
              this.emit("debug", {
                action: "request",
                rid,
                backend: exposeDebugConfig(config, now()),
                request: { method, params: deepCopy(params) },
                provider: this
              });
            }
          });
          if (this.listenerCount("debug")) {
            this.emit("debug", {
              action: "request",
              rid,
              backend: exposeDebugConfig(config, null),
              request: { method, params: deepCopy(params) },
              provider: this
            });
          }
          inflightWeight += config.weight;
        }
        const waiting = [];
        configs.forEach((c5) => {
          if (c5.done || !c5.runner) {
            return;
          }
          waiting.push(c5.runner);
          if (c5.staller) {
            waiting.push(c5.staller.getPromise());
          }
        });
        if (waiting.length) {
          yield Promise.race(waiting);
        }
        const results = configs.filter((c5) => c5.done && c5.error == null);
        if (results.length >= this.quorum) {
          const result = processFunc(results);
          if (result !== void 0) {
            configs.forEach((c5) => {
              if (c5.staller) {
                c5.staller.cancel();
              }
              c5.cancelled = true;
            });
            return result;
          }
          if (!first) {
            yield stall2(100).getPromise();
          }
          first = false;
        }
        const errors = configs.reduce((accum, c5) => {
          if (!c5.done || c5.error == null) {
            return accum;
          }
          const code = c5.error.code;
          if (ForwardErrors.indexOf(code) >= 0) {
            if (!accum[code]) {
              accum[code] = { error: c5.error, weight: 0 };
            }
            accum[code].weight += c5.weight;
          }
          return accum;
        }, {});
        Object.keys(errors).forEach((errorCode) => {
          const tally = errors[errorCode];
          if (tally.weight < this.quorum) {
            return;
          }
          configs.forEach((c5) => {
            if (c5.staller) {
              c5.staller.cancel();
            }
            c5.cancelled = true;
          });
          const e4 = tally.error;
          const props = {};
          ForwardProperties.forEach((name2) => {
            if (e4[name2] == null) {
              return;
            }
            props[name2] = e4[name2];
          });
          logger38.throwError(e4.reason || e4.message, errorCode, props);
        });
        if (configs.filter((c5) => !c5.done).length === 0) {
          break;
        }
      }
      configs.forEach((c5) => {
        if (c5.staller) {
          c5.staller.cancel();
        }
        c5.cancelled = true;
      });
      return logger38.throwError("failed to meet quorum", Logger.errors.SERVER_ERROR, {
        method,
        params,
        results: configs.map((c5) => exposeDebugConfig(c5)),
        provider: this
      });
    });
  }
};

// node_modules/@ethersproject/providers/lib.esm/ipc-provider.js
"use strict";
var IpcProvider = null;

// node_modules/@ethersproject/providers/lib.esm/infura-provider.js
"use strict";
var logger39 = new Logger(version23);
var defaultProjectId = "84842078b09946638c03157f83405213";
var InfuraWebSocketProvider = class extends WebSocketProvider {
  constructor(network, apiKey) {
    const provider = new InfuraProvider(network, apiKey);
    const connection = provider.connection;
    if (connection.password) {
      logger39.throwError("INFURA WebSocket project secrets unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "InfuraProvider.getWebSocketProvider()"
      });
    }
    const url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
    super(url, network);
    defineReadOnly(this, "apiKey", provider.projectId);
    defineReadOnly(this, "projectId", provider.projectId);
    defineReadOnly(this, "projectSecret", provider.projectSecret);
  }
  isCommunityResource() {
    return this.projectId === defaultProjectId;
  }
};
var InfuraProvider = class extends UrlJsonRpcProvider {
  static getWebSocketProvider(network, apiKey) {
    return new InfuraWebSocketProvider(network, apiKey);
  }
  static getApiKey(apiKey) {
    const apiKeyObj = {
      apiKey: defaultProjectId,
      projectId: defaultProjectId,
      projectSecret: null
    };
    if (apiKey == null) {
      return apiKeyObj;
    }
    if (typeof apiKey === "string") {
      apiKeyObj.projectId = apiKey;
    } else if (apiKey.projectSecret != null) {
      logger39.assertArgument(typeof apiKey.projectId === "string", "projectSecret requires a projectId", "projectId", apiKey.projectId);
      logger39.assertArgument(typeof apiKey.projectSecret === "string", "invalid projectSecret", "projectSecret", "[REDACTED]");
      apiKeyObj.projectId = apiKey.projectId;
      apiKeyObj.projectSecret = apiKey.projectSecret;
    } else if (apiKey.projectId) {
      apiKeyObj.projectId = apiKey.projectId;
    }
    apiKeyObj.apiKey = apiKeyObj.projectId;
    return apiKeyObj;
  }
  static getUrl(network, apiKey) {
    let host = null;
    switch (network ? network.name : "unknown") {
      case "homestead":
        host = "mainnet.infura.io";
        break;
      case "ropsten":
        host = "ropsten.infura.io";
        break;
      case "rinkeby":
        host = "rinkeby.infura.io";
        break;
      case "kovan":
        host = "kovan.infura.io";
        break;
      case "goerli":
        host = "goerli.infura.io";
        break;
      case "matic":
        host = "polygon-mainnet.infura.io";
        break;
      case "maticmum":
        host = "polygon-mumbai.infura.io";
        break;
      case "optimism":
        host = "optimism-mainnet.infura.io";
        break;
      case "optimism-kovan":
        host = "optimism-kovan.infura.io";
        break;
      case "arbitrum":
        host = "arbitrum-mainnet.infura.io";
        break;
      case "arbitrum-rinkeby":
        host = "arbitrum-rinkeby.infura.io";
        break;
      default:
        logger39.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
          argument: "network",
          value: network
        });
    }
    const connection = {
      allowGzip: true,
      url: "https://" + host + "/v3/" + apiKey.projectId,
      throttleCallback: (attempt, url) => {
        if (apiKey.projectId === defaultProjectId) {
          showThrottleMessage();
        }
        return Promise.resolve(true);
      }
    };
    if (apiKey.projectSecret != null) {
      connection.user = "";
      connection.password = apiKey.projectSecret;
    }
    return connection;
  }
  isCommunityResource() {
    return this.projectId === defaultProjectId;
  }
};

// node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js
var JsonRpcBatchProvider = class extends JsonRpcProvider {
  send(method, params) {
    const request = {
      method,
      params,
      id: this._nextId++,
      jsonrpc: "2.0"
    };
    if (this._pendingBatch == null) {
      this._pendingBatch = [];
    }
    const inflightRequest = { request, resolve: null, reject: null };
    const promise = new Promise((resolve, reject) => {
      inflightRequest.resolve = resolve;
      inflightRequest.reject = reject;
    });
    this._pendingBatch.push(inflightRequest);
    if (!this._pendingBatchAggregator) {
      this._pendingBatchAggregator = setTimeout(() => {
        const batch = this._pendingBatch;
        this._pendingBatch = null;
        this._pendingBatchAggregator = null;
        const request2 = batch.map((inflight) => inflight.request);
        this.emit("debug", {
          action: "requestBatch",
          request: deepCopy(request2),
          provider: this
        });
        return fetchJson(this.connection, JSON.stringify(request2)).then((result) => {
          this.emit("debug", {
            action: "response",
            request: request2,
            response: result,
            provider: this
          });
          batch.forEach((inflightRequest2, index) => {
            const payload = result[index];
            if (payload.error) {
              const error = new Error(payload.error.message);
              error.code = payload.error.code;
              error.data = payload.error.data;
              inflightRequest2.reject(error);
            } else {
              inflightRequest2.resolve(payload.result);
            }
          });
        }, (error) => {
          this.emit("debug", {
            action: "response",
            error,
            request: request2,
            provider: this
          });
          batch.forEach((inflightRequest2) => {
            inflightRequest2.reject(error);
          });
        });
      }, 10);
    }
    return promise;
  }
};

// node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js
"use strict";
var logger40 = new Logger(version23);
var defaultApiKey4 = "ETHERS_JS_SHARED";
var NodesmithProvider = class extends UrlJsonRpcProvider {
  static getApiKey(apiKey) {
    if (apiKey && typeof apiKey !== "string") {
      logger40.throwArgumentError("invalid apiKey", "apiKey", apiKey);
    }
    return apiKey || defaultApiKey4;
  }
  static getUrl(network, apiKey) {
    logger40.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
    let host = null;
    switch (network.name) {
      case "homestead":
        host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
        break;
      case "ropsten":
        host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
        break;
      case "rinkeby":
        host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
        break;
      case "goerli":
        host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
        break;
      case "kovan":
        host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
        break;
      default:
        logger40.throwArgumentError("unsupported network", "network", arguments[0]);
    }
    return host + "?apiKey=" + apiKey;
  }
};

// node_modules/@ethersproject/providers/lib.esm/pocket-provider.js
"use strict";
var logger41 = new Logger(version23);
var defaultApplicationIds = {
  homestead: "6004bcd10040261633ade990",
  ropsten: "6004bd4d0040261633ade991",
  rinkeby: "6004bda20040261633ade994",
  goerli: "6004bd860040261633ade992"
};
var PocketProvider = class extends UrlJsonRpcProvider {
  constructor(network, apiKey) {
    if (apiKey == null) {
      const n2 = getStatic(new.target, "getNetwork")(network);
      if (n2) {
        const applicationId = defaultApplicationIds[n2.name];
        if (applicationId) {
          apiKey = {
            applicationId,
            loadBalancer: true
          };
        }
      }
      if (apiKey == null) {
        logger41.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
          argument: "network",
          value: network
        });
      }
    }
    super(network, apiKey);
  }
  static getApiKey(apiKey) {
    if (apiKey == null) {
      logger41.throwArgumentError("PocketProvider.getApiKey does not support null apiKey", "apiKey", apiKey);
    }
    const apiKeyObj = {
      applicationId: null,
      loadBalancer: false,
      applicationSecretKey: null
    };
    if (typeof apiKey === "string") {
      apiKeyObj.applicationId = apiKey;
    } else if (apiKey.applicationSecretKey != null) {
      logger41.assertArgument(typeof apiKey.applicationId === "string", "applicationSecretKey requires an applicationId", "applicationId", apiKey.applicationId);
      logger41.assertArgument(typeof apiKey.applicationSecretKey === "string", "invalid applicationSecretKey", "applicationSecretKey", "[REDACTED]");
      apiKeyObj.applicationId = apiKey.applicationId;
      apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
      apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
    } else if (apiKey.applicationId) {
      logger41.assertArgument(typeof apiKey.applicationId === "string", "apiKey.applicationId must be a string", "apiKey.applicationId", apiKey.applicationId);
      apiKeyObj.applicationId = apiKey.applicationId;
      apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
    } else {
      logger41.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
    }
    return apiKeyObj;
  }
  static getUrl(network, apiKey) {
    let host = null;
    switch (network ? network.name : "unknown") {
      case "homestead":
        host = "eth-mainnet.gateway.pokt.network";
        break;
      case "ropsten":
        host = "eth-ropsten.gateway.pokt.network";
        break;
      case "rinkeby":
        host = "eth-rinkeby.gateway.pokt.network";
        break;
      case "goerli":
        host = "eth-goerli.gateway.pokt.network";
        break;
      default:
        logger41.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
          argument: "network",
          value: network
        });
    }
    let url = null;
    if (apiKey.loadBalancer) {
      url = `https://${host}/v1/lb/${apiKey.applicationId}`;
    } else {
      url = `https://${host}/v1/${apiKey.applicationId}`;
    }
    const connection = { url };
    connection.headers = {};
    if (apiKey.applicationSecretKey != null) {
      connection.user = "";
      connection.password = apiKey.applicationSecretKey;
    }
    return connection;
  }
  isCommunityResource() {
    return this.applicationId === defaultApplicationIds[this.network.name];
  }
};

// node_modules/@ethersproject/providers/lib.esm/web3-provider.js
"use strict";
var logger42 = new Logger(version23);
var _nextId = 1;
function buildWeb3LegacyFetcher(provider, sendFunc) {
  const fetcher = "Web3LegacyFetcher";
  return function(method, params) {
    const request = {
      method,
      params,
      id: _nextId++,
      jsonrpc: "2.0"
    };
    return new Promise((resolve, reject) => {
      this.emit("debug", {
        action: "request",
        fetcher,
        request: deepCopy(request),
        provider: this
      });
      sendFunc(request, (error, response) => {
        if (error) {
          this.emit("debug", {
            action: "response",
            fetcher,
            error,
            request,
            provider: this
          });
          return reject(error);
        }
        this.emit("debug", {
          action: "response",
          fetcher,
          request,
          response,
          provider: this
        });
        if (response.error) {
          const error2 = new Error(response.error.message);
          error2.code = response.error.code;
          error2.data = response.error.data;
          return reject(error2);
        }
        resolve(response.result);
      });
    });
  };
}
function buildEip1193Fetcher(provider) {
  return function(method, params) {
    if (params == null) {
      params = [];
    }
    const request = { method, params };
    this.emit("debug", {
      action: "request",
      fetcher: "Eip1193Fetcher",
      request: deepCopy(request),
      provider: this
    });
    return provider.request(request).then((response) => {
      this.emit("debug", {
        action: "response",
        fetcher: "Eip1193Fetcher",
        request,
        response,
        provider: this
      });
      return response;
    }, (error) => {
      this.emit("debug", {
        action: "response",
        fetcher: "Eip1193Fetcher",
        request,
        error,
        provider: this
      });
      throw error;
    });
  };
}
var Web3Provider = class extends JsonRpcProvider {
  constructor(provider, network) {
    logger42.checkNew(new.target, Web3Provider);
    if (provider == null) {
      logger42.throwArgumentError("missing provider", "provider", provider);
    }
    let path = null;
    let jsonRpcFetchFunc = null;
    let subprovider = null;
    if (typeof provider === "function") {
      path = "unknown:";
      jsonRpcFetchFunc = provider;
    } else {
      path = provider.host || provider.path || "";
      if (!path && provider.isMetaMask) {
        path = "metamask";
      }
      subprovider = provider;
      if (provider.request) {
        if (path === "") {
          path = "eip-1193:";
        }
        jsonRpcFetchFunc = buildEip1193Fetcher(provider);
      } else if (provider.sendAsync) {
        jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
      } else if (provider.send) {
        jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
      } else {
        logger42.throwArgumentError("unsupported provider", "provider", provider);
      }
      if (!path) {
        path = "unknown:";
      }
    }
    super(path, network);
    defineReadOnly(this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
    defineReadOnly(this, "provider", subprovider);
  }
  send(method, params) {
    return this.jsonRpcFetchFunc(method, params);
  }
};

// node_modules/@ethersproject/providers/lib.esm/index.js
"use strict";
var logger43 = new Logger(version23);
function getDefaultProvider(network, options) {
  if (network == null) {
    network = "homestead";
  }
  if (typeof network === "string") {
    const match = network.match(/^(ws|http)s?:/i);
    if (match) {
      switch (match[1]) {
        case "http":
          return new JsonRpcProvider(network);
        case "ws":
          return new WebSocketProvider(network);
        default:
          logger43.throwArgumentError("unsupported URL scheme", "network", network);
      }
    }
  }
  const n2 = getNetwork(network);
  if (!n2 || !n2._defaultProvider) {
    logger43.throwError("unsupported getDefaultProvider network", Logger.errors.NETWORK_ERROR, {
      operation: "getDefaultProvider",
      network
    });
  }
  return n2._defaultProvider({
    FallbackProvider,
    AlchemyProvider,
    AnkrProvider,
    CloudflareProvider,
    EtherscanProvider,
    InfuraProvider,
    JsonRpcProvider,
    NodesmithProvider,
    PocketProvider,
    Web3Provider,
    IpcProvider
  }, options);
}

// node_modules/ethers/lib.esm/utils.js
var utils_exports = {};
__export(utils_exports, {
  AbiCoder: () => AbiCoder2,
  ConstructorFragment: () => ConstructorFragment2,
  ErrorFragment: () => ErrorFragment2,
  EventFragment: () => EventFragment2,
  FormatTypes: () => FormatTypes2,
  Fragment: () => Fragment2,
  FunctionFragment: () => FunctionFragment2,
  HDNode: () => HDNode,
  Indexed: () => Indexed2,
  Interface: () => Interface2,
  LogDescription: () => LogDescription2,
  Logger: () => Logger,
  ParamType: () => ParamType2,
  RLP: () => lib_exports,
  SigningKey: () => SigningKey,
  SupportedAlgorithm: () => SupportedAlgorithm,
  TransactionDescription: () => TransactionDescription2,
  TransactionTypes: () => TransactionTypes,
  UnicodeNormalizationForm: () => UnicodeNormalizationForm,
  Utf8ErrorFuncs: () => Utf8ErrorFuncs,
  Utf8ErrorReason: () => Utf8ErrorReason,
  _TypedDataEncoder: () => TypedDataEncoder,
  _fetchData: () => _fetchData,
  _toEscapedUtf8String: () => _toEscapedUtf8String,
  accessListify: () => accessListify,
  arrayify: () => arrayify,
  base58: () => Base58,
  base64: () => lib_exports3,
  checkProperties: () => checkProperties,
  checkResultErrors: () => checkResultErrors2,
  commify: () => commify,
  computeAddress: () => computeAddress,
  computeHmac: () => computeHmac,
  computePublicKey: () => computePublicKey,
  concat: () => concat2,
  deepCopy: () => deepCopy,
  defaultAbiCoder: () => defaultAbiCoder2,
  defaultPath: () => defaultPath,
  defineReadOnly: () => defineReadOnly,
  dnsEncode: () => dnsEncode,
  entropyToMnemonic: () => entropyToMnemonic,
  fetchJson: () => fetchJson,
  formatBytes32String: () => formatBytes32String,
  formatEther: () => formatEther,
  formatUnits: () => formatUnits,
  getAccountPath: () => getAccountPath,
  getAddress: () => getAddress,
  getContractAddress: () => getContractAddress,
  getCreate2Address: () => getCreate2Address,
  getIcapAddress: () => getIcapAddress,
  getJsonWalletAddress: () => getJsonWalletAddress,
  getStatic: () => getStatic,
  hashMessage: () => hashMessage,
  hexConcat: () => hexConcat,
  hexDataLength: () => hexDataLength,
  hexDataSlice: () => hexDataSlice,
  hexStripZeros: () => hexStripZeros,
  hexValue: () => hexValue2,
  hexZeroPad: () => hexZeroPad,
  hexlify: () => hexlify,
  id: () => id,
  isAddress: () => isAddress,
  isBytes: () => isBytes,
  isBytesLike: () => isBytesLike,
  isHexString: () => isHexString,
  isValidMnemonic: () => isValidMnemonic,
  isValidName: () => isValidName,
  joinSignature: () => joinSignature,
  keccak256: () => keccak256,
  mnemonicToEntropy: () => mnemonicToEntropy,
  mnemonicToSeed: () => mnemonicToSeed,
  namehash: () => namehash,
  nameprep: () => nameprep,
  parseBytes32String: () => parseBytes32String,
  parseEther: () => parseEther,
  parseTransaction: () => parse,
  parseUnits: () => parseUnits,
  poll: () => poll,
  randomBytes: () => randomBytes,
  recoverAddress: () => recoverAddress,
  recoverPublicKey: () => recoverPublicKey,
  resolveProperties: () => resolveProperties,
  ripemd160: () => ripemd160,
  serializeTransaction: () => serialize,
  sha256: () => sha256,
  sha512: () => sha512,
  shallowCopy: () => shallowCopy,
  shuffled: () => shuffled,
  solidityKeccak256: () => keccak2562,
  solidityPack: () => pack3,
  soliditySha256: () => sha2562,
  splitSignature: () => splitSignature,
  stripZeros: () => stripZeros,
  toUtf8Bytes: () => toUtf8Bytes,
  toUtf8CodePoints: () => toUtf8CodePoints,
  toUtf8String: () => toUtf8String,
  verifyMessage: () => verifyMessage,
  verifyTypedData: () => verifyTypedData,
  zeroPad: () => zeroPad
});

// node_modules/ethers/node_modules/@ethersproject/abi/lib.esm/_version.js
var version24 = "abi/5.6.1";

// node_modules/ethers/node_modules/@ethersproject/abi/lib.esm/fragments.js
"use strict";
var logger44 = new Logger(version24);
var _constructorGuard6 = {};
var ModifiersBytes2 = { calldata: true, memory: true, storage: true };
var ModifiersNest2 = { calldata: true, memory: true };
function checkModifier2(type, name2) {
  if (type === "bytes" || type === "string") {
    if (ModifiersBytes2[name2]) {
      return true;
    }
  } else if (type === "address") {
    if (name2 === "payable") {
      return true;
    }
  } else if (type.indexOf("[") >= 0 || type === "tuple") {
    if (ModifiersNest2[name2]) {
      return true;
    }
  }
  if (ModifiersBytes2[name2] || name2 === "payable") {
    logger44.throwArgumentError("invalid modifier", "name", name2);
  }
  return false;
}
function parseParamType2(param, allowIndexed) {
  let originalParam = param;
  function throwError(i3) {
    logger44.throwArgumentError(`unexpected character at position ${i3}`, "param", param);
  }
  param = param.replace(/\s/g, " ");
  function newNode(parent2) {
    let node2 = { type: "", name: "", parent: parent2, state: { allowType: true } };
    if (allowIndexed) {
      node2.indexed = false;
    }
    return node2;
  }
  let parent = { type: "", name: "", state: { allowType: true } };
  let node = parent;
  for (let i3 = 0; i3 < param.length; i3++) {
    let c5 = param[i3];
    switch (c5) {
      case "(":
        if (node.state.allowType && node.type === "") {
          node.type = "tuple";
        } else if (!node.state.allowParams) {
          throwError(i3);
        }
        node.state.allowType = false;
        node.type = verifyType2(node.type);
        node.components = [newNode(node)];
        node = node.components[0];
        break;
      case ")":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i3);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier2(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType2(node.type);
        let child = node;
        node = node.parent;
        if (!node) {
          throwError(i3);
        }
        delete child.parent;
        node.state.allowParams = false;
        node.state.allowName = true;
        node.state.allowArray = true;
        break;
      case ",":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i3);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier2(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType2(node.type);
        let sibling = newNode(node.parent);
        node.parent.components.push(sibling);
        delete node.parent;
        node = sibling;
        break;
      case " ":
        if (node.state.allowType) {
          if (node.type !== "") {
            node.type = verifyType2(node.type);
            delete node.state.allowType;
            node.state.allowName = true;
            node.state.allowParams = true;
          }
        }
        if (node.state.allowName) {
          if (node.name !== "") {
            if (node.name === "indexed") {
              if (!allowIndexed) {
                throwError(i3);
              }
              if (node.indexed) {
                throwError(i3);
              }
              node.indexed = true;
              node.name = "";
            } else if (checkModifier2(node.type, node.name)) {
              node.name = "";
            } else {
              node.state.allowName = false;
            }
          }
        }
        break;
      case "[":
        if (!node.state.allowArray) {
          throwError(i3);
        }
        node.type += c5;
        node.state.allowArray = false;
        node.state.allowName = false;
        node.state.readArray = true;
        break;
      case "]":
        if (!node.state.readArray) {
          throwError(i3);
        }
        node.type += c5;
        node.state.readArray = false;
        node.state.allowArray = true;
        node.state.allowName = true;
        break;
      default:
        if (node.state.allowType) {
          node.type += c5;
          node.state.allowParams = true;
          node.state.allowArray = true;
        } else if (node.state.allowName) {
          node.name += c5;
          delete node.state.allowArray;
        } else if (node.state.readArray) {
          node.type += c5;
        } else {
          throwError(i3);
        }
    }
  }
  if (node.parent) {
    logger44.throwArgumentError("unexpected eof", "param", param);
  }
  delete parent.state;
  if (node.name === "indexed") {
    if (!allowIndexed) {
      throwError(originalParam.length - 7);
    }
    if (node.indexed) {
      throwError(originalParam.length - 7);
    }
    node.indexed = true;
    node.name = "";
  } else if (checkModifier2(node.type, node.name)) {
    node.name = "";
  }
  parent.type = verifyType2(parent.type);
  return parent;
}
function populate2(object, params) {
  for (let key2 in params) {
    defineReadOnly(object, key2, params[key2]);
  }
}
var FormatTypes2 = Object.freeze({
  sighash: "sighash",
  minimal: "minimal",
  full: "full",
  json: "json"
});
var paramTypeArray2 = new RegExp(/^(.*)\[([0-9]*)\]$/);
var ParamType2 = class {
  constructor(constructorGuard, params) {
    if (constructorGuard !== _constructorGuard6) {
      logger44.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new ParamType()"
      });
    }
    populate2(this, params);
    let match = this.type.match(paramTypeArray2);
    if (match) {
      populate2(this, {
        arrayLength: parseInt(match[2] || "-1"),
        arrayChildren: ParamType2.fromObject({
          type: match[1],
          components: this.components
        }),
        baseType: "array"
      });
    } else {
      populate2(this, {
        arrayLength: null,
        arrayChildren: null,
        baseType: this.components != null ? "tuple" : this.type
      });
    }
    this._isParamType = true;
    Object.freeze(this);
  }
  format(format) {
    if (!format) {
      format = FormatTypes2.sighash;
    }
    if (!FormatTypes2[format]) {
      logger44.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes2.json) {
      let result2 = {
        type: this.baseType === "tuple" ? "tuple" : this.type,
        name: this.name || void 0
      };
      if (typeof this.indexed === "boolean") {
        result2.indexed = this.indexed;
      }
      if (this.components) {
        result2.components = this.components.map((comp) => JSON.parse(comp.format(format)));
      }
      return JSON.stringify(result2);
    }
    let result = "";
    if (this.baseType === "array") {
      result += this.arrayChildren.format(format);
      result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
    } else {
      if (this.baseType === "tuple") {
        if (format !== FormatTypes2.sighash) {
          result += this.type;
        }
        result += "(" + this.components.map((comp) => comp.format(format)).join(format === FormatTypes2.full ? ", " : ",") + ")";
      } else {
        result += this.type;
      }
    }
    if (format !== FormatTypes2.sighash) {
      if (this.indexed === true) {
        result += " indexed";
      }
      if (format === FormatTypes2.full && this.name) {
        result += " " + this.name;
      }
    }
    return result;
  }
  static from(value, allowIndexed) {
    if (typeof value === "string") {
      return ParamType2.fromString(value, allowIndexed);
    }
    return ParamType2.fromObject(value);
  }
  static fromObject(value) {
    if (ParamType2.isParamType(value)) {
      return value;
    }
    return new ParamType2(_constructorGuard6, {
      name: value.name || null,
      type: verifyType2(value.type),
      indexed: value.indexed == null ? null : !!value.indexed,
      components: value.components ? value.components.map(ParamType2.fromObject) : null
    });
  }
  static fromString(value, allowIndexed) {
    function ParamTypify(node) {
      return ParamType2.fromObject({
        name: node.name,
        type: node.type,
        indexed: node.indexed,
        components: node.components
      });
    }
    return ParamTypify(parseParamType2(value, !!allowIndexed));
  }
  static isParamType(value) {
    return !!(value != null && value._isParamType);
  }
};
function parseParams2(value, allowIndex) {
  return splitNesting2(value).map((param) => ParamType2.fromString(param, allowIndex));
}
var Fragment2 = class {
  constructor(constructorGuard, params) {
    if (constructorGuard !== _constructorGuard6) {
      logger44.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new Fragment()"
      });
    }
    populate2(this, params);
    this._isFragment = true;
    Object.freeze(this);
  }
  static from(value) {
    if (Fragment2.isFragment(value)) {
      return value;
    }
    if (typeof value === "string") {
      return Fragment2.fromString(value);
    }
    return Fragment2.fromObject(value);
  }
  static fromObject(value) {
    if (Fragment2.isFragment(value)) {
      return value;
    }
    switch (value.type) {
      case "function":
        return FunctionFragment2.fromObject(value);
      case "event":
        return EventFragment2.fromObject(value);
      case "constructor":
        return ConstructorFragment2.fromObject(value);
      case "error":
        return ErrorFragment2.fromObject(value);
      case "fallback":
      case "receive":
        return null;
    }
    return logger44.throwArgumentError("invalid fragment object", "value", value);
  }
  static fromString(value) {
    value = value.replace(/\s/g, " ");
    value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
    value = value.trim();
    if (value.split(" ")[0] === "event") {
      return EventFragment2.fromString(value.substring(5).trim());
    } else if (value.split(" ")[0] === "function") {
      return FunctionFragment2.fromString(value.substring(8).trim());
    } else if (value.split("(")[0].trim() === "constructor") {
      return ConstructorFragment2.fromString(value.trim());
    } else if (value.split(" ")[0] === "error") {
      return ErrorFragment2.fromString(value.substring(5).trim());
    }
    return logger44.throwArgumentError("unsupported fragment", "value", value);
  }
  static isFragment(value) {
    return !!(value && value._isFragment);
  }
};
var EventFragment2 = class extends Fragment2 {
  format(format) {
    if (!format) {
      format = FormatTypes2.sighash;
    }
    if (!FormatTypes2[format]) {
      logger44.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes2.json) {
      return JSON.stringify({
        type: "event",
        anonymous: this.anonymous,
        name: this.name,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
      });
    }
    let result = "";
    if (format !== FormatTypes2.sighash) {
      result += "event ";
    }
    result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes2.full ? ", " : ",") + ") ";
    if (format !== FormatTypes2.sighash) {
      if (this.anonymous) {
        result += "anonymous ";
      }
    }
    return result.trim();
  }
  static from(value) {
    if (typeof value === "string") {
      return EventFragment2.fromString(value);
    }
    return EventFragment2.fromObject(value);
  }
  static fromObject(value) {
    if (EventFragment2.isEventFragment(value)) {
      return value;
    }
    if (value.type !== "event") {
      logger44.throwArgumentError("invalid event object", "value", value);
    }
    const params = {
      name: verifyIdentifier2(value.name),
      anonymous: value.anonymous,
      inputs: value.inputs ? value.inputs.map(ParamType2.fromObject) : [],
      type: "event"
    };
    return new EventFragment2(_constructorGuard6, params);
  }
  static fromString(value) {
    let match = value.match(regexParen2);
    if (!match) {
      logger44.throwArgumentError("invalid event string", "value", value);
    }
    let anonymous = false;
    match[3].split(" ").forEach((modifier) => {
      switch (modifier.trim()) {
        case "anonymous":
          anonymous = true;
          break;
        case "":
          break;
        default:
          logger44.warn("unknown modifier: " + modifier);
      }
    });
    return EventFragment2.fromObject({
      name: match[1].trim(),
      anonymous,
      inputs: parseParams2(match[2], true),
      type: "event"
    });
  }
  static isEventFragment(value) {
    return value && value._isFragment && value.type === "event";
  }
};
function parseGas2(value, params) {
  params.gas = null;
  let comps = value.split("@");
  if (comps.length !== 1) {
    if (comps.length > 2) {
      logger44.throwArgumentError("invalid human-readable ABI signature", "value", value);
    }
    if (!comps[1].match(/^[0-9]+$/)) {
      logger44.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
    }
    params.gas = BigNumber3.from(comps[1]);
    return comps[0];
  }
  return value;
}
function parseModifiers2(value, params) {
  params.constant = false;
  params.payable = false;
  params.stateMutability = "nonpayable";
  value.split(" ").forEach((modifier) => {
    switch (modifier.trim()) {
      case "constant":
        params.constant = true;
        break;
      case "payable":
        params.payable = true;
        params.stateMutability = "payable";
        break;
      case "nonpayable":
        params.payable = false;
        params.stateMutability = "nonpayable";
        break;
      case "pure":
        params.constant = true;
        params.stateMutability = "pure";
        break;
      case "view":
        params.constant = true;
        params.stateMutability = "view";
        break;
      case "external":
      case "public":
      case "":
        break;
      default:
        console.log("unknown modifier: " + modifier);
    }
  });
}
function verifyState2(value) {
  let result = {
    constant: false,
    payable: true,
    stateMutability: "payable"
  };
  if (value.stateMutability != null) {
    result.stateMutability = value.stateMutability;
    result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
    if (value.constant != null) {
      if (!!value.constant !== result.constant) {
        logger44.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
      }
    }
    result.payable = result.stateMutability === "payable";
    if (value.payable != null) {
      if (!!value.payable !== result.payable) {
        logger44.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
      }
    }
  } else if (value.payable != null) {
    result.payable = !!value.payable;
    if (value.constant == null && !result.payable && value.type !== "constructor") {
      logger44.throwArgumentError("unable to determine stateMutability", "value", value);
    }
    result.constant = !!value.constant;
    if (result.constant) {
      result.stateMutability = "view";
    } else {
      result.stateMutability = result.payable ? "payable" : "nonpayable";
    }
    if (result.payable && result.constant) {
      logger44.throwArgumentError("cannot have constant payable function", "value", value);
    }
  } else if (value.constant != null) {
    result.constant = !!value.constant;
    result.payable = !result.constant;
    result.stateMutability = result.constant ? "view" : "payable";
  } else if (value.type !== "constructor") {
    logger44.throwArgumentError("unable to determine stateMutability", "value", value);
  }
  return result;
}
var ConstructorFragment2 = class extends Fragment2 {
  format(format) {
    if (!format) {
      format = FormatTypes2.sighash;
    }
    if (!FormatTypes2[format]) {
      logger44.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes2.json) {
      return JSON.stringify({
        type: "constructor",
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
        payable: this.payable,
        gas: this.gas ? this.gas.toNumber() : void 0,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
      });
    }
    if (format === FormatTypes2.sighash) {
      logger44.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "format(sighash)"
      });
    }
    let result = "constructor(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes2.full ? ", " : ",") + ") ";
    if (this.stateMutability && this.stateMutability !== "nonpayable") {
      result += this.stateMutability + " ";
    }
    return result.trim();
  }
  static from(value) {
    if (typeof value === "string") {
      return ConstructorFragment2.fromString(value);
    }
    return ConstructorFragment2.fromObject(value);
  }
  static fromObject(value) {
    if (ConstructorFragment2.isConstructorFragment(value)) {
      return value;
    }
    if (value.type !== "constructor") {
      logger44.throwArgumentError("invalid constructor object", "value", value);
    }
    let state = verifyState2(value);
    if (state.constant) {
      logger44.throwArgumentError("constructor cannot be constant", "value", value);
    }
    const params = {
      name: null,
      type: value.type,
      inputs: value.inputs ? value.inputs.map(ParamType2.fromObject) : [],
      payable: state.payable,
      stateMutability: state.stateMutability,
      gas: value.gas ? BigNumber3.from(value.gas) : null
    };
    return new ConstructorFragment2(_constructorGuard6, params);
  }
  static fromString(value) {
    let params = { type: "constructor" };
    value = parseGas2(value, params);
    let parens = value.match(regexParen2);
    if (!parens || parens[1].trim() !== "constructor") {
      logger44.throwArgumentError("invalid constructor string", "value", value);
    }
    params.inputs = parseParams2(parens[2].trim(), false);
    parseModifiers2(parens[3].trim(), params);
    return ConstructorFragment2.fromObject(params);
  }
  static isConstructorFragment(value) {
    return value && value._isFragment && value.type === "constructor";
  }
};
var FunctionFragment2 = class extends ConstructorFragment2 {
  format(format) {
    if (!format) {
      format = FormatTypes2.sighash;
    }
    if (!FormatTypes2[format]) {
      logger44.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes2.json) {
      return JSON.stringify({
        type: "function",
        name: this.name,
        constant: this.constant,
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
        payable: this.payable,
        gas: this.gas ? this.gas.toNumber() : void 0,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
        outputs: this.outputs.map((output) => JSON.parse(output.format(format)))
      });
    }
    let result = "";
    if (format !== FormatTypes2.sighash) {
      result += "function ";
    }
    result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes2.full ? ", " : ",") + ") ";
    if (format !== FormatTypes2.sighash) {
      if (this.stateMutability) {
        if (this.stateMutability !== "nonpayable") {
          result += this.stateMutability + " ";
        }
      } else if (this.constant) {
        result += "view ";
      }
      if (this.outputs && this.outputs.length) {
        result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
      }
      if (this.gas != null) {
        result += "@" + this.gas.toString() + " ";
      }
    }
    return result.trim();
  }
  static from(value) {
    if (typeof value === "string") {
      return FunctionFragment2.fromString(value);
    }
    return FunctionFragment2.fromObject(value);
  }
  static fromObject(value) {
    if (FunctionFragment2.isFunctionFragment(value)) {
      return value;
    }
    if (value.type !== "function") {
      logger44.throwArgumentError("invalid function object", "value", value);
    }
    let state = verifyState2(value);
    const params = {
      type: value.type,
      name: verifyIdentifier2(value.name),
      constant: state.constant,
      inputs: value.inputs ? value.inputs.map(ParamType2.fromObject) : [],
      outputs: value.outputs ? value.outputs.map(ParamType2.fromObject) : [],
      payable: state.payable,
      stateMutability: state.stateMutability,
      gas: value.gas ? BigNumber3.from(value.gas) : null
    };
    return new FunctionFragment2(_constructorGuard6, params);
  }
  static fromString(value) {
    let params = { type: "function" };
    value = parseGas2(value, params);
    let comps = value.split(" returns ");
    if (comps.length > 2) {
      logger44.throwArgumentError("invalid function string", "value", value);
    }
    let parens = comps[0].match(regexParen2);
    if (!parens) {
      logger44.throwArgumentError("invalid function signature", "value", value);
    }
    params.name = parens[1].trim();
    if (params.name) {
      verifyIdentifier2(params.name);
    }
    params.inputs = parseParams2(parens[2], false);
    parseModifiers2(parens[3].trim(), params);
    if (comps.length > 1) {
      let returns = comps[1].match(regexParen2);
      if (returns[1].trim() != "" || returns[3].trim() != "") {
        logger44.throwArgumentError("unexpected tokens", "value", value);
      }
      params.outputs = parseParams2(returns[2], false);
    } else {
      params.outputs = [];
    }
    return FunctionFragment2.fromObject(params);
  }
  static isFunctionFragment(value) {
    return value && value._isFragment && value.type === "function";
  }
};
function checkForbidden2(fragment) {
  const sig = fragment.format();
  if (sig === "Error(string)" || sig === "Panic(uint256)") {
    logger44.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
  }
  return fragment;
}
var ErrorFragment2 = class extends Fragment2 {
  format(format) {
    if (!format) {
      format = FormatTypes2.sighash;
    }
    if (!FormatTypes2[format]) {
      logger44.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes2.json) {
      return JSON.stringify({
        type: "error",
        name: this.name,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
      });
    }
    let result = "";
    if (format !== FormatTypes2.sighash) {
      result += "error ";
    }
    result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes2.full ? ", " : ",") + ") ";
    return result.trim();
  }
  static from(value) {
    if (typeof value === "string") {
      return ErrorFragment2.fromString(value);
    }
    return ErrorFragment2.fromObject(value);
  }
  static fromObject(value) {
    if (ErrorFragment2.isErrorFragment(value)) {
      return value;
    }
    if (value.type !== "error") {
      logger44.throwArgumentError("invalid error object", "value", value);
    }
    const params = {
      type: value.type,
      name: verifyIdentifier2(value.name),
      inputs: value.inputs ? value.inputs.map(ParamType2.fromObject) : []
    };
    return checkForbidden2(new ErrorFragment2(_constructorGuard6, params));
  }
  static fromString(value) {
    let params = { type: "error" };
    let parens = value.match(regexParen2);
    if (!parens) {
      logger44.throwArgumentError("invalid error signature", "value", value);
    }
    params.name = parens[1].trim();
    if (params.name) {
      verifyIdentifier2(params.name);
    }
    params.inputs = parseParams2(parens[2], false);
    return checkForbidden2(ErrorFragment2.fromObject(params));
  }
  static isErrorFragment(value) {
    return value && value._isFragment && value.type === "error";
  }
};
function verifyType2(type) {
  if (type.match(/^uint($|[^1-9])/)) {
    type = "uint256" + type.substring(4);
  } else if (type.match(/^int($|[^1-9])/)) {
    type = "int256" + type.substring(3);
  }
  return type;
}
var regexIdentifier2 = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
function verifyIdentifier2(value) {
  if (!value || !value.match(regexIdentifier2)) {
    logger44.throwArgumentError(`invalid identifier "${value}"`, "value", value);
  }
  return value;
}
var regexParen2 = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
function splitNesting2(value) {
  value = value.trim();
  let result = [];
  let accum = "";
  let depth = 0;
  for (let offset = 0; offset < value.length; offset++) {
    let c5 = value[offset];
    if (c5 === "," && depth === 0) {
      result.push(accum);
      accum = "";
    } else {
      accum += c5;
      if (c5 === "(") {
        depth++;
      } else if (c5 === ")") {
        depth--;
        if (depth === -1) {
          logger44.throwArgumentError("unbalanced parenthesis", "value", value);
        }
      }
    }
  }
  if (accum) {
    result.push(accum);
  }
  return result;
}

// node_modules/ethers/node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js
"use strict";
var logger45 = new Logger(version24);
function checkResultErrors2(result) {
  const errors = [];
  const checkErrors = function(path, object) {
    if (!Array.isArray(object)) {
      return;
    }
    for (let key2 in object) {
      const childPath = path.slice();
      childPath.push(key2);
      try {
        checkErrors(childPath, object[key2]);
      } catch (error) {
        errors.push({ path: childPath, error });
      }
    }
  };
  checkErrors([], result);
  return errors;
}
var Coder2 = class {
  constructor(name2, type, localName, dynamic) {
    this.name = name2;
    this.type = type;
    this.localName = localName;
    this.dynamic = dynamic;
  }
  _throwError(message, value) {
    logger45.throwArgumentError(message, this.localName, value);
  }
};
var Writer2 = class {
  constructor(wordSize) {
    defineReadOnly(this, "wordSize", wordSize || 32);
    this._data = [];
    this._dataLength = 0;
    this._padding = new Uint8Array(wordSize);
  }
  get data() {
    return hexConcat(this._data);
  }
  get length() {
    return this._dataLength;
  }
  _writeData(data) {
    this._data.push(data);
    this._dataLength += data.length;
    return data.length;
  }
  appendWriter(writer) {
    return this._writeData(concat2(writer._data));
  }
  writeBytes(value) {
    let bytes3 = arrayify(value);
    const paddingOffset = bytes3.length % this.wordSize;
    if (paddingOffset) {
      bytes3 = concat2([bytes3, this._padding.slice(paddingOffset)]);
    }
    return this._writeData(bytes3);
  }
  _getValue(value) {
    let bytes3 = arrayify(BigNumber3.from(value));
    if (bytes3.length > this.wordSize) {
      logger45.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
        length: this.wordSize,
        offset: bytes3.length
      });
    }
    if (bytes3.length % this.wordSize) {
      bytes3 = concat2([this._padding.slice(bytes3.length % this.wordSize), bytes3]);
    }
    return bytes3;
  }
  writeValue(value) {
    return this._writeData(this._getValue(value));
  }
  writeUpdatableValue() {
    const offset = this._data.length;
    this._data.push(this._padding);
    this._dataLength += this.wordSize;
    return (value) => {
      this._data[offset] = this._getValue(value);
    };
  }
};
var Reader2 = class {
  constructor(data, wordSize, coerceFunc, allowLoose) {
    defineReadOnly(this, "_data", arrayify(data));
    defineReadOnly(this, "wordSize", wordSize || 32);
    defineReadOnly(this, "_coerceFunc", coerceFunc);
    defineReadOnly(this, "allowLoose", allowLoose);
    this._offset = 0;
  }
  get data() {
    return hexlify(this._data);
  }
  get consumed() {
    return this._offset;
  }
  static coerce(name2, value) {
    let match = name2.match("^u?int([0-9]+)$");
    if (match && parseInt(match[1]) <= 48) {
      value = value.toNumber();
    }
    return value;
  }
  coerce(name2, value) {
    if (this._coerceFunc) {
      return this._coerceFunc(name2, value);
    }
    return Reader2.coerce(name2, value);
  }
  _peekBytes(offset, length, loose) {
    let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
    if (this._offset + alignedLength > this._data.length) {
      if (this.allowLoose && loose && this._offset + length <= this._data.length) {
        alignedLength = length;
      } else {
        logger45.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
          length: this._data.length,
          offset: this._offset + alignedLength
        });
      }
    }
    return this._data.slice(this._offset, this._offset + alignedLength);
  }
  subReader(offset) {
    return new Reader2(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
  }
  readBytes(length, loose) {
    let bytes3 = this._peekBytes(0, length, !!loose);
    this._offset += bytes3.length;
    return bytes3.slice(0, length);
  }
  readValue() {
    return BigNumber3.from(this.readBytes(this.wordSize));
  }
};

// node_modules/ethers/node_modules/@ethersproject/abi/lib.esm/coders/address.js
"use strict";
var AddressCoder2 = class extends Coder2 {
  constructor(localName) {
    super("address", "address", localName, false);
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000";
  }
  encode(writer, value) {
    try {
      value = getAddress(value);
    } catch (error) {
      this._throwError(error.message, value);
    }
    return writer.writeValue(value);
  }
  decode(reader) {
    return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
  }
};

// node_modules/ethers/node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js
"use strict";
var AnonymousCoder2 = class extends Coder2 {
  constructor(coder) {
    super(coder.name, coder.type, void 0, coder.dynamic);
    this.coder = coder;
  }
  defaultValue() {
    return this.coder.defaultValue();
  }
  encode(writer, value) {
    return this.coder.encode(writer, value);
  }
  decode(reader) {
    return this.coder.decode(reader);
  }
};

// node_modules/ethers/node_modules/@ethersproject/abi/lib.esm/coders/array.js
"use strict";
var logger46 = new Logger(version24);
function pack2(writer, coders, values) {
  let arrayValues = null;
  if (Array.isArray(values)) {
    arrayValues = values;
  } else if (values && typeof values === "object") {
    let unique = {};
    arrayValues = coders.map((coder) => {
      const name2 = coder.localName;
      if (!name2) {
        logger46.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      if (unique[name2]) {
        logger46.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      unique[name2] = true;
      return values[name2];
    });
  } else {
    logger46.throwArgumentError("invalid tuple value", "tuple", values);
  }
  if (coders.length !== arrayValues.length) {
    logger46.throwArgumentError("types/value length mismatch", "tuple", values);
  }
  let staticWriter = new Writer2(writer.wordSize);
  let dynamicWriter = new Writer2(writer.wordSize);
  let updateFuncs = [];
  coders.forEach((coder, index) => {
    let value = arrayValues[index];
    if (coder.dynamic) {
      let dynamicOffset = dynamicWriter.length;
      coder.encode(dynamicWriter, value);
      let updateFunc = staticWriter.writeUpdatableValue();
      updateFuncs.push((baseOffset) => {
        updateFunc(baseOffset + dynamicOffset);
      });
    } else {
      coder.encode(staticWriter, value);
    }
  });
  updateFuncs.forEach((func) => {
    func(staticWriter.length);
  });
  let length = writer.appendWriter(staticWriter);
  length += writer.appendWriter(dynamicWriter);
  return length;
}
function unpack2(reader, coders) {
  let values = [];
  let baseReader = reader.subReader(0);
  coders.forEach((coder) => {
    let value = null;
    if (coder.dynamic) {
      let offset = reader.readValue();
      let offsetReader = baseReader.subReader(offset.toNumber());
      try {
        value = coder.decode(offsetReader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    } else {
      try {
        value = coder.decode(reader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    }
    if (value != void 0) {
      values.push(value);
    }
  });
  const uniqueNames = coders.reduce((accum, coder) => {
    const name2 = coder.localName;
    if (name2) {
      if (!accum[name2]) {
        accum[name2] = 0;
      }
      accum[name2]++;
    }
    return accum;
  }, {});
  coders.forEach((coder, index) => {
    let name2 = coder.localName;
    if (!name2 || uniqueNames[name2] !== 1) {
      return;
    }
    if (name2 === "length") {
      name2 = "_length";
    }
    if (values[name2] != null) {
      return;
    }
    const value = values[index];
    if (value instanceof Error) {
      Object.defineProperty(values, name2, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    } else {
      values[name2] = value;
    }
  });
  for (let i3 = 0; i3 < values.length; i3++) {
    const value = values[i3];
    if (value instanceof Error) {
      Object.defineProperty(values, i3, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    }
  }
  return Object.freeze(values);
}
var ArrayCoder2 = class extends Coder2 {
  constructor(coder, length, localName) {
    const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
    const dynamic = length === -1 || coder.dynamic;
    super("array", type, localName, dynamic);
    this.coder = coder;
    this.length = length;
  }
  defaultValue() {
    const defaultChild = this.coder.defaultValue();
    const result = [];
    for (let i3 = 0; i3 < this.length; i3++) {
      result.push(defaultChild);
    }
    return result;
  }
  encode(writer, value) {
    if (!Array.isArray(value)) {
      this._throwError("expected array value", value);
    }
    let count = this.length;
    if (count === -1) {
      count = value.length;
      writer.writeValue(value.length);
    }
    logger46.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
    let coders = [];
    for (let i3 = 0; i3 < value.length; i3++) {
      coders.push(this.coder);
    }
    return pack2(writer, coders, value);
  }
  decode(reader) {
    let count = this.length;
    if (count === -1) {
      count = reader.readValue().toNumber();
      if (count * 32 > reader._data.length) {
        logger46.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
          length: reader._data.length,
          count
        });
      }
    }
    let coders = [];
    for (let i3 = 0; i3 < count; i3++) {
      coders.push(new AnonymousCoder2(this.coder));
    }
    return reader.coerce(this.name, unpack2(reader, coders));
  }
};

// node_modules/ethers/node_modules/@ethersproject/abi/lib.esm/coders/boolean.js
"use strict";
var BooleanCoder2 = class extends Coder2 {
  constructor(localName) {
    super("bool", "bool", localName, false);
  }
  defaultValue() {
    return false;
  }
  encode(writer, value) {
    return writer.writeValue(value ? 1 : 0);
  }
  decode(reader) {
    return reader.coerce(this.type, !reader.readValue().isZero());
  }
};

// node_modules/ethers/node_modules/@ethersproject/abi/lib.esm/coders/bytes.js
"use strict";
var DynamicBytesCoder2 = class extends Coder2 {
  constructor(type, localName) {
    super(type, type, localName, true);
  }
  defaultValue() {
    return "0x";
  }
  encode(writer, value) {
    value = arrayify(value);
    let length = writer.writeValue(value.length);
    length += writer.writeBytes(value);
    return length;
  }
  decode(reader) {
    return reader.readBytes(reader.readValue().toNumber(), true);
  }
};
var BytesCoder2 = class extends DynamicBytesCoder2 {
  constructor(localName) {
    super("bytes", localName);
  }
  decode(reader) {
    return reader.coerce(this.name, hexlify(super.decode(reader)));
  }
};

// node_modules/ethers/node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js
"use strict";
var FixedBytesCoder2 = class extends Coder2 {
  constructor(size, localName) {
    let name2 = "bytes" + String(size);
    super(name2, name2, localName, false);
    this.size = size;
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
  }
  encode(writer, value) {
    let data = arrayify(value);
    if (data.length !== this.size) {
      this._throwError("incorrect data length", value);
    }
    return writer.writeBytes(data);
  }
  decode(reader) {
    return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
  }
};

// node_modules/ethers/node_modules/@ethersproject/abi/lib.esm/coders/null.js
"use strict";
var NullCoder2 = class extends Coder2 {
  constructor(localName) {
    super("null", "", localName, false);
  }
  defaultValue() {
    return null;
  }
  encode(writer, value) {
    if (value != null) {
      this._throwError("not null", value);
    }
    return writer.writeBytes([]);
  }
  decode(reader) {
    reader.readBytes(0);
    return reader.coerce(this.name, null);
  }
};

// node_modules/ethers/node_modules/@ethersproject/abi/lib.esm/coders/number.js
"use strict";
var NumberCoder2 = class extends Coder2 {
  constructor(size, signed, localName) {
    const name2 = (signed ? "int" : "uint") + size * 8;
    super(name2, name2, localName, false);
    this.size = size;
    this.signed = signed;
  }
  defaultValue() {
    return 0;
  }
  encode(writer, value) {
    let v3 = BigNumber3.from(value);
    let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
    if (this.signed) {
      let bounds = maxUintValue.mask(this.size * 8 - 1);
      if (v3.gt(bounds) || v3.lt(bounds.add(One).mul(NegativeOne2))) {
        this._throwError("value out-of-bounds", value);
      }
    } else if (v3.lt(Zero2) || v3.gt(maxUintValue.mask(this.size * 8))) {
      this._throwError("value out-of-bounds", value);
    }
    v3 = v3.toTwos(this.size * 8).mask(this.size * 8);
    if (this.signed) {
      v3 = v3.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
    }
    return writer.writeValue(v3);
  }
  decode(reader) {
    let value = reader.readValue().mask(this.size * 8);
    if (this.signed) {
      value = value.fromTwos(this.size * 8);
    }
    return reader.coerce(this.name, value);
  }
};

// node_modules/ethers/node_modules/@ethersproject/abi/lib.esm/coders/string.js
"use strict";
var StringCoder2 = class extends DynamicBytesCoder2 {
  constructor(localName) {
    super("string", localName);
  }
  defaultValue() {
    return "";
  }
  encode(writer, value) {
    return super.encode(writer, toUtf8Bytes(value));
  }
  decode(reader) {
    return toUtf8String(super.decode(reader));
  }
};

// node_modules/ethers/node_modules/@ethersproject/abi/lib.esm/coders/tuple.js
"use strict";
var TupleCoder2 = class extends Coder2 {
  constructor(coders, localName) {
    let dynamic = false;
    const types = [];
    coders.forEach((coder) => {
      if (coder.dynamic) {
        dynamic = true;
      }
      types.push(coder.type);
    });
    const type = "tuple(" + types.join(",") + ")";
    super("tuple", type, localName, dynamic);
    this.coders = coders;
  }
  defaultValue() {
    const values = [];
    this.coders.forEach((coder) => {
      values.push(coder.defaultValue());
    });
    const uniqueNames = this.coders.reduce((accum, coder) => {
      const name2 = coder.localName;
      if (name2) {
        if (!accum[name2]) {
          accum[name2] = 0;
        }
        accum[name2]++;
      }
      return accum;
    }, {});
    this.coders.forEach((coder, index) => {
      let name2 = coder.localName;
      if (!name2 || uniqueNames[name2] !== 1) {
        return;
      }
      if (name2 === "length") {
        name2 = "_length";
      }
      if (values[name2] != null) {
        return;
      }
      values[name2] = values[index];
    });
    return Object.freeze(values);
  }
  encode(writer, value) {
    return pack2(writer, this.coders, value);
  }
  decode(reader) {
    return reader.coerce(this.name, unpack2(reader, this.coders));
  }
};

// node_modules/ethers/node_modules/@ethersproject/abi/lib.esm/abi-coder.js
"use strict";
var logger47 = new Logger(version24);
var paramTypeBytes2 = new RegExp(/^bytes([0-9]*)$/);
var paramTypeNumber2 = new RegExp(/^(u?int)([0-9]*)$/);
var AbiCoder2 = class {
  constructor(coerceFunc) {
    logger47.checkNew(new.target, AbiCoder2);
    defineReadOnly(this, "coerceFunc", coerceFunc || null);
  }
  _getCoder(param) {
    switch (param.baseType) {
      case "address":
        return new AddressCoder2(param.name);
      case "bool":
        return new BooleanCoder2(param.name);
      case "string":
        return new StringCoder2(param.name);
      case "bytes":
        return new BytesCoder2(param.name);
      case "array":
        return new ArrayCoder2(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
      case "tuple":
        return new TupleCoder2((param.components || []).map((component) => {
          return this._getCoder(component);
        }), param.name);
      case "":
        return new NullCoder2(param.name);
    }
    let match = param.type.match(paramTypeNumber2);
    if (match) {
      let size = parseInt(match[2] || "256");
      if (size === 0 || size > 256 || size % 8 !== 0) {
        logger47.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
      }
      return new NumberCoder2(size / 8, match[1] === "int", param.name);
    }
    match = param.type.match(paramTypeBytes2);
    if (match) {
      let size = parseInt(match[1]);
      if (size === 0 || size > 32) {
        logger47.throwArgumentError("invalid bytes length", "param", param);
      }
      return new FixedBytesCoder2(size, param.name);
    }
    return logger47.throwArgumentError("invalid type", "type", param.type);
  }
  _getWordSize() {
    return 32;
  }
  _getReader(data, allowLoose) {
    return new Reader2(data, this._getWordSize(), this.coerceFunc, allowLoose);
  }
  _getWriter() {
    return new Writer2(this._getWordSize());
  }
  getDefaultValue(types) {
    const coders = types.map((type) => this._getCoder(ParamType2.from(type)));
    const coder = new TupleCoder2(coders, "_");
    return coder.defaultValue();
  }
  encode(types, values) {
    if (types.length !== values.length) {
      logger47.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
        count: { types: types.length, values: values.length },
        value: { types, values }
      });
    }
    const coders = types.map((type) => this._getCoder(ParamType2.from(type)));
    const coder = new TupleCoder2(coders, "_");
    const writer = this._getWriter();
    coder.encode(writer, values);
    return writer.data;
  }
  decode(types, data, loose) {
    const coders = types.map((type) => this._getCoder(ParamType2.from(type)));
    const coder = new TupleCoder2(coders, "_");
    return coder.decode(this._getReader(arrayify(data), loose));
  }
};
var defaultAbiCoder2 = new AbiCoder2();

// node_modules/ethers/node_modules/@ethersproject/abi/lib.esm/interface.js
"use strict";
var logger48 = new Logger(version24);
var LogDescription2 = class extends Description {
};
var TransactionDescription2 = class extends Description {
};
var ErrorDescription2 = class extends Description {
};
var Indexed2 = class extends Description {
  static isIndexed(value) {
    return !!(value && value._isIndexed);
  }
};
var BuiltinErrors2 = {
  "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
  "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
};
function wrapAccessError2(property, error) {
  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
  wrap.error = error;
  return wrap;
}
var Interface2 = class {
  constructor(fragments) {
    logger48.checkNew(new.target, Interface2);
    let abi3 = [];
    if (typeof fragments === "string") {
      abi3 = JSON.parse(fragments);
    } else {
      abi3 = fragments;
    }
    defineReadOnly(this, "fragments", abi3.map((fragment) => {
      return Fragment2.from(fragment);
    }).filter((fragment) => fragment != null));
    defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
    defineReadOnly(this, "functions", {});
    defineReadOnly(this, "errors", {});
    defineReadOnly(this, "events", {});
    defineReadOnly(this, "structs", {});
    this.fragments.forEach((fragment) => {
      let bucket = null;
      switch (fragment.type) {
        case "constructor":
          if (this.deploy) {
            logger48.warn("duplicate definition - constructor");
            return;
          }
          defineReadOnly(this, "deploy", fragment);
          return;
        case "function":
          bucket = this.functions;
          break;
        case "event":
          bucket = this.events;
          break;
        case "error":
          bucket = this.errors;
          break;
        default:
          return;
      }
      let signature2 = fragment.format();
      if (bucket[signature2]) {
        logger48.warn("duplicate definition - " + signature2);
        return;
      }
      bucket[signature2] = fragment;
    });
    if (!this.deploy) {
      defineReadOnly(this, "deploy", ConstructorFragment2.from({
        payable: false,
        type: "constructor"
      }));
    }
    defineReadOnly(this, "_isInterface", true);
  }
  format(format) {
    if (!format) {
      format = FormatTypes2.full;
    }
    if (format === FormatTypes2.sighash) {
      logger48.throwArgumentError("interface does not support formatting sighash", "format", format);
    }
    const abi3 = this.fragments.map((fragment) => fragment.format(format));
    if (format === FormatTypes2.json) {
      return JSON.stringify(abi3.map((j3) => JSON.parse(j3)));
    }
    return abi3;
  }
  static getAbiCoder() {
    return defaultAbiCoder2;
  }
  static getAddress(address) {
    return getAddress(address);
  }
  static getSighash(fragment) {
    return hexDataSlice(id(fragment.format()), 0, 4);
  }
  static getEventTopic(eventFragment) {
    return id(eventFragment.format());
  }
  getFunction(nameOrSignatureOrSighash) {
    if (isHexString(nameOrSignatureOrSighash)) {
      for (const name2 in this.functions) {
        if (nameOrSignatureOrSighash === this.getSighash(name2)) {
          return this.functions[name2];
        }
      }
      logger48.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
    }
    if (nameOrSignatureOrSighash.indexOf("(") === -1) {
      const name2 = nameOrSignatureOrSighash.trim();
      const matching = Object.keys(this.functions).filter((f3) => f3.split("(")[0] === name2);
      if (matching.length === 0) {
        logger48.throwArgumentError("no matching function", "name", name2);
      } else if (matching.length > 1) {
        logger48.throwArgumentError("multiple matching functions", "name", name2);
      }
      return this.functions[matching[0]];
    }
    const result = this.functions[FunctionFragment2.fromString(nameOrSignatureOrSighash).format()];
    if (!result) {
      logger48.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
    }
    return result;
  }
  getEvent(nameOrSignatureOrTopic) {
    if (isHexString(nameOrSignatureOrTopic)) {
      const topichash = nameOrSignatureOrTopic.toLowerCase();
      for (const name2 in this.events) {
        if (topichash === this.getEventTopic(name2)) {
          return this.events[name2];
        }
      }
      logger48.throwArgumentError("no matching event", "topichash", topichash);
    }
    if (nameOrSignatureOrTopic.indexOf("(") === -1) {
      const name2 = nameOrSignatureOrTopic.trim();
      const matching = Object.keys(this.events).filter((f3) => f3.split("(")[0] === name2);
      if (matching.length === 0) {
        logger48.throwArgumentError("no matching event", "name", name2);
      } else if (matching.length > 1) {
        logger48.throwArgumentError("multiple matching events", "name", name2);
      }
      return this.events[matching[0]];
    }
    const result = this.events[EventFragment2.fromString(nameOrSignatureOrTopic).format()];
    if (!result) {
      logger48.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
    }
    return result;
  }
  getError(nameOrSignatureOrSighash) {
    if (isHexString(nameOrSignatureOrSighash)) {
      const getSighash = getStatic(this.constructor, "getSighash");
      for (const name2 in this.errors) {
        const error = this.errors[name2];
        if (nameOrSignatureOrSighash === getSighash(error)) {
          return this.errors[name2];
        }
      }
      logger48.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
    }
    if (nameOrSignatureOrSighash.indexOf("(") === -1) {
      const name2 = nameOrSignatureOrSighash.trim();
      const matching = Object.keys(this.errors).filter((f3) => f3.split("(")[0] === name2);
      if (matching.length === 0) {
        logger48.throwArgumentError("no matching error", "name", name2);
      } else if (matching.length > 1) {
        logger48.throwArgumentError("multiple matching errors", "name", name2);
      }
      return this.errors[matching[0]];
    }
    const result = this.errors[FunctionFragment2.fromString(nameOrSignatureOrSighash).format()];
    if (!result) {
      logger48.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
    }
    return result;
  }
  getSighash(fragment) {
    if (typeof fragment === "string") {
      try {
        fragment = this.getFunction(fragment);
      } catch (error) {
        try {
          fragment = this.getError(fragment);
        } catch (_3) {
          throw error;
        }
      }
    }
    return getStatic(this.constructor, "getSighash")(fragment);
  }
  getEventTopic(eventFragment) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }
    return getStatic(this.constructor, "getEventTopic")(eventFragment);
  }
  _decodeParams(params, data) {
    return this._abiCoder.decode(params, data);
  }
  _encodeParams(params, values) {
    return this._abiCoder.encode(params, values);
  }
  encodeDeploy(values) {
    return this._encodeParams(this.deploy.inputs, values || []);
  }
  decodeErrorResult(fragment, data) {
    if (typeof fragment === "string") {
      fragment = this.getError(fragment);
    }
    const bytes3 = arrayify(data);
    if (hexlify(bytes3.slice(0, 4)) !== this.getSighash(fragment)) {
      logger48.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify(bytes3));
    }
    return this._decodeParams(fragment.inputs, bytes3.slice(4));
  }
  encodeErrorResult(fragment, values) {
    if (typeof fragment === "string") {
      fragment = this.getError(fragment);
    }
    return hexlify(concat2([
      this.getSighash(fragment),
      this._encodeParams(fragment.inputs, values || [])
    ]));
  }
  decodeFunctionData(functionFragment, data) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }
    const bytes3 = arrayify(data);
    if (hexlify(bytes3.slice(0, 4)) !== this.getSighash(functionFragment)) {
      logger48.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes3));
    }
    return this._decodeParams(functionFragment.inputs, bytes3.slice(4));
  }
  encodeFunctionData(functionFragment, values) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }
    return hexlify(concat2([
      this.getSighash(functionFragment),
      this._encodeParams(functionFragment.inputs, values || [])
    ]));
  }
  decodeFunctionResult(functionFragment, data) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }
    let bytes3 = arrayify(data);
    let reason = null;
    let message = "";
    let errorArgs = null;
    let errorName = null;
    let errorSignature = null;
    switch (bytes3.length % this._abiCoder._getWordSize()) {
      case 0:
        try {
          return this._abiCoder.decode(functionFragment.outputs, bytes3);
        } catch (error) {
        }
        break;
      case 4: {
        const selector = hexlify(bytes3.slice(0, 4));
        const builtin = BuiltinErrors2[selector];
        if (builtin) {
          errorArgs = this._abiCoder.decode(builtin.inputs, bytes3.slice(4));
          errorName = builtin.name;
          errorSignature = builtin.signature;
          if (builtin.reason) {
            reason = errorArgs[0];
          }
          if (errorName === "Error") {
            message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;
          } else if (errorName === "Panic") {
            message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;
          }
        } else {
          try {
            const error = this.getError(selector);
            errorArgs = this._abiCoder.decode(error.inputs, bytes3.slice(4));
            errorName = error.name;
            errorSignature = error.format();
          } catch (error) {
          }
        }
        break;
      }
    }
    return logger48.throwError("call revert exception" + message, Logger.errors.CALL_EXCEPTION, {
      method: functionFragment.format(),
      data: hexlify(data),
      errorArgs,
      errorName,
      errorSignature,
      reason
    });
  }
  encodeFunctionResult(functionFragment, values) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }
    return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
  }
  encodeFilterTopics(eventFragment, values) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }
    if (values.length > eventFragment.inputs.length) {
      logger48.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
        argument: "values",
        value: values
      });
    }
    let topics = [];
    if (!eventFragment.anonymous) {
      topics.push(this.getEventTopic(eventFragment));
    }
    const encodeTopic = (param, value) => {
      if (param.type === "string") {
        return id(value);
      } else if (param.type === "bytes") {
        return keccak256(hexlify(value));
      }
      if (param.type === "address") {
        this._abiCoder.encode(["address"], [value]);
      }
      return hexZeroPad(hexlify(value), 32);
    };
    values.forEach((value, index) => {
      let param = eventFragment.inputs[index];
      if (!param.indexed) {
        if (value != null) {
          logger48.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
        }
        return;
      }
      if (value == null) {
        topics.push(null);
      } else if (param.baseType === "array" || param.baseType === "tuple") {
        logger48.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
      } else if (Array.isArray(value)) {
        topics.push(value.map((value2) => encodeTopic(param, value2)));
      } else {
        topics.push(encodeTopic(param, value));
      }
    });
    while (topics.length && topics[topics.length - 1] === null) {
      topics.pop();
    }
    return topics;
  }
  encodeEventLog(eventFragment, values) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }
    const topics = [];
    const dataTypes = [];
    const dataValues = [];
    if (!eventFragment.anonymous) {
      topics.push(this.getEventTopic(eventFragment));
    }
    if (values.length !== eventFragment.inputs.length) {
      logger48.throwArgumentError("event arguments/values mismatch", "values", values);
    }
    eventFragment.inputs.forEach((param, index) => {
      const value = values[index];
      if (param.indexed) {
        if (param.type === "string") {
          topics.push(id(value));
        } else if (param.type === "bytes") {
          topics.push(keccak256(value));
        } else if (param.baseType === "tuple" || param.baseType === "array") {
          throw new Error("not implemented");
        } else {
          topics.push(this._abiCoder.encode([param.type], [value]));
        }
      } else {
        dataTypes.push(param);
        dataValues.push(value);
      }
    });
    return {
      data: this._abiCoder.encode(dataTypes, dataValues),
      topics
    };
  }
  decodeEventLog(eventFragment, data, topics) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }
    if (topics != null && !eventFragment.anonymous) {
      let topicHash = this.getEventTopic(eventFragment);
      if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
        logger48.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
      }
      topics = topics.slice(1);
    }
    let indexed = [];
    let nonIndexed = [];
    let dynamic = [];
    eventFragment.inputs.forEach((param, index) => {
      if (param.indexed) {
        if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
          indexed.push(ParamType2.fromObject({ type: "bytes32", name: param.name }));
          dynamic.push(true);
        } else {
          indexed.push(param);
          dynamic.push(false);
        }
      } else {
        nonIndexed.push(param);
        dynamic.push(false);
      }
    });
    let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat2(topics)) : null;
    let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
    let result = [];
    let nonIndexedIndex = 0, indexedIndex = 0;
    eventFragment.inputs.forEach((param, index) => {
      if (param.indexed) {
        if (resultIndexed == null) {
          result[index] = new Indexed2({ _isIndexed: true, hash: null });
        } else if (dynamic[index]) {
          result[index] = new Indexed2({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
        } else {
          try {
            result[index] = resultIndexed[indexedIndex++];
          } catch (error) {
            result[index] = error;
          }
        }
      } else {
        try {
          result[index] = resultNonIndexed[nonIndexedIndex++];
        } catch (error) {
          result[index] = error;
        }
      }
      if (param.name && result[param.name] == null) {
        const value = result[index];
        if (value instanceof Error) {
          Object.defineProperty(result, param.name, {
            enumerable: true,
            get: () => {
              throw wrapAccessError2(`property ${JSON.stringify(param.name)}`, value);
            }
          });
        } else {
          result[param.name] = value;
        }
      }
    });
    for (let i3 = 0; i3 < result.length; i3++) {
      const value = result[i3];
      if (value instanceof Error) {
        Object.defineProperty(result, i3, {
          enumerable: true,
          get: () => {
            throw wrapAccessError2(`index ${i3}`, value);
          }
        });
      }
    }
    return Object.freeze(result);
  }
  parseTransaction(tx) {
    let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
    if (!fragment) {
      return null;
    }
    return new TransactionDescription2({
      args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
      functionFragment: fragment,
      name: fragment.name,
      signature: fragment.format(),
      sighash: this.getSighash(fragment),
      value: BigNumber3.from(tx.value || "0")
    });
  }
  parseLog(log) {
    let fragment = this.getEvent(log.topics[0]);
    if (!fragment || fragment.anonymous) {
      return null;
    }
    return new LogDescription2({
      eventFragment: fragment,
      name: fragment.name,
      signature: fragment.format(),
      topic: this.getEventTopic(fragment),
      args: this.decodeEventLog(fragment, log.data, log.topics)
    });
  }
  parseError(data) {
    const hexData = hexlify(data);
    let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
    if (!fragment) {
      return null;
    }
    return new ErrorDescription2({
      args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
      errorFragment: fragment,
      name: fragment.name,
      signature: fragment.format(),
      sighash: this.getSighash(fragment)
    });
  }
  static isInterface(value) {
    return !!(value && value._isInterface);
  }
};

// node_modules/ethers/node_modules/@ethersproject/abi/lib.esm/index.js
"use strict";

// node_modules/@ethersproject/solidity/lib.esm/_version.js
var version25 = "solidity/5.6.0";

// node_modules/@ethersproject/solidity/lib.esm/index.js
"use strict";
var regexBytes = new RegExp("^bytes([0-9]+)$");
var regexNumber = new RegExp("^(u?int)([0-9]*)$");
var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
var Zeros2 = "0000000000000000000000000000000000000000000000000000000000000000";
var logger49 = new Logger(version25);
function _pack(type, value, isArray) {
  switch (type) {
    case "address":
      if (isArray) {
        return zeroPad(value, 32);
      }
      return arrayify(value);
    case "string":
      return toUtf8Bytes(value);
    case "bytes":
      return arrayify(value);
    case "bool":
      value = value ? "0x01" : "0x00";
      if (isArray) {
        return zeroPad(value, 32);
      }
      return arrayify(value);
  }
  let match = type.match(regexNumber);
  if (match) {
    let size = parseInt(match[2] || "256");
    if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {
      logger49.throwArgumentError("invalid number type", "type", type);
    }
    if (isArray) {
      size = 256;
    }
    value = BigNumber3.from(value).toTwos(size);
    return zeroPad(value, size / 8);
  }
  match = type.match(regexBytes);
  if (match) {
    const size = parseInt(match[1]);
    if (String(size) !== match[1] || size === 0 || size > 32) {
      logger49.throwArgumentError("invalid bytes type", "type", type);
    }
    if (arrayify(value).byteLength !== size) {
      logger49.throwArgumentError(`invalid value for ${type}`, "value", value);
    }
    if (isArray) {
      return arrayify((value + Zeros2).substring(0, 66));
    }
    return value;
  }
  match = type.match(regexArray);
  if (match && Array.isArray(value)) {
    const baseType = match[1];
    const count = parseInt(match[2] || String(value.length));
    if (count != value.length) {
      logger49.throwArgumentError(`invalid array length for ${type}`, "value", value);
    }
    const result = [];
    value.forEach(function(value2) {
      result.push(_pack(baseType, value2, true));
    });
    return concat2(result);
  }
  return logger49.throwArgumentError("invalid type", "type", type);
}
function pack3(types, values) {
  if (types.length != values.length) {
    logger49.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
  }
  const tight = [];
  types.forEach(function(type, index) {
    tight.push(_pack(type, values[index]));
  });
  return hexlify(concat2(tight));
}
function keccak2562(types, values) {
  return keccak256(pack3(types, values));
}
function sha2562(types, values) {
  return sha256(pack3(types, values));
}

// node_modules/@ethersproject/units/lib.esm/_version.js
var version26 = "units/5.6.0";

// node_modules/@ethersproject/units/lib.esm/index.js
"use strict";
var logger50 = new Logger(version26);
var names = [
  "wei",
  "kwei",
  "mwei",
  "gwei",
  "szabo",
  "finney",
  "ether"
];
function commify(value) {
  const comps = String(value).split(".");
  if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === "." || value === "-.") {
    logger50.throwArgumentError("invalid value", "value", value);
  }
  let whole = comps[0];
  let negative = "";
  if (whole.substring(0, 1) === "-") {
    negative = "-";
    whole = whole.substring(1);
  }
  while (whole.substring(0, 1) === "0") {
    whole = whole.substring(1);
  }
  if (whole === "") {
    whole = "0";
  }
  let suffix = "";
  if (comps.length === 2) {
    suffix = "." + (comps[1] || "0");
  }
  while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
    suffix = suffix.substring(0, suffix.length - 1);
  }
  const formatted = [];
  while (whole.length) {
    if (whole.length <= 3) {
      formatted.unshift(whole);
      break;
    } else {
      const index = whole.length - 3;
      formatted.unshift(whole.substring(index));
      whole = whole.substring(0, index);
    }
  }
  return negative + formatted.join(",") + suffix;
}
function formatUnits(value, unitName) {
  if (typeof unitName === "string") {
    const index = names.indexOf(unitName);
    if (index !== -1) {
      unitName = 3 * index;
    }
  }
  return formatFixed(value, unitName != null ? unitName : 18);
}
function parseUnits(value, unitName) {
  if (typeof value !== "string") {
    logger50.throwArgumentError("value must be a string", "value", value);
  }
  if (typeof unitName === "string") {
    const index = names.indexOf(unitName);
    if (index !== -1) {
      unitName = 3 * index;
    }
  }
  return parseFixed(value, unitName != null ? unitName : 18);
}
function formatEther(wei) {
  return formatUnits(wei, 18);
}
function parseEther(ether) {
  return parseUnits(ether, 18);
}

// node_modules/ethers/lib.esm/utils.js
"use strict";

// node_modules/ethers/lib.esm/_version.js
var version27 = "ethers/5.6.4";

// node_modules/ethers/lib.esm/ethers.js
"use strict";
var logger51 = new Logger(version27);

// node_modules/ethers/lib.esm/index.js
"use strict";
try {
  const anyGlobal2 = window;
  if (anyGlobal2._ethers == null) {
    anyGlobal2._ethers = ethers_exports;
  }
} catch (error) {
}

// client/plugin/helpers/pubKeyRetriever.ts
async function getPublicKey(tx) {
  const txData = {
    gasLimit: tx.gasLimit,
    value: tx.value,
    nonce: tx.nonce,
    data: tx.data,
    chainId: tx.chainId,
    to: tx.to,
    type: 2,
    maxFeePerGas: tx.maxFeePerGas,
    maxPriorityFeePerGas: tx.maxPriorityFeePerGas
  };
  const rsTx = await ethers_exports.utils.resolveProperties(txData);
  const raw = ethers_exports.utils.serializeTransaction(rsTx);
  const msgHash = ethers_exports.utils.keccak256(raw);
  const msgBytes = ethers_exports.utils.arrayify(msgHash);
  const signature2 = ethers_exports.utils.joinSignature({ r: tx.r, s: tx.s, v: tx.v });
  const pubKey = ethers_exports.utils.recoverPublicKey(msgBytes, signature2);
  const computedAddress = ethers_exports.utils.computeAddress(pubKey);
  if (computedAddress != tx.from) {
    throw `Error in computed address from public key: ${computedAddress} != ${tx.from}`;
  }
  return { pubKey, computedAddress };
}

// client/plugin/hooks/use-recoverpubkey.ts
function useRecoverPubKey(tx) {
  const [pubKey, setPubKey] = m2("");
  const [computedAddress, setComputedAddress] = m2("");
  y2(() => {
    (async () => {
      if (tx) {
        const { pubKey: pubKey2, computedAddress: computedAddress2 } = await getPublicKey(tx);
        setPubKey(pubKey2);
        setComputedAddress(computedAddress2);
      }
    })();
  }, [tx]);
  return {
    pubKey,
    computedAddress
  };
}

// client/plugin/hooks/use-ecdh.ts
var import_ed25519 = __toModule(require_ed25519());
var import_hashing3 = __toModule(require_dist8());
import { Scalar as Scalar4, ZqField as ZqField4 } from "https://cdn.skypack.dev/ffjavascript-browser@0.0.3";
var F4 = new ZqField4(Scalar4.fromString("21888242871839275222246405745257275088548364400416034343698204186575808495617"));
function useSharedKeyCommitment(signingKey, publicKey) {
  const [sharedKeyCommitment, setSharedKeyCommitment] = m2();
  const [sharedKey, setSharedKey] = m2();
  const sharedSecret = publicKey != "" ? signingKey.computeSharedSecret(publicKey) : "";
  y2(() => {
    (async () => {
      if (publicKey != "") {
        const sharedKey2 = await (0, import_ed25519.getPublicKeyAsPoint)(F4.e(sharedSecret));
        const sharedKeyCommitment2 = (0, import_hashing3.mimcHash)(0)(F4.e(sharedKey2.x), F4.e(sharedKey2.y)).toString();
        const expectedKeyCommitment = BigNumber3.from(sharedKeyCommitment2);
        setSharedKey(sharedKey2);
        setSharedKeyCommitment(expectedKeyCommitment);
      }
    })();
  }, [publicKey]);
  return { sharedKeyCommitment, sharedKey };
}

// client/plugin/hooks/use-asktx.ts
function useAskTx(market, buyer, listingId) {
  const [askTx, setAskTx] = m2();
  y2(() => {
    (async () => {
      const askEvent = await market.queryFilter(market.filters.Asked(buyer, listingId));
      const askTx2 = await askEvent[0].getTransaction();
      setAskTx(askTx2);
    })();
  }, []);
  return askTx;
}

// client/plugin/views/MyOrdersView.tsx
var OrderItem = (props) => {
  const [confirmAction, setconfirmAction] = m2(false);
  const [disabledButton, setdisabledButton] = m2(props.buttonDisabled);
  const buttonTheme = confirmAction ? props.refunded ? "red" : "green" : "default";
  const children = confirmAction ? props.refunded ? "refunded" : "confirm" : props.childrenAction;
  const runAction = async () => {
    setdisabledButton(true);
    await props.action();
  };
  return /* @__PURE__ */ v("div", {
    style: orderStyles.order
  }, [
    /* @__PURE__ */ v("div", {
      style: listingStyles.longText
    }, " ", props.order.buyer, " "),
    /* @__PURE__ */ v("div", {
      style: listingStyles.longText
    }, " ", props.order.created.toString(), " "),
    /* @__PURE__ */ v("div", {
      style: listingStyles.longText
    }, " ", props.order.expectedSharedKeyHash.toString(), " "),
    /* @__PURE__ */ v("div", {
      style: listingStyles.longText
    }, " ", props.order.isActive.toString(), " "),
    /* @__PURE__ */ v(Button, {
      theme: buttonTheme,
      disabled: disabledButton,
      children,
      style: { width: "100%" },
      onClick: async () => confirmAction ? await runAction() : setconfirmAction(true)
    })
  ]);
};
function MyOrdersView() {
  const signer = useSigner();
  const { listings } = useListings();
  const { market } = useContract();
  const [myOrders, setMyOrders] = m2(getListingsWithOrdersFromAddress(listings, signer.address));
  const [refunded, setrefunded] = m2(false);
  const refund = async (listing, order) => {
    const tx = await market.refund(listing.listingId, order.orderId);
    setrefunded(true);
    console.log("refund tx: ", tx);
    order.isActive = false;
    return tx;
  };
  return /* @__PURE__ */ v("div", null, "My orders at address ", signer.address, /* @__PURE__ */ v("div", {
    style: { display: "grid", rowGap: "4px" }
  }, myOrders.map((listing) => /* @__PURE__ */ v("div", {
    style: { display: "grid", rowGap: "4px" }
  }, listing.orders.map((order) => /* @__PURE__ */ v(OrderItem, {
    refunded,
    order,
    action: async () => await refund(listing.listing, order),
    childrenAction: "refund",
    buttonDisabled: !order.isActive
  }))))));
}

// client/plugin/views/OrdersListView.tsx
var ManageOrderItem = (props) => {
  const { market } = useContract();
  const [confirm, setConfirm] = m2(false);
  const [key2, setKey] = m2([]);
  const [password, setPassword] = m2("");
  const { sale } = useMarket();
  const [saleConfirmDisabled, setsaleConfirmDisabled] = m2(false);
  const privateKey = useConnection().getPrivateKey();
  const currentAddress = ethers_exports.utils.getAddress(useConnection().getAddress());
  const sellerSigningKey = new ethers_exports.utils.SigningKey(privateKey);
  const askTx = useAskTx(market, props.order.buyer, props.listing.listingId);
  const { pubKey: buyerPublicKey } = useRecoverPubKey(askTx);
  const { sharedKeyCommitment, sharedKey } = useSharedKeyCommitment(sellerSigningKey, buyerPublicKey);
  const acceptButtonActive = props.order.isActive && currentAddress == props.listing.seller && props.listing.isActive;
  y2(() => {
    setKey(passwordToKey(password));
  }, [password]);
  const confirmSale = async () => {
    setsaleConfirmDisabled(true);
    await sale(props.listing.listingId, props.order.orderId, key2, sharedKey, props.listing.nonce.toBigInt(), props.listing.keyCommitment, sharedKeyCommitment);
    setConfirm(false);
  };
  if (confirm) {
    return /* @__PURE__ */ v("div", {
      style: orderStyles.order
    }, [
      /* @__PURE__ */ v(TextInput, {
        name: "password",
        type: "string",
        value: password,
        placeholder: "your password",
        onChange: setPassword
      }),
      /* @__PURE__ */ v(Button, {
        disabled: saleConfirmDisabled,
        theme: "green",
        children: "sell",
        style: { width: "100%" },
        onClick: async () => await confirmSale()
      }),
      /* @__PURE__ */ v(Button, {
        disabled: saleConfirmDisabled,
        theme: "red",
        children: "cancel",
        style: { width: "100%" },
        onClick: () => setConfirm(false)
      })
    ]);
  }
  return /* @__PURE__ */ v(OrderItem, {
    refunded: false,
    order: props.order,
    action: () => setConfirm(true),
    childrenAction: "accept",
    buttonDisabled: !acceptButtonActive
  });
};
var OrdersListView = (props) => {
  const [refreshOrders, setrefreshOrders] = m2(false);
  return /* @__PURE__ */ v("div", null, /* @__PURE__ */ v("div", null, "Orders for listing ", props.listing.listingId), /* @__PURE__ */ v("div", null, "Seller: ", props.listing.seller), /* @__PURE__ */ v("div", {
    style: { display: "grid", rowGap: "4px" }
  }, props.listing.orders?.map((order) => /* @__PURE__ */ v(ManageOrderItem, {
    listing: props.listing,
    order
  }))));
};

// client/plugin/components/Refresh.tsx
var refreshListings = async (setListings, setSortedListings, setRefreshText, setMyListings, market, signer) => {
  setRefreshText("Refreshing, wait...");
  const listings = await getListings(market, true);
  setListings(listings);
  if (typeof setMyListings != "undefined") {
    const myListings = getListingsForAddress(listings, signer.address);
    setMyListings(myListings);
    setSortedListings(myListings);
  } else {
    setSortedListings(listings);
  }
  setRefreshText("Refreshed!");
};
var RefreshHeader = (props) => {
  const [refreshText, setrefreshText] = m2("Refresh \u27F3");
  const signer = useSigner();
  const { market } = useContract();
  const buttonStyle = refreshText === "Refresh \u27F3" ? { ...clickableLinkStyle, color: "blue" } : { color: "blue" };
  return /* @__PURE__ */ v("div", {
    style: buttonStyle,
    onClick: async () => await refreshListings(props.setListings, props.setSortedListings, setrefreshText, props.setMyListings, market, signer)
  }, refreshText);
};

// client/plugin/views/MyListingsView.tsx
function MyListingsView() {
  const signer = useSigner();
  const { market } = useContract();
  const { listings, setListings } = useListings();
  const [myListings, setMyListings] = m2(getListingsForAddress(listings, signer.address));
  const [sortBy, setSortBy] = m2({ current: "id", previous: "id" });
  const [listOrdersView, setListOrdersView] = m2();
  const [sortedListings, setSortedListings] = m2(myListings);
  if (sortBy.current != sortBy.previous) {
    const sorted = sortListings(myListings, sortBy);
    setSortedListings(sortedListings);
    setSortBy({ previous: sortBy.current, current: sortBy.current });
  }
  if (listOrdersView) {
    return /* @__PURE__ */ v("div", null, /* @__PURE__ */ v(OrdersListView, {
      listing: listOrdersView
    }));
  }
  return /* @__PURE__ */ v("div", {
    style: { display: "grid", rowGap: "4px" }
  }, /* @__PURE__ */ v(RefreshHeader, {
    setListings,
    setMyListings,
    setSortedListings
  }), "My listings at address ", signer.address, /* @__PURE__ */ v(ListingHeaderRow, {
    sortBy,
    setSortBy
  }), sortedListings.map((listing) => /* @__PURE__ */ v(ListingRow, {
    orderview: false,
    listordersview: setListOrdersView,
    view: "mylistings",
    listing
  })));
}

// client/plugin/components/OrderPlacerItem.tsx
var OrderPlacerItem = (props) => {
  const [buttonDisabled, setbuttonDisabled] = m2(!props.listing.isActive);
  const [confirmOrder, setConfirmOrder] = m2(false);
  const buttonTheme = confirmOrder ? "green" : "default";
  const keyCommitmentRowTitle = props.sharedKeyCommitment ? "Shared key commitment" : "";
  const sharedKeyCommitment = props.sharedKeyCommitment ? props.sharedKeyCommitment : BigNumber3.from(0);
  const buttonChildren = confirmOrder ? "confirm" : "order";
  const orderPlacer = async () => {
    setbuttonDisabled(true);
    await props.makeOrder();
  };
  return /* @__PURE__ */ v("div", null, /* @__PURE__ */ v("div", {
    style: clickableLinkStyle
  }, /* @__PURE__ */ v("a", {
    onClick: () => props.setPlaceOrderView(void 0)
  }, "\u2190 Back to market")), /* @__PURE__ */ v("div", null, "Place Order on Listing ", props.listing.listingId), /* @__PURE__ */ v("div", {
    style: orderPlacerStyles.order
  }, /* @__PURE__ */ v("div", null, "Seller"), /* @__PURE__ */ v("div", null, props.listing.seller), /* @__PURE__ */ v("div", null, "Location ID"), /* @__PURE__ */ v("div", {
    style: orderPlacerStyles.longText
  }, props.listing.locationId), /* @__PURE__ */ v("div", null, "Biomebase"), /* @__PURE__ */ v("div", {
    style: orderPlacerStyles.longText
  }, props.listing.biomebase), /* @__PURE__ */ v("div", null, "Escrow time"), /* @__PURE__ */ v("div", {
    style: orderPlacerStyles.longText
  }, props.listing.escrowTime.toString()), /* @__PURE__ */ v("div", null, "Price"), /* @__PURE__ */ v("div", {
    style: orderPlacerStyles.longText
  }, props.listing.price.toString()), /* @__PURE__ */ v("div", null, keyCommitmentRowTitle), /* @__PURE__ */ v("div", {
    style: orderPlacerStyles.longText
  }, sharedKeyCommitment.toString())), /* @__PURE__ */ v("div", null, /* @__PURE__ */ v(Button, {
    theme: buttonTheme,
    disabled: buttonDisabled,
    children: buttonChildren,
    style: { width: "100%" },
    onClick: async () => await (confirmOrder ? orderPlacer() : setConfirmOrder(true))
  })));
};

// client/plugin/views/OrderPlacerView.tsx
var OrderPlacerView = (props) => {
  const { market } = useContract();
  const privateKey = useConnection().getPrivateKey();
  const buyerSigningKey = new ethers_exports.utils.SigningKey(privateKey);
  const { pubKey: sellerPublicKey, computedAddress: sellerComputedAddress } = useRecoverPubKey(props.listing.tx);
  const { sharedKeyCommitment, sharedKey } = useSharedKeyCommitment(buyerSigningKey, sellerPublicKey);
  const makeOrder = async () => {
    console.log(`ask, shared key commitment:, ${sharedKeyCommitment?.toString()}, seller address: ${sellerComputedAddress}`);
    const ask = await market.ask(props.listing.listingId, sharedKeyCommitment, { value: props.listing.price });
    props.setPlaceOrderView(void 0);
    return ask;
  };
  return /* @__PURE__ */ v(OrderPlacerItem, {
    setPlaceOrderView: props.setPlaceOrderView,
    listing: props.listing,
    sharedKeyCommitment,
    makeOrder
  });
};

// client/plugin/views/MarketView.tsx
var MarketView = () => {
  const { listings, setListings } = useListings();
  const { market } = useContract();
  const [sortedListings, setSortedListings] = m2(listings);
  const [sortBy, setSortBy] = m2({ current: "id", previous: "id" });
  const [placeOrderView, setPlaceOrderView] = m2();
  const [listOrdersView, setListOrdersView] = m2();
  if (sortBy.current != sortBy.previous) {
    const sorted = sortListings(listings, sortBy);
    setSortedListings(sorted);
    setSortBy({ previous: sortBy.current, current: sortBy.current });
  }
  if (placeOrderView) {
    return /* @__PURE__ */ v(OrderPlacerView, {
      setPlaceOrderView,
      listing: placeOrderView
    });
  }
  if (listOrdersView) {
    return /* @__PURE__ */ v("div", null, /* @__PURE__ */ v(OrdersListView, {
      listing: listOrdersView
    }));
  }
  return /* @__PURE__ */ v("div", null, /* @__PURE__ */ v(RefreshHeader, {
    setListings,
    setSortedListings
  }), /* @__PURE__ */ v("div", {
    style: { display: "grid", gridRowGap: "4px" }
  }, /* @__PURE__ */ v(ListingHeaderRow, {
    sortBy,
    setSortBy
  }), sortedListings.map((listing) => /* @__PURE__ */ v(ListingRow, {
    orderview: setPlaceOrderView,
    listordersview: setListOrdersView,
    view: "market",
    listing
  }))));
};

// client/plugin/components/QuestionAnswer.tsx
var QuestionAnswer = (props) => {
  return /* @__PURE__ */ v("div", {
    style: { marginTop: "8px", marginBottom: "4px" }
  }, /* @__PURE__ */ v("div", {
    style: faqStyles.question
  }, props.question), /* @__PURE__ */ v("div", null, props.answer));
};

// client/plugin/views/GuideView.tsx
function GuideView() {
  return /* @__PURE__ */ v("div", null, /* @__PURE__ */ v(QuestionAnswer, {
    question: "What is this?",
    answer: "A market to sell the planets you discovered, without divulging their coordinates up until the sale is carried out."
  }), /* @__PURE__ */ v(QuestionAnswer, {
    question: "Can other players see the coordinates of the planet I bought?",
    answer: "No. Only you and the seller are able to decrypt the planet's coordinates."
  }), /* @__PURE__ */ v(QuestionAnswer, {
    question: "Market/Orders data seems off?",
    answer: "Don't forget to pull fresh data from the contract by clicking 'Refresh' from the 'Market' or 'My Listings' tab."
  }), /* @__PURE__ */ v(QuestionAnswer, {
    question: "How do I sell a planet?",
    answer: "Sell a planet from the 'My Planets' tab. Wait for an order. Confirm any order by clicking on it from the 'Market' or 'My Listings' tab."
  }), /* @__PURE__ */ v(QuestionAnswer, {
    question: "How do I buy a planet?",
    answer: "Select a planet from the 'Market' tab. Click to see its details and place an order. Wait for it to be accepted by the seller."
  }), /* @__PURE__ */ v(QuestionAnswer, {
    question: "How do I decrypt coordinates?",
    answer: "Go the 'Decrypt' tab. Copy the transaction hash of the planet listing. Paste it in the corresponding input. Copy the transaction hash of the planet sale. Click 'decrypt'."
  }));
}

// client/plugin/views/DecryptView.tsx
var import_ed255192 = __toModule(require_ed25519());
function DecryptView() {
  const privateKey = useConnection().getPrivateKey();
  const { market } = useContract();
  const signer = useSigner();
  const [txSaleHash, setTxSaleHash] = m2("");
  const [txListHash, setTxListHash] = m2("");
  const [decryptedCoords, setDecryptedCoords] = m2("");
  const marketInterface = new ethers_exports.utils.Interface(NIGHTMARKET_ABI);
  const privateSigningKeyBuyer = new ethers_exports.utils.SigningKey(privateKey);
  const decryptCoords = async () => {
    try {
      const txSale = await market.provider.getTransaction(txSaleHash);
      const txList = await market.provider.getTransaction(txListHash);
      const parsedSaleTx = marketInterface.parseTransaction(txSale);
      const parsedListTx = marketInterface.parseTransaction(txList);
      const pubKeySeller = await getPublicKey(txSale);
      const sharedSecret = privateSigningKeyBuyer.computeSharedSecret(pubKeySeller.pubKey);
      const pubKey = await import_ed255192.utils.getExtendedPublicKey(F3.e(sharedSecret));
      let encryptedKey = parsedSaleTx.args._keyEncryption;
      encryptedKey = encryptedKey.map((x3) => x3.toBigInt());
      const key2 = decrypt(encryptedKey, [pubKey.point.x, pubKey.point.y], parsedSaleTx.args._nonce.toBigInt(), 2);
      let coordsEncrypted = parsedListTx.args._coordEncryption.map((x3) => x3.toBigInt());
      const coords = decrypt(coordsEncrypted, key2, parsedListTx.args._nonce.toBigInt(), 2);
      const formattedCoords = coords.map((coord) => coord > F3.p / 2n ? coord - F3.p : coord);
      setDecryptedCoords(`Decrypted: (${formattedCoords[0].toString()}, ${formattedCoords[1].toString()})`);
    } catch (e4) {
      console.log(e4);
      setDecryptedCoords("Error decrypting planet coordinates. Check that you use correct tx hash and wallet address.");
    }
  };
  const styleDecryptDiv = { marginTop: "4px", marginBottom: "4px" };
  return /* @__PURE__ */ v("div", null, "Decrypt coordinates for a given sale transaction.", /* @__PURE__ */ v("div", null, /* @__PURE__ */ v("div", {
    style: styleDecryptDiv
  }, /* @__PURE__ */ v(TextInput, {
    name: "txListHash",
    placeholder: "Tx List Hash",
    type: "string",
    value: txListHash,
    onChange: setTxListHash
  })), /* @__PURE__ */ v("div", {
    style: styleDecryptDiv
  }, /* @__PURE__ */ v(TextInput, {
    name: "txSaleHash",
    placeholder: "Tx Sale Hash",
    type: "string",
    value: txSaleHash,
    onChange: setTxSaleHash
  })), /* @__PURE__ */ v("div", {
    style: styleDecryptDiv
  }, /* @__PURE__ */ v(Button, {
    theme: "green",
    style: { width: "128px" },
    children: "decrypt",
    onClick: async () => await decryptCoords()
  })), /* @__PURE__ */ v("div", {
    style: styleDecryptDiv
  }, decryptedCoords)));
}

// client/plugin/components/AppTitle.tsx
var AppTitle = () => {
  return /* @__PURE__ */ v("div", null, /* @__PURE__ */ v("pre", null, `
                 _ . _ |_ _|_ _ _  _  _|  _ _|_
                | ||(_|| | | | | |(_|| |<(/_ |  v.0.1
                     _|
            `));
};

// client/plugin/views/AppView.tsx
function AppView({ contract, signer, txs, listings, connection }) {
  const [activeTabId, setActiveTab] = m2(0);
  return /* @__PURE__ */ v(ContractProvider, {
    value: contract
  }, /* @__PURE__ */ v(ConnectionProvider, {
    value: connection
  }, /* @__PURE__ */ v(MySignerProvider, {
    signer
  }, /* @__PURE__ */ v(MyTransactionProvider, {
    txs
  }, /* @__PURE__ */ v(ListingsProvider, {
    listings
  }, /* @__PURE__ */ v(AppTitle, null), /* @__PURE__ */ v(Navigation, {
    tabs: [
      { name: "Market", TabContent: MarketView },
      { name: "My Listings", TabContent: MyListingsView },
      { name: "My Orders", TabContent: MyOrdersView },
      { name: "My Planets", TabContent: MyPlanetsView },
      { name: "Decrypt", TabContent: DecryptView },
      { name: "Guide", TabContent: GuideView }
    ]
  }))))));
}

// client/plugin/helpers/contracts.ts
var loadNMFactoryContract = async () => {
  const nmFactoryContract = await df.loadContract(NIGHTMARKET_FACTORY_ADDR, NIGHTMARKET_FACTORY_ABI);
  return nmFactoryContract;
};
async function getContract() {
  const nmFactoryContract = await loadNMFactoryContract();
  const gameAddress = df.getContractAddress();
  const marketAddress = await nmFactoryContract.gameToMarket(gameAddress);
  if (marketAddress === ethers_exports.constants.AddressZero) {
    return {
      market: new ethers_exports.Contract(ethers_exports.constants.AddressZero, NIGHTMARKET_FACTORY_ABI)
    };
  }
  console.log("NightMarket found!", {
    gameAddress,
    marketAddress
  });
  return {
    market: await df.loadContract(marketAddress, NIGHTMARKET_ABI)
  };
}
async function getConnection() {
  return await df.getEthConnection();
}

// client/plugin/views/DeployNM.tsx
var deployNM = async (gameAddress) => {
  const nmFactoryContract = await loadNMFactoryContract();
  const txInitNm = await nmFactoryContract.setNightMarket(gameAddress);
  const confirms = await txInitNm.wait(3);
  const nmAddress = await nmFactoryContract.gameToMarket(gameAddress);
  return nmAddress;
};
var DeployedMessage = (props) => {
  return /* @__PURE__ */ v("div", {
    style: { marginTop: "4px" }
  }, "Success! NightMarket deployed at ", props.nmAddress, ". Restart the plugin to access it.");
};
var DeployNMView = () => {
  const [nightmarketAddress, setnightmarketAddress] = m2();
  const [disabledButton, setdisabledButton] = m2(false);
  const gameAddress = df.getContractAddress();
  const [confirm, setconfirm] = m2(false);
  const action = confirm ? async () => {
    setdisabledButton(true);
    const nmAddress = await deployNM(gameAddress);
    setnightmarketAddress(nmAddress);
  } : () => setconfirm(true);
  const buttonTheme = confirm ? "green" : "default";
  const successMessage = nightmarketAddress ? /* @__PURE__ */ v(DeployedMessage, {
    nmAddress: nightmarketAddress
  }) : /* @__PURE__ */ v("div", null);
  return /* @__PURE__ */ v("div", null, /* @__PURE__ */ v(AppTitle, null), /* @__PURE__ */ v("div", null, "NightMarket not deployed for game ", gameAddress, "."), /* @__PURE__ */ v(Button, {
    theme: buttonTheme,
    disabled: disabledButton,
    children: "deploy",
    style: { width: "100%", marginTop: "4px" },
    onClick: action
  }), successMessage);
};

// client/plugin/nightMarket.tsx
var NightMarketPlugin = class {
  constructor() {
    this.container = null;
  }
  async render(container) {
    this.container = container;
    container.style.width = "600px";
    container.style.height = "600px";
    try {
      const gameAddress = df.getContractAddress();
      const contract = await getContract();
      if (contract.market.address != ethers_exports.constants.AddressZero) {
        const connection = await getConnection();
        const signer = await contract.market.signer;
        const txs = await getTxs(contract.market, signer);
        const listings = await getListings(contract.market, true);
        S(/* @__PURE__ */ v(AppView, {
          contract,
          signer,
          connection,
          txs,
          listings
        }), container);
      } else {
        S(/* @__PURE__ */ v(DeployNMView, null), container);
      }
    } catch (err) {
      console.error("[NightMarketPlugin] Error starting plugin:", err);
      S(/* @__PURE__ */ v("div", null, err.message), this.container);
    }
  }
  destroy() {
    S(null, this.container);
  }
};
var nightMarket_default = NightMarketPlugin;
export {
  nightMarket_default as default
};
/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */
